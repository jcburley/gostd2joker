Default context:
{amd64 linux /usr/local/go /home/craig/.go true false gc [] [go1.1 go1.2 go1.3 go1.4 go1.5 go1.6 go1.7 go1.8 go1.9 go1.10 go1.11]  <nil> <nil> <nil> <nil> <nil> <nil> <nil>}
Walking from /home/craig/github/golang/go/src to /home/craig/github/golang/go/src/archive
Processing sourceDir=/home/craig/github/golang/go/src dump=false:
Walking from /home/craig/github/golang/go/src to /home/craig/github/golang/go/src/archive/tar
Processing sourceDir=/home/craig/github/golang/go/src dump=false:
Package tar_test:
Processing package=tar_test:
Package tar:
Processing package=tar:
Excluding /home/craig/github/golang/go/src/archive/tar/testdata
Walking from /home/craig/github/golang/go/src to /home/craig/github/golang/go/src/archive/zip
Processing sourceDir=/home/craig/github/golang/go/src dump=false:
Package zip:
Processing package=zip:
Package zip_test:
Processing package=zip_test:
Excluding /home/craig/github/golang/go/src/archive/zip/testdata
Walking from /home/craig/github/golang/go/src to /home/craig/github/golang/go/src/bufio
Processing sourceDir=/home/craig/github/golang/go/src dump=false:
Package bufio_test:
Processing package=bufio_test:
Package bufio:
Processing package=bufio:
Excluding /home/craig/github/golang/go/src/builtin
Walking from /home/craig/github/golang/go/src to /home/craig/github/golang/go/src/bytes
Processing sourceDir=/home/craig/github/golang/go/src dump=false:
Package bytes_test:
Processing package=bytes_test:
Package bytes:
Processing package=bytes:
Excluding /home/craig/github/golang/go/src/cmd
Walking from /home/craig/github/golang/go/src to /home/craig/github/golang/go/src/compress
Processing sourceDir=/home/craig/github/golang/go/src dump=false:
Walking from /home/craig/github/golang/go/src to /home/craig/github/golang/go/src/compress/bzip2
Processing sourceDir=/home/craig/github/golang/go/src dump=false:
Package bzip2:
Processing package=bzip2:
Excluding /home/craig/github/golang/go/src/compress/bzip2/testdata
Walking from /home/craig/github/golang/go/src to /home/craig/github/golang/go/src/compress/flate
Processing sourceDir=/home/craig/github/golang/go/src dump=false:
Package flate_test:
Processing package=flate_test:
Package flate:
Processing package=flate:
Excluding /home/craig/github/golang/go/src/compress/flate/testdata
Walking from /home/craig/github/golang/go/src to /home/craig/github/golang/go/src/compress/gzip
Processing sourceDir=/home/craig/github/golang/go/src dump=false:
Package gzip_test:
Processing package=gzip_test:
Package gzip:
Processing package=gzip:
Excluding /home/craig/github/golang/go/src/compress/gzip/testdata
Walking from /home/craig/github/golang/go/src to /home/craig/github/golang/go/src/compress/lzw
Processing sourceDir=/home/craig/github/golang/go/src dump=false:
Package lzw:
Processing package=lzw:
Excluding /home/craig/github/golang/go/src/compress/testdata
Walking from /home/craig/github/golang/go/src to /home/craig/github/golang/go/src/compress/zlib
Processing sourceDir=/home/craig/github/golang/go/src dump=false:
Package zlib_test:
Processing package=zlib_test:
Package zlib:
Processing package=zlib:
Walking from /home/craig/github/golang/go/src to /home/craig/github/golang/go/src/container
Processing sourceDir=/home/craig/github/golang/go/src dump=false:
Walking from /home/craig/github/golang/go/src to /home/craig/github/golang/go/src/container/heap
Processing sourceDir=/home/craig/github/golang/go/src dump=false:
Package heap_test:
Processing package=heap_test:
Package heap:
Processing package=heap:
Walking from /home/craig/github/golang/go/src to /home/craig/github/golang/go/src/container/list
Processing sourceDir=/home/craig/github/golang/go/src dump=false:
Package list_test:
Processing package=list_test:
Package list:
Processing package=list:
Walking from /home/craig/github/golang/go/src to /home/craig/github/golang/go/src/container/ring
Processing sourceDir=/home/craig/github/golang/go/src dump=false:
Package ring:
Processing package=ring:
Package ring_test:
Processing package=ring_test:
Walking from /home/craig/github/golang/go/src to /home/craig/github/golang/go/src/context
Processing sourceDir=/home/craig/github/golang/go/src dump=false:
Package context_test:
Processing package=context_test:
Package context:
Processing package=context:
Walking from /home/craig/github/golang/go/src to /home/craig/github/golang/go/src/crypto
Processing sourceDir=/home/craig/github/golang/go/src dump=false:
Package crypto:
Processing package=crypto:
Walking from /home/craig/github/golang/go/src to /home/craig/github/golang/go/src/crypto/aes
Processing sourceDir=/home/craig/github/golang/go/src dump=false:
Package aes:
Processing package=aes:
Walking from /home/craig/github/golang/go/src to /home/craig/github/golang/go/src/crypto/cipher
Processing sourceDir=/home/craig/github/golang/go/src dump=false:
Package cipher:
Processing package=cipher:
Package cipher_test:
Processing package=cipher_test:
Walking from /home/craig/github/golang/go/src to /home/craig/github/golang/go/src/crypto/des
Processing sourceDir=/home/craig/github/golang/go/src dump=false:
Package des_test:
Processing package=des_test:
Package des:
Processing package=des:
Walking from /home/craig/github/golang/go/src to /home/craig/github/golang/go/src/crypto/dsa
Processing sourceDir=/home/craig/github/golang/go/src dump=false:
Package dsa:
Processing package=dsa:
Walking from /home/craig/github/golang/go/src to /home/craig/github/golang/go/src/crypto/ecdsa
Processing sourceDir=/home/craig/github/golang/go/src dump=false:
Package ecdsa_test:
Processing package=ecdsa_test:
Package ecdsa:
Processing package=ecdsa:
Excluding /home/craig/github/golang/go/src/crypto/ecdsa/testdata
Walking from /home/craig/github/golang/go/src to /home/craig/github/golang/go/src/crypto/elliptic
Processing sourceDir=/home/craig/github/golang/go/src dump=false:
Package elliptic:
Processing package=elliptic:
Walking from /home/craig/github/golang/go/src to /home/craig/github/golang/go/src/crypto/hmac
Processing sourceDir=/home/craig/github/golang/go/src dump=false:
Package hmac:
Processing package=hmac:
Excluding /home/craig/github/golang/go/src/crypto/internal
Walking from /home/craig/github/golang/go/src to /home/craig/github/golang/go/src/crypto/md5
Processing sourceDir=/home/craig/github/golang/go/src dump=false:
Package md5:
Processing package=md5:
Package md5_test:
Processing package=md5_test:
Walking from /home/craig/github/golang/go/src to /home/craig/github/golang/go/src/crypto/rand
Processing sourceDir=/home/craig/github/golang/go/src dump=false:
Package rand_test:
Processing package=rand_test:
Package rand:
Processing package=rand:
Walking from /home/craig/github/golang/go/src to /home/craig/github/golang/go/src/crypto/rc4
Processing sourceDir=/home/craig/github/golang/go/src dump=false:
Package rc4:
Processing package=rc4:
Walking from /home/craig/github/golang/go/src to /home/craig/github/golang/go/src/crypto/rsa
Processing sourceDir=/home/craig/github/golang/go/src dump=false:
Package rsa:
Processing package=rsa:
Excluding /home/craig/github/golang/go/src/crypto/rsa/testdata
Walking from /home/craig/github/golang/go/src to /home/craig/github/golang/go/src/crypto/sha1
Processing sourceDir=/home/craig/github/golang/go/src dump=false:
Package sha1_test:
Processing package=sha1_test:
Package sha1:
Processing package=sha1:
Walking from /home/craig/github/golang/go/src to /home/craig/github/golang/go/src/crypto/sha256
Processing sourceDir=/home/craig/github/golang/go/src dump=false:
Package sha256_test:
Processing package=sha256_test:
Package sha256:
Processing package=sha256:
Walking from /home/craig/github/golang/go/src to /home/craig/github/golang/go/src/crypto/sha512
Processing sourceDir=/home/craig/github/golang/go/src dump=false:
Package sha512:
Processing package=sha512:
Walking from /home/craig/github/golang/go/src to /home/craig/github/golang/go/src/crypto/subtle
Processing sourceDir=/home/craig/github/golang/go/src dump=false:
Package subtle:
Processing package=subtle:
Walking from /home/craig/github/golang/go/src to /home/craig/github/golang/go/src/crypto/tls
Processing sourceDir=/home/craig/github/golang/go/src dump=false:
Package tls:
Processing package=tls:
Package tls_test:
Processing package=tls_test:
Excluding /home/craig/github/golang/go/src/crypto/tls/testdata
Walking from /home/craig/github/golang/go/src to /home/craig/github/golang/go/src/crypto/x509
Processing sourceDir=/home/craig/github/golang/go/src dump=false:
Package x509_test:
Processing package=x509_test:
Package x509:
Processing package=x509:
Walking from /home/craig/github/golang/go/src to /home/craig/github/golang/go/src/crypto/x509/pkix
Processing sourceDir=/home/craig/github/golang/go/src dump=false:
Package pkix:
Processing package=pkix:
Excluding /home/craig/github/golang/go/src/crypto/x509/testdata
Walking from /home/craig/github/golang/go/src to /home/craig/github/golang/go/src/database
Processing sourceDir=/home/craig/github/golang/go/src dump=false:
Walking from /home/craig/github/golang/go/src to /home/craig/github/golang/go/src/database/sql
Processing sourceDir=/home/craig/github/golang/go/src dump=false:
Package sql:
Processing package=sql:
Package sql_test:
Processing package=sql_test:
Walking from /home/craig/github/golang/go/src to /home/craig/github/golang/go/src/database/sql/driver
Processing sourceDir=/home/craig/github/golang/go/src dump=false:
Package driver:
Processing package=driver:
Walking from /home/craig/github/golang/go/src to /home/craig/github/golang/go/src/debug
Processing sourceDir=/home/craig/github/golang/go/src dump=false:
Walking from /home/craig/github/golang/go/src to /home/craig/github/golang/go/src/debug/dwarf
Processing sourceDir=/home/craig/github/golang/go/src dump=false:
Package dwarf:
Processing package=dwarf:
Package dwarf_test:
Processing package=dwarf_test:
Excluding /home/craig/github/golang/go/src/debug/dwarf/testdata
Walking from /home/craig/github/golang/go/src to /home/craig/github/golang/go/src/debug/elf
Processing sourceDir=/home/craig/github/golang/go/src dump=false:
Package elf:
Processing package=elf:
Excluding /home/craig/github/golang/go/src/debug/elf/testdata
Walking from /home/craig/github/golang/go/src to /home/craig/github/golang/go/src/debug/gosym
Processing sourceDir=/home/craig/github/golang/go/src dump=false:
Package gosym:
Processing package=gosym:
Walking from /home/craig/github/golang/go/src to /home/craig/github/golang/go/src/debug/macho
Processing sourceDir=/home/craig/github/golang/go/src dump=false:
Package macho:
Processing package=macho:
Excluding /home/craig/github/golang/go/src/debug/macho/testdata
Walking from /home/craig/github/golang/go/src to /home/craig/github/golang/go/src/debug/pe
Processing sourceDir=/home/craig/github/golang/go/src dump=false:
Package pe:
Processing package=pe:
Excluding /home/craig/github/golang/go/src/debug/pe/testdata
Walking from /home/craig/github/golang/go/src to /home/craig/github/golang/go/src/debug/plan9obj
Processing sourceDir=/home/craig/github/golang/go/src dump=false:
Package plan9obj:
Processing package=plan9obj:
Excluding /home/craig/github/golang/go/src/debug/plan9obj/testdata
Walking from /home/craig/github/golang/go/src to /home/craig/github/golang/go/src/encoding
Processing sourceDir=/home/craig/github/golang/go/src dump=false:
Package encoding:
Processing package=encoding:
Walking from /home/craig/github/golang/go/src to /home/craig/github/golang/go/src/encoding/ascii85
Processing sourceDir=/home/craig/github/golang/go/src dump=false:
Package ascii85:
Processing package=ascii85:
Walking from /home/craig/github/golang/go/src to /home/craig/github/golang/go/src/encoding/asn1
Processing sourceDir=/home/craig/github/golang/go/src dump=false:
Package asn1:
Processing package=asn1:
Walking from /home/craig/github/golang/go/src to /home/craig/github/golang/go/src/encoding/base32
Processing sourceDir=/home/craig/github/golang/go/src dump=false:
Package base32:
Processing package=base32:
Package base32_test:
Processing package=base32_test:
Walking from /home/craig/github/golang/go/src to /home/craig/github/golang/go/src/encoding/base64
Processing sourceDir=/home/craig/github/golang/go/src dump=false:
Package base64_test:
Processing package=base64_test:
Package base64:
Processing package=base64:
Walking from /home/craig/github/golang/go/src to /home/craig/github/golang/go/src/encoding/binary
Processing sourceDir=/home/craig/github/golang/go/src dump=false:
Package binary_test:
Processing package=binary_test:
Package binary:
Processing package=binary:
Walking from /home/craig/github/golang/go/src to /home/craig/github/golang/go/src/encoding/csv
Processing sourceDir=/home/craig/github/golang/go/src dump=false:
Package csv_test:
Processing package=csv_test:
Package csv:
Processing package=csv:
Walking from /home/craig/github/golang/go/src to /home/craig/github/golang/go/src/encoding/gob
Processing sourceDir=/home/craig/github/golang/go/src dump=false:
Package gob:
Processing package=gob:
Package gob_test:
Processing package=gob_test:
Walking from /home/craig/github/golang/go/src to /home/craig/github/golang/go/src/encoding/hex
Processing sourceDir=/home/craig/github/golang/go/src dump=false:
Package hex_test:
Processing package=hex_test:
Package hex:
Processing package=hex:
Walking from /home/craig/github/golang/go/src to /home/craig/github/golang/go/src/encoding/json
Processing sourceDir=/home/craig/github/golang/go/src dump=false:
Package json_test:
Processing package=json_test:
Package json:
Processing package=json:
Excluding /home/craig/github/golang/go/src/encoding/json/testdata
Walking from /home/craig/github/golang/go/src to /home/craig/github/golang/go/src/encoding/pem
Processing sourceDir=/home/craig/github/golang/go/src dump=false:
Package pem:
Processing package=pem:
Package pem_test:
Processing package=pem_test:
Walking from /home/craig/github/golang/go/src to /home/craig/github/golang/go/src/encoding/xml
Processing sourceDir=/home/craig/github/golang/go/src dump=false:
Package xml_test:
Processing package=xml_test:
Package xml:
Processing package=xml:
Walking from /home/craig/github/golang/go/src to /home/craig/github/golang/go/src/errors
Processing sourceDir=/home/craig/github/golang/go/src dump=false:
Package errors_test:
Processing package=errors_test:
Package errors:
Processing package=errors:
Walking from /home/craig/github/golang/go/src to /home/craig/github/golang/go/src/expvar
Processing sourceDir=/home/craig/github/golang/go/src dump=false:
Package expvar:
Processing package=expvar:
Walking from /home/craig/github/golang/go/src to /home/craig/github/golang/go/src/flag
Processing sourceDir=/home/craig/github/golang/go/src dump=false:
Package flag_test:
Processing package=flag_test:
Package flag:
Processing package=flag:
Walking from /home/craig/github/golang/go/src to /home/craig/github/golang/go/src/fmt
Processing sourceDir=/home/craig/github/golang/go/src dump=false:
Package fmt_test:
Processing package=fmt_test:
Package fmt:
Processing package=fmt:
Walking from /home/craig/github/golang/go/src to /home/craig/github/golang/go/src/go
Processing sourceDir=/home/craig/github/golang/go/src dump=false:
Walking from /home/craig/github/golang/go/src to /home/craig/github/golang/go/src/go/ast
Processing sourceDir=/home/craig/github/golang/go/src dump=false:
Package ast_test:
Processing package=ast_test:
Package ast:
Processing package=ast:
Walking from /home/craig/github/golang/go/src to /home/craig/github/golang/go/src/go/build
Processing sourceDir=/home/craig/github/golang/go/src dump=false:
Package build:
Processing package=build:
Excluding /home/craig/github/golang/go/src/go/build/testdata
Walking from /home/craig/github/golang/go/src to /home/craig/github/golang/go/src/go/constant
Processing sourceDir=/home/craig/github/golang/go/src dump=false:
Package constant:
Processing package=constant:
Package constant_test:
Processing package=constant_test:
Walking from /home/craig/github/golang/go/src to /home/craig/github/golang/go/src/go/doc
Processing sourceDir=/home/craig/github/golang/go/src dump=false:
Package doc_test:
Processing package=doc_test:
Package doc:
Processing package=doc:
Excluding /home/craig/github/golang/go/src/go/doc/testdata
Walking from /home/craig/github/golang/go/src to /home/craig/github/golang/go/src/go/format
Processing sourceDir=/home/craig/github/golang/go/src dump=false:
Package format_test:
Processing package=format_test:
Package format:
Processing package=format:
Walking from /home/craig/github/golang/go/src to /home/craig/github/golang/go/src/go/importer
Processing sourceDir=/home/craig/github/golang/go/src dump=false:
Package importer:
Processing package=importer:
Excluding /home/craig/github/golang/go/src/go/internal
Walking from /home/craig/github/golang/go/src to /home/craig/github/golang/go/src/go/parser
Processing sourceDir=/home/craig/github/golang/go/src dump=false:
Package parser_test:
Processing package=parser_test:
Package parser:
Processing package=parser:
Excluding /home/craig/github/golang/go/src/go/parser/testdata
Walking from /home/craig/github/golang/go/src to /home/craig/github/golang/go/src/go/printer
Processing sourceDir=/home/craig/github/golang/go/src dump=false:
Package printer_test:
Processing package=printer_test:
Package printer:
Processing package=printer:
Excluding /home/craig/github/golang/go/src/go/printer/testdata
Walking from /home/craig/github/golang/go/src to /home/craig/github/golang/go/src/go/scanner
Processing sourceDir=/home/craig/github/golang/go/src dump=false:
Package scanner_test:
Processing package=scanner_test:
Package scanner:
Processing package=scanner:
Walking from /home/craig/github/golang/go/src to /home/craig/github/golang/go/src/go/token
Processing sourceDir=/home/craig/github/golang/go/src dump=false:
Package token_test:
Processing package=token_test:
Package token:
Processing package=token:
Walking from /home/craig/github/golang/go/src to /home/craig/github/golang/go/src/go/types
Processing sourceDir=/home/craig/github/golang/go/src dump=false:
Package types:
Processing package=types:
Package types_test:
Processing package=types_test:
Excluding /home/craig/github/golang/go/src/go/types/testdata
Walking from /home/craig/github/golang/go/src to /home/craig/github/golang/go/src/hash
Processing sourceDir=/home/craig/github/golang/go/src dump=false:
Package hash_test:
Processing package=hash_test:
Package hash:
Processing package=hash:
Walking from /home/craig/github/golang/go/src to /home/craig/github/golang/go/src/hash/adler32
Processing sourceDir=/home/craig/github/golang/go/src dump=false:
Package adler32:
Processing package=adler32:
Walking from /home/craig/github/golang/go/src to /home/craig/github/golang/go/src/hash/crc32
Processing sourceDir=/home/craig/github/golang/go/src dump=false:
Package crc32_test:
Processing package=crc32_test:
Package crc32:
Processing package=crc32:
Walking from /home/craig/github/golang/go/src to /home/craig/github/golang/go/src/hash/crc64
Processing sourceDir=/home/craig/github/golang/go/src dump=false:
Package crc64:
Processing package=crc64:
Walking from /home/craig/github/golang/go/src to /home/craig/github/golang/go/src/hash/fnv
Processing sourceDir=/home/craig/github/golang/go/src dump=false:
Package fnv:
Processing package=fnv:
Walking from /home/craig/github/golang/go/src to /home/craig/github/golang/go/src/html
Processing sourceDir=/home/craig/github/golang/go/src dump=false:
Package html_test:
Processing package=html_test:
Package html:
Processing package=html:
Walking from /home/craig/github/golang/go/src to /home/craig/github/golang/go/src/html/template
Processing sourceDir=/home/craig/github/golang/go/src dump=false:
Package template_test:
Processing package=template_test:
Package template:
Processing package=template:
Walking from /home/craig/github/golang/go/src to /home/craig/github/golang/go/src/image
Processing sourceDir=/home/craig/github/golang/go/src dump=false:
Package image:
Processing package=image:
Package image_test:
Processing package=image_test:
Walking from /home/craig/github/golang/go/src to /home/craig/github/golang/go/src/image/color
Processing sourceDir=/home/craig/github/golang/go/src dump=false:
Package color:
Processing package=color:
Walking from /home/craig/github/golang/go/src to /home/craig/github/golang/go/src/image/color/palette
Processing sourceDir=/home/craig/github/golang/go/src dump=false:
Package palette:
Processing package=palette:
Walking from /home/craig/github/golang/go/src to /home/craig/github/golang/go/src/image/draw
Processing sourceDir=/home/craig/github/golang/go/src dump=false:
Package draw_test:
Processing package=draw_test:
Package draw:
Processing package=draw:
Walking from /home/craig/github/golang/go/src to /home/craig/github/golang/go/src/image/gif
Processing sourceDir=/home/craig/github/golang/go/src dump=false:
Package gif:
Processing package=gif:
Excluding /home/craig/github/golang/go/src/image/internal
Walking from /home/craig/github/golang/go/src to /home/craig/github/golang/go/src/image/jpeg
Processing sourceDir=/home/craig/github/golang/go/src dump=false:
Package jpeg:
Processing package=jpeg:
Walking from /home/craig/github/golang/go/src to /home/craig/github/golang/go/src/image/png
Processing sourceDir=/home/craig/github/golang/go/src dump=false:
Package png:
Processing package=png:
Package png_test:
Processing package=png_test:
Excluding /home/craig/github/golang/go/src/image/png/testdata
Excluding /home/craig/github/golang/go/src/image/testdata
Walking from /home/craig/github/golang/go/src to /home/craig/github/golang/go/src/index
Processing sourceDir=/home/craig/github/golang/go/src dump=false:
Walking from /home/craig/github/golang/go/src to /home/craig/github/golang/go/src/index/suffixarray
Processing sourceDir=/home/craig/github/golang/go/src dump=false:
Package suffixarray:
Processing package=suffixarray:
Package suffixarray_test:
Processing package=suffixarray_test:
Excluding /home/craig/github/golang/go/src/internal
Walking from /home/craig/github/golang/go/src to /home/craig/github/golang/go/src/io
Processing sourceDir=/home/craig/github/golang/go/src dump=false:
Package io_test:
Processing package=io_test:
Package io:
Processing package=io:
Walking from /home/craig/github/golang/go/src to /home/craig/github/golang/go/src/io/ioutil
Processing sourceDir=/home/craig/github/golang/go/src dump=false:
Package ioutil_test:
Processing package=ioutil_test:
Package ioutil:
Processing package=ioutil:
Excluding /home/craig/github/golang/go/src/io/ioutil/testdata
Walking from /home/craig/github/golang/go/src to /home/craig/github/golang/go/src/log
Processing sourceDir=/home/craig/github/golang/go/src dump=false:
Package log_test:
Processing package=log_test:
Package log:
Processing package=log:
Walking from /home/craig/github/golang/go/src to /home/craig/github/golang/go/src/log/syslog
Processing sourceDir=/home/craig/github/golang/go/src dump=false:
Package syslog_test:
Processing package=syslog_test:
Package syslog:
Processing package=syslog:
Walking from /home/craig/github/golang/go/src to /home/craig/github/golang/go/src/math
Processing sourceDir=/home/craig/github/golang/go/src dump=false:
Package math:
Processing package=math:
Package math_test:
Processing package=math_test:
Walking from /home/craig/github/golang/go/src to /home/craig/github/golang/go/src/math/big
Processing sourceDir=/home/craig/github/golang/go/src dump=false:
Package big:
Processing package=big:
Package big_test:
Processing package=big_test:
Walking from /home/craig/github/golang/go/src to /home/craig/github/golang/go/src/math/bits
Processing sourceDir=/home/craig/github/golang/go/src dump=false:
Package bits_test:
Processing package=bits_test:
Package bits:
Processing package=bits:
Walking from /home/craig/github/golang/go/src to /home/craig/github/golang/go/src/math/cmplx
Processing sourceDir=/home/craig/github/golang/go/src dump=false:
Package cmplx:
Processing package=cmplx:
Package cmplx_test:
Processing package=cmplx_test:
Walking from /home/craig/github/golang/go/src to /home/craig/github/golang/go/src/math/rand
Processing sourceDir=/home/craig/github/golang/go/src dump=false:
Package rand_test:
Processing package=rand_test:
Package rand:
Processing package=rand:
already seen function rand.TestReadEmpty in /home/craig/github/golang/go/src/crypto/rand/rand_test.go, yet again in /home/craig/github/golang/go/src/math/rand/rand_test.go
already seen function rand.Int in /home/craig/github/golang/go/src/crypto/rand/util.go, yet again in /home/craig/github/golang/go/src/math/rand/rand.go
already seen function rand.Read in /home/craig/github/golang/go/src/crypto/rand/rand.go, yet again in /home/craig/github/golang/go/src/math/rand/rand.go
Walking from /home/craig/github/golang/go/src to /home/craig/github/golang/go/src/mime
Processing sourceDir=/home/craig/github/golang/go/src dump=false:
Package mime:
Processing package=mime:
Package mime_test:
Processing package=mime_test:
Walking from /home/craig/github/golang/go/src to /home/craig/github/golang/go/src/mime/multipart
Processing sourceDir=/home/craig/github/golang/go/src dump=false:
Package multipart_test:
Processing package=multipart_test:
Package multipart:
Processing package=multipart:
Excluding /home/craig/github/golang/go/src/mime/multipart/testdata
Walking from /home/craig/github/golang/go/src to /home/craig/github/golang/go/src/mime/quotedprintable
Processing sourceDir=/home/craig/github/golang/go/src dump=false:
Package quotedprintable_test:
Processing package=quotedprintable_test:
Package quotedprintable:
Processing package=quotedprintable:
Excluding /home/craig/github/golang/go/src/mime/testdata
Walking from /home/craig/github/golang/go/src to /home/craig/github/golang/go/src/net
Processing sourceDir=/home/craig/github/golang/go/src dump=false:
Package net:
Processing package=net:
Package net_test:
Processing package=net_test:
Walking from /home/craig/github/golang/go/src to /home/craig/github/golang/go/src/net/http
Processing sourceDir=/home/craig/github/golang/go/src dump=false:
Package http:
Processing package=http:
Package http_test:
Processing package=http_test:
Walking from /home/craig/github/golang/go/src to /home/craig/github/golang/go/src/net/http/cgi
Processing sourceDir=/home/craig/github/golang/go/src dump=false:
Package cgi:
Processing package=cgi:
Excluding /home/craig/github/golang/go/src/net/http/cgi/testdata
Walking from /home/craig/github/golang/go/src to /home/craig/github/golang/go/src/net/http/cookiejar
Processing sourceDir=/home/craig/github/golang/go/src dump=false:
Package cookiejar_test:
Processing package=cookiejar_test:
Package cookiejar:
Processing package=cookiejar:
Walking from /home/craig/github/golang/go/src to /home/craig/github/golang/go/src/net/http/fcgi
Processing sourceDir=/home/craig/github/golang/go/src dump=false:
Package fcgi:
Processing package=fcgi:
Walking from /home/craig/github/golang/go/src to /home/craig/github/golang/go/src/net/http/httptest
Processing sourceDir=/home/craig/github/golang/go/src dump=false:
Package httptest:
Processing package=httptest:
Package httptest_test:
Processing package=httptest_test:
Walking from /home/craig/github/golang/go/src to /home/craig/github/golang/go/src/net/http/httptrace
Processing sourceDir=/home/craig/github/golang/go/src dump=false:
Package httptrace_test:
Processing package=httptrace_test:
Package httptrace:
Processing package=httptrace:
Walking from /home/craig/github/golang/go/src to /home/craig/github/golang/go/src/net/http/httputil
Processing sourceDir=/home/craig/github/golang/go/src dump=false:
Package httputil_test:
Processing package=httputil_test:
Package httputil:
Processing package=httputil:
Excluding /home/craig/github/golang/go/src/net/http/internal
Walking from /home/craig/github/golang/go/src to /home/craig/github/golang/go/src/net/http/pprof
Processing sourceDir=/home/craig/github/golang/go/src dump=false:
Package pprof:
Processing package=pprof:
Excluding /home/craig/github/golang/go/src/net/http/testdata
Excluding /home/craig/github/golang/go/src/net/internal
Walking from /home/craig/github/golang/go/src to /home/craig/github/golang/go/src/net/mail
Processing sourceDir=/home/craig/github/golang/go/src dump=false:
Package mail_test:
Processing package=mail_test:
Package mail:
Processing package=mail:
Walking from /home/craig/github/golang/go/src to /home/craig/github/golang/go/src/net/rpc
Processing sourceDir=/home/craig/github/golang/go/src dump=false:
Package rpc:
Processing package=rpc:
Walking from /home/craig/github/golang/go/src to /home/craig/github/golang/go/src/net/rpc/jsonrpc
Processing sourceDir=/home/craig/github/golang/go/src dump=false:
Package jsonrpc:
Processing package=jsonrpc:
Walking from /home/craig/github/golang/go/src to /home/craig/github/golang/go/src/net/smtp
Processing sourceDir=/home/craig/github/golang/go/src dump=false:
Package smtp_test:
Processing package=smtp_test:
Package smtp:
Processing package=smtp:
Excluding /home/craig/github/golang/go/src/net/testdata
Walking from /home/craig/github/golang/go/src to /home/craig/github/golang/go/src/net/textproto
Processing sourceDir=/home/craig/github/golang/go/src dump=false:
Package textproto:
Processing package=textproto:
Walking from /home/craig/github/golang/go/src to /home/craig/github/golang/go/src/net/url
Processing sourceDir=/home/craig/github/golang/go/src dump=false:
Package url_test:
Processing package=url_test:
Package url:
Processing package=url:
Walking from /home/craig/github/golang/go/src to /home/craig/github/golang/go/src/os
Processing sourceDir=/home/craig/github/golang/go/src dump=false:
Package os:
Processing package=os:
Package os_test:
Processing package=os_test:
Walking from /home/craig/github/golang/go/src to /home/craig/github/golang/go/src/os/exec
Processing sourceDir=/home/craig/github/golang/go/src dump=false:
Package exec:
Processing package=exec:
Package exec_test:
Processing package=exec_test:
Walking from /home/craig/github/golang/go/src to /home/craig/github/golang/go/src/os/signal
Processing sourceDir=/home/craig/github/golang/go/src dump=false:
Package signal_test:
Processing package=signal_test:
Package signal:
Processing package=signal:
Excluding /home/craig/github/golang/go/src/os/signal/internal
Walking from /home/craig/github/golang/go/src to /home/craig/github/golang/go/src/os/user
Processing sourceDir=/home/craig/github/golang/go/src dump=false:
Package user:
Processing package=user:
Walking from /home/craig/github/golang/go/src to /home/craig/github/golang/go/src/path
Processing sourceDir=/home/craig/github/golang/go/src dump=false:
Package path:
Processing package=path:
Package path_test:
Processing package=path_test:
Walking from /home/craig/github/golang/go/src to /home/craig/github/golang/go/src/path/filepath
Processing sourceDir=/home/craig/github/golang/go/src dump=false:
Package filepath:
Processing package=filepath:
Package filepath_test:
Processing package=filepath_test:
Walking from /home/craig/github/golang/go/src to /home/craig/github/golang/go/src/plugin
Processing sourceDir=/home/craig/github/golang/go/src dump=false:
Package plugin:
Processing package=plugin:
Walking from /home/craig/github/golang/go/src to /home/craig/github/golang/go/src/reflect
Processing sourceDir=/home/craig/github/golang/go/src dump=false:
Package reflect:
Processing package=reflect:
Package reflect_test:
Processing package=reflect_test:
Walking from /home/craig/github/golang/go/src to /home/craig/github/golang/go/src/regexp
Processing sourceDir=/home/craig/github/golang/go/src dump=false:
Package regexp:
Processing package=regexp:
Package regexp_test:
Processing package=regexp_test:
Walking from /home/craig/github/golang/go/src to /home/craig/github/golang/go/src/regexp/syntax
Processing sourceDir=/home/craig/github/golang/go/src dump=false:
Package syntax:
Processing package=syntax:
Excluding /home/craig/github/golang/go/src/regexp/testdata
Walking from /home/craig/github/golang/go/src to /home/craig/github/golang/go/src/runtime
Processing sourceDir=/home/craig/github/golang/go/src dump=false:
Package runtime_test:
Processing package=runtime_test:
Package runtime:
Processing package=runtime:
Walking from /home/craig/github/golang/go/src to /home/craig/github/golang/go/src/runtime/cgo
Processing sourceDir=/home/craig/github/golang/go/src dump=false:
Package cgo:
Processing package=cgo:
Walking from /home/craig/github/golang/go/src to /home/craig/github/golang/go/src/runtime/debug
Processing sourceDir=/home/craig/github/golang/go/src dump=false:
Package debug:
Processing package=debug:
Package debug_test:
Processing package=debug_test:
Excluding /home/craig/github/golang/go/src/runtime/internal
Walking from /home/craig/github/golang/go/src to /home/craig/github/golang/go/src/runtime/msan
Processing sourceDir=/home/craig/github/golang/go/src dump=false:
Walking from /home/craig/github/golang/go/src to /home/craig/github/golang/go/src/runtime/pprof
Processing sourceDir=/home/craig/github/golang/go/src dump=false:
Package pprof:
Processing package=pprof:
Excluding /home/craig/github/golang/go/src/runtime/pprof/internal
Excluding /home/craig/github/golang/go/src/runtime/pprof/testdata
Walking from /home/craig/github/golang/go/src to /home/craig/github/golang/go/src/runtime/race
Processing sourceDir=/home/craig/github/golang/go/src dump=false:
Package race:
Processing package=race:
Excluding /home/craig/github/golang/go/src/runtime/race/testdata
Excluding /home/craig/github/golang/go/src/runtime/testdata
Walking from /home/craig/github/golang/go/src to /home/craig/github/golang/go/src/runtime/trace
Processing sourceDir=/home/craig/github/golang/go/src dump=false:
Package trace_test:
Processing package=trace_test:
Package trace:
Processing package=trace:
Walking from /home/craig/github/golang/go/src to /home/craig/github/golang/go/src/sort
Processing sourceDir=/home/craig/github/golang/go/src dump=false:
Package sort_test:
Processing package=sort_test:
Package sort:
Processing package=sort:
Walking from /home/craig/github/golang/go/src to /home/craig/github/golang/go/src/strconv
Processing sourceDir=/home/craig/github/golang/go/src dump=false:
Package strconv:
Processing package=strconv:
Package strconv_test:
Processing package=strconv_test:
Excluding /home/craig/github/golang/go/src/strconv/testdata
Walking from /home/craig/github/golang/go/src to /home/craig/github/golang/go/src/strings
Processing sourceDir=/home/craig/github/golang/go/src dump=false:
Package strings:
Processing package=strings:
Package strings_test:
Processing package=strings_test:
Walking from /home/craig/github/golang/go/src to /home/craig/github/golang/go/src/sync
Processing sourceDir=/home/craig/github/golang/go/src dump=false:
Package sync_test:
Processing package=sync_test:
Package sync:
Processing package=sync:
Walking from /home/craig/github/golang/go/src to /home/craig/github/golang/go/src/sync/atomic
Processing sourceDir=/home/craig/github/golang/go/src dump=false:
Package atomic_test:
Processing package=atomic_test:
Package atomic:
Processing package=atomic:
Walking from /home/craig/github/golang/go/src to /home/craig/github/golang/go/src/syscall
Processing sourceDir=/home/craig/github/golang/go/src dump=false:
Package syscall:
Processing package=syscall:
Package syscall_test:
Processing package=syscall_test:
Walking from /home/craig/github/golang/go/src to /home/craig/github/golang/go/src/syscall/js
Processing sourceDir=/home/craig/github/golang/go/src dump=false:
Walking from /home/craig/github/golang/go/src to /home/craig/github/golang/go/src/testing
Processing sourceDir=/home/craig/github/golang/go/src dump=false:
Package testing:
Processing package=testing:
Package testing_test:
Processing package=testing_test:
Excluding /home/craig/github/golang/go/src/testing/internal
Walking from /home/craig/github/golang/go/src to /home/craig/github/golang/go/src/testing/iotest
Processing sourceDir=/home/craig/github/golang/go/src dump=false:
Package iotest:
Processing package=iotest:
Walking from /home/craig/github/golang/go/src to /home/craig/github/golang/go/src/testing/quick
Processing sourceDir=/home/craig/github/golang/go/src dump=false:
Package quick:
Processing package=quick:
Walking from /home/craig/github/golang/go/src to /home/craig/github/golang/go/src/text
Processing sourceDir=/home/craig/github/golang/go/src dump=false:
Walking from /home/craig/github/golang/go/src to /home/craig/github/golang/go/src/text/scanner
Processing sourceDir=/home/craig/github/golang/go/src dump=false:
Package scanner_test:
Processing package=scanner_test:
Package scanner:
Processing package=scanner:
already seen function scanner.TestScan in /home/craig/github/golang/go/src/go/scanner/scanner_test.go, yet again in /home/craig/github/golang/go/src/text/scanner/scanner_test.go
Walking from /home/craig/github/golang/go/src to /home/craig/github/golang/go/src/text/tabwriter
Processing sourceDir=/home/craig/github/golang/go/src dump=false:
Package tabwriter_test:
Processing package=tabwriter_test:
Package tabwriter:
Processing package=tabwriter:
Walking from /home/craig/github/golang/go/src to /home/craig/github/golang/go/src/text/template
Processing sourceDir=/home/craig/github/golang/go/src dump=false:
Package template:
Processing package=template:
already seen function template.TestClone in /home/craig/github/golang/go/src/html/template/clone_test.go, yet again in /home/craig/github/golang/go/src/text/template/multi_test.go
already seen function template.TestAddParseTree in /home/craig/github/golang/go/src/html/template/clone_test.go, yet again in /home/craig/github/golang/go/src/text/template/multi_test.go
already seen function template.TestEmptyTemplate in /home/craig/github/golang/go/src/html/template/escape_test.go, yet again in /home/craig/github/golang/go/src/text/template/multi_test.go
already seen function template.New in /home/craig/github/golang/go/src/html/template/template.go, yet again in /home/craig/github/golang/go/src/text/template/template.go
already seen function template.Must in /home/craig/github/golang/go/src/html/template/template.go, yet again in /home/craig/github/golang/go/src/text/template/helper.go
already seen function template.ParseFiles in /home/craig/github/golang/go/src/html/template/template.go, yet again in /home/craig/github/golang/go/src/text/template/helper.go
already seen function template.ParseGlob in /home/craig/github/golang/go/src/html/template/template.go, yet again in /home/craig/github/golang/go/src/text/template/helper.go
already seen function template.IsTrue in /home/craig/github/golang/go/src/html/template/template.go, yet again in /home/craig/github/golang/go/src/text/template/exec.go
already seen function template.HTMLEscape in /home/craig/github/golang/go/src/html/template/escape.go, yet again in /home/craig/github/golang/go/src/text/template/funcs.go
already seen function template.HTMLEscapeString in /home/craig/github/golang/go/src/html/template/escape.go, yet again in /home/craig/github/golang/go/src/text/template/funcs.go
already seen function template.HTMLEscaper in /home/craig/github/golang/go/src/html/template/escape.go, yet again in /home/craig/github/golang/go/src/text/template/funcs.go
already seen function template.JSEscape in /home/craig/github/golang/go/src/html/template/escape.go, yet again in /home/craig/github/golang/go/src/text/template/funcs.go
already seen function template.JSEscapeString in /home/craig/github/golang/go/src/html/template/escape.go, yet again in /home/craig/github/golang/go/src/text/template/funcs.go
already seen function template.JSEscaper in /home/craig/github/golang/go/src/html/template/escape.go, yet again in /home/craig/github/golang/go/src/text/template/funcs.go
already seen function template.URLQueryEscaper in /home/craig/github/golang/go/src/html/template/escape.go, yet again in /home/craig/github/golang/go/src/text/template/funcs.go
Package template_test:
Processing package=template_test:
already seen function template_test.ExampleTemplate_glob in /home/craig/github/golang/go/src/html/template/examplefiles_test.go, yet again in /home/craig/github/golang/go/src/text/template/examplefiles_test.go
already seen function template_test.ExampleTemplate_helpers in /home/craig/github/golang/go/src/html/template/examplefiles_test.go, yet again in /home/craig/github/golang/go/src/text/template/examplefiles_test.go
already seen function template_test.ExampleTemplate_share in /home/craig/github/golang/go/src/html/template/examplefiles_test.go, yet again in /home/craig/github/golang/go/src/text/template/examplefiles_test.go
already seen function template_test.ExampleTemplate_block in /home/craig/github/golang/go/src/html/template/example_test.go, yet again in /home/craig/github/golang/go/src/text/template/example_test.go
Walking from /home/craig/github/golang/go/src to /home/craig/github/golang/go/src/text/template/parse
Processing sourceDir=/home/craig/github/golang/go/src dump=false:
Package parse:
Processing package=parse:
Excluding /home/craig/github/golang/go/src/text/template/testdata
Walking from /home/craig/github/golang/go/src to /home/craig/github/golang/go/src/time
Processing sourceDir=/home/craig/github/golang/go/src dump=false:
Package time:
Processing package=time:
Package time_test:
Processing package=time_test:
Walking from /home/craig/github/golang/go/src to /home/craig/github/golang/go/src/unicode
Processing sourceDir=/home/craig/github/golang/go/src dump=false:
Package unicode_test:
Processing package=unicode_test:
Package unicode:
Processing package=unicode:
Walking from /home/craig/github/golang/go/src to /home/craig/github/golang/go/src/unicode/utf16
Processing sourceDir=/home/craig/github/golang/go/src dump=false:
Package utf16:
Processing package=utf16:
Package utf16_test:
Processing package=utf16_test:
Walking from /home/craig/github/golang/go/src to /home/craig/github/golang/go/src/unicode/utf8
Processing sourceDir=/home/craig/github/golang/go/src dump=false:
Package utf8_test:
Processing package=utf8_test:
Package utf8:
Processing package=utf8:
Walking from /home/craig/github/golang/go/src to /home/craig/github/golang/go/src/unsafe
Processing sourceDir=/home/craig/github/golang/go/src dump=false:
Package unsafe:
Processing package=unsafe:
Walking from /home/craig/github/golang/go/src to /home/craig/github/golang/go/src/vendor
Processing sourceDir=/home/craig/github/golang/go/src dump=false:
Walking from /home/craig/github/golang/go/src to /home/craig/github/golang/go/src/vendor/golang_org
Processing sourceDir=/home/craig/github/golang/go/src dump=false:
Walking from /home/craig/github/golang/go/src to /home/craig/github/golang/go/src/vendor/golang_org/x
Processing sourceDir=/home/craig/github/golang/go/src dump=false:
Walking from /home/craig/github/golang/go/src to /home/craig/github/golang/go/src/vendor/golang_org/x/crypto
Processing sourceDir=/home/craig/github/golang/go/src dump=false:
Walking from /home/craig/github/golang/go/src to /home/craig/github/golang/go/src/vendor/golang_org/x/crypto/chacha20poly1305
Processing sourceDir=/home/craig/github/golang/go/src dump=false:
Package chacha20poly1305:
Processing package=chacha20poly1305:
Walking from /home/craig/github/golang/go/src to /home/craig/github/golang/go/src/vendor/golang_org/x/crypto/cryptobyte
Processing sourceDir=/home/craig/github/golang/go/src dump=false:
Package cryptobyte_test:
Processing package=cryptobyte_test:
Package cryptobyte:
Processing package=cryptobyte:
Walking from /home/craig/github/golang/go/src to /home/craig/github/golang/go/src/vendor/golang_org/x/crypto/cryptobyte/asn1
Processing sourceDir=/home/craig/github/golang/go/src dump=false:
Package asn1:
Processing package=asn1:
Walking from /home/craig/github/golang/go/src to /home/craig/github/golang/go/src/vendor/golang_org/x/crypto/curve25519
Processing sourceDir=/home/craig/github/golang/go/src dump=false:
Package curve25519:
Processing package=curve25519:
Excluding /home/craig/github/golang/go/src/vendor/golang_org/x/crypto/internal
Walking from /home/craig/github/golang/go/src to /home/craig/github/golang/go/src/vendor/golang_org/x/crypto/poly1305
Processing sourceDir=/home/craig/github/golang/go/src dump=false:
Package poly1305:
Processing package=poly1305:
Walking from /home/craig/github/golang/go/src to /home/craig/github/golang/go/src/vendor/golang_org/x/net
Processing sourceDir=/home/craig/github/golang/go/src dump=false:
Walking from /home/craig/github/golang/go/src to /home/craig/github/golang/go/src/vendor/golang_org/x/net/dns
Processing sourceDir=/home/craig/github/golang/go/src dump=false:
Walking from /home/craig/github/golang/go/src to /home/craig/github/golang/go/src/vendor/golang_org/x/net/dns/dnsmessage
Processing sourceDir=/home/craig/github/golang/go/src dump=false:
Package dnsmessage_test:
Processing package=dnsmessage_test:
Package dnsmessage:
Processing package=dnsmessage:
Walking from /home/craig/github/golang/go/src to /home/craig/github/golang/go/src/vendor/golang_org/x/net/http
Processing sourceDir=/home/craig/github/golang/go/src dump=false:
Walking from /home/craig/github/golang/go/src to /home/craig/github/golang/go/src/vendor/golang_org/x/net/http/httpguts
Processing sourceDir=/home/craig/github/golang/go/src dump=false:
Package httpguts:
Processing package=httpguts:
Walking from /home/craig/github/golang/go/src to /home/craig/github/golang/go/src/vendor/golang_org/x/net/http/httpproxy
Processing sourceDir=/home/craig/github/golang/go/src dump=false:
Package httpproxy:
Processing package=httpproxy:
Package httpproxy_test:
Processing package=httpproxy_test:
Walking from /home/craig/github/golang/go/src to /home/craig/github/golang/go/src/vendor/golang_org/x/net/http2
Processing sourceDir=/home/craig/github/golang/go/src dump=false:
Walking from /home/craig/github/golang/go/src to /home/craig/github/golang/go/src/vendor/golang_org/x/net/http2/hpack
Processing sourceDir=/home/craig/github/golang/go/src dump=false:
Package hpack:
Processing package=hpack:
Walking from /home/craig/github/golang/go/src to /home/craig/github/golang/go/src/vendor/golang_org/x/net/idna
Processing sourceDir=/home/craig/github/golang/go/src dump=false:
Package idna:
Processing package=idna:
Excluding /home/craig/github/golang/go/src/vendor/golang_org/x/net/internal
Walking from /home/craig/github/golang/go/src to /home/craig/github/golang/go/src/vendor/golang_org/x/net/lif
Processing sourceDir=/home/craig/github/golang/go/src dump=false:
Walking from /home/craig/github/golang/go/src to /home/craig/github/golang/go/src/vendor/golang_org/x/net/nettest
Processing sourceDir=/home/craig/github/golang/go/src dump=false:
Package nettest:
Processing package=nettest:
Walking from /home/craig/github/golang/go/src to /home/craig/github/golang/go/src/vendor/golang_org/x/net/route
Processing sourceDir=/home/craig/github/golang/go/src dump=false:
Walking from /home/craig/github/golang/go/src to /home/craig/github/golang/go/src/vendor/golang_org/x/text
Processing sourceDir=/home/craig/github/golang/go/src dump=false:
Walking from /home/craig/github/golang/go/src to /home/craig/github/golang/go/src/vendor/golang_org/x/text/secure
Processing sourceDir=/home/craig/github/golang/go/src dump=false:
Package secure:
Processing package=secure:
Walking from /home/craig/github/golang/go/src to /home/craig/github/golang/go/src/vendor/golang_org/x/text/secure/bidirule
Processing sourceDir=/home/craig/github/golang/go/src dump=false:
Package bidirule:
Processing package=bidirule:
Walking from /home/craig/github/golang/go/src to /home/craig/github/golang/go/src/vendor/golang_org/x/text/transform
Processing sourceDir=/home/craig/github/golang/go/src dump=false:
Package transform:
Processing package=transform:
Package transform_test:
Processing package=transform_test:
Walking from /home/craig/github/golang/go/src to /home/craig/github/golang/go/src/vendor/golang_org/x/text/unicode
Processing sourceDir=/home/craig/github/golang/go/src dump=false:
Package unicode:
Processing package=unicode:
Walking from /home/craig/github/golang/go/src to /home/craig/github/golang/go/src/vendor/golang_org/x/text/unicode/bidi
Processing sourceDir=/home/craig/github/golang/go/src dump=false:
Package bidi:
Processing package=bidi:
Walking from /home/craig/github/golang/go/src to /home/craig/github/golang/go/src/vendor/golang_org/x/text/unicode/norm
Processing sourceDir=/home/craig/github/golang/go/src dump=false:
Package norm_test:
Processing package=norm_test:
Package norm:
Processing package=norm:
TYPE aes.CryptTest:
  /home/craig/github/golang/go/src/crypto/aes/aes_test.go => &{<nil> CryptTest 0 0xc000a03600 <nil>}
TYPE aes.KeySizeError:
  /home/craig/github/golang/go/src/crypto/aes/cipher.go => &{<nil> KeySizeError 0 int <nil>}
TYPE aes.KeyTest:
  /home/craig/github/golang/go/src/crypto/aes/aes_test.go => &{<nil> KeyTest 0 0xc0009fc240 <nil>}
TYPE ascii85.CorruptInputError:
  /home/craig/github/golang/go/src/encoding/ascii85/ascii85.go => &{<nil> CorruptInputError 0 int64 <nil>}
TYPE asn1.AlgorithmIdentifier:
  /home/craig/github/golang/go/src/encoding/asn1/asn1_test.go => &{<nil> AlgorithmIdentifier 0 0xc000d0a320 <nil>}
TYPE asn1.AttributeTypeAndValue:
  /home/craig/github/golang/go/src/encoding/asn1/asn1_test.go => &{<nil> AttributeTypeAndValue 0 0xc000d0a460 <nil>}
TYPE asn1.BitString:
  /home/craig/github/golang/go/src/encoding/asn1/asn1.go => &{<nil> BitString 0 0xc00131e160 <nil>}
TYPE asn1.Certificate:
  /home/craig/github/golang/go/src/encoding/asn1/asn1_test.go => &{<nil> Certificate 0 0xc000d0a060 <nil>}
TYPE asn1.Enumerated:
  /home/craig/github/golang/go/src/encoding/asn1/asn1.go => &{<nil> Enumerated 0 int <nil>}
TYPE asn1.Flag:
  /home/craig/github/golang/go/src/encoding/asn1/asn1.go => &{<nil> Flag 0 bool <nil>}
TYPE asn1.ObjectIdentifier:
  /home/craig/github/golang/go/src/encoding/asn1/asn1.go => &{<nil> ObjectIdentifier 0 0xc000c235f0 <nil>}
TYPE asn1.PublicKeyInfo:
  /home/craig/github/golang/go/src/encoding/asn1/asn1_test.go => &{<nil> PublicKeyInfo 0 0xc000d0a640 <nil>}
TYPE asn1.RDNSequence:
  /home/craig/github/golang/go/src/encoding/asn1/asn1_test.go => &{<nil> RDNSequence 0 0xc0007af4a0 <nil>}
TYPE asn1.RawContent:
  /home/craig/github/golang/go/src/encoding/asn1/asn1.go => &{<nil> RawContent 0 0xc000aaa270 <nil>}
TYPE asn1.RawValue:
  /home/craig/github/golang/go/src/encoding/asn1/asn1.go => &{<nil> RawValue 0 0xc001376d60 <nil>}
TYPE asn1.RelativeDistinguishedNameSET:
  /home/craig/github/golang/go/src/encoding/asn1/asn1_test.go => &{<nil> RelativeDistinguishedNameSET 0 0xc0007af500 <nil>}
TYPE asn1.StructuralError:
  /home/craig/github/golang/go/src/encoding/asn1/asn1.go => &{<nil> StructuralError 0 0xc0012e5140 <nil>}
TYPE asn1.SyntaxError:
  /home/craig/github/golang/go/src/encoding/asn1/asn1.go => &{<nil> SyntaxError 0 0xc0012e5720 <nil>}
TYPE asn1.TBSCertificate:
  /home/craig/github/golang/go/src/encoding/asn1/asn1_test.go => &{<nil> TBSCertificate 0 0xc000d0a2a0 <nil>}
TYPE asn1.Tag:
  /home/craig/github/golang/go/src/vendor/golang_org/x/crypto/cryptobyte/asn1/asn1.go => &{<nil> Tag 0 uint8 <nil>}
TYPE asn1.TestBigInt:
  /home/craig/github/golang/go/src/encoding/asn1/asn1_test.go => &{<nil> TestBigInt 0 0xc00108aea0 <nil>}
TYPE asn1.TestContextSpecificTags:
  /home/craig/github/golang/go/src/encoding/asn1/asn1_test.go => &{<nil> TestContextSpecificTags 0 0xc00108ab40 <nil>}
TYPE asn1.TestContextSpecificTags2:
  /home/craig/github/golang/go/src/encoding/asn1/asn1_test.go => &{<nil> TestContextSpecificTags2 0 0xc00108ac20 <nil>}
TYPE asn1.TestContextSpecificTags3:
  /home/craig/github/golang/go/src/encoding/asn1/asn1_test.go => &{<nil> TestContextSpecificTags3 0 0xc00108acc0 <nil>}
TYPE asn1.TestElementsAfterString:
  /home/craig/github/golang/go/src/encoding/asn1/asn1_test.go => &{<nil> TestElementsAfterString 0 0xc00108adc0 <nil>}
TYPE asn1.TestObjectIdentifierStruct:
  /home/craig/github/golang/go/src/encoding/asn1/asn1_test.go => &{<nil> TestObjectIdentifierStruct 0 0xc00108aaa0 <nil>}
TYPE asn1.TestSet:
  /home/craig/github/golang/go/src/encoding/asn1/asn1_test.go => &{<nil> TestSet 0 0xc00108af40 <nil>}
TYPE asn1.Validity:
  /home/craig/github/golang/go/src/encoding/asn1/asn1_test.go => &{<nil> Validity 0 0xc000d0a560 <nil>}
TYPE ast.ArrayType:
  /home/craig/github/golang/go/src/go/ast/ast.go => &{0xc0019543e0 ArrayType 0 0xc001954600 <nil>}
TYPE ast.AssignStmt:
  /home/craig/github/golang/go/src/go/ast/ast.go => &{0xc001a007e0 AssignStmt 0 0xc001a00a40 <nil>}
TYPE ast.BadDecl:
  /home/craig/github/golang/go/src/go/ast/ast.go => &{0xc001af6c60 BadDecl 0 0xc001af6da0 <nil>}
TYPE ast.BadExpr:
  /home/craig/github/golang/go/src/go/ast/ast.go => &{0xc001903560 BadExpr 0 0xc0019036a0 <nil>}
TYPE ast.BadStmt:
  /home/craig/github/golang/go/src/go/ast/ast.go => &{0xc0019c9b00 BadStmt 0 0xc0019c9c40 <nil>}
TYPE ast.BasicLit:
  /home/craig/github/golang/go/src/go/ast/ast.go => &{0xc001903ba0 BasicLit 0 0xc001903e00 <nil>}
TYPE ast.BinaryExpr:
  /home/craig/github/golang/go/src/go/ast/ast.go => &{0xc00190dc20 BinaryExpr 0 0xc00190df00 <nil>}
TYPE ast.BlockStmt:
  /home/craig/github/golang/go/src/go/ast/ast.go => &{0xc001a012a0 BlockStmt 0 0xc001a014c0 <nil>}
TYPE ast.BranchStmt:
  /home/craig/github/golang/go/src/go/ast/ast.go => &{0xc001a00fe0 BranchStmt 0 0xc001a01260 <nil>}
TYPE ast.CallExpr:
  /home/craig/github/golang/go/src/go/ast/ast.go => &{0xc00190d320 CallExpr 0 0xc00190d6c0 <nil>}
TYPE ast.CaseClause:
  /home/craig/github/golang/go/src/go/ast/ast.go => &{0xc001a01840 CaseClause 0 0xc001a01b20 <nil>}
TYPE ast.ChanDir:
  /home/craig/github/golang/go/src/go/ast/ast.go => &{<nil> ChanDir 0 int <nil>}
TYPE ast.ChanType:
  /home/craig/github/golang/go/src/go/ast/ast.go => &{0xc001955020 ChanType 0 0xc001955300 <nil>}
TYPE ast.CommClause:
  /home/craig/github/golang/go/src/go/ast/ast.go => &{0xc001a3c180 CommClause 0 0xc001a3c460 <nil>}
TYPE ast.Comment:
  /home/craig/github/golang/go/src/go/ast/ast.go => &{<nil> Comment 0 0xc0018bf640 <nil>}
TYPE ast.CommentGroup:
  /home/craig/github/golang/go/src/go/ast/ast.go => &{<nil> CommentGroup 0 0xc0018bfbe0 <nil>}
TYPE ast.CommentMap:
  /home/craig/github/golang/go/src/go/ast/commentmap.go => &{<nil> CommentMap 0 0xc0018cb410 <nil>}
TYPE ast.CompositeLit:
  /home/craig/github/golang/go/src/go/ast/ast.go => &{0xc00190c000 CompositeLit 0 0xc00190c360 <nil>}
TYPE ast.Decl:
  /home/craig/github/golang/go/src/go/ast/ast.go => &{<nil> Decl 0 0xc0018bf400 <nil>}
TYPE ast.DeclStmt:
  /home/craig/github/golang/go/src/go/ast/ast.go => &{0xc0019c9c80 DeclStmt 0 0xc0019c9d40 <nil>}
TYPE ast.DeferStmt:
  /home/craig/github/golang/go/src/go/ast/ast.go => &{0xc001a00c20 DeferStmt 0 0xc001a00d80 <nil>}
TYPE ast.Ellipsis:
  /home/craig/github/golang/go/src/go/ast/ast.go => &{0xc0019039c0 Ellipsis 0 0xc001903b60 <nil>}
TYPE ast.EmptyStmt:
  /home/craig/github/golang/go/src/go/ast/ast.go => &{0xc0019c9e00 EmptyStmt 0 0xc0019c9fa0 <nil>}
TYPE ast.Expr:
  /home/craig/github/golang/go/src/go/ast/ast.go => &{<nil> Expr 0 0xc0018bf240 <nil>}
TYPE ast.ExprStmt:
  /home/craig/github/golang/go/src/go/ast/ast.go => &{0xc001a00240 ExprStmt 0 0xc001a00300 <nil>}
TYPE ast.Field:
  /home/craig/github/golang/go/src/go/ast/ast.go => &{<nil> Field 0 0xc0018ffcc0 <nil>}
TYPE ast.FieldFilter:
  /home/craig/github/golang/go/src/go/ast/print.go => &{<nil> FieldFilter 0 0xc000a19120 <nil>}
TYPE ast.FieldList:
  /home/craig/github/golang/go/src/go/ast/ast.go => &{<nil> FieldList 0 0xc001902600 <nil>}
TYPE ast.File:
  /home/craig/github/golang/go/src/go/ast/ast.go => &{<nil> File 0 0xc001b6aec0 <nil>}
TYPE ast.Filter:
  /home/craig/github/golang/go/src/go/ast/filter.go => &{<nil> Filter 0 0xc00064d1e0 <nil>}
TYPE ast.ForStmt:
  /home/craig/github/golang/go/src/go/ast/ast.go => &{0xc001a3c680 ForStmt 0 0xc001a3c980 <nil>}
TYPE ast.FuncDecl:
  /home/craig/github/golang/go/src/go/ast/ast.go => &{0xc001af73c0 FuncDecl 0 0xc001af7760 <nil>}
TYPE ast.FuncLit:
  /home/craig/github/golang/go/src/go/ast/ast.go => &{0xc001903e40 FuncLit 0 0xc001903fc0 <nil>}
TYPE ast.FuncType:
  /home/craig/github/golang/go/src/go/ast/ast.go => &{0xc001954900 FuncType 0 0xc001954b80 <nil>}
TYPE ast.GenDecl:
  /home/craig/github/golang/go/src/go/ast/ast.go => &{0xc001af6f40 GenDecl 0 0xc001af7380 <nil>}
TYPE ast.GoStmt:
  /home/craig/github/golang/go/src/go/ast/ast.go => &{0xc001a00a80 GoStmt 0 0xc001a00be0 <nil>}
TYPE ast.Ident:
  /home/craig/github/golang/go/src/go/ast/ast.go => &{0xc0019036e0 Ident 0 0xc001903920 <nil>}
TYPE ast.IfStmt:
  /home/craig/github/golang/go/src/go/ast/ast.go => &{0xc001a01500 IfStmt 0 0xc001a01800 <nil>}
TYPE ast.ImportSpec:
  /home/craig/github/golang/go/src/go/ast/ast.go => &{0xc001ab8c80 ImportSpec 0 0xc001ab9020 <nil>}
TYPE ast.Importer:
  /home/craig/github/golang/go/src/go/ast/resolve.go => &{<nil> Importer 0 0xc000d6d0a0 <nil>}
TYPE ast.IncDecStmt:
  /home/craig/github/golang/go/src/go/ast/ast.go => &{0xc001a00520 IncDecStmt 0 0xc001a00740 <nil>}
TYPE ast.IndexExpr:
  /home/craig/github/golang/go/src/go/ast/ast.go => &{0xc00190c7e0 IndexExpr 0 0xc00190cac0 <nil>}
TYPE ast.InterfaceType:
  /home/craig/github/golang/go/src/go/ast/ast.go => &{0xc001954bc0 InterfaceType 0 0xc001954e00 <nil>}
TYPE ast.KeyValueExpr:
  /home/craig/github/golang/go/src/go/ast/ast.go => &{0xc00190dfa0 KeyValueExpr 0 0xc001954140 <nil>}
TYPE ast.LabeledStmt:
  /home/craig/github/golang/go/src/go/ast/ast.go => &{0xc0019c9fe0 LabeledStmt 0 0xc001a001a0 <nil>}
TYPE ast.MapType:
  /home/craig/github/golang/go/src/go/ast/ast.go => &{0xc001954e40 MapType 0 0xc001954fe0 <nil>}
TYPE ast.MergeMode:
  /home/craig/github/golang/go/src/go/ast/filter.go => &{<nil> MergeMode 0 uint <nil>}
TYPE ast.Node:
  /home/craig/github/golang/go/src/go/ast/ast.go => &{<nil> Node 0 0xc0018bf140 <nil>}
TYPE ast.ObjKind:
  /home/craig/github/golang/go/src/go/ast/scope.go => &{<nil> ObjKind 0 int <nil>}
TYPE ast.Object:
  /home/craig/github/golang/go/src/go/ast/scope.go => &{<nil> Object 0 0xc001247560 <nil>}
TYPE ast.Package:
  /home/craig/github/golang/go/src/go/ast/ast.go => &{<nil> Package 0 0xc001b6b7a0 <nil>}
TYPE ast.ParenExpr:
  /home/craig/github/golang/go/src/go/ast/ast.go => &{0xc00190c3a0 ParenExpr 0 0xc00190c600 <nil>}
TYPE ast.RangeStmt:
  /home/craig/github/golang/go/src/go/ast/ast.go => &{0xc001a3c9c0 RangeStmt 0 0xc001a3ce00 <nil>}
TYPE ast.ReturnStmt:
  /home/craig/github/golang/go/src/go/ast/ast.go => &{0xc001a00dc0 ReturnStmt 0 0xc001a00f40 <nil>}
TYPE ast.Scope:
  /home/craig/github/golang/go/src/go/ast/scope.go => &{<nil> Scope 0 0xc0011a5e60 <nil>}
TYPE ast.SelectStmt:
  /home/craig/github/golang/go/src/go/ast/ast.go => &{0xc001a3c4a0 SelectStmt 0 0xc001a3c640 <nil>}
TYPE ast.SelectorExpr:
  /home/craig/github/golang/go/src/go/ast/ast.go => &{0xc00190c640 SelectorExpr 0 0xc00190c7a0 <nil>}
TYPE ast.SendStmt:
  /home/craig/github/golang/go/src/go/ast/ast.go => &{0xc001a00340 SendStmt 0 0xc001a004e0 <nil>}
TYPE ast.SliceExpr:
  /home/craig/github/golang/go/src/go/ast/ast.go => &{0xc00190cb00 SliceExpr 0 0xc00190cf60 <nil>}
TYPE ast.Spec:
  /home/craig/github/golang/go/src/go/ast/ast.go => &{0xc001ab8ba0 Spec 0 0xc001ab8c40 <nil>}
TYPE ast.StarExpr:
  /home/craig/github/golang/go/src/go/ast/ast.go => &{0xc00190d760 StarExpr 0 0xc00190d8e0 <nil>}
TYPE ast.Stmt:
  /home/craig/github/golang/go/src/go/ast/ast.go => &{<nil> Stmt 0 0xc0018bf320 <nil>}
TYPE ast.StructType:
  /home/craig/github/golang/go/src/go/ast/ast.go => &{0xc001954640 StructType 0 0xc001954880 <nil>}
TYPE ast.SwitchStmt:
  /home/craig/github/golang/go/src/go/ast/ast.go => &{0xc001a01b60 SwitchStmt 0 0xc001a01e40 <nil>}
TYPE ast.TypeAssertExpr:
  /home/craig/github/golang/go/src/go/ast/ast.go => &{0xc00190d000 TypeAssertExpr 0 0xc00190d2e0 <nil>}
TYPE ast.TypeSpec:
  /home/craig/github/golang/go/src/go/ast/ast.go => &{0xc001ab9460 TypeSpec 0 0xc001ab97e0 <nil>}
TYPE ast.TypeSwitchStmt:
  /home/craig/github/golang/go/src/go/ast/ast.go => &{0xc001a01e80 TypeSwitchStmt 0 0xc001a3c140 <nil>}
TYPE ast.UnaryExpr:
  /home/craig/github/golang/go/src/go/ast/ast.go => &{0xc00190d980 UnaryExpr 0 0xc00190dbe0 <nil>}
TYPE ast.ValueSpec:
  /home/craig/github/golang/go/src/go/ast/ast.go => &{0xc001ab90c0 ValueSpec 0 0xc001ab9420 <nil>}
TYPE ast.Visitor:
  /home/craig/github/golang/go/src/go/ast/walk.go => &{<nil> Visitor 0 0xc0012a1fe0 <nil>}
TYPE atomic.Value:
  /home/craig/github/golang/go/src/sync/atomic/value.go => &{<nil> Value 0 0xc006260e00 <nil>}
TYPE base32.CorruptInputError:
  /home/craig/github/golang/go/src/encoding/base32/base32.go => &{<nil> CorruptInputError 0 int64 <nil>}
TYPE base32.Encoding:
  /home/craig/github/golang/go/src/encoding/base32/base32.go => &{<nil> Encoding 0 0xc00149e580 <nil>}
TYPE base64.CorruptInputError:
  /home/craig/github/golang/go/src/encoding/base64/base64.go => &{<nil> CorruptInputError 0 int64 <nil>}
TYPE base64.Encoding:
  /home/craig/github/golang/go/src/encoding/base64/base64.go => &{<nil> Encoding 0 0xc001316fe0 <nil>}
TYPE bidi.Class:
  /home/craig/github/golang/go/src/vendor/golang_org/x/text/unicode/bidi/trieval.go => &{<nil> Class 0 uint <nil>}
TYPE bidi.Direction:
  /home/craig/github/golang/go/src/vendor/golang_org/x/text/unicode/bidi/bidi.go => &{<nil> Direction 0 int <nil>}
TYPE bidi.Option:
  /home/craig/github/golang/go/src/vendor/golang_org/x/text/unicode/bidi/bidi.go => &{<nil> Option 0 0xc00502c680 <nil>}
TYPE bidi.Ordering:
  /home/craig/github/golang/go/src/vendor/golang_org/x/text/unicode/bidi/bidi.go => &{<nil> Ordering 0 0xc00502d960 <nil>}
TYPE bidi.Paragraph:
  /home/craig/github/golang/go/src/vendor/golang_org/x/text/unicode/bidi/bidi.go => &{<nil> Paragraph 0 0xc00502ca00 <nil>}
TYPE bidi.Properties:
  /home/craig/github/golang/go/src/vendor/golang_org/x/text/unicode/bidi/prop.go => &{<nil> Properties 0 0xc005120020 <nil>}
TYPE bidi.Run:
  /home/craig/github/golang/go/src/vendor/golang_org/x/text/unicode/bidi/bidi.go => &{<nil> Run 0 0xc00502df40 <nil>}
TYPE bidirule.Transformer:
  /home/craig/github/golang/go/src/vendor/golang_org/x/text/secure/bidirule/bidirule.go => &{<nil> Transformer 0 0xc0051c93a0 <nil>}
TYPE big.Accuracy:
  /home/craig/github/golang/go/src/math/big/float.go => &{<nil> Accuracy 0 int8 <nil>}
TYPE big.Bits:
  /home/craig/github/golang/go/src/math/big/bits_test.go => &{<nil> Bits 0 0xc002ea2360 <nil>}
TYPE big.ErrNaN:
  /home/craig/github/golang/go/src/math/big/float.go => &{<nil> ErrNaN 0 0xc0030662c0 <nil>}
TYPE big.Float:
  /home/craig/github/golang/go/src/math/big/float.go => &{<nil> Float 0 0xc0030661e0 <nil>}
TYPE big.Int:
  /home/craig/github/golang/go/src/math/big/int.go => &{<nil> Int 0 0xc00327cdc0 <nil>}
TYPE big.Rat:
  /home/craig/github/golang/go/src/math/big/rat.go => &{<nil> Rat 0 0xc003168260 <nil>}
TYPE big.RoundingMode:
  /home/craig/github/golang/go/src/math/big/float.go => &{<nil> RoundingMode 0 byte <nil>}
TYPE big.StringTest:
  /home/craig/github/golang/go/src/math/big/ratconv_test.go => &{<nil> StringTest 0 0xc002f04580 <nil>}
TYPE big.Word:
  /home/craig/github/golang/go/src/math/big/arith.go => &{<nil> Word 0 uint <nil>}
TYPE binary.BlankFields:
  /home/craig/github/golang/go/src/encoding/binary/binary_test.go => &{<nil> BlankFields 0 0xc0012b7d20 <nil>}
TYPE binary.BlankFieldsProbe:
  /home/craig/github/golang/go/src/encoding/binary/binary_test.go => &{<nil> BlankFieldsProbe 0 0xc0012b7fe0 <nil>}
TYPE binary.ByteOrder:
  /home/craig/github/golang/go/src/encoding/binary/binary.go => &{<nil> ByteOrder 0 0xc0012db7a0 <nil>}
TYPE binary.Struct:
  /home/craig/github/golang/go/src/encoding/binary/binary_test.go => &{<nil> Struct 0 0xc0013e69a0 <nil>}
TYPE binary.T:
  /home/craig/github/golang/go/src/encoding/binary/binary_test.go => &{<nil> T 0 0xc0013e6b40 <nil>}
TYPE binary.Unexported:
  /home/craig/github/golang/go/src/encoding/binary/binary_test.go => &{<nil> Unexported 0 0xc001441240 <nil>}
TYPE bufio.ReadWriter:
  /home/craig/github/golang/go/src/bufio/bufio.go => &{<nil> ReadWriter 0 0xc000340960 <nil>}
TYPE bufio.Reader:
  /home/craig/github/golang/go/src/bufio/bufio.go => &{<nil> Reader 0 0xc000415840 <nil>}
TYPE bufio.Scanner:
  /home/craig/github/golang/go/src/bufio/scan.go => &{<nil> Scanner 0 0xc0003415e0 <nil>}
TYPE bufio.SplitFunc:
  /home/craig/github/golang/go/src/bufio/scan.go => &{<nil> SplitFunc 0 0xc000341a80 <nil>}
TYPE bufio.Writer:
  /home/craig/github/golang/go/src/bufio/bufio.go => &{<nil> Writer 0 0xc00032f4e0 <nil>}
TYPE bufio_test.StringReader:
  /home/craig/github/golang/go/src/bufio/bufio_test.go => &{<nil> StringReader 0 0xc0001a2120 <nil>}
TYPE build.Context:
  /home/craig/github/golang/go/src/go/build/build.go => &{<nil> Context 0 0xc001bc3920 <nil>}
TYPE build.GoodFileTest:
  /home/craig/github/golang/go/src/go/build/syslist_test.go => &{<nil> GoodFileTest 0 0xc0018bbbe0 <nil>}
TYPE build.ImportMode:
  /home/craig/github/golang/go/src/go/build/build.go => &{<nil> ImportMode 0 uint <nil>}
TYPE build.MultiplePackageError:
  /home/craig/github/golang/go/src/go/build/build.go => &{<nil> MultiplePackageError 0 0xc001ccf940 <nil>}
TYPE build.NoGoError:
  /home/craig/github/golang/go/src/go/build/build.go => &{<nil> NoGoError 0 0xc001ccf5a0 <nil>}
TYPE build.Package:
  /home/craig/github/golang/go/src/go/build/build.go => &{<nil> Package 0 0xc001ccef80 <nil>}
TYPE bytes.Buffer:
  /home/craig/github/golang/go/src/bytes/buffer.go => &{<nil> Buffer 0 0xc0004eda60 <nil>}
TYPE bytes.Reader:
  /home/craig/github/golang/go/src/bytes/reader.go => &{<nil> Reader 0 0xc0002ef140 <nil>}
TYPE bytes_test.BinOpTest:
  /home/craig/github/golang/go/src/bytes/bytes_test.go => &{<nil> BinOpTest 0 0xc00052b820 <nil>}
TYPE bytes_test.ExplodeTest:
  /home/craig/github/golang/go/src/bytes/bytes_test.go => &{<nil> ExplodeTest 0 0xc000579700 <nil>}
TYPE bytes_test.FieldsTest:
  /home/craig/github/golang/go/src/bytes/bytes_test.go => &{<nil> FieldsTest 0 0xc00058f0e0 <nil>}
TYPE bytes_test.IndexFuncTest:
  /home/craig/github/golang/go/src/bytes/bytes_test.go => &{<nil> IndexFuncTest 0 0xc0005af600 <nil>}
TYPE bytes_test.RepeatTest:
  /home/craig/github/golang/go/src/bytes/bytes_test.go => &{<nil> RepeatTest 0 0xc00059b120 <nil>}
TYPE bytes_test.ReplaceTest:
  /home/craig/github/golang/go/src/bytes/bytes_test.go => &{<nil> ReplaceTest 0 0xc0005c4e20 <nil>}
TYPE bytes_test.RunesTest:
  /home/craig/github/golang/go/src/bytes/bytes_test.go => &{<nil> RunesTest 0 0xc0005a3340 <nil>}
TYPE bytes_test.SplitTest:
  /home/craig/github/golang/go/src/bytes/bytes_test.go => &{<nil> SplitTest 0 0xc00057e5c0 <nil>}
TYPE bytes_test.StringTest:
  /home/craig/github/golang/go/src/bytes/bytes_test.go => &{<nil> StringTest 0 0xc000591ae0 <nil>}
TYPE bytes_test.TitleTest:
  /home/craig/github/golang/go/src/bytes/bytes_test.go => &{<nil> TitleTest 0 0xc0005d8b40 <nil>}
TYPE bytes_test.TrimFuncTest:
  /home/craig/github/golang/go/src/bytes/bytes_test.go => &{<nil> TrimFuncTest 0 0xc0005ae740 <nil>}
TYPE bytes_test.TrimTest:
  /home/craig/github/golang/go/src/bytes/bytes_test.go => &{<nil> TrimTest 0 0xc0005a8300 <nil>}
TYPE bzip2.StructuralError:
  /home/craig/github/golang/go/src/compress/bzip2/bzip2.go => &{<nil> StructuralError 0 string <nil>}
TYPE cgi.Handler:
  /home/craig/github/golang/go/src/net/http/cgi/host.go => &{<nil> Handler 0 0xc0043fc020 <nil>}
TYPE cipher.AEAD:
  /home/craig/github/golang/go/src/crypto/cipher/gcm.go => &{<nil> AEAD 0 0xc0007c50e0 <nil>}
TYPE cipher.Block:
  /home/craig/github/golang/go/src/crypto/cipher/cipher.go => &{<nil> Block 0 0xc0007e94a0 <nil>}
TYPE cipher.BlockMode:
  /home/craig/github/golang/go/src/crypto/cipher/cipher.go => &{<nil> BlockMode 0 0xc0007e9b40 <nil>}
TYPE cipher.Stream:
  /home/craig/github/golang/go/src/crypto/cipher/cipher.go => &{<nil> Stream 0 0xc0007e9780 <nil>}
TYPE cipher.StreamReader:
  /home/craig/github/golang/go/src/crypto/cipher/io.go => &{<nil> StreamReader 0 0xc000b0cbe0 <nil>}
TYPE cipher.StreamWriter:
  /home/craig/github/golang/go/src/crypto/cipher/io.go => &{<nil> StreamWriter 0 0xc000b0d2a0 <nil>}
TYPE color.Alpha:
  /home/craig/github/golang/go/src/image/color/color.go => &{<nil> Alpha 0 0xc0028300a0 <nil>}
TYPE color.Alpha16:
  /home/craig/github/golang/go/src/image/color/color.go => &{<nil> Alpha16 0 0xc002830a40 <nil>}
TYPE color.CMYK:
  /home/craig/github/golang/go/src/image/color/ycbcr.go => &{<nil> CMYK 0 0xc00281c7c0 <nil>}
TYPE color.Color:
  /home/craig/github/golang/go/src/image/color/color.go => &{<nil> Color 0 0xc00281d960 <nil>}
TYPE color.Gray:
  /home/craig/github/golang/go/src/image/color/color.go => &{<nil> Gray 0 0xc0028342e0 <nil>}
TYPE color.Gray16:
  /home/craig/github/golang/go/src/image/color/color.go => &{<nil> Gray16 0 0xc002835260 <nil>}
TYPE color.Model:
  /home/craig/github/golang/go/src/image/color/color.go => &{<nil> Model 0 0xc002835680 <nil>}
TYPE color.NRGBA:
  /home/craig/github/golang/go/src/image/color/color.go => &{<nil> NRGBA 0 0xc002821960 <nil>}
TYPE color.NRGBA64:
  /home/craig/github/golang/go/src/image/color/color.go => &{<nil> NRGBA64 0 0xc002829360 <nil>}
TYPE color.NYCbCrA:
  /home/craig/github/golang/go/src/image/color/ycbcr.go => &{<nil> NYCbCrA 0 0xc0027eb200 <nil>}
TYPE color.Palette:
  /home/craig/github/golang/go/src/image/color/color.go => &{<nil> Palette 0 0xc001c7a030 <nil>}
TYPE color.RGBA:
  /home/craig/github/golang/go/src/image/color/color.go => &{<nil> RGBA 0 0xc00281db60 <nil>}
TYPE color.RGBA64:
  /home/craig/github/golang/go/src/image/color/color.go => &{<nil> RGBA64 0 0xc002820960 <nil>}
TYPE color.YCbCr:
  /home/craig/github/golang/go/src/image/color/ycbcr.go => &{<nil> YCbCr 0 0xc0027d7b80 <nil>}
TYPE constant.Kind:
  /home/craig/github/golang/go/src/go/constant/value.go => &{<nil> Kind 0 int <nil>}
TYPE constant.Value:
  /home/craig/github/golang/go/src/go/constant/value.go => &{<nil> Value 0 0xc0013b0dc0 <nil>}
TYPE context.CancelFunc:
  /home/craig/github/golang/go/src/context/context.go => &{<nil> CancelFunc 0 0xc0009a7e20 <nil>}
TYPE context.Context:
  /home/craig/github/golang/go/src/context/context.go => &{<nil> Context 0 0xc0009a6e20 <nil>}
TYPE cookiejar.Jar:
  /home/craig/github/golang/go/src/net/http/cookiejar/jar.go => &{<nil> Jar 0 0xc0044b2a40 <nil>}
TYPE cookiejar.Options:
  /home/craig/github/golang/go/src/net/http/cookiejar/jar.go => &{<nil> Options 0 0xc0044b2720 <nil>}
TYPE cookiejar.PublicSuffixList:
  /home/craig/github/golang/go/src/net/http/cookiejar/jar.go => &{<nil> PublicSuffixList 0 0xc0044b2540 <nil>}
TYPE crc32.Table:
  /home/craig/github/golang/go/src/hash/crc32/crc32.go => &{<nil> Table 0 0xc0020085a0 <nil>}
TYPE crc64.Table:
  /home/craig/github/golang/go/src/hash/crc64/crc64.go => &{<nil> Table 0 0xc002111fb0 <nil>}
TYPE crypto.Decrypter:
  /home/craig/github/golang/go/src/crypto/crypto.go => &{<nil> Decrypter 0 0xc0009e4540 <nil>}
TYPE crypto.DecrypterOpts:
  /home/craig/github/golang/go/src/crypto/crypto.go => &{<nil> DecrypterOpts 0 0xc0009e4580 <nil>}
TYPE crypto.Hash:
  /home/craig/github/golang/go/src/crypto/crypto.go => &{<nil> Hash 0 uint <nil>}
TYPE crypto.PrivateKey:
  /home/craig/github/golang/go/src/crypto/crypto.go => &{<nil> PrivateKey 0 0xc0009dfa80 <nil>}
TYPE crypto.PublicKey:
  /home/craig/github/golang/go/src/crypto/crypto.go => &{<nil> PublicKey 0 0xc0009dfa00 <nil>}
TYPE crypto.Signer:
  /home/craig/github/golang/go/src/crypto/crypto.go => &{<nil> Signer 0 0xc0009dffa0 <nil>}
TYPE crypto.SignerOpts:
  /home/craig/github/golang/go/src/crypto/crypto.go => &{<nil> SignerOpts 0 0xc0009e4120 <nil>}
TYPE cryptobyte.BuildError:
  /home/craig/github/golang/go/src/vendor/golang_org/x/crypto/cryptobyte/builder.go => &{<nil> BuildError 0 0xc006066ac0 <nil>}
TYPE cryptobyte.Builder:
  /home/craig/github/golang/go/src/vendor/golang_org/x/crypto/cryptobyte/builder.go => &{<nil> Builder 0 0xc006042ee0 <nil>}
TYPE cryptobyte.BuilderContinuation:
  /home/craig/github/golang/go/src/vendor/golang_org/x/crypto/cryptobyte/builder.go => &{<nil> BuilderContinuation 0 0xc0060669a0 <nil>}
TYPE cryptobyte.MarshalingValue:
  /home/craig/github/golang/go/src/vendor/golang_org/x/crypto/cryptobyte/builder.go => &{<nil> MarshalingValue 0 0xc0060b8960 <nil>}
TYPE cryptobyte.String:
  /home/craig/github/golang/go/src/vendor/golang_org/x/crypto/cryptobyte/string.go => &{<nil> String 0 0xc003550ea0 <nil>}
TYPE csv.ParseError:
  /home/craig/github/golang/go/src/encoding/csv/reader.go => &{<nil> ParseError 0 0xc000d5d3a0 <nil>}
TYPE csv.Reader:
  /home/craig/github/golang/go/src/encoding/csv/reader.go => &{<nil> Reader 0 0xc000d60de0 <nil>}
TYPE csv.Writer:
  /home/craig/github/golang/go/src/encoding/csv/writer.go => &{<nil> Writer 0 0xc000ea0b20 <nil>}
TYPE debug.GCStats:
  /home/craig/github/golang/go/src/runtime/debug/garbage.go => &{<nil> GCStats 0 0xc0059049e0 <nil>}
TYPE debug_test.Obj:
  /home/craig/github/golang/go/src/runtime/debug/heapdump_test.go => &{<nil> Obj 0 0xc005916480 <nil>}
TYPE debug_test.T:
  /home/craig/github/golang/go/src/runtime/debug/stack_test.go => &{<nil> T 0 int <nil>}
TYPE des.CryptTest:
  /home/craig/github/golang/go/src/crypto/des/des_test.go => &{<nil> CryptTest 0 0xc0006c5f80 <nil>}
TYPE des.KeySizeError:
  /home/craig/github/golang/go/src/crypto/des/cipher.go => &{<nil> KeySizeError 0 int <nil>}
TYPE dnsmessage.AAAAResource:
  /home/craig/github/golang/go/src/vendor/golang_org/x/net/dns/dnsmessage/message.go => &{<nil> AAAAResource 0 0xc004e9ffa0 <nil>}
TYPE dnsmessage.AResource:
  /home/craig/github/golang/go/src/vendor/golang_org/x/net/dns/dnsmessage/message.go => &{<nil> AResource 0 0xc004e9f660 <nil>}
TYPE dnsmessage.Builder:
  /home/craig/github/golang/go/src/vendor/golang_org/x/net/dns/dnsmessage/message.go => &{<nil> Builder 0 0xc004536500 <nil>}
TYPE dnsmessage.CNAMEResource:
  /home/craig/github/golang/go/src/vendor/golang_org/x/net/dns/dnsmessage/message.go => &{<nil> CNAMEResource 0 0xc003d93e40 <nil>}
TYPE dnsmessage.Class:
  /home/craig/github/golang/go/src/vendor/golang_org/x/net/dns/dnsmessage/message.go => &{<nil> Class 0 uint16 <nil>}
TYPE dnsmessage.Header:
  /home/craig/github/golang/go/src/vendor/golang_org/x/net/dns/dnsmessage/message.go => &{<nil> Header 0 0xc0048b46e0 <nil>}
TYPE dnsmessage.MXResource:
  /home/craig/github/golang/go/src/vendor/golang_org/x/net/dns/dnsmessage/message.go => &{<nil> MXResource 0 0xc004c507c0 <nil>}
TYPE dnsmessage.Message:
  /home/craig/github/golang/go/src/vendor/golang_org/x/net/dns/dnsmessage/message.go => &{<nil> Message 0 0xc0048b4ee0 <nil>}
TYPE dnsmessage.NSResource:
  /home/craig/github/golang/go/src/vendor/golang_org/x/net/dns/dnsmessage/message.go => &{<nil> NSResource 0 0xc004c51740 <nil>}
TYPE dnsmessage.Name:
  /home/craig/github/golang/go/src/vendor/golang_org/x/net/dns/dnsmessage/message.go => &{<nil> Name 0 0xc003c61960 <nil>}
TYPE dnsmessage.OpCode:
  /home/craig/github/golang/go/src/vendor/golang_org/x/net/dns/dnsmessage/message.go => &{<nil> OpCode 0 uint16 <nil>}
TYPE dnsmessage.PTRResource:
  /home/craig/github/golang/go/src/vendor/golang_org/x/net/dns/dnsmessage/message.go => &{<nil> PTRResource 0 0xc004cb2080 <nil>}
TYPE dnsmessage.Parser:
  /home/craig/github/golang/go/src/vendor/golang_org/x/net/dns/dnsmessage/message.go => &{<nil> Parser 0 0xc0044a30c0 <nil>}
TYPE dnsmessage.Question:
  /home/craig/github/golang/go/src/vendor/golang_org/x/net/dns/dnsmessage/message.go => &{<nil> Question 0 0xc003d91c40 <nil>}
TYPE dnsmessage.RCode:
  /home/craig/github/golang/go/src/vendor/golang_org/x/net/dns/dnsmessage/message.go => &{<nil> RCode 0 uint16 <nil>}
TYPE dnsmessage.Resource:
  /home/craig/github/golang/go/src/vendor/golang_org/x/net/dns/dnsmessage/message.go => &{<nil> Resource 0 0xc003ec1c60 <nil>}
TYPE dnsmessage.ResourceBody:
  /home/craig/github/golang/go/src/vendor/golang_org/x/net/dns/dnsmessage/message.go => &{<nil> ResourceBody 0 0xc003ec1f80 <nil>}
TYPE dnsmessage.ResourceHeader:
  /home/craig/github/golang/go/src/vendor/golang_org/x/net/dns/dnsmessage/message.go => &{<nil> ResourceHeader 0 0xc003bd9000 <nil>}
TYPE dnsmessage.SOAResource:
  /home/craig/github/golang/go/src/vendor/golang_org/x/net/dns/dnsmessage/message.go => &{<nil> SOAResource 0 0xc004cb2c00 <nil>}
TYPE dnsmessage.SRVResource:
  /home/craig/github/golang/go/src/vendor/golang_org/x/net/dns/dnsmessage/message.go => &{<nil> SRVResource 0 0xc004e05fe0 <nil>}
TYPE dnsmessage.TXTResource:
  /home/craig/github/golang/go/src/vendor/golang_org/x/net/dns/dnsmessage/message.go => &{<nil> TXTResource 0 0xc004e04dc0 <nil>}
TYPE dnsmessage.Type:
  /home/craig/github/golang/go/src/vendor/golang_org/x/net/dns/dnsmessage/message.go => &{<nil> Type 0 uint16 <nil>}
TYPE doc.Example:
  /home/craig/github/golang/go/src/go/doc/example.go => &{<nil> Example 0 0xc002094520 <nil>}
TYPE doc.Filter:
  /home/craig/github/golang/go/src/go/doc/filter.go => &{<nil> Filter 0 0xc001f19260 <nil>}
TYPE doc.Func:
  /home/craig/github/golang/go/src/go/doc/doc.go => &{<nil> Func 0 0xc001b9e940 <nil>}
TYPE doc.Mode:
  /home/craig/github/golang/go/src/go/doc/doc.go => &{<nil> Mode 0 int <nil>}
TYPE doc.Note:
  /home/craig/github/golang/go/src/go/doc/doc.go => &{<nil> Note 0 0xc001b9ec60 <nil>}
TYPE doc.Package:
  /home/craig/github/golang/go/src/go/doc/doc.go => &{<nil> Package 0 0xc001b95ec0 <nil>}
TYPE doc.Type:
  /home/craig/github/golang/go/src/go/doc/doc.go => &{<nil> Type 0 0xc001b9e5a0 <nil>}
TYPE doc.Value:
  /home/craig/github/golang/go/src/go/doc/doc.go => &{<nil> Value 0 0xc001b9e120 <nil>}
TYPE draw.Drawer:
  /home/craig/github/golang/go/src/image/draw/draw.go => &{<nil> Drawer 0 0xc001d9ef00 <nil>}
TYPE draw.Image:
  /home/craig/github/golang/go/src/image/draw/draw.go => &{<nil> Image 0 0xc001d9e3a0 <nil>}
TYPE draw.Op:
  /home/craig/github/golang/go/src/image/draw/draw.go => &{<nil> Op 0 int <nil>}
TYPE draw.Quantizer:
  /home/craig/github/golang/go/src/image/draw/draw.go => &{<nil> Quantizer 0 0xc001d9e620 <nil>}
TYPE driver.ColumnConverter:
  /home/craig/github/golang/go/src/database/sql/driver/driver.go => &{<nil> ColumnConverter 0 0xc0012c8900 <nil>}
TYPE driver.Conn:
  /home/craig/github/golang/go/src/database/sql/driver/driver.go => &{<nil> Conn 0 0xc0012c07a0 <nil>}
TYPE driver.ConnBeginTx:
  /home/craig/github/golang/go/src/database/sql/driver/driver.go => &{<nil> ConnBeginTx 0 0xc0012c1020 <nil>}
TYPE driver.ConnPrepareContext:
  /home/craig/github/golang/go/src/database/sql/driver/driver.go => &{<nil> ConnPrepareContext 0 0xc0012c0a20 <nil>}
TYPE driver.Connector:
  /home/craig/github/golang/go/src/database/sql/driver/driver.go => &{<nil> Connector 0 0xc0012bb040 <nil>}
TYPE driver.Driver:
  /home/craig/github/golang/go/src/database/sql/driver/driver.go => &{<nil> Driver 0 0xc0012ba880 <nil>}
TYPE driver.DriverContext:
  /home/craig/github/golang/go/src/database/sql/driver/driver.go => &{<nil> DriverContext 0 0xc0012bab00 <nil>}
TYPE driver.Execer:
  /home/craig/github/golang/go/src/database/sql/driver/driver.go => &{<nil> Execer 0 0xc0012bb8c0 <nil>}
TYPE driver.ExecerContext:
  /home/craig/github/golang/go/src/database/sql/driver/driver.go => &{<nil> ExecerContext 0 0xc0012bbc40 <nil>}
TYPE driver.IsolationLevel:
  /home/craig/github/golang/go/src/database/sql/driver/driver.go => &{<nil> IsolationLevel 0 int <nil>}
TYPE driver.NamedValue:
  /home/craig/github/golang/go/src/database/sql/driver/driver.go => &{<nil> NamedValue 0 0xc0012ba4e0 <nil>}
TYPE driver.NamedValueChecker:
  /home/craig/github/golang/go/src/database/sql/driver/driver.go => &{<nil> NamedValueChecker 0 0xc0012c8680 <nil>}
TYPE driver.NotNull:
  /home/craig/github/golang/go/src/database/sql/driver/types.go => &{<nil> NotNull 0 0xc00129d040 <nil>}
TYPE driver.Null:
  /home/craig/github/golang/go/src/database/sql/driver/types.go => &{<nil> Null 0 0xc00129cc80 <nil>}
TYPE driver.Pinger:
  /home/craig/github/golang/go/src/database/sql/driver/driver.go => &{<nil> Pinger 0 0xc0012bb600 <nil>}
TYPE driver.Queryer:
  /home/craig/github/golang/go/src/database/sql/driver/driver.go => &{<nil> Queryer 0 0xc0012bbf00 <nil>}
TYPE driver.QueryerContext:
  /home/craig/github/golang/go/src/database/sql/driver/driver.go => &{<nil> QueryerContext 0 0xc0012c0280 <nil>}
TYPE driver.Result:
  /home/craig/github/golang/go/src/database/sql/driver/driver.go => &{<nil> Result 0 0xc0012c1560 <nil>}
TYPE driver.Rows:
  /home/craig/github/golang/go/src/database/sql/driver/driver.go => &{<nil> Rows 0 0xc0012c8d60 <nil>}
TYPE driver.RowsAffected:
  /home/craig/github/golang/go/src/database/sql/driver/driver.go => &{<nil> RowsAffected 0 int64 <nil>}
TYPE driver.RowsColumnTypeDatabaseTypeName:
  /home/craig/github/golang/go/src/database/sql/driver/driver.go => &{<nil> RowsColumnTypeDatabaseTypeName 0 0xc0012c93e0 <nil>}
TYPE driver.RowsColumnTypeLength:
  /home/craig/github/golang/go/src/database/sql/driver/driver.go => &{<nil> RowsColumnTypeLength 0 0xc0012c96e0 <nil>}
TYPE driver.RowsColumnTypeNullable:
  /home/craig/github/golang/go/src/database/sql/driver/driver.go => &{<nil> RowsColumnTypeNullable 0 0xc0012c9900 <nil>}
TYPE driver.RowsColumnTypePrecisionScale:
  /home/craig/github/golang/go/src/database/sql/driver/driver.go => &{<nil> RowsColumnTypePrecisionScale 0 0xc0012c9ba0 <nil>}
TYPE driver.RowsColumnTypeScanType:
  /home/craig/github/golang/go/src/database/sql/driver/driver.go => &{<nil> RowsColumnTypeScanType 0 0xc0012c9200 <nil>}
TYPE driver.RowsNextResultSet:
  /home/craig/github/golang/go/src/database/sql/driver/driver.go => &{<nil> RowsNextResultSet 0 0xc0012c9020 <nil>}
TYPE driver.SessionResetter:
  /home/craig/github/golang/go/src/database/sql/driver/driver.go => &{<nil> SessionResetter 0 0xc0012c12a0 <nil>}
TYPE driver.Stmt:
  /home/craig/github/golang/go/src/database/sql/driver/driver.go => &{<nil> Stmt 0 0xc0012c1c40 <nil>}
TYPE driver.StmtExecContext:
  /home/craig/github/golang/go/src/database/sql/driver/driver.go => &{<nil> StmtExecContext 0 0xc0012c1ee0 <nil>}
TYPE driver.StmtQueryContext:
  /home/craig/github/golang/go/src/database/sql/driver/driver.go => &{<nil> StmtQueryContext 0 0xc0012c8180 <nil>}
TYPE driver.Tx:
  /home/craig/github/golang/go/src/database/sql/driver/driver.go => &{<nil> Tx 0 0xc0012c9ce0 <nil>}
TYPE driver.TxOptions:
  /home/craig/github/golang/go/src/database/sql/driver/driver.go => &{<nil> TxOptions 0 0xc0012c0c80 <nil>}
TYPE driver.Value:
  /home/craig/github/golang/go/src/database/sql/driver/driver.go => &{<nil> Value 0 0xc0012ba220 <nil>}
TYPE driver.ValueConverter:
  /home/craig/github/golang/go/src/database/sql/driver/types.go => &{<nil> ValueConverter 0 0xc00127fa80 <nil>}
TYPE driver.Valuer:
  /home/craig/github/golang/go/src/database/sql/driver/types.go => &{<nil> Valuer 0 0xc00127fca0 <nil>}
TYPE dsa.ParameterSizes:
  /home/craig/github/golang/go/src/crypto/dsa/dsa.go => &{<nil> ParameterSizes 0 int <nil>}
TYPE dsa.Parameters:
  /home/craig/github/golang/go/src/crypto/dsa/dsa.go => &{<nil> Parameters 0 0xc000761200 <nil>}
TYPE dsa.PrivateKey:
  /home/craig/github/golang/go/src/crypto/dsa/dsa.go => &{<nil> PrivateKey 0 0xc0007614c0 <nil>}
TYPE dsa.PublicKey:
  /home/craig/github/golang/go/src/crypto/dsa/dsa.go => &{<nil> PublicKey 0 0xc000761360 <nil>}
TYPE dwarf.AddrType:
  /home/craig/github/golang/go/src/debug/dwarf/type.go => &{<nil> AddrType 0 0xc0012e4220 <nil>}
TYPE dwarf.ArrayType:
  /home/craig/github/golang/go/src/debug/dwarf/type.go => &{<nil> ArrayType 0 0xc0012e49c0 <nil>}
TYPE dwarf.Attr:
  /home/craig/github/golang/go/src/debug/dwarf/const.go => &{<nil> Attr 0 uint32 <nil>}
TYPE dwarf.BasicType:
  /home/craig/github/golang/go/src/debug/dwarf/type.go => &{<nil> BasicType 0 0xc0012d59e0 <nil>}
TYPE dwarf.BoolType:
  /home/craig/github/golang/go/src/debug/dwarf/type.go => &{<nil> BoolType 0 0xc0012e4180 <nil>}
TYPE dwarf.CharType:
  /home/craig/github/golang/go/src/debug/dwarf/type.go => &{<nil> CharType 0 0xc0012d5dc0 <nil>}
TYPE dwarf.Class:
  /home/craig/github/golang/go/src/debug/dwarf/entry.go => &{<nil> Class 0 int <nil>}
TYPE dwarf.CommonType:
  /home/craig/github/golang/go/src/debug/dwarf/type.go => &{<nil> CommonType 0 0xc0012d55e0 <nil>}
TYPE dwarf.ComplexType:
  /home/craig/github/golang/go/src/debug/dwarf/type.go => &{<nil> ComplexType 0 0xc0012e40e0 <nil>}
TYPE dwarf.Data:
  /home/craig/github/golang/go/src/debug/dwarf/open.go => &{<nil> Data 0 0xc0014179a0 <nil>}
TYPE dwarf.DecodeError:
  /home/craig/github/golang/go/src/debug/dwarf/buf.go => &{<nil> DecodeError 0 0xc001326020 <nil>}
TYPE dwarf.DotDotDotType:
  /home/craig/github/golang/go/src/debug/dwarf/type.go => &{<nil> DotDotDotType 0 0xc0012ef6c0 <nil>}
TYPE dwarf.Entry:
  /home/craig/github/golang/go/src/debug/dwarf/entry.go => &{<nil> Entry 0 0xc0013a3e20 <nil>}
TYPE dwarf.EnumType:
  /home/craig/github/golang/go/src/debug/dwarf/type.go => &{<nil> EnumType 0 0xc0012ee8c0 <nil>}
TYPE dwarf.EnumValue:
  /home/craig/github/golang/go/src/debug/dwarf/type.go => &{<nil> EnumValue 0 0xc0012ee9c0 <nil>}
TYPE dwarf.Field:
  /home/craig/github/golang/go/src/debug/dwarf/entry.go => &{<nil> Field 0 0xc0013a6260 <nil>}
TYPE dwarf.FloatType:
  /home/craig/github/golang/go/src/debug/dwarf/type.go => &{<nil> FloatType 0 0xc0012e4040 <nil>}
TYPE dwarf.FuncType:
  /home/craig/github/golang/go/src/debug/dwarf/type.go => &{<nil> FuncType 0 0xc0012ef120 <nil>}
TYPE dwarf.IntType:
  /home/craig/github/golang/go/src/debug/dwarf/type.go => &{<nil> IntType 0 0xc0012d5f00 <nil>}
TYPE dwarf.LineEntry:
  /home/craig/github/golang/go/src/debug/dwarf/line.go => &{<nil> LineEntry 0 0xc0013ea0e0 <nil>}
TYPE dwarf.LineFile:
  /home/craig/github/golang/go/src/debug/dwarf/line.go => &{<nil> LineFile 0 0xc0013ea2c0 <nil>}
TYPE dwarf.LineReader:
  /home/craig/github/golang/go/src/debug/dwarf/line.go => &{<nil> LineReader 0 0xc0013dd3c0 <nil>}
TYPE dwarf.LineReaderPos:
  /home/craig/github/golang/go/src/debug/dwarf/line.go => &{<nil> LineReaderPos 0 0xc0014070e0 <nil>}
TYPE dwarf.Offset:
  /home/craig/github/golang/go/src/debug/dwarf/entry.go => &{<nil> Offset 0 uint32 <nil>}
TYPE dwarf.PtrType:
  /home/craig/github/golang/go/src/debug/dwarf/type.go => &{<nil> PtrType 0 0xc0012e51e0 <nil>}
TYPE dwarf.QualType:
  /home/craig/github/golang/go/src/debug/dwarf/type.go => &{<nil> QualType 0 0xc0012e4440 <nil>}
TYPE dwarf.Reader:
  /home/craig/github/golang/go/src/debug/dwarf/entry.go => &{<nil> Reader 0 0xc0013b5640 <nil>}
TYPE dwarf.StructField:
  /home/craig/github/golang/go/src/debug/dwarf/type.go => &{<nil> StructField 0 0xc0012e58c0 <nil>}
TYPE dwarf.StructType:
  /home/craig/github/golang/go/src/debug/dwarf/type.go => &{<nil> StructType 0 0xc0012e55e0 <nil>}
TYPE dwarf.Tag:
  /home/craig/github/golang/go/src/debug/dwarf/const.go => &{<nil> Tag 0 uint32 <nil>}
TYPE dwarf.Type:
  /home/craig/github/golang/go/src/debug/dwarf/type.go => &{<nil> Type 0 0xc0012d53e0 <nil>}
TYPE dwarf.TypedefType:
  /home/craig/github/golang/go/src/debug/dwarf/type.go => &{<nil> TypedefType 0 0xc0012ef8a0 <nil>}
TYPE dwarf.UcharType:
  /home/craig/github/golang/go/src/debug/dwarf/type.go => &{<nil> UcharType 0 0xc0012d5e60 <nil>}
TYPE dwarf.UintType:
  /home/craig/github/golang/go/src/debug/dwarf/type.go => &{<nil> UintType 0 0xc0012d5fa0 <nil>}
TYPE dwarf.UnspecifiedType:
  /home/craig/github/golang/go/src/debug/dwarf/type.go => &{<nil> UnspecifiedType 0 0xc0012e42c0 <nil>}
TYPE dwarf.VoidType:
  /home/craig/github/golang/go/src/debug/dwarf/type.go => &{<nil> VoidType 0 0xc0012e5000 <nil>}
TYPE ecdsa.PrivateKey:
  /home/craig/github/golang/go/src/crypto/ecdsa/ecdsa.go => &{<nil> PrivateKey 0 0xc0009c6c80 <nil>}
TYPE ecdsa.PublicKey:
  /home/craig/github/golang/go/src/crypto/ecdsa/ecdsa.go => &{<nil> PublicKey 0 0xc0009c6b40 <nil>}
TYPE elf.Chdr32:
  /home/craig/github/golang/go/src/debug/elf/elf.go => &{<nil> Chdr32 0 0xc0015b1340 <nil>}
TYPE elf.Chdr64:
  /home/craig/github/golang/go/src/debug/elf/elf.go => &{<nil> Chdr64 0 0xc0015b77a0 <nil>}
TYPE elf.Class:
  /home/craig/github/golang/go/src/debug/elf/elf.go => &{<nil> Class 0 byte <nil>}
TYPE elf.CompressionType:
  /home/craig/github/golang/go/src/debug/elf/elf.go => &{<nil> CompressionType 0 int <nil>}
TYPE elf.Data:
  /home/craig/github/golang/go/src/debug/elf/elf.go => &{<nil> Data 0 byte <nil>}
TYPE elf.Dyn32:
  /home/craig/github/golang/go/src/debug/elf/elf.go => &{<nil> Dyn32 0 0xc0015b11e0 <nil>}
TYPE elf.Dyn64:
  /home/craig/github/golang/go/src/debug/elf/elf.go => &{<nil> Dyn64 0 0xc0015b75c0 <nil>}
TYPE elf.DynFlag:
  /home/craig/github/golang/go/src/debug/elf/elf.go => &{<nil> DynFlag 0 int <nil>}
TYPE elf.DynTag:
  /home/craig/github/golang/go/src/debug/elf/elf.go => &{<nil> DynTag 0 int <nil>}
TYPE elf.File:
  /home/craig/github/golang/go/src/debug/elf/file.go => &{<nil> File 0 0xc0015f2f00 <nil>}
TYPE elf.FileHeader:
  /home/craig/github/golang/go/src/debug/elf/file.go => &{<nil> FileHeader 0 0xc0015f2c80 <nil>}
TYPE elf.FormatError:
  /home/craig/github/golang/go/src/debug/elf/file.go => &{<nil> FormatError 0 0xc001607720 <nil>}
TYPE elf.Header32:
  /home/craig/github/golang/go/src/debug/elf/elf.go => &{<nil> Header32 0 0xc0015b0620 <nil>}
TYPE elf.Header64:
  /home/craig/github/golang/go/src/debug/elf/elf.go => &{<nil> Header64 0 0xc0015b6a00 <nil>}
TYPE elf.ImportedSymbol:
  /home/craig/github/golang/go/src/debug/elf/file.go => &{<nil> ImportedSymbol 0 0xc001667620 <nil>}
TYPE elf.Machine:
  /home/craig/github/golang/go/src/debug/elf/elf.go => &{<nil> Machine 0 uint16 <nil>}
TYPE elf.NType:
  /home/craig/github/golang/go/src/debug/elf/elf.go => &{<nil> NType 0 int <nil>}
TYPE elf.OSABI:
  /home/craig/github/golang/go/src/debug/elf/elf.go => &{<nil> OSABI 0 byte <nil>}
TYPE elf.Prog:
  /home/craig/github/golang/go/src/debug/elf/file.go => &{<nil> Prog 0 0xc0016070e0 <nil>}
TYPE elf.Prog32:
  /home/craig/github/golang/go/src/debug/elf/elf.go => &{<nil> Prog32 0 0xc0015b1060 <nil>}
TYPE elf.Prog64:
  /home/craig/github/golang/go/src/debug/elf/elf.go => &{<nil> Prog64 0 0xc0015b7440 <nil>}
TYPE elf.ProgFlag:
  /home/craig/github/golang/go/src/debug/elf/elf.go => &{<nil> ProgFlag 0 uint32 <nil>}
TYPE elf.ProgHeader:
  /home/craig/github/golang/go/src/debug/elf/file.go => &{<nil> ProgHeader 0 0xc001606e20 <nil>}
TYPE elf.ProgType:
  /home/craig/github/golang/go/src/debug/elf/elf.go => &{<nil> ProgType 0 int <nil>}
TYPE elf.R_386:
  /home/craig/github/golang/go/src/debug/elf/elf.go => &{<nil> R_386 0 int <nil>}
TYPE elf.R_390:
  /home/craig/github/golang/go/src/debug/elf/elf.go => &{<nil> R_390 0 int <nil>}
TYPE elf.R_AARCH64:
  /home/craig/github/golang/go/src/debug/elf/elf.go => &{<nil> R_AARCH64 0 int <nil>}
TYPE elf.R_ALPHA:
  /home/craig/github/golang/go/src/debug/elf/elf.go => &{<nil> R_ALPHA 0 int <nil>}
TYPE elf.R_ARM:
  /home/craig/github/golang/go/src/debug/elf/elf.go => &{<nil> R_ARM 0 int <nil>}
TYPE elf.R_MIPS:
  /home/craig/github/golang/go/src/debug/elf/elf.go => &{<nil> R_MIPS 0 int <nil>}
TYPE elf.R_PPC:
  /home/craig/github/golang/go/src/debug/elf/elf.go => &{<nil> R_PPC 0 int <nil>}
TYPE elf.R_PPC64:
  /home/craig/github/golang/go/src/debug/elf/elf.go => &{<nil> R_PPC64 0 int <nil>}
TYPE elf.R_RISCV:
  /home/craig/github/golang/go/src/debug/elf/elf.go => &{<nil> R_RISCV 0 int <nil>}
TYPE elf.R_SPARC:
  /home/craig/github/golang/go/src/debug/elf/elf.go => &{<nil> R_SPARC 0 int <nil>}
TYPE elf.R_X86_64:
  /home/craig/github/golang/go/src/debug/elf/elf.go => &{<nil> R_X86_64 0 int <nil>}
TYPE elf.Rel32:
  /home/craig/github/golang/go/src/debug/elf/elf.go => &{<nil> Rel32 0 0xc0015b1500 <nil>}
TYPE elf.Rel64:
  /home/craig/github/golang/go/src/debug/elf/elf.go => &{<nil> Rel64 0 0xc0015b7960 <nil>}
TYPE elf.Rela32:
  /home/craig/github/golang/go/src/debug/elf/elf.go => &{<nil> Rela32 0 0xc0015b1720 <nil>}
TYPE elf.Rela64:
  /home/craig/github/golang/go/src/debug/elf/elf.go => &{<nil> Rela64 0 0xc0015b7b80 <nil>}
TYPE elf.Section:
  /home/craig/github/golang/go/src/debug/elf/file.go => &{<nil> Section 0 0xc0015f36e0 <nil>}
TYPE elf.Section32:
  /home/craig/github/golang/go/src/debug/elf/elf.go => &{<nil> Section32 0 0xc0015b0bc0 <nil>}
TYPE elf.Section64:
  /home/craig/github/golang/go/src/debug/elf/elf.go => &{<nil> Section64 0 0xc0015b6fa0 <nil>}
TYPE elf.SectionFlag:
  /home/craig/github/golang/go/src/debug/elf/elf.go => &{<nil> SectionFlag 0 uint32 <nil>}
TYPE elf.SectionHeader:
  /home/craig/github/golang/go/src/debug/elf/file.go => &{<nil> SectionHeader 0 0xc0015f3320 <nil>}
TYPE elf.SectionIndex:
  /home/craig/github/golang/go/src/debug/elf/elf.go => &{<nil> SectionIndex 0 int <nil>}
TYPE elf.SectionType:
  /home/craig/github/golang/go/src/debug/elf/elf.go => &{<nil> SectionType 0 uint32 <nil>}
TYPE elf.Sym32:
  /home/craig/github/golang/go/src/debug/elf/elf.go => &{<nil> Sym32 0 0xc0015b1ca0 <nil>}
TYPE elf.Sym64:
  /home/craig/github/golang/go/src/debug/elf/elf.go => &{<nil> Sym64 0 0xc0015ba2e0 <nil>}
TYPE elf.SymBind:
  /home/craig/github/golang/go/src/debug/elf/elf.go => &{<nil> SymBind 0 int <nil>}
TYPE elf.SymType:
  /home/craig/github/golang/go/src/debug/elf/elf.go => &{<nil> SymType 0 int <nil>}
TYPE elf.SymVis:
  /home/craig/github/golang/go/src/debug/elf/elf.go => &{<nil> SymVis 0 int <nil>}
TYPE elf.Symbol:
  /home/craig/github/golang/go/src/debug/elf/file.go => &{<nil> Symbol 0 0xc0016075c0 <nil>}
TYPE elf.Type:
  /home/craig/github/golang/go/src/debug/elf/elf.go => &{<nil> Type 0 uint16 <nil>}
TYPE elf.Version:
  /home/craig/github/golang/go/src/debug/elf/elf.go => &{<nil> Version 0 byte <nil>}
TYPE elliptic.Curve:
  /home/craig/github/golang/go/src/crypto/elliptic/elliptic.go => &{<nil> Curve 0 0xc000aa09e0 <nil>}
TYPE elliptic.CurveParams:
  /home/craig/github/golang/go/src/crypto/elliptic/elliptic.go => &{<nil> CurveParams 0 0xc000aa0f80 <nil>}
TYPE encoding.BinaryMarshaler:
  /home/craig/github/golang/go/src/encoding/encoding.go => &{<nil> BinaryMarshaler 0 0xc000f18b20 <nil>}
TYPE encoding.BinaryUnmarshaler:
  /home/craig/github/golang/go/src/encoding/encoding.go => &{<nil> BinaryUnmarshaler 0 0xc000f18d20 <nil>}
TYPE encoding.TextMarshaler:
  /home/craig/github/golang/go/src/encoding/encoding.go => &{<nil> TextMarshaler 0 0xc000f18f00 <nil>}
TYPE encoding.TextUnmarshaler:
  /home/craig/github/golang/go/src/encoding/encoding.go => &{<nil> TextUnmarshaler 0 0xc000f190e0 <nil>}
TYPE errors_test.MyError:
  /home/craig/github/golang/go/src/errors/example_test.go => &{<nil> MyError 0 0xc001657e60 <nil>}
TYPE exec.Cmd:
  /home/craig/github/golang/go/src/os/exec/exec.go => &{<nil> Cmd 0 0xc002576320 <nil>}
TYPE exec.Error:
  /home/craig/github/golang/go/src/os/exec/exec.go => &{<nil> Error 0 0xc00265fc00 <nil>}
TYPE exec.ExitError:
  /home/craig/github/golang/go/src/os/exec/exec.go => &{<nil> ExitError 0 0xc002117020 <nil>}
TYPE expvar.Float:
  /home/craig/github/golang/go/src/expvar/expvar.go => &{<nil> Float 0 0xc0015f3c40 <nil>}
TYPE expvar.Func:
  /home/craig/github/golang/go/src/expvar/expvar.go => &{<nil> Func 0 0xc0015a2c00 <nil>}
TYPE expvar.Int:
  /home/craig/github/golang/go/src/expvar/expvar.go => &{<nil> Int 0 0xc0015f2500 <nil>}
TYPE expvar.KeyValue:
  /home/craig/github/golang/go/src/expvar/expvar.go => &{<nil> KeyValue 0 0xc0015bae00 <nil>}
TYPE expvar.Map:
  /home/craig/github/golang/go/src/expvar/expvar.go => &{<nil> Map 0 0xc0015bad00 <nil>}
TYPE expvar.String:
  /home/craig/github/golang/go/src/expvar/expvar.go => &{<nil> String 0 0xc0015a2460 <nil>}
TYPE expvar.Var:
  /home/craig/github/golang/go/src/expvar/expvar.go => &{<nil> Var 0 0xc0015f2420 <nil>}
TYPE filepath.WalkFunc:
  /home/craig/github/golang/go/src/path/filepath/path.go => &{<nil> WalkFunc 0 0xc0026a1400 <nil>}
TYPE filepath_test.EvalSymlinksTest:
  /home/craig/github/golang/go/src/path/filepath/path_test.go => &{<nil> EvalSymlinksTest 0 0xc000b7a100 <nil>}
TYPE filepath_test.ExtTest:
  /home/craig/github/golang/go/src/path/filepath/path_test.go => &{<nil> ExtTest 0 0xc00306b060 <nil>}
TYPE filepath_test.IsAbsTest:
  /home/craig/github/golang/go/src/path/filepath/path_test.go => &{<nil> IsAbsTest 0 0xc00150cce0 <nil>}
TYPE filepath_test.JoinTest:
  /home/craig/github/golang/go/src/path/filepath/path_test.go => &{<nil> JoinTest 0 0xc002ea4ec0 <nil>}
TYPE filepath_test.MatchTest:
  /home/craig/github/golang/go/src/path/filepath/match_test.go => &{<nil> MatchTest 0 0xc00238d4e0 <nil>}
TYPE filepath_test.Node:
  /home/craig/github/golang/go/src/path/filepath/path_test.go => &{<nil> Node 0 0xc00306b880 <nil>}
TYPE filepath_test.PathTest:
  /home/craig/github/golang/go/src/path/filepath/path_test.go => &{<nil> PathTest 0 0xc002b79440 <nil>}
TYPE filepath_test.RelTests:
  /home/craig/github/golang/go/src/path/filepath/path_test.go => &{<nil> RelTests 0 0xc0024d4700 <nil>}
TYPE filepath_test.SplitListTest:
  /home/craig/github/golang/go/src/path/filepath/path_test.go => &{<nil> SplitListTest 0 0xc002d78000 <nil>}
TYPE filepath_test.SplitTest:
  /home/craig/github/golang/go/src/path/filepath/path_test.go => &{<nil> SplitTest 0 0xc002dc9bc0 <nil>}
TYPE filepath_test.VolumeNameTest:
  /home/craig/github/golang/go/src/path/filepath/path_test.go => &{<nil> VolumeNameTest 0 0xc002c75400 <nil>}
TYPE flag.ErrorHandling:
  /home/craig/github/golang/go/src/flag/flag.go => &{<nil> ErrorHandling 0 int <nil>}
TYPE flag.Flag:
  /home/craig/github/golang/go/src/flag/flag.go => &{<nil> Flag 0 0xc00151cf00 <nil>}
TYPE flag.FlagSet:
  /home/craig/github/golang/go/src/flag/flag.go => &{<nil> FlagSet 0 0xc00151cbe0 <nil>}
TYPE flag.Getter:
  /home/craig/github/golang/go/src/flag/flag.go => &{<nil> Getter 0 0xc00151c4a0 <nil>}
TYPE flag.Value:
  /home/craig/github/golang/go/src/flag/flag.go => &{<nil> Value 0 0xc00151c320 <nil>}
TYPE flag_test.URLValue:
  /home/craig/github/golang/go/src/flag/example_value_test.go => &{<nil> URLValue 0 0xc0015461a0 <nil>}
TYPE flate.CorruptInputError:
  /home/craig/github/golang/go/src/compress/flate/inflate.go => &{<nil> CorruptInputError 0 int64 <nil>}
TYPE flate.InternalError:
  /home/craig/github/golang/go/src/compress/flate/inflate.go => &{<nil> InternalError 0 string <nil>}
TYPE flate.ReadError:
  /home/craig/github/golang/go/src/compress/flate/inflate.go => &{<nil> ReadError 0 0xc0006b0160 <nil>}
TYPE flate.Reader:
  /home/craig/github/golang/go/src/compress/flate/inflate.go => &{<nil> Reader 0 0xc0006be040 <nil>}
TYPE flate.Resetter:
  /home/craig/github/golang/go/src/compress/flate/inflate.go => &{<nil> Resetter 0 0xc0006b0b20 <nil>}
TYPE flate.WriteError:
  /home/craig/github/golang/go/src/compress/flate/inflate.go => &{<nil> WriteError 0 0xc0006b0600 <nil>}
TYPE flate.Writer:
  /home/craig/github/golang/go/src/compress/flate/deflate.go => &{<nil> Writer 0 0xc000688e20 <nil>}
TYPE fmt.Formatter:
  /home/craig/github/golang/go/src/fmt/print.go => &{<nil> Formatter 0 0xc0014c0700 <nil>}
TYPE fmt.GoStringer:
  /home/craig/github/golang/go/src/fmt/print.go => &{<nil> GoStringer 0 0xc0014c09e0 <nil>}
TYPE fmt.ScanState:
  /home/craig/github/golang/go/src/fmt/scan.go => &{<nil> ScanState 0 0xc0012ff1c0 <nil>}
TYPE fmt.Scanner:
  /home/craig/github/golang/go/src/fmt/scan.go => &{<nil> Scanner 0 0xc0013712c0 <nil>}
TYPE fmt.State:
  /home/craig/github/golang/go/src/fmt/print.go => &{<nil> State 0 0xc0014c0560 <nil>}
TYPE fmt.Stringer:
  /home/craig/github/golang/go/src/fmt/print.go => &{<nil> Stringer 0 0xc0014c0880 <nil>}
TYPE fmt_test.A:
  /home/craig/github/golang/go/src/fmt/fmt_test.go => &{<nil> A 0 0xc001b22560 <nil>}
TYPE fmt_test.Animal:
  /home/craig/github/golang/go/src/fmt/example_test.go => &{<nil> Animal 0 0xc0014c9520 <nil>}
TYPE fmt_test.B:
  /home/craig/github/golang/go/src/fmt/fmt_test.go => &{<nil> B 0 0xc001b227c0 <nil>}
TYPE fmt_test.C:
  /home/craig/github/golang/go/src/fmt/fmt_test.go => &{<nil> C 0 0xc001b22860 <nil>}
TYPE fmt_test.F:
  /home/craig/github/golang/go/src/fmt/fmt_test.go => &{<nil> F 0 int <nil>}
TYPE fmt_test.G:
  /home/craig/github/golang/go/src/fmt/fmt_test.go => &{<nil> G 0 int <nil>}
TYPE fmt_test.I:
  /home/craig/github/golang/go/src/fmt/fmt_test.go => &{<nil> I 0 int <nil>}
TYPE fmt_test.IntString:
  /home/craig/github/golang/go/src/fmt/scan_test.go => &{<nil> IntString 0 0xc00117cc40 <nil>}
TYPE fmt_test.P:
  /home/craig/github/golang/go/src/fmt/fmt_test.go => &{<nil> P 0 int <nil>}
TYPE fmt_test.PanicF:
  /home/craig/github/golang/go/src/fmt/fmt_test.go => &{<nil> PanicF 0 0xc0011cd180 <nil>}
TYPE fmt_test.PanicGo:
  /home/craig/github/golang/go/src/fmt/fmt_test.go => &{<nil> PanicGo 0 0xc0011ccf60 <nil>}
TYPE fmt_test.PanicS:
  /home/craig/github/golang/go/src/fmt/fmt_test.go => &{<nil> PanicS 0 0xc0011ccd40 <nil>}
TYPE fmt_test.Recur:
  /home/craig/github/golang/go/src/fmt/fmt_test.go => &{<nil> Recur 0 0xc0011844c0 <nil>}
TYPE fmt_test.RecursiveInt:
  /home/craig/github/golang/go/src/fmt/scan_test.go => &{<nil> RecursiveInt 0 0xc000fc11e0 <nil>}
TYPE fmt_test.S:
  /home/craig/github/golang/go/src/fmt/fmt_test.go => &{<nil> S 0 0xc001b22d80 <nil>}
TYPE fmt_test.SE:
  /home/craig/github/golang/go/src/fmt/fmt_test.go => &{<nil> SE 0 0xc001180450 0xc001df2120}
TYPE fmt_test.SI:
  /home/craig/github/golang/go/src/fmt/fmt_test.go => &{<nil> SI 0 0xc001b22e00 <nil>}
TYPE fmt_test.ScanTest:
  /home/craig/github/golang/go/src/fmt/scan_test.go => &{<nil> ScanTest 0 0xc000bd7b80 <nil>}
TYPE fmt_test.ScanfMultiTest:
  /home/craig/github/golang/go/src/fmt/scan_test.go => &{<nil> ScanfMultiTest 0 0xc000bd7ec0 <nil>}
TYPE fmt_test.ScanfTest:
  /home/craig/github/golang/go/src/fmt/scan_test.go => &{<nil> ScanfTest 0 0xc000bd7d20 <nil>}
TYPE fmt_test.TB:
  /home/craig/github/golang/go/src/fmt/stringer_test.go => &{<nil> TB 0 bool <nil>}
TYPE fmt_test.TF:
  /home/craig/github/golang/go/src/fmt/stringer_test.go => &{<nil> TF 0 float64 <nil>}
TYPE fmt_test.TF32:
  /home/craig/github/golang/go/src/fmt/stringer_test.go => &{<nil> TF32 0 float32 <nil>}
TYPE fmt_test.TF64:
  /home/craig/github/golang/go/src/fmt/stringer_test.go => &{<nil> TF64 0 float64 <nil>}
TYPE fmt_test.TI:
  /home/craig/github/golang/go/src/fmt/stringer_test.go => &{<nil> TI 0 int <nil>}
TYPE fmt_test.TI16:
  /home/craig/github/golang/go/src/fmt/stringer_test.go => &{<nil> TI16 0 int16 <nil>}
TYPE fmt_test.TI32:
  /home/craig/github/golang/go/src/fmt/stringer_test.go => &{<nil> TI32 0 int32 <nil>}
TYPE fmt_test.TI64:
  /home/craig/github/golang/go/src/fmt/stringer_test.go => &{<nil> TI64 0 int64 <nil>}
TYPE fmt_test.TI8:
  /home/craig/github/golang/go/src/fmt/stringer_test.go => &{<nil> TI8 0 int8 <nil>}
TYPE fmt_test.TS:
  /home/craig/github/golang/go/src/fmt/stringer_test.go => &{<nil> TS 0 string <nil>}
TYPE fmt_test.TU:
  /home/craig/github/golang/go/src/fmt/stringer_test.go => &{<nil> TU 0 uint <nil>}
TYPE fmt_test.TU16:
  /home/craig/github/golang/go/src/fmt/stringer_test.go => &{<nil> TU16 0 uint16 <nil>}
TYPE fmt_test.TU32:
  /home/craig/github/golang/go/src/fmt/stringer_test.go => &{<nil> TU32 0 uint32 <nil>}
TYPE fmt_test.TU64:
  /home/craig/github/golang/go/src/fmt/stringer_test.go => &{<nil> TU64 0 uint64 <nil>}
TYPE fmt_test.TU8:
  /home/craig/github/golang/go/src/fmt/stringer_test.go => &{<nil> TU8 0 uint8 <nil>}
TYPE fmt_test.TUI:
  /home/craig/github/golang/go/src/fmt/stringer_test.go => &{<nil> TUI 0 uintptr <nil>}
TYPE fmt_test.TwoLines:
  /home/craig/github/golang/go/src/fmt/scan_test.go => &{<nil> TwoLines 0 string <nil>}
TYPE fmt_test.Xs:
  /home/craig/github/golang/go/src/fmt/scan_test.go => &{<nil> Xs 0 string <nil>}
TYPE gif.GIF:
  /home/craig/github/golang/go/src/image/gif/reader.go => &{<nil> GIF 0 0xc0025774a0 <nil>}
TYPE gif.Options:
  /home/craig/github/golang/go/src/image/gif/writer.go => &{<nil> Options 0 0xc0027d8d60 <nil>}
TYPE gob.ArrayStruct:
  /home/craig/github/golang/go/src/encoding/gob/gobencdec_test.go => &{<nil> ArrayStruct 0 0xc001986380 <nil>}
TYPE gob.Bar:
  /home/craig/github/golang/go/src/encoding/gob/type_test.go => &{<nil> Bar 0 0xc001248cc0 <nil>}
TYPE gob.BasicInterfaceItem:
  /home/craig/github/golang/go/src/encoding/gob/codec_test.go => &{<nil> BasicInterfaceItem 0 0xc00195b900 <nil>}
TYPE gob.Bench:
  /home/craig/github/golang/go/src/encoding/gob/timing_test.go => &{<nil> Bench 0 0xc0018c6be0 <nil>}
TYPE gob.BinaryGobber:
  /home/craig/github/golang/go/src/encoding/gob/gobencdec_test.go => &{<nil> BinaryGobber 0 int <nil>}
TYPE gob.BinaryValueGobber:
  /home/craig/github/golang/go/src/encoding/gob/gobencdec_test.go => &{<nil> BinaryValueGobber 0 string <nil>}
TYPE gob.Bug0Inner:
  /home/craig/github/golang/go/src/encoding/gob/encoder_test.go => &{<nil> Bug0Inner 0 0xc001a034e0 <nil>}
TYPE gob.Bug0Outer:
  /home/craig/github/golang/go/src/encoding/gob/encoder_test.go => &{<nil> Bug0Outer 0 0xc001a03460 <nil>}
TYPE gob.Bug1Elem:
  /home/craig/github/golang/go/src/encoding/gob/encoder_test.go => &{<nil> Bug1Elem 0 0xc001a0c620 <nil>}
TYPE gob.Bug1StructMap:
  /home/craig/github/golang/go/src/encoding/gob/encoder_test.go => &{<nil> Bug1StructMap 0 0xc0019ff6e0 <nil>}
TYPE gob.Bug2:
  /home/craig/github/golang/go/src/encoding/gob/encoder_test.go => &{<nil> Bug2 0 0xc001a18300 <nil>}
TYPE gob.Bug3:
  /home/craig/github/golang/go/src/encoding/gob/encoder_test.go => &{<nil> Bug3 0 0xc001a19480 <nil>}
TYPE gob.Bug4Public:
  /home/craig/github/golang/go/src/encoding/gob/encoder_test.go => &{<nil> Bug4Public 0 0xc001a26e20 <nil>}
TYPE gob.Bug4Secret:
  /home/craig/github/golang/go/src/encoding/gob/encoder_test.go => &{<nil> Bug4Secret 0 0xc001a26ee0 <nil>}
TYPE gob.ByteStruct:
  /home/craig/github/golang/go/src/encoding/gob/gobencdec_test.go => &{<nil> ByteStruct 0 0xc0019861a0 <nil>}
TYPE gob.CommonType:
  /home/craig/github/golang/go/src/encoding/gob/type.go => &{<nil> CommonType 0 0xc001484580 <nil>}
TYPE gob.DT:
  /home/craig/github/golang/go/src/encoding/gob/codec_test.go => &{<nil> DT 0 0xc001965da0 <nil>}
TYPE gob.Decoder:
  /home/craig/github/golang/go/src/encoding/gob/decoder.go => &{<nil> Decoder 0 0xc00180cd60 <nil>}
TYPE gob.Direct:
  /home/craig/github/golang/go/src/encoding/gob/codec_test.go => &{<nil> Direct 0 0xc00194b1e0 <nil>}
TYPE gob.ET0:
  /home/craig/github/golang/go/src/encoding/gob/encoder_test.go => &{<nil> ET0 0 0xc0019d8560 <nil>}
TYPE gob.ET1:
  /home/craig/github/golang/go/src/encoding/gob/encoder_test.go => &{<nil> ET1 0 0xc0019d8740 <nil>}
TYPE gob.ET2:
  /home/craig/github/golang/go/src/encoding/gob/encoder_test.go => &{<nil> ET2 0 0xc0019d85e0 <nil>}
TYPE gob.ET3:
  /home/craig/github/golang/go/src/encoding/gob/encoder_test.go => &{<nil> ET3 0 0xc0019d8900 <nil>}
TYPE gob.ET4:
  /home/craig/github/golang/go/src/encoding/gob/encoder_test.go => &{<nil> ET4 0 0xc0019d8a60 <nil>}
TYPE gob.EncodeT:
  /home/craig/github/golang/go/src/encoding/gob/codec_test.go => &{<nil> EncodeT 0 0xc0018e4b40 <nil>}
TYPE gob.Encoder:
  /home/craig/github/golang/go/src/encoding/gob/encoder.go => &{<nil> Encoder 0 0xc001aaa700 <nil>}
TYPE gob.Float:
  /home/craig/github/golang/go/src/encoding/gob/codec_test.go => &{<nil> Float 0 float64 <nil>}
TYPE gob.Foo:
  /home/craig/github/golang/go/src/encoding/gob/type_test.go => &{<nil> Foo 0 0xc0012491e0 <nil>}
TYPE gob.GobDecoder:
  /home/craig/github/golang/go/src/encoding/gob/type.go => &{<nil> GobDecoder 0 0xc0011add60 <nil>}
TYPE gob.GobEncoder:
  /home/craig/github/golang/go/src/encoding/gob/type.go => &{<nil> GobEncoder 0 0xc0011adba0 <nil>}
TYPE gob.GobTest0:
  /home/craig/github/golang/go/src/encoding/gob/gobencdec_test.go => &{<nil> GobTest0 0 0xc00198be00 <nil>}
TYPE gob.GobTest1:
  /home/craig/github/golang/go/src/encoding/gob/gobencdec_test.go => &{<nil> GobTest1 0 0xc00198bf20 <nil>}
TYPE gob.GobTest2:
  /home/craig/github/golang/go/src/encoding/gob/gobencdec_test.go => &{<nil> GobTest2 0 0xc001990060 <nil>}
TYPE gob.GobTest3:
  /home/craig/github/golang/go/src/encoding/gob/gobencdec_test.go => &{<nil> GobTest3 0 0xc001990260 <nil>}
TYPE gob.GobTest4:
  /home/craig/github/golang/go/src/encoding/gob/gobencdec_test.go => &{<nil> GobTest4 0 0xc001990400 <nil>}
TYPE gob.GobTest5:
  /home/craig/github/golang/go/src/encoding/gob/gobencdec_test.go => &{<nil> GobTest5 0 0xc001990600 <nil>}
TYPE gob.GobTest6:
  /home/craig/github/golang/go/src/encoding/gob/gobencdec_test.go => &{<nil> GobTest6 0 0xc0019908c0 <nil>}
TYPE gob.GobTest7:
  /home/craig/github/golang/go/src/encoding/gob/gobencdec_test.go => &{<nil> GobTest7 0 0xc001990b80 <nil>}
TYPE gob.GobTestArrayEncDec:
  /home/craig/github/golang/go/src/encoding/gob/gobencdec_test.go => &{<nil> GobTestArrayEncDec 0 0xc001991060 <nil>}
TYPE gob.GobTestIgnoreEncoder:
  /home/craig/github/golang/go/src/encoding/gob/gobencdec_test.go => &{<nil> GobTestIgnoreEncoder 0 0xc001990c40 <nil>}
TYPE gob.GobTestIndirectArrayEncDec:
  /home/craig/github/golang/go/src/encoding/gob/gobencdec_test.go => &{<nil> GobTestIndirectArrayEncDec 0 0xc001991200 <nil>}
TYPE gob.GobTestIndirectEncDec:
  /home/craig/github/golang/go/src/encoding/gob/gobencdec_test.go => &{<nil> GobTestIndirectEncDec 0 0xc001990f20 <nil>}
TYPE gob.GobTestValueEncDec:
  /home/craig/github/golang/go/src/encoding/gob/gobencdec_test.go => &{<nil> GobTestValueEncDec 0 0xc001990d80 <nil>}
TYPE gob.Gobber:
  /home/craig/github/golang/go/src/encoding/gob/gobencdec_test.go => &{<nil> Gobber 0 int <nil>}
TYPE gob.IT0:
  /home/craig/github/golang/go/src/encoding/gob/codec_test.go => &{<nil> IT0 0 0xc0019456c0 <nil>}
TYPE gob.Indirect:
  /home/craig/github/golang/go/src/encoding/gob/codec_test.go => &{<nil> Indirect 0 0xc00194b080 <nil>}
TYPE gob.Int:
  /home/craig/github/golang/go/src/encoding/gob/codec_test.go => &{<nil> Int 0 int <nil>}
TYPE gob.InterfaceItem:
  /home/craig/github/golang/go/src/encoding/gob/codec_test.go => &{<nil> InterfaceItem 0 0xc0019578e0 <nil>}
TYPE gob.N1:
  /home/craig/github/golang/go/src/encoding/gob/type_test.go => &{<nil> N1 0 0xc0012498e0 <nil>}
TYPE gob.N2:
  /home/craig/github/golang/go/src/encoding/gob/type_test.go => &{<nil> N2 0 0xc001249920 <nil>}
TYPE gob.NewType0:
  /home/craig/github/golang/go/src/encoding/gob/encoder_test.go => &{<nil> NewType0 0 0xc0019fb300 <nil>}
TYPE gob.NoInterfaceItem:
  /home/craig/github/golang/go/src/encoding/gob/codec_test.go => &{<nil> NoInterfaceItem 0 0xc0019579e0 <nil>}
TYPE gob.OnTheFly:
  /home/craig/github/golang/go/src/encoding/gob/codec_test.go => &{<nil> OnTheFly 0 0xc001965a80 <nil>}
TYPE gob.Point:
  /home/craig/github/golang/go/src/encoding/gob/codec_test.go => &{<nil> Point 0 0xc001957480 <nil>}
TYPE gob.PtrInterfaceItem:
  /home/craig/github/golang/go/src/encoding/gob/codec_test.go => &{<nil> PtrInterfaceItem 0 0xc001960b40 <nil>}
TYPE gob.RT0:
  /home/craig/github/golang/go/src/encoding/gob/codec_test.go => &{<nil> RT0 0 0xc001944820 <nil>}
TYPE gob.RT1:
  /home/craig/github/golang/go/src/encoding/gob/codec_test.go => &{<nil> RT1 0 0xc001944980 <nil>}
TYPE gob.SingleTest:
  /home/craig/github/golang/go/src/encoding/gob/encoder_test.go => &{<nil> SingleTest 0 0xc0019ede20 <nil>}
TYPE gob.Squarer:
  /home/craig/github/golang/go/src/encoding/gob/codec_test.go => &{<nil> Squarer 0 0xc001956e80 <nil>}
TYPE gob.String:
  /home/craig/github/golang/go/src/encoding/gob/codec_test.go => &{<nil> String 0 string <nil>}
TYPE gob.StringStruct:
  /home/craig/github/golang/go/src/encoding/gob/gobencdec_test.go => &{<nil> StringStruct 0 0xc001986280 <nil>}
TYPE gob.Struct0:
  /home/craig/github/golang/go/src/encoding/gob/encoder_test.go => &{<nil> Struct0 0 0xc0019fb280 <nil>}
TYPE gob.T0:
  /home/craig/github/golang/go/src/encoding/gob/codec_test.go => &{<nil> T0 0 0xc00193ed80 <nil>}
TYPE gob.T1:
  /home/craig/github/golang/go/src/encoding/gob/codec_test.go => &{<nil> T1 0 0xc00193efa0 <nil>}
TYPE gob.T2:
  /home/craig/github/golang/go/src/encoding/gob/codec_test.go => &{<nil> T2 0 0xc00193f1c0 <nil>}
TYPE gob.TextGobber:
  /home/craig/github/golang/go/src/encoding/gob/gobencdec_test.go => &{<nil> TextGobber 0 int <nil>}
TYPE gob.TextValueGobber:
  /home/craig/github/golang/go/src/encoding/gob/gobencdec_test.go => &{<nil> TextValueGobber 0 string <nil>}
TYPE gob.U:
  /home/craig/github/golang/go/src/encoding/gob/codec_test.go => &{<nil> U 0 0xc0019645c0 <nil>}
TYPE gob.ValueGobber:
  /home/craig/github/golang/go/src/encoding/gob/gobencdec_test.go => &{<nil> ValueGobber 0 string 0xc001986440}
TYPE gob.Vector:
  /home/craig/github/golang/go/src/encoding/gob/codec_test.go => &{<nil> Vector 0 0xc00194dbf0 <nil>}
TYPE gob.Z:
  /home/craig/github/golang/go/src/encoding/gob/encoder_test.go => &{<nil> Z 0 0xc001a278a0 <nil>}
TYPE gob_test.P:
  /home/craig/github/golang/go/src/encoding/gob/example_test.go => &{<nil> P 0 0xc00122e560 <nil>}
TYPE gob_test.Point:
  /home/craig/github/golang/go/src/encoding/gob/example_interface_test.go => &{<nil> Point 0 0xc001aa0ae0 <nil>}
TYPE gob_test.Pythagoras:
  /home/craig/github/golang/go/src/encoding/gob/example_interface_test.go => &{<nil> Pythagoras 0 0xc001aa0e20 <nil>}
TYPE gob_test.Q:
  /home/craig/github/golang/go/src/encoding/gob/example_test.go => &{<nil> Q 0 0xc00122e6c0 <nil>}
TYPE gob_test.Vector:
  /home/craig/github/golang/go/src/encoding/gob/example_encdec_test.go => &{<nil> Vector 0 0xc001a349e0 <nil>}
TYPE gosym.DecodingError:
  /home/craig/github/golang/go/src/debug/gosym/symtab.go => &{<nil> DecodingError 0 0xc00178bea0 <nil>}
TYPE gosym.Func:
  /home/craig/github/golang/go/src/debug/gosym/symtab.go => &{<nil> Func 0 0xc00175eca0 <nil>}
TYPE gosym.LineTable:
  /home/craig/github/golang/go/src/debug/gosym/pclntab.go => &{<nil> LineTable 0 0xc001712900 <nil>}
TYPE gosym.Obj:
  /home/craig/github/golang/go/src/debug/gosym/symtab.go => &{<nil> Obj 0 0xc00175f040 <nil>}
TYPE gosym.Sym:
  /home/craig/github/golang/go/src/debug/gosym/symtab.go => &{<nil> Sym 0 0xc001753600 <nil>}
TYPE gosym.Table:
  /home/craig/github/golang/go/src/debug/gosym/symtab.go => &{<nil> Table 0 0xc00175f420 <nil>}
TYPE gosym.UnknownFileError:
  /home/craig/github/golang/go/src/debug/gosym/symtab.go => &{<nil> UnknownFileError 0 string <nil>}
TYPE gosym.UnknownLineError:
  /home/craig/github/golang/go/src/debug/gosym/symtab.go => &{<nil> UnknownLineError 0 0xc00178bae0 <nil>}
TYPE gzip.Header:
  /home/craig/github/golang/go/src/compress/gzip/gunzip.go => &{<nil> Header 0 0xc00030d640 <nil>}
TYPE gzip.Reader:
  /home/craig/github/golang/go/src/compress/gzip/gunzip.go => &{<nil> Reader 0 0xc00030dbe0 <nil>}
TYPE gzip.Writer:
  /home/craig/github/golang/go/src/compress/gzip/gzip.go => &{<nil> Writer 0 0xc00075d300 <nil>}
TYPE hash.Hash:
  /home/craig/github/golang/go/src/hash/hash.go => &{<nil> Hash 0 0xc002a8d460 <nil>}
TYPE hash.Hash32:
  /home/craig/github/golang/go/src/hash/hash.go => &{<nil> Hash32 0 0xc002a8d580 <nil>}
TYPE hash.Hash64:
  /home/craig/github/golang/go/src/hash/hash.go => &{<nil> Hash64 0 0xc002a8d680 <nil>}
TYPE heap.Interface:
  /home/craig/github/golang/go/src/container/heap/heap.go => &{<nil> Interface 0 0xc00087f3e0 <nil>}
TYPE heap_test.IntHeap:
  /home/craig/github/golang/go/src/container/heap/example_intheap_test.go => &{<nil> IntHeap 0 0xc000888540 <nil>}
TYPE heap_test.Item:
  /home/craig/github/golang/go/src/container/heap/example_pq_test.go => &{<nil> Item 0 0xc00086cc60 <nil>}
TYPE heap_test.PriorityQueue:
  /home/craig/github/golang/go/src/container/heap/example_pq_test.go => &{<nil> PriorityQueue 0 0xc000874210 <nil>}
TYPE hex.InvalidByteError:
  /home/craig/github/golang/go/src/encoding/hex/hex.go => &{<nil> InvalidByteError 0 byte <nil>}
TYPE hpack.Decoder:
  /home/craig/github/golang/go/src/vendor/golang_org/x/net/http2/hpack/hpack.go => &{<nil> Decoder 0 0xc00593cce0 <nil>}
TYPE hpack.DecodingError:
  /home/craig/github/golang/go/src/vendor/golang_org/x/net/http2/hpack/hpack.go => &{<nil> DecodingError 0 0xc005877800 <nil>}
TYPE hpack.Encoder:
  /home/craig/github/golang/go/src/vendor/golang_org/x/net/http2/hpack/encode.go => &{<nil> Encoder 0 0xc005b38ac0 <nil>}
TYPE hpack.HeaderField:
  /home/craig/github/golang/go/src/vendor/golang_org/x/net/http2/hpack/hpack.go => &{<nil> HeaderField 0 0xc005877e20 <nil>}
TYPE hpack.InvalidIndexError:
  /home/craig/github/golang/go/src/vendor/golang_org/x/net/http2/hpack/hpack.go => &{<nil> InvalidIndexError 0 int <nil>}
TYPE http.Client:
  /home/craig/github/golang/go/src/net/http/client.go => &{<nil> Client 0 0xc003055260 <nil>}
TYPE http.CloseNotifier:
  /home/craig/github/golang/go/src/net/http/server.go => &{<nil> CloseNotifier 0 0xc004262ea0 <nil>}
TYPE http.ConnState:
  /home/craig/github/golang/go/src/net/http/server.go => &{<nil> ConnState 0 int <nil>}
TYPE http.Cookie:
  /home/craig/github/golang/go/src/net/http/cookie.go => &{<nil> Cookie 0 0xc0037a9420 <nil>}
TYPE http.CookieJar:
  /home/craig/github/golang/go/src/net/http/jar.go => &{<nil> CookieJar 0 0xc003ae2f60 <nil>}
TYPE http.Dir:
  /home/craig/github/golang/go/src/net/http/fs.go => &{<nil> Dir 0 string <nil>}
TYPE http.File:
  /home/craig/github/golang/go/src/net/http/fs.go => &{<nil> File 0 0xc00182b460 <nil>}
TYPE http.FileSystem:
  /home/craig/github/golang/go/src/net/http/fs.go => &{<nil> FileSystem 0 0xc00182b020 <nil>}
TYPE http.Flusher:
  /home/craig/github/golang/go/src/net/http/server.go => &{<nil> Flusher 0 0xc0042624c0 <nil>}
TYPE http.Handler:
  /home/craig/github/golang/go/src/net/http/server.go => &{<nil> Handler 0 0xc00423f800 <nil>}
TYPE http.HandlerFunc:
  /home/craig/github/golang/go/src/net/http/server.go => &{<nil> HandlerFunc 0 0xc0042f65a0 <nil>}
TYPE http.Header:
  /home/craig/github/golang/go/src/net/http/header.go => &{<nil> Header 0 0xc0032b6060 <nil>}
TYPE http.Hijacker:
  /home/craig/github/golang/go/src/net/http/server.go => &{<nil> Hijacker 0 0xc004262a40 <nil>}
TYPE http.ProtocolError:
  /home/craig/github/golang/go/src/net/http/request.go => &{<nil> ProtocolError 0 0xc002ec3f80 <nil>}
TYPE http.PushOptions:
  /home/craig/github/golang/go/src/net/http/http.go => &{<nil> PushOptions 0 0xc003eb1e60 <nil>}
TYPE http.Pusher:
  /home/craig/github/golang/go/src/net/http/http.go => &{<nil> Pusher 0 0xc003eb6300 <nil>}
TYPE http.Request:
  /home/craig/github/golang/go/src/net/http/request.go => &{<nil> Request 0 0xc003049280 <nil>}
TYPE http.Response:
  /home/craig/github/golang/go/src/net/http/response.go => &{<nil> Response 0 0xc004367380 <nil>}
TYPE http.ResponseWriter:
  /home/craig/github/golang/go/src/net/http/server.go => &{<nil> ResponseWriter 0 0xc004262260 <nil>}
TYPE http.RoundTripper:
  /home/craig/github/golang/go/src/net/http/client.go => &{<nil> RoundTripper 0 0xc003055880 <nil>}
TYPE http.SameSite:
  /home/craig/github/golang/go/src/net/http/cookie.go => &{<nil> SameSite 0 int <nil>}
TYPE http.ServeMux:
  /home/craig/github/golang/go/src/net/http/server.go => &{<nil> ServeMux 0 0xc0043043a0 <nil>}
TYPE http.Server:
  /home/craig/github/golang/go/src/net/http/server.go => &{<nil> Server 0 0xc0043200c0 <nil>}
TYPE http.Transport:
  /home/craig/github/golang/go/src/net/http/transport.go => &{<nil> Transport 0 0xc002cb3000 <nil>}
TYPE http_test.RecordingJar:
  /home/craig/github/golang/go/src/net/http/client_test.go => &{<nil> RecordingJar 0 0xc003a69de0 <nil>}
TYPE http_test.TestJar:
  /home/craig/github/golang/go/src/net/http/client_test.go => &{<nil> TestJar 0 0xc003a62e60 <nil>}
TYPE httpproxy.Config:
  /home/craig/github/golang/go/src/vendor/golang_org/x/net/http/httpproxy/proxy.go => &{<nil> Config 0 0xc0054e33c0 <nil>}
TYPE httptest.ResponseRecorder:
  /home/craig/github/golang/go/src/net/http/httptest/recorder.go => &{<nil> ResponseRecorder 0 0xc00454a4a0 <nil>}
TYPE httptest.Server:
  /home/craig/github/golang/go/src/net/http/httptest/server.go => &{<nil> Server 0 0xc0045b87c0 <nil>}
TYPE httptrace.ClientTrace:
  /home/craig/github/golang/go/src/net/http/httptrace/trace.go => &{<nil> ClientTrace 0 0xc0045e95a0 <nil>}
TYPE httptrace.DNSDoneInfo:
  /home/craig/github/golang/go/src/net/http/httptrace/trace.go => &{<nil> DNSDoneInfo 0 0xc0045ee900 <nil>}
TYPE httptrace.DNSStartInfo:
  /home/craig/github/golang/go/src/net/http/httptrace/trace.go => &{<nil> DNSStartInfo 0 0xc0045ee660 <nil>}
TYPE httptrace.GotConnInfo:
  /home/craig/github/golang/go/src/net/http/httptrace/trace.go => &{<nil> GotConnInfo 0 0xc0045ef080 <nil>}
TYPE httptrace.WroteRequestInfo:
  /home/craig/github/golang/go/src/net/http/httptrace/trace.go => &{<nil> WroteRequestInfo 0 0xc0045e96c0 <nil>}
TYPE httputil.BufferPool:
  /home/craig/github/golang/go/src/net/http/httputil/reverseproxy.go => &{<nil> BufferPool 0 0xc004647dc0 <nil>}
TYPE httputil.ClientConn:
  /home/craig/github/golang/go/src/net/http/httputil/persist.go => &{<nil> ClientConn 0 0xc0046e5bc0 <nil>}
TYPE httputil.ReverseProxy:
  /home/craig/github/golang/go/src/net/http/httputil/reverseproxy.go => &{<nil> ReverseProxy 0 0xc004647c60 <nil>}
TYPE httputil.RoundTripperFunc:
  /home/craig/github/golang/go/src/net/http/httputil/reverseproxy_test.go => &{<nil> RoundTripperFunc 0 0xc0046afde0 <nil>}
TYPE httputil.ServerConn:
  /home/craig/github/golang/go/src/net/http/httputil/persist.go => &{<nil> ServerConn 0 0xc0046dabe0 <nil>}
TYPE idna.Option:
  /home/craig/github/golang/go/src/vendor/golang_org/x/net/idna/idna.go => &{<nil> Option 0 0xc003902ba0 <nil>}
TYPE idna.Profile:
  /home/craig/github/golang/go/src/vendor/golang_org/x/net/idna/idna.go => &{<nil> Profile 0 0xc003906ca0 <nil>}
TYPE image.Alpha:
  /home/craig/github/golang/go/src/image/image.go => &{<nil> Alpha 0 0xc0024c8740 <nil>}
TYPE image.Alpha16:
  /home/craig/github/golang/go/src/image/image.go => &{<nil> Alpha16 0 0xc002517fc0 <nil>}
TYPE image.CMYK:
  /home/craig/github/golang/go/src/image/image.go => &{<nil> CMYK 0 0xc002584c80 <nil>}
TYPE image.Config:
  /home/craig/github/golang/go/src/image/image.go => &{<nil> Config 0 0xc002409ce0 <nil>}
TYPE image.Gray:
  /home/craig/github/golang/go/src/image/image.go => &{<nil> Gray 0 0xc00254ad00 <nil>}
TYPE image.Gray16:
  /home/craig/github/golang/go/src/image/image.go => &{<nil> Gray16 0 0xc00256ae40 <nil>}
TYPE image.Image:
  /home/craig/github/golang/go/src/image/image.go => &{<nil> Image 0 0xc002413080 <nil>}
TYPE image.NRGBA:
  /home/craig/github/golang/go/src/image/image.go => &{<nil> NRGBA 0 0xc00245ef40 <nil>}
TYPE image.NRGBA64:
  /home/craig/github/golang/go/src/image/image.go => &{<nil> NRGBA64 0 0xc0024ae080 <nil>}
TYPE image.NYCbCrA:
  /home/craig/github/golang/go/src/image/ycbcr.go => &{<nil> NYCbCrA 0 0xc001a4f540 <nil>}
TYPE image.Paletted:
  /home/craig/github/golang/go/src/image/image.go => &{<nil> Paletted 0 0xc002647440 <nil>}
TYPE image.PalettedImage:
  /home/craig/github/golang/go/src/image/image.go => &{<nil> PalettedImage 0 0xc00241d080 <nil>}
TYPE image.Point:
  /home/craig/github/golang/go/src/image/geom.go => &{<nil> Point 0 0xc00271b960 <nil>}
TYPE image.RGBA:
  /home/craig/github/golang/go/src/image/image.go => &{<nil> RGBA 0 0xc00241dfc0 <nil>}
TYPE image.RGBA64:
  /home/craig/github/golang/go/src/image/image.go => &{<nil> RGBA64 0 0xc00243a0e0 <nil>}
TYPE image.Rectangle:
  /home/craig/github/golang/go/src/image/geom.go => &{<nil> Rectangle 0 0xc002741600 <nil>}
TYPE image.Uniform:
  /home/craig/github/golang/go/src/image/names.go => &{<nil> Uniform 0 0xc002233d40 <nil>}
TYPE image.YCbCr:
  /home/craig/github/golang/go/src/image/ycbcr.go => &{<nil> YCbCr 0 0xc001a69840 <nil>}
TYPE image.YCbCrSubsampleRatio:
  /home/craig/github/golang/go/src/image/ycbcr.go => &{<nil> YCbCrSubsampleRatio 0 int <nil>}
TYPE importer.Lookup:
  /home/craig/github/golang/go/src/go/importer/importer.go => &{<nil> Lookup 0 0xc001c44d00 <nil>}
TYPE io.ByteReader:
  /home/craig/github/golang/go/src/io/io.go => &{<nil> ByteReader 0 0xc002a4f8c0 <nil>}
TYPE io.ByteScanner:
  /home/craig/github/golang/go/src/io/io.go => &{<nil> ByteScanner 0 0xc002a4faa0 <nil>}
TYPE io.ByteWriter:
  /home/craig/github/golang/go/src/io/io.go => &{<nil> ByteWriter 0 0xc002a4fbc0 <nil>}
TYPE io.Closer:
  /home/craig/github/golang/go/src/io/io.go => &{<nil> Closer 0 0xc002a4e0a0 <nil>}
TYPE io.LimitedReader:
  /home/craig/github/golang/go/src/io/io.go => &{<nil> LimitedReader 0 0xc00121b240 <nil>}
TYPE io.PipeReader:
  /home/craig/github/golang/go/src/io/pipe.go => &{<nil> PipeReader 0 0xc00230e1e0 <nil>}
TYPE io.PipeWriter:
  /home/craig/github/golang/go/src/io/pipe.go => &{<nil> PipeWriter 0 0xc00230e9e0 <nil>}
TYPE io.ReadCloser:
  /home/craig/github/golang/go/src/io/io.go => &{<nil> ReadCloser 0 0xc002a4e560 <nil>}
TYPE io.ReadSeeker:
  /home/craig/github/golang/go/src/io/io.go => &{<nil> ReadSeeker 0 0xc002a4e7e0 <nil>}
TYPE io.ReadWriteCloser:
  /home/craig/github/golang/go/src/io/io.go => &{<nil> ReadWriteCloser 0 0xc002a4e720 <nil>}
TYPE io.ReadWriteSeeker:
  /home/craig/github/golang/go/src/io/io.go => &{<nil> ReadWriteSeeker 0 0xc002a4e9a0 <nil>}
TYPE io.ReadWriter:
  /home/craig/github/golang/go/src/io/io.go => &{<nil> ReadWriter 0 0xc002a4e4a0 <nil>}
TYPE io.Reader:
  /home/craig/github/golang/go/src/io/io.go => &{<nil> Reader 0 0xc0028fdca0 <nil>}
TYPE io.ReaderAt:
  /home/craig/github/golang/go/src/io/io.go => &{<nil> ReaderAt 0 0xc002a4f360 <nil>}
TYPE io.ReaderFrom:
  /home/craig/github/golang/go/src/io/io.go => &{<nil> ReaderFrom 0 0xc002a4ec00 <nil>}
TYPE io.RuneReader:
  /home/craig/github/golang/go/src/io/io.go => &{<nil> RuneReader 0 0xc002a4fe00 <nil>}
TYPE io.RuneScanner:
  /home/craig/github/golang/go/src/io/io.go => &{<nil> RuneScanner 0 0xc002a4ffe0 <nil>}
TYPE io.SectionReader:
  /home/craig/github/golang/go/src/io/io.go => &{<nil> SectionReader 0 0xc00121bcc0 <nil>}
TYPE io.Seeker:
  /home/craig/github/golang/go/src/io/io.go => &{<nil> Seeker 0 0xc002a4e3e0 <nil>}
TYPE io.WriteCloser:
  /home/craig/github/golang/go/src/io/io.go => &{<nil> WriteCloser 0 0xc002a4e620 <nil>}
TYPE io.WriteSeeker:
  /home/craig/github/golang/go/src/io/io.go => &{<nil> WriteSeeker 0 0xc002a4e8a0 <nil>}
TYPE io.Writer:
  /home/craig/github/golang/go/src/io/io.go => &{<nil> Writer 0 0xc0028fdf40 <nil>}
TYPE io.WriterAt:
  /home/craig/github/golang/go/src/io/io.go => &{<nil> WriterAt 0 0xc002a4f700 <nil>}
TYPE io.WriterTo:
  /home/craig/github/golang/go/src/io/io.go => &{<nil> WriterTo 0 0xc002a4ee60 <nil>}
TYPE io_test.Buffer:
  /home/craig/github/golang/go/src/io/io_test.go => &{<nil> Buffer 0 0xc0017f0300 <nil>}
TYPE jpeg.FormatError:
  /home/craig/github/golang/go/src/image/jpeg/reader.go => &{<nil> FormatError 0 string <nil>}
TYPE jpeg.Options:
  /home/craig/github/golang/go/src/image/jpeg/writer.go => &{<nil> Options 0 0xc00250c780 <nil>}
TYPE jpeg.Reader:
  /home/craig/github/golang/go/src/image/jpeg/reader.go => &{<nil> Reader 0 0xc0029c9b20 <nil>}
TYPE jpeg.UnsupportedError:
  /home/craig/github/golang/go/src/image/jpeg/reader.go => &{<nil> UnsupportedError 0 string <nil>}
TYPE json.All:
  /home/craig/github/golang/go/src/encoding/json/decode_test.go => &{<nil> All 0 0xc001d0e040 <nil>}
TYPE json.Ambig:
  /home/craig/github/golang/go/src/encoding/json/decode_test.go => &{<nil> Ambig 0 0xc001cb5560 <nil>}
TYPE json.B:
  /home/craig/github/golang/go/src/encoding/json/decode_test.go => &{<nil> B 0 0xc001cc2f20 <nil>}
TYPE json.BugA:
  /home/craig/github/golang/go/src/encoding/json/encode_test.go => &{<nil> BugA 0 0xc001e38880 <nil>}
TYPE json.BugB:
  /home/craig/github/golang/go/src/encoding/json/encode_test.go => &{<nil> BugB 0 0xc001e38920 <nil>}
TYPE json.BugC:
  /home/craig/github/golang/go/src/encoding/json/encode_test.go => &{<nil> BugC 0 0xc001e389a0 <nil>}
TYPE json.BugD:
  /home/craig/github/golang/go/src/encoding/json/encode_test.go => &{<nil> BugD 0 0xc001e467e0 <nil>}
TYPE json.BugX:
  /home/craig/github/golang/go/src/encoding/json/encode_test.go => &{<nil> BugX 0 0xc001e38ac0 <nil>}
TYPE json.BugY:
  /home/craig/github/golang/go/src/encoding/json/encode_test.go => &{<nil> BugY 0 0xc001e468a0 <nil>}
TYPE json.BugZ:
  /home/craig/github/golang/go/src/encoding/json/encode_test.go => &{<nil> BugZ 0 0xc001e46f60 <nil>}
TYPE json.C:
  /home/craig/github/golang/go/src/encoding/json/encode_test.go => &{<nil> C 0 int <nil>}
TYPE json.CText:
  /home/craig/github/golang/go/src/encoding/json/encode_test.go => &{<nil> CText 0 int <nil>}
TYPE json.Decoder:
  /home/craig/github/golang/go/src/encoding/json/stream.go => &{<nil> Decoder 0 0xc001dde9c0 <nil>}
TYPE json.Delim:
  /home/craig/github/golang/go/src/encoding/json/stream.go => &{<nil> Delim 0 rune <nil>}
TYPE json.Embed0:
  /home/craig/github/golang/go/src/encoding/json/decode_test.go => &{<nil> Embed0 0 0xc001cb48e0 <nil>}
TYPE json.Embed0a:
  /home/craig/github/golang/go/src/encoding/json/decode_test.go => &{<nil> Embed0a 0 0xc001cb4b80 <nil>}
TYPE json.Embed0b:
  /home/craig/github/golang/go/src/encoding/json/decode_test.go => &{<nil> Embed0b 0 Embed0 <nil>}
TYPE json.Embed0c:
  /home/craig/github/golang/go/src/encoding/json/decode_test.go => &{<nil> Embed0c 0 Embed0 <nil>}
TYPE json.Embed0p:
  /home/craig/github/golang/go/src/encoding/json/decode_test.go => &{<nil> Embed0p 0 0xc001cb4ca0 <nil>}
TYPE json.Embed0q:
  /home/craig/github/golang/go/src/encoding/json/decode_test.go => &{<nil> Embed0q 0 0xc001cb4d00 <nil>}
TYPE json.Encoder:
  /home/craig/github/golang/go/src/encoding/json/stream.go => &{<nil> Encoder 0 0xc001dea8a0 <nil>}
TYPE json.InvalidUTF8Error:
  /home/craig/github/golang/go/src/encoding/json/encode.go => &{<nil> InvalidUTF8Error 0 0xc001b64620 <nil>}
TYPE json.InvalidUnmarshalError:
  /home/craig/github/golang/go/src/encoding/json/decode.go => &{<nil> InvalidUnmarshalError 0 0xc001c061e0 <nil>}
TYPE json.Loop:
  /home/craig/github/golang/go/src/encoding/json/decode_test.go => &{<nil> Loop 0 0xc001cb4ee0 <nil>}
TYPE json.Marshaler:
  /home/craig/github/golang/go/src/encoding/json/encode.go => &{<nil> Marshaler 0 0xc001b5ff40 <nil>}
TYPE json.MarshalerError:
  /home/craig/github/golang/go/src/encoding/json/encode.go => &{<nil> MarshalerError 0 0xc001b648e0 <nil>}
TYPE json.MustNotUnmarshalJSON:
  /home/craig/github/golang/go/src/encoding/json/decode_test.go => &{<nil> MustNotUnmarshalJSON 0 0xc001d28ce0 <nil>}
TYPE json.MustNotUnmarshalText:
  /home/craig/github/golang/go/src/encoding/json/decode_test.go => &{<nil> MustNotUnmarshalText 0 0xc001d28ea0 <nil>}
TYPE json.NullTest:
  /home/craig/github/golang/go/src/encoding/json/decode_test.go => &{<nil> NullTest 0 0xc001d1b7e0 <nil>}
TYPE json.NullTestStrings:
  /home/craig/github/golang/go/src/encoding/json/decode_test.go => &{<nil> NullTestStrings 0 0xc001d22600 <nil>}
TYPE json.Number:
  /home/craig/github/golang/go/src/encoding/json/decode.go => &{<nil> Number 0 string <nil>}
TYPE json.Optionals:
  /home/craig/github/golang/go/src/encoding/json/encode_test.go => &{<nil> Optionals 0 0xc001e13200 <nil>}
TYPE json.Point:
  /home/craig/github/golang/go/src/encoding/json/decode_test.go => &{<nil> Point 0 0xc001cb4280 <nil>}
TYPE json.RawMessage:
  /home/craig/github/golang/go/src/encoding/json/stream.go => &{<nil> RawMessage 0 0xc001de9260 <nil>}
TYPE json.Ref:
  /home/craig/github/golang/go/src/encoding/json/encode_test.go => &{<nil> Ref 0 int <nil>}
TYPE json.RefText:
  /home/craig/github/golang/go/src/encoding/json/encode_test.go => &{<nil> RefText 0 int <nil>}
TYPE json.S10:
  /home/craig/github/golang/go/src/encoding/json/decode_test.go => &{<nil> S10 0 0xc001cb5300 <nil>}
TYPE json.S11:
  /home/craig/github/golang/go/src/encoding/json/decode_test.go => &{<nil> S11 0 0xc001cb5360 <nil>}
TYPE json.S12:
  /home/craig/github/golang/go/src/encoding/json/decode_test.go => &{<nil> S12 0 0xc001cb53c0 <nil>}
TYPE json.S13:
  /home/craig/github/golang/go/src/encoding/json/decode_test.go => &{<nil> S13 0 0xc001cb5420 <nil>}
TYPE json.S5:
  /home/craig/github/golang/go/src/encoding/json/decode_test.go => &{<nil> S5 0 0xc001cb5000 <nil>}
TYPE json.S6:
  /home/craig/github/golang/go/src/encoding/json/decode_test.go => &{<nil> S6 0 0xc001cb5080 <nil>}
TYPE json.S7:
  /home/craig/github/golang/go/src/encoding/json/decode_test.go => &{<nil> S7 0 S6 <nil>}
TYPE json.S8:
  /home/craig/github/golang/go/src/encoding/json/decode_test.go => &{<nil> S8 0 0xc001cb5120 <nil>}
TYPE json.S9:
  /home/craig/github/golang/go/src/encoding/json/decode_test.go => &{<nil> S9 0 0xc001cb51e0 <nil>}
TYPE json.Small:
  /home/craig/github/golang/go/src/encoding/json/decode_test.go => &{<nil> Small 0 0xc001d0e0c0 <nil>}
TYPE json.StringTag:
  /home/craig/github/golang/go/src/encoding/json/encode_test.go => &{<nil> StringTag 0 0xc001e13ac0 <nil>}
TYPE json.SyntaxError:
  /home/craig/github/golang/go/src/encoding/json/scanner.go => &{<nil> SyntaxError 0 0xc001d55160 <nil>}
TYPE json.T:
  /home/craig/github/golang/go/src/encoding/json/decode_test.go => &{<nil> T 0 0xc001c938c0 <nil>}
TYPE json.Time3339:
  /home/craig/github/golang/go/src/encoding/json/decode_test.go => &{<nil> Time3339 0 0xc001d31dc0 <nil>}
TYPE json.Token:
  /home/craig/github/golang/go/src/encoding/json/stream.go => &{<nil> Token 0 0xc001df2a60 <nil>}
TYPE json.Top:
  /home/craig/github/golang/go/src/encoding/json/decode_test.go => &{<nil> Top 0 0xc001cb45e0 <nil>}
TYPE json.U:
  /home/craig/github/golang/go/src/encoding/json/decode_test.go => &{<nil> U 0 0xc001c93980 <nil>}
TYPE json.UnmarshalFieldError:
  /home/craig/github/golang/go/src/encoding/json/decode.go => &{<nil> UnmarshalFieldError 0 0xc001bfdd80 <nil>}
TYPE json.UnmarshalTypeError:
  /home/craig/github/golang/go/src/encoding/json/decode.go => &{<nil> UnmarshalTypeError 0 0xc001bfd580 <nil>}
TYPE json.Unmarshaler:
  /home/craig/github/golang/go/src/encoding/json/decode.go => &{<nil> Unmarshaler 0 0xc001bfd200 <nil>}
TYPE json.UnsupportedTypeError:
  /home/craig/github/golang/go/src/encoding/json/encode.go => &{<nil> UnsupportedTypeError 0 0xc001b64060 <nil>}
TYPE json.UnsupportedValueError:
  /home/craig/github/golang/go/src/encoding/json/encode.go => &{<nil> UnsupportedValueError 0 0xc001b64300 <nil>}
TYPE json.V:
  /home/craig/github/golang/go/src/encoding/json/decode_test.go => &{<nil> V 0 0xc001c93b00 <nil>}
TYPE json.VOuter:
  /home/craig/github/golang/go/src/encoding/json/decode_test.go => &{<nil> VOuter 0 0xc001c93b80 <nil>}
TYPE json.Val:
  /home/craig/github/golang/go/src/encoding/json/encode_test.go => &{<nil> Val 0 int <nil>}
TYPE json.ValText:
  /home/craig/github/golang/go/src/encoding/json/encode_test.go => &{<nil> ValText 0 int <nil>}
TYPE json.WrongString:
  /home/craig/github/golang/go/src/encoding/json/decode_test.go => &{<nil> WrongString 0 0xc001d08260 <nil>}
TYPE json.XYZ:
  /home/craig/github/golang/go/src/encoding/json/decode_test.go => &{<nil> XYZ 0 0xc001cb5680 <nil>}
TYPE json.Xint:
  /home/craig/github/golang/go/src/encoding/json/decode_test.go => &{<nil> Xint 0 0xc001cff380 <nil>}
TYPE json_test.Animal:
  /home/craig/github/golang/go/src/encoding/json/example_marshaling_test.go => &{<nil> Animal 0 int <nil>}
TYPE jsonrpc.Args:
  /home/craig/github/golang/go/src/net/rpc/jsonrpc/all_test.go => &{<nil> Args 0 0xc0048842c0 <nil>}
TYPE jsonrpc.Arith:
  /home/craig/github/golang/go/src/net/rpc/jsonrpc/all_test.go => &{<nil> Arith 0 int <nil>}
TYPE jsonrpc.ArithAddResp:
  /home/craig/github/golang/go/src/net/rpc/jsonrpc/all_test.go => &{<nil> ArithAddResp 0 0xc004884540 <nil>}
TYPE jsonrpc.BuiltinTypes:
  /home/craig/github/golang/go/src/net/rpc/jsonrpc/all_test.go => &{<nil> BuiltinTypes 0 0xc004885180 <nil>}
TYPE jsonrpc.Reply:
  /home/craig/github/golang/go/src/net/rpc/jsonrpc/all_test.go => &{<nil> Reply 0 0xc004884360 <nil>}
TYPE list.Element:
  /home/craig/github/golang/go/src/container/list/list.go => &{<nil> Element 0 0xc0008a9260 <nil>}
TYPE list.List:
  /home/craig/github/golang/go/src/container/list/list.go => &{<nil> List 0 0xc0008a9ba0 <nil>}
TYPE log.Logger:
  /home/craig/github/golang/go/src/log/log.go => &{<nil> Logger 0 0xc00268a780 <nil>}
TYPE lzw.Order:
  /home/craig/github/golang/go/src/compress/lzw/reader.go => &{<nil> Order 0 int <nil>}
TYPE macho.Cpu:
  /home/craig/github/golang/go/src/debug/macho/macho.go => &{<nil> Cpu 0 uint32 <nil>}
TYPE macho.Dylib:
  /home/craig/github/golang/go/src/debug/macho/file.go => &{<nil> Dylib 0 0xc0005c2a20 <nil>}
TYPE macho.DylibCmd:
  /home/craig/github/golang/go/src/debug/macho/macho.go => &{0xc0017a7620 DylibCmd 0 0xc0017a7800 <nil>}
TYPE macho.Dysymtab:
  /home/craig/github/golang/go/src/debug/macho/file.go => &{<nil> Dysymtab 0 0xc0006456e0 <nil>}
TYPE macho.DysymtabCmd:
  /home/craig/github/golang/go/src/debug/macho/macho.go => &{0xc0017a7080 DysymtabCmd 0 0xc0017a75e0 <nil>}
TYPE macho.FatArch:
  /home/craig/github/golang/go/src/debug/macho/fat.go => &{<nil> FatArch 0 0xc0017bc720 <nil>}
TYPE macho.FatArchHeader:
  /home/craig/github/golang/go/src/debug/macho/fat.go => &{<nil> FatArchHeader 0 0xc0017bc5e0 <nil>}
TYPE macho.FatFile:
  /home/craig/github/golang/go/src/debug/macho/fat.go => &{<nil> FatFile 0 0xc0017bc3c0 <nil>}
TYPE macho.File:
  /home/craig/github/golang/go/src/debug/macho/file.go => &{<nil> File 0 0xc00127e840 <nil>}
TYPE macho.FileHeader:
  /home/craig/github/golang/go/src/debug/macho/macho.go => &{<nil> FileHeader 0 0xc001792820 <nil>}
TYPE macho.FormatError:
  /home/craig/github/golang/go/src/debug/macho/file.go => &{<nil> FormatError 0 0xc0007d5820 <nil>}
TYPE macho.Load:
  /home/craig/github/golang/go/src/debug/macho/file.go => &{<nil> Load 0 0xc00127e940 <nil>}
TYPE macho.LoadBytes:
  /home/craig/github/golang/go/src/debug/macho/file.go => &{<nil> LoadBytes 0 0xc0017c9f50 <nil>}
TYPE macho.LoadCmd:
  /home/craig/github/golang/go/src/debug/macho/macho.go => &{<nil> LoadCmd 0 uint32 <nil>}
TYPE macho.Nlist32:
  /home/craig/github/golang/go/src/debug/macho/macho.go => &{<nil> Nlist32 0 0xc0017aee60 <nil>}
TYPE macho.Nlist64:
  /home/craig/github/golang/go/src/debug/macho/macho.go => &{<nil> Nlist64 0 0xc0017af040 <nil>}
TYPE macho.Regs386:
  /home/craig/github/golang/go/src/debug/macho/macho.go => &{<nil> Regs386 0 0xc0017af4e0 <nil>}
TYPE macho.RegsAMD64:
  /home/craig/github/golang/go/src/debug/macho/macho.go => &{<nil> RegsAMD64 0 0xc0017afac0 <nil>}
TYPE macho.Reloc:
  /home/craig/github/golang/go/src/debug/macho/file.go => &{<nil> Reloc 0 0xc000b9a060 <nil>}
TYPE macho.RelocTypeARM:
  /home/craig/github/golang/go/src/debug/macho/reloctype.go => &{<nil> RelocTypeARM 0 int <nil>}
TYPE macho.RelocTypeARM64:
  /home/craig/github/golang/go/src/debug/macho/reloctype.go => &{<nil> RelocTypeARM64 0 int <nil>}
TYPE macho.RelocTypeGeneric:
  /home/craig/github/golang/go/src/debug/macho/reloctype.go => &{<nil> RelocTypeGeneric 0 int <nil>}
TYPE macho.RelocTypeX86_64:
  /home/craig/github/golang/go/src/debug/macho/reloctype.go => &{<nil> RelocTypeX86_64 0 int <nil>}
TYPE macho.Rpath:
  /home/craig/github/golang/go/src/debug/macho/file.go => &{<nil> Rpath 0 0xc0007b9e60 <nil>}
TYPE macho.RpathCmd:
  /home/craig/github/golang/go/src/debug/macho/macho.go => &{0xc0017a7840 RpathCmd 0 0xc0017a7960 <nil>}
TYPE macho.Section:
  /home/craig/github/golang/go/src/debug/macho/file.go => &{<nil> Section 0 0xc000b9bc20 <nil>}
TYPE macho.Section32:
  /home/craig/github/golang/go/src/debug/macho/macho.go => &{<nil> Section32 0 0xc0017ae8a0 <nil>}
TYPE macho.Section64:
  /home/craig/github/golang/go/src/debug/macho/macho.go => &{<nil> Section64 0 0xc0017aec80 <nil>}
TYPE macho.SectionHeader:
  /home/craig/github/golang/go/src/debug/macho/file.go => &{<nil> SectionHeader 0 0xc00092e360 <nil>}
TYPE macho.Segment:
  /home/craig/github/golang/go/src/debug/macho/file.go => &{<nil> Segment 0 0xc00127f100 <nil>}
TYPE macho.Segment32:
  /home/craig/github/golang/go/src/debug/macho/macho.go => &{0xc0017a6740 Segment32 0 0xc0017a6a80 <nil>}
TYPE macho.Segment64:
  /home/craig/github/golang/go/src/debug/macho/macho.go => &{0xc0017a6ac0 Segment64 0 0xc0017a6e00 <nil>}
TYPE macho.SegmentHeader:
  /home/craig/github/golang/go/src/debug/macho/file.go => &{<nil> SegmentHeader 0 0xc00127ee20 <nil>}
TYPE macho.Symbol:
  /home/craig/github/golang/go/src/debug/macho/file.go => &{<nil> Symbol 0 0xc0007d5660 <nil>}
TYPE macho.Symtab:
  /home/craig/github/golang/go/src/debug/macho/file.go => &{<nil> Symtab 0 0xc0005cd800 <nil>}
TYPE macho.SymtabCmd:
  /home/craig/github/golang/go/src/debug/macho/macho.go => &{0xc0017a6e40 SymtabCmd 0 0xc0017a7040 <nil>}
TYPE macho.Thread:
  /home/craig/github/golang/go/src/debug/macho/macho.go => &{0xc0017a79a0 Thread 0 0xc0017a7b00 <nil>}
TYPE macho.Type:
  /home/craig/github/golang/go/src/debug/macho/macho.go => &{<nil> Type 0 uint32 <nil>}
TYPE mail.Address:
  /home/craig/github/golang/go/src/net/mail/message.go => &{<nil> Address 0 0xc004777260 <nil>}
TYPE mail.AddressParser:
  /home/craig/github/golang/go/src/net/mail/message.go => &{<nil> AddressParser 0 0xc004777840 <nil>}
TYPE mail.Header:
  /home/craig/github/golang/go/src/net/mail/message.go => &{<nil> Header 0 0xc0047747e0 <nil>}
TYPE mail.Message:
  /home/craig/github/golang/go/src/net/mail/message.go => &{<nil> Message 0 0xc00476ce60 <nil>}
TYPE mime.WordDecoder:
  /home/craig/github/golang/go/src/mime/encodedword.go => &{<nil> WordDecoder 0 0xc0036a2020 <nil>}
TYPE mime.WordEncoder:
  /home/craig/github/golang/go/src/mime/encodedword.go => &{<nil> WordEncoder 0 byte <nil>}
TYPE multipart.File:
  /home/craig/github/golang/go/src/mime/multipart/formdata.go => &{<nil> File 0 0xc0037486c0 <nil>}
TYPE multipart.FileHeader:
  /home/craig/github/golang/go/src/mime/multipart/formdata.go => &{<nil> FileHeader 0 0xc003745ee0 <nil>}
TYPE multipart.Form:
  /home/craig/github/golang/go/src/mime/multipart/formdata.go => &{<nil> Form 0 0xc003745760 <nil>}
TYPE multipart.Part:
  /home/craig/github/golang/go/src/mime/multipart/multipart.go => &{<nil> Part 0 0xc0037a2e00 <nil>}
TYPE multipart.Reader:
  /home/craig/github/golang/go/src/mime/multipart/multipart.go => &{<nil> Reader 0 0xc002628020 <nil>}
TYPE multipart.Writer:
  /home/craig/github/golang/go/src/mime/multipart/writer.go => &{<nil> Writer 0 0xc00372a880 <nil>}
TYPE net.Addr:
  /home/craig/github/golang/go/src/net/net.go => &{<nil> Addr 0 0xc002585460 <nil>}
TYPE net.AddrError:
  /home/craig/github/golang/go/src/net/net.go => &{<nil> AddrError 0 0xc002516f00 <nil>}
TYPE net.Buffers:
  /home/craig/github/golang/go/src/net/net.go => &{<nil> Buffers 0 0xc002842f60 <nil>}
TYPE net.Conn:
  /home/craig/github/golang/go/src/net/net.go => &{<nil> Conn 0 0xc00257c280 <nil>}
TYPE net.DNSConfigError:
  /home/craig/github/golang/go/src/net/net.go => &{<nil> DNSConfigError 0 0xc0024c9060 <nil>}
TYPE net.DNSError:
  /home/craig/github/golang/go/src/net/net.go => &{<nil> DNSError 0 0xc0024c9800 <nil>}
TYPE net.Dialer:
  /home/craig/github/golang/go/src/net/dial.go => &{<nil> Dialer 0 0xc002505740 <nil>}
TYPE net.Error:
  /home/craig/github/golang/go/src/net/net.go => &{<nil> Error 0 0xc002531660 <nil>}
TYPE net.Flags:
  /home/craig/github/golang/go/src/net/interface.go => &{<nil> Flags 0 uint <nil>}
TYPE net.HardwareAddr:
  /home/craig/github/golang/go/src/net/mac.go => &{<nil> HardwareAddr 0 0xc001a75050 <nil>}
TYPE net.IP:
  /home/craig/github/golang/go/src/net/ip.go => &{<nil> IP 0 0xc002b20d20 <nil>}
TYPE net.IPAddr:
  /home/craig/github/golang/go/src/net/iprawsock.go => &{<nil> IPAddr 0 0xc0027d16e0 <nil>}
TYPE net.IPConn:
  /home/craig/github/golang/go/src/net/iprawsock.go => &{<nil> IPConn 0 0xc0027c7680 <nil>}
TYPE net.IPMask:
  /home/craig/github/golang/go/src/net/ip.go => &{<nil> IPMask 0 0xc002b20e40 <nil>}
TYPE net.IPNet:
  /home/craig/github/golang/go/src/net/ip.go => &{<nil> IPNet 0 0xc00300eee0 <nil>}
TYPE net.Interface:
  /home/craig/github/golang/go/src/net/interface.go => &{<nil> Interface 0 0xc0017dca00 <nil>}
TYPE net.InvalidAddrError:
  /home/craig/github/golang/go/src/net/net.go => &{<nil> InvalidAddrError 0 string <nil>}
TYPE net.ListenConfig:
  /home/craig/github/golang/go/src/net/dial.go => &{<nil> ListenConfig 0 0xc002277c60 <nil>}
TYPE net.Listener:
  /home/craig/github/golang/go/src/net/net.go => &{<nil> Listener 0 0xc002531460 <nil>}
TYPE net.MX:
  /home/craig/github/golang/go/src/net/dnsclient.go => &{<nil> MX 0 0xc002fdb580 <nil>}
TYPE net.NS:
  /home/craig/github/golang/go/src/net/dnsclient.go => &{<nil> NS 0 0xc002ffe100 <nil>}
TYPE net.OpError:
  /home/craig/github/golang/go/src/net/net.go => &{<nil> OpError 0 0xc002522640 <nil>}
TYPE net.PacketConn:
  /home/craig/github/golang/go/src/net/net.go => &{<nil> PacketConn 0 0xc0025310e0 <nil>}
TYPE net.ParseError:
  /home/craig/github/golang/go/src/net/net.go => &{<nil> ParseError 0 0xc002516c60 <nil>}
TYPE net.Resolver:
  /home/craig/github/golang/go/src/net/lookup.go => &{<nil> Resolver 0 0xc001c34260 <nil>}
TYPE net.SRV:
  /home/craig/github/golang/go/src/net/dnsclient.go => &{<nil> SRV 0 0xc002f252c0 <nil>}
TYPE net.TCPAddr:
  /home/craig/github/golang/go/src/net/tcpsock.go => &{<nil> TCPAddr 0 0xc0022f14a0 <nil>}
TYPE net.TCPConn:
  /home/craig/github/golang/go/src/net/tcpsock.go => &{<nil> TCPConn 0 0xc002354940 <nil>}
TYPE net.TCPListener:
  /home/craig/github/golang/go/src/net/tcpsock.go => &{<nil> TCPListener 0 0xc002705380 <nil>}
TYPE net.UDPAddr:
  /home/craig/github/golang/go/src/net/udpsock.go => &{<nil> UDPAddr 0 0xc001e44da0 <nil>}
TYPE net.UDPConn:
  /home/craig/github/golang/go/src/net/udpsock.go => &{<nil> UDPConn 0 0xc00150c240 <nil>}
TYPE net.UnixAddr:
  /home/craig/github/golang/go/src/net/unixsock.go => &{<nil> UnixAddr 0 0xc0014d6680 <nil>}
TYPE net.UnixConn:
  /home/craig/github/golang/go/src/net/unixsock.go => &{<nil> UnixConn 0 0xc0014d7600 <nil>}
TYPE net.UnixListener:
  /home/craig/github/golang/go/src/net/unixsock.go => &{<nil> UnixListener 0 0xc0014713a0 <nil>}
TYPE net.UnknownNetworkError:
  /home/craig/github/golang/go/src/net/net.go => &{<nil> UnknownNetworkError 0 string <nil>}
TYPE nettest.MakePipe:
  /home/craig/github/golang/go/src/vendor/golang_org/x/net/nettest/conntest.go => &{<nil> MakePipe 0 0xc006035aa0 <nil>}
TYPE norm.Form:
  /home/craig/github/golang/go/src/vendor/golang_org/x/text/unicode/norm/normalize.go => &{<nil> Form 0 int <nil>}
TYPE norm.Iter:
  /home/craig/github/golang/go/src/vendor/golang_org/x/text/unicode/norm/iter.go => &{<nil> Iter 0 0xc005adb300 <nil>}
TYPE norm.Properties:
  /home/craig/github/golang/go/src/vendor/golang_org/x/text/unicode/norm/forminfo.go => &{<nil> Properties 0 0xc006adc120 <nil>}
TYPE os.File:
  /home/craig/github/golang/go/src/os/types.go => &{<nil> File 0 0xc0039e6a20 <nil>}
TYPE os.FileInfo:
  /home/craig/github/golang/go/src/os/types.go => &{<nil> FileInfo 0 0xc0039e6ec0 <nil>}
TYPE os.FileMode:
  /home/craig/github/golang/go/src/os/types.go => &{<nil> FileMode 0 uint32 <nil>}
TYPE os.LinkError:
  /home/craig/github/golang/go/src/os/file.go => &{<nil> LinkError 0 0xc0032e4f80 <nil>}
TYPE os.PathError:
  /home/craig/github/golang/go/src/os/error.go => &{<nil> PathError 0 0xc002280e40 <nil>}
TYPE os.ProcAttr:
  /home/craig/github/golang/go/src/os/exec.go => &{<nil> ProcAttr 0 0xc004b53080 <nil>}
TYPE os.Process:
  /home/craig/github/golang/go/src/os/exec.go => &{<nil> Process 0 0xc004b52420 <nil>}
TYPE os.ProcessState:
  /home/craig/github/golang/go/src/os/exec_posix.go => &{<nil> ProcessState 0 0xc004b68680 <nil>}
TYPE os.Signal:
  /home/craig/github/golang/go/src/os/exec.go => &{<nil> Signal 0 0xc004b53240 <nil>}
TYPE os.SyscallError:
  /home/craig/github/golang/go/src/os/error.go => &{<nil> SyscallError 0 0xc002281820 <nil>}
TYPE parse.ActionNode:
  /home/craig/github/golang/go/src/text/template/parse/node.go => &{<nil> ActionNode 0 0xc003b7f580 <nil>}
TYPE parse.BoolNode:
  /home/craig/github/golang/go/src/text/template/parse/node.go => &{<nil> BoolNode 0 0xc003c05920 <nil>}
TYPE parse.BranchNode:
  /home/craig/github/golang/go/src/text/template/parse/node.go => &{<nil> BranchNode 0 0xc003c56380 <nil>}
TYPE parse.ChainNode:
  /home/craig/github/golang/go/src/text/template/parse/node.go => &{<nil> ChainNode 0 0xc003bf5640 <nil>}
TYPE parse.CommandNode:
  /home/craig/github/golang/go/src/text/template/parse/node.go => &{<nil> CommandNode 0 0xc003b864c0 <nil>}
TYPE parse.DotNode:
  /home/craig/github/golang/go/src/text/template/parse/node.go => &{<nil> DotNode 0 0xc003bcd120 <nil>}
TYPE parse.FieldNode:
  /home/craig/github/golang/go/src/text/template/parse/node.go => &{<nil> FieldNode 0 0xc003bde660 <nil>}
TYPE parse.IdentifierNode:
  /home/craig/github/golang/go/src/text/template/parse/node.go => &{<nil> IdentifierNode 0 0xc003baafa0 <nil>}
TYPE parse.IfNode:
  /home/craig/github/golang/go/src/text/template/parse/node.go => &{<nil> IfNode 0 0xc003c5aca0 <nil>}
TYPE parse.ListNode:
  /home/craig/github/golang/go/src/text/template/parse/node.go => &{<nil> ListNode 0 0xc003b35ca0 <nil>}
TYPE parse.NilNode:
  /home/craig/github/golang/go/src/text/template/parse/node.go => &{<nil> NilNode 0 0xc003bd1c00 <nil>}
TYPE parse.Node:
  /home/craig/github/golang/go/src/text/template/parse/node.go => &{<nil> Node 0 0xc003b25720 <nil>}
TYPE parse.NodeType:
  /home/craig/github/golang/go/src/text/template/parse/node.go => &{<nil> NodeType 0 int <nil>}
TYPE parse.NumberNode:
  /home/craig/github/golang/go/src/text/template/parse/node.go => &{<nil> NumberNode 0 0xc003c107a0 <nil>}
TYPE parse.PipeNode:
  /home/craig/github/golang/go/src/text/template/parse/node.go => &{<nil> PipeNode 0 0xc003b6bb80 <nil>}
TYPE parse.Pos:
  /home/craig/github/golang/go/src/text/template/parse/node.go => &{<nil> Pos 0 int <nil>}
TYPE parse.RangeNode:
  /home/craig/github/golang/go/src/text/template/parse/node.go => &{<nil> RangeNode 0 0xc003c68220 <nil>}
TYPE parse.StringNode:
  /home/craig/github/golang/go/src/text/template/parse/node.go => &{<nil> StringNode 0 0xc003c23ce0 <nil>}
TYPE parse.TemplateNode:
  /home/craig/github/golang/go/src/text/template/parse/node.go => &{<nil> TemplateNode 0 0xc003c697c0 <nil>}
TYPE parse.TextNode:
  /home/craig/github/golang/go/src/text/template/parse/node.go => &{<nil> TextNode 0 0xc003b5a780 <nil>}
TYPE parse.Tree:
  /home/craig/github/golang/go/src/text/template/parse/parse.go => &{<nil> Tree 0 0xc0040cdb00 <nil>}
TYPE parse.VariableNode:
  /home/craig/github/golang/go/src/text/template/parse/node.go => &{<nil> VariableNode 0 0xc003bc8460 <nil>}
TYPE parse.WithNode:
  /home/craig/github/golang/go/src/text/template/parse/node.go => &{<nil> WithNode 0 0xc003c68be0 <nil>}
TYPE parser.Mode:
  /home/craig/github/golang/go/src/go/parser/interface.go => &{<nil> Mode 0 uint <nil>}
TYPE path.ExtTest:
  /home/craig/github/golang/go/src/path/path_test.go => &{<nil> ExtTest 0 0xc0017d4820 <nil>}
TYPE path.IsAbsTest:
  /home/craig/github/golang/go/src/path/path_test.go => &{<nil> IsAbsTest 0 0xc001c34ae0 <nil>}
TYPE path.JoinTest:
  /home/craig/github/golang/go/src/path/path_test.go => &{<nil> JoinTest 0 0xc002a54c40 <nil>}
TYPE path.MatchTest:
  /home/craig/github/golang/go/src/path/match_test.go => &{<nil> MatchTest 0 0xc001c35ae0 <nil>}
TYPE path.PathTest:
  /home/craig/github/golang/go/src/path/path_test.go => &{<nil> PathTest 0 0xc002189760 <nil>}
TYPE path.SplitTest:
  /home/craig/github/golang/go/src/path/path_test.go => &{<nil> SplitTest 0 0xc00170ba40 <nil>}
TYPE pe.COFFSymbol:
  /home/craig/github/golang/go/src/debug/pe/symbol.go => &{<nil> COFFSymbol 0 0xc000d09ca0 <nil>}
TYPE pe.DataDirectory:
  /home/craig/github/golang/go/src/debug/pe/pe.go => &{<nil> DataDirectory 0 0xc000524520 <nil>}
TYPE pe.File:
  /home/craig/github/golang/go/src/debug/pe/file.go => &{<nil> File 0 0xc000ad54c0 <nil>}
TYPE pe.FileHeader:
  /home/craig/github/golang/go/src/debug/pe/pe.go => &{<nil> FileHeader 0 0xc000524460 <nil>}
TYPE pe.FormatError:
  /home/craig/github/golang/go/src/debug/pe/file.go => &{<nil> FormatError 0 0xc000bdc400 <nil>}
TYPE pe.ImportDirectory:
  /home/craig/github/golang/go/src/debug/pe/file.go => &{<nil> ImportDirectory 0 0xc0009bdba0 <nil>}
TYPE pe.OptionalHeader32:
  /home/craig/github/golang/go/src/debug/pe/pe.go => &{<nil> OptionalHeader32 0 0xc0005254e0 <nil>}
TYPE pe.OptionalHeader64:
  /home/craig/github/golang/go/src/debug/pe/pe.go => &{<nil> OptionalHeader64 0 0xc000525ce0 <nil>}
TYPE pe.Reloc:
  /home/craig/github/golang/go/src/debug/pe/section.go => &{<nil> Reloc 0 0xc000ae9b00 <nil>}
TYPE pe.Section:
  /home/craig/github/golang/go/src/debug/pe/section.go => &{<nil> Section 0 0xc000ae58c0 <nil>}
TYPE pe.SectionHeader:
  /home/craig/github/golang/go/src/debug/pe/section.go => &{<nil> SectionHeader 0 0xc000ae55c0 <nil>}
TYPE pe.SectionHeader32:
  /home/craig/github/golang/go/src/debug/pe/section.go => &{<nil> SectionHeader32 0 0xc000ae90e0 <nil>}
TYPE pe.StringTable:
  /home/craig/github/golang/go/src/debug/pe/string.go => &{<nil> StringTable 0 0xc000facbd0 <nil>}
TYPE pe.Symbol:
  /home/craig/github/golang/go/src/debug/pe/symbol.go => &{<nil> Symbol 0 0xc000524140 <nil>}
TYPE pem.Block:
  /home/craig/github/golang/go/src/encoding/pem/pem.go => &{<nil> Block 0 0xc001eea140 <nil>}
TYPE pem.GetLineTest:
  /home/craig/github/golang/go/src/encoding/pem/pem_test.go => &{<nil> GetLineTest 0 0xc001e76c20 <nil>}
TYPE pkix.AlgorithmIdentifier:
  /home/craig/github/golang/go/src/crypto/x509/pkix/pkix.go => &{<nil> AlgorithmIdentifier 0 0xc000c1eac0 <nil>}
TYPE pkix.AttributeTypeAndValue:
  /home/craig/github/golang/go/src/crypto/x509/pkix/pkix.go => &{<nil> AttributeTypeAndValue 0 0xc000e2e180 <nil>}
TYPE pkix.AttributeTypeAndValueSET:
  /home/craig/github/golang/go/src/crypto/x509/pkix/pkix.go => &{<nil> AttributeTypeAndValueSET 0 0xc000e2e300 <nil>}
TYPE pkix.CertificateList:
  /home/craig/github/golang/go/src/crypto/x509/pkix/pkix.go => &{<nil> CertificateList 0 0xc000f040c0 <nil>}
TYPE pkix.Extension:
  /home/craig/github/golang/go/src/crypto/x509/pkix/pkix.go => &{<nil> Extension 0 0xc000e2e4e0 <nil>}
TYPE pkix.Name:
  /home/craig/github/golang/go/src/crypto/x509/pkix/pkix.go => &{<nil> Name 0 0xc000e2e8c0 <nil>}
TYPE pkix.RDNSequence:
  /home/craig/github/golang/go/src/crypto/x509/pkix/pkix.go => &{<nil> RDNSequence 0 0xc000a2ad20 <nil>}
TYPE pkix.RelativeDistinguishedNameSET:
  /home/craig/github/golang/go/src/crypto/x509/pkix/pkix.go => &{<nil> RelativeDistinguishedNameSET 0 0xc000a2bc20 <nil>}
TYPE pkix.RevokedCertificate:
  /home/craig/github/golang/go/src/crypto/x509/pkix/pkix.go => &{<nil> RevokedCertificate 0 0xc000f049c0 <nil>}
TYPE pkix.TBSCertificateList:
  /home/craig/github/golang/go/src/crypto/x509/pkix/pkix.go => &{<nil> TBSCertificateList 0 0xc000f04780 <nil>}
TYPE plan9obj.File:
  /home/craig/github/golang/go/src/debug/plan9obj/file.go => &{<nil> File 0 0xc000f085a0 <nil>}
TYPE plan9obj.FileHeader:
  /home/craig/github/golang/go/src/debug/plan9obj/file.go => &{<nil> FileHeader 0 0xc000f083e0 <nil>}
TYPE plan9obj.Section:
  /home/craig/github/golang/go/src/debug/plan9obj/file.go => &{<nil> Section 0 0xc000f08a20 <nil>}
TYPE plan9obj.SectionHeader:
  /home/craig/github/golang/go/src/debug/plan9obj/file.go => &{<nil> SectionHeader 0 0xc000f08760 <nil>}
TYPE plan9obj.Sym:
  /home/craig/github/golang/go/src/debug/plan9obj/file.go => &{<nil> Sym 0 0xc000f093a0 <nil>}
TYPE plugin.Plugin:
  /home/craig/github/golang/go/src/plugin/plugin.go => &{<nil> Plugin 0 0xc0030ca460 <nil>}
TYPE plugin.Symbol:
  /home/craig/github/golang/go/src/plugin/plugin.go => &{<nil> Symbol 0 0xc0030cad60 <nil>}
TYPE png.CompressionLevel:
  /home/craig/github/golang/go/src/image/png/writer.go => &{<nil> CompressionLevel 0 int <nil>}
TYPE png.Encoder:
  /home/craig/github/golang/go/src/image/png/writer.go => &{<nil> Encoder 0 0xc001521320 <nil>}
TYPE png.EncoderBuffer:
  /home/craig/github/golang/go/src/image/png/writer.go => &{<nil> EncoderBuffer 0 encoder <nil>}
TYPE png.EncoderBufferPool:
  /home/craig/github/golang/go/src/image/png/writer.go => &{<nil> EncoderBufferPool 0 0xc001521540 <nil>}
TYPE png.FormatError:
  /home/craig/github/golang/go/src/image/png/reader.go => &{<nil> FormatError 0 string <nil>}
TYPE png.UnsupportedError:
  /home/craig/github/golang/go/src/image/png/reader.go => &{<nil> UnsupportedError 0 string <nil>}
TYPE pprof.LabelSet:
  /home/craig/github/golang/go/src/runtime/pprof/label.go => &{<nil> LabelSet 0 0xc005a16c00 <nil>}
TYPE pprof.Obj32:
  /home/craig/github/golang/go/src/runtime/pprof/mprof_test.go => &{<nil> Obj32 0 0xc0059bbd00 <nil>}
TYPE pprof.Profile:
  /home/craig/github/golang/go/src/runtime/pprof/pprof.go => &{<nil> Profile 0 0xc0059d48e0 <nil>}
TYPE printer.CommentedNode:
  /home/craig/github/golang/go/src/go/printer/printer.go => &{<nil> CommentedNode 0 0xc0023394a0 <nil>}
TYPE printer.Config:
  /home/craig/github/golang/go/src/go/printer/printer.go => &{<nil> Config 0 0xc002329e60 <nil>}
TYPE printer.Mode:
  /home/craig/github/golang/go/src/go/printer/printer.go => &{<nil> Mode 0 uint <nil>}
TYPE quick.A:
  /home/craig/github/golang/go/src/testing/quick/quick_test.go => &{<nil> A 0 0xc004484180 <nil>}
TYPE quick.B:
  /home/craig/github/golang/go/src/testing/quick/quick_test.go => &{<nil> B 0 0xc0044846a0 <nil>}
TYPE quick.CheckEqualError:
  /home/craig/github/golang/go/src/testing/quick/quick.go => &{<nil> CheckEqualError 0 0xc00442c420 <nil>}
TYPE quick.CheckError:
  /home/craig/github/golang/go/src/testing/quick/quick.go => &{<nil> CheckError 0 0xc00442c080 <nil>}
TYPE quick.Config:
  /home/craig/github/golang/go/src/testing/quick/quick.go => &{<nil> Config 0 0xc004439580 <nil>}
TYPE quick.Generator:
  /home/craig/github/golang/go/src/testing/quick/quick.go => &{<nil> Generator 0 0xc00447cf60 <nil>}
TYPE quick.SetupError:
  /home/craig/github/golang/go/src/testing/quick/quick.go => &{<nil> SetupError 0 string <nil>}
TYPE quick.TestArrayAlias:
  /home/craig/github/golang/go/src/testing/quick/quick_test.go => &{<nil> TestArrayAlias 0 0xc00497d590 <nil>}
TYPE quick.TestBoolAlias:
  /home/craig/github/golang/go/src/testing/quick/quick_test.go => &{<nil> TestBoolAlias 0 bool <nil>}
TYPE quick.TestComplex128Alias:
  /home/craig/github/golang/go/src/testing/quick/quick_test.go => &{<nil> TestComplex128Alias 0 complex128 <nil>}
TYPE quick.TestComplex64Alias:
  /home/craig/github/golang/go/src/testing/quick/quick_test.go => &{<nil> TestComplex64Alias 0 complex64 <nil>}
TYPE quick.TestFloat32Alias:
  /home/craig/github/golang/go/src/testing/quick/quick_test.go => &{<nil> TestFloat32Alias 0 float32 <nil>}
TYPE quick.TestFloat64Alias:
  /home/craig/github/golang/go/src/testing/quick/quick_test.go => &{<nil> TestFloat64Alias 0 float64 <nil>}
TYPE quick.TestInt16Alias:
  /home/craig/github/golang/go/src/testing/quick/quick_test.go => &{<nil> TestInt16Alias 0 int16 <nil>}
TYPE quick.TestInt32Alias:
  /home/craig/github/golang/go/src/testing/quick/quick_test.go => &{<nil> TestInt32Alias 0 int32 <nil>}
TYPE quick.TestInt64Alias:
  /home/craig/github/golang/go/src/testing/quick/quick_test.go => &{<nil> TestInt64Alias 0 int64 <nil>}
TYPE quick.TestInt8Alias:
  /home/craig/github/golang/go/src/testing/quick/quick_test.go => &{<nil> TestInt8Alias 0 int8 <nil>}
TYPE quick.TestIntAlias:
  /home/craig/github/golang/go/src/testing/quick/quick_test.go => &{<nil> TestIntAlias 0 int <nil>}
TYPE quick.TestMapAlias:
  /home/craig/github/golang/go/src/testing/quick/quick_test.go => &{<nil> TestMapAlias 0 0xc00494f650 <nil>}
TYPE quick.TestPtrAlias:
  /home/craig/github/golang/go/src/testing/quick/quick_test.go => &{<nil> TestPtrAlias 0 0xc004508cc0 <nil>}
TYPE quick.TestSliceAlias:
  /home/craig/github/golang/go/src/testing/quick/quick_test.go => &{<nil> TestSliceAlias 0 0xc00494fc80 <nil>}
TYPE quick.TestStringAlias:
  /home/craig/github/golang/go/src/testing/quick/quick_test.go => &{<nil> TestStringAlias 0 string <nil>}
TYPE quick.TestStruct:
  /home/craig/github/golang/go/src/testing/quick/quick_test.go => &{<nil> TestStruct 0 0xc004502fa0 <nil>}
TYPE quick.TestStructAlias:
  /home/craig/github/golang/go/src/testing/quick/quick_test.go => &{<nil> TestStructAlias 0 TestStruct <nil>}
TYPE quick.TestUint16Alias:
  /home/craig/github/golang/go/src/testing/quick/quick_test.go => &{<nil> TestUint16Alias 0 uint16 <nil>}
TYPE quick.TestUint32Alias:
  /home/craig/github/golang/go/src/testing/quick/quick_test.go => &{<nil> TestUint32Alias 0 uint32 <nil>}
TYPE quick.TestUint64Alias:
  /home/craig/github/golang/go/src/testing/quick/quick_test.go => &{<nil> TestUint64Alias 0 uint64 <nil>}
TYPE quick.TestUint8Alias:
  /home/craig/github/golang/go/src/testing/quick/quick_test.go => &{<nil> TestUint8Alias 0 uint8 <nil>}
TYPE quick.TestUintAlias:
  /home/craig/github/golang/go/src/testing/quick/quick_test.go => &{<nil> TestUintAlias 0 uint <nil>}
TYPE quick.TestUintptrAlias:
  /home/craig/github/golang/go/src/testing/quick/quick_test.go => &{<nil> TestUintptrAlias 0 uintptr <nil>}
TYPE quotedprintable.Reader:
  /home/craig/github/golang/go/src/mime/quotedprintable/reader.go => &{<nil> Reader 0 0xc002af3d40 <nil>}
TYPE quotedprintable.Writer:
  /home/craig/github/golang/go/src/mime/quotedprintable/writer.go => &{<nil> Writer 0 0xc0029fa740 <nil>}
TYPE rand.Rand:
  /home/craig/github/golang/go/src/math/rand/rand.go => &{<nil> Rand 0 0xc0035881e0 <nil>}
TYPE rand.Source:
  /home/craig/github/golang/go/src/math/rand/rand.go => &{<nil> Source 0 0xc003573a40 <nil>}
TYPE rand.Source64:
  /home/craig/github/golang/go/src/math/rand/rand.go => &{<nil> Source64 0 0xc003573c40 <nil>}
TYPE rand.Zipf:
  /home/craig/github/golang/go/src/math/rand/zipf.go => &{<nil> Zipf 0 0xc0034c0a60 <nil>}
TYPE rc4.Cipher:
  /home/craig/github/golang/go/src/crypto/rc4/rc4.go => &{<nil> Cipher 0 0xc000beec80 <nil>}
TYPE rc4.KeySizeError:
  /home/craig/github/golang/go/src/crypto/rc4/rc4.go => &{<nil> KeySizeError 0 int <nil>}
TYPE reflect.Buffer:
  /home/craig/github/golang/go/src/reflect/export_test.go => &{<nil> Buffer 0 0xc00421c720 <nil>}
TYPE reflect.ChanDir:
  /home/craig/github/golang/go/src/reflect/type.go => &{<nil> ChanDir 0 int <nil>}
TYPE reflect.EmbedWithUnexpMeth:
  /home/craig/github/golang/go/src/reflect/export_test.go => &{<nil> EmbedWithUnexpMeth 0 0xc0041ef940 <nil>}
TYPE reflect.Kind:
  /home/craig/github/golang/go/src/reflect/type.go => &{<nil> Kind 0 uint <nil>}
TYPE reflect.Method:
  /home/craig/github/golang/go/src/reflect/type.go => &{<nil> Method 0 0xc002c80700 <nil>}
TYPE reflect.OtherPkgFields:
  /home/craig/github/golang/go/src/reflect/export_test.go => &{<nil> OtherPkgFields 0 0xc004210880 <nil>}
TYPE reflect.SelectCase:
  /home/craig/github/golang/go/src/reflect/value.go => &{<nil> SelectCase 0 0xc0045d2e80 <nil>}
TYPE reflect.SelectDir:
  /home/craig/github/golang/go/src/reflect/value.go => &{<nil> SelectDir 0 int <nil>}
TYPE reflect.SliceHeader:
  /home/craig/github/golang/go/src/reflect/value.go => &{<nil> SliceHeader 0 0xc0045c0120 <nil>}
TYPE reflect.StringHeader:
  /home/craig/github/golang/go/src/reflect/value.go => &{<nil> StringHeader 0 0xc0045b9dc0 <nil>}
TYPE reflect.StructField:
  /home/craig/github/golang/go/src/reflect/type.go => &{<nil> StructField 0 0xc0037a9880 <nil>}
TYPE reflect.StructTag:
  /home/craig/github/golang/go/src/reflect/type.go => &{<nil> StructTag 0 string <nil>}
TYPE reflect.Type:
  /home/craig/github/golang/go/src/reflect/type.go => &{<nil> Type 0 0xc001257420 <nil>}
TYPE reflect.Value:
  /home/craig/github/golang/go/src/reflect/value.go => &{<nil> Value 0 0xc004304d40 <nil>}
TYPE reflect.ValueError:
  /home/craig/github/golang/go/src/reflect/value.go => &{<nil> ValueError 0 0xc004314e60 <nil>}
TYPE reflect_test.B1:
  /home/craig/github/golang/go/src/reflect/all_test.go => &{<nil> B1 0 0xc00308a1e0 <nil>}
TYPE reflect_test.Basic:
  /home/craig/github/golang/go/src/reflect/all_test.go => &{<nil> Basic 0 0xc0049068c0 <nil>}
TYPE reflect_test.Ch:
  /home/craig/github/golang/go/src/reflect/set_test.go => &{<nil> Ch 0 0xc00222b380 <nil>}
TYPE reflect_test.ComparableStruct:
  /home/craig/github/golang/go/src/reflect/all_test.go => &{<nil> ComparableStruct 0 0xc002c6f3c0 <nil>}
TYPE reflect_test.D1:
  /home/craig/github/golang/go/src/reflect/all_test.go => &{<nil> D1 0 0xc0025b1de0 <nil>}
TYPE reflect_test.D2:
  /home/craig/github/golang/go/src/reflect/all_test.go => &{<nil> D2 0 0xc0025b1e60 <nil>}
TYPE reflect_test.DeepEqualTest:
  /home/craig/github/golang/go/src/reflect/all_test.go => &{<nil> DeepEqualTest 0 0xc004906d00 <nil>}
TYPE reflect_test.Empty:
  /home/craig/github/golang/go/src/reflect/all_test.go => &{<nil> Empty 0 0xc003280e20 <nil>}
TYPE reflect_test.FTest:
  /home/craig/github/golang/go/src/reflect/all_test.go => &{<nil> FTest 0 0xc0025b1d60 <nil>}
TYPE reflect_test.FuncDDD:
  /home/craig/github/golang/go/src/reflect/all_test.go => &{<nil> FuncDDD 0 0xc002d2d060 <nil>}
TYPE reflect_test.Impl:
  /home/craig/github/golang/go/src/reflect/all_test.go => &{<nil> Impl 0 0xc002f97960 <nil>}
TYPE reflect_test.Inner:
  /home/craig/github/golang/go/src/reflect/all_test.go => &{<nil> Inner 0 0xc002f96580 <nil>}
TYPE reflect_test.InnerInt:
  /home/craig/github/golang/go/src/reflect/all_test.go => &{<nil> InnerInt 0 0xc002c07c40 <nil>}
TYPE reflect_test.IntPtr:
  /home/craig/github/golang/go/src/reflect/set_test.go => &{<nil> IntPtr 0 0xc0047cadc0 <nil>}
TYPE reflect_test.IntPtr1:
  /home/craig/github/golang/go/src/reflect/set_test.go => &{<nil> IntPtr1 0 0xc0047cae20 <nil>}
TYPE reflect_test.KeepMethodLive:
  /home/craig/github/golang/go/src/reflect/all_test.go => &{<nil> KeepMethodLive 0 0xc0037a6fa0 <nil>}
TYPE reflect_test.Loop:
  /home/craig/github/golang/go/src/reflect/all_test.go => &{<nil> Loop 0 0xc0049077a0 <nil>}
TYPE reflect_test.Loopy:
  /home/craig/github/golang/go/src/reflect/all_test.go => &{<nil> Loopy 0 0xc0049077e0 <nil>}
TYPE reflect_test.MyByte:
  /home/craig/github/golang/go/src/reflect/all_test.go => &{<nil> MyByte 0 byte <nil>}
TYPE reflect_test.MyBytes:
  /home/craig/github/golang/go/src/reflect/all_test.go => &{<nil> MyBytes 0 0xc002a756e0 <nil>}
TYPE reflect_test.MyFunc:
  /home/craig/github/golang/go/src/reflect/all_test.go => &{<nil> MyFunc 0 0xc003280fc0 <nil>}
TYPE reflect_test.MyRunes:
  /home/craig/github/golang/go/src/reflect/all_test.go => &{<nil> MyRunes 0 0xc002a75a10 <nil>}
TYPE reflect_test.MyString:
  /home/craig/github/golang/go/src/reflect/all_test.go => &{<nil> MyString 0 string <nil>}
TYPE reflect_test.MyStruct:
  /home/craig/github/golang/go/src/reflect/all_test.go => &{<nil> MyStruct 0 0xc003280ec0 <nil>}
TYPE reflect_test.NonComparableStruct:
  /home/craig/github/golang/go/src/reflect/all_test.go => &{<nil> NonComparableStruct 0 0xc002c6f4a0 <nil>}
TYPE reflect_test.NonExportedFirst:
  /home/craig/github/golang/go/src/reflect/all_test.go => &{<nil> NonExportedFirst 0 int <nil>}
TYPE reflect_test.NotBasic:
  /home/craig/github/golang/go/src/reflect/all_test.go => &{<nil> NotBasic 0 Basic <nil>}
TYPE reflect_test.Outer:
  /home/craig/github/golang/go/src/reflect/all_test.go => &{<nil> Outer 0 0xc002f96440 <nil>}
TYPE reflect_test.OuterInt:
  /home/craig/github/golang/go/src/reflect/all_test.go => &{<nil> OuterInt 0 0xc002c07ce0 <nil>}
TYPE reflect_test.Point:
  /home/craig/github/golang/go/src/reflect/all_test.go => &{<nil> Point 0 0xc002421be0 <nil>}
TYPE reflect_test.Private:
  /home/craig/github/golang/go/src/reflect/all_test.go => &{<nil> Private 0 0xc00310a0e0 <nil>}
TYPE reflect_test.Public:
  /home/craig/github/golang/go/src/reflect/all_test.go => &{<nil> Public 0 0xc00310a520 <nil>}
TYPE reflect_test.R0:
  /home/craig/github/golang/go/src/reflect/all_test.go => &{<nil> R0 0 0xc00308aa00 <nil>}
TYPE reflect_test.R1:
  /home/craig/github/golang/go/src/reflect/all_test.go => &{<nil> R1 0 0xc00308ab60 <nil>}
TYPE reflect_test.R10:
  /home/craig/github/golang/go/src/reflect/all_test.go => &{<nil> R10 0 R9 <nil>}
TYPE reflect_test.R11:
  /home/craig/github/golang/go/src/reflect/all_test.go => &{<nil> R11 0 R9 <nil>}
TYPE reflect_test.R12:
  /home/craig/github/golang/go/src/reflect/all_test.go => &{<nil> R12 0 R9 <nil>}
TYPE reflect_test.R13:
  /home/craig/github/golang/go/src/reflect/all_test.go => &{<nil> R13 0 0xc00308b1c0 <nil>}
TYPE reflect_test.R14:
  /home/craig/github/golang/go/src/reflect/all_test.go => &{<nil> R14 0 R13 <nil>}
TYPE reflect_test.R15:
  /home/craig/github/golang/go/src/reflect/all_test.go => &{<nil> R15 0 R13 <nil>}
TYPE reflect_test.R16:
  /home/craig/github/golang/go/src/reflect/all_test.go => &{<nil> R16 0 R13 <nil>}
TYPE reflect_test.R17:
  /home/craig/github/golang/go/src/reflect/all_test.go => &{<nil> R17 0 0xc00308b3e0 <nil>}
TYPE reflect_test.R18:
  /home/craig/github/golang/go/src/reflect/all_test.go => &{<nil> R18 0 R17 <nil>}
TYPE reflect_test.R19:
  /home/craig/github/golang/go/src/reflect/all_test.go => &{<nil> R19 0 R17 <nil>}
TYPE reflect_test.R2:
  /home/craig/github/golang/go/src/reflect/all_test.go => &{<nil> R2 0 R1 <nil>}
TYPE reflect_test.R20:
  /home/craig/github/golang/go/src/reflect/all_test.go => &{<nil> R20 0 R17 <nil>}
TYPE reflect_test.R21:
  /home/craig/github/golang/go/src/reflect/all_test.go => &{<nil> R21 0 0xc00308b520 <nil>}
TYPE reflect_test.R22:
  /home/craig/github/golang/go/src/reflect/all_test.go => &{<nil> R22 0 R21 <nil>}
TYPE reflect_test.R23:
  /home/craig/github/golang/go/src/reflect/all_test.go => &{<nil> R23 0 R21 <nil>}
TYPE reflect_test.R24:
  /home/craig/github/golang/go/src/reflect/all_test.go => &{<nil> R24 0 R21 <nil>}
TYPE reflect_test.R3:
  /home/craig/github/golang/go/src/reflect/all_test.go => &{<nil> R3 0 R1 <nil>}
TYPE reflect_test.R4:
  /home/craig/github/golang/go/src/reflect/all_test.go => &{<nil> R4 0 R1 <nil>}
TYPE reflect_test.R5:
  /home/craig/github/golang/go/src/reflect/all_test.go => &{<nil> R5 0 0xc00308ad80 <nil>}
TYPE reflect_test.R6:
  /home/craig/github/golang/go/src/reflect/all_test.go => &{<nil> R6 0 R5 <nil>}
TYPE reflect_test.R7:
  /home/craig/github/golang/go/src/reflect/all_test.go => &{<nil> R7 0 R5 <nil>}
TYPE reflect_test.R8:
  /home/craig/github/golang/go/src/reflect/all_test.go => &{<nil> R8 0 R5 <nil>}
TYPE reflect_test.R9:
  /home/craig/github/golang/go/src/reflect/all_test.go => &{<nil> R9 0 0xc00308afa0 <nil>}
TYPE reflect_test.Recursive:
  /home/craig/github/golang/go/src/reflect/all_test.go => &{<nil> Recursive 0 0xc00493ef20 <nil>}
TYPE reflect_test.S:
  /home/craig/github/golang/go/src/reflect/all_test.go => &{<nil> S 0 0xc00308bd60 <nil>}
TYPE reflect_test.S0:
  /home/craig/github/golang/go/src/reflect/all_test.go => &{<nil> S0 0 0xc0025b1fc0 <nil>}
TYPE reflect_test.S1:
  /home/craig/github/golang/go/src/reflect/all_test.go => &{<nil> S1 0 0xc002746060 <nil>}
TYPE reflect_test.S10:
  /home/craig/github/golang/go/src/reflect/all_test.go => &{<nil> S10 0 0xc0027467e0 <nil>}
TYPE reflect_test.S11:
  /home/craig/github/golang/go/src/reflect/all_test.go => &{<nil> S11 0 0xc002746840 <nil>}
TYPE reflect_test.S12:
  /home/craig/github/golang/go/src/reflect/all_test.go => &{<nil> S12 0 0xc0027468a0 <nil>}
TYPE reflect_test.S13:
  /home/craig/github/golang/go/src/reflect/all_test.go => &{<nil> S13 0 0xc002746900 <nil>}
TYPE reflect_test.S14:
  /home/craig/github/golang/go/src/reflect/all_test.go => &{<nil> S14 0 0xc0027469c0 <nil>}
TYPE reflect_test.S15:
  /home/craig/github/golang/go/src/reflect/all_test.go => &{<nil> S15 0 0xc002746a20 <nil>}
TYPE reflect_test.S16:
  /home/craig/github/golang/go/src/reflect/all_test.go => &{<nil> S16 0 0xc002746a80 <nil>}
TYPE reflect_test.S1x:
  /home/craig/github/golang/go/src/reflect/all_test.go => &{<nil> S1x 0 0xc002746180 <nil>}
TYPE reflect_test.S1y:
  /home/craig/github/golang/go/src/reflect/all_test.go => &{<nil> S1y 0 0xc0027461e0 <nil>}
TYPE reflect_test.S2:
  /home/craig/github/golang/go/src/reflect/all_test.go => &{<nil> S2 0 0xc002746120 <nil>}
TYPE reflect_test.S3:
  /home/craig/github/golang/go/src/reflect/all_test.go => &{<nil> S3 0 0xc002746340 <nil>}
TYPE reflect_test.S4:
  /home/craig/github/golang/go/src/reflect/all_test.go => &{<nil> S4 0 0xc002746400 <nil>}
TYPE reflect_test.S5:
  /home/craig/github/golang/go/src/reflect/all_test.go => &{<nil> S5 0 0xc002746500 <nil>}
TYPE reflect_test.S6:
  /home/craig/github/golang/go/src/reflect/all_test.go => &{<nil> S6 0 0xc002746580 <nil>}
TYPE reflect_test.S7:
  /home/craig/github/golang/go/src/reflect/all_test.go => &{<nil> S7 0 S6 <nil>}
TYPE reflect_test.S8:
  /home/craig/github/golang/go/src/reflect/all_test.go => &{<nil> S8 0 0xc002746620 <nil>}
TYPE reflect_test.S9:
  /home/craig/github/golang/go/src/reflect/all_test.go => &{<nil> S9 0 0xc0027466e0 <nil>}
TYPE reflect_test.SettablePointer:
  /home/craig/github/golang/go/src/reflect/all_test.go => &{<nil> SettablePointer 0 0xc002102cc0 <nil>}
TYPE reflect_test.SettableStruct:
  /home/craig/github/golang/go/src/reflect/all_test.go => &{<nil> SettableStruct 0 0xc002102ac0 <nil>}
TYPE reflect_test.StructI:
  /home/craig/github/golang/go/src/reflect/all_test.go => &{<nil> StructI 0 int <nil>}
TYPE reflect_test.StructIPtr:
  /home/craig/github/golang/go/src/reflect/all_test.go => &{<nil> StructIPtr 0 int <nil>}
TYPE reflect_test.T:
  /home/craig/github/golang/go/src/reflect/all_test.go => &{<nil> T 0 0xc0047cda40 <nil>}
TYPE reflect_test.T1:
  /home/craig/github/golang/go/src/reflect/all_test.go => &{<nil> T1 0 0xc0025b16a0 <nil>}
TYPE reflect_test.Talias1:
  /home/craig/github/golang/go/src/reflect/all_test.go => &{<nil> Talias1 0 0xc003a40ee0 <nil>}
TYPE reflect_test.Talias2:
  /home/craig/github/golang/go/src/reflect/all_test.go => &{<nil> Talias2 0 0xc003a40f60 <nil>}
TYPE reflect_test.Tbigp:
  /home/craig/github/golang/go/src/reflect/all_test.go => &{<nil> Tbigp 0 0xc002818750 <nil>}
TYPE reflect_test.Tbigv:
  /home/craig/github/golang/go/src/reflect/all_test.go => &{<nil> Tbigv 0 0xc0028184e0 <nil>}
TYPE reflect_test.TheNameOfThisTypeIsExactly255BytesLongSoWhenTheCompilerPrependsTheReflectTestPackageNameAndExtraStarTheLinkerRuntimeAndReflectPackagesWillHaveToCorrectlyDecodeTheSecondLengthByte0123456789_0123456789_0123456789_0123456789_0123456789_012345678:
  /home/craig/github/golang/go/src/reflect/all_test.go => &{<nil> TheNameOfThisTypeIsExactly255BytesLongSoWhenTheCompilerPrependsTheReflectTestPackageNameAndExtraStarTheLinkerRuntimeAndReflectPackagesWillHaveToCorrectlyDecodeTheSecondLengthByte0123456789_0123456789_0123456789_0123456789_0123456789_012345678 0 int <nil>}
TYPE reflect_test.Tint:
  /home/craig/github/golang/go/src/reflect/all_test.go => &{<nil> Tint 0 int <nil>}
TYPE reflect_test.Tint2:
  /home/craig/github/golang/go/src/reflect/all_test.go => &{<nil> Tint2 10704695 Tint <nil>}
TYPE reflect_test.Tinter:
  /home/craig/github/golang/go/src/reflect/all_test.go => &{<nil> Tinter 0 0xc0026fef60 <nil>}
TYPE reflect_test.Tm1:
  /home/craig/github/golang/go/src/reflect/all_test.go => &{<nil> Tm1 0 0xc0022fc160 <nil>}
TYPE reflect_test.Tm2:
  /home/craig/github/golang/go/src/reflect/all_test.go => &{<nil> Tm2 0 0xc0022fc1e0 <nil>}
TYPE reflect_test.Tm3:
  /home/craig/github/golang/go/src/reflect/all_test.go => &{<nil> Tm3 0 0xc0022fc260 <nil>}
TYPE reflect_test.Tm4:
  /home/craig/github/golang/go/src/reflect/all_test.go => &{<nil> Tm4 0 0xc0022fc2a0 <nil>}
TYPE reflect_test.Tsmallp:
  /home/craig/github/golang/go/src/reflect/all_test.go => &{<nil> Tsmallp 0 byte <nil>}
TYPE reflect_test.Tsmallv:
  /home/craig/github/golang/go/src/reflect/all_test.go => &{<nil> Tsmallv 0 byte <nil>}
TYPE reflect_test.Twordp:
  /home/craig/github/golang/go/src/reflect/all_test.go => &{<nil> Twordp 0 uintptr <nil>}
TYPE reflect_test.Twordv:
  /home/craig/github/golang/go/src/reflect/all_test.go => &{<nil> Twordv 0 uintptr <nil>}
TYPE reflect_test.UnExportedFirst:
  /home/craig/github/golang/go/src/reflect/all_test.go => &{<nil> UnExportedFirst 0 int <nil>}
TYPE reflect_test.UnexpT:
  /home/craig/github/golang/go/src/reflect/all_test.go => &{<nil> UnexpT 0 0xc00498eae0 <nil>}
TYPE reflect_test.XM:
  /home/craig/github/golang/go/src/reflect/all_test.go => &{<nil> XM 0 0xc00398f300 <nil>}
TYPE reflect_test._Complex:
  /home/craig/github/golang/go/src/reflect/all_test.go => &{<nil> _Complex 0 0xc004954f20 <nil>}
TYPE regexp.FindTest:
  /home/craig/github/golang/go/src/regexp/find_test.go => &{<nil> FindTest 0 0xc004576740 <nil>}
TYPE regexp.MetaTest:
  /home/craig/github/golang/go/src/regexp/all_test.go => &{<nil> MetaTest 0 0xc004878520 <nil>}
TYPE regexp.Regexp:
  /home/craig/github/golang/go/src/regexp/regexp.go => &{<nil> Regexp 0 0xc00406d120 <nil>}
TYPE regexp.ReplaceFuncTest:
  /home/craig/github/golang/go/src/regexp/all_test.go => &{<nil> ReplaceFuncTest 0 0xc004826a00 <nil>}
TYPE regexp.ReplaceTest:
  /home/craig/github/golang/go/src/regexp/all_test.go => &{<nil> ReplaceTest 0 0xc0047baec0 <nil>}
TYPE ring.Ring:
  /home/craig/github/golang/go/src/container/ring/ring.go => &{<nil> Ring 0 0xc000915ce0 <nil>}
TYPE rpc.ArgNotPublic:
  /home/craig/github/golang/go/src/net/rpc/server_test.go => &{<nil> ArgNotPublic 0 int <nil>}
TYPE rpc.Args:
  /home/craig/github/golang/go/src/net/rpc/server_test.go => &{<nil> Args 0 0xc0047d50e0 <nil>}
TYPE rpc.Arith:
  /home/craig/github/golang/go/src/net/rpc/server_test.go => &{<nil> Arith 0 int <nil>}
TYPE rpc.BuiltinTypes:
  /home/craig/github/golang/go/src/net/rpc/server_test.go => &{<nil> BuiltinTypes 0 0xc0047dcc40 <nil>}
TYPE rpc.Call:
  /home/craig/github/golang/go/src/net/rpc/client.go => &{<nil> Call 0 0xc0047b9980 <nil>}
TYPE rpc.Client:
  /home/craig/github/golang/go/src/net/rpc/client.go => &{<nil> Client 0 0xc0047b9e60 <nil>}
TYPE rpc.ClientCodec:
  /home/craig/github/golang/go/src/net/rpc/client.go => &{<nil> ClientCodec 0 0xc0047c2280 <nil>}
TYPE rpc.CodecEmulator:
  /home/craig/github/golang/go/src/net/rpc/server_test.go => &{<nil> CodecEmulator 0 0xc0047fca40 <nil>}
TYPE rpc.Embed:
  /home/craig/github/golang/go/src/net/rpc/server_test.go => &{<nil> Embed 0 0xc0047dcc00 <nil>}
TYPE rpc.NeedsPtrType:
  /home/craig/github/golang/go/src/net/rpc/server_test.go => &{<nil> NeedsPtrType 0 int <nil>}
TYPE rpc.R:
  /home/craig/github/golang/go/src/net/rpc/client_test.go => &{<nil> R 0 0xc00482ac20 <nil>}
TYPE rpc.Reply:
  /home/craig/github/golang/go/src/net/rpc/server_test.go => &{<nil> Reply 0 0xc0047d5160 <nil>}
TYPE rpc.ReplyNotPointer:
  /home/craig/github/golang/go/src/net/rpc/server_test.go => &{<nil> ReplyNotPointer 0 int <nil>}
TYPE rpc.ReplyNotPublic:
  /home/craig/github/golang/go/src/net/rpc/server_test.go => &{<nil> ReplyNotPublic 0 int <nil>}
TYPE rpc.Request:
  /home/craig/github/golang/go/src/net/rpc/server.go => &{<nil> Request 0 0xc00483c900 <nil>}
TYPE rpc.Response:
  /home/craig/github/golang/go/src/net/rpc/server.go => &{<nil> Response 0 0xc00483cc20 <nil>}
TYPE rpc.S:
  /home/craig/github/golang/go/src/net/rpc/client_test.go => &{<nil> S 0 0xc00482ac60 <nil>}
TYPE rpc.Server:
  /home/craig/github/golang/go/src/net/rpc/server.go => &{<nil> Server 0 0xc00483cfc0 <nil>}
TYPE rpc.ServerCodec:
  /home/craig/github/golang/go/src/net/rpc/server.go => &{<nil> ServerCodec 0 0xc00486b120 <nil>}
TYPE rpc.ServerError:
  /home/craig/github/golang/go/src/net/rpc/client.go => &{<nil> ServerError 0 string <nil>}
TYPE rpc.WriteFailCodec:
  /home/craig/github/golang/go/src/net/rpc/server_test.go => &{<nil> WriteFailCodec 0 int <nil>}
TYPE rsa.CRTValue:
  /home/craig/github/golang/go/src/crypto/rsa/rsa.go => &{<nil> CRTValue 0 0xc000c45880 <nil>}
TYPE rsa.DecryptPKCS1v15Test:
  /home/craig/github/golang/go/src/crypto/rsa/pkcs1v15_test.go => &{<nil> DecryptPKCS1v15Test 0 0xc000c73540 <nil>}
TYPE rsa.OAEPOptions:
  /home/craig/github/golang/go/src/crypto/rsa/rsa.go => &{<nil> OAEPOptions 0 0xc000c37140 <nil>}
TYPE rsa.PKCS1v15DecryptOptions:
  /home/craig/github/golang/go/src/crypto/rsa/pkcs1v15.go => &{<nil> PKCS1v15DecryptOptions 0 0xc000ca5ae0 <nil>}
TYPE rsa.PSSOptions:
  /home/craig/github/golang/go/src/crypto/rsa/pss.go => &{<nil> PSSOptions 0 0xc000ca17c0 <nil>}
TYPE rsa.PrecomputedValues:
  /home/craig/github/golang/go/src/crypto/rsa/rsa.go => &{<nil> PrecomputedValues 0 0xc000c45540 <nil>}
TYPE rsa.PrivateKey:
  /home/craig/github/golang/go/src/crypto/rsa/rsa.go => &{<nil> PrivateKey 0 0xc000c37b20 <nil>}
TYPE rsa.PublicKey:
  /home/craig/github/golang/go/src/crypto/rsa/rsa.go => &{<nil> PublicKey 0 0xc000c36ce0 <nil>}
TYPE runtime.BlockProfileRecord:
  /home/craig/github/golang/go/src/runtime/mprof.go => &{<nil> BlockProfileRecord 0 0xc004e530c0 <nil>}
TYPE runtime.Error:
  /home/craig/github/golang/go/src/runtime/error.go => &{<nil> Error 0 0xc005588400 <nil>}
TYPE runtime.Frame:
  /home/craig/github/golang/go/src/runtime/symtab.go => &{<nil> Frame 0 0xc004db9ba0 <nil>}
TYPE runtime.Frames:
  /home/craig/github/golang/go/src/runtime/symtab.go => &{<nil> Frames 0 0xc004db95c0 <nil>}
TYPE runtime.Func:
  /home/craig/github/golang/go/src/runtime/symtab.go => &{<nil> Func 0 0xc004dd9940 <nil>}
TYPE runtime.G:
  /home/craig/github/golang/go/src/runtime/export_test.go => &{<nil> G 11382266 g <nil>}
TYPE runtime.LFNode:
  /home/craig/github/golang/go/src/runtime/export_test.go => &{<nil> LFNode 0 0xc003bab460 <nil>}
TYPE runtime.MemProfileRecord:
  /home/craig/github/golang/go/src/runtime/mprof.go => &{<nil> MemProfileRecord 0 0xc004e41b40 <nil>}
TYPE runtime.MemStats:
  /home/craig/github/golang/go/src/runtime/mstats.go => &{<nil> MemStats 0 0xc003ecffe0 <nil>}
TYPE runtime.ProfBuf:
  /home/craig/github/golang/go/src/runtime/export_test.go => &{<nil> ProfBuf 0 profBuf <nil>}
TYPE runtime.RWMutex:
  /home/craig/github/golang/go/src/runtime/export_test.go => &{<nil> RWMutex 0 0xc003bccf20 <nil>}
TYPE runtime.StackRecord:
  /home/craig/github/golang/go/src/runtime/mprof.go => &{<nil> StackRecord 0 0xc004e41220 <nil>}
TYPE runtime.TypeAssertionError:
  /home/craig/github/golang/go/src/runtime/error.go => &{<nil> TypeAssertionError 0 0xc005588680 <nil>}
TYPE runtime.Uintreg:
  /home/craig/github/golang/go/src/runtime/export_test.go => &{<nil> Uintreg 0 0xc003bc0c80 <nil>}
TYPE runtime._defer:
  /home/craig/github/golang/go/src/runtime/runtime2.go => &{<nil> _defer 0 0xc0056591e0 <nil>}
TYPE runtime._func:
  /home/craig/github/golang/go/src/runtime/runtime2.go => &{<nil> _func 0 0xc005658080 <nil>}
TYPE runtime._panic:
  /home/craig/github/golang/go/src/runtime/runtime2.go => &{<nil> _panic 0 0xc0056596c0 <nil>}
TYPE runtime._type:
  /home/craig/github/golang/go/src/runtime/type.go => &{<nil> _type 0 0xc0043b0760 <nil>}
TYPE runtime._typePair:
  /home/craig/github/golang/go/src/runtime/type.go => &{<nil> _typePair 0 0xc004833140 <nil>}
TYPE runtime_test.BigKey:
  /home/craig/github/golang/go/src/runtime/map_benchmark_test.go => &{<nil> BigKey 0 0xc0046b4990 <nil>}
TYPE runtime_test.BigStruct:
  /home/craig/github/golang/go/src/runtime/gcinfo_test.go => &{<nil> BigStruct 0 0xc0058626a0 <nil>}
TYPE runtime_test.BigVal:
  /home/craig/github/golang/go/src/runtime/map_benchmark_test.go => &{<nil> BigVal 0 0xc0046b5050 <nil>}
TYPE runtime_test.BytesKey:
  /home/craig/github/golang/go/src/runtime/hash_test.go => &{<nil> BytesKey 0 0xc00579db20 <nil>}
TYPE runtime_test.ComplexAlgKey:
  /home/craig/github/golang/go/src/runtime/map_benchmark_test.go => &{<nil> ComplexAlgKey 0 0xc004738c80 <nil>}
TYPE runtime_test.EfaceKey:
  /home/craig/github/golang/go/src/runtime/hash_test.go => &{<nil> EfaceKey 0 0xc0057a5940 <nil>}
TYPE runtime_test.FloatInt:
  /home/craig/github/golang/go/src/runtime/map_test.go => &{<nil> FloatInt 0 0xc003dd4820 <nil>}
TYPE runtime_test.HashSet:
  /home/craig/github/golang/go/src/runtime/hash_test.go => &{<nil> HashSet 0 0xc005784a80 <nil>}
TYPE runtime_test.I:
  /home/craig/github/golang/go/src/runtime/stack_test.go => &{<nil> I 0 0xc003b5bb40 <nil>}
TYPE runtime_test.I1:
  /home/craig/github/golang/go/src/runtime/iface_test.go => &{<nil> I1 0 0xc003b7fee0 <nil>}
TYPE runtime_test.I2:
  /home/craig/github/golang/go/src/runtime/iface_test.go => &{<nil> I2 0 0xc003b7ffc0 <nil>}
TYPE runtime_test.Iface:
  /home/craig/github/golang/go/src/runtime/gcinfo_test.go => &{<nil> Iface 0 0xc005863460 <nil>}
TYPE runtime_test.IfaceImpl:
  /home/craig/github/golang/go/src/runtime/gcinfo_test.go => &{<nil> IfaceImpl 0 int <nil>}
TYPE runtime_test.IfaceKey:
  /home/craig/github/golang/go/src/runtime/hash_test.go => &{<nil> IfaceKey 0 0xc0057aa3c0 <nil>}
TYPE runtime_test.Int32Key:
  /home/craig/github/golang/go/src/runtime/hash_test.go => &{<nil> Int32Key 0 0xc0057a46c0 <nil>}
TYPE runtime_test.Int64Key:
  /home/craig/github/golang/go/src/runtime/hash_test.go => &{<nil> Int64Key 0 0xc0057a4fa0 <nil>}
TYPE runtime_test.Key:
  /home/craig/github/golang/go/src/runtime/hash_test.go => &{<nil> Key 0 0xc00579daa0 <nil>}
TYPE runtime_test.LargeStruct:
  /home/craig/github/golang/go/src/runtime/malloc_test.go => &{<nil> LargeStruct 0 0xc005574420 <nil>}
TYPE runtime_test.Matrix:
  /home/craig/github/golang/go/src/runtime/proc_test.go => &{<nil> Matrix 0 0xc003dadf50 <nil>}
TYPE runtime_test.MyNode:
  /home/craig/github/golang/go/src/runtime/lfstack_test.go => &{<nil> MyNode 0 0xc0054f8ec0 <nil>}
TYPE runtime_test.Node1:
  /home/craig/github/golang/go/src/runtime/gc_test.go => &{<nil> Node1 0 0xc0026d3c00 <nil>}
TYPE runtime_test.Node1024:
  /home/craig/github/golang/go/src/runtime/gc_test.go => &{<nil> Node1024 0 0xc0026de000 <nil>}
TYPE runtime_test.Node124:
  /home/craig/github/golang/go/src/runtime/gc_test.go => &{<nil> Node124 0 0xc0026d6e00 <nil>}
TYPE runtime_test.Node126:
  /home/craig/github/golang/go/src/runtime/gc_test.go => &{<nil> Node126 0 0xc0026d7280 <nil>}
TYPE runtime_test.Node128:
  /home/craig/github/golang/go/src/runtime/gc_test.go => &{<nil> Node128 0 0xc0026d7700 <nil>}
TYPE runtime_test.Node130:
  /home/craig/github/golang/go/src/runtime/gc_test.go => &{<nil> Node130 0 0xc0026d7b80 <nil>}
TYPE runtime_test.Node64:
  /home/craig/github/golang/go/src/runtime/gc_test.go => &{<nil> Node64 0 0xc0026d6500 <nil>}
TYPE runtime_test.Node64Dead:
  /home/craig/github/golang/go/src/runtime/gc_test.go => &{<nil> Node64Dead 0 0xc0026d6980 <nil>}
TYPE runtime_test.Node8:
  /home/craig/github/golang/go/src/runtime/gc_test.go => &{<nil> Node8 0 0xc0026d6080 <nil>}
TYPE runtime_test.Object1:
  /home/craig/github/golang/go/src/runtime/mfinal_test.go => &{<nil> Object1 0 0xc003d11100 <nil>}
TYPE runtime_test.Object2:
  /home/craig/github/golang/go/src/runtime/mfinal_test.go => &{<nil> Object2 0 0xc003d11180 <nil>}
TYPE runtime_test.Ptr:
  /home/craig/github/golang/go/src/runtime/gcinfo_test.go => &{<nil> Ptr 0 0xc00585f9c0 <nil>}
TYPE runtime_test.PtrScalar:
  /home/craig/github/golang/go/src/runtime/gcinfo_test.go => &{<nil> PtrScalar 0 0xc0058622e0 <nil>}
TYPE runtime_test.ScalarPtr:
  /home/craig/github/golang/go/src/runtime/gcinfo_test.go => &{<nil> ScalarPtr 0 0xc00585fda0 <nil>}
TYPE runtime_test.T16:
  /home/craig/github/golang/go/src/runtime/iface_test.go => &{<nil> T16 0 uint16 <nil>}
TYPE runtime_test.T32:
  /home/craig/github/golang/go/src/runtime/iface_test.go => &{<nil> T32 0 uint32 <nil>}
TYPE runtime_test.T64:
  /home/craig/github/golang/go/src/runtime/iface_test.go => &{<nil> T64 0 uint64 <nil>}
TYPE runtime_test.T8:
  /home/craig/github/golang/go/src/runtime/iface_test.go => &{<nil> T8 0 uint8 <nil>}
TYPE runtime_test.TL:
  /home/craig/github/golang/go/src/runtime/iface_test.go => &{<nil> TL 0 0xc003b80660 <nil>}
TYPE runtime_test.TM:
  /home/craig/github/golang/go/src/runtime/iface_test.go => &{<nil> TM 0 uintptr <nil>}
TYPE runtime_test.TS:
  /home/craig/github/golang/go/src/runtime/iface_test.go => &{<nil> TS 0 uint16 <nil>}
TYPE runtime_test.Tint:
  /home/craig/github/golang/go/src/runtime/mfinal_test.go => &{<nil> Tint 0 int 0xc003cef5c0}
TYPE runtime_test.Tinter:
  /home/craig/github/golang/go/src/runtime/mfinal_test.go => &{<nil> Tinter 0 0xc003cef720 <nil>}
TYPE runtime_test.Tintptr:
  /home/craig/github/golang/go/src/runtime/mfinal_test.go => &{<nil> Tintptr 0 0xc003cef4e0 0xc003cef520}
TYPE runtime_test.Tslice:
  /home/craig/github/golang/go/src/runtime/iface_test.go => &{<nil> Tslice 0 0xc003b80e70 <nil>}
TYPE runtime_test.Tstr:
  /home/craig/github/golang/go/src/runtime/iface_test.go => &{<nil> Tstr 0 string <nil>}
TYPE scanner.Error:
  /home/craig/github/golang/go/src/go/scanner/errors.go => &{<nil> Error 0 0xc002344ec0 <nil>}
TYPE scanner.ErrorHandler:
  /home/craig/github/golang/go/src/go/scanner/scanner.go => &{<nil> ErrorHandler 0 0xc002351fa0 <nil>}
TYPE scanner.ErrorList:
  /home/craig/github/golang/go/src/go/scanner/errors.go => &{<nil> ErrorList 0 0xc00233b140 <nil>}
TYPE scanner.Mode:
  /home/craig/github/golang/go/src/go/scanner/scanner.go => &{<nil> Mode 0 uint <nil>}
TYPE scanner.Position:
  /home/craig/github/golang/go/src/text/scanner/scanner.go => &{<nil> Position 0 0xc0043e4c80 <nil>}
TYPE scanner.Scanner:
  /home/craig/github/golang/go/src/text/scanner/scanner.go => &{<nil> Scanner 0 0xc004375e40 <nil>}
TYPE scanner.StringReader:
  /home/craig/github/golang/go/src/text/scanner/scanner_test.go => &{<nil> StringReader 0 0xc0040fecc0 <nil>}
TYPE smtp.Auth:
  /home/craig/github/golang/go/src/net/smtp/auth.go => &{<nil> Auth 0 0xc004906ee0 <nil>}
TYPE smtp.Client:
  /home/craig/github/golang/go/src/net/smtp/smtp.go => &{<nil> Client 0 0xc004911a40 <nil>}
TYPE smtp.ServerInfo:
  /home/craig/github/golang/go/src/net/smtp/auth.go => &{<nil> ServerInfo 0 0xc004907120 <nil>}
TYPE sort.Float64Slice:
  /home/craig/github/golang/go/src/sort/sort.go => &{<nil> Float64Slice 0 0xc005bed6b0 <nil>}
TYPE sort.IntSlice:
  /home/craig/github/golang/go/src/sort/sort.go => &{<nil> IntSlice 0 0xc005bed020 <nil>}
TYPE sort.Interface:
  /home/craig/github/golang/go/src/sort/sort.go => &{<nil> Interface 0 0xc005bd7de0 <nil>}
TYPE sort.StringSlice:
  /home/craig/github/golang/go/src/sort/sort.go => &{<nil> StringSlice 0 0xc005bedf50 <nil>}
TYPE sort_test.By:
  /home/craig/github/golang/go/src/sort/example_keys_test.go => &{<nil> By 0 0xc005c10420 <nil>}
TYPE sort_test.ByAge:
  /home/craig/github/golang/go/src/sort/example_interface_test.go => &{<nil> ByAge 0 0xc005c30f60 <nil>}
TYPE sort_test.ByName:
  /home/craig/github/golang/go/src/sort/example_wrapper_test.go => &{<nil> ByName 0 0xc005c39ec0 <nil>}
TYPE sort_test.ByWeight:
  /home/craig/github/golang/go/src/sort/example_wrapper_test.go => &{<nil> ByWeight 0 0xc005c46260 <nil>}
TYPE sort_test.Change:
  /home/craig/github/golang/go/src/sort/example_multi_test.go => &{<nil> Change 0 0xc005c2a340 <nil>}
TYPE sort_test.Grams:
  /home/craig/github/golang/go/src/sort/example_wrapper_test.go => &{<nil> Grams 0 int <nil>}
TYPE sort_test.Organ:
  /home/craig/github/golang/go/src/sort/example_wrapper_test.go => &{<nil> Organ 0 0xc005c39a60 <nil>}
TYPE sort_test.Organs:
  /home/craig/github/golang/go/src/sort/example_wrapper_test.go => &{<nil> Organs 0 0xc005c31a40 <nil>}
TYPE sort_test.Person:
  /home/craig/github/golang/go/src/sort/example_interface_test.go => &{<nil> Person 0 0xc005c38440 <nil>}
TYPE sort_test.Planet:
  /home/craig/github/golang/go/src/sort/example_keys_test.go => &{<nil> Planet 0 0xc005c102e0 <nil>}
TYPE sql.ColumnType:
  /home/craig/github/golang/go/src/database/sql/sql.go => &{<nil> ColumnType 0 0xc000f1fe20 <nil>}
TYPE sql.Conn:
  /home/craig/github/golang/go/src/database/sql/sql.go => &{<nil> Conn 0 0xc00117d260 <nil>}
TYPE sql.DB:
  /home/craig/github/golang/go/src/database/sql/sql.go => &{<nil> DB 0 0xc0010bf1a0 <nil>}
TYPE sql.DBStats:
  /home/craig/github/golang/go/src/database/sql/sql.go => &{<nil> DBStats 0 0xc000b5bd80 <nil>}
TYPE sql.Dummy:
  /home/craig/github/golang/go/src/database/sql/fakedb_test.go => &{<nil> Dummy 0 0xc001223540 <nil>}
TYPE sql.IsolationLevel:
  /home/craig/github/golang/go/src/database/sql/sql.go => &{<nil> IsolationLevel 0 int <nil>}
TYPE sql.NamedArg:
  /home/craig/github/golang/go/src/database/sql/sql.go => &{<nil> NamedArg 0 0xc00108e540 <nil>}
TYPE sql.NullBool:
  /home/craig/github/golang/go/src/database/sql/sql.go => &{<nil> NullBool 0 0xc0010b53a0 <nil>}
TYPE sql.NullFloat64:
  /home/craig/github/golang/go/src/database/sql/sql.go => &{<nil> NullFloat64 0 0xc0010b4a00 <nil>}
TYPE sql.NullInt64:
  /home/craig/github/golang/go/src/database/sql/sql.go => &{<nil> NullInt64 0 0xc0010b4060 <nil>}
TYPE sql.NullString:
  /home/craig/github/golang/go/src/database/sql/sql.go => &{<nil> NullString 0 0xc00108f6c0 <nil>}
TYPE sql.Out:
  /home/craig/github/golang/go/src/database/sql/sql.go => &{<nil> Out 0 0xc0010be2a0 <nil>}
TYPE sql.RawBytes:
  /home/craig/github/golang/go/src/database/sql/sql.go => &{<nil> RawBytes 0 0xc000b21590 <nil>}
TYPE sql.Result:
  /home/craig/github/golang/go/src/database/sql/sql.go => &{<nil> Result 0 0xc0011bf120 <nil>}
TYPE sql.Row:
  /home/craig/github/golang/go/src/database/sql/sql.go => &{<nil> Row 0 0xc0011be160 <nil>}
TYPE sql.Rows:
  /home/craig/github/golang/go/src/database/sql/sql.go => &{<nil> Rows 0 0xc000f09fe0 <nil>}
TYPE sql.Scanner:
  /home/craig/github/golang/go/src/database/sql/sql.go => &{<nil> Scanner 0 0xc0010b5f40 <nil>}
TYPE sql.Stmt:
  /home/craig/github/golang/go/src/database/sql/sql.go => &{<nil> Stmt 0 0xc000bd7a40 <nil>}
TYPE sql.Tx:
  /home/craig/github/golang/go/src/database/sql/sql.go => &{<nil> Tx 0 0xc0005250e0 <nil>}
TYPE sql.TxOptions:
  /home/craig/github/golang/go/src/database/sql/sql.go => &{<nil> TxOptions 0 0xc00108f300 <nil>}
TYPE sql.Valuer_P:
  /home/craig/github/golang/go/src/database/sql/convert_test.go => &{<nil> Valuer_P 0 string <nil>}
TYPE sql.Valuer_V:
  /home/craig/github/golang/go/src/database/sql/convert_test.go => &{<nil> Valuer_V 0 string <nil>}
TYPE strconv.NumError:
  /home/craig/github/golang/go/src/strconv/atoi.go => &{<nil> NumError 0 0xc005e3fca0 <nil>}
TYPE strings.Builder:
  /home/craig/github/golang/go/src/strings/builder.go => &{<nil> Builder 0 0xc0060e80e0 <nil>}
TYPE strings.Reader:
  /home/craig/github/golang/go/src/strings/reader.go => &{<nil> Reader 0 0xc005ef2740 <nil>}
TYPE strings.Replacer:
  /home/craig/github/golang/go/src/strings/replace.go => &{<nil> Replacer 0 0xc005f2d060 <nil>}
TYPE strings_test.FieldsTest:
  /home/craig/github/golang/go/src/strings/strings_test.go => &{<nil> FieldsTest 0 0xc005faf160 <nil>}
TYPE strings_test.IndexTest:
  /home/craig/github/golang/go/src/strings/strings_test.go => &{<nil> IndexTest 0 0xc005f84800 <nil>}
TYPE strings_test.SplitTest:
  /home/craig/github/golang/go/src/strings/strings_test.go => &{<nil> SplitTest 0 0xc005fa30a0 <nil>}
TYPE strings_test.StringTest:
  /home/craig/github/golang/go/src/strings/strings_test.go => &{<nil> StringTest 0 0xc005fb4ec0 <nil>}
TYPE subtle.TestConstantTimeByteEqStruct:
  /home/craig/github/golang/go/src/crypto/subtle/constant_time_test.go => &{<nil> TestConstantTimeByteEqStruct 0 0xc000a60660 <nil>}
TYPE subtle.TestConstantTimeCompareStruct:
  /home/craig/github/golang/go/src/crypto/subtle/constant_time_test.go => &{<nil> TestConstantTimeCompareStruct 0 0xc000ac3a20 <nil>}
TYPE suffixarray.Index:
  /home/craig/github/golang/go/src/index/suffixarray/suffixarray.go => &{<nil> Index 0 0xc0021ea020 <nil>}
TYPE sync.Cond:
  /home/craig/github/golang/go/src/sync/cond.go => &{<nil> Cond 0 0xc0061c6fa0 <nil>}
TYPE sync.Locker:
  /home/craig/github/golang/go/src/sync/mutex.go => &{<nil> Locker 0 0xc006238380 <nil>}
TYPE sync.Map:
  /home/craig/github/golang/go/src/sync/map.go => &{<nil> Map 0 0xc006161b40 <nil>}
TYPE sync.Mutex:
  /home/craig/github/golang/go/src/sync/mutex.go => &{<nil> Mutex 0 0xc006238280 <nil>}
TYPE sync.Once:
  /home/craig/github/golang/go/src/sync/once.go => &{<nil> Once 0 0xc00621e260 <nil>}
TYPE sync.Pool:
  /home/craig/github/golang/go/src/sync/pool.go => &{<nil> Pool 0 0xc00621f3a0 <nil>}
TYPE sync.RWMutex:
  /home/craig/github/golang/go/src/sync/rwmutex.go => &{<nil> RWMutex 0 0xc006120da0 <nil>}
TYPE sync.WaitGroup:
  /home/craig/github/golang/go/src/sync/waitgroup.go => &{<nil> WaitGroup 0 0xc00623fa40 <nil>}
TYPE sync_test.DeepCopyMap:
  /home/craig/github/golang/go/src/sync/map_reference_test.go => &{<nil> DeepCopyMap 0 0xc0061f6000 <nil>}
TYPE sync_test.RWMutexMap:
  /home/craig/github/golang/go/src/sync/map_reference_test.go => &{<nil> RWMutexMap 0 0xc0061f23e0 <nil>}
TYPE syntax.EmptyOp:
  /home/craig/github/golang/go/src/regexp/syntax/prog.go => &{<nil> EmptyOp 0 uint8 <nil>}
TYPE syntax.Error:
  /home/craig/github/golang/go/src/regexp/syntax/parse.go => &{<nil> Error 0 0xc002307980 <nil>}
TYPE syntax.ErrorCode:
  /home/craig/github/golang/go/src/regexp/syntax/parse.go => &{<nil> ErrorCode 0 string <nil>}
TYPE syntax.Flags:
  /home/craig/github/golang/go/src/regexp/syntax/parse.go => &{<nil> Flags 0 uint16 <nil>}
TYPE syntax.Inst:
  /home/craig/github/golang/go/src/regexp/syntax/prog.go => &{<nil> Inst 0 0xc00213cf40 <nil>}
TYPE syntax.InstOp:
  /home/craig/github/golang/go/src/regexp/syntax/prog.go => &{<nil> InstOp 0 uint8 <nil>}
TYPE syntax.Op:
  /home/craig/github/golang/go/src/regexp/syntax/regexp.go => &{<nil> Op 0 uint8 <nil>}
TYPE syntax.Prog:
  /home/craig/github/golang/go/src/regexp/syntax/prog.go => &{<nil> Prog 0 0xc002ac3aa0 <nil>}
TYPE syntax.Regexp:
  /home/craig/github/golang/go/src/regexp/syntax/regexp.go => &{<nil> Regexp 0 0xc00325ff40 <nil>}
TYPE syscall.Cmsghdr:
  /home/craig/github/golang/go/src/syscall/ztypes_linux_amd64.go => &{<nil> Cmsghdr 0 0xc0064de640 <nil>}
TYPE syscall.Conn:
  /home/craig/github/golang/go/src/syscall/net.go => &{<nil> Conn 0 0xc0063bfc20 <nil>}
TYPE syscall.Credential:
  /home/craig/github/golang/go/src/syscall/exec_unix.go => &{<nil> Credential 0 0xc0067bc280 <nil>}
TYPE syscall.Dirent:
  /home/craig/github/golang/go/src/syscall/ztypes_linux_amd64.go => &{<nil> Dirent 0 0xc0064d6e40 <nil>}
TYPE syscall.EpollEvent:
  /home/craig/github/golang/go/src/syscall/ztypes_linux_amd64.go => &{<nil> EpollEvent 0 0xc0064fb3a0 <nil>}
TYPE syscall.Errno:
  /home/craig/github/golang/go/src/syscall/syscall_unix.go => &{<nil> Errno 0 uintptr <nil>}
TYPE syscall.FdSet:
  /home/craig/github/golang/go/src/syscall/ztypes_linux_amd64.go => &{<nil> FdSet 0 0xc0064fa8a0 <nil>}
TYPE syscall.Flock_t:
  /home/craig/github/golang/go/src/syscall/ztypes_linux_amd64.go => &{<nil> Flock_t 0 0xc0064d7140 <nil>}
TYPE syscall.Fsid:
  /home/craig/github/golang/go/src/syscall/ztypes_linux_amd64.go => &{<nil> Fsid 0 0xc0064d6ee0 <nil>}
TYPE syscall.ICMPv6Filter:
  /home/craig/github/golang/go/src/syscall/ztypes_linux_amd64.go => &{<nil> ICMPv6Filter 0 0xc0064deaa0 <nil>}
TYPE syscall.IPMreq:
  /home/craig/github/golang/go/src/syscall/ztypes_linux_amd64.go => &{<nil> IPMreq 0 0xc0064d7ee0 <nil>}
TYPE syscall.IPMreqn:
  /home/craig/github/golang/go/src/syscall/ztypes_linux_amd64.go => &{<nil> IPMreqn 0 0xc0064de0c0 <nil>}
TYPE syscall.IPv6MTUInfo:
  /home/craig/github/golang/go/src/syscall/ztypes_linux_amd64.go => &{<nil> IPv6MTUInfo 0 0xc0064dea00 <nil>}
TYPE syscall.IPv6Mreq:
  /home/craig/github/golang/go/src/syscall/ztypes_linux_amd64.go => &{<nil> IPv6Mreq 0 0xc0064de1e0 <nil>}
TYPE syscall.IfAddrmsg:
  /home/craig/github/golang/go/src/syscall/ztypes_linux_amd64.go => &{<nil> IfAddrmsg 0 0xc0064ef780 <nil>}
TYPE syscall.IfInfomsg:
  /home/craig/github/golang/go/src/syscall/ztypes_linux_amd64.go => &{<nil> IfInfomsg 0 0xc0064ef5e0 <nil>}
TYPE syscall.Inet4Pktinfo:
  /home/craig/github/golang/go/src/syscall/ztypes_linux_amd64.go => &{<nil> Inet4Pktinfo 0 0xc0064de820 <nil>}
TYPE syscall.Inet6Pktinfo:
  /home/craig/github/golang/go/src/syscall/ztypes_linux_amd64.go => &{<nil> Inet6Pktinfo 0 0xc0064de940 <nil>}
TYPE syscall.InotifyEvent:
  /home/craig/github/golang/go/src/syscall/ztypes_linux_amd64.go => &{<nil> InotifyEvent 0 0xc0064fa0a0 <nil>}
TYPE syscall.Iovec:
  /home/craig/github/golang/go/src/syscall/ztypes_linux_amd64.go => &{<nil> Iovec 0 0xc0064d7d60 <nil>}
TYPE syscall.Linger:
  /home/craig/github/golang/go/src/syscall/ztypes_linux_amd64.go => &{<nil> Linger 0 0xc0064d7c80 <nil>}
TYPE syscall.Msghdr:
  /home/craig/github/golang/go/src/syscall/ztypes_linux_amd64.go => &{<nil> Msghdr 0 0xc0064de520 <nil>}
TYPE syscall.NetlinkMessage:
  /home/craig/github/golang/go/src/syscall/netlink_linux.go => &{<nil> NetlinkMessage 0 0xc0064918e0 <nil>}
TYPE syscall.NetlinkRouteAttr:
  /home/craig/github/golang/go/src/syscall/netlink_linux.go => &{<nil> NetlinkRouteAttr 0 0xc0064926e0 <nil>}
TYPE syscall.NetlinkRouteRequest:
  /home/craig/github/golang/go/src/syscall/netlink_linux.go => &{<nil> NetlinkRouteRequest 0 0xc006480ca0 <nil>}
TYPE syscall.NlAttr:
  /home/craig/github/golang/go/src/syscall/ztypes_linux_amd64.go => &{<nil> NlAttr 0 0xc0064ef340 <nil>}
TYPE syscall.NlMsgerr:
  /home/craig/github/golang/go/src/syscall/ztypes_linux_amd64.go => &{<nil> NlMsgerr 0 0xc0064ef200 <nil>}
TYPE syscall.NlMsghdr:
  /home/craig/github/golang/go/src/syscall/ztypes_linux_amd64.go => &{<nil> NlMsghdr 0 0xc0064ef140 <nil>}
TYPE syscall.ProcAttr:
  /home/craig/github/golang/go/src/syscall/exec_unix.go => &{<nil> ProcAttr 0 0xc0067bc520 <nil>}
TYPE syscall.PtraceRegs:
  /home/craig/github/golang/go/src/syscall/ztypes_linux_amd64.go => &{<nil> PtraceRegs 0 0xc0064fa800 <nil>}
TYPE syscall.RawConn:
  /home/craig/github/golang/go/src/syscall/net.go => &{<nil> RawConn 0 0xc0063bfaa0 <nil>}
TYPE syscall.RawSockaddr:
  /home/craig/github/golang/go/src/syscall/ztypes_linux_amd64.go => &{<nil> RawSockaddr 0 0xc0064d7aa0 <nil>}
TYPE syscall.RawSockaddrAny:
  /home/craig/github/golang/go/src/syscall/ztypes_linux_amd64.go => &{<nil> RawSockaddrAny 0 0xc0064d7b80 <nil>}
TYPE syscall.RawSockaddrInet4:
  /home/craig/github/golang/go/src/syscall/ztypes_linux_amd64.go => &{<nil> RawSockaddrInet4 0 0xc0064d7340 <nil>}
TYPE syscall.RawSockaddrInet6:
  /home/craig/github/golang/go/src/syscall/ztypes_linux_amd64.go => &{<nil> RawSockaddrInet6 0 0xc0064d7540 <nil>}
TYPE syscall.RawSockaddrLinklayer:
  /home/craig/github/golang/go/src/syscall/ztypes_linux_amd64.go => &{<nil> RawSockaddrLinklayer 0 0xc0064d7860 <nil>}
TYPE syscall.RawSockaddrNetlink:
  /home/craig/github/golang/go/src/syscall/ztypes_linux_amd64.go => &{<nil> RawSockaddrNetlink 0 0xc0064d79c0 <nil>}
TYPE syscall.RawSockaddrUnix:
  /home/craig/github/golang/go/src/syscall/ztypes_linux_amd64.go => &{<nil> RawSockaddrUnix 0 0xc0064d7620 <nil>}
TYPE syscall.Rlimit:
  /home/craig/github/golang/go/src/syscall/ztypes_linux_amd64.go => &{<nil> Rlimit 0 0xc0064d6420 <nil>}
TYPE syscall.RtAttr:
  /home/craig/github/golang/go/src/syscall/ztypes_linux_amd64.go => &{<nil> RtAttr 0 0xc0064ef400 <nil>}
TYPE syscall.RtGenmsg:
  /home/craig/github/golang/go/src/syscall/ztypes_linux_amd64.go => &{<nil> RtGenmsg 0 0xc0064ef280 <nil>}
TYPE syscall.RtMsg:
  /home/craig/github/golang/go/src/syscall/ztypes_linux_amd64.go => &{<nil> RtMsg 0 0xc0064efa20 <nil>}
TYPE syscall.RtNexthop:
  /home/craig/github/golang/go/src/syscall/ztypes_linux_amd64.go => &{<nil> RtNexthop 0 0xc0064efb80 <nil>}
TYPE syscall.Rusage:
  /home/craig/github/golang/go/src/syscall/ztypes_linux_amd64.go => &{<nil> Rusage 0 0xc0064d6360 <nil>}
TYPE syscall.Signal:
  /home/craig/github/golang/go/src/syscall/syscall_unix.go => &{<nil> Signal 0 int <nil>}
TYPE syscall.SockFilter:
  /home/craig/github/golang/go/src/syscall/ztypes_linux_amd64.go => &{<nil> SockFilter 0 0xc0064efd80 <nil>}
TYPE syscall.SockFprog:
  /home/craig/github/golang/go/src/syscall/ztypes_linux_amd64.go => &{<nil> SockFprog 0 0xc0064efee0 <nil>}
TYPE syscall.Sockaddr:
  /home/craig/github/golang/go/src/syscall/syscall_unix.go => &{<nil> Sockaddr 0 0xc0067e0de0 <nil>}
TYPE syscall.SockaddrInet4:
  /home/craig/github/golang/go/src/syscall/syscall_unix.go => &{<nil> SockaddrInet4 0 0xc0067e0f20 <nil>}
TYPE syscall.SockaddrInet6:
  /home/craig/github/golang/go/src/syscall/syscall_unix.go => &{<nil> SockaddrInet6 0 0xc0067e10a0 <nil>}
TYPE syscall.SockaddrLinklayer:
  /home/craig/github/golang/go/src/syscall/syscall_linux.go => &{<nil> SockaddrLinklayer 0 0xc006426080 <nil>}
TYPE syscall.SockaddrNetlink:
  /home/craig/github/golang/go/src/syscall/syscall_linux.go => &{<nil> SockaddrNetlink 0 0xc006426f00 <nil>}
TYPE syscall.SockaddrUnix:
  /home/craig/github/golang/go/src/syscall/syscall_unix.go => &{<nil> SockaddrUnix 0 0xc0067e1160 <nil>}
TYPE syscall.SocketControlMessage:
  /home/craig/github/golang/go/src/syscall/sockcmsg_unix.go => &{<nil> SocketControlMessage 0 0xc006577400 <nil>}
TYPE syscall.Stat_t:
  /home/craig/github/golang/go/src/syscall/ztypes_linux_amd64.go => &{<nil> Stat_t 0 0xc0064d68a0 <nil>}
TYPE syscall.Statfs_t:
  /home/craig/github/golang/go/src/syscall/ztypes_linux_amd64.go => &{<nil> Statfs_t 0 0xc0064d6c20 <nil>}
TYPE syscall.SysProcAttr:
  /home/craig/github/golang/go/src/syscall/exec_linux.go => &{<nil> SysProcAttr 0 0xc006766ec0 <nil>}
TYPE syscall.SysProcIDMap:
  /home/craig/github/golang/go/src/syscall/exec_linux.go => &{<nil> SysProcIDMap 0 0xc006766520 <nil>}
TYPE syscall.Sysinfo_t:
  /home/craig/github/golang/go/src/syscall/ztypes_linux_amd64.go => &{<nil> Sysinfo_t 0 0xc0064fad80 <nil>}
TYPE syscall.TCPInfo:
  /home/craig/github/golang/go/src/syscall/ztypes_linux_amd64.go => &{<nil> TCPInfo 0 0xc0064df400 <nil>}
TYPE syscall.Termios:
  /home/craig/github/golang/go/src/syscall/ztypes_linux_amd64.go => &{<nil> Termios 0 0xc0064fb7c0 <nil>}
TYPE syscall.Time_t:
  /home/craig/github/golang/go/src/syscall/ztypes_linux_amd64.go => &{<nil> Time_t 0 int64 <nil>}
TYPE syscall.Timespec:
  /home/craig/github/golang/go/src/syscall/ztypes_linux_amd64.go => &{<nil> Timespec 0 0xc0064c9500 <nil>}
TYPE syscall.Timeval:
  /home/craig/github/golang/go/src/syscall/ztypes_linux_amd64.go => &{<nil> Timeval 0 0xc0064c95c0 <nil>}
TYPE syscall.Timex:
  /home/craig/github/golang/go/src/syscall/ztypes_linux_amd64.go => &{<nil> Timex 0 0xc0064c9ca0 <nil>}
TYPE syscall.Tms:
  /home/craig/github/golang/go/src/syscall/ztypes_linux_amd64.go => &{<nil> Tms 0 0xc0064c9e40 <nil>}
TYPE syscall.Ucred:
  /home/craig/github/golang/go/src/syscall/ztypes_linux_amd64.go => &{<nil> Ucred 0 0xc0064debc0 <nil>}
TYPE syscall.Ustat_t:
  /home/craig/github/golang/go/src/syscall/ztypes_linux_amd64.go => &{<nil> Ustat_t 0 0xc0064fb280 <nil>}
TYPE syscall.Utimbuf:
  /home/craig/github/golang/go/src/syscall/ztypes_linux_amd64.go => &{<nil> Utimbuf 0 0xc0064c9f00 <nil>}
TYPE syscall.Utsname:
  /home/craig/github/golang/go/src/syscall/ztypes_linux_amd64.go => &{<nil> Utsname 0 0xc0064fb020 <nil>}
TYPE syscall.WaitStatus:
  /home/craig/github/golang/go/src/syscall/syscall_linux.go => &{<nil> WaitStatus 0 uint32 <nil>}
TYPE syscall._C_int:
  /home/craig/github/golang/go/src/syscall/ztypes_linux_amd64.go => &{<nil> _C_int 0 int32 <nil>}
TYPE syscall._C_long:
  /home/craig/github/golang/go/src/syscall/ztypes_linux_amd64.go => &{<nil> _C_long 0 int64 <nil>}
TYPE syscall._C_long_long:
  /home/craig/github/golang/go/src/syscall/ztypes_linux_amd64.go => &{<nil> _C_long_long 0 int64 <nil>}
TYPE syscall._C_short:
  /home/craig/github/golang/go/src/syscall/ztypes_linux_amd64.go => &{<nil> _C_short 0 int16 <nil>}
TYPE syscall._Gid_t:
  /home/craig/github/golang/go/src/syscall/ztypes_linux_amd64.go => &{<nil> _Gid_t 0 uint32 <nil>}
TYPE syscall._Socklen:
  /home/craig/github/golang/go/src/syscall/ztypes_linux_amd64.go => &{<nil> _Socklen 0 uint32 <nil>}
TYPE syslog.Priority:
  /home/craig/github/golang/go/src/log/syslog/syslog.go => &{<nil> Priority 0 int <nil>}
TYPE syslog.Writer:
  /home/craig/github/golang/go/src/log/syslog/syslog.go => &{<nil> Writer 0 0xc0026fa3c0 <nil>}
TYPE tabwriter.Writer:
  /home/craig/github/golang/go/src/text/tabwriter/tabwriter.go => &{<nil> Writer 0 0xc0030f3da0 <nil>}
TYPE tar.Format:
  /home/craig/github/golang/go/src/archive/tar/format.go => &{<nil> Format 0 int <nil>}
TYPE tar.Header:
  /home/craig/github/golang/go/src/archive/tar/common.go => &{<nil> Header 0 0xc00027f5a0 <nil>}
TYPE tar.Reader:
  /home/craig/github/golang/go/src/archive/tar/reader.go => &{<nil> Reader 0 0xc00018a680 <nil>}
TYPE tar.Writer:
  /home/craig/github/golang/go/src/archive/tar/writer.go => &{<nil> Writer 0 0xc0002fc540 <nil>}
TYPE template.CSS:
  /home/craig/github/golang/go/src/html/template/content.go => &{0xc001c900a0 CSS 0 string <nil>}
TYPE template.Error:
  /home/craig/github/golang/go/src/html/template/error.go => &{<nil> Error 0 0xc001af6a00 <nil>}
TYPE template.ErrorCode:
  /home/craig/github/golang/go/src/html/template/error.go => &{<nil> ErrorCode 0 int <nil>}
TYPE template.ErrorWriter:
  /home/craig/github/golang/go/src/text/template/exec_test.go => &{<nil> ErrorWriter 0 int <nil>}
TYPE template.ExecError:
  /home/craig/github/golang/go/src/text/template/exec.go => &{<nil> ExecError 0 0xc0028ccf20 <nil>}
TYPE template.FuncMap:
  /home/craig/github/golang/go/src/text/template/funcs.go => &{<nil> FuncMap 0 0xc00442faa0 <nil>}
TYPE template.HTML:
  /home/craig/github/golang/go/src/html/template/content.go => &{0xc001c90240 HTML 0 string <nil>}
TYPE template.HTMLAttr:
  /home/craig/github/golang/go/src/html/template/content.go => &{0xc001c90380 HTMLAttr 0 string <nil>}
TYPE template.I:
  /home/craig/github/golang/go/src/text/template/exec_test.go => &{<nil> I 0 0xc002f49840 <nil>}
TYPE template.Issue7379:
  /home/craig/github/golang/go/src/html/template/escape_test.go => &{<nil> Issue7379 0 int <nil>}
TYPE template.JS:
  /home/craig/github/golang/go/src/html/template/content.go => &{0xc001c90640 JS 0 string <nil>}
TYPE template.JSStr:
  /home/craig/github/golang/go/src/html/template/content.go => &{0xc001c90820 JSStr 0 string <nil>}
TYPE template.S:
  /home/craig/github/golang/go/src/text/template/exec_test.go => &{<nil> S 0 0xc004300b10 <nil>}
TYPE template.Srcset:
  /home/craig/github/golang/go/src/html/template/content.go => &{0xc001c90b00 Srcset 0 string <nil>}
TYPE template.T:
  /home/craig/github/golang/go/src/text/template/exec_test.go => &{<nil> T 0 0xc002c9f680 <nil>}
TYPE template.Template:
  /home/craig/github/golang/go/src/text/template/template.go => &{<nil> Template 0 0xc0044da5e0 <nil>}
TYPE template.Tree:
  /home/craig/github/golang/go/src/text/template/exec_test.go => &{<nil> Tree 0 0xc004976100 <nil>}
TYPE template.U:
  /home/craig/github/golang/go/src/text/template/exec_test.go => &{<nil> U 0 0xc003140580 <nil>}
TYPE template.URL:
  /home/craig/github/golang/go/src/html/template/content.go => &{0xc001c909c0 URL 0 string <nil>}
TYPE template.V:
  /home/craig/github/golang/go/src/text/template/exec_test.go => &{<nil> V 0 0xc003140fa0 <nil>}
TYPE template.W:
  /home/craig/github/golang/go/src/text/template/exec_test.go => &{<nil> W 0 0xc003173d80 <nil>}
TYPE testing.B:
  /home/craig/github/golang/go/src/testing/benchmark.go => &{<nil> B 0 0xc0024315a0 <nil>}
TYPE testing.BenchmarkResult:
  /home/craig/github/golang/go/src/testing/benchmark.go => &{<nil> BenchmarkResult 0 0xc001b16ea0 <nil>}
TYPE testing.Cover:
  /home/craig/github/golang/go/src/testing/cover.go => &{<nil> Cover 0 0xc004b69820 <nil>}
TYPE testing.CoverBlock:
  /home/craig/github/golang/go/src/testing/cover.go => &{<nil> CoverBlock 0 0xc004b69580 <nil>}
TYPE testing.InternalBenchmark:
  /home/craig/github/golang/go/src/testing/benchmark.go => &{<nil> InternalBenchmark 0 0xc000d2f920 <nil>}
TYPE testing.InternalExample:
  /home/craig/github/golang/go/src/testing/example.go => &{<nil> InternalExample 0 0xc00497b060 <nil>}
TYPE testing.InternalTest:
  /home/craig/github/golang/go/src/testing/testing.go => &{<nil> InternalTest 0 0xc004a63420 <nil>}
TYPE testing.M:
  /home/craig/github/golang/go/src/testing/testing.go => &{<nil> M 0 0xc004a15940 <nil>}
TYPE testing.PB:
  /home/craig/github/golang/go/src/testing/benchmark.go => &{<nil> PB 0 0xc001c30620 <nil>}
TYPE testing.T:
  /home/craig/github/golang/go/src/testing/testing.go => &{<nil> T 0 0xc004ae1a40 <nil>}
TYPE testing.TB:
  /home/craig/github/golang/go/src/testing/testing.go => &{<nil> TB 0 0xc004ae0d00 <nil>}
TYPE textproto.Conn:
  /home/craig/github/golang/go/src/net/textproto/textproto.go => &{<nil> Conn 0 0xc004a21f00 <nil>}
TYPE textproto.Error:
  /home/craig/github/golang/go/src/net/textproto/textproto.go => &{<nil> Error 0 0xc004a218a0 <nil>}
TYPE textproto.MIMEHeader:
  /home/craig/github/golang/go/src/net/textproto/header.go => &{<nil> MIMEHeader 0 0xc00494e0c0 <nil>}
TYPE textproto.Pipeline:
  /home/craig/github/golang/go/src/net/textproto/pipeline.go => &{<nil> Pipeline 0 0xc004a11120 <nil>}
TYPE textproto.ProtocolError:
  /home/craig/github/golang/go/src/net/textproto/textproto.go => &{<nil> ProtocolError 0 string <nil>}
TYPE textproto.Reader:
  /home/craig/github/golang/go/src/net/textproto/reader.go => &{<nil> Reader 0 0xc0049555e0 <nil>}
TYPE textproto.Writer:
  /home/craig/github/golang/go/src/net/textproto/writer.go => &{<nil> Writer 0 0xc004a15100 <nil>}
TYPE time.Duration:
  /home/craig/github/golang/go/src/time/time.go => &{<nil> Duration 0 int64 <nil>}
TYPE time.Location:
  /home/craig/github/golang/go/src/time/zoneinfo.go => &{<nil> Location 0 0xc004dccb40 <nil>}
TYPE time.Month:
  /home/craig/github/golang/go/src/time/time.go => &{<nil> Month 0 int <nil>}
TYPE time.ParseError:
  /home/craig/github/golang/go/src/time/format.go => &{<nil> ParseError 0 0xc005d080a0 <nil>}
TYPE time.Ticker:
  /home/craig/github/golang/go/src/time/tick.go => &{<nil> Ticker 0 0xc0053c1a40 <nil>}
TYPE time.Time:
  /home/craig/github/golang/go/src/time/time.go => &{<nil> Time 0 0xc0051d22e0 <nil>}
TYPE time.Timer:
  /home/craig/github/golang/go/src/time/sleep.go => &{<nil> Timer 0 0xc005631960 <nil>}
TYPE time.Weekday:
  /home/craig/github/golang/go/src/time/time.go => &{<nil> Weekday 0 int <nil>}
TYPE time_test.FormatTest:
  /home/craig/github/golang/go/src/time/format_test.go => &{<nil> FormatTest 0 0xc0053e4de0 <nil>}
TYPE time_test.ISOWeekTest:
  /home/craig/github/golang/go/src/time/time_test.go => &{<nil> ISOWeekTest 0 0xc005791e00 <nil>}
TYPE time_test.ParseErrorTest:
  /home/craig/github/golang/go/src/time/format_test.go => &{<nil> ParseErrorTest 0 0xc0054f85c0 <nil>}
TYPE time_test.ParseTest:
  /home/craig/github/golang/go/src/time/format_test.go => &{<nil> ParseTest 0 0xc0053f7580 <nil>}
TYPE time_test.ParseTimeZoneTest:
  /home/craig/github/golang/go/src/time/format_test.go => &{<nil> ParseTimeZoneTest 0 0xc0054abf40 <nil>}
TYPE time_test.SecondsTimeZoneOffsetTest:
  /home/craig/github/golang/go/src/time/format_test.go => &{<nil> SecondsTimeZoneOffsetTest 0 0xc005588e80 <nil>}
TYPE time_test.TimeFormatTest:
  /home/craig/github/golang/go/src/time/format_test.go => &{<nil> TimeFormatTest 0 0xc0053e0940 <nil>}
TYPE time_test.TimeTest:
  /home/craig/github/golang/go/src/time/time_test.go => &{<nil> TimeTest 0 0xc005658740 <nil>}
TYPE time_test.YearDayTest:
  /home/craig/github/golang/go/src/time/time_test.go => &{<nil> YearDayTest 0 0xc0057d0fc0 <nil>}
TYPE tls.Certificate:
  /home/craig/github/golang/go/src/crypto/tls/common.go => &{<nil> Certificate 0 0xc000a5bd20 <nil>}
TYPE tls.CertificateRequestInfo:
  /home/craig/github/golang/go/src/crypto/tls/common.go => &{<nil> CertificateRequestInfo 0 0xc000990900 <nil>}
TYPE tls.ClientAuthType:
  /home/craig/github/golang/go/src/crypto/tls/common.go => &{<nil> ClientAuthType 0 int <nil>}
TYPE tls.ClientHelloInfo:
  /home/craig/github/golang/go/src/crypto/tls/common.go => &{<nil> ClientHelloInfo 0 0xc000990680 <nil>}
TYPE tls.ClientSessionCache:
  /home/craig/github/golang/go/src/crypto/tls/common.go => &{<nil> ClientSessionCache 0 0xc00087b880 <nil>}
TYPE tls.ClientSessionState:
  /home/craig/github/golang/go/src/crypto/tls/common.go => &{<nil> ClientSessionState 0 0xc00087b4c0 <nil>}
TYPE tls.Config:
  /home/craig/github/golang/go/src/crypto/tls/common.go => &{<nil> Config 0 0xc0009950c0 <nil>}
TYPE tls.Conn:
  /home/craig/github/golang/go/src/crypto/tls/conn.go => &{<nil> Conn 0 0xc000d16700 <nil>}
TYPE tls.ConnectionState:
  /home/craig/github/golang/go/src/crypto/tls/common.go => &{<nil> ConnectionState 0 0xc00087aae0 <nil>}
TYPE tls.CurveID:
  /home/craig/github/golang/go/src/crypto/tls/common.go => &{<nil> CurveID 0 uint16 <nil>}
TYPE tls.RecordHeaderError:
  /home/craig/github/golang/go/src/crypto/tls/conn.go => &{<nil> RecordHeaderError 0 0xc00018e840 <nil>}
TYPE tls.RenegotiationSupport:
  /home/craig/github/golang/go/src/crypto/tls/common.go => &{<nil> RenegotiationSupport 0 int <nil>}
TYPE tls.SignatureScheme:
  /home/craig/github/golang/go/src/crypto/tls/common.go => &{<nil> SignatureScheme 0 uint16 <nil>}
TYPE token.File:
  /home/craig/github/golang/go/src/go/token/position.go => &{<nil> File 0 0xc002425760 <nil>}
TYPE token.FileSet:
  /home/craig/github/golang/go/src/go/token/position.go => &{<nil> FileSet 0 0xc00243b920 <nil>}
TYPE token.Pos:
  /home/craig/github/golang/go/src/go/token/position.go => &{<nil> Pos 0 int <nil>}
TYPE token.Position:
  /home/craig/github/golang/go/src/go/token/position.go => &{<nil> Position 0 0xc002424420 <nil>}
TYPE token.Token:
  /home/craig/github/golang/go/src/go/token/token.go => &{<nil> Token 0 int <nil>}
TYPE trace.Region:
  /home/craig/github/golang/go/src/runtime/trace/annotation.go => &{<nil> Region 0 0xc005b34540 <nil>}
TYPE trace.Task:
  /home/craig/github/golang/go/src/runtime/trace/annotation.go => &{<nil> Task 0 0xc005b2cbc0 <nil>}
TYPE transform.NopResetter:
  /home/craig/github/golang/go/src/vendor/golang_org/x/text/transform/transform.go => &{<nil> NopResetter 0 0xc005624540 <nil>}
TYPE transform.Reader:
  /home/craig/github/golang/go/src/vendor/golang_org/x/text/transform/transform.go => &{<nil> Reader 0 0xc005624a80 <nil>}
TYPE transform.SpanningTransformer:
  /home/craig/github/golang/go/src/vendor/golang_org/x/text/transform/transform.go => &{<nil> SpanningTransformer 0 0xc0056244a0 <nil>}
TYPE transform.Transformer:
  /home/craig/github/golang/go/src/vendor/golang_org/x/text/transform/transform.go => &{<nil> Transformer 0 0xc005313f00 <nil>}
TYPE transform.Writer:
  /home/craig/github/golang/go/src/vendor/golang_org/x/text/transform/transform.go => &{<nil> Writer 0 0xc005627260 <nil>}
TYPE types.Array:
  /home/craig/github/golang/go/src/go/types/type.go => &{<nil> Array 0 0xc0024ae2a0 <nil>}
TYPE types.Basic:
  /home/craig/github/golang/go/src/go/types/type.go => &{<nil> Basic 0 0xc002481d00 <nil>}
TYPE types.BasicInfo:
  /home/craig/github/golang/go/src/go/types/type.go => &{<nil> BasicInfo 0 int <nil>}
TYPE types.BasicKind:
  /home/craig/github/golang/go/src/go/types/type.go => &{<nil> BasicKind 0 int <nil>}
TYPE types.Builtin:
  /home/craig/github/golang/go/src/go/types/object.go => &{<nil> Builtin 0 0xc002830920 <nil>}
TYPE types.Chan:
  /home/craig/github/golang/go/src/go/types/type.go => &{<nil> Chan 0 0xc0024c54e0 <nil>}
TYPE types.ChanDir:
  /home/craig/github/golang/go/src/go/types/type.go => &{<nil> ChanDir 0 int <nil>}
TYPE types.Checker:
  /home/craig/github/golang/go/src/go/types/check.go => &{<nil> Checker 0 0xc002935600 <nil>}
TYPE types.Config:
  /home/craig/github/golang/go/src/go/types/api.go => &{<nil> Config 0 0xc002559680 <nil>}
TYPE types.Const:
  /home/craig/github/golang/go/src/go/types/object.go => &{<nil> Const 0 0xc002820aa0 <nil>}
TYPE types.Error:
  /home/craig/github/golang/go/src/go/types/api.go => &{<nil> Error 0 0xc002558440 <nil>}
TYPE types.Func:
  /home/craig/github/golang/go/src/go/types/object.go => &{<nil> Func 0 0xc002829720 <nil>}
TYPE types.ImportMode:
  /home/craig/github/golang/go/src/go/types/api.go => &{<nil> ImportMode 0 int <nil>}
TYPE types.Importer:
  /home/craig/github/golang/go/src/go/types/api.go => &{<nil> Importer 0 0xc002558a60 <nil>}
TYPE types.ImporterFrom:
  /home/craig/github/golang/go/src/go/types/api.go => &{<nil> ImporterFrom 0 0xc002558fa0 <nil>}
TYPE types.Info:
  /home/craig/github/golang/go/src/go/types/api.go => &{<nil> Info 0 0xc0025646c0 <nil>}
TYPE types.Initializer:
  /home/craig/github/golang/go/src/go/types/api.go => &{<nil> Initializer 0 0xc00256a5a0 <nil>}
TYPE types.Interface:
  /home/craig/github/golang/go/src/go/types/type.go => &{<nil> Interface 0 0xc0024b7ac0 <nil>}
TYPE types.Label:
  /home/craig/github/golang/go/src/go/types/object.go => &{<nil> Label 0 0xc0028303e0 <nil>}
TYPE types.Map:
  /home/craig/github/golang/go/src/go/types/type.go => &{<nil> Map 0 0xc0024c4ee0 <nil>}
TYPE types.MethodSet:
  /home/craig/github/golang/go/src/go/types/methodset.go => &{<nil> MethodSet 0 0xc002572180 <nil>}
TYPE types.Named:
  /home/craig/github/golang/go/src/go/types/type.go => &{<nil> Named 0 0xc0024c5dc0 <nil>}
TYPE types.Nil:
  /home/craig/github/golang/go/src/go/types/object.go => &{<nil> Nil 0 0xc002830ca0 <nil>}
TYPE types.Object:
  /home/craig/github/golang/go/src/go/types/object.go => &{<nil> Object 0 0xc0028112a0 <nil>}
TYPE types.Package:
  /home/craig/github/golang/go/src/go/types/package.go => &{<nil> Package 0 0xc00271a940 <nil>}
TYPE types.PkgName:
  /home/craig/github/golang/go/src/go/types/object.go => &{<nil> PkgName 0 0xc0028202e0 <nil>}
TYPE types.Pointer:
  /home/craig/github/golang/go/src/go/types/type.go => &{<nil> Pointer 0 0xc0024afa80 <nil>}
TYPE types.Qualifier:
  /home/craig/github/golang/go/src/go/types/typestring.go => &{<nil> Qualifier 0 0xc002728240 <nil>}
TYPE types.Scope:
  /home/craig/github/golang/go/src/go/types/scope.go => &{<nil> Scope 0 0xc002a1c9a0 <nil>}
TYPE types.Selection:
  /home/craig/github/golang/go/src/go/types/selection.go => &{<nil> Selection 0 0xc00296c0e0 <nil>}
TYPE types.SelectionKind:
  /home/craig/github/golang/go/src/go/types/selection.go => &{<nil> SelectionKind 0 int <nil>}
TYPE types.Signature:
  /home/craig/github/golang/go/src/go/types/type.go => &{<nil> Signature 0 0xc0024b6a40 <nil>}
TYPE types.Sizes:
  /home/craig/github/golang/go/src/go/types/sizes.go => &{<nil> Sizes 0 0xc0027c6260 <nil>}
TYPE types.Slice:
  /home/craig/github/golang/go/src/go/types/type.go => &{<nil> Slice 0 0xc0024ae8a0 <nil>}
TYPE types.StdSizes:
  /home/craig/github/golang/go/src/go/types/sizes.go => &{<nil> StdSizes 0 0xc0027c6640 <nil>}
TYPE types.Struct:
  /home/craig/github/golang/go/src/go/types/type.go => &{<nil> Struct 0 0xc0024aed00 <nil>}
TYPE types.Tuple:
  /home/craig/github/golang/go/src/go/types/type.go => &{<nil> Tuple 0 0xc0024afee0 <nil>}
TYPE types.Type:
  /home/craig/github/golang/go/src/go/types/type.go => &{<nil> Type 0 0xc002481220 <nil>}
TYPE types.TypeAndValue:
  /home/craig/github/golang/go/src/go/types/api.go => &{<nil> TypeAndValue 0 0xc002565360 <nil>}
TYPE types.TypeName:
  /home/craig/github/golang/go/src/go/types/object.go => &{<nil> TypeName 0 0xc0028212e0 <nil>}
TYPE types.Var:
  /home/craig/github/golang/go/src/go/types/object.go => &{<nil> Var 0 0xc0028281a0 <nil>}
TYPE unicode.CaseRange:
  /home/craig/github/golang/go/src/unicode/letter.go => &{<nil> CaseRange 0 0xc0051af0a0 <nil>}
TYPE unicode.Range16:
  /home/craig/github/golang/go/src/unicode/letter.go => &{<nil> Range16 0 0xc0051aec40 <nil>}
TYPE unicode.Range32:
  /home/craig/github/golang/go/src/unicode/letter.go => &{<nil> Range32 0 0xc0051aee00 <nil>}
TYPE unicode.RangeTable:
  /home/craig/github/golang/go/src/unicode/letter.go => &{<nil> RangeTable 0 0xc0051aeaa0 <nil>}
TYPE unicode.SpecialCase:
  /home/craig/github/golang/go/src/unicode/letter.go => &{<nil> SpecialCase 0 0xc0029af920 <nil>}
TYPE unicode_test.T:
  /home/craig/github/golang/go/src/unicode/script_test.go => &{<nil> T 0 0xc005221900 <nil>}
TYPE unsafe.ArbitraryType:
  /home/craig/github/golang/go/src/unsafe/unsafe.go => &{<nil> ArbitraryType 0 int <nil>}
TYPE unsafe.Pointer:
  /home/craig/github/golang/go/src/unsafe/unsafe.go => &{<nil> Pointer 0 0xc00584e2a0 <nil>}
TYPE url.EncodeQueryTest:
  /home/craig/github/golang/go/src/net/url/url_test.go => &{<nil> EncodeQueryTest 0 0xc004a85100 <nil>}
TYPE url.Error:
  /home/craig/github/golang/go/src/net/url/url.go => &{<nil> Error 0 0xc004ae0800 <nil>}
TYPE url.EscapeError:
  /home/craig/github/golang/go/src/net/url/url.go => &{<nil> EscapeError 0 string <nil>}
TYPE url.EscapeTest:
  /home/craig/github/golang/go/src/net/url/url_test.go => &{<nil> EscapeTest 0 0xc004a77c20 <nil>}
TYPE url.InvalidHostError:
  /home/craig/github/golang/go/src/net/url/url.go => &{<nil> InvalidHostError 0 string <nil>}
TYPE url.RequestURITest:
  /home/craig/github/golang/go/src/net/url/url_test.go => &{<nil> RequestURITest 0 0xc004aa7680 <nil>}
TYPE url.URL:
  /home/craig/github/golang/go/src/net/url/url.go => &{<nil> URL 0 0xc004b00d60 <nil>}
TYPE url.URLTest:
  /home/craig/github/golang/go/src/net/url/url_test.go => &{<nil> URLTest 0 0xc004a4f300 <nil>}
TYPE url.Userinfo:
  /home/craig/github/golang/go/src/net/url/url.go => &{<nil> Userinfo 0 0xc004b01460 <nil>}
TYPE url.Values:
  /home/craig/github/golang/go/src/net/url/url.go => &{<nil> Values 0 0xc004b22ed0 <nil>}
TYPE user.Group:
  /home/craig/github/golang/go/src/os/user/user.go => &{<nil> Group 0 0xc0029b9660 <nil>}
TYPE user.UnknownGroupError:
  /home/craig/github/golang/go/src/os/user/user.go => &{<nil> UnknownGroupError 0 string <nil>}
TYPE user.UnknownGroupIdError:
  /home/craig/github/golang/go/src/os/user/user.go => &{<nil> UnknownGroupIdError 0 string <nil>}
TYPE user.UnknownUserError:
  /home/craig/github/golang/go/src/os/user/user.go => &{<nil> UnknownUserError 0 string <nil>}
TYPE user.UnknownUserIdError:
  /home/craig/github/golang/go/src/os/user/user.go => &{<nil> UnknownUserIdError 0 int <nil>}
TYPE user.User:
  /home/craig/github/golang/go/src/os/user/user.go => &{<nil> User 0 0xc0029b8d80 <nil>}
TYPE utf8_test.RuneCountTest:
  /home/craig/github/golang/go/src/unicode/utf8/utf8_test.go => &{<nil> RuneCountTest 0 0xc00556a6c0 <nil>}
TYPE utf8_test.RuneLenTest:
  /home/craig/github/golang/go/src/unicode/utf8/utf8_test.go => &{<nil> RuneLenTest 0 0xc00556b120 <nil>}
TYPE utf8_test.Utf8Map:
  /home/craig/github/golang/go/src/unicode/utf8/utf8_test.go => &{<nil> Utf8Map 0 0xc0054a3760 <nil>}
TYPE utf8_test.ValidRuneTest:
  /home/craig/github/golang/go/src/unicode/utf8/utf8_test.go => &{<nil> ValidRuneTest 0 0xc0056d6dc0 <nil>}
TYPE utf8_test.ValidTest:
  /home/craig/github/golang/go/src/unicode/utf8/utf8_test.go => &{<nil> ValidTest 0 0xc00556bae0 <nil>}
TYPE x509.CertPool:
  /home/craig/github/golang/go/src/crypto/x509/cert_pool.go => &{<nil> CertPool 0 0xc001088e80 <nil>}
TYPE x509.Certificate:
  /home/craig/github/golang/go/src/crypto/x509/x509.go => &{<nil> Certificate 0 0xc001177f60 <nil>}
TYPE x509.CertificateInvalidError:
  /home/craig/github/golang/go/src/crypto/x509/verify.go => &{<nil> CertificateInvalidError 0 0xc000893c60 <nil>}
TYPE x509.CertificateRequest:
  /home/craig/github/golang/go/src/crypto/x509/x509.go => &{<nil> CertificateRequest 0 0xc0007c4200 <nil>}
TYPE x509.ConstraintViolationError:
  /home/craig/github/golang/go/src/crypto/x509/x509.go => &{<nil> ConstraintViolationError 0 0xc001182360 <nil>}
TYPE x509.ExtKeyUsage:
  /home/craig/github/golang/go/src/crypto/x509/x509.go => &{<nil> ExtKeyUsage 0 int <nil>}
TYPE x509.HostnameError:
  /home/craig/github/golang/go/src/crypto/x509/verify.go => &{<nil> HostnameError 0 0xc0008d4360 <nil>}
TYPE x509.InsecureAlgorithmError:
  /home/craig/github/golang/go/src/crypto/x509/x509.go => &{<nil> InsecureAlgorithmError 0 SignatureAlgorithm <nil>}
TYPE x509.InvalidReason:
  /home/craig/github/golang/go/src/crypto/x509/verify.go => &{<nil> InvalidReason 0 int <nil>}
TYPE x509.KeyUsage:
  /home/craig/github/golang/go/src/crypto/x509/x509.go => &{<nil> KeyUsage 0 int <nil>}
TYPE x509.PEMCipher:
  /home/craig/github/golang/go/src/crypto/x509/pem_decrypt.go => &{<nil> PEMCipher 0 int <nil>}
TYPE x509.PublicKeyAlgorithm:
  /home/craig/github/golang/go/src/crypto/x509/x509.go => &{<nil> PublicKeyAlgorithm 0 int <nil>}
TYPE x509.SignatureAlgorithm:
  /home/craig/github/golang/go/src/crypto/x509/x509.go => &{<nil> SignatureAlgorithm 0 int <nil>}
TYPE x509.SystemRootsError:
  /home/craig/github/golang/go/src/crypto/x509/verify.go => &{<nil> SystemRootsError 0 0xc0009b6260 <nil>}
TYPE x509.UnhandledCriticalExtension:
  /home/craig/github/golang/go/src/crypto/x509/x509.go => &{<nil> UnhandledCriticalExtension 0 0xc0011d6ca0 <nil>}
TYPE x509.UnknownAuthorityError:
  /home/craig/github/golang/go/src/crypto/x509/verify.go => &{<nil> UnknownAuthorityError 0 0xc0009a7280 <nil>}
TYPE x509.VerifyOptions:
  /home/craig/github/golang/go/src/crypto/x509/verify.go => &{<nil> VerifyOptions 0 0xc0009b6b60 <nil>}
TYPE xml.AnyHolder:
  /home/craig/github/golang/go/src/encoding/xml/marshal_test.go => &{<nil> AnyHolder 0 0xc001f31780 <nil>}
TYPE xml.AnyOmitTest:
  /home/craig/github/golang/go/src/encoding/xml/marshal_test.go => &{<nil> AnyOmitTest 0 0xc001f31520 <nil>}
TYPE xml.AnySliceTest:
  /home/craig/github/golang/go/src/encoding/xml/marshal_test.go => &{<nil> AnySliceTest 0 0xc001f316a0 <nil>}
TYPE xml.AnyTest:
  /home/craig/github/golang/go/src/encoding/xml/marshal_test.go => &{<nil> AnyTest 0 0xc001f31380 <nil>}
TYPE xml.Attr:
  /home/craig/github/golang/go/src/encoding/xml/xml.go => &{<nil> Attr 0 0xc0020fb280 <nil>}
TYPE xml.AttrParent:
  /home/craig/github/golang/go/src/encoding/xml/marshal_test.go => &{<nil> AttrParent 0 0xc001f8df20 <nil>}
TYPE xml.AttrTest:
  /home/craig/github/golang/go/src/encoding/xml/marshal_test.go => &{<nil> AttrTest 0 0xc001f30720 <nil>}
TYPE xml.AttrsTest:
  /home/craig/github/golang/go/src/encoding/xml/marshal_test.go => &{<nil> AttrsTest 0 0xc001f30a80 <nil>}
TYPE xml.BadAttr:
  /home/craig/github/golang/go/src/encoding/xml/marshal_test.go => &{<nil> BadAttr 0 0xc001f8dfe0 <nil>}
TYPE xml.BadPathEmbeddedA:
  /home/craig/github/golang/go/src/encoding/xml/read_test.go => &{<nil> BadPathEmbeddedA 0 0xc0020bda80 <nil>}
TYPE xml.BadPathEmbeddedB:
  /home/craig/github/golang/go/src/encoding/xml/read_test.go => &{<nil> BadPathEmbeddedB 0 0xc0020bdb20 <nil>}
TYPE xml.BadPathTestA:
  /home/craig/github/golang/go/src/encoding/xml/read_test.go => &{<nil> BadPathTestA 0 0xc0020bd720 <nil>}
TYPE xml.BadPathTestB:
  /home/craig/github/golang/go/src/encoding/xml/read_test.go => &{<nil> BadPathTestB 0 0xc0020bd8a0 <nil>}
TYPE xml.BadPathTestC:
  /home/craig/github/golang/go/src/encoding/xml/read_test.go => &{<nil> BadPathTestC 0 0xc0020bd980 <nil>}
TYPE xml.BadPathTestD:
  /home/craig/github/golang/go/src/encoding/xml/read_test.go => &{<nil> BadPathTestD 0 0xc0020bda00 <nil>}
TYPE xml.Book:
  /home/craig/github/golang/go/src/encoding/xml/marshal_test.go => &{<nil> Book 0 0xc001f24760 <nil>}
TYPE xml.CDataTest:
  /home/craig/github/golang/go/src/encoding/xml/marshal_test.go => &{<nil> CDataTest 0 0xc001f392a0 <nil>}
TYPE xml.CharData:
  /home/craig/github/golang/go/src/encoding/xml/xml.go => &{<nil> CharData 0 0xc0020f3a10 <nil>}
TYPE xml.ChardataEmptyTest:
  /home/craig/github/golang/go/src/encoding/xml/marshal_test.go => &{<nil> ChardataEmptyTest 0 0xc001f381a0 <nil>}
TYPE xml.Child:
  /home/craig/github/golang/go/src/encoding/xml/read_test.go => &{<nil> Child 0 0xc0020e6c40 <nil>}
TYPE xml.ChildToEmbed:
  /home/craig/github/golang/go/src/encoding/xml/read_test.go => &{<nil> ChildToEmbed 0 0xc0020e6ce0 <nil>}
TYPE xml.Comment:
  /home/craig/github/golang/go/src/encoding/xml/xml.go => &{<nil> Comment 0 0xc0020f3d70 <nil>}
TYPE xml.Data:
  /home/craig/github/golang/go/src/encoding/xml/marshal_test.go => &{<nil> Data 0 0xc001f31c00 <nil>}
TYPE xml.Decoder:
  /home/craig/github/golang/go/src/encoding/xml/xml.go => &{<nil> Decoder 0 0xc00210fbe0 <nil>}
TYPE xml.Departure:
  /home/craig/github/golang/go/src/encoding/xml/marshal_test.go => &{<nil> Departure 0 0xc001f24da0 <nil>}
TYPE xml.DirectAny:
  /home/craig/github/golang/go/src/encoding/xml/marshal_test.go => &{<nil> DirectAny 0 0xc001f4b000 <nil>}
TYPE xml.DirectCDATA:
  /home/craig/github/golang/go/src/encoding/xml/marshal_test.go => &{<nil> DirectCDATA 0 0xc001f4a0e0 <nil>}
TYPE xml.DirectChardata:
  /home/craig/github/golang/go/src/encoding/xml/marshal_test.go => &{<nil> DirectChardata 0 0xc001f39d00 <nil>}
TYPE xml.DirectComment:
  /home/craig/github/golang/go/src/encoding/xml/marshal_test.go => &{<nil> DirectComment 0 0xc001f39920 <nil>}
TYPE xml.DirectElement:
  /home/craig/github/golang/go/src/encoding/xml/marshal_test.go => &{<nil> DirectElement 0 0xc001f4a860 <nil>}
TYPE xml.DirectInnerXML:
  /home/craig/github/golang/go/src/encoding/xml/marshal_test.go => &{<nil> DirectInnerXML 0 0xc001f4a4c0 <nil>}
TYPE xml.DirectOmitEmpty:
  /home/craig/github/golang/go/src/encoding/xml/marshal_test.go => &{<nil> DirectOmitEmpty 0 0xc001f4ac20 <nil>}
TYPE xml.Directive:
  /home/craig/github/golang/go/src/encoding/xml/xml.go => &{<nil> Directive 0 0xc002110120 <nil>}
TYPE xml.Domain:
  /home/craig/github/golang/go/src/encoding/xml/marshal_test.go => &{<nil> Domain 0 0xc001f24660 <nil>}
TYPE xml.DriveType:
  /home/craig/github/golang/go/src/encoding/xml/marshal_test.go => &{<nil> DriveType 0 int <nil>}
TYPE xml.EmbedA:
  /home/craig/github/golang/go/src/encoding/xml/marshal_test.go => &{<nil> EmbedA 0 0xc001f25a60 <nil>}
TYPE xml.EmbedB:
  /home/craig/github/golang/go/src/encoding/xml/marshal_test.go => &{<nil> EmbedB 0 0xc001f25b20 <nil>}
TYPE xml.EmbedC:
  /home/craig/github/golang/go/src/encoding/xml/marshal_test.go => &{<nil> EmbedC 0 0xc001f25cc0 <nil>}
TYPE xml.EmbedInt:
  /home/craig/github/golang/go/src/encoding/xml/marshal_test.go => &{<nil> EmbedInt 0 0xc001f31d20 <nil>}
TYPE xml.Encoder:
  /home/craig/github/golang/go/src/encoding/xml/marshal.go => &{<nil> Encoder 0 0xc001792060 <nil>}
TYPE xml.EndElement:
  /home/craig/github/golang/go/src/encoding/xml/xml.go => &{<nil> EndElement 0 0xc0020fb9e0 <nil>}
TYPE xml.Entry:
  /home/craig/github/golang/go/src/encoding/xml/read_test.go => &{<nil> Entry 0 0xc0020aef80 <nil>}
TYPE xml.Event:
  /home/craig/github/golang/go/src/encoding/xml/marshal_test.go => &{<nil> Event 0 0xc001f24860 <nil>}
TYPE xml.Failure:
  /home/craig/github/golang/go/src/encoding/xml/xml_test.go => &{<nil> Failure 0 0xc0020a9d00 <nil>}
TYPE xml.Feed:
  /home/craig/github/golang/go/src/encoding/xml/read_test.go => &{<nil> Feed 0 0xc0020aeca0 <nil>}
TYPE xml.IXField:
  /home/craig/github/golang/go/src/encoding/xml/read_test.go => &{<nil> IXField 0 0xc0020e6520 <nil>}
TYPE xml.IfaceAny:
  /home/craig/github/golang/go/src/encoding/xml/marshal_test.go => &{<nil> IfaceAny 0 0xc001f4b140 <nil>}
TYPE xml.IfaceCDATA:
  /home/craig/github/golang/go/src/encoding/xml/marshal_test.go => &{<nil> IfaceCDATA 0 0xc001f4a220 <nil>}
TYPE xml.IfaceChardata:
  /home/craig/github/golang/go/src/encoding/xml/marshal_test.go => &{<nil> IfaceChardata 0 0xc001f39e40 <nil>}
TYPE xml.IfaceComment:
  /home/craig/github/golang/go/src/encoding/xml/marshal_test.go => &{<nil> IfaceComment 0 0xc001f39a60 <nil>}
TYPE xml.IfaceElement:
  /home/craig/github/golang/go/src/encoding/xml/marshal_test.go => &{<nil> IfaceElement 0 0xc001f4a980 <nil>}
TYPE xml.IfaceInnerXML:
  /home/craig/github/golang/go/src/encoding/xml/marshal_test.go => &{<nil> IfaceInnerXML 0 0xc001f4a600 <nil>}
TYPE xml.IfaceOmitEmpty:
  /home/craig/github/golang/go/src/encoding/xml/marshal_test.go => &{<nil> IfaceOmitEmpty 0 0xc001f4ad60 <nil>}
TYPE xml.IgnoreTest:
  /home/craig/github/golang/go/src/encoding/xml/marshal_test.go => &{<nil> IgnoreTest 0 0xc001f31a80 <nil>}
TYPE xml.IndirAny:
  /home/craig/github/golang/go/src/encoding/xml/marshal_test.go => &{<nil> IndirAny 0 0xc001f4aec0 <nil>}
TYPE xml.IndirCDATA:
  /home/craig/github/golang/go/src/encoding/xml/marshal_test.go => &{<nil> IndirCDATA 0 0xc001f39fa0 <nil>}
TYPE xml.IndirChardata:
  /home/craig/github/golang/go/src/encoding/xml/marshal_test.go => &{<nil> IndirChardata 0 0xc001f39bc0 <nil>}
TYPE xml.IndirComment:
  /home/craig/github/golang/go/src/encoding/xml/marshal_test.go => &{<nil> IndirComment 0 0xc001f397e0 <nil>}
TYPE xml.IndirElement:
  /home/craig/github/golang/go/src/encoding/xml/marshal_test.go => &{<nil> IndirElement 0 0xc001f4a740 <nil>}
TYPE xml.IndirInnerXML:
  /home/craig/github/golang/go/src/encoding/xml/marshal_test.go => &{<nil> IndirInnerXML 0 0xc001f4a380 <nil>}
TYPE xml.IndirOmitEmpty:
  /home/craig/github/golang/go/src/encoding/xml/marshal_test.go => &{<nil> IndirOmitEmpty 0 0xc001f4aae0 <nil>}
TYPE xml.InnerStruct:
  /home/craig/github/golang/go/src/encoding/xml/marshal_test.go => &{<nil> InnerStruct 0 0xc001f38c60 <nil>}
TYPE xml.InvalidXMLName:
  /home/craig/github/golang/go/src/encoding/xml/marshal_test.go => &{<nil> InvalidXMLName 0 0xc001fcdf40 <nil>}
TYPE xml.Link:
  /home/craig/github/golang/go/src/encoding/xml/read_test.go => &{<nil> Link 0 0xc0020af080 <nil>}
TYPE xml.Marshaler:
  /home/craig/github/golang/go/src/encoding/xml/marshal.go => &{<nil> Marshaler 0 0xc0017a63c0 <nil>}
TYPE xml.MarshalerAttr:
  /home/craig/github/golang/go/src/encoding/xml/marshal.go => &{<nil> MarshalerAttr 0 0xc0017a6680 <nil>}
TYPE xml.MarshalerStruct:
  /home/craig/github/golang/go/src/encoding/xml/marshal_test.go => &{<nil> MarshalerStruct 0 0xc001f38bc0 <nil>}
TYPE xml.MixedNested:
  /home/craig/github/golang/go/src/encoding/xml/marshal_test.go => &{<nil> MixedNested 0 0xc001f25500 <nil>}
TYPE xml.Movie:
  /home/craig/github/golang/go/src/encoding/xml/marshal_test.go => &{<nil> Movie 0 0xc001f24960 <nil>}
TYPE xml.MyAttr:
  /home/craig/github/golang/go/src/encoding/xml/read_test.go => &{<nil> MyAttr 0 0xc0020de7c0 <nil>}
TYPE xml.MyBytes:
  /home/craig/github/golang/go/src/encoding/xml/marshal_test.go => &{<nil> MyBytes 0 0xc001f2ecc0 <nil>}
TYPE xml.MyCharData:
  /home/craig/github/golang/go/src/encoding/xml/read_test.go => &{<nil> MyCharData 0 0xc0020d3fe0 <nil>}
TYPE xml.MyInt:
  /home/craig/github/golang/go/src/encoding/xml/marshal_test.go => &{<nil> MyInt 0 int <nil>}
TYPE xml.MyMarshalerAttrTest:
  /home/craig/github/golang/go/src/encoding/xml/marshal_test.go => &{<nil> MyMarshalerAttrTest 0 0xc001f38700 <nil>}
TYPE xml.MyMarshalerTest:
  /home/craig/github/golang/go/src/encoding/xml/marshal_test.go => &{<nil> MyMarshalerTest 0 0xc001f381e0 <nil>}
TYPE xml.MyStruct:
  /home/craig/github/golang/go/src/encoding/xml/read_test.go => &{<nil> MyStruct 0 0xc0020dec80 <nil>}
TYPE xml.Name:
  /home/craig/github/golang/go/src/encoding/xml/xml.go => &{<nil> Name 0 0xc0020fb180 <nil>}
TYPE xml.NameCasing:
  /home/craig/github/golang/go/src/encoding/xml/marshal_test.go => &{<nil> NameCasing 0 0xc001f25fc0 <nil>}
TYPE xml.NameInField:
  /home/craig/github/golang/go/src/encoding/xml/marshal_test.go => &{<nil> NameInField 0 0xc001f30420 <nil>}
TYPE xml.NamePrecedence:
  /home/craig/github/golang/go/src/encoding/xml/marshal_test.go => &{<nil> NamePrecedence 0 0xc001f301a0 <nil>}
TYPE xml.NamedType:
  /home/craig/github/golang/go/src/encoding/xml/marshal_test.go => &{<nil> NamedType 0 string <nil>}
TYPE xml.NestedAndCData:
  /home/craig/github/golang/go/src/encoding/xml/marshal_test.go => &{<nil> NestedAndCData 0 0xc001f393a0 <nil>}
TYPE xml.NestedAndChardata:
  /home/craig/github/golang/go/src/encoding/xml/marshal_test.go => &{<nil> NestedAndChardata 0 0xc001f39100 <nil>}
TYPE xml.NestedAndComment:
  /home/craig/github/golang/go/src/encoding/xml/marshal_test.go => &{<nil> NestedAndComment 0 0xc001f39200 <nil>}
TYPE xml.NestedItems:
  /home/craig/github/golang/go/src/encoding/xml/marshal_test.go => &{<nil> NestedItems 0 0xc001f250e0 <nil>}
TYPE xml.NestedOrder:
  /home/craig/github/golang/go/src/encoding/xml/marshal_test.go => &{<nil> NestedOrder 0 0xc001f252c0 <nil>}
TYPE xml.NilTest:
  /home/craig/github/golang/go/src/encoding/xml/marshal_test.go => &{<nil> NilTest 0 0xc001f25680 <nil>}
TYPE xml.OmitAttrTest:
  /home/craig/github/golang/go/src/encoding/xml/marshal_test.go => &{<nil> OmitAttrTest 0 0xc001f30e00 <nil>}
TYPE xml.OmitFieldTest:
  /home/craig/github/golang/go/src/encoding/xml/marshal_test.go => &{<nil> OmitFieldTest 0 0xc001f31200 <nil>}
TYPE xml.OuterNamedOrderedStruct:
  /home/craig/github/golang/go/src/encoding/xml/marshal_test.go => &{<nil> OuterNamedOrderedStruct 0 0xc001f38fa0 <nil>}
TYPE xml.OuterNamedStruct:
  /home/craig/github/golang/go/src/encoding/xml/marshal_test.go => &{<nil> OuterNamedStruct 0 0xc001f38e60 <nil>}
TYPE xml.OuterOuterStruct:
  /home/craig/github/golang/go/src/encoding/xml/marshal_test.go => &{<nil> OuterOuterStruct 0 0xc001f39000 <nil>}
TYPE xml.OuterStruct:
  /home/craig/github/golang/go/src/encoding/xml/marshal_test.go => &{<nil> OuterStruct 0 0xc001f38d20 <nil>}
TYPE xml.Parent:
  /home/craig/github/golang/go/src/encoding/xml/read_test.go => &{<nil> Parent 0 0xc0020e7420 <nil>}
TYPE xml.Particle:
  /home/craig/github/golang/go/src/encoding/xml/marshal_test.go => &{<nil> Particle 0 0xc001f24c60 <nil>}
TYPE xml.Passenger:
  /home/craig/github/golang/go/src/encoding/xml/marshal_test.go => &{<nil> Passenger 0 0xc001f11f60 <nil>}
TYPE xml.PathTestA:
  /home/craig/github/golang/go/src/encoding/xml/read_test.go => &{<nil> PathTestA 0 0xc0020bc140 <nil>}
TYPE xml.PathTestB:
  /home/craig/github/golang/go/src/encoding/xml/read_test.go => &{<nil> PathTestB 0 0xc0020bc260 <nil>}
TYPE xml.PathTestC:
  /home/craig/github/golang/go/src/encoding/xml/read_test.go => &{<nil> PathTestC 0 0xc0020bc400 <nil>}
TYPE xml.PathTestD:
  /home/craig/github/golang/go/src/encoding/xml/read_test.go => &{<nil> PathTestD 0 0xc0020bc5a0 <nil>}
TYPE xml.PathTestE:
  /home/craig/github/golang/go/src/encoding/xml/read_test.go => &{<nil> PathTestE 0 0xc0020bc6c0 <nil>}
TYPE xml.PathTestItem:
  /home/craig/github/golang/go/src/encoding/xml/read_test.go => &{<nil> PathTestItem 0 0xc0020bc020 <nil>}
TYPE xml.PathTestSet:
  /home/craig/github/golang/go/src/encoding/xml/read_test.go => &{<nil> PathTestSet 0 0xc0020bc480 <nil>}
TYPE xml.Pea:
  /home/craig/github/golang/go/src/encoding/xml/read_test.go => &{<nil> Pea 0 0xc0020df4e0 <nil>}
TYPE xml.Person:
  /home/craig/github/golang/go/src/encoding/xml/read_test.go => &{<nil> Person 0 0xc0020af260 <nil>}
TYPE xml.Pi:
  /home/craig/github/golang/go/src/encoding/xml/marshal_test.go => &{<nil> Pi 0 0xc001f24a60 <nil>}
TYPE xml.Plain:
  /home/craig/github/golang/go/src/encoding/xml/marshal_test.go => &{<nil> Plain 0 0xc001f31c80 <nil>}
TYPE xml.Pod:
  /home/craig/github/golang/go/src/encoding/xml/read_test.go => &{<nil> Pod 0 0xc0020df580 <nil>}
TYPE xml.PointerFieldsTest:
  /home/craig/github/golang/go/src/encoding/xml/marshal_test.go => &{<nil> PointerFieldsTest 0 0xc001f38080 <nil>}
TYPE xml.Port:
  /home/craig/github/golang/go/src/encoding/xml/marshal_test.go => &{<nil> Port 0 0xc001f24480 <nil>}
TYPE xml.PresenceTest:
  /home/craig/github/golang/go/src/encoding/xml/marshal_test.go => &{<nil> PresenceTest 0 0xc001f319e0 <nil>}
TYPE xml.ProcInst:
  /home/craig/github/golang/go/src/encoding/xml/xml.go => &{<nil> ProcInst 0 0xc00210e160 <nil>}
TYPE xml.RecurseA:
  /home/craig/github/golang/go/src/encoding/xml/marshal_test.go => &{<nil> RecurseA 0 0xc001f31860 <nil>}
TYPE xml.RecurseB:
  /home/craig/github/golang/go/src/encoding/xml/marshal_test.go => &{<nil> RecurseB 0 0xc001f31940 <nil>}
TYPE xml.SecretAgent:
  /home/craig/github/golang/go/src/encoding/xml/marshal_test.go => &{<nil> SecretAgent 0 0xc001f24f60 <nil>}
TYPE xml.Service:
  /home/craig/github/golang/go/src/encoding/xml/marshal_test.go => &{<nil> Service 0 0xc001f258e0 <nil>}
TYPE xml.Ship:
  /home/craig/github/golang/go/src/encoding/xml/marshal_test.go => &{<nil> Ship 0 0xc001f24260 <nil>}
TYPE xml.StartElement:
  /home/craig/github/golang/go/src/encoding/xml/xml.go => &{<nil> StartElement 0 0xc0020fb420 <nil>}
TYPE xml.Strings:
  /home/craig/github/golang/go/src/encoding/xml/marshal_test.go => &{<nil> Strings 0 0xc001f31dc0 <nil>}
TYPE xml.SyntaxError:
  /home/craig/github/golang/go/src/encoding/xml/xml.go => &{<nil> SyntaxError 0 0xc0020fad40 <nil>}
TYPE xml.T1:
  /home/craig/github/golang/go/src/encoding/xml/marshal_test.go => &{<nil> T1 0 0xc001f39600 <nil>}
TYPE xml.T2:
  /home/craig/github/golang/go/src/encoding/xml/marshal_test.go => &{<nil> T2 0 0xc001f39640 <nil>}
TYPE xml.T3:
  /home/craig/github/golang/go/src/encoding/xml/marshal_test.go => &{<nil> T3 0 0xc001f39680 <nil>}
TYPE xml.TAttr:
  /home/craig/github/golang/go/src/encoding/xml/read_test.go => &{<nil> TAttr 0 0xc0020cfcc0 <nil>}
TYPE xml.TableAttrs:
  /home/craig/github/golang/go/src/encoding/xml/read_test.go => &{<nil> TableAttrs 0 0xc0020cf9c0 <nil>}
TYPE xml.Tables:
  /home/craig/github/golang/go/src/encoding/xml/read_test.go => &{<nil> Tables 0 0xc0020ce080 <nil>}
TYPE xml.TagPathError:
  /home/craig/github/golang/go/src/encoding/xml/typeinfo.go => &{<nil> TagPathError 0 0xc00203c780 <nil>}
TYPE xml.TestThree:
  /home/craig/github/golang/go/src/encoding/xml/read_test.go => &{<nil> TestThree 0 0xc0020c49c0 <nil>}
TYPE xml.Text:
  /home/craig/github/golang/go/src/encoding/xml/read_test.go => &{<nil> Text 0 0xc0020af360 <nil>}
TYPE xml.Token:
  /home/craig/github/golang/go/src/encoding/xml/xml.go => &{<nil> Token 0 0xc0020fb320 <nil>}
TYPE xml.TokenReader:
  /home/craig/github/golang/go/src/encoding/xml/xml.go => &{<nil> TokenReader 0 0xc00210ed00 <nil>}
TYPE xml.Universe:
  /home/craig/github/golang/go/src/encoding/xml/marshal_test.go => &{<nil> Universe 0 0xc001f24b60 <nil>}
TYPE xml.UnmarshalError:
  /home/craig/github/golang/go/src/encoding/xml/read.go => &{<nil> UnmarshalError 0 string <nil>}
TYPE xml.Unmarshaler:
  /home/craig/github/golang/go/src/encoding/xml/read.go => &{<nil> Unmarshaler 0 0xc001fde400 <nil>}
TYPE xml.UnmarshalerAttr:
  /home/craig/github/golang/go/src/encoding/xml/read.go => &{<nil> UnmarshalerAttr 0 0xc001fde620 <nil>}
TYPE xml.UnsupportedTypeError:
  /home/craig/github/golang/go/src/encoding/xml/marshal.go => &{<nil> UnsupportedTypeError 0 0xc00165da20 <nil>}
TYPE xml.WhitespaceAttrsParent:
  /home/craig/github/golang/go/src/encoding/xml/read_test.go => &{<nil> WhitespaceAttrsParent 0 0xc0020f5d40 <nil>}
TYPE xml.WhitespaceValuesParent:
  /home/craig/github/golang/go/src/encoding/xml/read_test.go => &{<nil> WhitespaceValuesParent 0 0xc0020f49c0 <nil>}
TYPE xml.X:
  /home/craig/github/golang/go/src/encoding/xml/read_test.go => &{<nil> X 0 0xc0020dfee0 <nil>}
TYPE xml.XMLNameWithTag:
  /home/craig/github/golang/go/src/encoding/xml/marshal_test.go => &{<nil> XMLNameWithTag 0 0xc001f302a0 <nil>}
TYPE xml.XMLNameWithoutTag:
  /home/craig/github/golang/go/src/encoding/xml/marshal_test.go => &{<nil> XMLNameWithoutTag 0 0xc001f30380 <nil>}
TYPE zip.Compressor:
  /home/craig/github/golang/go/src/archive/zip/register.go => &{<nil> Compressor 0 0xc000348ca0 <nil>}
TYPE zip.Decompressor:
  /home/craig/github/golang/go/src/archive/zip/register.go => &{<nil> Decompressor 0 0xc000348ee0 <nil>}
TYPE zip.File:
  /home/craig/github/golang/go/src/archive/zip/reader.go => &{<nil> File 0 0xc0004ac900 <nil>}
TYPE zip.FileHeader:
  /home/craig/github/golang/go/src/archive/zip/struct.go => &{<nil> FileHeader 0 0xc0001c0980 <nil>}
TYPE zip.ReadCloser:
  /home/craig/github/golang/go/src/archive/zip/reader.go => &{<nil> ReadCloser 0 0xc0004ac720 <nil>}
TYPE zip.Reader:
  /home/craig/github/golang/go/src/archive/zip/reader.go => &{<nil> Reader 0 0xc0004ac620 <nil>}
TYPE zip.WriteTest:
  /home/craig/github/golang/go/src/archive/zip/writer_test.go => &{<nil> WriteTest 0 0xc000410b80 <nil>}
TYPE zip.Writer:
  /home/craig/github/golang/go/src/archive/zip/writer.go => &{<nil> Writer 0 0xc0001c6e80 <nil>}
TYPE zip.ZipTest:
  /home/craig/github/golang/go/src/archive/zip/reader_test.go => &{<nil> ZipTest 0 0xc0002662c0 <nil>}
TYPE zip.ZipTestFile:
  /home/craig/github/golang/go/src/archive/zip/reader_test.go => &{<nil> ZipTestFile 0 0xc0002723c0 <nil>}
TYPE zlib.Resetter:
  /home/craig/github/golang/go/src/compress/zlib/reader.go => &{<nil> Resetter 0 0xc000605fe0 <nil>}
TYPE zlib.Writer:
  /home/craig/github/golang/go/src/compress/zlib/writer.go => &{<nil> Writer 0 0xc000735f20 <nil>}
JOKER FUNC adler32.BenchmarkAdler32KB has: 
;; (defn BenchmarkAdler32KB
;;   {:added "1.0"
;;    :go "benchmarkAdler32KB(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{5467594 0xc002aa9700}) b])
;; 
JOKER FUNC adler32.Checksum has: 
;; (defn ^ABEND042(cannot find typename adler32.uint32) Checksum
;;   "Checksum returns the Adler-32 checksum of data."
;;   {:added "1.0"
;;    :go "checksum(data)"}
;;   [^ABEND881(unrecognized Expr type *ast.ArrayType at: &{5471042 <nil> byte}) data])
;; 
JOKER FUNC adler32.New has: 
;; (defn ^ABEND881(unrecognized Expr type *ast.SelectorExpr at: &{hash Hash32}) New
;;   "New returns a new hash.Hash32 computing the Adler-32 checksum. Its
;; Sum method will lay the value out in big-endian byte order. The
;; returned Hash32 also implements encoding.BinaryMarshaler and
;; encoding.BinaryUnmarshaler to marshal and unmarshal the internal
;; state of the hash."
;;   {:added "1.0"
;;    :go "new()"}
;;   [])
;; 
JOKER FUNC adler32.TestGolden has: 
;; (defn TestGolden
;;   {:added "1.0"
;;    :go "testGolden(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{5466385 0xc002aa3da0}) t])
;; 
JOKER FUNC adler32.TestGoldenMarshal has: 
;; (defn TestGoldenMarshal
;;   {:added "1.0"
;;    :go "testGoldenMarshal(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{5466843 0xc002aa8680}) t])
;; 
JOKER FUNC aes.BenchmarkDecrypt has: 
;; (defn BenchmarkDecrypt
;;   {:added "1.0"
;;    :go "benchmarkDecrypt(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{944904 0xc000a122a0}) b])
;; 
JOKER FUNC aes.BenchmarkEncrypt has: 
;; (defn BenchmarkEncrypt
;;   {:added "1.0"
;;    :go "benchmarkEncrypt(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{944629 0xc000a09b40}) b])
;; 
JOKER FUNC aes.BenchmarkExpand has: 
;; (defn BenchmarkExpand
;;   {:added "1.0"
;;    :go "benchmarkExpand(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{945180 0xc000a12a00}) b])
;; 
JOKER FUNC aes.NewCipher has: 
;; (defn ^[ABEND881(unrecognized Expr type *ast.SelectorExpr at: &{cipher Block}) Error] NewCipher
;;   "NewCipher creates and returns a new cipher.Block.
;; The key argument should be the AES key,
;; either 16, 24, or 32 bytes to select
;; AES-128, AES-192, or AES-256."
;;   {:added "1.0"
;;    :go "newCipher(key)"}
;;   [^ABEND881(unrecognized Expr type *ast.ArrayType at: &{946112 <nil> byte}) key])
;; 
JOKER FUNC aes.TestCBCDecAble has: 
;; (defn TestCBCDecAble
;;   "Test the cbcDecAble interface is detected correctly by the cipher package."
;;   {:added "1.0"
;;    :go "testCBCDecAble(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{949969 0xc000a26dc0}) t])
;; 
JOKER FUNC aes.TestCBCEncAble has: 
;; (defn TestCBCEncAble
;;   "Test the cbcEncAble interface is detected correctly by the cipher package."
;;   {:added "1.0"
;;    :go "testCBCEncAble(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{949558 0xc000a26820}) t])
;; 
JOKER FUNC aes.TestCTRAble has: 
;; (defn TestCTRAble
;;   "Test the ctrAble interface is detected correctly by the cipher package."
;;   {:added "1.0"
;;    :go "testCTRAble(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{950564 0xc000a275c0}) t])
;; 
JOKER FUNC aes.TestCipherDecrypt has: 
;; (defn TestCipherDecrypt
;;   "Test Cipher Decrypt against FIPS 197 examples."
;;   {:added "1.0"
;;    :go "testCipherDecrypt(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{943198 0xc000a08040}) t])
;; 
JOKER FUNC aes.TestCipherEncrypt has: 
;; (defn TestCipherEncrypt
;;   "Test Cipher Encrypt method against FIPS 197 examples."
;;   {:added "1.0"
;;    :go "testCipherEncrypt(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{942741 0xc000a056c0}) t])
;; 
JOKER FUNC aes.TestExpandKey has: 
;; (defn TestExpandKey
;;   "Test key expansion against FIPS 197 examples."
;;   {:added "1.0"
;;    :go "testExpandKey(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{940223 0xc000a028a0}) t])
;; 
JOKER FUNC aes.TestGCMAble has: 
;; (defn TestGCMAble
;;   "Test the gcmAble interface is detected correctly by the cipher package."
;;   {:added "1.0"
;;    :go "testGCMAble(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{948870 0xc000a1be40}) t])
;; 
JOKER FUNC aes.TestMul has: 
;; (defn TestMul
;;   "Test all mul inputs against bit-by-bit n² algorithm."
;;   {:added "1.0"
;;    :go "testMul(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{934821 0xc0009e5e20}) t])
;; 
JOKER FUNC aes.TestPowx has: 
;; (defn TestPowx
;;   "Test that powx is initialized correctly.
;; (Can adapt this code to generate it too.)"
;;   {:added "1.0"
;;    :go "testPowx(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{934127 0xc0009e5240}) t])
;; 
JOKER FUNC aes.TestSboxes has: 
;; (defn TestSboxes
;;   "Check that S-boxes are inverses of each other.
;; They have more structure that we could test,
;; but if this sanity check passes, we'll assume
;; the cut and paste from the FIPS PDF worked."
;;   {:added "1.0"
;;    :go "testSboxes(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{935430 0xc0009f47e0}) t])
;; 
JOKER FUNC aes.TestShortBlocks has: 
;; (defn TestShortBlocks
;;   "Test short input/output.
;; Assembly used to not notice.
;; See issue 7928."
;;   {:added "1.0"
;;    :go "testShortBlocks(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{943687 0xc000a08a20}) t])
;; 
JOKER FUNC aes.TestTd has: 
;; (defn TestTd
;;   "Test that decryption tables are correct.
;; (Can adapt this code to generate them too.)"
;;   {:added "1.0"
;;    :go "testTd(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{936195 0xc0009f56c0}) t])
;; 
JOKER FUNC aes.TestTe has: 
;; (defn TestTe
;;   "Test that encryption tables are correct.
;; (Can adapt this code to generate them too.)"
;;   {:added "1.0"
;;    :go "testTe(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{935765 0xc0009f4d80}) t])
;; 
JOKER FUNC ascii85.Decode has: 
;; (defn ^[ndst nsrc err] Decode
;;   "Decode decodes src into dst, returning both the number
;; of bytes written to dst and the number consumed from src.
;; If src contains invalid ascii85 data, Decode will return the
;; number of bytes successfully written and a CorruptInputError.
;; Decode ignores space and control characters in src.
;; Often, ascii85-encoded data is wrapped in <~ and ~> symbols.
;; Decode expects these to have been stripped by the caller.
;; 
;; If flush is true, Decode assumes that src represents the
;; end of the input stream and processes it completely rather
;; than wait for the completion of another 32-bit block.
;; 
;; NewDecoder wraps an io.Reader interface around Decode."
;;   {:added "1.0"
;;    :go "decode(dst, src, flush)"}
;;   [^ABEND881(unrecognized Expr type *ast.ArrayType at: &{3089659 <nil> byte}) dst, ^ABEND881(unrecognized Expr type *ast.ArrayType at: &{3089659 <nil> byte}) src, flush])
;; 
JOKER FUNC ascii85.Encode has: 
;; (defn ^Int Encode
;;   "Encode encodes src into at most MaxEncodedLen(len(src))
;; bytes of dst, returning the actual number of bytes written.
;; 
;; The encoding handles 4-byte chunks, using a special encoding
;; for the last fragment, so Encode is not appropriate for use on
;; individual blocks of a large data stream. Use NewEncoder() instead.
;; 
;; Often, ascii85-encoded data is wrapped in <~ and ~> symbols.
;; Encode does not add these."
;;   {:added "1.0"
;;    :go "encode(dst, src)"}
;;   [^ABEND881(unrecognized Expr type *ast.ArrayType at: &{3086029 <nil> byte}) dst, ^ABEND881(unrecognized Expr type *ast.ArrayType at: &{3086029 <nil> byte}) src])
;; 
JOKER FUNC ascii85.MaxEncodedLen has: 
(defn ^Int MaxEncodedLen
  "MaxEncodedLen returns the maximum length of an encoding of n source bytes."
  {:added "1.0"
   :go "maxEncodedLen(n)"}
  [^Int n])

JOKER FUNC ascii85.NewDecoder has: 
;; (defn ^ABEND881(unrecognized Expr type *ast.SelectorExpr at: &{io Reader}) NewDecoder
;;   "NewDecoder constructs a new ascii85 stream decoder."
;;   {:added "1.0"
;;    :go "newDecoder(r)"}
;;   [^ABEND881(unrecognized Expr type *ast.SelectorExpr at: &{io Reader}) r])
;; 
JOKER FUNC ascii85.NewEncoder has: 
;; (defn ^ABEND881(unrecognized Expr type *ast.SelectorExpr at: &{io WriteCloser}) NewEncoder
;;   "NewEncoder returns a new ascii85 stream encoder. Data written to
;; the returned writer will be encoded and then written to w.
;; Ascii85 encodings operate in 32-bit blocks; when finished
;; writing, the caller must Close the returned encoder to flush any
;; trailing partial block."
;;   {:added "1.0"
;;    :go "newEncoder(w)"}
;;   [^ABEND881(unrecognized Expr type *ast.SelectorExpr at: &{io Writer}) w])
;; 
JOKER FUNC ascii85.TestBig has: 
;; (defn TestBig
;;   {:added "1.0"
;;    :go "testBig(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{3097124 0xc000edc020}) t])
;; 
JOKER FUNC ascii85.TestDecode has: 
;; (defn TestDecode
;;   {:added "1.0"
;;    :go "testDecode(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{3095087 0xc000eabcc0}) t])
;; 
JOKER FUNC ascii85.TestDecodeCorrupt has: 
;; (defn TestDecodeCorrupt
;;   {:added "1.0"
;;    :go "testDecodeCorrupt(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{3096666 0xc000ed75e0}) t])
;; 
JOKER FUNC ascii85.TestDecoder has: 
;; (defn TestDecoder
;;   {:added "1.0"
;;    :go "testDecoder(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{3095579 0xc000ecb640}) t])
;; 
JOKER FUNC ascii85.TestDecoderBuffering has: 
;; (defn TestDecoderBuffering
;;   {:added "1.0"
;;    :go "testDecoderBuffering(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{3096065 0xc000ed01e0}) t])
;; 
JOKER FUNC ascii85.TestDecoderInternalWhitespace has: 
;; (defn TestDecoderInternalWhitespace
;;   {:added "1.0"
;;    :go "testDecoderInternalWhitespace(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{3097969 0xc000ee6b20}) t])
;; 
JOKER FUNC ascii85.TestEncode has: 
;; (defn TestEncode
;;   {:added "1.0"
;;    :go "testEncode(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{3093849 0xc000eaa3e0}) t])
;; 
JOKER FUNC ascii85.TestEncoder has: 
;; (defn TestEncoder
;;   {:added "1.0"
;;    :go "testEncoder(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{3094119 0xc000eaa9e0}) t])
;; 
JOKER FUNC ascii85.TestEncoderBuffering has: 
;; (defn TestEncoderBuffering
;;   {:added "1.0"
;;    :go "testEncoderBuffering(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{3094395 0xc000eaafa0}) t])
;; 
JOKER FUNC asn1.BenchmarkMarshal has: 
;; (defn BenchmarkMarshal
;;   {:added "1.0"
;;    :go "benchmarkMarshal(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{3106465 0xc0012ba1a0}) b])
;; 
JOKER FUNC asn1.Marshal has: 
;; (defn ^[[ABEND042(cannot find typename asn1.byte)] Error] Marshal
;;   "Marshal returns the ASN.1 encoding of val.
;; 
;; In addition to the struct tags recognised by Unmarshal, the following can be
;; used:
;; 
;; 	ia5:         causes strings to be marshaled as ASN.1, IA5String values
;; 	omitempty:   causes empty slices to be skipped
;; 	printable:   causes strings to be marshaled as ASN.1, PrintableString values
;; 	utf8:        causes strings to be marshaled as ASN.1, UTF8String values
;; 	utc:         causes time.Time to be marshaled as ASN.1, UTCTime values
;; 	generalized: causes time.Time to be marshaled as ASN.1, GeneralizedTime values"
;;   {:added "1.0"
;;    :go "marshal(val)"}
;;   [^ABEND881(unrecognized Expr type *ast.InterfaceType at: &{3200187 0xc000bfa3c0 false}) val])
;; 
JOKER FUNC asn1.MarshalWithParams has: 
;; (defn ^[[ABEND042(cannot find typename asn1.byte)] Error] MarshalWithParams
;;   "MarshalWithParams allows field parameters to be specified for the
;; top-level element. The form of the params is the same as the field tags."
;;   {:added "1.0"
;;    :go "marshalWithParams(val, params)"}
;;   [^ABEND881(unrecognized Expr type *ast.InterfaceType at: &{3200428 0xc000bfa870 false}) val, ^String params])
;; 
JOKER FUNC asn1.TestBitString has: 
;; (defn TestBitString
;;   {:added "1.0"
;;    :go "testBitString(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{3146510 0xc0015ced80}) t])
;; 
JOKER FUNC asn1.TestBitStringAt has: 
;; (defn TestBitStringAt
;;   {:added "1.0"
;;    :go "testBitStringAt(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{3146955 0xc0015ea540}) t])
;; 
JOKER FUNC asn1.TestBitStringRightAlign has: 
;; (defn TestBitStringRightAlign
;;   {:added "1.0"
;;    :go "testBitStringRightAlign(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{3147703 0xc001637840}) t])
;; 
JOKER FUNC asn1.TestCertificate has: 
;; (defn TestCertificate
;;   {:added "1.0"
;;    :go "testCertificate(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{3160232 0xc000d0a6e0}) t])
;; 
JOKER FUNC asn1.TestCertificateWithNUL has: 
;; (defn TestCertificateWithNUL
;;   {:added "1.0"
;;    :go "testCertificateWithNUL(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{3160635 0xc000d0ac20}) t])
;; 
JOKER FUNC asn1.TestExplicitTagRawValueStruct has: 
;; (defn TestExplicitTagRawValueStruct
;;   {:added "1.0"
;;    :go "testExplicitTagRawValueStruct(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{3183157 0xc00109f360}) t])
;; 
JOKER FUNC asn1.TestExplicitTaggedTime has: 
;; (defn TestExplicitTaggedTime
;;   {:added "1.0"
;;    :go "testExplicitTaggedTime(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{3179551 0xc000533c00}) t])
;; 
JOKER FUNC asn1.TestGeneralizedTime has: 
;; (defn TestGeneralizedTime
;;   {:added "1.0"
;;    :go "testGeneralizedTime(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{3152365 0xc000f60280}) t])
;; 
JOKER FUNC asn1.TestImplicitTaggedTime has: 
;; (defn TestImplicitTaggedTime
;;   {:added "1.0"
;;    :go "testImplicitTaggedTime(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{3180059 0xc00061a4a0}) t])
;; 
JOKER FUNC asn1.TestInvalidUTF8 has: 
;; (defn TestInvalidUTF8
;;   {:added "1.0"
;;    :go "testInvalidUTF8(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{3104727 0xc001223ee0}) t])
;; 
JOKER FUNC asn1.TestIssue11130 has: 
;; (defn TestIssue11130
;;   {:added "1.0"
;;    :go "testIssue11130(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{3105674 0xc00129cdc0}) t])
;; 
JOKER FUNC asn1.TestMarshal has: 
;; (defn TestMarshal
;;   {:added "1.0"
;;    :go "testMarshal(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{3103172 0xc0012139c0}) t])
;; 
JOKER FUNC asn1.TestMarshalError has: 
;; (defn TestMarshalError
;;   {:added "1.0"
;;    :go "testMarshalError(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{3104428 0xc001222f80}) t])
;; 
JOKER FUNC asn1.TestMarshalNilValue has: 
;; (defn TestMarshalNilValue
;;   {:added "1.0"
;;    :go "testMarshalNilValue(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{3181695 0xc00061bb60}) t])
;; 
JOKER FUNC asn1.TestMarshalOID has: 
;; (defn TestMarshalOID
;;   {:added "1.0"
;;    :go "testMarshalOID(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{3104880 0xc00129c1c0}) t])
;; 
JOKER FUNC asn1.TestMarshalWithParams has: 
;; (defn TestMarshalWithParams
;;   {:added "1.0"
;;    :go "testMarshalWithParams(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{3103787 0xc001222500}) t])
;; 
JOKER FUNC asn1.TestNull has: 
;; (defn TestNull
;;   {:added "1.0"
;;    :go "testNull(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{3182436 0xc00109e920}) t])
;; 
JOKER FUNC asn1.TestObjectIdentifier has: 
;; (defn TestObjectIdentifier
;;   {:added "1.0"
;;    :go "testObjectIdentifier(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{3148408 0xc001696bc0}) t])
;; 
JOKER FUNC asn1.TestObjectIdentifierEqual has: 
;; (defn TestObjectIdentifierEqual
;;   {:added "1.0"
;;    :go "testObjectIdentifierEqual(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{3161819 0xc000d0bf80}) t])
;; 
JOKER FUNC asn1.TestParseBigInt has: 
;; (defn TestParseBigInt
;;   {:added "1.0"
;;    :go "testParseBigInt(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{3145446 0xc001439ee0}) t])
;; 
JOKER FUNC asn1.TestParseBool has: 
;; (defn TestParseBool
;;   {:added "1.0"
;;    :go "testParseBool(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{3142963 0xc00142c560}) t])
;; 
JOKER FUNC asn1.TestParseFieldParameters has: 
;; (defn TestParseFieldParameters
;;   {:added "1.0"
;;    :go "testParseFieldParameters(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{3156559 0xc00108a620}) t])
;; 
JOKER FUNC asn1.TestParseInt32 has: 
;; (defn TestParseInt32
;;   {:added "1.0"
;;    :go "testParseInt32(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{3144724 0xc001438b80}) t])
;; 
JOKER FUNC asn1.TestParseInt64 has: 
;; (defn TestParseInt64
;;   {:added "1.0"
;;    :go "testParseInt64(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{3143871 0xc00142d900}) t])
;; 
JOKER FUNC asn1.TestParseTagAndLength has: 
;; (defn TestParseTagAndLength
;;   {:added "1.0"
;;    :go "testParseTagAndLength(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{3154639 0xc000f7a900}) t])
;; 
JOKER FUNC asn1.TestRawStructs has: 
;; (defn TestRawStructs
;;   {:added "1.0"
;;    :go "testRawStructs(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{3161016 0xc000d0b040}) t])
;; 
JOKER FUNC asn1.TestStringSlice has: 
;; (defn TestStringSlice
;;   {:added "1.0"
;;    :go "testStringSlice(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{3178580 0xc000532800}) t])
;; 
JOKER FUNC asn1.TestTaggedRawValue has: 
;; (defn TestTaggedRawValue
;;   {:added "1.0"
;;    :go "testTaggedRawValue(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{3183682 0xc00109fd20}) t])
;; 
JOKER FUNC asn1.TestTruncatedExplicitTag has: 
;; (defn TestTruncatedExplicitTag
;;   {:added "1.0"
;;    :go "testTruncatedExplicitTag(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{3180860 0xc00061afc0}) t])
;; 
JOKER FUNC asn1.TestUTCTime has: 
;; (defn TestUTCTime
;;   {:added "1.0"
;;    :go "testUTCTime(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{3150577 0xc000f4c2a0}) t])
;; 
JOKER FUNC asn1.TestUnexportedStructField has: 
;; (defn TestUnexportedStructField
;;   {:added "1.0"
;;    :go "testUnexportedStructField(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{3182049 0xc00109e100}) t])
;; 
JOKER FUNC asn1.TestUnmarshal has: 
;; (defn TestUnmarshal
;;   {:added "1.0"
;;    :go "testUnmarshal(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{3159030 0xc00060b7a0}) t])
;; 
JOKER FUNC asn1.TestUnmarshalInvalidUTF8 has: 
;; (defn TestUnmarshalInvalidUTF8
;;   {:added "1.0"
;;    :go "testUnmarshalInvalidUTF8(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{3181284 0xc00061b580}) t])
;; 
JOKER FUNC asn1.Unmarshal has: 
;; (defn ^[rest err] Unmarshal
;;   "Unmarshal parses the DER-encoded ASN.1 data structure b
;; and uses the reflect package to fill in an arbitrary value pointed at by val.
;; Because Unmarshal uses the reflect package, the structs
;; being written to must use upper case field names.
;; 
;; An ASN.1 INTEGER can be written to an int, int32, int64,
;; or *big.Int (from the math/big package).
;; If the encoded value does not fit in the Go type,
;; Unmarshal returns a parse error.
;; 
;; An ASN.1 BIT STRING can be written to a BitString.
;; 
;; An ASN.1 OCTET STRING can be written to a []byte.
;; 
;; An ASN.1 OBJECT IDENTIFIER can be written to an
;; ObjectIdentifier.
;; 
;; An ASN.1 ENUMERATED can be written to an Enumerated.
;; 
;; An ASN.1 UTCTIME or GENERALIZEDTIME can be written to a time.Time.
;; 
;; An ASN.1 PrintableString, IA5String, or NumericString can be written to a string.
;; 
;; Any of the above ASN.1 values can be written to an interface{}.
;; The value stored in the interface has the corresponding Go type.
;; For integers, that type is int64.
;; 
;; An ASN.1 SEQUENCE OF x or SET OF x can be written
;; to a slice if an x can be written to the slice's element type.
;; 
;; An ASN.1 SEQUENCE or SET can be written to a struct
;; if each of the elements in the sequence can be
;; written to the corresponding element in the struct.
;; 
;; The following tags on struct fields have special meaning to Unmarshal:
;; 
;; 	application specifies that an APPLICATION tag is used
;; 	private     specifies that a PRIVATE tag is used
;; 	default:x   sets the default value for optional integer fields (only used if optional is also present)
;; 	explicit    specifies that an additional, explicit tag wraps the implicit one
;; 	optional    marks the field as ASN.1 OPTIONAL
;; 	set         causes a SET, rather than a SEQUENCE type to be expected
;; 	tag:x       specifies the ASN.1 tag number; implies ASN.1 CONTEXT SPECIFIC
;; 
;; If the type of the first field of a structure is RawContent then the raw
;; ASN1 contents of the struct will be stored in it.
;; 
;; If the type name of a slice element ends with "SET" then it's treated as if
;; the "set" tag was set on it. This can be used with nested slices where a
;; struct tag cannot be given.
;; 
;; Other ASN.1 types are not supported; if it encounters them,
;; Unmarshal returns a parse error."
;;   {:added "1.0"
;;    :go "unmarshal(b, val)"}
;;   [^ABEND881(unrecognized Expr type *ast.ArrayType at: &{3141922 <nil> byte}) b, ^ABEND881(unrecognized Expr type *ast.InterfaceType at: &{3141934 0xc00091e900 false}) val])
;; 
JOKER FUNC asn1.UnmarshalWithParams has: 
;; (defn ^[rest err] UnmarshalWithParams
;;   "UnmarshalWithParams allows field parameters to be specified for the
;; top-level element. The form of the params is the same as the field tags."
;;   {:added "1.0"
;;    :go "unmarshalWithParams(b, val, params)"}
;;   [^ABEND881(unrecognized Expr type *ast.ArrayType at: &{3142191 <nil> byte}) b, ^ABEND881(unrecognized Expr type *ast.InterfaceType at: &{3142203 0xc00091f950 false}) val, ^String params])
;; 
JOKER FUNC ast.FileExports has: 
;; (defn ^ABEND042(cannot find typename ast.bool) FileExports
;;   "FileExports trims the AST for a Go source file in place such that
;; only exported nodes remain: all top-level identifiers which are not exported
;; and their associated information (such as type, initial value, or function
;; body) are removed. Non-exported fields and methods of exported types are
;; stripped. The File.Comments list is not changed.
;; 
;; FileExports reports whether there are exported declarations."
;;   {:added "1.0"
;;    :go "fileExports(src)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{4394855 File}) src])
;; 
JOKER FUNC ast.FilterDecl has: 
;; (defn ^ABEND042(cannot find typename ast.bool) FilterDecl
;;   "FilterDecl trims the AST for a Go declaration in place by removing
;; all names (including struct field and interface method names, but
;; not from parameter lists) that don't pass through the filter f.
;; 
;; FilterDecl reports whether there are any declared names left after
;; filtering."
;;   {:added "1.0"
;;    :go "filterDecl(decl, f)"}
;;   [decl, f])
;; 
JOKER FUNC ast.FilterFile has: 
;; (defn ^ABEND042(cannot find typename ast.bool) FilterFile
;;   "FilterFile trims the AST for a Go file in place by removing all
;; names from top-level declarations (including struct field and
;; interface method names, but not from parameter lists) that don't
;; pass through the filter f. If the declaration is empty afterwards,
;; the declaration is removed from the AST. Import declarations are
;; always removed. The File.Comments list is not changed.
;; 
;; FilterFile reports whether there are any top-level declarations
;; left after filtering."
;;   {:added "1.0"
;;    :go "filterFile(src, f)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{4400297 File}) src, f])
;; 
JOKER FUNC ast.FilterPackage has: 
;; (defn ^ABEND042(cannot find typename ast.bool) FilterPackage
;;   "FilterPackage trims the AST for a Go package in place by removing
;; all names from top-level declarations (including struct field and
;; interface method names, but not from parameter lists) that don't
;; pass through the filter f. If the declaration is empty afterwards,
;; the declaration is removed from the AST. The pkg.Files list is not
;; changed, so that file names and top-level package comments don't get
;; lost.
;; 
;; FilterPackage reports whether there are any top-level declarations
;; left after filtering."
;;   {:added "1.0"
;;    :go "filterPackage(pkg, f)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{4401116 Package}) pkg, f])
;; 
JOKER FUNC ast.Fprint has: 
;; (defn ^Error Fprint
;;   "Fprint prints the (sub-)tree starting at AST node x to w.
;; If fset != nil, position information is interpreted relative
;; to that file set. Otherwise positions are printed as integer
;; values (file set specific offsets).
;; 
;; A non-nil FieldFilter f may be provided to control the output:
;; struct fields for which f(fieldname, fieldvalue) is true are
;; printed; all others are filtered from the output. Unexported
;; struct fields are never printed."
;;   {:added "1.0"
;;    :go "fprint(w, fset, x, f)"}
;;   [^ABEND881(unrecognized Expr type *ast.SelectorExpr at: &{io Writer}) w, ^ABEND881(unrecognized Expr type *ast.StarExpr at: &{4366891 0xc000a19920}) fset, ^ABEND881(unrecognized Expr type *ast.InterfaceType at: &{4366909 0xc00124dad0 false}) x, f])
;; 
JOKER FUNC ast.Inspect has: 
;; (defn Inspect
;;   "Inspect traverses an AST in depth-first order: It starts by calling
;; f(node); node must not be nil. If f returns true, Inspect invokes f
;; recursively for each of the non-nil children of node, followed by a
;; call of f(nil)."
;;   {:added "1.0"
;;    :go "inspect(node, f)"}
;;   [node, ^ABEND881(unrecognized Expr type *ast.FuncType at: &{4393917 0xc00198ea20 0xc00198ea50}) f])
;; 
JOKER FUNC ast.IsExported has: 
;; (defn ^ABEND042(cannot find typename ast.bool) IsExported
;;   "IsExported reports whether name is an exported Go symbol
;; (that is, whether it begins with an upper-case letter)."
;;   {:added "1.0"
;;    :go "isExported(name)"}
;;   [^String name])
;; 
JOKER FUNC ast.MergePackageFiles has: 
;; (defn ^{:doc ^ABEND881(unrecognized Expr type *ast.StarExpr at: &{4449568 CommentGroup}) Doc, :package ^ABEND881(unrecognized Expr type *ast.SelectorExpr at: &{token Pos}) Package, :name ^ABEND881(unrecognized Expr type *ast.StarExpr at: &{4449693 Ident}) Name, :decls ^ABEND881(unrecognized Expr type *ast.ArrayType at: &{4449737 <nil> Decl}) Decls, :scope ^ABEND881(unrecognized Expr type *ast.StarExpr at: &{4449799 Scope}) Scope, :imports ^ABEND881(unrecognized Expr type *ast.ArrayType at: &{4449861 <nil> 0xc001b6ad20}) Imports, :unresolved ^ABEND881(unrecognized Expr type *ast.ArrayType at: &{4449913 <nil> 0xc001b6adc0}) Unresolved, :comments ^ABEND881(unrecognized Expr type *ast.ArrayType at: &{4449980 <nil> 0xc001b6ae60}) Comments} MergePackageFiles
;;   "MergePackageFiles creates a file AST by merging the ASTs of the
;; files belonging to a package. The mode flags control merging behavior."
;;   {:added "1.0"
;;    :go "mergePackageFiles(pkg, mode)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{4402880 Package}) pkg, mode])
;; 
JOKER FUNC ast.NewCommentMap has: 
;; (defn ^ABEND881(unrecognized Expr type *ast.MapType at: &{4372686 Node 0xc0018cb3e0}) NewCommentMap
;;   "NewCommentMap creates a new comment map by associating comment groups
;; of the comments list with the nodes of the AST specified by node.
;; 
;; A comment group g is associated with a node n if:
;; 
;;   - g starts on the same line as n ends
;;   - g starts on the line immediately following n, and there is
;;     at least one empty line after g and before the next node
;;   - g starts before n and is not associated to the node before n
;;     via the previous rules
;; 
;; NewCommentMap tries to associate a comment group to the "largest"
;; node possible: For instance, if the comment is a line comment
;; trailing an assignment, the comment is associated with the entire
;; assignment rather than just the last operand in the assignment."
;;   {:added "1.0"
;;    :go "newCommentMap(fset, node, comments)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{4375726 0xc000f42a40}) fset, node, ^ABEND881(unrecognized Expr type *ast.ArrayType at: &{4375762 <nil> 0xc000f42b00}) comments])
;; 
JOKER FUNC ast.NewIdent has: 
;; (defn ^{:namepos ^ABEND881(unrecognized Expr type *ast.SelectorExpr at: &{token Pos}) NamePos, :name ^String Name, :obj ^ABEND881(unrecognized Expr type *ast.StarExpr at: &{4424870 Object}) Obj} NewIdent
;;   "NewIdent creates a new Ident without position.
;; Useful for ASTs generated by code other than the Go parser."
;;   {:added "1.0"
;;    :go "newIdent(name)"}
;;   [^String name])
;; 
JOKER FUNC ast.NewObj has: 
;; (defn ^{:kind Kind, :name ^String Name, :decl ^ABEND881(unrecognized Expr type *ast.InterfaceType at: &{4414752 0xc001a1f6b0 false}) Decl, :data ^ABEND881(unrecognized Expr type *ast.InterfaceType at: &{4414852 0xc001a1f710 false}) Data, :type ^ABEND881(unrecognized Expr type *ast.InterfaceType at: &{4414902 0xc001a1f770 false}) Type} NewObj
;;   "NewObj creates a new object of a given kind and name."
;;   {:added "1.0"
;;    :go "newObj(kind, name)"}
;;   [kind, ^String name])
;; 
JOKER FUNC ast.NewPackage has: 
;; (defn ^[{:name ^String Name, :scope ^ABEND881(unrecognized Expr type *ast.StarExpr at: &{4450381 Scope}) Scope, :imports ^ABEND881(unrecognized Expr type *ast.MapType at: &{4450443 string 0xc001b6b660}) Imports, :files ^ABEND881(unrecognized Expr type *ast.MapType at: &{4450510 string 0xc001b6b740}) Files} Error] NewPackage
;;   "NewPackage creates a new Package node from a set of File nodes. It resolves
;; unresolved identifiers across files and updates each file's Unresolved list
;; accordingly. If a non-nil importer and universe scope are provided, they are
;; used to resolve identifiers not declared in any of the package files. Any
;; remaining unresolved identifiers are reported as undeclared. If the files
;; belong to different packages, one package name is selected and files with
;; different package names are reported and then ignored.
;; The result is a package node and a scanner.ErrorList if there were errors."
;;   {:added "1.0"
;;    :go "newPackage(fset, files, importer, universe)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{4409781 0xc000d6d2a0}) fset, ^ABEND881(unrecognized Expr type *ast.MapType at: &{4409803 string 0xc000d6d340}) files, importer, ^ABEND881(unrecognized Expr type *ast.StarExpr at: &{4409849 Scope}) universe])
;; 
JOKER FUNC ast.NewScope has: 
;; (defn ^{:outer ^ABEND881(unrecognized Expr type *ast.StarExpr at: &{4413120 Scope}) Outer, :objects ^ABEND881(unrecognized Expr type *ast.MapType at: &{4413136 string 0xc0011a5e40}) Objects} NewScope
;;   "NewScope creates a new scope nested in the outer scope."
;;   {:added "1.0"
;;    :go "newScope(outer)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{4413237 Scope}) outer])
;; 
JOKER FUNC ast.NotNilFilter has: 
;; (defn ^ABEND042(cannot find typename ast.bool) NotNilFilter
;;   "NotNilFilter returns true for field values that are not nil;
;; it returns false otherwise."
;;   {:added "1.0"
;;    :go "notNilFilter(_, v)"}
;;   [^String _, ^ABEND881(unrecognized Expr type *ast.SelectorExpr at: &{reflect Value}) v])
;; 
JOKER FUNC ast.PackageExports has: 
;; (defn ^ABEND042(cannot find typename ast.bool) PackageExports
;;   "PackageExports trims the AST for a Go package in place such that
;; only exported nodes remain. The pkg.Files list is not changed, so that
;; file names and top-level package comments don't get lost.
;; 
;; PackageExports reports whether there are exported declarations;
;; it returns false otherwise."
;;   {:added "1.0"
;;    :go "packageExports(pkg)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{4395247 Package}) pkg])
;; 
JOKER FUNC ast.Print has: 
;; (defn ^Error Print
;;   "Print prints x to standard output, skipping nil fields.
;; Print(fset, x) is the same as Fprint(os.Stdout, fset, x, NotNilFilter)."
;;   {:added "1.0"
;;    :go "print(fset, x)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{4367663 0xc000c7e540}) fset, ^ABEND881(unrecognized Expr type *ast.InterfaceType at: &{4367681 0xc001802180 false}) x])
;; 
JOKER FUNC ast.SortImports has: 
;; (defn SortImports
;;   "SortImports sorts runs of consecutive import lines in import blocks in f.
;; It also removes duplicate imports when it is possible to do so without data loss."
;;   {:added "1.0"
;;    :go "sortImports(fset, f)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{4361486 0xc000aa6220}) fset, ^ABEND881(unrecognized Expr type *ast.StarExpr at: &{4361504 File}) f])
;; 
JOKER FUNC ast.TestCommentText has: 
;; (defn TestCommentText
;;   {:added "1.0"
;;    :go "testCommentText(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{4417907 0xc0018be3e0}) t])
;; 
JOKER FUNC ast.TestPrint has: 
;; (defn TestPrint
;;   {:added "1.0"
;;    :go "testPrint(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{4387305 0xc0012a1660}) t])
;; 
JOKER FUNC ast.Walk has: 
;; (defn Walk
;;   "Walk traverses an AST in depth-first order: It starts by calling
;; v.Visit(node); node must not be nil. If the visitor w returned by
;; v.Visit(node) is not nil, Walk is invoked recursively with visitor
;; w for each of the non-nil children of node, followed by a call of
;; w.Visit(nil)."
;;   {:added "1.0"
;;    :go "walk(v, node)"}
;;   [v, node])
;; 
JOKER FUNC ast_test.ExampleCommentMap has: 
;; (defn ExampleCommentMap
;;   "This example illustrates how to remove a variable declaration
;; in a Go program while maintaining correct comment association
;; using an ast.CommentMap."
;;   {:added "1.0"
;;    :go "exampleCommentMap()"}
;;   [])
;; 
JOKER FUNC ast_test.ExampleInspect has: 
;; (defn ExampleInspect
;;   "This example demonstrates how to inspect the AST of a Go program."
;;   {:added "1.0"
;;    :go "exampleInspect()"}
;;   [])
;; 
JOKER FUNC ast_test.ExamplePrint has: 
;; (defn ExamplePrint
;;   "This example shows what an AST looks like when printed for debugging."
;;   {:added "1.0"
;;    :go "examplePrint()"}
;;   [])
;; 
JOKER FUNC ast_test.TestCommentMap has: 
;; (defn TestCommentMap
;;   {:added "1.0"
;;    :go "testCommentMap(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{4383062 0xc001127c80}) t])
;; 
JOKER FUNC ast_test.TestFilterDuplicates has: 
;; (defn TestFilterDuplicates
;;   {:added "1.0"
;;    :go "testFilterDuplicates(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{4385139 0xc0005393c0}) t])
;; 
JOKER FUNC atomic.AddInt32 has: 
;; (defn ^new AddInt32
;;   "AddInt32 atomically adds delta to *addr and returns the new value."
;;   {:added "1.0"
;;    :go "addInt32(addr, delta)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{13176115 int32}) addr, delta])
;; 
JOKER FUNC atomic.AddInt64 has: 
;; (defn ^new AddInt64
;;   "AddInt64 atomically adds delta to *addr and returns the new value."
;;   {:added "1.0"
;;    :go "addInt64(addr, delta)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{13176520 int64}) addr, delta])
;; 
JOKER FUNC atomic.AddUint32 has: 
;; (defn ^new AddUint32
;;   "AddUint32 atomically adds delta to *addr and returns the new value.
;; To subtract a signed positive constant value c from x, do AddUint32(&x, ^uint32(c-1)).
;; In particular, to decrement x, do AddUint32(&x, ^uint32(0))."
;;   {:added "1.0"
;;    :go "addUint32(addr, delta)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{13176394 uint32}) addr, delta])
;; 
JOKER FUNC atomic.AddUint64 has: 
;; (defn ^new AddUint64
;;   "AddUint64 atomically adds delta to *addr and returns the new value.
;; To subtract a signed positive constant value c from x, do AddUint64(&x, ^uint64(c-1)).
;; In particular, to decrement x, do AddUint64(&x, ^uint64(0))."
;;   {:added "1.0"
;;    :go "addUint64(addr, delta)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{13176799 uint64}) addr, delta])
;; 
JOKER FUNC atomic.AddUintptr has: 
;; (defn ^new AddUintptr
;;   "AddUintptr atomically adds delta to *addr and returns the new value."
;;   {:added "1.0"
;;    :go "addUintptr(addr, delta)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{13176929 uintptr}) addr, delta])
;; 
JOKER FUNC atomic.CompareAndSwapInt32 has: 
;; (defn ^swapped CompareAndSwapInt32
;;   "CompareAndSwapInt32 executes the compare-and-swap operation for an int32 value."
;;   {:added "1.0"
;;    :go "compareAndSwapInt32(addr, old, new)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{13175174 int32}) addr, old, new])
;; 
JOKER FUNC atomic.CompareAndSwapInt64 has: 
;; (defn ^swapped CompareAndSwapInt64
;;   "CompareAndSwapInt64 executes the compare-and-swap operation for an int64 value."
;;   {:added "1.0"
;;    :go "compareAndSwapInt64(addr, old, new)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{13175327 int64}) addr, old, new])
;; 
JOKER FUNC atomic.CompareAndSwapPointer has: 
;; (defn ^swapped CompareAndSwapPointer
;;   "CompareAndSwapPointer executes the compare-and-swap operation for a unsafe.Pointer value."
;;   {:added "1.0"
;;    :go "compareAndSwapPointer(addr, old, new)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{13175968 0xc006323c20}) addr, ^ABEND881(unrecognized Expr type *ast.SelectorExpr at: &{unsafe Pointer}) old, ^ABEND881(unrecognized Expr type *ast.SelectorExpr at: &{unsafe Pointer}) new])
;; 
JOKER FUNC atomic.CompareAndSwapUint32 has: 
;; (defn ^swapped CompareAndSwapUint32
;;   "CompareAndSwapUint32 executes the compare-and-swap operation for a uint32 value."
;;   {:added "1.0"
;;    :go "compareAndSwapUint32(addr, old, new)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{13175482 uint32}) addr, old, new])
;; 
JOKER FUNC atomic.CompareAndSwapUint64 has: 
;; (defn ^swapped CompareAndSwapUint64
;;   "CompareAndSwapUint64 executes the compare-and-swap operation for a uint64 value."
;;   {:added "1.0"
;;    :go "compareAndSwapUint64(addr, old, new)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{13175639 uint64}) addr, old, new])
;; 
JOKER FUNC atomic.CompareAndSwapUintptr has: 
;; (defn ^swapped CompareAndSwapUintptr
;;   "CompareAndSwapUintptr executes the compare-and-swap operation for a uintptr value."
;;   {:added "1.0"
;;    :go "compareAndSwapUintptr(addr, old, new)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{13175799 uintptr}) addr, old, new])
;; 
JOKER FUNC atomic.LoadInt32 has: 
;; (defn ^val LoadInt32
;;   "LoadInt32 atomically loads *addr."
;;   {:added "1.0"
;;    :go "loadInt32(addr)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{13177026 int32}) addr])
;; 
JOKER FUNC atomic.LoadInt64 has: 
;; (defn ^val LoadInt64
;;   "LoadInt64 atomically loads *addr."
;;   {:added "1.0"
;;    :go "loadInt64(addr)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{13177104 int64}) addr])
;; 
JOKER FUNC atomic.LoadPointer has: 
;; (defn ^val LoadPointer
;;   "LoadPointer atomically loads *addr."
;;   {:added "1.0"
;;    :go "loadPointer(addr)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{13177436 0xc00633ab60}) addr])
;; 
JOKER FUNC atomic.LoadUint32 has: 
;; (defn ^val LoadUint32
;;   "LoadUint32 atomically loads *addr."
;;   {:added "1.0"
;;    :go "loadUint32(addr)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{13177184 uint32}) addr])
;; 
JOKER FUNC atomic.LoadUint64 has: 
;; (defn ^val LoadUint64
;;   "LoadUint64 atomically loads *addr."
;;   {:added "1.0"
;;    :go "loadUint64(addr)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{13177266 uint64}) addr])
;; 
JOKER FUNC atomic.LoadUintptr has: 
;; (defn ^val LoadUintptr
;;   "LoadUintptr atomically loads *addr."
;;   {:added "1.0"
;;    :go "loadUintptr(addr)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{13177350 uintptr}) addr])
;; 
JOKER FUNC atomic.StoreInt32 has: 
;; (defn StoreInt32
;;   "StoreInt32 atomically stores val into *addr."
;;   {:added "1.0"
;;    :go "storeInt32(addr, val)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{13177544 int32}) addr, val])
;; 
JOKER FUNC atomic.StoreInt64 has: 
;; (defn StoreInt64
;;   "StoreInt64 atomically stores val into *addr."
;;   {:added "1.0"
;;    :go "storeInt64(addr, val)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{13177633 int64}) addr, val])
;; 
JOKER FUNC atomic.StorePointer has: 
;; (defn StorePointer
;;   "StorePointer atomically stores val into *addr."
;;   {:added "1.0"
;;    :go "storePointer(addr, val)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{13178009 0xc00633b2a0}) addr, ^ABEND881(unrecognized Expr type *ast.SelectorExpr at: &{unsafe Pointer}) val])
;; 
JOKER FUNC atomic.StoreUint32 has: 
;; (defn StoreUint32
;;   "StoreUint32 atomically stores val into *addr."
;;   {:added "1.0"
;;    :go "storeUint32(addr, val)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{13177724 uint32}) addr, val])
;; 
JOKER FUNC atomic.StoreUint64 has: 
;; (defn StoreUint64
;;   "StoreUint64 atomically stores val into *addr."
;;   {:added "1.0"
;;    :go "storeUint64(addr, val)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{13177817 uint64}) addr, val])
;; 
JOKER FUNC atomic.StoreUintptr has: 
;; (defn StoreUintptr
;;   "StoreUintptr atomically stores val into *addr."
;;   {:added "1.0"
;;    :go "storeUintptr(addr, val)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{13177912 uintptr}) addr, val])
;; 
JOKER FUNC atomic.SwapInt32 has: 
;; (defn ^old SwapInt32
;;   "SwapInt32 atomically stores new into *addr and returns the previous *addr value."
;;   {:added "1.0"
;;    :go "swapInt32(addr, new)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{13174298 int32}) addr, new])
;; 
JOKER FUNC atomic.SwapInt64 has: 
;; (defn ^old SwapInt64
;;   "SwapInt64 atomically stores new into *addr and returns the previous *addr value."
;;   {:added "1.0"
;;    :go "swapInt64(addr, new)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{13174434 int64}) addr, new])
;; 
JOKER FUNC atomic.SwapPointer has: 
;; (defn ^old SwapPointer
;;   "SwapPointer atomically stores new into *addr and returns the previous *addr value."
;;   {:added "1.0"
;;    :go "swapPointer(addr, new)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{13175002 0xc006323280}) addr, ^ABEND881(unrecognized Expr type *ast.SelectorExpr at: &{unsafe Pointer}) new])
;; 
JOKER FUNC atomic.SwapUint32 has: 
;; (defn ^old SwapUint32
;;   "SwapUint32 atomically stores new into *addr and returns the previous *addr value."
;;   {:added "1.0"
;;    :go "swapUint32(addr, new)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{13174572 uint32}) addr, new])
;; 
JOKER FUNC atomic.SwapUint64 has: 
;; (defn ^old SwapUint64
;;   "SwapUint64 atomically stores new into *addr and returns the previous *addr value."
;;   {:added "1.0"
;;    :go "swapUint64(addr, new)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{13174713 uint64}) addr, new])
;; 
JOKER FUNC atomic.SwapUintptr has: 
;; (defn ^old SwapUintptr
;;   "SwapUintptr atomically stores new into *addr and returns the previous *addr value."
;;   {:added "1.0"
;;    :go "swapUintptr(addr, new)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{13174856 uintptr}) addr, new])
;; 
JOKER FUNC atomic_test.BenchmarkValueRead has: 
;; (defn BenchmarkValueRead
;;   {:added "1.0"
;;    :go "benchmarkValueRead(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{13180819 0xc00634e500}) b])
;; 
JOKER FUNC atomic_test.ExampleValue_config has: 
;; (defn ExampleValue_config
;;   "The following example shows how to use Value for periodic program config updates
;; and propagation of the changes to worker goroutines."
;;   {:added "1.0"
;;    :go "exampleValue_config()"}
;;   [])
;; 
JOKER FUNC atomic_test.ExampleValue_readMostly has: 
;; (defn ExampleValue_readMostly
;;   "The following example shows how to maintain a scalable frequently read,
;; but infrequently updated data structure using copy-on-write idiom."
;;   {:added "1.0"
;;    :go "exampleValue_readMostly()"}
;;   [])
;; 
JOKER FUNC atomic_test.TestAddInt32 has: 
;; (defn TestAddInt32
;;   {:added "1.0"
;;    :go "testAddInt32(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{13141674 0xc00628b300}) t])
;; 
JOKER FUNC atomic_test.TestAddInt64 has: 
;; (defn TestAddInt64
;;   {:added "1.0"
;;    :go "testAddInt64(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{13142651 0xc006290800}) t])
;; 
JOKER FUNC atomic_test.TestAddUint32 has: 
;; (defn TestAddUint32
;;   {:added "1.0"
;;    :go "testAddUint32(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{13142160 0xc00628bd80}) t])
;; 
JOKER FUNC atomic_test.TestAddUint64 has: 
;; (defn TestAddUint64
;;   {:added "1.0"
;;    :go "testAddUint64(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{13143227 0xc0062913c0}) t])
;; 
JOKER FUNC atomic_test.TestAddUintptr has: 
;; (defn TestAddUintptr
;;   {:added "1.0"
;;    :go "testAddUintptr(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{13143812 0xc006291f80}) t])
;; 
JOKER FUNC atomic_test.TestCompareAndSwapInt32 has: 
;; (defn TestCompareAndSwapInt32
;;   {:added "1.0"
;;    :go "testCompareAndSwapInt32(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{13144374 0xc00629aac0}) t])
;; 
JOKER FUNC atomic_test.TestCompareAndSwapInt64 has: 
;; (defn TestCompareAndSwapInt64
;;   {:added "1.0"
;;    :go "testCompareAndSwapInt64(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{13145911 0xc00629cb00}) t])
;; 
JOKER FUNC atomic_test.TestCompareAndSwapPointer has: 
;; (defn TestCompareAndSwapPointer
;;   {:added "1.0"
;;    :go "testCompareAndSwapPointer(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{13148573 0xc0062a8120}) t])
;; 
JOKER FUNC atomic_test.TestCompareAndSwapUint32 has: 
;; (defn TestCompareAndSwapUint32
;;   {:added "1.0"
;;    :go "testCompareAndSwapUint32(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{13145140 0xc00629bae0}) t])
;; 
JOKER FUNC atomic_test.TestCompareAndSwapUint64 has: 
;; (defn TestCompareAndSwapUint64
;;   {:added "1.0"
;;    :go "testCompareAndSwapUint64(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{13147639 0xc0062a2ee0}) t])
;; 
JOKER FUNC atomic_test.TestCompareAndSwapUintptr has: 
;; (defn TestCompareAndSwapUintptr
;;   {:added "1.0"
;;    :go "testCompareAndSwapUintptr(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{13147740 0xc0062a3040}) t])
;; 
JOKER FUNC atomic_test.TestHammer32 has: 
;; (defn TestHammer32
;;   {:added "1.0"
;;    :go "testHammer32(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{13159316 0xc0062d0a60}) t])
;; 
JOKER FUNC atomic_test.TestHammer64 has: 
;; (defn TestHammer64
;;   {:added "1.0"
;;    :go "testHammer64(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{13162957 0xc0062e2720}) t])
;; 
JOKER FUNC atomic_test.TestHammerStoreLoad has: 
;; (defn TestHammerStoreLoad
;;   {:added "1.0"
;;    :go "testHammerStoreLoad(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{13165797 0xc0062fc240}) t])
;; 
JOKER FUNC atomic_test.TestLoadInt32 has: 
;; (defn TestLoadInt32
;;   {:added "1.0"
;;    :go "testLoadInt32(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{13149535 0xc0062a9560}) t])
;; 
JOKER FUNC atomic_test.TestLoadInt64 has: 
;; (defn TestLoadInt64
;;   {:added "1.0"
;;    :go "testLoadInt64(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{13150443 0xc0062b0920}) t])
;; 
JOKER FUNC atomic_test.TestLoadPointer has: 
;; (defn TestLoadPointer
;;   {:added "1.0"
;;    :go "testLoadPointer(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{13152054 0xc0062b6a00}) t])
;; 
JOKER FUNC atomic_test.TestLoadUint32 has: 
;; (defn TestLoadUint32
;;   {:added "1.0"
;;    :go "testLoadUint32(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{13149987 0xc0062a9f40}) t])
;; 
JOKER FUNC atomic_test.TestLoadUint64 has: 
;; (defn TestLoadUint64
;;   {:added "1.0"
;;    :go "testLoadUint64(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{13150987 0xc0062b1440}) t])
;; 
JOKER FUNC atomic_test.TestLoadUintptr has: 
;; (defn TestLoadUintptr
;;   {:added "1.0"
;;    :go "testLoadUintptr(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{13151537 0xc0062b1f60}) t])
;; 
JOKER FUNC atomic_test.TestNilDeref has: 
;; (defn TestNilDeref
;;   {:added "1.0"
;;    :go "testNilDeref(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{13171358 0xc006318f80}) t])
;; 
JOKER FUNC atomic_test.TestStoreInt32 has: 
;; (defn TestStoreInt32
;;   {:added "1.0"
;;    :go "testStoreInt32(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{13152613 0xc0062b75e0}) t])
;; 
JOKER FUNC atomic_test.TestStoreInt64 has: 
;; (defn TestStoreInt64
;;   {:added "1.0"
;;    :go "testStoreInt64(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{13153548 0xc0062bca20}) t])
;; 
JOKER FUNC atomic_test.TestStoreLoadRelAcq32 has: 
;; (defn TestStoreLoadRelAcq32
;;   {:added "1.0"
;;    :go "testStoreLoadRelAcq32(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{13168585 0xc006303ca0}) t])
;; 
JOKER FUNC atomic_test.TestStoreLoadRelAcq64 has: 
;; (defn TestStoreLoadRelAcq64
;;   {:added "1.0"
;;    :go "testStoreLoadRelAcq64(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{13169489 0xc006312ec0}) t])
;; 
JOKER FUNC atomic_test.TestStoreLoadSeqCst32 has: 
;; (defn TestStoreLoadSeqCst32
;;   {:added "1.0"
;;    :go "testStoreLoadSeqCst32(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{13166475 0xc0062fce20}) t])
;; 
JOKER FUNC atomic_test.TestStoreLoadSeqCst64 has: 
;; (defn TestStoreLoadSeqCst64
;;   {:added "1.0"
;;    :go "testStoreLoadSeqCst64(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{13167492 0xc0063024e0}) t])
;; 
JOKER FUNC atomic_test.TestStorePointer has: 
;; (defn TestStorePointer
;;   {:added "1.0"
;;    :go "testStorePointer(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{13155201 0xc0062c2bc0}) t])
;; 
JOKER FUNC atomic_test.TestStoreUint32 has: 
;; (defn TestStoreUint32
;;   {:added "1.0"
;;    :go "testStoreUint32(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{13153078 0xc0062bc000}) t])
;; 
JOKER FUNC atomic_test.TestStoreUint64 has: 
;; (defn TestStoreUint64
;;   {:added "1.0"
;;    :go "testStoreUint64(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{13154105 0xc0062bd580}) t])
;; 
JOKER FUNC atomic_test.TestStoreUintptr has: 
;; (defn TestStoreUintptr
;;   {:added "1.0"
;;    :go "testStoreUintptr(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{13154669 0xc0062c20e0}) t])
;; 
JOKER FUNC atomic_test.TestSwapInt32 has: 
;; (defn TestSwapInt32
;;   {:added "1.0"
;;    :go "testSwapInt32(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{13138354 0xc00626ef00}) t])
;; 
JOKER FUNC atomic_test.TestSwapInt64 has: 
;; (defn TestSwapInt64
;;   {:added "1.0"
;;    :go "testSwapInt64(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{13139341 0xc006280400}) t])
;; 
JOKER FUNC atomic_test.TestSwapPointer has: 
;; (defn TestSwapPointer
;;   {:added "1.0"
;;    :go "testSwapPointer(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{13141072 0xc00628a6c0}) t])
;; 
JOKER FUNC atomic_test.TestSwapUint32 has: 
;; (defn TestSwapUint32
;;   {:added "1.0"
;;    :go "testSwapUint32(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{13138845 0xc00626f980}) t])
;; 
JOKER FUNC atomic_test.TestSwapUint64 has: 
;; (defn TestSwapUint64
;;   {:added "1.0"
;;    :go "testSwapUint64(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{13139924 0xc006280fc0}) t])
;; 
JOKER FUNC atomic_test.TestSwapUintptr has: 
;; (defn TestSwapUintptr
;;   {:added "1.0"
;;    :go "testSwapUintptr(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{13140514 0xc006281b80}) t])
;; 
JOKER FUNC atomic_test.TestUnaligned64 has: 
;; (defn TestUnaligned64
;;   {:added "1.0"
;;    :go "testUnaligned64(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{13170614 0xc0063184c0}) t])
;; 
JOKER FUNC atomic_test.TestValue has: 
;; (defn TestValue
;;   {:added "1.0"
;;    :go "testValue(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{13178454 0xc00633b6c0}) t])
;; 
JOKER FUNC atomic_test.TestValueConcurrent has: 
;; (defn TestValueConcurrent
;;   {:added "1.0"
;;    :go "testValueConcurrent(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{13179860 0xc006346f80}) t])
;; 
JOKER FUNC atomic_test.TestValueLarge has: 
;; (defn TestValueLarge
;;   {:added "1.0"
;;    :go "testValueLarge(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{13178806 0xc00633bf20}) t])
;; 
JOKER FUNC atomic_test.TestValuePanic has: 
;; (defn TestValuePanic
;;   {:added "1.0"
;;    :go "testValuePanic(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{13179124 0xc006346620}) t])
;; 
JOKER FUNC base32.BenchmarkDecodeString has: 
;; (defn BenchmarkDecodeString
;;   {:added "1.0"
;;    :go "benchmarkDecodeString(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{3229348 0xc0013d9380}) b])
;; 
JOKER FUNC base32.BenchmarkEncodeToString has: 
;; (defn BenchmarkEncodeToString
;;   {:added "1.0"
;;    :go "benchmarkEncodeToString(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{3229178 0xc0013d8fa0}) b])
;; 
JOKER FUNC base32.NewDecoder has: 
;; (defn ^ABEND881(unrecognized Expr type *ast.SelectorExpr at: &{io Reader}) NewDecoder
;;   "NewDecoder constructs a new base32 stream decoder."
;;   {:added "1.0"
;;    :go "newDecoder(enc, r)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{3214400 Encoding}) enc, ^ABEND881(unrecognized Expr type *ast.SelectorExpr at: &{io Reader}) r])
;; 
JOKER FUNC base32.NewEncoder has: 
;; (defn ^ABEND881(unrecognized Expr type *ast.SelectorExpr at: &{io WriteCloser}) NewEncoder
;;   "NewEncoder returns a new base32 stream encoder. Data written to
;; the returned writer will be encoded using enc and then written to w.
;; Base32 encodings operate in 5-byte blocks; when finished
;; writing, the caller must Close the returned encoder to flush any
;; partially written blocks."
;;   {:added "1.0"
;;    :go "newEncoder(enc, w)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{3207760 Encoding}) enc, ^ABEND881(unrecognized Expr type *ast.SelectorExpr at: &{io Writer}) w])
;; 
JOKER FUNC base32.NewEncoding has: 
;; (defn ^{:encode ^ABEND881(unrecognized Expr type *ast.ArrayType at: &{3202347 0xc00149e460 byte}) encode, :decodemap ^ABEND881(unrecognized Expr type *ast.ArrayType at: &{3202367 0xc00149e4c0 byte}) decodeMap, :padchar padChar} NewEncoding
;;   "NewEncoding returns a new Encoding defined by the given alphabet,
;; which must be a 32-byte string."
;;   {:added "1.0"
;;    :go "newEncoding(encoder)"}
;;   [^String encoder])
;; 
JOKER FUNC base32.TestBig has: 
;; (defn TestBig
;;   {:added "1.0"
;;    :go "testBig(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{3226209 0xc00135ab80}) t])
;; 
JOKER FUNC base32.TestBufferedDecodingSameError has: 
;; (defn TestBufferedDecodingSameError
;;   {:added "1.0"
;;    :go "testBufferedDecodingSameError(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{3231510 0xc0014a95e0}) t])
;; 
JOKER FUNC base32.TestDecode has: 
;; (defn TestDecode
;;   {:added "1.0"
;;    :go "testDecode(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{3216981 0xc000a3ffe0}) t])
;; 
JOKER FUNC base32.TestDecodeCorrupt has: 
;; (defn TestDecodeCorrupt
;;   {:added "1.0"
;;    :go "testDecodeCorrupt(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{3225194 0xc000ed9780}) t])
;; 
JOKER FUNC base32.TestDecodeReadAll has: 
;; (defn TestDecodeReadAll
;;   {:added "1.0"
;;    :go "testDecodeReadAll(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{3235427 0xc000ef5920}) t])
;; 
JOKER FUNC base32.TestDecodeSmallBuffer has: 
;; (defn TestDecodeSmallBuffer
;;   {:added "1.0"
;;    :go "testDecodeSmallBuffer(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{3236046 0xc00130a360}) t])
;; 
JOKER FUNC base32.TestDecodeWithPadding has: 
;; (defn TestDecodeWithPadding
;;   {:added "1.0"
;;    :go "testDecodeWithPadding(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{3230590 0xc0014a8760}) t])
;; 
JOKER FUNC base32.TestDecodeWithWrongPadding has: 
;; (defn TestDecodeWithWrongPadding
;;   {:added "1.0"
;;    :go "testDecodeWithWrongPadding(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{3231172 0xc0014a9020}) t])
;; 
JOKER FUNC base32.TestDecoder has: 
;; (defn TestDecoder
;;   {:added "1.0"
;;    :go "testDecoder(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{3217781 0xc000522fc0}) t])
;; 
JOKER FUNC base32.TestDecoderBuffering has: 
;; (defn TestDecoderBuffering
;;   {:added "1.0"
;;    :go "testDecoderBuffering(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{3224580 0xc000ed8be0}) t])
;; 
JOKER FUNC base32.TestDecoderError has: 
;; (defn TestDecoderError
;;   "TestDecoderError verifies decode errors are propagated when there are no read
;; errors."
;;   {:added "1.0"
;;    :go "testDecoderError(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{3223293 0xc000e795c0}) t])
;; 
JOKER FUNC base32.TestDecoderIssue4779 has: 
;; (defn TestDecoderIssue4779
;;   {:added "1.0"
;;    :go "testDecoderIssue4779(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{3227929 0xc0013d85c0}) t])
;; 
JOKER FUNC base32.TestEncode has: 
;; (defn TestEncode
;;   {:added "1.0"
;;    :go "testEncode(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{3215832 0xc000a3e980}) t])
;; 
JOKER FUNC base32.TestEncodedDecodedLen has: 
;; (defn TestEncodedDecodedLen
;;   {:added "1.0"
;;    :go "testEncodedDecodedLen(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{3233717 0xc000fc1660}) t])
;; 
JOKER FUNC base32.TestEncoder has: 
;; (defn TestEncoder
;;   {:added "1.0"
;;    :go "testEncoder(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{3216023 0xc000a3ed80}) t])
;; 
JOKER FUNC base32.TestEncoderBuffering has: 
;; (defn TestEncoderBuffering
;;   {:added "1.0"
;;    :go "testEncoderBuffering(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{3216294 0xc000a3f340}) t])
;; 
JOKER FUNC base32.TestIssue20044 has: 
;; (defn TestIssue20044
;;   "TestIssue20044 tests that decoder.Read behaves correctly when the caller
;; supplied reader returns an error."
;;   {:added "1.0"
;;    :go "testIssue20044(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{3219384 0xc000802920}) t])
;; 
JOKER FUNC base32.TestNewLineCharacters has: 
;; (defn TestNewLineCharacters
;;   {:added "1.0"
;;    :go "testNewLineCharacters(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{3227408 0xc0013d80e0}) t])
;; 
JOKER FUNC base32.TestReaderEOF has: 
;; (defn TestReaderEOF
;;   "TestReaderEOF ensures decoder.Read behaves correctly when input data is
;; exhausted."
;;   {:added "1.0"
;;    :go "testReaderEOF(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{3223857 0xc000e79ee0}) t])
;; 
JOKER FUNC base32.TestWithCustomPadding has: 
;; (defn TestWithCustomPadding
;;   {:added "1.0"
;;    :go "testWithCustomPadding(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{3229544 0xc0013d97c0}) t])
;; 
JOKER FUNC base32.TestWithoutPadding has: 
;; (defn TestWithoutPadding
;;   {:added "1.0"
;;    :go "testWithoutPadding(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{3230066 0xc0013d9fc0}) t])
;; 
JOKER FUNC base32.TestWithoutPaddingClose has: 
;; (defn TestWithoutPaddingClose
;;   {:added "1.0"
;;    :go "testWithoutPaddingClose(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{3234829 0xc000ef4ee0}) t])
;; 
JOKER FUNC base32_test.ExampleEncoding_DecodeString has: 
;; (defn ExampleEncoding_DecodeString
;;   {:added "1.0"
;;    :go "exampleEncoding_DecodeString()"}
;;   [])
;; 
JOKER FUNC base32_test.ExampleEncoding_EncodeToString has: 
;; (defn ExampleEncoding_EncodeToString
;;   {:added "1.0"
;;    :go "exampleEncoding_EncodeToString()"}
;;   [])
;; 
JOKER FUNC base32_test.ExampleNewEncoder has: 
;; (defn ExampleNewEncoder
;;   {:added "1.0"
;;    :go "exampleNewEncoder()"}
;;   [])
;; 
JOKER FUNC base64.BenchmarkDecodeString has: 
;; (defn BenchmarkDecodeString
;;   {:added "1.0"
;;    :go "benchmarkDecodeString(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{3250959 0xc00064b260}) b])
;; 
JOKER FUNC base64.BenchmarkEncodeToString has: 
;; (defn BenchmarkEncodeToString
;;   {:added "1.0"
;;    :go "benchmarkEncodeToString(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{3250789 0xc00064ae80}) b])
;; 
JOKER FUNC base64.NewDecoder has: 
;; (defn ^ABEND881(unrecognized Expr type *ast.SelectorExpr at: &{io Reader}) NewDecoder
;;   "NewDecoder constructs a new base64 stream decoder."
;;   {:added "1.0"
;;    :go "newDecoder(enc, r)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{3266655 Encoding}) enc, ^ABEND881(unrecognized Expr type *ast.SelectorExpr at: &{io Reader}) r])
;; 
JOKER FUNC base64.NewEncoder has: 
;; (defn ^ABEND881(unrecognized Expr type *ast.SelectorExpr at: &{io WriteCloser}) NewEncoder
;;   "NewEncoder returns a new base64 stream encoder. Data written to
;; the returned writer will be encoded using enc and then written to w.
;; Base64 encodings operate in 4-byte blocks; when finished
;; writing, the caller must Close the returned encoder to flush any
;; partially written blocks."
;;   {:added "1.0"
;;    :go "newEncoder(enc, w)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{3258779 Encoding}) enc, ^ABEND881(unrecognized Expr type *ast.SelectorExpr at: &{io Writer}) w])
;; 
JOKER FUNC base64.NewEncoding has: 
;; (defn ^{:encode ^ABEND881(unrecognized Expr type *ast.ArrayType at: &{3252917 0xc001316e80 byte}) encode, :decodemap ^ABEND881(unrecognized Expr type *ast.ArrayType at: &{3252937 0xc001316ee0 byte}) decodeMap, :padchar padChar, :strict strict} NewEncoding
;;   "NewEncoding returns a new padded Encoding defined by the given alphabet,
;; which must be a 64-byte string that does not contain the padding character
;; or CR / LF ('\r', '\n').
;; The resulting Encoding uses the default padding character ('='),
;; which may be changed or disabled via WithPadding."
;;   {:added "1.0"
;;    :go "newEncoding(encoder)"}
;;   [^String encoder])
;; 
JOKER FUNC base64.TestBig has: 
;; (defn TestBig
;;   {:added "1.0"
;;    :go "testBig(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{3245806 0xc000476d60}) t])
;; 
JOKER FUNC base64.TestDecode has: 
;; (defn TestDecode
;;   {:added "1.0"
;;    :go "testDecode(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{3241911 0xc000c17e80}) t])
;; 
JOKER FUNC base64.TestDecodeCorrupt has: 
;; (defn TestDecodeCorrupt
;;   {:added "1.0"
;;    :go "testDecodeCorrupt(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{3243850 0xc000a4e3e0}) t])
;; 
JOKER FUNC base64.TestDecodedLen has: 
;; (defn TestDecodedLen
;;   {:added "1.0"
;;    :go "testDecodedLen(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{3245367 0xc0004763a0}) t])
;; 
JOKER FUNC base64.TestDecoder has: 
;; (defn TestDecoder
;;   {:added "1.0"
;;    :go "testDecoder(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{3242619 0xc000a4cba0}) t])
;; 
JOKER FUNC base64.TestDecoderBuffering has: 
;; (defn TestDecoderBuffering
;;   {:added "1.0"
;;    :go "testDecoderBuffering(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{3243236 0xc000a4d840}) t])
;; 
JOKER FUNC base64.TestDecoderIssue15656 has: 
;; (defn TestDecoderIssue15656
;;   {:added "1.0"
;;    :go "testDecoderIssue15656(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{3250285 0xc00064a660}) t])
;; 
JOKER FUNC base64.TestDecoderIssue3577 has: 
;; (defn TestDecoderIssue3577
;;   "tests that we don't ignore errors from our underlying reader"
;;   {:added "1.0"
;;    :go "testDecoderIssue3577(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{3247791 0xc00047ace0}) t])
;; 
JOKER FUNC base64.TestDecoderIssue4779 has: 
;; (defn TestDecoderIssue4779
;;   {:added "1.0"
;;    :go "testDecoderIssue4779(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{3248444 0xc00047b780}) t])
;; 
JOKER FUNC base64.TestDecoderIssue7733 has: 
;; (defn TestDecoderIssue7733
;;   {:added "1.0"
;;    :go "testDecoderIssue7733(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{3249987 0xc00064a160}) t])
;; 
JOKER FUNC base64.TestDecoderRaw has: 
;; (defn TestDecoderRaw
;;   {:added "1.0"
;;    :go "testDecoderRaw(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{3251377 0xc00064bc60}) t])
;; 
JOKER FUNC base64.TestEncode has: 
;; (defn TestEncode
;;   {:added "1.0"
;;    :go "testEncode(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{3240711 0xc000c166e0}) t])
;; 
JOKER FUNC base64.TestEncodedLen has: 
;; (defn TestEncodedLen
;;   {:added "1.0"
;;    :go "testEncodedLen(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{3244851 0xc000a4f860}) t])
;; 
JOKER FUNC base64.TestEncoder has: 
;; (defn TestEncoder
;;   {:added "1.0"
;;    :go "testEncoder(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{3240953 0xc000c16c20}) t])
;; 
JOKER FUNC base64.TestEncoderBuffering has: 
;; (defn TestEncoderBuffering
;;   {:added "1.0"
;;    :go "testEncoderBuffering(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{3241224 0xc000c171e0}) t])
;; 
JOKER FUNC base64.TestNewLineCharacters has: 
;; (defn TestNewLineCharacters
;;   {:added "1.0"
;;    :go "testNewLineCharacters(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{3246673 0xc000477ca0}) t])
;; 
JOKER FUNC base64_test.Example has: 
;; (defn Example
;;   {:added "1.0"
;;    :go "example()"}
;;   [])
;; 
JOKER FUNC base64_test.ExampleEncoding_DecodeString has: 
;; (defn ExampleEncoding_DecodeString
;;   {:added "1.0"
;;    :go "exampleEncoding_DecodeString()"}
;;   [])
;; 
JOKER FUNC base64_test.ExampleEncoding_EncodeToString has: 
;; (defn ExampleEncoding_EncodeToString
;;   {:added "1.0"
;;    :go "exampleEncoding_EncodeToString()"}
;;   [])
;; 
JOKER FUNC base64_test.ExampleNewEncoder has: 
;; (defn ExampleNewEncoder
;;   {:added "1.0"
;;    :go "exampleNewEncoder()"}
;;   [])
;; 
JOKER FUNC bidi.AppendReverse has: 
;; (defn ^[ABEND042(cannot find typename bidi.byte)] AppendReverse
;;   "AppendReverse reverses the order of characters of in, appends them to out,
;; and returns the result. Modifiers will still follow the runes they modify.
;; Brackets are replaced with their counterparts."
;;   {:added "1.0"
;;    :go "appendReverse(out, in)"}
;;   [^ABEND881(unrecognized Expr type *ast.ArrayType at: &{15676196 <nil> byte}) out, ^ABEND881(unrecognized Expr type *ast.ArrayType at: &{15676196 <nil> byte}) in])
;; 
JOKER FUNC bidi.DefaultDirection has: 
;; (defn ^ABEND881(unrecognized Expr type *ast.FuncType at: &{15671645 0xc005026510 <nil>}) DefaultDirection
;;   "DefaultDirection sets the default direction for a Paragraph. The direction is
;; overridden if the text contains directional characters."
;;   {:added "1.0"
;;    :go "defaultDirection(d)"}
;;   [d])
;; 
JOKER FUNC bidi.Lookup has: 
;; (defn ^[p sz] Lookup
;;   "Lookup returns properties for the first rune in s and the width in bytes of
;; its encoding. The size will be 0 if s does not hold enough bytes to complete
;; the encoding."
;;   {:added "1.0"
;;    :go "lookup(s)"}
;;   [^ABEND881(unrecognized Expr type *ast.ArrayType at: &{15521618 <nil> byte}) s])
;; 
JOKER FUNC bidi.LookupRune has: 
(defn ^[p size] LookupRune
  "LookupRune returns properties for r."
  {:added "1.0"
   :go "lookupRune(r)"}
  [r])

JOKER FUNC bidi.LookupString has: 
(defn ^[p sz] LookupString
  "LookupString returns properties for the first rune in s and the width in
bytes of its encoding. The size will be 0 if s does not hold enough bytes to
complete the encoding."
  {:added "1.0"
   :go "lookupString(s)"}
  [^String s])

JOKER FUNC bidi.ReverseString has: 
(defn ^String ReverseString
  "ReverseString reverses the order of characters in s and returns a new string.
Modifiers will still follow the runes they modify. Brackets are replaced with
their counterparts."
  {:added "1.0"
   :go "reverseString(s)"}
  [^String s])

JOKER FUNC bidirule.Direction has: 
;; (defn ^ABEND881(unrecognized Expr type *ast.SelectorExpr at: &{bidi Direction}) Direction
;;   "Direction reports the direction of the given label as defined by RFC 5893.
;; The Bidi Rule does not have to be applied to labels of the category
;; LeftToRight."
;;   {:added "1.0"
;;    :go "direction(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.ArrayType at: &{15478490 <nil> byte}) b])
;; 
JOKER FUNC bidirule.DirectionString has: 
;; (defn ^ABEND881(unrecognized Expr type *ast.SelectorExpr at: &{bidi Direction}) DirectionString
;;   "DirectionString reports the direction of the given label as defined by RFC
;; 5893. The Bidi Rule does not have to be applied to labels of the category
;; LeftToRight."
;;   {:added "1.0"
;;    :go "directionString(s)"}
;;   [^String s])
;; 
JOKER FUNC bidirule.New has: 
(defn ^{:state state, :hasrtl hasRTL, :seen ^Int seen} New
  "New returns a Transformer that verifies that input adheres to the Bidi Rule."
  {:added "1.0"
   :go "new()"}
  [])

JOKER FUNC bidirule.Valid has: 
;; (defn ^ABEND042(cannot find typename bidirule.bool) Valid
;;   "Valid reports whether b conforms to the BiDi rule."
;;   {:added "1.0"
;;    :go "valid(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.ArrayType at: &{15479265 <nil> byte}) b])
;; 
JOKER FUNC bidirule.ValidString has: 
;; (defn ^ABEND042(cannot find typename bidirule.bool) ValidString
;;   "ValidString reports whether s conforms to the BiDi rule."
;;   {:added "1.0"
;;    :go "validString(s)"}
;;   [^String s])
;; 
JOKER FUNC big.BenchmarkAddMulVVW has: 
;; (defn BenchmarkAddMulVVW
;;   {:added "1.0"
;;    :go "benchmarkAddMulVVW(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{6783202 0xc002e061a0}) b])
;; 
JOKER FUNC big.BenchmarkAddVV has: 
;; (defn BenchmarkAddVV
;;   {:added "1.0"
;;    :go "benchmarkAddVV(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{6776305 0xc002de0d80}) b])
;; 
JOKER FUNC big.BenchmarkAddVW has: 
;; (defn BenchmarkAddVW
;;   {:added "1.0"
;;    :go "benchmarkAddVW(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{6779126 0xc002df3a60}) b])
;; 
JOKER FUNC big.BenchmarkBinomial has: 
;; (defn BenchmarkBinomial
;;   {:added "1.0"
;;    :go "benchmarkBinomial(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{6728432 0xc002d3b400}) b])
;; 
JOKER FUNC big.BenchmarkBitset has: 
;; (defn BenchmarkBitset
;;   {:added "1.0"
;;    :go "benchmarkBitset(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{6763326 0xc002da1ac0}) b])
;; 
JOKER FUNC big.BenchmarkBitsetNeg has: 
;; (defn BenchmarkBitsetNeg
;;   {:added "1.0"
;;    :go "benchmarkBitsetNeg(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{6763497 0xc002da1fe0}) b])
;; 
JOKER FUNC big.BenchmarkBitsetNegOrig has: 
;; (defn BenchmarkBitsetNegOrig
;;   {:added "1.0"
;;    :go "benchmarkBitsetNegOrig(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{6763854 0xc002daea00}) b])
;; 
JOKER FUNC big.BenchmarkBitsetOrig has: 
;; (defn BenchmarkBitsetOrig
;;   {:added "1.0"
;;    :go "benchmarkBitsetOrig(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{6763671 0xc002dae520}) b])
;; 
JOKER FUNC big.BenchmarkDecimalConversion has: 
;; (defn BenchmarkDecimalConversion
;;   {:added "1.0"
;;    :go "benchmarkDecimalConversion(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{7096414 0xc003277e40}) b])
;; 
JOKER FUNC big.BenchmarkExp has: 
;; (defn BenchmarkExp
;;   {:added "1.0"
;;    :go "benchmarkExp(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{6744957 0xc002d64420}) b])
;; 
JOKER FUNC big.BenchmarkExp2 has: 
;; (defn BenchmarkExp2
;;   {:added "1.0"
;;    :go "benchmarkExp2(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{6746812 0xc002d64b20}) b])
;; 
JOKER FUNC big.BenchmarkExp3Power has: 
;; (defn BenchmarkExp3Power
;;   {:added "1.0"
;;    :go "benchmarkExp3Power(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{6818878 0xc002e8a5a0}) b])
;; 
JOKER FUNC big.BenchmarkFibo has: 
;; (defn BenchmarkFibo
;;   {:added "1.0"
;;    :go "benchmarkFibo(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{6819789 0xc002e8b8c0}) b])
;; 
JOKER FUNC big.BenchmarkFloatAdd has: 
;; (defn BenchmarkFloatAdd
;;   {:added "1.0"
;;    :go "benchmarkFloatAdd(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{7086146 0xc003253ec0}) b])
;; 
JOKER FUNC big.BenchmarkFloatSqrt has: 
;; (defn BenchmarkFloatSqrt
;;   {:added "1.0"
;;    :go "benchmarkFloatSqrt(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{6938051 0xc0030509a0}) b])
;; 
JOKER FUNC big.BenchmarkFloatString has: 
;; (defn BenchmarkFloatString
;;   {:added "1.0"
;;    :go "benchmarkFloatString(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{7096603 0xc00327c2c0}) b])
;; 
JOKER FUNC big.BenchmarkFloatSub has: 
;; (defn BenchmarkFloatSub
;;   {:added "1.0"
;;    :go "benchmarkFloatSub(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{7086525 0xc0032569a0}) b])
;; 
JOKER FUNC big.BenchmarkGCD100000x100000 has: 
;; (defn BenchmarkGCD100000x100000
;;   {:added "1.0"
;;    :go "benchmarkGCD100000x100000(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{6718221 0xc002cfdaa0}) b])
;; 
JOKER FUNC big.BenchmarkGCD10000x10000 has: 
;; (defn BenchmarkGCD10000x10000
;;   {:added "1.0"
;;    :go "benchmarkGCD10000x10000(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{6718072 0xc002cfd7a0}) b])
;; 
JOKER FUNC big.BenchmarkGCD10000x100000 has: 
;; (defn BenchmarkGCD10000x100000
;;   {:added "1.0"
;;    :go "benchmarkGCD10000x100000(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{6718146 0xc002cfd920}) b])
;; 
JOKER FUNC big.BenchmarkGCD1000x1000 has: 
;; (defn BenchmarkGCD1000x1000
;;   {:added "1.0"
;;    :go "benchmarkGCD1000x1000(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{6717854 0xc002cfd320}) b])
;; 
JOKER FUNC big.BenchmarkGCD1000x10000 has: 
;; (defn BenchmarkGCD1000x10000
;;   {:added "1.0"
;;    :go "benchmarkGCD1000x10000(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{6717926 0xc002cfd4a0}) b])
;; 
JOKER FUNC big.BenchmarkGCD1000x100000 has: 
;; (defn BenchmarkGCD1000x100000
;;   {:added "1.0"
;;    :go "benchmarkGCD1000x100000(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{6717999 0xc002cfd620}) b])
;; 
JOKER FUNC big.BenchmarkGCD100x100 has: 
;; (defn BenchmarkGCD100x100
;;   {:added "1.0"
;;    :go "benchmarkGCD100x100(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{6717570 0xc002cfcd20}) b])
;; 
JOKER FUNC big.BenchmarkGCD100x1000 has: 
;; (defn BenchmarkGCD100x1000
;;   {:added "1.0"
;;    :go "benchmarkGCD100x1000(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{6717640 0xc002cfcea0}) b])
;; 
JOKER FUNC big.BenchmarkGCD100x10000 has: 
;; (defn BenchmarkGCD100x10000
;;   {:added "1.0"
;;    :go "benchmarkGCD100x10000(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{6717711 0xc002cfd020}) b])
;; 
JOKER FUNC big.BenchmarkGCD100x100000 has: 
;; (defn BenchmarkGCD100x100000
;;   {:added "1.0"
;;    :go "benchmarkGCD100x100000(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{6717783 0xc002cfd1a0}) b])
;; 
JOKER FUNC big.BenchmarkGCD10x10 has: 
;; (defn BenchmarkGCD10x10
;;   {:added "1.0"
;;    :go "benchmarkGCD10x10(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{6717223 0xc002cfc5a0}) b])
;; 
JOKER FUNC big.BenchmarkGCD10x100 has: 
;; (defn BenchmarkGCD10x100
;;   {:added "1.0"
;;    :go "benchmarkGCD10x100(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{6717291 0xc002cfc720}) b])
;; 
JOKER FUNC big.BenchmarkGCD10x1000 has: 
;; (defn BenchmarkGCD10x1000
;;   {:added "1.0"
;;    :go "benchmarkGCD10x1000(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{6717360 0xc002cfc8a0}) b])
;; 
JOKER FUNC big.BenchmarkGCD10x10000 has: 
;; (defn BenchmarkGCD10x10000
;;   {:added "1.0"
;;    :go "benchmarkGCD10x10000(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{6717430 0xc002cfca20}) b])
;; 
JOKER FUNC big.BenchmarkGCD10x100000 has: 
;; (defn BenchmarkGCD10x100000
;;   {:added "1.0"
;;    :go "benchmarkGCD10x100000(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{6717501 0xc002cfcba0}) b])
;; 
JOKER FUNC big.BenchmarkHilbert has: 
;; (defn BenchmarkHilbert
;;   {:added "1.0"
;;    :go "benchmarkHilbert(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{6715981 0xc002cf2cc0}) b])
;; 
JOKER FUNC big.BenchmarkIntSqr has: 
;; (defn BenchmarkIntSqr
;;   {:added "1.0"
;;    :go "benchmarkIntSqr(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{6773200 0xc002dd3ae0}) b])
;; 
JOKER FUNC big.BenchmarkLeafSize has: 
;; (defn BenchmarkLeafSize
;;   {:added "1.0"
;;    :go "benchmarkLeafSize(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{7009541 0xc003136f60}) b])
;; 
JOKER FUNC big.BenchmarkModInverse has: 
;; (defn BenchmarkModInverse
;;   {:added "1.0"
;;    :go "benchmarkModInverse(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{6768024 0xc002dc03e0}) b])
;; 
JOKER FUNC big.BenchmarkModSqrt225_3Mod4 has: 
;; (defn BenchmarkModSqrt225_3Mod4
;;   {:added "1.0"
;;    :go "benchmarkModSqrt225_3Mod4(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{6764465 0xc002daf840}) b])
;; 
JOKER FUNC big.BenchmarkModSqrt225_Tonelli has: 
;; (defn BenchmarkModSqrt225_Tonelli
;;   {:added "1.0"
;;    :go "benchmarkModSqrt225_Tonelli(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{6764305 0xc002daf420}) b])
;; 
JOKER FUNC big.BenchmarkModSqrt231_5Mod8 has: 
;; (defn BenchmarkModSqrt231_5Mod8
;;   {:added "1.0"
;;    :go "benchmarkModSqrt231_5Mod8(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{6764882 0xc002db2300}) b])
;; 
JOKER FUNC big.BenchmarkModSqrt231_Tonelli has: 
;; (defn BenchmarkModSqrt231_Tonelli
;;   {:added "1.0"
;;    :go "benchmarkModSqrt231_Tonelli(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{6764636 0xc002dafcc0}) b])
;; 
JOKER FUNC big.BenchmarkMul has: 
;; (defn BenchmarkMul
;;   {:added "1.0"
;;    :go "benchmarkMul(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{6810717 0xc002e6e440}) b])
;; 
JOKER FUNC big.BenchmarkNatSetBytes has: 
;; (defn BenchmarkNatSetBytes
;;   {:added "1.0"
;;    :go "benchmarkNatSetBytes(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{6822331 0xc002e97700}) b])
;; 
JOKER FUNC big.BenchmarkNatSqr has: 
;; (defn BenchmarkNatSqr
;;   {:added "1.0"
;;    :go "benchmarkNatSqr(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{6822119 0xc002e97260}) b])
;; 
JOKER FUNC big.BenchmarkParseFloatLargeExp has: 
;; (defn BenchmarkParseFloatLargeExp
;;   {:added "1.0"
;;    :go "benchmarkParseFloatLargeExp(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{6931658 0xc003039820}) b])
;; 
JOKER FUNC big.BenchmarkParseFloatSmallExp has: 
;; (defn BenchmarkParseFloatSmallExp
;;   {:added "1.0"
;;    :go "benchmarkParseFloatSmallExp(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{6931251 0xc0030390a0}) b])
;; 
JOKER FUNC big.BenchmarkProbablyPrime has: 
;; (defn BenchmarkProbablyPrime
;;   {:added "1.0"
;;    :go "benchmarkProbablyPrime(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{6803904 0xc002e47700}) b])
;; 
JOKER FUNC big.BenchmarkQuoRem has: 
;; (defn BenchmarkQuoRem
;;   {:added "1.0"
;;    :go "benchmarkQuoRem(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{6733832 0xc002d563e0}) b])
;; 
JOKER FUNC big.BenchmarkScan has: 
;; (defn BenchmarkScan
;;   {:added "1.0"
;;    :go "benchmarkScan(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{7008511 0xc003131680}) b])
;; 
JOKER FUNC big.BenchmarkScanPi has: 
;; (defn BenchmarkScanPi
;;   {:added "1.0"
;;    :go "benchmarkScanPi(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{7008110 0xc003130ce0}) b])
;; 
JOKER FUNC big.BenchmarkSqrt has: 
;; (defn BenchmarkSqrt
;;   {:added "1.0"
;;    :go "benchmarkSqrt(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{6772856 0xc002dd30e0}) b])
;; 
JOKER FUNC big.BenchmarkString has: 
;; (defn BenchmarkString
;;   {:added "1.0"
;;    :go "benchmarkString(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{7009080 0xc003136460}) b])
;; 
JOKER FUNC big.BenchmarkStringPiParallel has: 
;; (defn BenchmarkStringPiParallel
;;   {:added "1.0"
;;    :go "benchmarkStringPiParallel(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{7008246 0xc003131060}) b])
;; 
JOKER FUNC big.BenchmarkSubVV has: 
;; (defn BenchmarkSubVV
;;   {:added "1.0"
;;    :go "benchmarkSubVV(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{6776612 0xc002de1540}) b])
;; 
JOKER FUNC big.BenchmarkSubVW has: 
;; (defn BenchmarkSubVW
;;   {:added "1.0"
;;    :go "benchmarkSubVW(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{6779432 0xc002df6200}) b])
;; 
JOKER FUNC big.BenchmarkZeroShifts has: 
;; (defn BenchmarkZeroShifts
;;   {:added "1.0"
;;    :go "benchmarkZeroShifts(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{6812062 0xc002e78640}) b])
;; 
JOKER FUNC big.Jacobi has: 
;; (defn ^Int Jacobi
;;   "Jacobi returns the Jacobi symbol (x/y), either +1, -1, or 0.
;; The y argument must be an odd integer."
;;   {:added "1.0"
;;    :go "jacobi(x, y)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{7116146 Int}) x, ^ABEND881(unrecognized Expr type *ast.StarExpr at: &{7116146 Int}) y])
;; 
JOKER FUNC big.LeafSizeHelper has: 
;; (defn LeafSizeHelper
;;   {:added "1.0"
;;    :go "leafSizeHelper(b, base, size)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{7009820 0xc003137720}) b, ^Int base, ^Int size])
;; 
JOKER FUNC big.NewFloat has: 
(defn ^{:prec prec, :mode mode, :acc acc, :form form, :neg neg, :mant mant, :exp exp} NewFloat
  "NewFloat allocates and returns a new Float set to x,
with precision 53 and rounding mode ToNearestEven.
NewFloat panics with ErrNaN if x is a NaN."
  {:added "1.0"
   :go "newFloat(x)"}
  [x])

JOKER FUNC big.NewInt has: 
(defn ^{:neg neg, :abs abs} NewInt
  "NewInt allocates and returns a new Int set to x."
  {:added "1.0"
   :go "newInt(x)"}
  [x])

JOKER FUNC big.NewRat has: 
(defn ^{:a a, :b b} NewRat
  "NewRat creates a new Rat with numerator a and denominator b."
  {:added "1.0"
   :go "newRat(a, b)"}
  [a, b])

JOKER FUNC big.ParseFloat has: 
(defn ^[f b err] ParseFloat
  "ParseFloat is like f.Parse(s, base) with f set to the given precision
and rounding mode."
  {:added "1.0"
   :go "parseFloat(s, base, prec, mode)"}
  [^String s, ^Int base, ^Int prec, mode])

JOKER FUNC big.TestAbsZ has: 
;; (defn TestAbsZ
;;   {:added "1.0"
;;    :go "testAbsZ(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{6724458 0xc002d27400}) t])
;; 
JOKER FUNC big.TestAppendText has: 
;; (defn TestAppendText
;;   {:added "1.0"
;;    :go "testAppendText(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{6785348 0xc002e11200}) t])
;; 
JOKER FUNC big.TestBinomial has: 
;; (defn TestBinomial
;;   {:added "1.0"
;;    :go "testBinomial(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{6727771 0xc002d3a3c0}) t])
;; 
JOKER FUNC big.TestBit has: 
;; (defn TestBit
;;   {:added "1.0"
;;    :go "testBit(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{6820395 0xc002e94800}) t])
;; 
JOKER FUNC big.TestBitLen has: 
;; (defn TestBitLen
;;   {:added "1.0"
;;    :go "testBitLen(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{6735558 0xc002d56fc0}) t])
;; 
JOKER FUNC big.TestBitSet has: 
;; (defn TestBitSet
;;   {:added "1.0"
;;    :go "testBitSet(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{6762818 0xc002da0da0}) t])
;; 
JOKER FUNC big.TestBits has: 
;; (defn TestBits
;;   {:added "1.0"
;;    :go "testBits(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{6730486 0xc002d44440}) t])
;; 
JOKER FUNC big.TestBitwise has: 
;; (defn TestBitwise
;;   {:added "1.0"
;;    :go "testBitwise(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{6765111 0xc002db2940}) t])
;; 
JOKER FUNC big.TestBytes has: 
;; (defn TestBytes
;;   {:added "1.0"
;;    :go "testBytes(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{6731596 0xc002d45c00}) t])
;; 
JOKER FUNC big.TestCalibrate has: 
;; (defn TestCalibrate
;;   {:added "1.0"
;;    :go "testCalibrate(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{6719255 0xc002d0a240}) t])
;; 
JOKER FUNC big.TestCmp has: 
;; (defn TestCmp
;;   {:added "1.0"
;;    :go "testCmp(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{6806516 0xc002e5eae0}) t])
;; 
JOKER FUNC big.TestCmpAbs has: 
;; (defn TestCmpAbs
;;   {:added "1.0"
;;    :go "testCmpAbs(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{6755878 0xc002d83920}) t])
;; 
JOKER FUNC big.TestDecimalInit has: 
;; (defn TestDecimalInit
;;   {:added "1.0"
;;    :go "testDecimalInit(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{7094161 0xc003271040}) t])
;; 
JOKER FUNC big.TestDecimalRounding has: 
;; (defn TestDecimalRounding
;;   {:added "1.0"
;;    :go "testDecimalRounding(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{7094842 0xc003271d80}) t])
;; 
JOKER FUNC big.TestDecimalString has: 
;; (defn TestDecimalString
;;   {:added "1.0"
;;    :go "testDecimalString(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{7093681 0xc0032705e0}) t])
;; 
JOKER FUNC big.TestDivisionSigns has: 
;; (defn TestDivisionSigns
;;   {:added "1.0"
;;    :go "testDivisionSigns(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{6728865 0xc002d40060}) t])
;; 
JOKER FUNC big.TestExp has: 
;; (defn TestExp
;;   {:added "1.0"
;;    :go "testExp(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{6744057 0xc002d5f000}) t])
;; 
JOKER FUNC big.TestExpNN has: 
;; (defn TestExpNN
;;   {:added "1.0"
;;    :go "testExpNN(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{6818515 0xc002e85d20}) t])
;; 
JOKER FUNC big.TestFibo has: 
;; (defn TestFibo
;;   {:added "1.0"
;;    :go "testFibo(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{6819583 0xc002e8b4a0}) t])
;; 
JOKER FUNC big.TestFloat32Distribution has: 
;; (defn TestFloat32Distribution
;;   {:added "1.0"
;;    :go "testFloat32Distribution(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{6906602 0xc002fef7e0}) t])
;; 
JOKER FUNC big.TestFloat32SpecialCases has: 
;; (defn TestFloat32SpecialCases
;;   {:added "1.0"
;;    :go "testFloat32SpecialCases(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{6856945 0xc002f17ee0}) t])
;; 
JOKER FUNC big.TestFloat64Distribution has: 
;; (defn TestFloat64Distribution
;;   {:added "1.0"
;;    :go "testFloat64Distribution(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{6907702 0xc002ff2a00}) t])
;; 
JOKER FUNC big.TestFloat64SpecialCases has: 
;; (defn TestFloat64SpecialCases
;;   {:added "1.0"
;;    :go "testFloat64SpecialCases(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{6858493 0xc002f1b380}) t])
;; 
JOKER FUNC big.TestFloat64Text has: 
;; (defn TestFloat64Text
;;   {:added "1.0"
;;    :go "testFloat64Text(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{6916415 0xc003009d40}) t])
;; 
JOKER FUNC big.TestFloatAbs has: 
;; (defn TestFloatAbs
;;   {:added "1.0"
;;    :go "testFloatAbs(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{7067220 0xc003213820}) t])
;; 
JOKER FUNC big.TestFloatAdd has: 
;; (defn TestFloatAdd
;;   "TestFloatAdd tests Float.Add/Sub by comparing the result of a "manual"
;; addition/subtraction of arguments represented by Bits values with the
;; respective Float addition/subtraction for a variety of precisions
;; and rounding modes."
;;   {:added "1.0"
;;    :go "testFloatAdd(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{7069313 0xc003219d80}) t])
;; 
JOKER FUNC big.TestFloatAdd32 has: 
;; (defn TestFloatAdd32
;;   "TestFloatAdd32 tests that Float.Add/Sub of numbers with
;; 24bit mantissa behaves like float32 addition/subtraction
;; (excluding denormal numbers)."
;;   {:added "1.0"
;;    :go "testFloatAdd32(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{7071252 0xc00321fae0}) t])
;; 
JOKER FUNC big.TestFloatAdd64 has: 
;; (defn TestFloatAdd64
;;   "TestFloatAdd64 tests that Float.Add/Sub of numbers with
;; 53bit mantissa behaves like float64 addition/subtraction."
;;   {:added "1.0"
;;    :go "testFloatAdd64(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{7072163 0xc003226a60}) t])
;; 
JOKER FUNC big.TestFloatAddRoundZero has: 
;; (defn TestFloatAddRoundZero
;;   "TestFloatAddRoundZero tests Float.Add/Sub rounding when the result is exactly zero.
;; x + (-x) or x - x for non-zero x should be +0 in all cases except when
;; the rounding mode is ToNegativeInf in which case it should be -0."
;;   {:added "1.0"
;;    :go "testFloatAddRoundZero(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{7070431 0xc00321ede0}) t])
;; 
JOKER FUNC big.TestFloatArithmeticOverflow has: 
;; (defn TestFloatArithmeticOverflow
;;   {:added "1.0"
;;    :go "testFloatArithmeticOverflow(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{7080693 0xc0032483e0}) t])
;; 
JOKER FUNC big.TestFloatArithmeticRounding has: 
;; (defn TestFloatArithmeticRounding
;;   "For rounding modes ToNegativeInf and ToPositiveInf, rounding is affected
;; by the sign of the value to be rounded. Test that rounding happens after
;; the sign of a result has been set.
;; This test uses specific values that are known to fail if rounding is
;; "factored" out before setting the result sign."
;;   {:added "1.0"
;;    :go "testFloatArithmeticRounding(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{7084066 0xc00324d120}) t])
;; 
JOKER FUNC big.TestFloatArithmeticSpecialValues has: 
;; (defn TestFloatArithmeticSpecialValues
;;   "TestFloatArithmeticSpecialValues tests that Float operations produce the
;; correct results for combinations of zero (±0), finite (±1 and ±2.71828),
;; and infinite (±Inf) operands."
;;   {:added "1.0"
;;    :go "testFloatArithmeticSpecialValues(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{7079060 0xc003242620}) t])
;; 
JOKER FUNC big.TestFloatCmpSpecialValues has: 
;; (defn TestFloatCmpSpecialValues
;;   "TestFloatCmpSpecialValues tests that Cmp produces the correct results for
;; combinations of zero (±0), finite (±1 and ±2.71828), and infinite (±Inf)
;; operands."
;;   {:added "1.0"
;;    :go "testFloatCmpSpecialValues(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{7085400 0xc003253060}) t])
;; 
JOKER FUNC big.TestFloatCorruptGob has: 
;; (defn TestFloatCorruptGob
;;   {:added "1.0"
;;    :go "testFloatCorruptGob(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{6836774 0xc002ed4b40}) t])
;; 
JOKER FUNC big.TestFloatFloat32 has: 
;; (defn TestFloatFloat32
;;   {:added "1.0"
;;    :go "testFloatFloat32(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{7054879 0xc0031f2060}) t])
;; 
JOKER FUNC big.TestFloatFloat64 has: 
;; (defn TestFloatFloat64
;;   {:added "1.0"
;;    :go "testFloatFloat64(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{7059854 0xc0031fe980}) t])
;; 
JOKER FUNC big.TestFloatFormat has: 
;; (defn TestFloatFormat
;;   {:added "1.0"
;;    :go "testFloatFormat(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{6926711 0xc00302ea60}) t])
;; 
JOKER FUNC big.TestFloatGobEncoding has: 
;; (defn TestFloatGobEncoding
;;   {:added "1.0"
;;    :go "testFloatGobEncoding(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{6835071 0xc002ecaf60}) t])
;; 
JOKER FUNC big.TestFloatInc has: 
;; (defn TestFloatInc
;;   {:added "1.0"
;;    :go "testFloatInc(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{7068096 0xc003218c20}) t])
;; 
JOKER FUNC big.TestFloatInt has: 
;; (defn TestFloatInt
;;   {:added "1.0"
;;    :go "testFloatInt(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{7064851 0xc00320aa40}) t])
;; 
JOKER FUNC big.TestFloatInt64 has: 
;; (defn TestFloatInt64
;;   {:added "1.0"
;;    :go "testFloatInt64(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{7053544 0xc0031ee9e0}) t])
;; 
JOKER FUNC big.TestFloatIsInt has: 
;; (defn TestFloatIsInt
;;   {:added "1.0"
;;    :go "testFloatIsInt(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{7040855 0xc0031c2da0}) t])
;; 
JOKER FUNC big.TestFloatJSONEncoding has: 
;; (defn TestFloatJSONEncoding
;;   {:added "1.0"
;;    :go "testFloatJSONEncoding(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{6837358 0xc002ed5860}) t])
;; 
JOKER FUNC big.TestFloatMantExp has: 
;; (defn TestFloatMantExp
;;   {:added "1.0"
;;    :go "testFloatMantExp(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{7038249 0xc0031b54a0}) t])
;; 
JOKER FUNC big.TestFloatMantExpAliasing has: 
;; (defn TestFloatMantExpAliasing
;;   {:added "1.0"
;;    :go "testFloatMantExpAliasing(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{7038815 0xc0031b81e0}) t])
;; 
JOKER FUNC big.TestFloatMinPrec has: 
;; (defn TestFloatMinPrec
;;   {:added "1.0"
;;    :go "testFloatMinPrec(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{7037072 0xc0031b1a40}) t])
;; 
JOKER FUNC big.TestFloatMul has: 
;; (defn TestFloatMul
;;   "TestFloatMul tests Float.Mul/Quo by comparing the result of a "manual"
;; multiplication/division of arguments represented by Bits values with the
;; respective Float multiplication/division for a variety of precisions
;; and rounding modes."
;;   {:added "1.0"
;;    :go "testFloatMul(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{7073677 0xc00322a820}) t])
;; 
JOKER FUNC big.TestFloatMul64 has: 
;; (defn TestFloatMul64
;;   "TestFloatMul64 tests that Float.Mul/Quo of numbers with
;; 53bit mantissa behaves like float64 multiplication/division."
;;   {:added "1.0"
;;    :go "testFloatMul64(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{7074765 0xc00322b920}) t])
;; 
JOKER FUNC big.TestFloatNeg has: 
;; (defn TestFloatNeg
;;   {:added "1.0"
;;    :go "testFloatNeg(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{7067634 0xc003218160}) t])
;; 
JOKER FUNC big.TestFloatPredicates has: 
;; (defn TestFloatPredicates
;;   {:added "1.0"
;;    :go "testFloatPredicates(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{7040158 0xc0031b9e00}) t])
;; 
JOKER FUNC big.TestFloatQuo has: 
;; (defn TestFloatQuo
;;   {:added "1.0"
;;    :go "testFloatQuo(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{7076438 0xc003235ea0}) t])
;; 
JOKER FUNC big.TestFloatQuoSmoke has: 
;; (defn TestFloatQuoSmoke
;;   "TestFloatQuoSmoke tests all divisions x/y for values x, y in the range [-n, +n];
;; it serves as a smoke test for basic correctness of division."
;;   {:added "1.0"
;;    :go "testFloatQuoSmoke(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{7077908 0xc00323b480}) t])
;; 
JOKER FUNC big.TestFloatRat has: 
;; (defn TestFloatRat
;;   {:added "1.0"
;;    :go "testFloatRat(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{7065972 0xc00320bf40}) t])
;; 
JOKER FUNC big.TestFloatRound has: 
;; (defn TestFloatRound
;;   "TestFloatRound tests basic rounding."
;;   {:added "1.0"
;;    :go "testFloatRound(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{7043289 0xc0031cb3c0}) t])
;; 
JOKER FUNC big.TestFloatRound24 has: 
;; (defn TestFloatRound24
;;   "TestFloatRound24 tests that rounding a float64 to 24 bits
;; matches IEEE-754 rounding to nearest when converting a
;; float64 to a float32 (excluding denormal numbers)."
;;   {:added "1.0"
;;    :go "testFloatRound24(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{7047626 0xc0031d3aa0}) t])
;; 
JOKER FUNC big.TestFloatScan has: 
;; (defn TestFloatScan
;;   {:added "1.0"
;;    :go "testFloatScan(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{6932125 0xc00303e020}) t])
;; 
JOKER FUNC big.TestFloatSetFloat64 has: 
;; (defn TestFloatSetFloat64
;;   {:added "1.0"
;;    :go "testFloatSetFloat64(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{7049452 0xc0031d9dc0}) t])
;; 
JOKER FUNC big.TestFloatSetFloat64String has: 
;; (defn TestFloatSetFloat64String
;;   {:added "1.0"
;;    :go "testFloatSetFloat64String(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{6913704 0xc0030029c0}) t])
;; 
JOKER FUNC big.TestFloatSetInf has: 
;; (defn TestFloatSetInf
;;   {:added "1.0"
;;    :go "testFloatSetInf(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{7052247 0xc0031e6fe0}) t])
;; 
JOKER FUNC big.TestFloatSetInt has: 
;; (defn TestFloatSetInt
;;   {:added "1.0"
;;    :go "testFloatSetInt(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{7050715 0xc0031e3540}) t])
;; 
JOKER FUNC big.TestFloatSetInt64 has: 
;; (defn TestFloatSetInt64
;;   {:added "1.0"
;;    :go "testFloatSetInt64(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{7048662 0xc0031d8ee0}) t])
;; 
JOKER FUNC big.TestFloatSetMantExp has: 
;; (defn TestFloatSetMantExp
;;   {:added "1.0"
;;    :go "testFloatSetMantExp(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{7039132 0xc0031b8800}) t])
;; 
JOKER FUNC big.TestFloatSetPrec has: 
;; (defn TestFloatSetPrec
;;   {:added "1.0"
;;    :go "testFloatSetPrec(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{7035994 0xc0031b04a0}) t])
;; 
JOKER FUNC big.TestFloatSetRat has: 
;; (defn TestFloatSetRat
;;   {:added "1.0"
;;    :go "testFloatSetRat(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{7051440 0xc0031e6180}) t])
;; 
JOKER FUNC big.TestFloatSetUint64 has: 
;; (defn TestFloatSetUint64
;;   {:added "1.0"
;;    :go "testFloatSetUint64(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{7047944 0xc0031d8140}) t])
;; 
JOKER FUNC big.TestFloatSign has: 
;; (defn TestFloatSign
;;   {:added "1.0"
;;    :go "testFloatSign(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{7037523 0xc0031b4480}) t])
;; 
JOKER FUNC big.TestFloatSqrt has: 
;; (defn TestFloatSqrt
;;   {:added "1.0"
;;    :go "testFloatSqrt(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{6934056 0xc00304c2a0}) t])
;; 
JOKER FUNC big.TestFloatSqrt64 has: 
;; (defn TestFloatSqrt64
;;   "TestFloatSqrt64 tests that Float.Sqrt of numbers with 53bit mantissa
;; behaves like float math.Sqrt."
;;   {:added "1.0"
;;    :go "testFloatSqrt64(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{6933786 0xc00303fc40}) t])
;; 
JOKER FUNC big.TestFloatSqrtSpecial has: 
;; (defn TestFloatSqrtSpecial
;;   {:added "1.0"
;;    :go "testFloatSqrtSpecial(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{6937594 0xc00304de00}) t])
;; 
JOKER FUNC big.TestFloatString has: 
;; (defn TestFloatString
;;   {:added "1.0"
;;    :go "testFloatString(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{6851699 0xc002f0f980}) t])
;; 
JOKER FUNC big.TestFloatText has: 
;; (defn TestFloatText
;;   {:added "1.0"
;;    :go "testFloatText(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{6921939 0xc00301dfc0}) t])
;; 
JOKER FUNC big.TestFloatUint64 has: 
;; (defn TestFloatUint64
;;   {:added "1.0"
;;    :go "testFloatUint64(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{7052716 0xc0031e7a60}) t])
;; 
JOKER FUNC big.TestFloatZeroValue has: 
;; (defn TestFloatZeroValue
;;   {:added "1.0"
;;    :go "testFloatZeroValue(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{7034335 0xc003195a20}) t])
;; 
JOKER FUNC big.TestFormat has: 
;; (defn TestFormat
;;   {:added "1.0"
;;    :go "testFormat(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{6791595 0xc002e2a240}) t])
;; 
JOKER FUNC big.TestFromBits has: 
;; (defn TestFromBits
;;   {:added "1.0"
;;    :go "testFromBits(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{6828917 0xc002eabb20}) t])
;; 
JOKER FUNC big.TestFunNN has: 
;; (defn TestFunNN
;;   {:added "1.0"
;;    :go "testFunNN(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{6808610 0xc002e65ae0}) t])
;; 
JOKER FUNC big.TestFunVV has: 
;; (defn TestFunVV
;;   {:added "1.0"
;;    :go "testFunVV(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{6775456 0xc002ddf920}) t])
;; 
JOKER FUNC big.TestFunVW has: 
;; (defn TestFunVW
;;   {:added "1.0"
;;    :go "testFunVW(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{6778507 0xc002df2d00}) t])
;; 
JOKER FUNC big.TestFunVWW has: 
;; (defn TestFunVWW
;;   {:added "1.0"
;;    :go "testFunVWW(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{6781878 0xc002e00720}) t])
;; 
JOKER FUNC big.TestFunWW has: 
;; (defn TestFunWW
;;   {:added "1.0"
;;    :go "testFunWW(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{6774274 0xc002dd94c0}) t])
;; 
JOKER FUNC big.TestGcd has: 
;; (defn TestGcd
;;   {:added "1.0"
;;    :go "testGcd(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{6751433 0xc002d71ac0}) t])
;; 
JOKER FUNC big.TestGetString has: 
;; (defn TestGetString
;;   {:added "1.0"
;;    :go "testGetString(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{6785942 0xc002e11ec0}) t])
;; 
JOKER FUNC big.TestGobEncodingNilIntInSlice has: 
;; (defn TestGobEncodingNilIntInSlice
;;   "Sending a nil Int pointer (inside a slice) on a round trip through gob should yield a zero.
;; TODO: top-level nils."
;;   {:added "1.0"
;;    :go "testGobEncodingNilIntInSlice(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{6995215 0xc00310f2e0}) t])
;; 
JOKER FUNC big.TestGobEncodingNilRatInSlice has: 
;; (defn TestGobEncodingNilRatInSlice
;;   "Sending a nil Rat pointer (inside a slice) on a round trip through gob should yield a zero.
;; TODO: top-level nils."
;;   {:added "1.0"
;;    :go "testGobEncodingNilRatInSlice(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{6842657 0xc002eec7c0}) t])
;; 
JOKER FUNC big.TestHilbert has: 
;; (defn TestHilbert
;;   {:added "1.0"
;;    :go "testHilbert(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{6715922 0xc002cf2b60}) t])
;; 
JOKER FUNC big.TestInt64 has: 
;; (defn TestInt64
;;   {:added "1.0"
;;    :go "testInt64(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{6757045 0xc002d8aca0}) t])
;; 
JOKER FUNC big.TestIntGobEncoding has: 
;; (defn TestIntGobEncoding
;;   {:added "1.0"
;;    :go "testIntGobEncoding(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{6994385 0xc00310e460}) t])
;; 
JOKER FUNC big.TestIntJSONEncoding has: 
;; (defn TestIntJSONEncoding
;;   {:added "1.0"
;;    :go "testIntJSONEncoding(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{6995741 0xc00310fd80}) t])
;; 
JOKER FUNC big.TestIntText has: 
;; (defn TestIntText
;;   {:added "1.0"
;;    :go "testIntText(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{6784951 0xc002e108e0}) t])
;; 
JOKER FUNC big.TestIntXMLEncoding has: 
;; (defn TestIntXMLEncoding
;;   {:added "1.0"
;;    :go "testIntXMLEncoding(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{6996298 0xc003116900}) t])
;; 
JOKER FUNC big.TestIsFinite has: 
;; (defn TestIsFinite
;;   {:added "1.0"
;;    :go "testIsFinite(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{6912952 0xc002fffe40}) t])
;; 
JOKER FUNC big.TestIsInt has: 
;; (defn TestIsInt
;;   {:added "1.0"
;;    :go "testIsInt(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{6899164 0xc002fd0400}) t])
;; 
JOKER FUNC big.TestIssue20490 has: 
;; (defn TestIssue20490
;;   {:added "1.0"
;;    :go "testIssue20490(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{7072912 0xc0032278e0}) t])
;; 
JOKER FUNC big.TestIssue22830 has: 
;; (defn TestIssue22830
;;   "We can't test this together with the other Exp tests above because
;; it requires a different receiver setup."
;;   {:added "1.0"
;;    :go "testIssue22830(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{6772393 0xc002dd2680}) t])
;; 
JOKER FUNC big.TestIssue2379 has: 
;; (defn TestIssue2379
;;   {:added "1.0"
;;    :go "testIssue2379(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{6904541 0xc002fdec00}) t])
;; 
JOKER FUNC big.TestIssue2607 has: 
;; (defn TestIssue2607
;;   {:added "1.0"
;;    :go "testIssue2607(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{6771457 0xc002dcb1a0}) t])
;; 
JOKER FUNC big.TestIssue3521 has: 
;; (defn TestIssue3521
;;   {:added "1.0"
;;    :go "testIssue3521(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{6905339 0xc002fdff40}) t])
;; 
JOKER FUNC big.TestIssue6866 has: 
;; (defn TestIssue6866
;;   {:added "1.0"
;;    :go "testIssue6866(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{7075608 0xc003234b80}) t])
;; 
JOKER FUNC big.TestIssue820 has: 
;; (defn TestIssue820
;;   {:added "1.0"
;;    :go "testIssue820(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{6903695 0xc002fdb400}) t])
;; 
JOKER FUNC big.TestJacobi has: 
;; (defn TestJacobi
;;   {:added "1.0"
;;    :go "testJacobi(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{6770542 0xc002dc5a40}) t])
;; 
JOKER FUNC big.TestJacobiPanic has: 
;; (defn TestJacobiPanic
;;   {:added "1.0"
;;    :go "testJacobiPanic(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{6771151 0xc002dcace0}) t])
;; 
JOKER FUNC big.TestLsh has: 
;; (defn TestLsh
;;   {:added "1.0"
;;    :go "testLsh(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{6754188 0xc002d7d5c0}) t])
;; 
JOKER FUNC big.TestLshRsh has: 
;; (defn TestLshRsh
;;   {:added "1.0"
;;    :go "testLshRsh(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{6754905 0xc002d82740}) t])
;; 
JOKER FUNC big.TestLshSelf has: 
;; (defn TestLshSelf
;;   {:added "1.0"
;;    :go "testLshSelf(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{6754559 0xc002d7dea0}) t])
;; 
JOKER FUNC big.TestLucasPseudoprimes has: 
;; (defn TestLucasPseudoprimes
;;   {:added "1.0"
;;    :go "testLucasPseudoprimes(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{6805023 0xc002e56a40}) t])
;; 
JOKER FUNC big.TestMaxBase has: 
;; (defn TestMaxBase
;;   {:added "1.0"
;;    :go "testMaxBase(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{6997086 0xc003117680}) t])
;; 
JOKER FUNC big.TestMillerRabinPseudoprimes has: 
;; (defn TestMillerRabinPseudoprimes
;;   {:added "1.0"
;;    :go "testMillerRabinPseudoprimes(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{6804688 0xc002e56480}) t])
;; 
JOKER FUNC big.TestModInverse has: 
;; (defn TestModInverse
;;   {:added "1.0"
;;    :go "testModInverse(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{6767028 0xc002db8b40}) t])
;; 
JOKER FUNC big.TestModSqrt has: 
;; (defn TestModSqrt
;;   {:added "1.0"
;;    :go "testModSqrt(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{6769368 0xc002dc4060}) t])
;; 
JOKER FUNC big.TestModW has: 
;; (defn TestModW
;;   {:added "1.0"
;;    :go "testModW(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{6813121 0xc002e7e0c0}) t])
;; 
JOKER FUNC big.TestMontgomery has: 
;; (defn TestMontgomery
;;   {:added "1.0"
;;    :go "testMontgomery(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{6815661 0xc002e7ec40}) t])
;; 
JOKER FUNC big.TestMul has: 
;; (defn TestMul
;;   {:added "1.0"
;;    :go "testMul(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{6726458 0xc002d329c0}) t])
;; 
JOKER FUNC big.TestMulAddWWW has: 
;; (defn TestMulAddWWW
;;   {:added "1.0"
;;    :go "testMulAddWWW(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{6782962 0xc002e01b80}) t])
;; 
JOKER FUNC big.TestMulBits has: 
;; (defn TestMulBits
;;   {:added "1.0"
;;    :go "testMulBits(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{6825557 0xc002ea1960}) t])
;; 
JOKER FUNC big.TestMulRangeN has: 
;; (defn TestMulRangeN
;;   {:added "1.0"
;;    :go "testMulRangeN(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{6809641 0xc002e69280}) t])
;; 
JOKER FUNC big.TestMulRangeZ has: 
;; (defn TestMulRangeZ
;;   {:added "1.0"
;;    :go "testMulRangeZ(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{6727337 0xc002d33980}) t])
;; 
JOKER FUNC big.TestMulUnbalanced has: 
;; (defn TestMulUnbalanced
;;   "TestMulUnbalanced tests that multiplying numbers of different lengths
;; does not cause deep recursion and in turn allocate too much memory.
;; Test case for issue 3807."
;;   {:added "1.0"
;;    :go "testMulUnbalanced(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{6810275 0xc002e69c80}) t])
;; 
JOKER FUNC big.TestMulWW has: 
;; (defn TestMulWW
;;   {:added "1.0"
;;    :go "testMulWW(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{6782345 0xc002e011e0}) t])
;; 
JOKER FUNC big.TestNLZ has: 
;; (defn TestNLZ
;;   {:added "1.0"
;;    :go "testNLZ(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{6810870 0xc002e6e880}) t])
;; 
JOKER FUNC big.TestNormBits has: 
;; (defn TestNormBits
;;   {:added "1.0"
;;    :go "testNormBits(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{6826556 0xc002ea70e0}) t])
;; 
JOKER FUNC big.TestNot has: 
;; (defn TestNot
;;   {:added "1.0"
;;    :go "testNot(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{6765980 0xc002db3ee0}) t])
;; 
JOKER FUNC big.TestProbablyPrime has: 
;; (defn TestProbablyPrime
;;   {:added "1.0"
;;    :go "testProbablyPrime(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{6803033 0xc002e46600}) t])
;; 
JOKER FUNC big.TestProdZZ has: 
;; (defn TestProdZZ
;;   {:added "1.0"
;;    :go "testProdZZ(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{6725397 0xc002d310c0}) t])
;; 
JOKER FUNC big.TestQuo has: 
;; (defn TestQuo
;;   {:added "1.0"
;;    :go "testQuo(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{6732528 0xc002d4ea20}) t])
;; 
JOKER FUNC big.TestQuoStepD6 has: 
;; (defn TestQuoStepD6
;;   {:added "1.0"
;;    :go "testQuoStepD6(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{6733041 0xc002d4f7c0}) t])
;; 
JOKER FUNC big.TestRatAbs has: 
;; (defn TestRatAbs
;;   {:added "1.0"
;;    :go "testRatAbs(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{6899438 0xc002fd0a80}) t])
;; 
JOKER FUNC big.TestRatBin has: 
;; (defn TestRatBin
;;   {:added "1.0"
;;    :go "testRatBin(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{6902817 0xc002fd5a20}) t])
;; 
JOKER FUNC big.TestRatCmp has: 
;; (defn TestRatCmp
;;   {:added "1.0"
;;    :go "testRatCmp(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{6898906 0xc002fc7d80}) t])
;; 
JOKER FUNC big.TestRatGobEncoding has: 
;; (defn TestRatGobEncoding
;;   {:added "1.0"
;;    :go "testRatGobEncoding(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{6841901 0xc002ee5ac0}) t])
;; 
JOKER FUNC big.TestRatInv has: 
;; (defn TestRatInv
;;   {:added "1.0"
;;    :go "testRatInv(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{6900041 0xc002fd19e0}) t])
;; 
JOKER FUNC big.TestRatJSONEncoding has: 
;; (defn TestRatJSONEncoding
;;   {:added "1.0"
;;    :go "testRatJSONEncoding(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{6843702 0xc002eed4c0}) t])
;; 
JOKER FUNC big.TestRatNeg has: 
;; (defn TestRatNeg
;;   {:added "1.0"
;;    :go "testRatNeg(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{6899759 0xc002fd12c0}) t])
;; 
JOKER FUNC big.TestRatScan has: 
;; (defn TestRatScan
;;   {:added "1.0"
;;    :go "testRatScan(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{6850782 0xc002f0e440}) t])
;; 
JOKER FUNC big.TestRatSetFrac64Rat has: 
;; (defn TestRatSetFrac64Rat
;;   {:added "1.0"
;;    :go "testRatSetFrac64Rat(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{6904320 0xc002fde6a0}) t])
;; 
JOKER FUNC big.TestRatSetString has: 
;; (defn TestRatSetString
;;   {:added "1.0"
;;    :go "testRatSetString(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{6850250 0xc002f059c0}) t])
;; 
JOKER FUNC big.TestRatSign has: 
;; (defn TestRatSign
;;   {:added "1.0"
;;    :go "testRatSign(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{6898170 0xc002fc70e0}) t])
;; 
JOKER FUNC big.TestRatXMLEncoding has: 
;; (defn TestRatXMLEncoding
;;   {:added "1.0"
;;    :go "testRatXMLEncoding(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{6844232 0xc002eedf60}) t])
;; 
JOKER FUNC big.TestRsh has: 
;; (defn TestRsh
;;   {:added "1.0"
;;    :go "testRsh(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{6752846 0xc002d75a60}) t])
;; 
JOKER FUNC big.TestRshSelf has: 
;; (defn TestRshSelf
;;   {:added "1.0"
;;    :go "testRshSelf(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{6753217 0xc002d7c340}) t])
;; 
JOKER FUNC big.TestScan has: 
;; (defn TestScan
;;   {:added "1.0"
;;    :go "testScan(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{6792518 0xc002e2b6e0}) t])
;; 
JOKER FUNC big.TestScanBase has: 
;; (defn TestScanBase
;;   {:added "1.0"
;;    :go "testScanBase(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{7000933 0xc00312ca80}) t])
;; 
JOKER FUNC big.TestScanPi has: 
;; (defn TestScanPi
;;   "Test case for BenchmarkScanPi."
;;   {:added "1.0"
;;    :go "testScanPi(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{7007679 0xc0031302e0}) t])
;; 
JOKER FUNC big.TestScanPiParallel has: 
;; (defn TestScanPiParallel
;;   {:added "1.0"
;;    :go "testScanPiParallel(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{7007925 0xc0031308c0}) t])
;; 
JOKER FUNC big.TestSet has: 
;; (defn TestSet
;;   {:added "1.0"
;;    :go "testSet(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{6808280 0xc002e650e0}) t])
;; 
JOKER FUNC big.TestSetBytes has: 
;; (defn TestSetBytes
;;   {:added "1.0"
;;    :go "testSetBytes(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{6731260 0xc002d45560}) t])
;; 
JOKER FUNC big.TestSetFloat64NonFinite has: 
;; (defn TestSetFloat64NonFinite
;;   "TestSetFloat64NonFinite checks that SetFloat64 of a non-finite value
;; returns nil."
;;   {:added "1.0"
;;    :go "testSetFloat64NonFinite(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{6908893 0xc002ff3c80}) t])
;; 
JOKER FUNC big.TestSetString has: 
;; (defn TestSetString
;;   {:added "1.0"
;;    :go "testSetString(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{6786492 0xc002e18ae0}) t])
;; 
JOKER FUNC big.TestSetZ has: 
;; (defn TestSetZ
;;   {:added "1.0"
;;    :go "testSetZ(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{6724229 0xc002d26de0}) t])
;; 
JOKER FUNC big.TestShiftLeft has: 
;; (defn TestShiftLeft
;;   {:added "1.0"
;;    :go "testShiftLeft(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{6811305 0xc002e6f300}) t])
;; 
JOKER FUNC big.TestShiftRight has: 
;; (defn TestShiftRight
;;   {:added "1.0"
;;    :go "testShiftRight(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{6811793 0xc002e6ffe0}) t])
;; 
JOKER FUNC big.TestSignZ has: 
;; (defn TestSignZ
;;   {:added "1.0"
;;    :go "testSignZ(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{6724041 0xc002d268a0}) t])
;; 
JOKER FUNC big.TestSqr has: 
;; (defn TestSqr
;;   {:added "1.0"
;;    :go "testSqr(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{6821690 0xc002e966e0}) t])
;; 
JOKER FUNC big.TestSqrt has: 
;; (defn TestSqrt
;;   {:added "1.0"
;;    :go "testSqrt(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{6771584 0xc002dcb4c0}) t])
;; 
JOKER FUNC big.TestSticky has: 
;; (defn TestSticky
;;   {:added "1.0"
;;    :go "testSticky(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{6820987 0xc002e95660}) t])
;; 
JOKER FUNC big.TestString has: 
;; (defn TestString
;;   {:added "1.0"
;;    :go "testString(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{6998237 0xc003122ca0}) t])
;; 
JOKER FUNC big.TestStringPowers has: 
;; (defn TestStringPowers
;;   {:added "1.0"
;;    :go "testStringPowers(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{7010528 0xc00313e5c0}) t])
;; 
JOKER FUNC big.TestSumZZ has: 
;; (defn TestSumZZ
;;   {:added "1.0"
;;    :go "testSumZZ(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{6724953 0xc002d302c0}) t])
;; 
JOKER FUNC big.TestUint64 has: 
;; (defn TestUint64
;;   {:added "1.0"
;;    :go "testUint64(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{6757925 0xc002d8bb20}) t])
;; 
JOKER FUNC big.TestZeroRat has: 
;; (defn TestZeroRat
;;   {:added "1.0"
;;    :go "testZeroRat(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{6897441 0xc002fbdfe0}) t])
;; 
JOKER FUNC big_test.ExampleFloat_Add has: 
;; (defn ExampleFloat_Add
;;   {:added "1.0"
;;    :go "exampleFloat_Add()"}
;;   [])
;; 
JOKER FUNC big_test.ExampleFloat_Cmp has: 
;; (defn ExampleFloat_Cmp
;;   {:added "1.0"
;;    :go "exampleFloat_Cmp()"}
;;   [])
;; 
JOKER FUNC big_test.ExampleFloat_Scan has: 
;; (defn ExampleFloat_Scan
;;   {:added "1.0"
;;    :go "exampleFloat_Scan()"}
;;   [])
;; 
JOKER FUNC big_test.ExampleFloat_shift has: 
;; (defn ExampleFloat_shift
;;   {:added "1.0"
;;    :go "exampleFloat_shift()"}
;;   [])
;; 
JOKER FUNC big_test.ExampleInt_Scan has: 
;; (defn ExampleInt_Scan
;;   {:added "1.0"
;;    :go "exampleInt_Scan()"}
;;   [])
;; 
JOKER FUNC big_test.ExampleInt_SetString has: 
;; (defn ExampleInt_SetString
;;   {:added "1.0"
;;    :go "exampleInt_SetString()"}
;;   [])
;; 
JOKER FUNC big_test.ExampleRat_Scan has: 
;; (defn ExampleRat_Scan
;;   {:added "1.0"
;;    :go "exampleRat_Scan()"}
;;   [])
;; 
JOKER FUNC big_test.ExampleRat_SetString has: 
;; (defn ExampleRat_SetString
;;   {:added "1.0"
;;    :go "exampleRat_SetString()"}
;;   [])
;; 
JOKER FUNC big_test.ExampleRoundingMode has: 
;; (defn ExampleRoundingMode
;;   {:added "1.0"
;;    :go "exampleRoundingMode()"}
;;   [])
;; 
JOKER FUNC big_test.Example_eConvergents has: 
;; (defn Example_eConvergents
;;   "This example demonstrates how to use big.Rat to compute the
;; first 15 terms in the sequence of rational convergents for
;; the constant e (base of natural logarithm)."
;;   {:added "1.0"
;;    :go "example_eConvergents()"}
;;   [])
;; 
JOKER FUNC big_test.Example_fibonacci has: 
;; (defn Example_fibonacci
;;   "This example demonstrates how to use big.Int to compute the smallest
;; Fibonacci number with 100 decimal digits and to test whether it is prime."
;;   {:added "1.0"
;;    :go "example_fibonacci()"}
;;   [])
;; 
JOKER FUNC big_test.Example_sqrt2 has: 
;; (defn Example_sqrt2
;;   "This example shows how to use big.Float to compute the square root of 2 with
;; a precision of 200 bits, and how to print the result as a decimal number."
;;   {:added "1.0"
;;    :go "example_sqrt2()"}
;;   [])
;; 
JOKER FUNC binary.BenchmarkLittleEndianPutUint16 has: 
;; (defn BenchmarkLittleEndianPutUint16
;;   {:added "1.0"
;;    :go "benchmarkLittleEndianPutUint16(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{3303646 0xc0014effa0}) b])
;; 
JOKER FUNC binary.BenchmarkLittleEndianPutUint32 has: 
;; (defn BenchmarkLittleEndianPutUint32
;;   {:added "1.0"
;;    :go "benchmarkLittleEndianPutUint32(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{3303794 0xc0014f2300}) b])
;; 
JOKER FUNC binary.BenchmarkLittleEndianPutUint64 has: 
;; (defn BenchmarkLittleEndianPutUint64
;;   {:added "1.0"
;;    :go "benchmarkLittleEndianPutUint64(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{3303942 0xc0014f2660}) b])
;; 
JOKER FUNC binary.BenchmarkPutUint16 has: 
;; (defn BenchmarkPutUint16
;;   {:added "1.0"
;;    :go "benchmarkPutUint16(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{3303236 0xc0014ef580}) b])
;; 
JOKER FUNC binary.BenchmarkPutUint32 has: 
;; (defn BenchmarkPutUint32
;;   {:added "1.0"
;;    :go "benchmarkPutUint32(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{3303369 0xc0014ef8e0}) b])
;; 
JOKER FUNC binary.BenchmarkPutUint64 has: 
;; (defn BenchmarkPutUint64
;;   {:added "1.0"
;;    :go "benchmarkPutUint64(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{3303502 0xc0014efc40}) b])
;; 
JOKER FUNC binary.BenchmarkPutUvarint32 has: 
;; (defn BenchmarkPutUvarint32
;;   {:added "1.0"
;;    :go "benchmarkPutUvarint32(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{3307174 0xc0015c6a60}) b])
;; 
JOKER FUNC binary.BenchmarkPutUvarint64 has: 
;; (defn BenchmarkPutUvarint64
;;   {:added "1.0"
;;    :go "benchmarkPutUvarint64(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{3307382 0xc0015c6f40}) b])
;; 
JOKER FUNC binary.BenchmarkReadInts has: 
;; (defn BenchmarkReadInts
;;   {:added "1.0"
;;    :go "benchmarkReadInts(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{3301610 0xc001448a40}) b])
;; 
JOKER FUNC binary.BenchmarkReadSlice1000Int32s has: 
;; (defn BenchmarkReadSlice1000Int32s
;;   {:added "1.0"
;;    :go "benchmarkReadSlice1000Int32s(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{3300951 0xc001445a40}) b])
;; 
JOKER FUNC binary.BenchmarkReadStruct has: 
;; (defn BenchmarkReadStruct
;;   {:added "1.0"
;;    :go "benchmarkReadStruct(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{3301212 0xc001448080}) b])
;; 
JOKER FUNC binary.BenchmarkWriteInts has: 
;; (defn BenchmarkWriteInts
;;   {:added "1.0"
;;    :go "benchmarkWriteInts(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{3302400 0xc001449f80}) b])
;; 
JOKER FUNC binary.BenchmarkWriteSlice1000Int32s has: 
;; (defn BenchmarkWriteSlice1000Int32s
;;   {:added "1.0"
;;    :go "benchmarkWriteSlice1000Int32s(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{3302987 0xc0014eef20}) b])
;; 
JOKER FUNC binary.PutUvarint has: 
;; (defn ^Int PutUvarint
;;   "PutUvarint encodes a uint64 into buf and returns the number of bytes written.
;; If the buffer is too small, PutUvarint will panic."
;;   {:added "1.0"
;;    :go "putUvarint(buf, x)"}
;;   [^ABEND881(unrecognized Expr type *ast.ArrayType at: &{3272143 <nil> byte}) buf, x])
;; 
JOKER FUNC binary.PutVarint has: 
;; (defn ^Int PutVarint
;;   "PutVarint encodes an int64 into buf and returns the number of bytes written.
;; If the buffer is too small, PutVarint will panic."
;;   {:added "1.0"
;;    :go "putVarint(buf, x)"}
;;   [^ABEND881(unrecognized Expr type *ast.ArrayType at: &{3273008 <nil> byte}) buf, x])
;; 
JOKER FUNC binary.Read has: 
;; (defn ^Error Read
;;   "Read reads structured binary data from r into data.
;; Data must be a pointer to a fixed-size value or a slice
;; of fixed-size values.
;; Bytes read from r are decoded using the specified byte order
;; and written to successive fields of the data.
;; When decoding boolean values, a zero byte is decoded as false, and
;; any other non-zero byte is decoded as true.
;; When reading into structs, the field data for fields with
;; blank (_) field names is skipped; i.e., blank field names
;; may be used for padding.
;; When reading into a struct, all non-blank fields must be exported
;; or Read may panic.
;; 
;; The error is EOF only if no bytes were read.
;; If an EOF happens after reading some but not all the bytes,
;; Read returns ErrUnexpectedEOF."
;;   {:added "1.0"
;;    :go "read(r, order, data)"}
;;   [^ABEND881(unrecognized Expr type *ast.SelectorExpr at: &{io Reader}) r, order, ^ABEND881(unrecognized Expr type *ast.InterfaceType at: &{3279567 0xc001350b10 false}) data])
;; 
JOKER FUNC binary.ReadUvarint has: 
;; (defn ^[ABEND042(cannot find typename binary.uint64) Error] ReadUvarint
;;   "ReadUvarint reads an encoded unsigned integer from r and returns it as a uint64."
;;   {:added "1.0"
;;    :go "readUvarint(r)"}
;;   [^ABEND881(unrecognized Expr type *ast.SelectorExpr at: &{io ByteReader}) r])
;; 
JOKER FUNC binary.ReadVarint has: 
;; (defn ^[ABEND042(cannot find typename binary.int64) Error] ReadVarint
;;   "ReadVarint reads an encoded signed integer from r and returns it as an int64."
;;   {:added "1.0"
;;    :go "readVarint(r)"}
;;   [^ABEND881(unrecognized Expr type *ast.SelectorExpr at: &{io ByteReader}) r])
;; 
JOKER FUNC binary.Size has: 
;; (defn ^Int Size
;;   "Size returns how many bytes Write would generate to encode the value v, which
;; must be a fixed-size value or a slice of fixed-size values, or a pointer to such data.
;; If v is neither of these, Size returns -1."
;;   {:added "1.0"
;;    :go "size(v)"}
;;   [^ABEND881(unrecognized Expr type *ast.InterfaceType at: &{3284258 0xc001379530 false}) v])
;; 
JOKER FUNC binary.TestBigEndianPtrWrite has: 
;; (defn TestBigEndianPtrWrite
;;   {:added "1.0"
;;    :go "testBigEndianPtrWrite(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{3294458 0xc0012b4080}) t])
;; 
JOKER FUNC binary.TestBigEndianRead has: 
;; (defn TestBigEndianRead
;;   {:added "1.0"
;;    :go "testBigEndianRead(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{3294301 0xc0012add40}) t])
;; 
JOKER FUNC binary.TestBigEndianWrite has: 
;; (defn TestBigEndianWrite
;;   {:added "1.0"
;;    :go "testBigEndianWrite(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{3294378 0xc0012adee0}) t])
;; 
JOKER FUNC binary.TestBlankFields has: 
;; (defn TestBlankFields
;;   {:added "1.0"
;;    :go "testBlankFields(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{3297531 0xc001440080}) t])
;; 
JOKER FUNC binary.TestBufferTooSmall has: 
;; (defn TestBufferTooSmall
;;   {:added "1.0"
;;    :go "testBufferTooSmall(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{3305969 0xc0015c1140}) t])
;; 
JOKER FUNC binary.TestConstants has: 
;; (defn TestConstants
;;   {:added "1.0"
;;    :go "testConstants(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{3304480 0xc0014f3020}) t])
;; 
JOKER FUNC binary.TestEarlyBoundsChecks has: 
;; (defn TestEarlyBoundsChecks
;;   {:added "1.0"
;;    :go "testEarlyBoundsChecks(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{3300437 0xc0014453a0}) t])
;; 
JOKER FUNC binary.TestLittleEndianPtrWrite has: 
;; (defn TestLittleEndianPtrWrite
;;   {:added "1.0"
;;    :go "testLittleEndianPtrWrite(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{3294220 0xc0012adb80}) t])
;; 
JOKER FUNC binary.TestLittleEndianRead has: 
;; (defn TestLittleEndianRead
;;   {:added "1.0"
;;    :go "testLittleEndianRead(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{3294045 0xc0012ad840}) t])
;; 
JOKER FUNC binary.TestLittleEndianWrite has: 
;; (defn TestLittleEndianWrite
;;   {:added "1.0"
;;    :go "testLittleEndianWrite(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{3294131 0xc0012ad9e0}) t])
;; 
JOKER FUNC binary.TestNonCanonicalZero has: 
;; (defn TestNonCanonicalZero
;;   {:added "1.0"
;;    :go "testNonCanonicalZero(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{3306975 0xc0015c6660}) t])
;; 
JOKER FUNC binary.TestOverflow has: 
;; (defn TestOverflow
;;   {:added "1.0"
;;    :go "testOverflow(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{3306708 0xc0015c6040}) t])
;; 
JOKER FUNC binary.TestReadBool has: 
;; (defn TestReadBool
;;   {:added "1.0"
;;    :go "testReadBool(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{3294867 0xc0012b49a0}) t])
;; 
JOKER FUNC binary.TestReadBoolSlice has: 
;; (defn TestReadBoolSlice
;;   {:added "1.0"
;;    :go "testReadBoolSlice(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{3295301 0xc0012b52c0}) t])
;; 
JOKER FUNC binary.TestReadErrorMsg has: 
;; (defn TestReadErrorMsg
;;   {:added "1.0"
;;    :go "testReadErrorMsg(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{3298915 0xc0014418a0}) t])
;; 
JOKER FUNC binary.TestReadSlice has: 
;; (defn TestReadSlice
;;   {:added "1.0"
;;    :go "testReadSlice(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{3294529 0xc0012b4240}) t])
;; 
JOKER FUNC binary.TestReadTruncated has: 
;; (defn TestReadTruncated
;;   {:added "1.0"
;;    :go "testReadTruncated(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{3299365 0xc001444180}) t])
;; 
JOKER FUNC binary.TestSliceRoundTrip has: 
;; (defn TestSliceRoundTrip
;;   {:added "1.0"
;;    :go "testSliceRoundTrip(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{3295774 0xc0012b5b60}) t])
;; 
JOKER FUNC binary.TestUnexportedRead has: 
;; (defn TestUnexportedRead
;;   {:added "1.0"
;;    :go "testUnexportedRead(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{3298626 0xc0014412e0}) t])
;; 
JOKER FUNC binary.TestUvarint has: 
;; (defn TestUvarint
;;   {:added "1.0"
;;    :go "testUvarint(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{3305804 0xc0015c0da0}) t])
;; 
JOKER FUNC binary.TestVarint has: 
;; (defn TestVarint
;;   {:added "1.0"
;;    :go "testVarint(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{3305617 0xc0015c08a0}) t])
;; 
JOKER FUNC binary.TestWriteSlice has: 
;; (defn TestWriteSlice
;;   {:added "1.0"
;;    :go "testWriteSlice(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{3294705 0xc0012b4600}) t])
;; 
JOKER FUNC binary.TestWriteT has: 
;; (defn TestWriteT
;;   {:added "1.0"
;;    :go "testWriteT(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{3296615 0xc0012b6e00}) t])
;; 
JOKER FUNC binary.Uvarint has: 
;; (defn ^[ABEND042(cannot find typename binary.uint64) Int] Uvarint
;;   "Uvarint decodes a uint64 from buf and returns that value and the
;; number of bytes read (> 0). If an error occurred, the value is 0
;; and the number of bytes n is <= 0 meaning:
;; 
;; 	n == 0: buf too small
;; 	n  < 0: value larger than 64 bits (overflow)
;; 	        and -n is the number of bytes read"
;;   {:added "1.0"
;;    :go "uvarint(buf)"}
;;   [^ABEND881(unrecognized Expr type *ast.ArrayType at: &{3272599 <nil> byte}) buf])
;; 
JOKER FUNC binary.Varint has: 
;; (defn ^[ABEND042(cannot find typename binary.int64) Int] Varint
;;   "Varint decodes an int64 from buf and returns that value and the
;; number of bytes read (> 0). If an error occurred, the value is 0
;; and the number of bytes n is <= 0 with the following meaning:
;; 
;; 	n == 0: buf too small
;; 	n  < 0: value larger than 64 bits (overflow)
;; 	        and -n is the number of bytes read"
;;   {:added "1.0"
;;    :go "varint(buf)"}
;;   [^ABEND881(unrecognized Expr type *ast.ArrayType at: &{3273454 <nil> byte}) buf])
;; 
JOKER FUNC binary.Write has: 
;; (defn ^Error Write
;;   "Write writes the binary representation of data into w.
;; Data must be a fixed-size value or a slice of fixed-size
;; values, or a pointer to such data.
;; Boolean values encode as one byte: 1 for true, and 0 for false.
;; Bytes written to w are encoded using the specified byte order
;; and read from successive fields of the data.
;; When writing structs, zero values are written for fields
;; with blank (_) field names."
;;   {:added "1.0"
;;    :go "write(w, order, data)"}
;;   [^ABEND881(unrecognized Expr type *ast.SelectorExpr at: &{io Writer}) w, order, ^ABEND881(unrecognized Expr type *ast.InterfaceType at: &{3281933 0xc001362b70 false}) data])
;; 
JOKER FUNC binary_test.ExampleByteOrder_get has: 
;; (defn ExampleByteOrder_get
;;   {:added "1.0"
;;    :go "exampleByteOrder_get()"}
;;   [])
;; 
JOKER FUNC binary_test.ExampleByteOrder_put has: 
;; (defn ExampleByteOrder_put
;;   {:added "1.0"
;;    :go "exampleByteOrder_put()"}
;;   [])
;; 
JOKER FUNC binary_test.ExamplePutUvarint has: 
;; (defn ExamplePutUvarint
;;   {:added "1.0"
;;    :go "examplePutUvarint()"}
;;   [])
;; 
JOKER FUNC binary_test.ExamplePutVarint has: 
;; (defn ExamplePutVarint
;;   {:added "1.0"
;;    :go "examplePutVarint()"}
;;   [])
;; 
JOKER FUNC binary_test.ExampleRead has: 
;; (defn ExampleRead
;;   {:added "1.0"
;;    :go "exampleRead()"}
;;   [])
;; 
JOKER FUNC binary_test.ExampleRead_multi has: 
;; (defn ExampleRead_multi
;;   {:added "1.0"
;;    :go "exampleRead_multi()"}
;;   [])
;; 
JOKER FUNC binary_test.ExampleUvarint has: 
;; (defn ExampleUvarint
;;   {:added "1.0"
;;    :go "exampleUvarint()"}
;;   [])
;; 
JOKER FUNC binary_test.ExampleVarint has: 
;; (defn ExampleVarint
;;   {:added "1.0"
;;    :go "exampleVarint()"}
;;   [])
;; 
JOKER FUNC binary_test.ExampleWrite has: 
;; (defn ExampleWrite
;;   {:added "1.0"
;;    :go "exampleWrite()"}
;;   [])
;; 
JOKER FUNC binary_test.ExampleWrite_multi has: 
;; (defn ExampleWrite_multi
;;   {:added "1.0"
;;    :go "exampleWrite_multi()"}
;;   [])
;; 
JOKER FUNC bits.LeadingZeros has: 
(defn ^Int LeadingZeros
  "LeadingZeros returns the number of leading zero bits in x; the result is UintSize for x == 0."
  {:added "1.0"
   :go "leadingZeros(x)"}
  [^Int x])

JOKER FUNC bits.LeadingZeros16 has: 
(defn ^Int LeadingZeros16
  "LeadingZeros16 returns the number of leading zero bits in x; the result is 16 for x == 0."
  {:added "1.0"
   :go "leadingZeros16(x)"}
  [^Int x])

JOKER FUNC bits.LeadingZeros32 has: 
(defn ^Int LeadingZeros32
  "LeadingZeros32 returns the number of leading zero bits in x; the result is 32 for x == 0."
  {:added "1.0"
   :go "leadingZeros32(x)"}
  [x])

JOKER FUNC bits.LeadingZeros64 has: 
(defn ^Int LeadingZeros64
  "LeadingZeros64 returns the number of leading zero bits in x; the result is 64 for x == 0."
  {:added "1.0"
   :go "leadingZeros64(x)"}
  [x])

JOKER FUNC bits.LeadingZeros8 has: 
(defn ^Int LeadingZeros8
  "LeadingZeros8 returns the number of leading zero bits in x; the result is 8 for x == 0."
  {:added "1.0"
   :go "leadingZeros8(x)"}
  [x])

JOKER FUNC bits.Len has: 
(defn ^Int Len
  "Len returns the minimum number of bits required to represent x; the result is 0 for x == 0."
  {:added "1.0"
   :go "len(x)"}
  [^Int x])

JOKER FUNC bits.Len16 has: 
(defn ^n Len16
  "Len16 returns the minimum number of bits required to represent x; the result is 0 for x == 0."
  {:added "1.0"
   :go "len16(x)"}
  [^Int x])

JOKER FUNC bits.Len32 has: 
(defn ^n Len32
  "Len32 returns the minimum number of bits required to represent x; the result is 0 for x == 0."
  {:added "1.0"
   :go "len32(x)"}
  [x])

JOKER FUNC bits.Len64 has: 
(defn ^n Len64
  "Len64 returns the minimum number of bits required to represent x; the result is 0 for x == 0."
  {:added "1.0"
   :go "len64(x)"}
  [x])

JOKER FUNC bits.Len8 has: 
(defn ^Int Len8
  "Len8 returns the minimum number of bits required to represent x; the result is 0 for x == 0."
  {:added "1.0"
   :go "len8(x)"}
  [x])

JOKER FUNC bits.OnesCount has: 
(defn ^Int OnesCount
  "OnesCount returns the number of one bits ("population count") in x."
  {:added "1.0"
   :go "onesCount(x)"}
  [^Int x])

JOKER FUNC bits.OnesCount16 has: 
(defn ^Int OnesCount16
  "OnesCount16 returns the number of one bits ("population count") in x."
  {:added "1.0"
   :go "onesCount16(x)"}
  [^Int x])

JOKER FUNC bits.OnesCount32 has: 
(defn ^Int OnesCount32
  "OnesCount32 returns the number of one bits ("population count") in x."
  {:added "1.0"
   :go "onesCount32(x)"}
  [x])

JOKER FUNC bits.OnesCount64 has: 
(defn ^Int OnesCount64
  "OnesCount64 returns the number of one bits ("population count") in x."
  {:added "1.0"
   :go "onesCount64(x)"}
  [x])

JOKER FUNC bits.OnesCount8 has: 
(defn ^Int OnesCount8
  "OnesCount8 returns the number of one bits ("population count") in x."
  {:added "1.0"
   :go "onesCount8(x)"}
  [x])

JOKER FUNC bits.Reverse has: 
(defn ^Int Reverse
  "Reverse returns the value of x with its bits in reversed order."
  {:added "1.0"
   :go "reverse(x)"}
  [^Int x])

JOKER FUNC bits.Reverse16 has: 
(defn ^Int Reverse16
  "Reverse16 returns the value of x with its bits in reversed order."
  {:added "1.0"
   :go "reverse16(x)"}
  [^Int x])

JOKER FUNC bits.Reverse32 has: 
;; (defn ^ABEND042(cannot find typename bits.uint32) Reverse32
;;   "Reverse32 returns the value of x with its bits in reversed order."
;;   {:added "1.0"
;;    :go "reverse32(x)"}
;;   [x])
;; 
JOKER FUNC bits.Reverse64 has: 
;; (defn ^ABEND042(cannot find typename bits.uint64) Reverse64
;;   "Reverse64 returns the value of x with its bits in reversed order."
;;   {:added "1.0"
;;    :go "reverse64(x)"}
;;   [x])
;; 
JOKER FUNC bits.Reverse8 has: 
;; (defn ^ABEND042(cannot find typename bits.uint8) Reverse8
;;   "Reverse8 returns the value of x with its bits in reversed order."
;;   {:added "1.0"
;;    :go "reverse8(x)"}
;;   [x])
;; 
JOKER FUNC bits.ReverseBytes has: 
(defn ^Int ReverseBytes
  "ReverseBytes returns the value of x with its bytes in reversed order."
  {:added "1.0"
   :go "reverseBytes(x)"}
  [^Int x])

JOKER FUNC bits.ReverseBytes16 has: 
(defn ^Int ReverseBytes16
  "ReverseBytes16 returns the value of x with its bytes in reversed order."
  {:added "1.0"
   :go "reverseBytes16(x)"}
  [^Int x])

JOKER FUNC bits.ReverseBytes32 has: 
;; (defn ^ABEND042(cannot find typename bits.uint32) ReverseBytes32
;;   "ReverseBytes32 returns the value of x with its bytes in reversed order."
;;   {:added "1.0"
;;    :go "reverseBytes32(x)"}
;;   [x])
;; 
JOKER FUNC bits.ReverseBytes64 has: 
;; (defn ^ABEND042(cannot find typename bits.uint64) ReverseBytes64
;;   "ReverseBytes64 returns the value of x with its bytes in reversed order."
;;   {:added "1.0"
;;    :go "reverseBytes64(x)"}
;;   [x])
;; 
JOKER FUNC bits.RotateLeft has: 
(defn ^Int RotateLeft
  "RotateLeft returns the value of x rotated left by (k mod UintSize) bits.
To rotate x right by k bits, call RotateLeft(x, -k)."
  {:added "1.0"
   :go "rotateLeft(x, k)"}
  [^Int x, ^Int k])

JOKER FUNC bits.RotateLeft16 has: 
(defn ^Int RotateLeft16
  "RotateLeft16 returns the value of x rotated left by (k mod 16) bits.
To rotate x right by k bits, call RotateLeft16(x, -k)."
  {:added "1.0"
   :go "rotateLeft16(x, k)"}
  [^Int x, ^Int k])

JOKER FUNC bits.RotateLeft32 has: 
;; (defn ^ABEND042(cannot find typename bits.uint32) RotateLeft32
;;   "RotateLeft32 returns the value of x rotated left by (k mod 32) bits.
;; To rotate x right by k bits, call RotateLeft32(x, -k)."
;;   {:added "1.0"
;;    :go "rotateLeft32(x, k)"}
;;   [x, ^Int k])
;; 
JOKER FUNC bits.RotateLeft64 has: 
;; (defn ^ABEND042(cannot find typename bits.uint64) RotateLeft64
;;   "RotateLeft64 returns the value of x rotated left by (k mod 64) bits.
;; To rotate x right by k bits, call RotateLeft64(x, -k)."
;;   {:added "1.0"
;;    :go "rotateLeft64(x, k)"}
;;   [x, ^Int k])
;; 
JOKER FUNC bits.RotateLeft8 has: 
;; (defn ^ABEND042(cannot find typename bits.uint8) RotateLeft8
;;   "RotateLeft8 returns the value of x rotated left by (k mod 8) bits.
;; To rotate x right by k bits, call RotateLeft8(x, -k)."
;;   {:added "1.0"
;;    :go "rotateLeft8(x, k)"}
;;   [x, ^Int k])
;; 
JOKER FUNC bits.TrailingZeros has: 
(defn ^Int TrailingZeros
  "TrailingZeros returns the number of trailing zero bits in x; the result is UintSize for x == 0."
  {:added "1.0"
   :go "trailingZeros(x)"}
  [^Int x])

JOKER FUNC bits.TrailingZeros16 has: 
(defn ^n TrailingZeros16
  "TrailingZeros16 returns the number of trailing zero bits in x; the result is 16 for x == 0."
  {:added "1.0"
   :go "trailingZeros16(x)"}
  [^Int x])

JOKER FUNC bits.TrailingZeros32 has: 
(defn ^Int TrailingZeros32
  "TrailingZeros32 returns the number of trailing zero bits in x; the result is 32 for x == 0."
  {:added "1.0"
   :go "trailingZeros32(x)"}
  [x])

JOKER FUNC bits.TrailingZeros64 has: 
(defn ^Int TrailingZeros64
  "TrailingZeros64 returns the number of trailing zero bits in x; the result is 64 for x == 0."
  {:added "1.0"
   :go "trailingZeros64(x)"}
  [x])

JOKER FUNC bits.TrailingZeros8 has: 
(defn ^Int TrailingZeros8
  "TrailingZeros8 returns the number of trailing zero bits in x; the result is 8 for x == 0."
  {:added "1.0"
   :go "trailingZeros8(x)"}
  [x])

JOKER FUNC bits_test.BenchmarkLeadingZeros has: 
;; (defn BenchmarkLeadingZeros
;;   {:added "1.0"
;;    :go "benchmarkLeadingZeros(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{7139459 0xc0033280e0}) b])
;; 
JOKER FUNC bits_test.BenchmarkLeadingZeros16 has: 
;; (defn BenchmarkLeadingZeros16
;;   {:added "1.0"
;;    :go "benchmarkLeadingZeros16(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{7139771 0xc0033287e0}) b])
;; 
JOKER FUNC bits_test.BenchmarkLeadingZeros32 has: 
;; (defn BenchmarkLeadingZeros32
;;   {:added "1.0"
;;    :go "benchmarkLeadingZeros32(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{7139928 0xc003328b60}) b])
;; 
JOKER FUNC bits_test.BenchmarkLeadingZeros64 has: 
;; (defn BenchmarkLeadingZeros64
;;   {:added "1.0"
;;    :go "benchmarkLeadingZeros64(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{7140085 0xc003328ee0}) b])
;; 
JOKER FUNC bits_test.BenchmarkLeadingZeros8 has: 
;; (defn BenchmarkLeadingZeros8
;;   {:added "1.0"
;;    :go "benchmarkLeadingZeros8(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{7139617 0xc003328460}) b])
;; 
JOKER FUNC bits_test.BenchmarkOnesCount has: 
;; (defn BenchmarkOnesCount
;;   {:added "1.0"
;;    :go "benchmarkOnesCount(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{7143556 0xc003339000}) b])
;; 
JOKER FUNC bits_test.BenchmarkOnesCount16 has: 
;; (defn BenchmarkOnesCount16
;;   {:added "1.0"
;;    :go "benchmarkOnesCount16(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{7143815 0xc003339600}) b])
;; 
JOKER FUNC bits_test.BenchmarkOnesCount32 has: 
;; (defn BenchmarkOnesCount32
;;   {:added "1.0"
;;    :go "benchmarkOnesCount32(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{7143948 0xc003339900}) b])
;; 
JOKER FUNC bits_test.BenchmarkOnesCount64 has: 
;; (defn BenchmarkOnesCount64
;;   {:added "1.0"
;;    :go "benchmarkOnesCount64(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{7144081 0xc003339c00}) b])
;; 
JOKER FUNC bits_test.BenchmarkOnesCount8 has: 
;; (defn BenchmarkOnesCount8
;;   {:added "1.0"
;;    :go "benchmarkOnesCount8(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{7143684 0xc003339300}) b])
;; 
JOKER FUNC bits_test.BenchmarkReverse has: 
;; (defn BenchmarkReverse
;;   {:added "1.0"
;;    :go "benchmarkReverse(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{7148888 0xc00334f7c0}) b])
;; 
JOKER FUNC bits_test.BenchmarkReverse16 has: 
;; (defn BenchmarkReverse16
;;   {:added "1.0"
;;    :go "benchmarkReverse16(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{7149144 0xc00334fe00}) b])
;; 
JOKER FUNC bits_test.BenchmarkReverse32 has: 
;; (defn BenchmarkReverse32
;;   {:added "1.0"
;;    :go "benchmarkReverse32(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{7149277 0xc003358120}) b])
;; 
JOKER FUNC bits_test.BenchmarkReverse64 has: 
;; (defn BenchmarkReverse64
;;   {:added "1.0"
;;    :go "benchmarkReverse64(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{7149410 0xc003358440}) b])
;; 
JOKER FUNC bits_test.BenchmarkReverse8 has: 
;; (defn BenchmarkReverse8
;;   {:added "1.0"
;;    :go "benchmarkReverse8(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{7149014 0xc00334fae0}) b])
;; 
JOKER FUNC bits_test.BenchmarkReverseBytes has: 
;; (defn BenchmarkReverseBytes
;;   {:added "1.0"
;;    :go "benchmarkReverseBytes(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{7150965 0xc003359e40}) b])
;; 
JOKER FUNC bits_test.BenchmarkReverseBytes16 has: 
;; (defn BenchmarkReverseBytes16
;;   {:added "1.0"
;;    :go "benchmarkReverseBytes16(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{7151102 0xc003362160}) b])
;; 
JOKER FUNC bits_test.BenchmarkReverseBytes32 has: 
;; (defn BenchmarkReverseBytes32
;;   {:added "1.0"
;;    :go "benchmarkReverseBytes32(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{7151245 0xc003362480}) b])
;; 
JOKER FUNC bits_test.BenchmarkReverseBytes64 has: 
;; (defn BenchmarkReverseBytes64
;;   {:added "1.0"
;;    :go "benchmarkReverseBytes64(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{7151388 0xc0033627a0}) b])
;; 
JOKER FUNC bits_test.BenchmarkRotateLeft has: 
;; (defn BenchmarkRotateLeft
;;   {:added "1.0"
;;    :go "benchmarkRotateLeft(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{7146435 0xc003346620}) b])
;; 
JOKER FUNC bits_test.BenchmarkRotateLeft16 has: 
;; (defn BenchmarkRotateLeft16
;;   {:added "1.0"
;;    :go "benchmarkRotateLeft16(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{7146717 0xc003346ce0}) b])
;; 
JOKER FUNC bits_test.BenchmarkRotateLeft32 has: 
;; (defn BenchmarkRotateLeft32
;;   {:added "1.0"
;;    :go "benchmarkRotateLeft32(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{7146863 0xc003347040}) b])
;; 
JOKER FUNC bits_test.BenchmarkRotateLeft64 has: 
;; (defn BenchmarkRotateLeft64
;;   {:added "1.0"
;;    :go "benchmarkRotateLeft64(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{7147009 0xc0033473a0}) b])
;; 
JOKER FUNC bits_test.BenchmarkRotateLeft8 has: 
;; (defn BenchmarkRotateLeft8
;;   {:added "1.0"
;;    :go "benchmarkRotateLeft8(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{7146574 0xc003346980}) b])
;; 
JOKER FUNC bits_test.BenchmarkTrailingZeros has: 
;; (defn BenchmarkTrailingZeros
;;   {:added "1.0"
;;    :go "benchmarkTrailingZeros(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{7141526 0xc00332e680}) b])
;; 
JOKER FUNC bits_test.BenchmarkTrailingZeros16 has: 
;; (defn BenchmarkTrailingZeros16
;;   {:added "1.0"
;;    :go "benchmarkTrailingZeros16(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{7141842 0xc00332ed80}) b])
;; 
JOKER FUNC bits_test.BenchmarkTrailingZeros32 has: 
;; (defn BenchmarkTrailingZeros32
;;   {:added "1.0"
;;    :go "benchmarkTrailingZeros32(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{7142001 0xc00332f100}) b])
;; 
JOKER FUNC bits_test.BenchmarkTrailingZeros64 has: 
;; (defn BenchmarkTrailingZeros64
;;   {:added "1.0"
;;    :go "benchmarkTrailingZeros64(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{7142160 0xc00332f480}) b])
;; 
JOKER FUNC bits_test.BenchmarkTrailingZeros8 has: 
;; (defn BenchmarkTrailingZeros8
;;   {:added "1.0"
;;    :go "benchmarkTrailingZeros8(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{7141686 0xc00332ea00}) b])
;; 
JOKER FUNC bits_test.ExampleLeadingZeros16 has: 
;; (defn ExampleLeadingZeros16
;;   {:added "1.0"
;;    :go "exampleLeadingZeros16()"}
;;   [])
;; 
JOKER FUNC bits_test.ExampleLeadingZeros32 has: 
;; (defn ExampleLeadingZeros32
;;   {:added "1.0"
;;    :go "exampleLeadingZeros32()"}
;;   [])
;; 
JOKER FUNC bits_test.ExampleLeadingZeros64 has: 
;; (defn ExampleLeadingZeros64
;;   {:added "1.0"
;;    :go "exampleLeadingZeros64()"}
;;   [])
;; 
JOKER FUNC bits_test.ExampleLeadingZeros8 has: 
;; (defn ExampleLeadingZeros8
;;   {:added "1.0"
;;    :go "exampleLeadingZeros8()"}
;;   [])
;; 
JOKER FUNC bits_test.ExampleLen16 has: 
;; (defn ExampleLen16
;;   {:added "1.0"
;;    :go "exampleLen16()"}
;;   [])
;; 
JOKER FUNC bits_test.ExampleLen32 has: 
;; (defn ExampleLen32
;;   {:added "1.0"
;;    :go "exampleLen32()"}
;;   [])
;; 
JOKER FUNC bits_test.ExampleLen64 has: 
;; (defn ExampleLen64
;;   {:added "1.0"
;;    :go "exampleLen64()"}
;;   [])
;; 
JOKER FUNC bits_test.ExampleLen8 has: 
;; (defn ExampleLen8
;;   {:added "1.0"
;;    :go "exampleLen8()"}
;;   [])
;; 
JOKER FUNC bits_test.ExampleOnesCount16 has: 
;; (defn ExampleOnesCount16
;;   {:added "1.0"
;;    :go "exampleOnesCount16()"}
;;   [])
;; 
JOKER FUNC bits_test.ExampleOnesCount32 has: 
;; (defn ExampleOnesCount32
;;   {:added "1.0"
;;    :go "exampleOnesCount32()"}
;;   [])
;; 
JOKER FUNC bits_test.ExampleOnesCount64 has: 
;; (defn ExampleOnesCount64
;;   {:added "1.0"
;;    :go "exampleOnesCount64()"}
;;   [])
;; 
JOKER FUNC bits_test.ExampleOnesCount8 has: 
;; (defn ExampleOnesCount8
;;   {:added "1.0"
;;    :go "exampleOnesCount8()"}
;;   [])
;; 
JOKER FUNC bits_test.ExampleReverse16 has: 
;; (defn ExampleReverse16
;;   {:added "1.0"
;;    :go "exampleReverse16()"}
;;   [])
;; 
JOKER FUNC bits_test.ExampleReverse32 has: 
;; (defn ExampleReverse32
;;   {:added "1.0"
;;    :go "exampleReverse32()"}
;;   [])
;; 
JOKER FUNC bits_test.ExampleReverse64 has: 
;; (defn ExampleReverse64
;;   {:added "1.0"
;;    :go "exampleReverse64()"}
;;   [])
;; 
JOKER FUNC bits_test.ExampleReverse8 has: 
;; (defn ExampleReverse8
;;   {:added "1.0"
;;    :go "exampleReverse8()"}
;;   [])
;; 
JOKER FUNC bits_test.ExampleReverseBytes16 has: 
;; (defn ExampleReverseBytes16
;;   {:added "1.0"
;;    :go "exampleReverseBytes16()"}
;;   [])
;; 
JOKER FUNC bits_test.ExampleReverseBytes32 has: 
;; (defn ExampleReverseBytes32
;;   {:added "1.0"
;;    :go "exampleReverseBytes32()"}
;;   [])
;; 
JOKER FUNC bits_test.ExampleReverseBytes64 has: 
;; (defn ExampleReverseBytes64
;;   {:added "1.0"
;;    :go "exampleReverseBytes64()"}
;;   [])
;; 
JOKER FUNC bits_test.ExampleRotateLeft16 has: 
;; (defn ExampleRotateLeft16
;;   {:added "1.0"
;;    :go "exampleRotateLeft16()"}
;;   [])
;; 
JOKER FUNC bits_test.ExampleRotateLeft32 has: 
;; (defn ExampleRotateLeft32
;;   {:added "1.0"
;;    :go "exampleRotateLeft32()"}
;;   [])
;; 
JOKER FUNC bits_test.ExampleRotateLeft64 has: 
;; (defn ExampleRotateLeft64
;;   {:added "1.0"
;;    :go "exampleRotateLeft64()"}
;;   [])
;; 
JOKER FUNC bits_test.ExampleRotateLeft8 has: 
;; (defn ExampleRotateLeft8
;;   {:added "1.0"
;;    :go "exampleRotateLeft8()"}
;;   [])
;; 
JOKER FUNC bits_test.ExampleTrailingZeros16 has: 
;; (defn ExampleTrailingZeros16
;;   {:added "1.0"
;;    :go "exampleTrailingZeros16()"}
;;   [])
;; 
JOKER FUNC bits_test.ExampleTrailingZeros32 has: 
;; (defn ExampleTrailingZeros32
;;   {:added "1.0"
;;    :go "exampleTrailingZeros32()"}
;;   [])
;; 
JOKER FUNC bits_test.ExampleTrailingZeros64 has: 
;; (defn ExampleTrailingZeros64
;;   {:added "1.0"
;;    :go "exampleTrailingZeros64()"}
;;   [])
;; 
JOKER FUNC bits_test.ExampleTrailingZeros8 has: 
;; (defn ExampleTrailingZeros8
;;   {:added "1.0"
;;    :go "exampleTrailingZeros8()"}
;;   [])
;; 
JOKER FUNC bits_test.TestLeadingZeros has: 
;; (defn TestLeadingZeros
;;   {:added "1.0"
;;    :go "testLeadingZeros(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{7137755 0xc003314820}) t])
;; 
JOKER FUNC bits_test.TestLen has: 
;; (defn TestLen
;;   {:added "1.0"
;;    :go "testLen(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{7151515 0xc003362ac0}) t])
;; 
JOKER FUNC bits_test.TestOnesCount has: 
;; (defn TestOnesCount
;;   {:added "1.0"
;;    :go "testOnesCount(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{7142308 0xc00332f800}) t])
;; 
JOKER FUNC bits_test.TestReverse has: 
;; (defn TestReverse
;;   {:added "1.0"
;;    :go "testReverse(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{7147145 0xc003347700}) t])
;; 
JOKER FUNC bits_test.TestReverseBytes has: 
;; (defn TestReverseBytes
;;   {:added "1.0"
;;    :go "testReverseBytes(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{7149541 0xc003358760}) t])
;; 
JOKER FUNC bits_test.TestRotateLeft has: 
;; (defn TestRotateLeft
;;   {:added "1.0"
;;    :go "testRotateLeft(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{7144208 0xc003339f00}) t])
;; 
JOKER FUNC bits_test.TestTrailingZeros has: 
;; (defn TestTrailingZeros
;;   {:added "1.0"
;;    :go "testTrailingZeros(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{7140236 0xc003329260}) t])
;; 
JOKER FUNC bits_test.TestUintSize has: 
;; (defn TestUintSize
;;   {:added "1.0"
;;    :go "testUintSize(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{7137593 0xc0033144a0}) t])
;; 
JOKER FUNC bufio.NewReadWriter has: 
;; (defn ^{} NewReadWriter
;;   "NewReadWriter allocates a new ReadWriter that dispatches to r and w."
;;   {:added "1.0"
;;    :go "newReadWriter(r, w)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{362886 Reader}) r, ^ABEND881(unrecognized Expr type *ast.StarExpr at: &{362897 Writer}) w])
;; 
JOKER FUNC bufio.NewReader has: 
;; (defn ^{:buf ^ABEND881(unrecognized Expr type *ast.ArrayType at: &{345511 <nil> byte}) buf, :rd ^ABEND881(unrecognized Expr type *ast.SelectorExpr at: &{io Reader}) rd, :r ^Int r, :w ^Int w, :err err, :lastbyte ^Int lastByte, :lastrunesize ^Int lastRuneSize} NewReader
;;   "NewReader returns a new Reader whose buffer has the default size."
;;   {:added "1.0"
;;    :go "newReader(rd)"}
;;   [^ABEND881(unrecognized Expr type *ast.SelectorExpr at: &{io Reader}) rd])
;; 
JOKER FUNC bufio.NewReaderSize has: 
;; (defn ^{:buf ^ABEND881(unrecognized Expr type *ast.ArrayType at: &{345511 <nil> byte}) buf, :rd ^ABEND881(unrecognized Expr type *ast.SelectorExpr at: &{io Reader}) rd, :r ^Int r, :w ^Int w, :err err, :lastbyte ^Int lastByte, :lastrunesize ^Int lastRuneSize} NewReaderSize
;;   "NewReaderSize returns a new Reader whose buffer has at least the specified
;; size. If the argument io.Reader is already a Reader with large enough
;; size, it returns the underlying Reader."
;;   {:added "1.0"
;;    :go "newReaderSize(rd, size)"}
;;   [^ABEND881(unrecognized Expr type *ast.SelectorExpr at: &{io Reader}) rd, ^Int size])
;; 
JOKER FUNC bufio.NewScanner has: 
;; (defn ^{:r ^ABEND881(unrecognized Expr type *ast.SelectorExpr at: &{io Reader}) r, :split split, :maxtokensize ^Int maxTokenSize, :token ^ABEND881(unrecognized Expr type *ast.ArrayType at: &{364363 <nil> byte}) token, :buf ^ABEND881(unrecognized Expr type *ast.ArrayType at: &{364420 <nil> byte}) buf, :start ^Int start, :end ^Int end, :err err, :empties ^Int empties, :scancalled scanCalled, :done done} NewScanner
;;   "NewScanner returns a new Scanner to read from r.
;; The split function defaults to ScanLines."
;;   {:added "1.0"
;;    :go "newScanner(r)"}
;;   [^ABEND881(unrecognized Expr type *ast.SelectorExpr at: &{io Reader}) r])
;; 
JOKER FUNC bufio.NewWriter has: 
;; (defn ^{:err err, :buf ^ABEND881(unrecognized Expr type *ast.ArrayType at: &{358233 <nil> byte}) buf, :n ^Int n, :wr ^ABEND881(unrecognized Expr type *ast.SelectorExpr at: &{io Writer}) wr} NewWriter
;;   "NewWriter returns a new Writer whose buffer has the default size."
;;   {:added "1.0"
;;    :go "newWriter(w)"}
;;   [^ABEND881(unrecognized Expr type *ast.SelectorExpr at: &{io Writer}) w])
;; 
JOKER FUNC bufio.NewWriterSize has: 
;; (defn ^{:err err, :buf ^ABEND881(unrecognized Expr type *ast.ArrayType at: &{358233 <nil> byte}) buf, :n ^Int n, :wr ^ABEND881(unrecognized Expr type *ast.SelectorExpr at: &{io Writer}) wr} NewWriterSize
;;   "NewWriterSize returns a new Writer whose buffer has at least the specified
;; size. If the argument io.Writer is already a Writer with large enough
;; size, it returns the underlying Writer."
;;   {:added "1.0"
;;    :go "newWriterSize(w, size)"}
;;   [^ABEND881(unrecognized Expr type *ast.SelectorExpr at: &{io Writer}) w, ^Int size])
;; 
JOKER FUNC bufio.ScanBytes has: 
;; (defn ^[advance token err] ScanBytes
;;   "ScanBytes is a split function for a Scanner that returns each byte as a token."
;;   {:added "1.0"
;;    :go "scanBytes(data, atEOF)"}
;;   [^ABEND881(unrecognized Expr type *ast.ArrayType at: &{372562 <nil> byte}) data, atEOF])
;; 
JOKER FUNC bufio.ScanLines has: 
;; (defn ^[advance token err] ScanLines
;;   "ScanLines is a split function for a Scanner that returns each line of
;; text, stripped of any trailing end-of-line marker. The returned line may
;; be empty. The end-of-line marker is one optional carriage return followed
;; by one mandatory newline. In regular expression notation, it is `\r?\n`.
;; The last non-empty line of input will be returned even if it has no
;; newline."
;;   {:added "1.0"
;;    :go "scanLines(data, atEOF)"}
;;   [^ABEND881(unrecognized Expr type *ast.ArrayType at: &{374768 <nil> byte}) data, atEOF])
;; 
JOKER FUNC bufio.ScanRunes has: 
;; (defn ^[advance token err] ScanRunes
;;   "ScanRunes is a split function for a Scanner that returns each
;; UTF-8-encoded rune as a token. The sequence of runes returned is
;; equivalent to that from a range loop over the input as a string, which
;; means that erroneous UTF-8 encodings translate to U+FFFD = "\xef\xbf\xbd".
;; Because of the Scan interface, this makes it impossible for the client to
;; distinguish correctly encoded replacement runes from encoding errors."
;;   {:added "1.0"
;;    :go "scanRunes(data, atEOF)"}
;;   [^ABEND881(unrecognized Expr type *ast.ArrayType at: &{373209 <nil> byte}) data, atEOF])
;; 
JOKER FUNC bufio.ScanWords has: 
;; (defn ^[advance token err] ScanWords
;;   "ScanWords is a split function for a Scanner that returns each
;; space-separated word of text, with surrounding spaces deleted. It will
;; never return an empty string. The definition of space is set by
;; unicode.IsSpace."
;;   {:added "1.0"
;;    :go "scanWords(data, atEOF)"}
;;   [^ABEND881(unrecognized Expr type *ast.ArrayType at: &{376062 <nil> byte}) data, atEOF])
;; 
JOKER FUNC bufio_test.BenchmarkReaderCopyNoWriteTo has: 
;; (defn BenchmarkReaderCopyNoWriteTo
;;   {:added "1.0"
;;    :go "benchmarkReaderCopyNoWriteTo(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{416402 0xc000348980}) b])
;; 
JOKER FUNC bufio_test.BenchmarkReaderCopyOptimal has: 
;; (defn BenchmarkReaderCopyOptimal
;;   {:added "1.0"
;;    :go "benchmarkReaderCopyOptimal(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{415653 0xc0001d9bc0}) b])
;; 
JOKER FUNC bufio_test.BenchmarkReaderCopyUnoptimal has: 
;; (defn BenchmarkReaderCopyUnoptimal
;;   {:added "1.0"
;;    :go "benchmarkReaderCopyUnoptimal(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{416011 0xc000348280}) b])
;; 
JOKER FUNC bufio_test.BenchmarkReaderEmpty has: 
;; (defn BenchmarkReaderEmpty
;;   {:added "1.0"
;;    :go "benchmarkReaderEmpty(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{418259 0xc00034d3c0}) b])
;; 
JOKER FUNC bufio_test.BenchmarkReaderWriteToOptimal has: 
;; (defn BenchmarkReaderWriteToOptimal
;;   {:added "1.0"
;;    :go "benchmarkReaderWriteToOptimal(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{416732 0xc0003492c0}) b])
;; 
JOKER FUNC bufio_test.BenchmarkWriterCopyNoReadFrom has: 
;; (defn BenchmarkWriterCopyNoReadFrom
;;   {:added "1.0"
;;    :go "benchmarkWriterCopyNoReadFrom(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{417938 0xc00034cb60}) b])
;; 
JOKER FUNC bufio_test.BenchmarkWriterCopyOptimal has: 
;; (defn BenchmarkWriterCopyOptimal
;;   {:added "1.0"
;;    :go "benchmarkWriterCopyOptimal(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{417266 0xc000349de0}) b])
;; 
JOKER FUNC bufio_test.BenchmarkWriterCopyUnoptimal has: 
;; (defn BenchmarkWriterCopyUnoptimal
;;   {:added "1.0"
;;    :go "benchmarkWriterCopyUnoptimal(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{417626 0xc00034c4a0}) b])
;; 
JOKER FUNC bufio_test.BenchmarkWriterEmpty has: 
;; (defn BenchmarkWriterEmpty
;;   {:added "1.0"
;;    :go "benchmarkWriterEmpty(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{418568 0xc0003e0060}) b])
;; 
JOKER FUNC bufio_test.BenchmarkWriterFlush has: 
;; (defn BenchmarkWriterFlush
;;   {:added "1.0"
;;    :go "benchmarkWriterFlush(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{418892 0xc000367520}) b])
;; 
JOKER FUNC bufio_test.ExampleScanner_custom has: 
;; (defn ExampleScanner_custom
;;   "Use a Scanner with a custom split function (built by wrapping ScanWords) to validate
;; 32-bit decimal input."
;;   {:added "1.0"
;;    :go "exampleScanner_custom()"}
;;   [])
;; 
JOKER FUNC bufio_test.ExampleScanner_emptyFinalToken has: 
;; (defn ExampleScanner_emptyFinalToken
;;   "Use a Scanner with a custom split function to parse a comma-separated
;; list with an empty final value."
;;   {:added "1.0"
;;    :go "exampleScanner_emptyFinalToken()"}
;;   [])
;; 
JOKER FUNC bufio_test.ExampleScanner_lines has: 
;; (defn ExampleScanner_lines
;;   "The simplest use of a Scanner, to read standard input as a set of lines."
;;   {:added "1.0"
;;    :go "exampleScanner_lines()"}
;;   [])
;; 
JOKER FUNC bufio_test.ExampleScanner_words has: 
;; (defn ExampleScanner_words
;;   "Use a Scanner to implement a simple word-count utility by scanning the
;; input as a sequence of space-delimited tokens."
;;   {:added "1.0"
;;    :go "exampleScanner_words()"}
;;   [])
;; 
JOKER FUNC bufio_test.ExampleWriter has: 
;; (defn ExampleWriter
;;   {:added "1.0"
;;    :go "exampleWriter()"}
;;   [])
;; 
JOKER FUNC bufio_test.TestBadReader has: 
;; (defn TestBadReader
;;   {:added "1.0"
;;    :go "testBadReader(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{340523 0xc0002b24a0}) t])
;; 
JOKER FUNC bufio_test.TestBlankLines has: 
;; (defn TestBlankLines
;;   {:added "1.0"
;;    :go "testBlankLines(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{342824 0xc0002b6f60}) t])
;; 
JOKER FUNC bufio_test.TestBufferFull has: 
;; (defn TestBufferFull
;;   {:added "1.0"
;;    :go "testBufferFull(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{392366 0xc0004ac0a0}) t])
;; 
JOKER FUNC bufio_test.TestDontLoopForever has: 
;; (defn TestDontLoopForever
;;   {:added "1.0"
;;    :go "testDontLoopForever(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{342361 0xc0002b6680}) t])
;; 
JOKER FUNC bufio_test.TestEmptyLinesOK has: 
;; (defn TestEmptyLinesOK
;;   "Check that the looping-at-EOF check doesn't trigger for merely empty tokens."
;;   {:added "1.0"
;;    :go "testEmptyLinesOK(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{343337 0xc0002b79c0}) t])
;; 
JOKER FUNC bufio_test.TestEmptyTokens has: 
;; (defn TestEmptyTokens
;;   {:added "1.0"
;;    :go "testEmptyTokens(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{341999 0xc0002b3ee0}) t])
;; 
JOKER FUNC bufio_test.TestErrAtEOF has: 
;; (defn TestErrAtEOF
;;   "Test that an EOF is overridden by a user-generated scan error."
;;   {:added "1.0"
;;    :go "testErrAtEOF(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{339498 0xc00028d320}) t])
;; 
JOKER FUNC bufio_test.TestHugeBuffer has: 
;; (defn TestHugeBuffer
;;   "Make sure we can read a huge token if a big enough buffer is provided."
;;   {:added "1.0"
;;    :go "testHugeBuffer(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{343698 0xc000414060}) t])
;; 
JOKER FUNC bufio_test.TestLineTooLong has: 
;; (defn TestLineTooLong
;;   {:added "1.0"
;;    :go "testLineTooLong(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{397253 0xc00020e8e0}) t])
;; 
JOKER FUNC bufio_test.TestLinesAfterRead has: 
;; (defn TestLinesAfterRead
;;   {:added "1.0"
;;    :go "testLinesAfterRead(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{399274 0xc0001d45c0}) t])
;; 
JOKER FUNC bufio_test.TestNegativeRead has: 
;; (defn TestNegativeRead
;;   {:added "1.0"
;;    :go "testNegativeRead(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{406284 0xc000173340}) t])
;; 
JOKER FUNC bufio_test.TestNewReaderSizeIdempotent has: 
;; (defn TestNewReaderSizeIdempotent
;;   {:added "1.0"
;;    :go "testNewReaderSizeIdempotent(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{390956 0xc000504bc0}) t])
;; 
JOKER FUNC bufio_test.TestNewWriterSizeIdempotent has: 
;; (defn TestNewWriterSizeIdempotent
;;   {:added "1.0"
;;    :go "testNewWriterSizeIdempotent(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{391385 0xc000505160}) t])
;; 
JOKER FUNC bufio_test.TestNonEOFWithEmptyRead has: 
;; (defn TestNonEOFWithEmptyRead
;;   {:added "1.0"
;;    :go "testNonEOFWithEmptyRead(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{340139 0xc00028dea0}) t])
;; 
JOKER FUNC bufio_test.TestPeek has: 
;; (defn TestPeek
;;   {:added "1.0"
;;    :go "testPeek(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{392870 0xc0004ad900}) t])
;; 
JOKER FUNC bufio_test.TestPeekThenUnreadRune has: 
;; (defn TestPeekThenUnreadRune
;;   {:added "1.0"
;;    :go "testPeekThenUnreadRune(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{395434 0xc000250d60}) t])
;; 
JOKER FUNC bufio_test.TestReadAfterLines has: 
;; (defn TestReadAfterLines
;;   {:added "1.0"
;;    :go "testReadAfterLines(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{398299 0xc0001e4760}) t])
;; 
JOKER FUNC bufio_test.TestReadEmptyBuffer has: 
;; (defn TestReadEmptyBuffer
;;   {:added "1.0"
;;    :go "testReadEmptyBuffer(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{399035 0xc0001d4160}) t])
;; 
JOKER FUNC bufio_test.TestReadLine has: 
;; (defn TestReadLine
;;   {:added "1.0"
;;    :go "testReadLine(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{397155 0xc00020e2a0}) t])
;; 
JOKER FUNC bufio_test.TestReadLineNewlines has: 
;; (defn TestReadLineNewlines
;;   {:added "1.0"
;;    :go "testReadLineNewlines(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{400486 0xc0001d5b60}) t])
;; 
JOKER FUNC bufio_test.TestReadLineNonNilLineOrError has: 
;; (defn TestReadLineNonNilLineOrError
;;   {:added "1.0"
;;    :go "testReadLineNonNilLineOrError(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{399611 0xc0001d4da0}) t])
;; 
JOKER FUNC bufio_test.TestReadRune has: 
;; (defn TestReadRune
;;   {:added "1.0"
;;    :go "testReadRune(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{381827 0xc0001a3180}) t])
;; 
JOKER FUNC bufio_test.TestReadWriteRune has: 
;; (defn TestReadWriteRune
;;   {:added "1.0"
;;    :go "testReadWriteRune(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{388177 0xc0004f7620}) t])
;; 
JOKER FUNC bufio_test.TestReadZero has: 
;; (defn TestReadZero
;;   {:added "1.0"
;;    :go "testReadZero(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{409499 0xc000350d40}) t])
;; 
JOKER FUNC bufio_test.TestReader has: 
;; (defn TestReader
;;   {:added "1.0"
;;    :go "testReader(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{379633 0xc00019c940}) t])
;; 
JOKER FUNC bufio_test.TestReaderClearError has: 
;; (defn TestReaderClearError
;;   {:added "1.0"
;;    :go "testReaderClearError(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{407092 0xc0001c0ac0}) t])
;; 
JOKER FUNC bufio_test.TestReaderDiscard has: 
;; (defn TestReaderDiscard
;;   {:added "1.0"
;;    :go "testReaderDiscard(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{410901 0xc0001c73a0}) t])
;; 
JOKER FUNC bufio_test.TestReaderReset has: 
;; (defn TestReaderReset
;;   {:added "1.0"
;;    :go "testReaderReset(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{410180 0xc000358680}) t])
;; 
JOKER FUNC bufio_test.TestReaderSimple has: 
;; (defn TestReaderSimple
;;   {:added "1.0"
;;    :go "testReaderSimple(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{377832 0xc0003d86c0}) t])
;; 
JOKER FUNC bufio_test.TestReaderSize has: 
;; (defn TestReaderSize
;;   {:added "1.0"
;;    :go "testReaderSize(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{414246 0xc0001d85a0}) t])
;; 
JOKER FUNC bufio_test.TestReaderWriteTo has: 
;; (defn TestReaderWriteTo
;;   {:added "1.0"
;;    :go "testReaderWriteTo(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{401503 0xc00018b5c0}) t])
;; 
JOKER FUNC bufio_test.TestReaderWriteToErrors has: 
;; (defn TestReaderWriteToErrors
;;   {:added "1.0"
;;    :go "testReaderWriteToErrors(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{402443 0xc000166bc0}) t])
;; 
JOKER FUNC bufio_test.TestScanByte has: 
;; (defn TestScanByte
;;   {:added "1.0"
;;    :go "testScanByte(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{331703 0xc000367b20}) t])
;; 
JOKER FUNC bufio_test.TestScanLineEmptyFinalLine has: 
;; (defn TestScanLineEmptyFinalLine
;;   "Test that the line splitter handles a final empty line."
;;   {:added "1.0"
;;    :go "testScanLineEmptyFinalLine(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{337876 0xc000287d20}) t])
;; 
JOKER FUNC bufio_test.TestScanLineEmptyFinalLineWithCR has: 
;; (defn TestScanLineEmptyFinalLineWithCR
;;   "Test that the line splitter handles a final empty line with a carriage return but no newline."
;;   {:added "1.0"
;;    :go "testScanLineEmptyFinalLineWithCR(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{338177 0xc00028c000}) t])
;; 
JOKER FUNC bufio_test.TestScanLineNoNewline has: 
;; (defn TestScanLineNoNewline
;;   "Test that the line splitter handles a final line without a newline."
;;   {:added "1.0"
;;    :go "testScanLineNoNewline(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{337344 0xc0002877a0}) t])
;; 
JOKER FUNC bufio_test.TestScanLineReturnButNoNewline has: 
;; (defn TestScanLineReturnButNoNewline
;;   "Test that the line splitter handles a final line with a carriage return but no newline."
;;   {:added "1.0"
;;    :go "testScanLineReturnButNoNewline(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{337627 0xc000287a60}) t])
;; 
JOKER FUNC bufio_test.TestScanLineTooLong has: 
;; (defn TestScanLineTooLong
;;   "Test that the line splitter errors out on a long line."
;;   {:added "1.0"
;;    :go "testScanLineTooLong(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{335892 0xc000109e20}) t])
;; 
JOKER FUNC bufio_test.TestScanLongLines has: 
;; (defn TestScanLongLines
;;   "Test the line splitter, including some carriage returns but no long lines."
;;   {:added "1.0"
;;    :go "testScanLongLines(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{334959 0xc000108e40}) t])
;; 
JOKER FUNC bufio_test.TestScanRune has: 
;; (defn TestScanRune
;;   "Test that the rune splitter returns same sequence of runes (not bytes) as for range string."
;;   {:added "1.0"
;;    :go "testScanRune(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{332281 0xc000104540}) t])
;; 
JOKER FUNC bufio_test.TestScanWords has: 
;; (defn TestScanWords
;;   "Test that the word splitter returns the same data as strings.Fields."
;;   {:added "1.0"
;;    :go "testScanWords(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{333292 0xc000105420}) t])
;; 
JOKER FUNC bufio_test.TestScanWordsExcessiveWhiteSpace has: 
;; (defn TestScanWordsExcessiveWhiteSpace
;;   {:added "1.0"
;;    :go "testScanWordsExcessiveWhiteSpace(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{340769 0xc0002b28a0}) t])
;; 
JOKER FUNC bufio_test.TestSpace has: 
;; (defn TestSpace
;;   "Test white space table matches the Unicode definition."
;;   {:added "1.0"
;;    :go "testSpace(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{331289 0xc0003674e0}) t])
;; 
JOKER FUNC bufio_test.TestSplitError has: 
;; (defn TestSplitError
;;   "Test the correct error is returned when the split function errors out."
;;   {:added "1.0"
;;    :go "testSplitError(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{338478 0xc00028c380}) t])
;; 
JOKER FUNC bufio_test.TestUnreadByte has: 
;; (defn TestUnreadByte
;;   {:added "1.0"
;;    :go "testUnreadByte(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{382694 0xc0001aa040}) t])
;; 
JOKER FUNC bufio_test.TestUnreadByteMultiple has: 
;; (defn TestUnreadByteMultiple
;;   {:added "1.0"
;;    :go "testUnreadByteMultiple(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{383453 0xc0001aacc0}) t])
;; 
JOKER FUNC bufio_test.TestUnreadByteOthers has: 
;; (defn TestUnreadByteOthers
;;   {:added "1.0"
;;    :go "testUnreadByteOthers(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{384261 0xc0001ab960}) t])
;; 
JOKER FUNC bufio_test.TestUnreadRune has: 
;; (defn TestUnreadRune
;;   {:added "1.0"
;;    :go "testUnreadRune(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{381927 0xc0001a3380}) t])
;; 
JOKER FUNC bufio_test.TestUnreadRuneAtEOF has: 
;; (defn TestUnreadRuneAtEOF
;;   {:added "1.0"
;;    :go "testUnreadRuneAtEOF(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{387835 0xc0004f7020}) t])
;; 
JOKER FUNC bufio_test.TestUnreadRuneError has: 
;; (defn TestUnreadRuneError
;;   "Test that UnreadRune fails if the preceding operation was not a ReadRune."
;;   {:added "1.0"
;;    :go "testUnreadRuneError(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{385897 0xc0004f1120}) t])
;; 
JOKER FUNC bufio_test.TestWithNoEmptyTokens has: 
;; (defn TestWithNoEmptyTokens
;;   {:added "1.0"
;;    :go "testWithNoEmptyTokens(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{342104 0xc0002b6100}) t])
;; 
JOKER FUNC bufio_test.TestWriteErrors has: 
;; (defn TestWriteErrors
;;   {:added "1.0"
;;    :go "testWriteErrors(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{390527 0xc0005043c0}) t])
;; 
JOKER FUNC bufio_test.TestWriteString has: 
;; (defn TestWriteString
;;   {:added "1.0"
;;    :go "testWriteString(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{391787 0xc000505700}) t])
;; 
JOKER FUNC bufio_test.TestWriter has: 
;; (defn TestWriter
;;   {:added "1.0"
;;    :go "testWriter(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{388958 0xc0004f8480}) t])
;; 
JOKER FUNC bufio_test.TestWriterReadFrom has: 
;; (defn TestWriterReadFrom
;;   {:added "1.0"
;;    :go "testWriterReadFrom(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{402695 0xc000158700}) t])
;; 
JOKER FUNC bufio_test.TestWriterReadFromCounts has: 
;; (defn TestWriterReadFromCounts
;;   "TestWriterReadFromCounts tests that using io.Copy to copy into a
;; bufio.Writer does not prematurely flush the buffer. For example, when
;; buffering writes to a network socket, excessive network writes should be
;; avoided."
;;   {:added "1.0"
;;    :go "testWriterReadFromCounts(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{404635 0xc0000a41a0}) t])
;; 
JOKER FUNC bufio_test.TestWriterReadFromErrNoProgress has: 
;; (defn TestWriterReadFromErrNoProgress
;;   {:added "1.0"
;;    :go "testWriterReadFromErrNoProgress(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{408995 0xc000350220}) t])
;; 
JOKER FUNC bufio_test.TestWriterReadFromErrors has: 
;; (defn TestWriterReadFromErrors
;;   {:added "1.0"
;;    :go "testWriterReadFromErrors(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{404142 0xc000115200}) t])
;; 
JOKER FUNC bufio_test.TestWriterReadFromUntilEOF has: 
;; (defn TestWriterReadFromUntilEOF
;;   "Test for golang.org/issue/7611"
;;   {:added "1.0"
;;    :go "testWriterReadFromUntilEOF(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{408367 0xc0002922a0}) t])
;; 
JOKER FUNC bufio_test.TestWriterReadFromWhileFull has: 
;; (defn TestWriterReadFromWhileFull
;;   "Test for golang.org/issue/5947"
;;   {:added "1.0"
;;    :go "testWriterReadFromWhileFull(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{407690 0xc0001c1660}) t])
;; 
JOKER FUNC bufio_test.TestWriterReset has: 
;; (defn TestWriterReset
;;   {:added "1.0"
;;    :go "testWriterReset(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{410556 0xc0001c65a0}) t])
;; 
JOKER FUNC bufio_test.TestWriterSize has: 
;; (defn TestWriterSize
;;   {:added "1.0"
;;    :go "testWriterSize(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{414561 0xc0001d8b60}) t])
;; 
JOKER FUNC bufio_test.TestZeroReader has: 
;; (defn TestZeroReader
;;   {:added "1.0"
;;    :go "testZeroReader(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{380498 0xc00019d9a0}) t])
;; 
JOKER FUNC build.ArchChar has: 
(defn ^[String Error] ArchChar
  "ArchChar returns "?" and an error.
In earlier versions of Go, the returned string was used to derive
the compiler and linker tool names, the default object file suffix,
and the default linker output name. As of Go 1.5, those strings
no longer vary by architecture; they are compile, link, .o, and a.out, respectively."
  {:added "1.0"
   :go "archChar(goarch)"}
  [^String goarch])

JOKER FUNC build.Import has: 
;; (defn ^[{:dir ^String Dir, :name ^String Name, :importcomment ^String ImportComment, :doc ^String Doc, :importpath ^String ImportPath, :root ^String Root, :srcroot ^String SrcRoot, :pkgroot ^String PkgRoot, :pkgtargetroot ^String PkgTargetRoot, :bindir ^String BinDir, :goroot Goroot, :pkgobj ^String PkgObj, :alltags ^ABEND881(unrecognized Expr type *ast.ArrayType at: &{4463504 <nil> string}) AllTags, :conflictdir ^String ConflictDir, :binaryonly BinaryOnly, :gofiles ^ABEND881(unrecognized Expr type *ast.ArrayType at: &{4463768 <nil> string}) GoFiles, :cgofiles ^ABEND881(unrecognized Expr type *ast.ArrayType at: &{4463861 <nil> string}) CgoFiles, :ignoredgofiles ^ABEND881(unrecognized Expr type *ast.ArrayType at: &{4463922 <nil> string}) IgnoredGoFiles, :invalidgofiles ^ABEND881(unrecognized Expr type *ast.ArrayType at: &{4463990 <nil> string}) InvalidGoFiles, :cfiles ^ABEND881(unrecognized Expr type *ast.ArrayType at: &{4464103 <nil> string}) CFiles, :cxxfiles ^ABEND881(unrecognized Expr type *ast.ArrayType at: &{4464147 <nil> string}) CXXFiles, :mfiles ^ABEND881(unrecognized Expr type *ast.ArrayType at: &{4464207 <nil> string}) MFiles, :hfiles ^ABEND881(unrecognized Expr type *ast.ArrayType at: &{4464265 <nil> string}) HFiles, :ffiles ^ABEND881(unrecognized Expr type *ast.ArrayType at: &{4464329 <nil> string}) FFiles, :sfiles ^ABEND881(unrecognized Expr type *ast.ArrayType at: &{4464400 <nil> string}) SFiles, :swigfiles ^ABEND881(unrecognized Expr type *ast.ArrayType at: &{4464444 <nil> string}) SwigFiles, :swigcxxfiles ^ABEND881(unrecognized Expr type *ast.ArrayType at: &{4464484 <nil> string}) SwigCXXFiles, :sysofiles ^ABEND881(unrecognized Expr type *ast.ArrayType at: &{4464527 <nil> string}) SysoFiles, :cgocflags ^ABEND881(unrecognized Expr type *ast.ArrayType at: &{4464617 <nil> string}) CgoCFLAGS, :cgocppflags ^ABEND881(unrecognized Expr type *ast.ArrayType at: &{4464665 <nil> string}) CgoCPPFLAGS, :cgocxxflags ^ABEND881(unrecognized Expr type *ast.ArrayType at: &{4464715 <nil> string}) CgoCXXFLAGS, :cgofflags ^ABEND881(unrecognized Expr type *ast.ArrayType at: &{4464765 <nil> string}) CgoFFLAGS, :cgoldflags ^ABEND881(unrecognized Expr type *ast.ArrayType at: &{4464813 <nil> string}) CgoLDFLAGS, :cgopkgconfig ^ABEND881(unrecognized Expr type *ast.ArrayType at: &{4464862 <nil> string}) CgoPkgConfig, :imports ^ABEND881(unrecognized Expr type *ast.ArrayType at: &{4464939 <nil> string}) Imports, :importpos ^ABEND881(unrecognized Expr type *ast.MapType at: &{4465017 string 0xc001caff50}) ImportPos, :testgofiles ^ABEND881(unrecognized Expr type *ast.ArrayType at: &{4465115 <nil> string}) TestGoFiles, :testimports ^ABEND881(unrecognized Expr type *ast.ArrayType at: &{4465188 <nil> string}) TestImports, :testimportpos ^ABEND881(unrecognized Expr type *ast.MapType at: &{4465265 string 0xc001cba030}) TestImportPos, :xtestgofiles ^ABEND881(unrecognized Expr type *ast.ArrayType at: &{4465345 <nil> string}) XTestGoFiles, :xtestimports ^ABEND881(unrecognized Expr type *ast.ArrayType at: &{4465423 <nil> string}) XTestImports, :xtestimportpos ^ABEND881(unrecognized Expr type *ast.MapType at: &{4465501 string 0xc001cba120}) XTestImportPos} Error] Import
;;   "Import is shorthand for Default.Import."
;;   {:added "1.0"
;;    :go "import(path, srcDir, mode)"}
;;   [^String path, ^String srcDir, mode])
;; 
JOKER FUNC build.ImportDir has: 
;; (defn ^[{:dir ^String Dir, :name ^String Name, :importcomment ^String ImportComment, :doc ^String Doc, :importpath ^String ImportPath, :root ^String Root, :srcroot ^String SrcRoot, :pkgroot ^String PkgRoot, :pkgtargetroot ^String PkgTargetRoot, :bindir ^String BinDir, :goroot Goroot, :pkgobj ^String PkgObj, :alltags ^ABEND881(unrecognized Expr type *ast.ArrayType at: &{4463504 <nil> string}) AllTags, :conflictdir ^String ConflictDir, :binaryonly BinaryOnly, :gofiles ^ABEND881(unrecognized Expr type *ast.ArrayType at: &{4463768 <nil> string}) GoFiles, :cgofiles ^ABEND881(unrecognized Expr type *ast.ArrayType at: &{4463861 <nil> string}) CgoFiles, :ignoredgofiles ^ABEND881(unrecognized Expr type *ast.ArrayType at: &{4463922 <nil> string}) IgnoredGoFiles, :invalidgofiles ^ABEND881(unrecognized Expr type *ast.ArrayType at: &{4463990 <nil> string}) InvalidGoFiles, :cfiles ^ABEND881(unrecognized Expr type *ast.ArrayType at: &{4464103 <nil> string}) CFiles, :cxxfiles ^ABEND881(unrecognized Expr type *ast.ArrayType at: &{4464147 <nil> string}) CXXFiles, :mfiles ^ABEND881(unrecognized Expr type *ast.ArrayType at: &{4464207 <nil> string}) MFiles, :hfiles ^ABEND881(unrecognized Expr type *ast.ArrayType at: &{4464265 <nil> string}) HFiles, :ffiles ^ABEND881(unrecognized Expr type *ast.ArrayType at: &{4464329 <nil> string}) FFiles, :sfiles ^ABEND881(unrecognized Expr type *ast.ArrayType at: &{4464400 <nil> string}) SFiles, :swigfiles ^ABEND881(unrecognized Expr type *ast.ArrayType at: &{4464444 <nil> string}) SwigFiles, :swigcxxfiles ^ABEND881(unrecognized Expr type *ast.ArrayType at: &{4464484 <nil> string}) SwigCXXFiles, :sysofiles ^ABEND881(unrecognized Expr type *ast.ArrayType at: &{4464527 <nil> string}) SysoFiles, :cgocflags ^ABEND881(unrecognized Expr type *ast.ArrayType at: &{4464617 <nil> string}) CgoCFLAGS, :cgocppflags ^ABEND881(unrecognized Expr type *ast.ArrayType at: &{4464665 <nil> string}) CgoCPPFLAGS, :cgocxxflags ^ABEND881(unrecognized Expr type *ast.ArrayType at: &{4464715 <nil> string}) CgoCXXFLAGS, :cgofflags ^ABEND881(unrecognized Expr type *ast.ArrayType at: &{4464765 <nil> string}) CgoFFLAGS, :cgoldflags ^ABEND881(unrecognized Expr type *ast.ArrayType at: &{4464813 <nil> string}) CgoLDFLAGS, :cgopkgconfig ^ABEND881(unrecognized Expr type *ast.ArrayType at: &{4464862 <nil> string}) CgoPkgConfig, :imports ^ABEND881(unrecognized Expr type *ast.ArrayType at: &{4464939 <nil> string}) Imports, :importpos ^ABEND881(unrecognized Expr type *ast.MapType at: &{4465017 string 0xc001caff50}) ImportPos, :testgofiles ^ABEND881(unrecognized Expr type *ast.ArrayType at: &{4465115 <nil> string}) TestGoFiles, :testimports ^ABEND881(unrecognized Expr type *ast.ArrayType at: &{4465188 <nil> string}) TestImports, :testimportpos ^ABEND881(unrecognized Expr type *ast.MapType at: &{4465265 string 0xc001cba030}) TestImportPos, :xtestgofiles ^ABEND881(unrecognized Expr type *ast.ArrayType at: &{4465345 <nil> string}) XTestGoFiles, :xtestimports ^ABEND881(unrecognized Expr type *ast.ArrayType at: &{4465423 <nil> string}) XTestImports, :xtestimportpos ^ABEND881(unrecognized Expr type *ast.MapType at: &{4465501 string 0xc001cba120}) XTestImportPos} Error] ImportDir
;;   "ImportDir is shorthand for Default.ImportDir."
;;   {:added "1.0"
;;    :go "importDir(dir, mode)"}
;;   [^String dir, mode])
;; 
JOKER FUNC build.IsLocalImport has: 
;; (defn ^ABEND042(cannot find typename build.bool) IsLocalImport
;;   "IsLocalImport reports whether the import path is
;; a local import path, like ".", "..", "./foo", or "../foo"."
;;   {:added "1.0"
;;    :go "isLocalImport(path)"}
;;   [^String path])
;; 
JOKER FUNC build.TestDependencies has: 
;; (defn TestDependencies
;;   {:added "1.0"
;;    :go "testDependencies(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{4524451 0xc00147e480}) t])
;; 
JOKER FUNC build.TestDotSlashImport has: 
;; (defn TestDotSlashImport
;;   {:added "1.0"
;;    :go "testDotSlashImport(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{4543457 0xc001c89a80}) t])
;; 
JOKER FUNC build.TestEmptyFolderImport has: 
;; (defn TestEmptyFolderImport
;;   {:added "1.0"
;;    :go "testEmptyFolderImport(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{4544323 0xc001cdaaa0}) t])
;; 
JOKER FUNC build.TestEmptyImport has: 
;; (defn TestEmptyImport
;;   {:added "1.0"
;;    :go "testEmptyImport(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{4544017 0xc001cda540}) t])
;; 
JOKER FUNC build.TestExpandSrcDir has: 
;; (defn TestExpandSrcDir
;;   {:added "1.0"
;;    :go "testExpandSrcDir(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{4549712 0xc001ecde00}) t])
;; 
JOKER FUNC build.TestGoodOSArch has: 
;; (defn TestGoodOSArch
;;   {:added "1.0"
;;    :go "testGoodOSArch(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{4531231 0xc00192a680}) t])
;; 
JOKER FUNC build.TestGoodOSArchFile has: 
;; (defn TestGoodOSArchFile
;;   {:added "1.0"
;;    :go "testGoodOSArchFile(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{4546728 0xc001db6f00}) t])
;; 
JOKER FUNC build.TestImportCmd has: 
;; (defn TestImportCmd
;;   {:added "1.0"
;;    :go "testImportCmd(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{4548612 0xc001eccf80}) t])
;; 
JOKER FUNC build.TestImportDirNotExist has: 
;; (defn TestImportDirNotExist
;;   "Want to get a "cannot find package" error when directory for package does not exist.
;; There should be valid partial information in the returned non-nil *Package."
;;   {:added "1.0"
;;    :go "testImportDirNotExist(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{4551364 0xc001579300}) t])
;; 
JOKER FUNC build.TestImportDirTarget has: 
;; (defn TestImportDirTarget
;;   {:added "1.0"
;;    :go "testImportDirTarget(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{4554164 0xc00157bdc0}) t])
;; 
JOKER FUNC build.TestImportVendor has: 
;; (defn TestImportVendor
;;   {:added "1.0"
;;    :go "testImportVendor(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{4552555 0xc00157a440}) t])
;; 
JOKER FUNC build.TestImportVendorFailure has: 
;; (defn TestImportVendorFailure
;;   {:added "1.0"
;;    :go "testImportVendorFailure(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{4553067 0xc00157abc0}) t])
;; 
JOKER FUNC build.TestImportVendorParentFailure has: 
;; (defn TestImportVendorParentFailure
;;   {:added "1.0"
;;    :go "testImportVendorParentFailure(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{4553535 0xc00157b3c0}) t])
;; 
JOKER FUNC build.TestIssue23594 has: 
;; (defn TestIssue23594
;;   "TestIssue23594 prevents go/build from regressing and populating Package.Doc
;; from comments in test files."
;;   {:added "1.0"
;;    :go "testIssue23594(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{4554657 0xc0014be5c0}) t])
;; 
JOKER FUNC build.TestLocalDirectory has: 
;; (defn TestLocalDirectory
;;   {:added "1.0"
;;    :go "testLocalDirectory(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{4545003 0xc001cdb5c0}) t])
;; 
JOKER FUNC build.TestMatch has: 
;; (defn TestMatch
;;   {:added "1.0"
;;    :go "testMatch(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{4541834 0xc001c316c0}) t])
;; 
JOKER FUNC build.TestMatchFile has: 
;; (defn TestMatchFile
;;   {:added "1.0"
;;    :go "testMatchFile(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{4548025 0xc001ecc2e0}) t])
;; 
JOKER FUNC build.TestMultiplePackageImport has: 
;; (defn TestMultiplePackageImport
;;   {:added "1.0"
;;    :go "testMultiplePackageImport(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{4544521 0xc001cdae20}) t])
;; 
JOKER FUNC build.TestReadComments has: 
;; (defn TestReadComments
;;   {:added "1.0"
;;    :go "testReadComments(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{4528394 0xc0018ba2c0}) t])
;; 
JOKER FUNC build.TestReadFailures has: 
;; (defn TestReadFailures
;;   {:added "1.0"
;;    :go "testReadFailures(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{4529352 0xc0018baaa0}) t])
;; 
JOKER FUNC build.TestReadFailuresIgnored has: 
;; (defn TestReadFailuresIgnored
;;   {:added "1.0"
;;    :go "testReadFailuresIgnored(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{4529561 0xc0018bae20}) t])
;; 
JOKER FUNC build.TestReadImports has: 
;; (defn TestReadImports
;;   {:added "1.0"
;;    :go "testReadImports(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{4528250 0xc0018adfa0}) t])
;; 
JOKER FUNC build.TestShellSafety has: 
;; (defn TestShellSafety
;;   {:added "1.0"
;;    :go "testShellSafety(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{4550104 0xc001578420}) t])
;; 
JOKER FUNC build.TestShouldBuild has: 
;; (defn TestShouldBuild
;;   {:added "1.0"
;;    :go "testShouldBuild(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{4545433 0xc001cdbe20}) t])
;; 
JOKER FUNC bytes.Compare has: 
;; (defn ^Int Compare
;;   "Compare returns an integer comparing two byte slices lexicographically.
;; The result will be 0 if a==b, -1 if a < b, and +1 if a > b.
;; A nil argument is equivalent to an empty slice."
;;   {:added "1.0"
;;    :go "compare(a, b)"}
;;   [^ABEND881(unrecognized Expr type *ast.ArrayType at: &{478290 <nil> byte}) a, ^ABEND881(unrecognized Expr type *ast.ArrayType at: &{478290 <nil> byte}) b])
;; 
JOKER FUNC bytes.Contains has: 
;; (defn ^ABEND042(cannot find typename bytes.bool) Contains
;;   "Contains reports whether subslice is within b."
;;   {:added "1.0"
;;    :go "contains(b, subslice)"}
;;   [^ABEND881(unrecognized Expr type *ast.ArrayType at: &{523450 <nil> byte}) b, ^ABEND881(unrecognized Expr type *ast.ArrayType at: &{523450 <nil> byte}) subslice])
;; 
JOKER FUNC bytes.ContainsAny has: 
;; (defn ^ABEND042(cannot find typename bytes.bool) ContainsAny
;;   "ContainsAny reports whether any of the UTF-8-encoded code points in chars are within b."
;;   {:added "1.0"
;;    :go "containsAny(b, chars)"}
;;   [^ABEND881(unrecognized Expr type *ast.ArrayType at: &{523611 <nil> byte}) b, ^String chars])
;; 
JOKER FUNC bytes.ContainsRune has: 
;; (defn ^ABEND042(cannot find typename bytes.bool) ContainsRune
;;   "ContainsRune reports whether the rune is contained in the UTF-8-encoded byte slice b."
;;   {:added "1.0"
;;    :go "containsRune(b, r)"}
;;   [^ABEND881(unrecognized Expr type *ast.ArrayType at: &{523784 <nil> byte}) b, r])
;; 
JOKER FUNC bytes.Count has: 
;; (defn ^Int Count
;;   "Count counts the number of non-overlapping instances of sep in s.
;; If sep is an empty slice, Count returns 1 + the number of UTF-8-encoded code points in s."
;;   {:added "1.0"
;;    :go "count(s, sep)"}
;;   [^ABEND881(unrecognized Expr type *ast.ArrayType at: &{523132 <nil> byte}) s, ^ABEND881(unrecognized Expr type *ast.ArrayType at: &{523132 <nil> byte}) sep])
;; 
JOKER FUNC bytes.Equal has: 
;; (defn ^ABEND042(cannot find typename bytes.bool) Equal
;;   "Equal returns a boolean reporting whether a and b
;; are the same length and contain the same bytes.
;; A nil argument is equivalent to an empty slice."
;;   {:added "1.0"
;;    :go "equal(a, b)"}
;;   [^ABEND881(unrecognized Expr type *ast.ArrayType at: &{478031 <nil> byte}) a, ^ABEND881(unrecognized Expr type *ast.ArrayType at: &{478031 <nil> byte}) b])
;; 
JOKER FUNC bytes.EqualFold has: 
;; (defn ^ABEND042(cannot find typename bytes.bool) EqualFold
;;   "EqualFold reports whether s and t, interpreted as UTF-8 strings,
;; are equal under Unicode case-folding."
;;   {:added "1.0"
;;    :go "equalFold(s, t)"}
;;   [^ABEND881(unrecognized Expr type *ast.ArrayType at: &{543076 <nil> byte}) s, ^ABEND881(unrecognized Expr type *ast.ArrayType at: &{543076 <nil> byte}) t])
;; 
JOKER FUNC bytes.Fields has: 
;; (defn ^[[ABEND042(cannot find typename bytes.byte)]] Fields
;;   "Fields interprets s as a sequence of UTF-8-encoded code points.
;; It splits the slice s around each instance of one or more consecutive white space
;; characters, as defined by unicode.IsSpace, returning a slice of subslices of s or an
;; empty slice if s contains only white space."
;;   {:added "1.0"
;;    :go "fields(s)"}
;;   [^ABEND881(unrecognized Expr type *ast.ArrayType at: &{529106 <nil> byte}) s])
;; 
JOKER FUNC bytes.FieldsFunc has: 
;; (defn ^[[ABEND042(cannot find typename bytes.byte)]] FieldsFunc
;;   "FieldsFunc interprets s as a sequence of UTF-8-encoded code points.
;; It splits the slice s at each run of code points c satisfying f(c) and
;; returns a slice of subslices of s. If all code points in s satisfy f(c), or
;; len(s) == 0, an empty slice is returned.
;; FieldsFunc makes no guarantees about the order in which it calls f(c).
;; If f does not return consistent results for a given c, FieldsFunc may crash."
;;   {:added "1.0"
;;    :go "fieldsFunc(s, f)"}
;;   [^ABEND881(unrecognized Expr type *ast.ArrayType at: &{530570 <nil> byte}) s, ^ABEND881(unrecognized Expr type *ast.FuncType at: &{530580 0xc0003bfd40 0xc000338000}) f])
;; 
JOKER FUNC bytes.HasPrefix has: 
;; (defn ^ABEND042(cannot find typename bytes.bool) HasPrefix
;;   "HasPrefix tests whether the byte slice s begins with prefix."
;;   {:added "1.0"
;;    :go "hasPrefix(s, prefix)"}
;;   [^ABEND881(unrecognized Expr type *ast.ArrayType at: &{532097 <nil> byte}) s, ^ABEND881(unrecognized Expr type *ast.ArrayType at: &{532097 <nil> byte}) prefix])
;; 
JOKER FUNC bytes.HasSuffix has: 
;; (defn ^ABEND042(cannot find typename bytes.bool) HasSuffix
;;   "HasSuffix tests whether the byte slice s ends with suffix."
;;   {:added "1.0"
;;    :go "hasSuffix(s, suffix)"}
;;   [^ABEND881(unrecognized Expr type *ast.ArrayType at: &{532267 <nil> byte}) s, ^ABEND881(unrecognized Expr type *ast.ArrayType at: &{532267 <nil> byte}) suffix])
;; 
JOKER FUNC bytes.Index has: 
;; (defn ^Int Index
;;   "Index returns the index of the first instance of sep in s, or -1 if sep is not present in s."
;;   {:added "1.0"
;;    :go "index(s, sep)"}
;;   [^ABEND881(unrecognized Expr type *ast.ArrayType at: &{544239 <nil> byte}) s, ^ABEND881(unrecognized Expr type *ast.ArrayType at: &{544239 <nil> byte}) sep])
;; 
JOKER FUNC bytes.IndexAny has: 
;; (defn ^Int IndexAny
;;   "IndexAny interprets s as a sequence of UTF-8-encoded Unicode code points.
;; It returns the byte index of the first occurrence in s of any of the Unicode
;; code points in chars. It returns -1 if chars is empty or if there is no code
;; point in common."
;;   {:added "1.0"
;;    :go "indexAny(s, chars)"}
;;   [^ABEND881(unrecognized Expr type *ast.ArrayType at: &{525478 <nil> byte}) s, ^String chars])
;; 
JOKER FUNC bytes.IndexByte has: 
;; (defn ^Int IndexByte
;;   "IndexByte returns the index of the first instance of c in b, or -1 if c is not present in b."
;;   {:added "1.0"
;;    :go "indexByte(b, c)"}
;;   [^ABEND881(unrecognized Expr type *ast.ArrayType at: &{477801 <nil> byte}) b, c])
;; 
JOKER FUNC bytes.IndexFunc has: 
;; (defn ^Int IndexFunc
;;   "IndexFunc interprets s as a sequence of UTF-8-encoded code points.
;; It returns the byte index in s of the first Unicode
;; code point satisfying f(c), or -1 if none do."
;;   {:added "1.0"
;;    :go "indexFunc(s, f)"}
;;   [^ABEND881(unrecognized Expr type *ast.ArrayType at: &{538348 <nil> byte}) s, ^ABEND881(unrecognized Expr type *ast.FuncType at: &{538358 0xc0000eda40 0xc0000eda70}) f])
;; 
JOKER FUNC bytes.IndexRune has: 
;; (defn ^Int IndexRune
;;   "IndexRune interprets s as a sequence of UTF-8-encoded code points.
;; It returns the byte index of the first occurrence in s of the given rune.
;; It returns -1 if rune is not present in s.
;; If r is utf8.RuneError, it returns the first instance of any
;; invalid UTF-8 byte sequence."
;;   {:added "1.0"
;;    :go "indexRune(s, r)"}
;;   [^ABEND881(unrecognized Expr type *ast.ArrayType at: &{524807 <nil> byte}) s, r])
;; 
JOKER FUNC bytes.Join has: 
;; (defn ^[ABEND042(cannot find typename bytes.byte)] Join
;;   "Join concatenates the elements of s to create a new byte slice. The separator
;; sep is placed between elements in the resulting slice."
;;   {:added "1.0"
;;    :go "join(s, sep)"}
;;   [^ABEND881(unrecognized Expr type *ast.ArrayType at: &{531647 <nil> 0xc000338ab0}) s, ^ABEND881(unrecognized Expr type *ast.ArrayType at: &{531661 <nil> byte}) sep])
;; 
JOKER FUNC bytes.LastIndex has: 
;; (defn ^Int LastIndex
;;   "LastIndex returns the index of the last instance of sep in s, or -1 if sep is not present in s."
;;   {:added "1.0"
;;    :go "lastIndex(s, sep)"}
;;   [^ABEND881(unrecognized Expr type *ast.ArrayType at: &{524077 <nil> byte}) s, ^ABEND881(unrecognized Expr type *ast.ArrayType at: &{524077 <nil> byte}) sep])
;; 
JOKER FUNC bytes.LastIndexAny has: 
;; (defn ^Int LastIndexAny
;;   "LastIndexAny interprets s as a sequence of UTF-8-encoded Unicode code
;; points. It returns the byte index of the last occurrence in s of any of
;; the Unicode code points in chars. It returns -1 if chars is empty or if
;; there is no code point in common."
;;   {:added "1.0"
;;    :go "lastIndexAny(s, chars)"}
;;   [^ABEND881(unrecognized Expr type *ast.ArrayType at: &{526256 <nil> byte}) s, ^String chars])
;; 
JOKER FUNC bytes.LastIndexByte has: 
;; (defn ^Int LastIndexByte
;;   "LastIndexByte returns the index of the last instance of c in s, or -1 if c is not present in s."
;;   {:added "1.0"
;;    :go "lastIndexByte(s, c)"}
;;   [^ABEND881(unrecognized Expr type *ast.ArrayType at: &{524393 <nil> byte}) s, c])
;; 
JOKER FUNC bytes.LastIndexFunc has: 
;; (defn ^Int LastIndexFunc
;;   "LastIndexFunc interprets s as a sequence of UTF-8-encoded code points.
;; It returns the byte index in s of the last Unicode
;; code point satisfying f(c), or -1 if none do."
;;   {:added "1.0"
;;    :go "lastIndexFunc(s, f)"}
;;   [^ABEND881(unrecognized Expr type *ast.ArrayType at: &{538614 <nil> byte}) s, ^ABEND881(unrecognized Expr type *ast.FuncType at: &{538624 0xc0000edcb0 0xc0000edce0}) f])
;; 
JOKER FUNC bytes.Map has: 
;; (defn ^[ABEND042(cannot find typename bytes.byte)] Map
;;   "Map returns a copy of the byte slice s with all its characters modified
;; according to the mapping function. If mapping returns a negative value, the character is
;; dropped from the byte slice with no replacement. The characters in s and the
;; output are interpreted as UTF-8-encoded code points."
;;   {:added "1.0"
;;    :go "map(mapping, s)"}
;;   [^ABEND881(unrecognized Expr type *ast.FuncType at: &{532676 0xc000339830 0xc000339a70}) mapping, ^ABEND881(unrecognized Expr type *ast.ArrayType at: &{532697 <nil> byte}) s])
;; 
JOKER FUNC bytes.NewBuffer has: 
;; (defn ^{:buf ^ABEND881(unrecognized Expr type *ast.ArrayType at: &{463156 <nil> byte}) buf, :off ^Int off, :bootstrap ^ABEND881(unrecognized Expr type *ast.ArrayType at: &{463288 0xc0004ed8c0 byte}) bootstrap, :lastread lastRead} NewBuffer
;;   "NewBuffer creates and initializes a new Buffer using buf as its
;; initial contents. The new Buffer takes ownership of buf, and the
;; caller should not use buf after this call. NewBuffer is intended to
;; prepare a Buffer to read existing data. It can also be used to size
;; the internal buffer for writing. To do that, buf should have the
;; desired capacity but a length of zero.
;; 
;; In most cases, new(Buffer) (or just declaring a Buffer variable) is
;; sufficient to initialize a Buffer."
;;   {:added "1.0"
;;    :go "newBuffer(buf)"}
;;   [^ABEND881(unrecognized Expr type *ast.ArrayType at: &{477099 <nil> byte}) buf])
;; 
JOKER FUNC bytes.NewBufferString has: 
;; (defn ^{:buf ^ABEND881(unrecognized Expr type *ast.ArrayType at: &{463156 <nil> byte}) buf, :off ^Int off, :bootstrap ^ABEND881(unrecognized Expr type *ast.ArrayType at: &{463288 0xc0004ed8c0 byte}) bootstrap, :lastread lastRead} NewBufferString
;;   "NewBufferString creates and initializes a new Buffer using string s as its
;; initial contents. It is intended to prepare a buffer to read an existing
;; string.
;; 
;; In most cases, new(Buffer) (or just declaring a Buffer variable) is
;; sufficient to initialize a Buffer."
;;   {:added "1.0"
;;    :go "newBufferString(s)"}
;;   [^String s])
;; 
JOKER FUNC bytes.NewReader has: 
;; (defn ^{:s ^ABEND881(unrecognized Expr type *ast.ArrayType at: &{430442 <nil> byte}) s, :i i, :prevrune ^Int prevRune} NewReader
;;   "NewReader returns a new Reader reading from b."
;;   {:added "1.0"
;;    :go "newReader(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.ArrayType at: &{433706 <nil> byte}) b])
;; 
JOKER FUNC bytes.Repeat has: 
;; (defn ^[ABEND042(cannot find typename bytes.byte)] Repeat
;;   "Repeat returns a new byte slice consisting of count copies of b.
;; 
;; It panics if count is negative or if
;; the result of (len(b) * count) overflows."
;;   {:added "1.0"
;;    :go "repeat(b, count)"}
;;   [^ABEND881(unrecognized Expr type *ast.ArrayType at: &{533684 <nil> byte}) b, ^Int count])
;; 
JOKER FUNC bytes.Replace has: 
;; (defn ^[ABEND042(cannot find typename bytes.byte)] Replace
;;   "Replace returns a copy of the slice s with the first n
;; non-overlapping instances of old replaced by new.
;; If old is empty, it matches at the beginning of the slice
;; and after each UTF-8 sequence, yielding up to k+1 replacements
;; for a k-rune slice.
;; If n < 0, there is no limit on the number of replacements."
;;   {:added "1.0"
;;    :go "replace(s, old, new, n)"}
;;   [^ABEND881(unrecognized Expr type *ast.ArrayType at: &{542324 <nil> byte}) s, ^ABEND881(unrecognized Expr type *ast.ArrayType at: &{542324 <nil> byte}) old, ^ABEND881(unrecognized Expr type *ast.ArrayType at: &{542324 <nil> byte}) new, ^Int n])
;; 
JOKER FUNC bytes.Runes has: 
;; (defn ^[ABEND042(cannot find typename bytes.rune)] Runes
;;   "Runes interprets s as a sequence of UTF-8-encoded code points.
;; It returns a slice of runes (Unicode code points) equivalent to s."
;;   {:added "1.0"
;;    :go "runes(s)"}
;;   [^ABEND881(unrecognized Expr type *ast.ArrayType at: &{541821 <nil> byte}) s])
;; 
JOKER FUNC bytes.Split has: 
;; (defn ^[[ABEND042(cannot find typename bytes.byte)]] Split
;;   "Split slices s into all subslices separated by sep and returns a slice of
;; the subslices between those separators.
;; If sep is empty, Split splits after each UTF-8 sequence.
;; It is equivalent to SplitN with a count of -1."
;;   {:added "1.0"
;;    :go "split(s, sep)"}
;;   [^ABEND881(unrecognized Expr type *ast.ArrayType at: &{528354 <nil> byte}) s, ^ABEND881(unrecognized Expr type *ast.ArrayType at: &{528354 <nil> byte}) sep])
;; 
JOKER FUNC bytes.SplitAfter has: 
;; (defn ^[[ABEND042(cannot find typename bytes.byte)]] SplitAfter
;;   "SplitAfter slices s into all subslices after each instance of sep and
;; returns a slice of those subslices.
;; If sep is empty, SplitAfter splits after each UTF-8 sequence.
;; It is equivalent to SplitAfterN with a count of -1."
;;   {:added "1.0"
;;    :go "splitAfter(s, sep)"}
;;   [^ABEND881(unrecognized Expr type *ast.ArrayType at: &{528662 <nil> byte}) s, ^ABEND881(unrecognized Expr type *ast.ArrayType at: &{528662 <nil> byte}) sep])
;; 
JOKER FUNC bytes.SplitAfterN has: 
;; (defn ^[[ABEND042(cannot find typename bytes.byte)]] SplitAfterN
;;   "SplitAfterN slices s into subslices after each instance of sep and
;; returns a slice of those subslices.
;; If sep is empty, SplitAfterN splits after each UTF-8 sequence.
;; The count determines the number of subslices to return:
;;   n > 0: at most n subslices; the last subslice will be the unsplit remainder.
;;   n == 0: the result is nil (zero subslices)
;;   n < 0: all subslices"
;;   {:added "1.0"
;;    :go "splitAfterN(s, sep, n)"}
;;   [^ABEND881(unrecognized Expr type *ast.ArrayType at: &{528039 <nil> byte}) s, ^ABEND881(unrecognized Expr type *ast.ArrayType at: &{528039 <nil> byte}) sep, ^Int n])
;; 
JOKER FUNC bytes.SplitN has: 
;; (defn ^[[ABEND042(cannot find typename bytes.byte)]] SplitN
;;   "SplitN slices s into subslices separated by sep and returns a slice of
;; the subslices between those separators.
;; If sep is empty, SplitN splits after each UTF-8 sequence.
;; The count determines the number of subslices to return:
;;   n > 0: at most n subslices; the last subslice will be the unsplit remainder.
;;   n == 0: the result is nil (zero subslices)
;;   n < 0: all subslices"
;;   {:added "1.0"
;;    :go "splitN(s, sep, n)"}
;;   [^ABEND881(unrecognized Expr type *ast.ArrayType at: &{527566 <nil> byte}) s, ^ABEND881(unrecognized Expr type *ast.ArrayType at: &{527566 <nil> byte}) sep, ^Int n])
;; 
JOKER FUNC bytes.Title has: 
;; (defn ^[ABEND042(cannot find typename bytes.byte)] Title
;;   "Title treats s as UTF-8-encoded bytes and returns a copy with all Unicode letters that begin
;; words mapped to their title case.
;; 
;; BUG(rsc): The rule Title uses for word boundaries does not handle Unicode punctuation properly."
;;   {:added "1.0"
;;    :go "title(s)"}
;;   [^ABEND881(unrecognized Expr type *ast.ArrayType at: &{536505 <nil> byte}) s])
;; 
JOKER FUNC bytes.ToLower has: 
;; (defn ^[ABEND042(cannot find typename bytes.byte)] ToLower
;;   "ToLower treats s as UTF-8-encoded bytes and returns a copy with all the Unicode letters mapped to their lower case."
;;   {:added "1.0"
;;    :go "toLower(s)"}
;;   [^ABEND881(unrecognized Expr type *ast.ArrayType at: &{534480 <nil> byte}) s])
;; 
JOKER FUNC bytes.ToLowerSpecial has: 
;; (defn ^[ABEND042(cannot find typename bytes.byte)] ToLowerSpecial
;;   "ToLowerSpecial treats s as UTF-8-encoded bytes and returns a copy with all the Unicode letters mapped to their
;; lower case, giving priority to the special casing rules."
;;   {:added "1.0"
;;    :go "toLowerSpecial(c, s)"}
;;   [^ABEND881(unrecognized Expr type *ast.SelectorExpr at: &{unicode SpecialCase}) c, ^ABEND881(unrecognized Expr type *ast.ArrayType at: &{535232 <nil> byte}) s])
;; 
JOKER FUNC bytes.ToTitle has: 
;; (defn ^[ABEND042(cannot find typename bytes.byte)] ToTitle
;;   "ToTitle treats s as UTF-8-encoded bytes and returns a copy with all the Unicode letters mapped to their title case."
;;   {:added "1.0"
;;    :go "toTitle(s)"}
;;   [^ABEND881(unrecognized Expr type *ast.ArrayType at: &{534665 <nil> byte}) s])
;; 
JOKER FUNC bytes.ToTitleSpecial has: 
;; (defn ^[ABEND042(cannot find typename bytes.byte)] ToTitleSpecial
;;   "ToTitleSpecial treats s as UTF-8-encoded bytes and returns a copy with all the Unicode letters mapped to their
;; title case, giving priority to the special casing rules."
;;   {:added "1.0"
;;    :go "toTitleSpecial(c, s)"}
;;   [^ABEND881(unrecognized Expr type *ast.SelectorExpr at: &{unicode SpecialCase}) c, ^ABEND881(unrecognized Expr type *ast.ArrayType at: &{535529 <nil> byte}) s])
;; 
JOKER FUNC bytes.ToUpper has: 
;; (defn ^[ABEND042(cannot find typename bytes.byte)] ToUpper
;;   "ToUpper treats s as UTF-8-encoded bytes and returns a copy with all the Unicode letters within it mapped to their upper case."
;;   {:added "1.0"
;;    :go "toUpper(s)"}
;;   [^ABEND881(unrecognized Expr type *ast.ArrayType at: &{534295 <nil> byte}) s])
;; 
JOKER FUNC bytes.ToUpperSpecial has: 
;; (defn ^[ABEND042(cannot find typename bytes.byte)] ToUpperSpecial
;;   "ToUpperSpecial treats s as UTF-8-encoded bytes and returns a copy with all the Unicode letters mapped to their
;; upper case, giving priority to the special casing rules."
;;   {:added "1.0"
;;    :go "toUpperSpecial(c, s)"}
;;   [^ABEND881(unrecognized Expr type *ast.SelectorExpr at: &{unicode SpecialCase}) c, ^ABEND881(unrecognized Expr type *ast.ArrayType at: &{534935 <nil> byte}) s])
;; 
JOKER FUNC bytes.Trim has: 
;; (defn ^[ABEND042(cannot find typename bytes.byte)] Trim
;;   "Trim returns a subslice of s by slicing off all leading and
;; trailing UTF-8-encoded code points contained in cutset."
;;   {:added "1.0"
;;    :go "trim(s, cutset)"}
;;   [^ABEND881(unrecognized Expr type *ast.ArrayType at: &{540966 <nil> byte}) s, ^String cutset])
;; 
JOKER FUNC bytes.TrimFunc has: 
;; (defn ^[ABEND042(cannot find typename bytes.byte)] TrimFunc
;;   "TrimFunc returns a subslice of s by slicing off all leading and trailing
;; UTF-8-encoded code points c that satisfy f(c)."
;;   {:added "1.0"
;;    :go "trimFunc(s, f)"}
;;   [^ABEND881(unrecognized Expr type *ast.ArrayType at: &{537587 <nil> byte}) s, ^ABEND881(unrecognized Expr type *ast.FuncType at: &{537597 0xc0000ed1d0 0xc0000ed230}) f])
;; 
JOKER FUNC bytes.TrimLeft has: 
;; (defn ^[ABEND042(cannot find typename bytes.byte)] TrimLeft
;;   "TrimLeft returns a subslice of s by slicing off all leading
;; UTF-8-encoded code points contained in cutset."
;;   {:added "1.0"
;;    :go "trimLeft(s, cutset)"}
;;   [^ABEND881(unrecognized Expr type *ast.ArrayType at: &{541174 <nil> byte}) s, ^String cutset])
;; 
JOKER FUNC bytes.TrimLeftFunc has: 
;; (defn ^[ABEND042(cannot find typename bytes.byte)] TrimLeftFunc
;;   "TrimLeftFunc treats s as UTF-8-encoded bytes and returns a subslice of s by slicing off
;; all leading UTF-8-encoded code points c that satisfy f(c)."
;;   {:added "1.0"
;;    :go "trimLeftFunc(s, f)"}
;;   [^ABEND881(unrecognized Expr type *ast.ArrayType at: &{536999 <nil> byte}) s, ^ABEND881(unrecognized Expr type *ast.FuncType at: &{537009 0xc0000ec9c0 0xc0000ec9f0}) f])
;; 
JOKER FUNC bytes.TrimPrefix has: 
;; (defn ^[ABEND042(cannot find typename bytes.byte)] TrimPrefix
;;   "TrimPrefix returns s without the provided leading prefix string.
;; If s doesn't start with prefix, s is returned unchanged."
;;   {:added "1.0"
;;    :go "trimPrefix(s, prefix)"}
;;   [^ABEND881(unrecognized Expr type *ast.ArrayType at: &{537827 <nil> byte}) s, ^ABEND881(unrecognized Expr type *ast.ArrayType at: &{537827 <nil> byte}) prefix])
;; 
JOKER FUNC bytes.TrimRight has: 
;; (defn ^[ABEND042(cannot find typename bytes.byte)] TrimRight
;;   "TrimRight returns a subslice of s by slicing off all trailing
;; UTF-8-encoded code points that are contained in cutset."
;;   {:added "1.0"
;;    :go "trimRight(s, cutset)"}
;;   [^ABEND881(unrecognized Expr type *ast.ArrayType at: &{541398 <nil> byte}) s, ^String cutset])
;; 
JOKER FUNC bytes.TrimRightFunc has: 
;; (defn ^[ABEND042(cannot find typename bytes.byte)] TrimRightFunc
;;   "TrimRightFunc returns a subslice of s by slicing off all trailing
;; UTF-8-encoded code points c that satisfy f(c)."
;;   {:added "1.0"
;;    :go "trimRightFunc(s, f)"}
;;   [^ABEND881(unrecognized Expr type *ast.ArrayType at: &{537253 <nil> byte}) s, ^ABEND881(unrecognized Expr type *ast.FuncType at: &{537263 0xc0000ecdb0 0xc0000ecde0}) f])
;; 
JOKER FUNC bytes.TrimSpace has: 
;; (defn ^[ABEND042(cannot find typename bytes.byte)] TrimSpace
;;   "TrimSpace returns a subslice of s by slicing off all leading and
;; trailing white space, as defined by Unicode."
;;   {:added "1.0"
;;    :go "trimSpace(s)"}
;;   [^ABEND881(unrecognized Expr type *ast.ArrayType at: &{541615 <nil> byte}) s])
;; 
JOKER FUNC bytes.TrimSuffix has: 
;; (defn ^[ABEND042(cannot find typename bytes.byte)] TrimSuffix
;;   "TrimSuffix returns s without the provided trailing suffix string.
;; If s doesn't end with suffix, s is returned unchanged."
;;   {:added "1.0"
;;    :go "trimSuffix(s, suffix)"}
;;   [^ABEND881(unrecognized Expr type *ast.ArrayType at: &{538065 <nil> byte}) s, ^ABEND881(unrecognized Expr type *ast.ArrayType at: &{538065 <nil> byte}) suffix])
;; 
JOKER FUNC bytes_test.BenchmarkBufferFullSmallReads has: 
;; (defn BenchmarkBufferFullSmallReads
;;   "Check that we don't compact too often. From Issue 5154."
;;   {:added "1.0"
;;    :go "benchmarkBufferFullSmallReads(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{457548 0xc0001ea960}) b])
;; 
JOKER FUNC bytes_test.BenchmarkBufferNotEmptyWriteRead has: 
;; (defn BenchmarkBufferNotEmptyWriteRead
;;   "From Issue 5154."
;;   {:added "1.0"
;;    :go "benchmarkBufferNotEmptyWriteRead(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{457276 0xc0001ea360}) b])
;; 
JOKER FUNC bytes_test.BenchmarkBytesCompare has: 
;; (defn BenchmarkBytesCompare
;;   {:added "1.0"
;;    :go "benchmarkBytesCompare(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{520610 0xc0003b7560}) b])
;; 
JOKER FUNC bytes_test.BenchmarkCompareBytesBig has: 
;; (defn BenchmarkCompareBytesBig
;;   {:added "1.0"
;;    :go "benchmarkCompareBytesBig(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{462126 0xc0004ec7a0}) b])
;; 
JOKER FUNC bytes_test.BenchmarkCompareBytesBigIdentical has: 
;; (defn BenchmarkCompareBytesBigIdentical
;;   {:added "1.0"
;;    :go "benchmarkCompareBytesBigIdentical(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{462455 0xc0004ecee0}) b])
;; 
JOKER FUNC bytes_test.BenchmarkCompareBytesBigUnaligned has: 
;; (defn BenchmarkCompareBytesBigUnaligned
;;   {:added "1.0"
;;    :go "benchmarkCompareBytesBigUnaligned(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{461784 0xc0004ec000}) b])
;; 
JOKER FUNC bytes_test.BenchmarkCompareBytesDifferentLength has: 
;; (defn BenchmarkCompareBytesDifferentLength
;;   {:added "1.0"
;;    :go "benchmarkCompareBytesDifferentLength(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{461568 0xc0004e7c00}) b])
;; 
JOKER FUNC bytes_test.BenchmarkCompareBytesEmpty has: 
;; (defn BenchmarkCompareBytesEmpty
;;   {:added "1.0"
;;    :go "benchmarkCompareBytesEmpty(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{460997 0xc0004e7080}) b])
;; 
JOKER FUNC bytes_test.BenchmarkCompareBytesEqual has: 
;; (defn BenchmarkCompareBytesEqual
;;   {:added "1.0"
;;    :go "benchmarkCompareBytesEqual(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{460606 0xc0004e68e0}) b])
;; 
JOKER FUNC bytes_test.BenchmarkCompareBytesIdentical has: 
;; (defn BenchmarkCompareBytesIdentical
;;   {:added "1.0"
;;    :go "benchmarkCompareBytesIdentical(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{461166 0xc0004e7440}) b])
;; 
JOKER FUNC bytes_test.BenchmarkCompareBytesSameLength has: 
;; (defn BenchmarkCompareBytesSameLength
;;   {:added "1.0"
;;    :go "benchmarkCompareBytesSameLength(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{461350 0xc0004e7800}) b])
;; 
JOKER FUNC bytes_test.BenchmarkCompareBytesToNil has: 
;; (defn BenchmarkCompareBytesToNil
;;   {:added "1.0"
;;    :go "benchmarkCompareBytesToNil(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{460807 0xc0004e6cc0}) b])
;; 
JOKER FUNC bytes_test.BenchmarkCount has: 
;; (defn BenchmarkCount
;;   {:added "1.0"
;;    :go "benchmarkCount(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{495455 0xc000575dc0}) b])
;; 
JOKER FUNC bytes_test.BenchmarkCountEasy has: 
;; (defn BenchmarkCountEasy
;;   {:added "1.0"
;;    :go "benchmarkCountEasy(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{495725 0xc0005784c0}) b])
;; 
JOKER FUNC bytes_test.BenchmarkCountSingle has: 
;; (defn BenchmarkCountSingle
;;   {:added "1.0"
;;    :go "benchmarkCountSingle(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{496034 0xc000578cc0}) b])
;; 
JOKER FUNC bytes_test.BenchmarkEqual has: 
;; (defn BenchmarkEqual
;;   {:added "1.0"
;;    :go "benchmarkEqual(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{493994 0xc000567800}) b])
;; 
JOKER FUNC bytes_test.BenchmarkEqualPort has: 
;; (defn BenchmarkEqualPort
;;   {:added "1.0"
;;    :go "benchmarkEqualPort(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{494340 0xc000574120}) b])
;; 
JOKER FUNC bytes_test.BenchmarkFields has: 
;; (defn BenchmarkFields
;;   {:added "1.0"
;;    :go "benchmarkFields(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{518603 0xc0005fa120}) b])
;; 
JOKER FUNC bytes_test.BenchmarkFieldsFunc has: 
;; (defn BenchmarkFieldsFunc
;;   {:added "1.0"
;;    :go "benchmarkFieldsFunc(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{518963 0xc0005faa40}) b])
;; 
JOKER FUNC bytes_test.BenchmarkIndex has: 
;; (defn BenchmarkIndex
;;   {:added "1.0"
;;    :go "benchmarkIndex(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{494878 0xc000574e80}) b])
;; 
JOKER FUNC bytes_test.BenchmarkIndexAnyASCII has: 
;; (defn BenchmarkIndexAnyASCII
;;   {:added "1.0"
;;    :go "benchmarkIndexAnyASCII(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{520967 0xc0004148a0}) b])
;; 
JOKER FUNC bytes_test.BenchmarkIndexByte has: 
;; (defn BenchmarkIndexByte
;;   {:added "1.0"
;;    :go "benchmarkIndexByte(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{492687 0xc000563920}) b])
;; 
JOKER FUNC bytes_test.BenchmarkIndexBytePortable has: 
;; (defn BenchmarkIndexBytePortable
;;   {:added "1.0"
;;    :go "benchmarkIndexBytePortable(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{492789 0xc000563ac0}) b])
;; 
JOKER FUNC bytes_test.BenchmarkIndexEasy has: 
;; (defn BenchmarkIndexEasy
;;   {:added "1.0"
;;    :go "benchmarkIndexEasy(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{495150 0xc0005755a0}) b])
;; 
JOKER FUNC bytes_test.BenchmarkIndexPeriodic has: 
;; (defn BenchmarkIndexPeriodic
;;   {:added "1.0"
;;    :go "benchmarkIndexPeriodic(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{521623 0xc000505f60}) b])
;; 
JOKER FUNC bytes_test.BenchmarkIndexRune has: 
;; (defn BenchmarkIndexRune
;;   {:added "1.0"
;;    :go "benchmarkIndexRune(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{493172 0xc000566400}) b])
;; 
JOKER FUNC bytes_test.BenchmarkIndexRuneASCII has: 
;; (defn BenchmarkIndexRuneASCII
;;   {:added "1.0"
;;    :go "benchmarkIndexRuneASCII(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{493271 0xc0005665a0}) b])
;; 
JOKER FUNC bytes_test.BenchmarkReadString has: 
;; (defn BenchmarkReadString
;;   {:added "1.0"
;;    :go "benchmarkReadString(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{453439 0xc000401c80}) b])
;; 
JOKER FUNC bytes_test.BenchmarkRepeat has: 
;; (defn BenchmarkRepeat
;;   {:added "1.0"
;;    :go "benchmarkRepeat(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{520507 0xc0001e1d80}) b])
;; 
JOKER FUNC bytes_test.BenchmarkSplitEmptySeparator has: 
;; (defn BenchmarkSplitEmptySeparator
;;   {:added "1.0"
;;    :go "benchmarkSplitEmptySeparator(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{519837 0xc0005fbcc0}) b])
;; 
JOKER FUNC bytes_test.BenchmarkSplitMultiByteSeparator has: 
;; (defn BenchmarkSplitMultiByteSeparator
;;   {:added "1.0"
;;    :go "benchmarkSplitMultiByteSeparator(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{520092 0xc0005460a0}) b])
;; 
JOKER FUNC bytes_test.BenchmarkSplitNMultiByteSeparator has: 
;; (defn BenchmarkSplitNMultiByteSeparator
;;   {:added "1.0"
;;    :go "benchmarkSplitNMultiByteSeparator(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{520378 0xc000547ac0}) b])
;; 
JOKER FUNC bytes_test.BenchmarkSplitNSingleByteSeparator has: 
;; (defn BenchmarkSplitNSingleByteSeparator
;;   {:added "1.0"
;;    :go "benchmarkSplitNSingleByteSeparator(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{520235 0xc000546d80}) b])
;; 
JOKER FUNC bytes_test.BenchmarkSplitSingleByteSeparator has: 
;; (defn BenchmarkSplitSingleByteSeparator
;;   {:added "1.0"
;;    :go "benchmarkSplitSingleByteSeparator(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{519955 0xc0005fbf20}) b])
;; 
JOKER FUNC bytes_test.BenchmarkTrimASCII has: 
;; (defn BenchmarkTrimASCII
;;   {:added "1.0"
;;    :go "benchmarkTrimASCII(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{521293 0xc0004150e0}) b])
;; 
JOKER FUNC bytes_test.BenchmarkTrimSpace has: 
;; (defn BenchmarkTrimSpace
;;   {:added "1.0"
;;    :go "benchmarkTrimSpace(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{519343 0xc0005fb3e0}) b])
;; 
JOKER FUNC bytes_test.BenchmarkWriteByte has: 
;; (defn BenchmarkWriteByte
;;   {:added "1.0"
;;    :go "benchmarkWriteByte(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{456770 0xc0002f5720}) b])
;; 
JOKER FUNC bytes_test.BenchmarkWriteRune has: 
;; (defn BenchmarkWriteRune
;;   {:added "1.0"
;;    :go "benchmarkWriteRune(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{456980 0xc0002f5c80}) b])
;; 
JOKER FUNC bytes_test.ExampleBuffer has: 
;; (defn ExampleBuffer
;;   {:added "1.0"
;;    :go "exampleBuffer()"}
;;   [])
;; 
JOKER FUNC bytes_test.ExampleBuffer_Grow has: 
;; (defn ExampleBuffer_Grow
;;   {:added "1.0"
;;    :go "exampleBuffer_Grow()"}
;;   [])
;; 
JOKER FUNC bytes_test.ExampleBuffer_reader has: 
;; (defn ExampleBuffer_reader
;;   {:added "1.0"
;;    :go "exampleBuffer_reader()"}
;;   [])
;; 
JOKER FUNC bytes_test.ExampleCompare has: 
;; (defn ExampleCompare
;;   {:added "1.0"
;;    :go "exampleCompare()"}
;;   [])
;; 
JOKER FUNC bytes_test.ExampleCompare_search has: 
;; (defn ExampleCompare_search
;;   {:added "1.0"
;;    :go "exampleCompare_search()"}
;;   [])
;; 
JOKER FUNC bytes_test.ExampleContains has: 
;; (defn ExampleContains
;;   {:added "1.0"
;;    :go "exampleContains()"}
;;   [])
;; 
JOKER FUNC bytes_test.ExampleContainsAny has: 
;; (defn ExampleContainsAny
;;   {:added "1.0"
;;    :go "exampleContainsAny()"}
;;   [])
;; 
JOKER FUNC bytes_test.ExampleContainsRune has: 
;; (defn ExampleContainsRune
;;   {:added "1.0"
;;    :go "exampleContainsRune()"}
;;   [])
;; 
JOKER FUNC bytes_test.ExampleCount has: 
;; (defn ExampleCount
;;   {:added "1.0"
;;    :go "exampleCount()"}
;;   [])
;; 
JOKER FUNC bytes_test.ExampleEqual has: 
;; (defn ExampleEqual
;;   {:added "1.0"
;;    :go "exampleEqual()"}
;;   [])
;; 
JOKER FUNC bytes_test.ExampleEqualFold has: 
;; (defn ExampleEqualFold
;;   {:added "1.0"
;;    :go "exampleEqualFold()"}
;;   [])
;; 
JOKER FUNC bytes_test.ExampleFields has: 
;; (defn ExampleFields
;;   {:added "1.0"
;;    :go "exampleFields()"}
;;   [])
;; 
JOKER FUNC bytes_test.ExampleFieldsFunc has: 
;; (defn ExampleFieldsFunc
;;   {:added "1.0"
;;    :go "exampleFieldsFunc()"}
;;   [])
;; 
JOKER FUNC bytes_test.ExampleHasPrefix has: 
;; (defn ExampleHasPrefix
;;   {:added "1.0"
;;    :go "exampleHasPrefix()"}
;;   [])
;; 
JOKER FUNC bytes_test.ExampleHasSuffix has: 
;; (defn ExampleHasSuffix
;;   {:added "1.0"
;;    :go "exampleHasSuffix()"}
;;   [])
;; 
JOKER FUNC bytes_test.ExampleIndex has: 
;; (defn ExampleIndex
;;   {:added "1.0"
;;    :go "exampleIndex()"}
;;   [])
;; 
JOKER FUNC bytes_test.ExampleIndexAny has: 
;; (defn ExampleIndexAny
;;   {:added "1.0"
;;    :go "exampleIndexAny()"}
;;   [])
;; 
JOKER FUNC bytes_test.ExampleIndexByte has: 
;; (defn ExampleIndexByte
;;   {:added "1.0"
;;    :go "exampleIndexByte()"}
;;   [])
;; 
JOKER FUNC bytes_test.ExampleIndexFunc has: 
;; (defn ExampleIndexFunc
;;   {:added "1.0"
;;    :go "exampleIndexFunc()"}
;;   [])
;; 
JOKER FUNC bytes_test.ExampleIndexRune has: 
;; (defn ExampleIndexRune
;;   {:added "1.0"
;;    :go "exampleIndexRune()"}
;;   [])
;; 
JOKER FUNC bytes_test.ExampleJoin has: 
;; (defn ExampleJoin
;;   {:added "1.0"
;;    :go "exampleJoin()"}
;;   [])
;; 
JOKER FUNC bytes_test.ExampleLastIndex has: 
;; (defn ExampleLastIndex
;;   {:added "1.0"
;;    :go "exampleLastIndex()"}
;;   [])
;; 
JOKER FUNC bytes_test.ExampleLastIndexAny has: 
;; (defn ExampleLastIndexAny
;;   {:added "1.0"
;;    :go "exampleLastIndexAny()"}
;;   [])
;; 
JOKER FUNC bytes_test.ExampleLastIndexByte has: 
;; (defn ExampleLastIndexByte
;;   {:added "1.0"
;;    :go "exampleLastIndexByte()"}
;;   [])
;; 
JOKER FUNC bytes_test.ExampleLastIndexFunc has: 
;; (defn ExampleLastIndexFunc
;;   {:added "1.0"
;;    :go "exampleLastIndexFunc()"}
;;   [])
;; 
JOKER FUNC bytes_test.ExampleMap has: 
;; (defn ExampleMap
;;   {:added "1.0"
;;    :go "exampleMap()"}
;;   [])
;; 
JOKER FUNC bytes_test.ExampleReader_Len has: 
;; (defn ExampleReader_Len
;;   {:added "1.0"
;;    :go "exampleReader_Len()"}
;;   [])
;; 
JOKER FUNC bytes_test.ExampleRepeat has: 
;; (defn ExampleRepeat
;;   {:added "1.0"
;;    :go "exampleRepeat()"}
;;   [])
;; 
JOKER FUNC bytes_test.ExampleReplace has: 
;; (defn ExampleReplace
;;   {:added "1.0"
;;    :go "exampleReplace()"}
;;   [])
;; 
JOKER FUNC bytes_test.ExampleRunes has: 
;; (defn ExampleRunes
;;   {:added "1.0"
;;    :go "exampleRunes()"}
;;   [])
;; 
JOKER FUNC bytes_test.ExampleSplit has: 
;; (defn ExampleSplit
;;   {:added "1.0"
;;    :go "exampleSplit()"}
;;   [])
;; 
JOKER FUNC bytes_test.ExampleSplitAfter has: 
;; (defn ExampleSplitAfter
;;   {:added "1.0"
;;    :go "exampleSplitAfter()"}
;;   [])
;; 
JOKER FUNC bytes_test.ExampleSplitAfterN has: 
;; (defn ExampleSplitAfterN
;;   {:added "1.0"
;;    :go "exampleSplitAfterN()"}
;;   [])
;; 
JOKER FUNC bytes_test.ExampleSplitN has: 
;; (defn ExampleSplitN
;;   {:added "1.0"
;;    :go "exampleSplitN()"}
;;   [])
;; 
JOKER FUNC bytes_test.ExampleTitle has: 
;; (defn ExampleTitle
;;   {:added "1.0"
;;    :go "exampleTitle()"}
;;   [])
;; 
JOKER FUNC bytes_test.ExampleToLower has: 
;; (defn ExampleToLower
;;   {:added "1.0"
;;    :go "exampleToLower()"}
;;   [])
;; 
JOKER FUNC bytes_test.ExampleToTitle has: 
;; (defn ExampleToTitle
;;   {:added "1.0"
;;    :go "exampleToTitle()"}
;;   [])
;; 
JOKER FUNC bytes_test.ExampleToUpper has: 
;; (defn ExampleToUpper
;;   {:added "1.0"
;;    :go "exampleToUpper()"}
;;   [])
;; 
JOKER FUNC bytes_test.ExampleTrim has: 
;; (defn ExampleTrim
;;   {:added "1.0"
;;    :go "exampleTrim()"}
;;   [])
;; 
JOKER FUNC bytes_test.ExampleTrimFunc has: 
;; (defn ExampleTrimFunc
;;   {:added "1.0"
;;    :go "exampleTrimFunc()"}
;;   [])
;; 
JOKER FUNC bytes_test.ExampleTrimLeft has: 
;; (defn ExampleTrimLeft
;;   {:added "1.0"
;;    :go "exampleTrimLeft()"}
;;   [])
;; 
JOKER FUNC bytes_test.ExampleTrimLeftFunc has: 
;; (defn ExampleTrimLeftFunc
;;   {:added "1.0"
;;    :go "exampleTrimLeftFunc()"}
;;   [])
;; 
JOKER FUNC bytes_test.ExampleTrimPrefix has: 
;; (defn ExampleTrimPrefix
;;   {:added "1.0"
;;    :go "exampleTrimPrefix()"}
;;   [])
;; 
JOKER FUNC bytes_test.ExampleTrimRight has: 
;; (defn ExampleTrimRight
;;   {:added "1.0"
;;    :go "exampleTrimRight()"}
;;   [])
;; 
JOKER FUNC bytes_test.ExampleTrimRightFunc has: 
;; (defn ExampleTrimRightFunc
;;   {:added "1.0"
;;    :go "exampleTrimRightFunc()"}
;;   [])
;; 
JOKER FUNC bytes_test.ExampleTrimSpace has: 
;; (defn ExampleTrimSpace
;;   {:added "1.0"
;;    :go "exampleTrimSpace()"}
;;   [])
;; 
JOKER FUNC bytes_test.ExampleTrimSuffix has: 
;; (defn ExampleTrimSuffix
;;   {:added "1.0"
;;    :go "exampleTrimSuffix()"}
;;   [])
;; 
JOKER FUNC bytes_test.TestBasicOperations has: 
;; (defn TestBasicOperations
;;   {:added "1.0"
;;    :go "testBasicOperations(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{444151 0xc000303160}) t])
;; 
JOKER FUNC bytes_test.TestBufferGrowNegative has: 
;; (defn TestBufferGrowNegative
;;   {:added "1.0"
;;    :go "testBufferGrowNegative(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{515601 0xc0005deb20}) t])
;; 
JOKER FUNC bytes_test.TestBufferGrowth has: 
;; (defn TestBufferGrowth
;;   "Tests that we occasionally compact. Issue 5154."
;;   {:added "1.0"
;;    :go "testBufferGrowth(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{456348 0xc0002f4f60}) t])
;; 
JOKER FUNC bytes_test.TestBufferTruncateNegative has: 
;; (defn TestBufferTruncateNegative
;;   {:added "1.0"
;;    :go "testBufferTruncateNegative(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{515783 0xc0005dee20}) t])
;; 
JOKER FUNC bytes_test.TestBufferTruncateOutOfRange has: 
;; (defn TestBufferTruncateOutOfRange
;;   {:added "1.0"
;;    :go "testBufferTruncateOutOfRange(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{515975 0xc0005df120}) t])
;; 
JOKER FUNC bytes_test.TestCapWithPreallocatedSlice has: 
;; (defn TestCapWithPreallocatedSlice
;;   {:added "1.0"
;;    :go "testCapWithPreallocatedSlice(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{447306 0xc00030ef80}) t])
;; 
JOKER FUNC bytes_test.TestCapWithSliceAndWrittenData has: 
;; (defn TestCapWithSliceAndWrittenData
;;   {:added "1.0"
;;    :go "testCapWithSliceAndWrittenData(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{447467 0xc00030f2c0}) t])
;; 
JOKER FUNC bytes_test.TestCompare has: 
;; (defn TestCompare
;;   {:added "1.0"
;;    :go "testCompare(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{458863 0xc0004e2440}) t])
;; 
JOKER FUNC bytes_test.TestCompareBytes has: 
;; (defn TestCompareBytes
;;   {:added "1.0"
;;    :go "testCompareBytes(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{459241 0xc0004e2ce0}) t])
;; 
JOKER FUNC bytes_test.TestCompareIdenticalSlice has: 
;; (defn TestCompareIdenticalSlice
;;   {:added "1.0"
;;    :go "testCompareIdenticalSlice(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{459056 0xc0004e2920}) t])
;; 
JOKER FUNC bytes_test.TestContains has: 
;; (defn TestContains
;;   {:added "1.0"
;;    :go "testContains(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{516439 0xc0005df900}) t])
;; 
JOKER FUNC bytes_test.TestContainsAny has: 
;; (defn TestContainsAny
;;   {:added "1.0"
;;    :go "testContainsAny(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{517110 0xc0005ea5c0}) t])
;; 
JOKER FUNC bytes_test.TestContainsRune has: 
;; (defn TestContainsRune
;;   {:added "1.0"
;;    :go "testContainsRune(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{517690 0xc0005eb120}) t])
;; 
JOKER FUNC bytes_test.TestCountByte has: 
;; (defn TestCountByte
;;   "test count of a single byte across page offsets"
;;   {:added "1.0"
;;    :go "testCountByte(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{490516 0xc00055aac0}) t])
;; 
JOKER FUNC bytes_test.TestCountByteNoMatch has: 
;; (defn TestCountByteNoMatch
;;   "Make sure we don't count bytes outside our window"
;;   {:added "1.0"
;;    :go "testCountByteNoMatch(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{491463 0xc00055be00}) t])
;; 
JOKER FUNC bytes_test.TestEmptyReaderConcurrent has: 
;; (defn TestEmptyReaderConcurrent
;;   {:added "1.0"
;;    :go "testEmptyReaderConcurrent(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{436757 0xc0004d1260}) t])
;; 
JOKER FUNC bytes_test.TestEqual has: 
;; (defn TestEqual
;;   {:added "1.0"
;;    :go "testEqual(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{481637 0xc00052b8c0}) t])
;; 
JOKER FUNC bytes_test.TestEqualExhaustive has: 
;; (defn TestEqualExhaustive
;;   {:added "1.0"
;;    :go "testEqualExhaustive(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{481950 0xc00053c120}) t])
;; 
JOKER FUNC bytes_test.TestEqualFold has: 
;; (defn TestEqualFold
;;   {:added "1.0"
;;    :go "testEqualFold(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{515224 0xc0005de200}) t])
;; 
JOKER FUNC bytes_test.TestEqualNearPageBoundary has: 
;; (defn TestEqualNearPageBoundary
;;   {:added "1.0"
;;    :go "testEqualNearPageBoundary(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{479888 0xc00051bac0}) t])
;; 
JOKER FUNC bytes_test.TestExplode has: 
;; (defn TestExplode
;;   {:added "1.0"
;;    :go "testExplode(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{496678 0xc000579be0}) t])
;; 
JOKER FUNC bytes_test.TestFields has: 
;; (defn TestFields
;;   {:added "1.0"
;;    :go "testFields(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{500754 0xc00058f920}) t])
;; 
JOKER FUNC bytes_test.TestFieldsFunc has: 
;; (defn TestFieldsFunc
;;   {:added "1.0"
;;    :go "testFieldsFunc(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{501365 0xc000590580}) t])
;; 
JOKER FUNC bytes_test.TestGrow has: 
;; (defn TestGrow
;;   {:added "1.0"
;;    :go "testGrow(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{453683 0xc0004082c0}) t])
;; 
JOKER FUNC bytes_test.TestGrowOverflow has: 
;; (defn TestGrowOverflow
;;   {:added "1.0"
;;    :go "testGrowOverflow(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{454759 0xc0004094e0}) t])
;; 
JOKER FUNC bytes_test.TestIndex has: 
;; (defn TestIndex
;;   {:added "1.0"
;;    :go "testIndex(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{485780 0xc0005490c0}) t])
;; 
JOKER FUNC bytes_test.TestIndexAny has: 
;; (defn TestIndexAny
;;   {:added "1.0"
;;    :go "testIndexAny(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{485959 0xc000549400}) t])
;; 
JOKER FUNC bytes_test.TestIndexByte has: 
;; (defn TestIndexByte
;;   {:added "1.0"
;;    :go "testIndexByte(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{486165 0xc000549740}) t])
;; 
JOKER FUNC bytes_test.TestIndexByteBig has: 
;; (defn TestIndexByteBig
;;   "test a larger buffer with different sizes and alignments"
;;   {:added "1.0"
;;    :go "testIndexByteBig(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{487168 0xc00054ea80}) t])
;; 
JOKER FUNC bytes_test.TestIndexByteNearPageBoundary has: 
;; (defn TestIndexByteNearPageBoundary
;;   {:added "1.0"
;;    :go "testIndexByteNearPageBoundary(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{480109 0xc00052a040}) t])
;; 
JOKER FUNC bytes_test.TestIndexByteSmall has: 
;; (defn TestIndexByteSmall
;;   "test a small index across all page offsets"
;;   {:added "1.0"
;;    :go "testIndexByteSmall(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{488307 0xc0005540e0}) t])
;; 
JOKER FUNC bytes_test.TestIndexFunc has: 
;; (defn TestIndexFunc
;;   {:added "1.0"
;;    :go "testIndexFunc(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{512062 0xc0005c4340}) t])
;; 
JOKER FUNC bytes_test.TestIndexNearPageBoundary has: 
;; (defn TestIndexNearPageBoundary
;;   {:added "1.0"
;;    :go "testIndexNearPageBoundary(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{480325 0xc00052a480}) t])
;; 
JOKER FUNC bytes_test.TestIndexRune has: 
;; (defn TestIndexRune
;;   {:added "1.0"
;;    :go "testIndexRune(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{489088 0xc000555260}) t])
;; 
JOKER FUNC bytes_test.TestLargeByteReads has: 
;; (defn TestLargeByteReads
;;   {:added "1.0"
;;    :go "testLargeByteReads(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{446485 0xc000309e80}) t])
;; 
JOKER FUNC bytes_test.TestLargeByteWrites has: 
;; (defn TestLargeByteWrites
;;   {:added "1.0"
;;    :go "testLargeByteWrites(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{445842 0xc000309180}) t])
;; 
JOKER FUNC bytes_test.TestLargeStringReads has: 
;; (defn TestLargeStringReads
;;   {:added "1.0"
;;    :go "testLargeStringReads(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{446183 0xc000309840}) t])
;; 
JOKER FUNC bytes_test.TestLargeStringWrites has: 
;; (defn TestLargeStringWrites
;;   {:added "1.0"
;;    :go "testLargeStringWrites(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{445496 0xc000308ac0}) t])
;; 
JOKER FUNC bytes_test.TestLastIndex has: 
;; (defn TestLastIndex
;;   {:added "1.0"
;;    :go "testLastIndex(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{485866 0xc000549260}) t])
;; 
JOKER FUNC bytes_test.TestLastIndexAny has: 
;; (defn TestLastIndexAny
;;   {:added "1.0"
;;    :go "testLastIndexAny(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{486057 0xc0005495a0}) t])
;; 
JOKER FUNC bytes_test.TestLastIndexByte has: 
;; (defn TestLastIndexByte
;;   {:added "1.0"
;;    :go "testLastIndexByte(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{486539 0xc000549fa0}) t])
;; 
JOKER FUNC bytes_test.TestMap has: 
;; (defn TestMap
;;   {:added "1.0"
;;    :go "testMap(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{504263 0xc000595480}) t])
;; 
JOKER FUNC bytes_test.TestMixedReadsAndWrites has: 
;; (defn TestMixedReadsAndWrites
;;   {:added "1.0"
;;    :go "testMixedReadsAndWrites(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{446787 0xc00030e4c0}) t])
;; 
JOKER FUNC bytes_test.TestNewBuffer has: 
;; (defn TestNewBuffer
;;   {:added "1.0"
;;    :go "testNewBuffer(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{443417 0xc000302500}) t])
;; 
JOKER FUNC bytes_test.TestNewBufferString has: 
;; (defn TestNewBufferString
;;   {:added "1.0"
;;    :go "testNewBufferString(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{443530 0xc000302720}) t])
;; 
JOKER FUNC bytes_test.TestNext has: 
;; (defn TestNext
;;   {:added "1.0"
;;    :go "testNext(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{451265 0xc0000ab520}) t])
;; 
JOKER FUNC bytes_test.TestNil has: 
;; (defn TestNil
;;   {:added "1.0"
;;    :go "testNil(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{447635 0xc00030f6c0}) t])
;; 
JOKER FUNC bytes_test.TestNotEqual has: 
;; (defn TestNotEqual
;;   "make sure Equal returns false for minimally different strings. The data
;; is all zeros except for a single one in one location."
;;   {:added "1.0"
;;    :go "testNotEqual(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{482681 0xc00053d000}) t])
;; 
JOKER FUNC bytes_test.TestReadAfterBigSeek has: 
;; (defn TestReadAfterBigSeek
;;   {:added "1.0"
;;    :go "testReadAfterBigSeek(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{435460 0xc0003c15a0}) t])
;; 
JOKER FUNC bytes_test.TestReadBytes has: 
;; (defn TestReadBytes
;;   {:added "1.0"
;;    :go "testReadBytes(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{452551 0xc000400c60}) t])
;; 
JOKER FUNC bytes_test.TestReadEmptyAtEOF has: 
;; (defn TestReadEmptyAtEOF
;;   "Was a bug: used to give EOF reading empty slice at EOF."
;;   {:added "1.0"
;;    :go "testReadEmptyAtEOF(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{455098 0xc0004099a0}) t])
;; 
JOKER FUNC bytes_test.TestReadFrom has: 
;; (defn TestReadFrom
;;   {:added "1.0"
;;    :go "testReadFrom(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{447767 0xc00030f9a0}) t])
;; 
JOKER FUNC bytes_test.TestReadFromNegativeReader has: 
;; (defn TestReadFromNegativeReader
;;   {:added "1.0"
;;    :go "testReadFromNegativeReader(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{448827 0xc000312b00}) t])
;; 
JOKER FUNC bytes_test.TestReadFromPanicReader has: 
;; (defn TestReadFromPanicReader
;;   "Make sure that an empty Buffer remains empty when
;; it is "grown" before a Read that panics"
;;   {:added "1.0"
;;    :go "testReadFromPanicReader(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{448288 0xc000312360}) t])
;; 
JOKER FUNC bytes_test.TestReadString has: 
;; (defn TestReadString
;;   {:added "1.0"
;;    :go "testReadString(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{453004 0xc000401480}) t])
;; 
JOKER FUNC bytes_test.TestReader has: 
;; (defn TestReader
;;   {:added "1.0"
;;    :go "testReader(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{434018 0xc0000ef4a0}) t])
;; 
JOKER FUNC bytes_test.TestReaderAt has: 
;; (defn TestReaderAt
;;   {:added "1.0"
;;    :go "testReaderAt(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{435729 0xc0003c1c60}) t])
;; 
JOKER FUNC bytes_test.TestReaderAtConcurrent has: 
;; (defn TestReaderAtConcurrent
;;   {:added "1.0"
;;    :go "testReaderAtConcurrent(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{436421 0xc0004d0c00}) t])
;; 
JOKER FUNC bytes_test.TestReaderCopyNothing has: 
;; (defn TestReaderCopyNothing
;;   "verify that copying from an empty reader always has the same results,
;; regardless of the presence of a WriteTo method."
;;   {:added "1.0"
;;    :go "testReaderCopyNothing(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{439575 0xc00042a620}) t])
;; 
JOKER FUNC bytes_test.TestReaderDoubleUnreadRune has: 
;; (defn TestReaderDoubleUnreadRune
;;   {:added "1.0"
;;    :go "testReaderDoubleUnreadRune(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{439104 0xc0004b9fa0}) t])
;; 
JOKER FUNC bytes_test.TestReaderLen has: 
;; (defn TestReaderLen
;;   {:added "1.0"
;;    :go "testReaderLen(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{437773 0xc0004b8420}) t])
;; 
JOKER FUNC bytes_test.TestReaderLenSize has: 
;; (defn TestReaderLenSize
;;   "tests that Len is affected by reads, but Size is not."
;;   {:added "1.0"
;;    :go "testReaderLenSize(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{440105 0xc00042af60}) t])
;; 
JOKER FUNC bytes_test.TestReaderReset has: 
;; (defn TestReaderReset
;;   {:added "1.0"
;;    :go "testReaderReset(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{440335 0xc00042b500}) t])
;; 
JOKER FUNC bytes_test.TestReaderWriteTo has: 
;; (defn TestReaderWriteTo
;;   {:added "1.0"
;;    :go "testReaderWriteTo(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{437215 0xc0004d1960}) t])
;; 
JOKER FUNC bytes_test.TestRepeat has: 
;; (defn TestRepeat
;;   {:added "1.0"
;;    :go "testRepeat(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{506130 0xc00059b5a0}) t])
;; 
JOKER FUNC bytes_test.TestRepeatCatchesOverflow has: 
;; (defn TestRepeatCatchesOverflow
;;   "See Issue golang.org/issue/16237"
;;   {:added "1.0"
;;    :go "testRepeatCatchesOverflow(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{506672 0xc00059bfe0}) t])
;; 
JOKER FUNC bytes_test.TestReplace has: 
;; (defn TestReplace
;;   {:added "1.0"
;;    :go "testReplace(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{513337 0xc0005c5ec0}) t])
;; 
JOKER FUNC bytes_test.TestRuneIO has: 
;; (defn TestRuneIO
;;   {:added "1.0"
;;    :go "testRuneIO(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{449607 0xc000313760}) t])
;; 
JOKER FUNC bytes_test.TestRunes has: 
;; (defn TestRunes
;;   {:added "1.0"
;;    :go "testRunes(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{507867 0xc0005a3aa0}) t])
;; 
JOKER FUNC bytes_test.TestSplit has: 
;; (defn TestSplit
;;   {:added "1.0"
;;    :go "testSplit(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{497703 0xc00057f500}) t])
;; 
JOKER FUNC bytes_test.TestSplitAfter has: 
;; (defn TestSplitAfter
;;   {:added "1.0"
;;    :go "testSplitAfter(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{499390 0xc000583d00}) t])
;; 
JOKER FUNC bytes_test.TestTitle has: 
;; (defn TestTitle
;;   {:added "1.0"
;;    :go "testTitle(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{514188 0xc0005d8fa0}) t])
;; 
JOKER FUNC bytes_test.TestToLower has: 
;; (defn TestToLower
;;   {:added "1.0"
;;    :go "testToLower(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{505728 0xc00059ad80}) t])
;; 
JOKER FUNC bytes_test.TestToTitle has: 
;; (defn TestToTitle
;;   {:added "1.0"
;;    :go "testToTitle(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{514591 0xc0005d9700}) t])
;; 
JOKER FUNC bytes_test.TestToUpper has: 
;; (defn TestToUpper
;;   {:added "1.0"
;;    :go "testToUpper(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{505642 0xc00059abe0}) t])
;; 
JOKER FUNC bytes_test.TestTrim has: 
;; (defn TestTrim
;;   {:added "1.0"
;;    :go "testTrim(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{509340 0xc0005a9520}) t])
;; 
JOKER FUNC bytes_test.TestTrimFunc has: 
;; (defn TestTrimFunc
;;   {:added "1.0"
;;    :go "testTrimFunc(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{510980 0xc0005aef60}) t])
;; 
JOKER FUNC bytes_test.TestTrimSpace has: 
;; (defn TestTrimSpace
;;   {:added "1.0"
;;    :go "testTrimSpace(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{505816 0xc00059af20}) t])
;; 
JOKER FUNC bytes_test.TestUnreadByte has: 
;; (defn TestUnreadByte
;;   {:added "1.0"
;;    :go "testUnreadByte(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{455320 0xc000409e80}) t])
;; 
JOKER FUNC bytes_test.TestUnreadRuneError has: 
;; (defn TestUnreadRuneError
;;   {:added "1.0"
;;    :go "testUnreadRuneError(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{438744 0xc0004b9960}) t])
;; 
JOKER FUNC bytes_test.TestWriteTo has: 
;; (defn TestWriteTo
;;   {:added "1.0"
;;    :go "testWriteTo(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{449339 0xc000313120}) t])
;; 
JOKER FUNC bzip2.BenchmarkDecodeDigits has: 
;; (defn BenchmarkDecodeDigits
;;   {:added "1.0"
;;    :go "benchmarkDecodeDigits(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{553148 0xc00022fb00}) b])
;; 
JOKER FUNC bzip2.BenchmarkDecodeRand has: 
;; (defn BenchmarkDecodeRand
;;   {:added "1.0"
;;    :go "benchmarkDecodeRand(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{553289 0xc00023a060}) b])
;; 
JOKER FUNC bzip2.BenchmarkDecodeTwain has: 
;; (defn BenchmarkDecodeTwain
;;   {:added "1.0"
;;    :go "benchmarkDecodeTwain(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{553219 0xc0002357a0}) b])
;; 
JOKER FUNC bzip2.NewReader has: 
;; (defn ^ABEND881(unrecognized Expr type *ast.SelectorExpr at: &{io Reader}) NewReader
;;   "NewReader returns an io.Reader which decompresses bzip2 data from r.
;; If r does not also implement io.ByteReader,
;; the decompressor may read more data than necessary from r."
;;   {:added "1.0"
;;    :go "newReader(r)"}
;;   [^ABEND881(unrecognized Expr type *ast.SelectorExpr at: &{io Reader}) r])
;; 
JOKER FUNC bzip2.TestBitReader has: 
;; (defn TestBitReader
;;   {:added "1.0"
;;    :go "testBitReader(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{550771 0xc0001d9440}) t])
;; 
JOKER FUNC bzip2.TestMTF has: 
;; (defn TestMTF
;;   {:added "1.0"
;;    :go "testMTF(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{551749 0xc0001731a0}) t])
;; 
JOKER FUNC bzip2.TestReader has: 
;; (defn TestReader
;;   {:added "1.0"
;;    :go "testReader(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{547471 0xc00041de40}) t])
;; 
JOKER FUNC bzip2.TestZeroRead has: 
;; (defn TestZeroRead
;;   {:added "1.0"
;;    :go "testZeroRead(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{552278 0xc0001585a0}) t])
;; 
JOKER FUNC cgi.Request has: 
;; (defn ^[ABEND881(unrecognized Expr type *ast.SelectorExpr at: &{http Request}) Error] Request
;;   "Request returns the HTTP request as represented in the current
;; environment. This assumes the current program is being run
;; by a web server in a CGI environment.
;; The returned Request's Body is populated, if applicable."
;;   {:added "1.0"
;;    :go "request()"}
;;   [])
;; 
JOKER FUNC cgi.RequestFromMap has: 
;; (defn ^[ABEND881(unrecognized Expr type *ast.SelectorExpr at: &{http Request}) Error] RequestFromMap
;;   "RequestFromMap creates an http.Request from CGI variables.
;; The returned Request's Body field is not populated."
;;   {:added "1.0"
;;    :go "requestFromMap(params)"}
;;   [^ABEND881(unrecognized Expr type *ast.MapType at: &{9451707 string string}) params])
;; 
JOKER FUNC cgi.Serve has: 
;; (defn ^Error Serve
;;   "Serve executes the provided Handler on the currently active CGI
;; request, if any. If there's no current CGI environment
;; an error is returned. The provided handler may be nil to use
;; http.DefaultServeMux."
;;   {:added "1.0"
;;    :go "serve(handler)"}
;;   [^ABEND881(unrecognized Expr type *ast.SelectorExpr at: &{http Handler}) handler])
;; 
JOKER FUNC cgi.Test500WithEmptyHeaders has: 
;; (defn Test500WithEmptyHeaders
;;   {:added "1.0"
;;    :go "test500WithEmptyHeaders(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{9438254 0xc0043ecd40}) t])
;; 
JOKER FUNC cgi.Test500WithNoContentType has: 
;; (defn Test500WithNoContentType
;;   {:added "1.0"
;;    :go "test500WithNoContentType(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{9438172 0xc0043ecbe0}) t])
;; 
JOKER FUNC cgi.Test500WithNoHeaders has: 
;; (defn Test500WithNoHeaders
;;   "golang.org/issue/7198"
;;   {:added "1.0"
;;    :go "test500WithNoHeaders(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{9438080 0xc0043eca80}) t])
;; 
JOKER FUNC cgi.TestBeChildCGIProcess has: 
;; (defn TestBeChildCGIProcess
;;   "Note: not actually a test."
;;   {:added "1.0"
;;    :go "testBeChildCGIProcess(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{9438887 0xc0043ed840}) t])
;; 
JOKER FUNC cgi.TestCGIBasicGet has: 
;; (defn TestCGIBasicGet
;;   {:added "1.0"
;;    :go "testCGIBasicGet(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{9421643 0xc0043b70c0}) t])
;; 
JOKER FUNC cgi.TestCGIBasicGetAbsPath has: 
;; (defn TestCGIBasicGetAbsPath
;;   {:added "1.0"
;;    :go "testCGIBasicGetAbsPath(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{9423911 0xc0043be760}) t])
;; 
JOKER FUNC cgi.TestCGIBasicPost has: 
;; (defn TestCGIBasicPost
;;   {:added "1.0"
;;    :go "testCGIBasicPost(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{9426964 0xc0043c27c0}) t])
;; 
JOKER FUNC cgi.TestCGIEnvIPv6 has: 
;; (defn TestCGIEnvIPv6
;;   {:added "1.0"
;;    :go "testCGIEnvIPv6(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{9422877 0xc0043b7da0}) t])
;; 
JOKER FUNC cgi.TestCGIPostChunked has: 
;; (defn TestCGIPostChunked
;;   "The CGI spec doesn't allow chunked requests."
;;   {:added "1.0"
;;    :go "testCGIPostChunked(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{9427611 0xc0043c2ec0}) t])
;; 
JOKER FUNC cgi.TestChildOnlyHeaders has: 
;; (defn TestChildOnlyHeaders
;;   "Test that a child handler writing only headers works.
;; golang.org/issue/7196"
;;   {:added "1.0"
;;    :go "testChildOnlyHeaders(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{9437556 0xc0043ec300}) t])
;; 
JOKER FUNC cgi.TestCopyError has: 
;; (defn TestCopyError
;;   "TestCopyError tests that we kill the process if there's an error copying
;; its output. (for example, from the client having gone away)"
;;   {:added "1.0"
;;    :go "testCopyError(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{9429320 0xc0043ce6a0}) t])
;; 
JOKER FUNC cgi.TestDirUnix has: 
;; (defn TestDirUnix
;;   {:added "1.0"
;;    :go "testDirUnix(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{9430634 0xc0043cfe60}) t])
;; 
JOKER FUNC cgi.TestDirWindows has: 
;; (defn TestDirWindows
;;   {:added "1.0"
;;    :go "testDirWindows(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{9431260 0xc0043d0880}) t])
;; 
JOKER FUNC cgi.TestDropProxyHeader has: 
;; (defn TestDropProxyHeader
;;   "Issue 16405: CGI+http.Transport differing uses of HTTP_PROXY.
;; Verify we don't set the HTTP_PROXY environment variable.
;; Hope nobody was depending on it. It's not a known header, though."
;;   {:added "1.0"
;;    :go "testDropProxyHeader(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{9426006 0xc0043bfcc0}) t])
;; 
JOKER FUNC cgi.TestDupHeaders has: 
;; (defn TestDupHeaders
;;   {:added "1.0"
;;    :go "testDupHeaders(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{9425316 0xc0043bf760}) t])
;; 
JOKER FUNC cgi.TestEnvOverride has: 
;; (defn TestEnvOverride
;;   {:added "1.0"
;;    :go "testEnvOverride(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{9432354 0xc0043d18e0}) t])
;; 
JOKER FUNC cgi.TestHandlerStderr has: 
;; (defn TestHandlerStderr
;;   {:added "1.0"
;;    :go "testHandlerStderr(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{9433086 0xc0043dc380}) t])
;; 
JOKER FUNC cgi.TestHostingOurselves has: 
;; (defn TestHostingOurselves
;;   "This test is a CGI host (testing host.go) that runs its own binary
;; as a child process testing the other half of CGI (child.go)."
;;   {:added "1.0"
;;    :go "testHostingOurselves(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{9434613 0xc0043dd740}) t])
;; 
JOKER FUNC cgi.TestInternalRedirect has: 
;; (defn TestInternalRedirect
;;   {:added "1.0"
;;    :go "testInternalRedirect(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{9428626 0xc0043c3da0}) t])
;; 
JOKER FUNC cgi.TestKillChildAfterCopyError has: 
;; (defn TestKillChildAfterCopyError
;;   "If there's an error copying the child's output to the parent, test
;; that we kill the child."
;;   {:added "1.0"
;;    :go "testKillChildAfterCopyError(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{9436464 0xc0043e50e0}) t])
;; 
JOKER FUNC cgi.TestPathInfo has: 
;; (defn TestPathInfo
;;   {:added "1.0"
;;    :go "testPathInfo(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{9424384 0xc0043beda0}) t])
;; 
JOKER FUNC cgi.TestPathInfoDirRoot has: 
;; (defn TestPathInfoDirRoot
;;   {:added "1.0"
;;    :go "testPathInfoDirRoot(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{9424876 0xc0043bf2a0}) t])
;; 
JOKER FUNC cgi.TestPathInfoNoRoot has: 
;; (defn TestPathInfoNoRoot
;;   {:added "1.0"
;;    :go "testPathInfoNoRoot(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{9426558 0xc0043c2300}) t])
;; 
JOKER FUNC cgi.TestRedirect has: 
;; (defn TestRedirect
;;   {:added "1.0"
;;    :go "testRedirect(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{9428180 0xc0043c35e0}) t])
;; 
JOKER FUNC cgi.TestRemoveLeadingDuplicates has: 
;; (defn TestRemoveLeadingDuplicates
;;   {:added "1.0"
;;    :go "testRemoveLeadingDuplicates(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{9433517 0xc0043dca60}) t])
;; 
JOKER FUNC cgi.TestRequest has: 
;; (defn TestRequest
;;   {:added "1.0"
;;    :go "testRequest(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{9415478 0xc004382e40}) t])
;; 
JOKER FUNC cgi.TestRequestWithTLS has: 
;; (defn TestRequestWithTLS
;;   {:added "1.0"
;;    :go "testRequestWithTLS(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{9417127 0xc0043a0be0}) t])
;; 
JOKER FUNC cgi.TestRequestWithoutHost has: 
;; (defn TestRequestWithoutHost
;;   {:added "1.0"
;;    :go "testRequestWithoutHost(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{9417728 0xc0043a1460}) t])
;; 
JOKER FUNC cgi.TestRequestWithoutRemotePort has: 
;; (defn TestRequestWithoutRemotePort
;;   {:added "1.0"
;;    :go "testRequestWithoutRemotePort(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{9418790 0xc0043a8460}) t])
;; 
JOKER FUNC cgi.TestRequestWithoutRequestURI has: 
;; (defn TestRequestWithoutRequestURI
;;   {:added "1.0"
;;    :go "testRequestWithoutRequestURI(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{9418200 0xc0043a1c20}) t])
;; 
JOKER FUNC cgo._cgo_panic has: 
;; (defn _cgo_panic
;;   "go:linkname _cgo_panic _cgo_panic
;; go:cgo_export_static _cgo_panic
;; go:cgo_export_dynamic _cgo_panic
;; go:nosplit
;; go:norace"
;;   {:added "1.0"
;;    :go "_cgo_panic(a, n)"}
;;   [^ABEND881(unrecognized Expr type *ast.SelectorExpr at: &{unsafe Pointer}) a, n])
;; 
JOKER FUNC cgo._runtime_cgocallback has: 
;; (defn _runtime_cgocallback
;;   "cgocallback is defined in runtime
;; go:linkname _runtime_cgocallback runtime.cgocallback"
;;   {:added "1.0"
;;    :go "_runtime_cgocallback()"}
;;   [])
;; 
JOKER FUNC chacha20poly1305.BenchmarkChacha20Poly1305Open_1350 has: 
;; (defn BenchmarkChacha20Poly1305Open_1350
;;   {:added "1.0"
;;    :go "benchmarkChacha20Poly1305Open_1350(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{14386264 0xc0059c7500}) b])
;; 
JOKER FUNC chacha20poly1305.BenchmarkChacha20Poly1305Open_64 has: 
;; (defn BenchmarkChacha20Poly1305Open_64
;;   {:added "1.0"
;;    :go "benchmarkChacha20Poly1305Open_64(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{14386042 0xc0059c7180}) b])
;; 
JOKER FUNC chacha20poly1305.BenchmarkChacha20Poly1305Open_8K has: 
;; (defn BenchmarkChacha20Poly1305Open_8K
;;   {:added "1.0"
;;    :go "benchmarkChacha20Poly1305Open_8K(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{14386490 0xc0059c7880}) b])
;; 
JOKER FUNC chacha20poly1305.BenchmarkChacha20Poly1305Seal_1350 has: 
;; (defn BenchmarkChacha20Poly1305Seal_1350
;;   {:added "1.0"
;;    :go "benchmarkChacha20Poly1305Seal_1350(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{14386378 0xc0059c76c0}) b])
;; 
JOKER FUNC chacha20poly1305.BenchmarkChacha20Poly1305Seal_64 has: 
;; (defn BenchmarkChacha20Poly1305Seal_64
;;   {:added "1.0"
;;    :go "benchmarkChacha20Poly1305Seal_64(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{14386152 0xc0059c7340}) b])
;; 
JOKER FUNC chacha20poly1305.BenchmarkChacha20Poly1305Seal_8K has: 
;; (defn BenchmarkChacha20Poly1305Seal_8K
;;   {:added "1.0"
;;    :go "benchmarkChacha20Poly1305Seal_8K(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{14386604 0xc0059c7a60}) b])
;; 
JOKER FUNC chacha20poly1305.New has: 
;; (defn ^[ABEND881(unrecognized Expr type *ast.SelectorExpr at: &{cipher AEAD}) Error] New
;;   "New returns a ChaCha20-Poly1305 AEAD that uses the given, 256-bit key."
;;   {:added "1.0"
;;    :go "new(key)"}
;;   [^ABEND881(unrecognized Expr type *ast.ArrayType at: &{14387374 <nil> byte}) key])
;; 
JOKER FUNC chacha20poly1305.TestRandom has: 
;; (defn TestRandom
;;   {:added "1.0"
;;    :go "testRandom(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{14383904 0xc0059b27c0}) t])
;; 
JOKER FUNC chacha20poly1305.TestVectors has: 
;; (defn TestVectors
;;   {:added "1.0"
;;    :go "testVectors(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{14382444 0xc00584eb20}) t])
;; 
JOKER FUNC cipher.NewCBCDecrypter has: 
;; (defn ^ABEND881(unrecognized Expr type *ast.InterfaceType at: &{1058810 0xc00080c450 false}) NewCBCDecrypter
;;   "NewCBCDecrypter returns a BlockMode which decrypts in cipher block chaining
;; mode, using the given Block. The length of iv must be the same as the
;; Block's block size and must match the iv used to encrypt the data."
;;   {:added "1.0"
;;    :go "newCBCDecrypter(b, iv)"}
;;   [b, ^ABEND881(unrecognized Expr type *ast.ArrayType at: &{1013356 <nil> byte}) iv])
;; 
JOKER FUNC cipher.NewCBCEncrypter has: 
;; (defn ^ABEND881(unrecognized Expr type *ast.InterfaceType at: &{1058810 0xc00080c450 false}) NewCBCEncrypter
;;   "NewCBCEncrypter returns a BlockMode which encrypts in cipher block chaining
;; mode, using the given Block. The length of iv must be the same as the
;; Block's block size."
;;   {:added "1.0"
;;    :go "newCBCEncrypter(b, iv)"}
;;   [b, ^ABEND881(unrecognized Expr type *ast.ArrayType at: &{1011631 <nil> byte}) iv])
;; 
JOKER FUNC cipher.NewCFBDecrypter has: 
;; (defn ^ABEND881(unrecognized Expr type *ast.InterfaceType at: &{1058096 0xc00080c330 false}) NewCFBDecrypter
;;   "NewCFBDecrypter returns a Stream which decrypts with cipher feedback mode,
;; using the given Block. The iv must be the same length as the Block's block
;; size."
;;   {:added "1.0"
;;    :go "newCFBDecrypter(block, iv)"}
;;   [block, ^ABEND881(unrecognized Expr type *ast.ArrayType at: &{1020877 <nil> byte}) iv])
;; 
JOKER FUNC cipher.NewCFBEncrypter has: 
;; (defn ^ABEND881(unrecognized Expr type *ast.InterfaceType at: &{1058096 0xc00080c330 false}) NewCFBEncrypter
;;   "NewCFBEncrypter returns a Stream which encrypts with cipher feedback mode,
;; using the given Block. The iv must be the same length as the Block's block
;; size."
;;   {:added "1.0"
;;    :go "newCFBEncrypter(block, iv)"}
;;   [block, ^ABEND881(unrecognized Expr type *ast.ArrayType at: &{1020622 <nil> byte}) iv])
;; 
JOKER FUNC cipher.NewCTR has: 
;; (defn ^ABEND881(unrecognized Expr type *ast.InterfaceType at: &{1058096 0xc00080c330 false}) NewCTR
;;   "NewCTR returns a Stream which encrypts/decrypts using the given Block in
;; counter mode. The length of iv must be the same as the Block's block size."
;;   {:added "1.0"
;;    :go "newCTR(block, iv)"}
;;   [block, ^ABEND881(unrecognized Expr type *ast.ArrayType at: &{1054227 <nil> byte}) iv])
;; 
JOKER FUNC cipher.NewGCM has: 
;; (defn ^[ABEND881(unrecognized Expr type *ast.InterfaceType at: &{1065024 0xc0007eeb40 false}) Error] NewGCM
;;   "NewGCM returns the given 128-bit, block cipher wrapped in Galois Counter Mode
;; with the standard nonce length.
;; 
;; In general, the GHASH operation performed by this implementation of GCM is not constant-time.
;; An exception is when the underlying Block was created by aes.NewCipher
;; on systems with hardware support for AES. See the crypto/aes package documentation for details."
;;   {:added "1.0"
;;    :go "newGCM(cipher)"}
;;   [cipher])
;; 
JOKER FUNC cipher.NewGCMWithNonceSize has: 
;; (defn ^[ABEND881(unrecognized Expr type *ast.InterfaceType at: &{1065024 0xc0007eeb40 false}) Error] NewGCMWithNonceSize
;;   "NewGCMWithNonceSize returns the given 128-bit, block cipher wrapped in Galois
;; Counter Mode, which accepts nonces of the given length.
;; 
;; Only use this function if you require compatibility with an existing
;; cryptosystem that uses non-standard nonce lengths. All other users should use
;; NewGCM, which is faster and more resistant to misuse."
;;   {:added "1.0"
;;    :go "newGCMWithNonceSize(cipher, size)"}
;;   [cipher, ^Int size])
;; 
JOKER FUNC cipher.NewGCMWithTagSize has: 
;; (defn ^[ABEND881(unrecognized Expr type *ast.InterfaceType at: &{1065024 0xc0007eeb40 false}) Error] NewGCMWithTagSize
;;   "NewGCMWithTagSize returns the given 128-bit, block cipher wrapped in Galois
;; Counter Mode, which generates tags with the given length.
;; 
;; Tag sizes between 12 and 16 bytes are allowed.
;; 
;; Only use this function if you require compatibility with an existing
;; cryptosystem that uses non-standard tag lengths. All other users should use
;; NewGCM, which is more resistant to misuse."
;;   {:added "1.0"
;;    :go "newGCMWithTagSize(cipher, tagSize)"}
;;   [cipher, ^Int tagSize])
;; 
JOKER FUNC cipher.NewOFB has: 
;; (defn ^ABEND881(unrecognized Expr type *ast.InterfaceType at: &{1058096 0xc00080c330 false}) NewOFB
;;   "NewOFB returns a Stream that encrypts or decrypts using the block cipher b
;; in output feedback mode. The initialization vector iv's length must be equal
;; to b's block size."
;;   {:added "1.0"
;;    :go "newOFB(b, iv)"}
;;   [b, ^ABEND881(unrecognized Expr type *ast.ArrayType at: &{1055938 <nil> byte}) iv])
;; 
JOKER FUNC cipher.TestXOR has: 
;; (defn TestXOR
;;   {:added "1.0"
;;    :go "testXOR(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{997732 0xc000aa9ce0}) t])
;; 
JOKER FUNC cipher_test.BenchmarkAESCBCDecrypt1K has: 
;; (defn BenchmarkAESCBCDecrypt1K
;;   {:added "1.0"
;;    :go "benchmarkAESCBCDecrypt1K(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{1063061 0xc0007d4900}) b])
;; 
JOKER FUNC cipher_test.BenchmarkAESCBCEncrypt1K has: 
;; (defn BenchmarkAESCBCEncrypt1K
;;   {:added "1.0"
;;    :go "benchmarkAESCBCEncrypt1K(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{1062785 0xc0007d4240}) b])
;; 
JOKER FUNC cipher_test.BenchmarkAESCFBDecrypt1K has: 
;; (defn BenchmarkAESCFBDecrypt1K
;;   {:added "1.0"
;;    :go "benchmarkAESCFBDecrypt1K(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{1061923 0xc0007dec80}) b])
;; 
JOKER FUNC cipher_test.BenchmarkAESCFBEncrypt1K has: 
;; (defn BenchmarkAESCFBEncrypt1K
;;   {:added "1.0"
;;    :go "benchmarkAESCFBEncrypt1K(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{1061625 0xc0007de580}) b])
;; 
JOKER FUNC cipher_test.BenchmarkAESCTR1K has: 
;; (defn BenchmarkAESCTR1K
;;   {:added "1.0"
;;    :go "benchmarkAESCTR1K(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{1062496 0xc0007dfae0}) b])
;; 
JOKER FUNC cipher_test.BenchmarkAESGCMOpen1K has: 
;; (defn BenchmarkAESGCMOpen1K
;;   {:added "1.0"
;;    :go "benchmarkAESGCMOpen1K(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{1061011 0xc0007e1ca0}) b])
;; 
JOKER FUNC cipher_test.BenchmarkAESGCMOpen8K has: 
;; (defn BenchmarkAESGCMOpen8K
;;   {:added "1.0"
;;    :go "benchmarkAESGCMOpen8K(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{1061285 0xc0007de240}) b])
;; 
JOKER FUNC cipher_test.BenchmarkAESGCMSeal1K has: 
;; (defn BenchmarkAESGCMSeal1K
;;   {:added "1.0"
;;    :go "benchmarkAESGCMSeal1K(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{1060921 0xc0007e1ac0}) b])
;; 
JOKER FUNC cipher_test.BenchmarkAESGCMSeal8K has: 
;; (defn BenchmarkAESGCMSeal8K
;;   {:added "1.0"
;;    :go "benchmarkAESGCMSeal8K(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{1061193 0xc0007de060}) b])
;; 
JOKER FUNC cipher_test.BenchmarkAESGCMSign8K has: 
;; (defn BenchmarkAESGCMSign8K
;;   {:added "1.0"
;;    :go "benchmarkAESGCMSign8K(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{1061101 0xc0007e1e80}) b])
;; 
JOKER FUNC cipher_test.BenchmarkAESOFB1K has: 
;; (defn BenchmarkAESOFB1K
;;   {:added "1.0"
;;    :go "benchmarkAESOFB1K(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{1062214 0xc0007df3c0}) b])
;; 
JOKER FUNC cipher_test.ExampleNewCBCDecrypter has: 
;; (defn ExampleNewCBCDecrypter
;;   {:added "1.0"
;;    :go "exampleNewCBCDecrypter()"}
;;   [])
;; 
JOKER FUNC cipher_test.ExampleNewCBCEncrypter has: 
;; (defn ExampleNewCBCEncrypter
;;   {:added "1.0"
;;    :go "exampleNewCBCEncrypter()"}
;;   [])
;; 
JOKER FUNC cipher_test.ExampleNewCFBDecrypter has: 
;; (defn ExampleNewCFBDecrypter
;;   {:added "1.0"
;;    :go "exampleNewCFBDecrypter()"}
;;   [])
;; 
JOKER FUNC cipher_test.ExampleNewCFBEncrypter has: 
;; (defn ExampleNewCFBEncrypter
;;   {:added "1.0"
;;    :go "exampleNewCFBEncrypter()"}
;;   [])
;; 
JOKER FUNC cipher_test.ExampleNewCTR has: 
;; (defn ExampleNewCTR
;;   {:added "1.0"
;;    :go "exampleNewCTR()"}
;;   [])
;; 
JOKER FUNC cipher_test.ExampleNewGCM_decrypt has: 
;; (defn ExampleNewGCM_decrypt
;;   {:added "1.0"
;;    :go "exampleNewGCM_decrypt()"}
;;   [])
;; 
JOKER FUNC cipher_test.ExampleNewGCM_encrypt has: 
;; (defn ExampleNewGCM_encrypt
;;   {:added "1.0"
;;    :go "exampleNewGCM_encrypt()"}
;;   [])
;; 
JOKER FUNC cipher_test.ExampleNewOFB has: 
;; (defn ExampleNewOFB
;;   {:added "1.0"
;;    :go "exampleNewOFB()"}
;;   [])
;; 
JOKER FUNC cipher_test.ExampleStreamReader has: 
;; (defn ExampleStreamReader
;;   {:added "1.0"
;;    :go "exampleStreamReader()"}
;;   [])
;; 
JOKER FUNC cipher_test.ExampleStreamWriter has: 
;; (defn ExampleStreamWriter
;;   {:added "1.0"
;;    :go "exampleStreamWriter()"}
;;   [])
;; 
JOKER FUNC cipher_test.TestAESGCM has: 
;; (defn TestAESGCM
;;   {:added "1.0"
;;    :go "testAESGCM(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{1039694 0xc000b32cc0}) t])
;; 
JOKER FUNC cipher_test.TestCBCDecrypterAES has: 
;; (defn TestCBCDecrypterAES
;;   {:added "1.0"
;;    :go "testCBCDecrypterAES(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{1052778 0xc0007f83e0}) t])
;; 
JOKER FUNC cipher_test.TestCBCEncrypterAES has: 
;; (defn TestCBCEncrypterAES
;;   {:added "1.0"
;;    :go "testCBCEncrypterAES(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{1052285 0xc00080b840}) t])
;; 
JOKER FUNC cipher_test.TestCFBInverse has: 
;; (defn TestCFBInverse
;;   {:added "1.0"
;;    :go "testCFBInverse(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{1049568 0xc000828960}) t])
;; 
JOKER FUNC cipher_test.TestCFBVectors has: 
;; (defn TestCFBVectors
;;   {:added "1.0"
;;    :go "testCFBVectors(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{1048538 0xc000845d00}) t])
;; 
JOKER FUNC cipher_test.TestCTR has: 
;; (defn TestCTR
;;   {:added "1.0"
;;    :go "testCTR(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{996969 0xc000aa8f20}) t])
;; 
JOKER FUNC cipher_test.TestCTR_AES has: 
;; (defn TestCTR_AES
;;   {:added "1.0"
;;    :go "testCTR_AES(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{1025017 0xc000b1be00}) t])
;; 
JOKER FUNC cipher_test.TestCryptBlocks has: 
;; (defn TestCryptBlocks
;;   {:added "1.0"
;;    :go "testCryptBlocks(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{1017384 0xc000afc3a0}) t])
;; 
JOKER FUNC cipher_test.TestEmptyPlaintext has: 
;; (defn TestEmptyPlaintext
;;   {:added "1.0"
;;    :go "testEmptyPlaintext(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{1018220 0xc000afd2a0}) t])
;; 
JOKER FUNC cipher_test.TestGCMAsm has: 
;; (defn TestGCMAsm
;;   {:added "1.0"
;;    :go "testGCMAsm(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{1044821 0xc0005e5540}) t])
;; 
JOKER FUNC cipher_test.TestGCMCounterWrap has: 
;; (defn TestGCMCounterWrap
;;   {:added "1.0"
;;    :go "testGCMCounterWrap(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{1042890 0xc00030cf20}) t])
;; 
JOKER FUNC cipher_test.TestGCMInvalidTagSize has: 
;; (defn TestGCMInvalidTagSize
;;   {:added "1.0"
;;    :go "testGCMInvalidTagSize(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{1041514 0xc0009af840}) t])
;; 
JOKER FUNC cipher_test.TestOFB has: 
;; (defn TestOFB
;;   {:added "1.0"
;;    :go "testOFB(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{1081047 0xc0006db560}) t])
;; 
JOKER FUNC cipher_test.TestTagFailureOverwrite has: 
;; (defn TestTagFailureOverwrite
;;   {:added "1.0"
;;    :go "testTagFailureOverwrite(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{1041914 0xc00087ee40}) t])
;; 
JOKER FUNC cmplx.Abs has: 
;; (defn ^ABEND042(cannot find typename cmplx.float64) Abs
;;   "Abs returns the absolute value (also called the modulus) of x."
;;   {:added "1.0"
;;    :go "abs(x)"}
;;   [x])
;; 
JOKER FUNC cmplx.Acos has: 
;; (defn ^ABEND042(cannot find typename cmplx.complex128) Acos
;;   "Acos returns the inverse cosine of x."
;;   {:added "1.0"
;;    :go "acos(x)"}
;;   [x])
;; 
JOKER FUNC cmplx.Acosh has: 
;; (defn ^ABEND042(cannot find typename cmplx.complex128) Acosh
;;   "Acosh returns the inverse hyperbolic cosine of x."
;;   {:added "1.0"
;;    :go "acosh(x)"}
;;   [x])
;; 
JOKER FUNC cmplx.Asin has: 
;; (defn ^ABEND042(cannot find typename cmplx.complex128) Asin
;;   "Asin returns the inverse sine of x."
;;   {:added "1.0"
;;    :go "asin(x)"}
;;   [x])
;; 
JOKER FUNC cmplx.Asinh has: 
;; (defn ^ABEND042(cannot find typename cmplx.complex128) Asinh
;;   "Asinh returns the inverse hyperbolic sine of x."
;;   {:added "1.0"
;;    :go "asinh(x)"}
;;   [x])
;; 
JOKER FUNC cmplx.Atan has: 
;; (defn ^ABEND042(cannot find typename cmplx.complex128) Atan
;;   "Atan returns the inverse tangent of x."
;;   {:added "1.0"
;;    :go "atan(x)"}
;;   [x])
;; 
JOKER FUNC cmplx.Atanh has: 
;; (defn ^ABEND042(cannot find typename cmplx.complex128) Atanh
;;   "Atanh returns the inverse hyperbolic tangent of x."
;;   {:added "1.0"
;;    :go "atanh(x)"}
;;   [x])
;; 
JOKER FUNC cmplx.BenchmarkAbs has: 
;; (defn BenchmarkAbs
;;   {:added "1.0"
;;    :go "benchmarkAbs(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{7192050 0xc0033f6b60}) b])
;; 
JOKER FUNC cmplx.BenchmarkAcos has: 
;; (defn BenchmarkAcos
;;   {:added "1.0"
;;    :go "benchmarkAcos(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{7192143 0xc0033f6de0}) b])
;; 
JOKER FUNC cmplx.BenchmarkAcosh has: 
;; (defn BenchmarkAcosh
;;   {:added "1.0"
;;    :go "benchmarkAcosh(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{7192238 0xc0033f7060}) b])
;; 
JOKER FUNC cmplx.BenchmarkAsin has: 
;; (defn BenchmarkAsin
;;   {:added "1.0"
;;    :go "benchmarkAsin(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{7192333 0xc0033f72e0}) b])
;; 
JOKER FUNC cmplx.BenchmarkAsinh has: 
;; (defn BenchmarkAsinh
;;   {:added "1.0"
;;    :go "benchmarkAsinh(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{7192428 0xc0033f7560}) b])
;; 
JOKER FUNC cmplx.BenchmarkAtan has: 
;; (defn BenchmarkAtan
;;   {:added "1.0"
;;    :go "benchmarkAtan(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{7192523 0xc0033f77e0}) b])
;; 
JOKER FUNC cmplx.BenchmarkAtanh has: 
;; (defn BenchmarkAtanh
;;   {:added "1.0"
;;    :go "benchmarkAtanh(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{7192618 0xc0033f7a60}) b])
;; 
JOKER FUNC cmplx.BenchmarkConj has: 
;; (defn BenchmarkConj
;;   {:added "1.0"
;;    :go "benchmarkConj(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{7192713 0xc0033f7ce0}) b])
;; 
JOKER FUNC cmplx.BenchmarkCos has: 
;; (defn BenchmarkCos
;;   {:added "1.0"
;;    :go "benchmarkCos(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{7192806 0xc0033f7f60}) b])
;; 
JOKER FUNC cmplx.BenchmarkCosh has: 
;; (defn BenchmarkCosh
;;   {:added "1.0"
;;    :go "benchmarkCosh(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{7192899 0xc0033fe1e0}) b])
;; 
JOKER FUNC cmplx.BenchmarkExp has: 
;; (defn BenchmarkExp
;;   {:added "1.0"
;;    :go "benchmarkExp(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{7192992 0xc0033fe460}) b])
;; 
JOKER FUNC cmplx.BenchmarkLog has: 
;; (defn BenchmarkLog
;;   {:added "1.0"
;;    :go "benchmarkLog(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{7193084 0xc0033fe6e0}) b])
;; 
JOKER FUNC cmplx.BenchmarkLog10 has: 
;; (defn BenchmarkLog10
;;   {:added "1.0"
;;    :go "benchmarkLog10(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{7193178 0xc0033fe960}) b])
;; 
JOKER FUNC cmplx.BenchmarkPhase has: 
;; (defn BenchmarkPhase
;;   {:added "1.0"
;;    :go "benchmarkPhase(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{7193274 0xc0033febe0}) b])
;; 
JOKER FUNC cmplx.BenchmarkPolar has: 
;; (defn BenchmarkPolar
;;   {:added "1.0"
;;    :go "benchmarkPolar(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{7193370 0xc0033fee60}) b])
;; 
JOKER FUNC cmplx.BenchmarkPow has: 
;; (defn BenchmarkPow
;;   {:added "1.0"
;;    :go "benchmarkPow(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{7193464 0xc0033ff0e0}) b])
;; 
JOKER FUNC cmplx.BenchmarkRect has: 
;; (defn BenchmarkRect
;;   {:added "1.0"
;;    :go "benchmarkRect(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{7193576 0xc0033ff400}) b])
;; 
JOKER FUNC cmplx.BenchmarkSin has: 
;; (defn BenchmarkSin
;;   {:added "1.0"
;;    :go "benchmarkSin(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{7193660 0xc0033ff660}) b])
;; 
JOKER FUNC cmplx.BenchmarkSinh has: 
;; (defn BenchmarkSinh
;;   {:added "1.0"
;;    :go "benchmarkSinh(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{7193753 0xc0033ff8e0}) b])
;; 
JOKER FUNC cmplx.BenchmarkSqrt has: 
;; (defn BenchmarkSqrt
;;   {:added "1.0"
;;    :go "benchmarkSqrt(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{7193847 0xc0033ffb60}) b])
;; 
JOKER FUNC cmplx.BenchmarkTan has: 
;; (defn BenchmarkTan
;;   {:added "1.0"
;;    :go "benchmarkTan(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{7193940 0xc0033ffde0}) b])
;; 
JOKER FUNC cmplx.BenchmarkTanh has: 
;; (defn BenchmarkTanh
;;   {:added "1.0"
;;    :go "benchmarkTanh(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{7194033 0xc003406060}) b])
;; 
JOKER FUNC cmplx.Conj has: 
;; (defn ^ABEND042(cannot find typename cmplx.complex128) Conj
;;   "Conj returns the complex conjugate of x."
;;   {:added "1.0"
;;    :go "conj(x)"}
;;   [x])
;; 
JOKER FUNC cmplx.Cos has: 
;; (defn ^ABEND042(cannot find typename cmplx.complex128) Cos
;;   "Cos returns the cosine of x."
;;   {:added "1.0"
;;    :go "cos(x)"}
;;   [x])
;; 
JOKER FUNC cmplx.Cosh has: 
;; (defn ^ABEND042(cannot find typename cmplx.complex128) Cosh
;;   "Cosh returns the hyperbolic cosine of x."
;;   {:added "1.0"
;;    :go "cosh(x)"}
;;   [x])
;; 
JOKER FUNC cmplx.Cot has: 
;; (defn ^ABEND042(cannot find typename cmplx.complex128) Cot
;;   "Cot returns the cotangent of x."
;;   {:added "1.0"
;;    :go "cot(x)"}
;;   [x])
;; 
JOKER FUNC cmplx.Exp has: 
;; (defn ^ABEND042(cannot find typename cmplx.complex128) Exp
;;   "Exp returns e**x, the base-e exponential of x."
;;   {:added "1.0"
;;    :go "exp(x)"}
;;   [x])
;; 
JOKER FUNC cmplx.Inf has: 
;; (defn ^ABEND042(cannot find typename cmplx.complex128) Inf
;;   "Inf returns a complex infinity, complex(+Inf, +Inf)."
;;   {:added "1.0"
;;    :go "inf()"}
;;   [])
;; 
JOKER FUNC cmplx.IsInf has: 
;; (defn ^ABEND042(cannot find typename cmplx.bool) IsInf
;;   "IsInf returns true if either real(x) or imag(x) is an infinity."
;;   {:added "1.0"
;;    :go "isInf(x)"}
;;   [x])
;; 
JOKER FUNC cmplx.IsNaN has: 
;; (defn ^ABEND042(cannot find typename cmplx.bool) IsNaN
;;   "IsNaN returns true if either real(x) or imag(x) is NaN
;; and neither is an infinity."
;;   {:added "1.0"
;;    :go "isNaN(x)"}
;;   [x])
;; 
JOKER FUNC cmplx.Log has: 
;; (defn ^ABEND042(cannot find typename cmplx.complex128) Log
;;   "Log returns the natural logarithm of x."
;;   {:added "1.0"
;;    :go "log(x)"}
;;   [x])
;; 
JOKER FUNC cmplx.Log10 has: 
;; (defn ^ABEND042(cannot find typename cmplx.complex128) Log10
;;   "Log10 returns the decimal logarithm of x."
;;   {:added "1.0"
;;    :go "log10(x)"}
;;   [x])
;; 
JOKER FUNC cmplx.NaN has: 
;; (defn ^ABEND042(cannot find typename cmplx.complex128) NaN
;;   "NaN returns a complex ``not-a-number'' value."
;;   {:added "1.0"
;;    :go "naN()"}
;;   [])
;; 
JOKER FUNC cmplx.Phase has: 
;; (defn ^ABEND042(cannot find typename cmplx.float64) Phase
;;   "Phase returns the phase (also called the argument) of x.
;; The returned value is in the range [-Pi, Pi]."
;;   {:added "1.0"
;;    :go "phase(x)"}
;;   [x])
;; 
JOKER FUNC cmplx.Polar has: 
(defn ^[r θ] Polar
  "Polar returns the absolute value r and phase θ of x,
such that x = r * e**θi.
The phase is in the range [-Pi, Pi]."
  {:added "1.0"
   :go "polar(x)"}
  [x])

JOKER FUNC cmplx.Pow has: 
;; (defn ^ABEND042(cannot find typename cmplx.complex128) Pow
;;   "Pow returns x**y, the base-x exponential of y.
;; For generalized compatibility with math.Pow:
;; 	Pow(0, ±0) returns 1+0i
;; 	Pow(0, c) for real(c)<0 returns Inf+0i if imag(c) is zero, otherwise Inf+Inf i."
;;   {:added "1.0"
;;    :go "pow(x, y)"}
;;   [x, y])
;; 
JOKER FUNC cmplx.Rect has: 
;; (defn ^ABEND042(cannot find typename cmplx.complex128) Rect
;;   "Rect returns the complex number x with polar coordinates r, θ."
;;   {:added "1.0"
;;    :go "rect(r, θ)"}
;;   [r, θ])
;; 
JOKER FUNC cmplx.Sin has: 
;; (defn ^ABEND042(cannot find typename cmplx.complex128) Sin
;;   "Sin returns the sine of x."
;;   {:added "1.0"
;;    :go "sin(x)"}
;;   [x])
;; 
JOKER FUNC cmplx.Sinh has: 
;; (defn ^ABEND042(cannot find typename cmplx.complex128) Sinh
;;   "Sinh returns the hyperbolic sine of x."
;;   {:added "1.0"
;;    :go "sinh(x)"}
;;   [x])
;; 
JOKER FUNC cmplx.Sqrt has: 
;; (defn ^ABEND042(cannot find typename cmplx.complex128) Sqrt
;;   "Sqrt returns the square root of x.
;; The result r is chosen so that real(r) ≥ 0 and imag(r) has the same sign as imag(x)."
;;   {:added "1.0"
;;    :go "sqrt(x)"}
;;   [x])
;; 
JOKER FUNC cmplx.Tan has: 
;; (defn ^ABEND042(cannot find typename cmplx.complex128) Tan
;;   "Tan returns the tangent of x."
;;   {:added "1.0"
;;    :go "tan(x)"}
;;   [x])
;; 
JOKER FUNC cmplx.Tanh has: 
;; (defn ^ABEND042(cannot find typename cmplx.complex128) Tanh
;;   "Tanh returns the hyperbolic tangent of x."
;;   {:added "1.0"
;;    :go "tanh(x)"}
;;   [x])
;; 
JOKER FUNC cmplx.TestAbs has: 
;; (defn TestAbs
;;   {:added "1.0"
;;    :go "testAbs(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{7182258 0xc0033c2da0}) t])
;; 
JOKER FUNC cmplx.TestAcos has: 
;; (defn TestAcos
;;   {:added "1.0"
;;    :go "testAcos(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{7182585 0xc0033c3560}) t])
;; 
JOKER FUNC cmplx.TestAcosh has: 
;; (defn TestAcosh
;;   {:added "1.0"
;;    :go "testAcosh(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{7183106 0xc0033ca0e0}) t])
;; 
JOKER FUNC cmplx.TestAsin has: 
;; (defn TestAsin
;;   {:added "1.0"
;;    :go "testAsin(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{7183640 0xc0033cac60}) t])
;; 
JOKER FUNC cmplx.TestAsinh has: 
;; (defn TestAsinh
;;   {:added "1.0"
;;    :go "testAsinh(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{7184161 0xc0033cb7e0}) t])
;; 
JOKER FUNC cmplx.TestAtan has: 
;; (defn TestAtan
;;   {:added "1.0"
;;    :go "testAtan(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{7184695 0xc0033ce360}) t])
;; 
JOKER FUNC cmplx.TestAtanh has: 
;; (defn TestAtanh
;;   {:added "1.0"
;;    :go "testAtanh(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{7185211 0xc0033ceec0}) t])
;; 
JOKER FUNC cmplx.TestConj has: 
;; (defn TestConj
;;   {:added "1.0"
;;    :go "testConj(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{7185740 0xc0033cfa20}) t])
;; 
JOKER FUNC cmplx.TestCos has: 
;; (defn TestCos
;;   {:added "1.0"
;;    :go "testCos(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{7186079 0xc0033dc1e0}) t])
;; 
JOKER FUNC cmplx.TestCosh has: 
;; (defn TestCosh
;;   {:added "1.0"
;;    :go "testCosh(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{7186413 0xc0033dc9c0}) t])
;; 
JOKER FUNC cmplx.TestExp has: 
;; (defn TestExp
;;   {:added "1.0"
;;    :go "testExp(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{7186757 0xc0033dd1a0}) t])
;; 
JOKER FUNC cmplx.TestInfiniteLoopIntanSeries has: 
;; (defn TestInfiniteLoopIntanSeries
;;   "See issue 17577"
;;   {:added "1.0"
;;    :go "testInfiniteLoopIntanSeries(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{7191913 0xc0033f68a0}) t])
;; 
JOKER FUNC cmplx.TestIsNaN has: 
;; (defn TestIsNaN
;;   {:added "1.0"
;;    :go "testIsNaN(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{7187092 0xc0033dd980}) t])
;; 
JOKER FUNC cmplx.TestLog has: 
;; (defn TestLog
;;   {:added "1.0"
;;    :go "testLog(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{7187286 0xc0033ddd60}) t])
;; 
JOKER FUNC cmplx.TestLog10 has: 
;; (defn TestLog10
;;   {:added "1.0"
;;    :go "testLog10(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{7187788 0xc0033e08c0}) t])
;; 
JOKER FUNC cmplx.TestPolar has: 
;; (defn TestPolar
;;   {:added "1.0"
;;    :go "testPolar(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{7188140 0xc0033e1080}) t])
;; 
JOKER FUNC cmplx.TestPow has: 
;; (defn TestPow
;;   {:added "1.0"
;;    :go "testPow(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{7188645 0xc0033e1d00}) t])
;; 
JOKER FUNC cmplx.TestRect has: 
;; (defn TestRect
;;   {:added "1.0"
;;    :go "testRect(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{7189573 0xc0033e7280}) t])
;; 
JOKER FUNC cmplx.TestSin has: 
;; (defn TestSin
;;   {:added "1.0"
;;    :go "testSin(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{7190002 0xc0033e7d80}) t])
;; 
JOKER FUNC cmplx.TestSinh has: 
;; (defn TestSinh
;;   {:added "1.0"
;;    :go "testSinh(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{7190336 0xc0033ee560}) t])
;; 
JOKER FUNC cmplx.TestSqrt has: 
;; (defn TestSqrt
;;   {:added "1.0"
;;    :go "testSqrt(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{7190681 0xc0033eed40}) t])
;; 
JOKER FUNC cmplx.TestTan has: 
;; (defn TestTan
;;   {:added "1.0"
;;    :go "testTan(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{7191195 0xc0033ef8a0}) t])
;; 
JOKER FUNC cmplx.TestTanh has: 
;; (defn TestTanh
;;   {:added "1.0"
;;    :go "testTanh(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{7191529 0xc0033f6080}) t])
;; 
JOKER FUNC cmplx_test.ExampleAbs has: 
;; (defn ExampleAbs
;;   {:added "1.0"
;;    :go "exampleAbs()"}
;;   [])
;; 
JOKER FUNC cmplx_test.ExampleExp has: 
;; (defn ExampleExp
;;   "ExampleExp computes Euler's identity."
;;   {:added "1.0"
;;    :go "exampleExp()"}
;;   [])
;; 
JOKER FUNC cmplx_test.ExamplePolar has: 
;; (defn ExamplePolar
;;   {:added "1.0"
;;    :go "examplePolar()"}
;;   [])
;; 
JOKER FUNC color.BenchmarkNYCbCrAToRGBA has: 
;; (defn BenchmarkNYCbCrAToRGBA
;;   {:added "1.0"
;;    :go "benchmarkNYCbCrAToRGBA(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{6006816 0xc002960ec0}) b])
;; 
JOKER FUNC color.BenchmarkRGBToYCbCr has: 
;; (defn BenchmarkRGBToYCbCr
;;   {:added "1.0"
;;    :go "benchmarkRGBToYCbCr(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{6005699 0xc002957440}) b])
;; 
JOKER FUNC color.BenchmarkYCbCrToRGB has: 
;; (defn BenchmarkYCbCrToRGB
;;   {:added "1.0"
;;    :go "benchmarkYCbCrToRGB(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{6005161 0xc002956820}) b])
;; 
JOKER FUNC color.BenchmarkYCbCrToRGBA has: 
;; (defn BenchmarkYCbCrToRGBA
;;   {:added "1.0"
;;    :go "benchmarkYCbCrToRGBA(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{6006216 0xc002960060}) b])
;; 
JOKER FUNC color.CMYKToRGB has: 
;; (defn ^[ABEND042(cannot find typename color.uint8) ABEND042(cannot find typename color.uint8) ABEND042(cannot find typename color.uint8)] CMYKToRGB
;;   "CMYKToRGB converts a CMYK quadruple to an RGB triple."
;;   {:added "1.0"
;;    :go "cMYKToRGB(c, m, y, k)"}
;;   [c, m, y, k])
;; 
JOKER FUNC color.ModelFunc has: 
;; (defn ^ABEND881(unrecognized Expr type *ast.InterfaceType at: &{5994643 0xc0016bd740 false}) ModelFunc
;;   "ModelFunc returns a Model that invokes f to implement the conversion."
;;   {:added "1.0"
;;    :go "modelFunc(f)"}
;;   [^ABEND881(unrecognized Expr type *ast.FuncType at: &{5994772 0xc0016bd8f0 0xc0016bd920}) f])
;; 
JOKER FUNC color.RGBToCMYK has: 
;; (defn ^[ABEND042(cannot find typename color.uint8) ABEND042(cannot find typename color.uint8) ABEND042(cannot find typename color.uint8) ABEND042(cannot find typename color.uint8)] RGBToCMYK
;;   "RGBToCMYK converts an RGB triple to a CMYK quadruple."
;;   {:added "1.0"
;;    :go "rGBToCMYK(r, g, b)"}
;;   [r, g, b])
;; 
JOKER FUNC color.RGBToYCbCr has: 
;; (defn ^[ABEND042(cannot find typename color.uint8) ABEND042(cannot find typename color.uint8) ABEND042(cannot find typename color.uint8)] RGBToYCbCr
;;   "RGBToYCbCr converts an RGB triple to a Y'CbCr triple."
;;   {:added "1.0"
;;    :go "rGBToYCbCr(r, g, b)"}
;;   [r, g, b])
;; 
JOKER FUNC color.TestCMYKGray has: 
;; (defn TestCMYKGray
;;   "TestCMYKGray tests that CMYK colors are a superset of Gray colors."
;;   {:added "1.0"
;;    :go "testCMYKGray(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{6004203 0xc0029522a0}) t])
;; 
JOKER FUNC color.TestCMYKRoundtrip has: 
;; (defn TestCMYKRoundtrip
;;   "TestCMYKRoundtrip tests that a subset of RGB space can be converted to CMYK
;; and back to within 1/256 tolerance."
;;   {:added "1.0"
;;    :go "testCMYKRoundtrip(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{6002892 0xc002938340}) t])
;; 
JOKER FUNC color.TestCMYKToRGBConsistency has: 
;; (defn TestCMYKToRGBConsistency
;;   "TestCMYKToRGBConsistency tests that calling the RGBA method (16 bit color)
;; then truncating to 8 bits is equivalent to calling the CMYKToRGB function (8
;; bit color)."
;;   {:added "1.0"
;;    :go "testCMYKToRGBConsistency(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{6003563 0xc002938ec0}) t])
;; 
JOKER FUNC color.TestNYCbCrAAlpha has: 
;; (defn TestNYCbCrAAlpha
;;   "TestNYCbCrAAlpha tests that NYCbCrA colors are a superset of Alpha colors."
;;   {:added "1.0"
;;    :go "testNYCbCrAAlpha(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{6002233 0xc0029357c0}) t])
;; 
JOKER FUNC color.TestNYCbCrAYCbCr has: 
;; (defn TestNYCbCrAYCbCr
;;   "TestNYCbCrAYCbCr tests that NYCbCrA colors are a superset of YCbCr colors."
;;   {:added "1.0"
;;    :go "testNYCbCrAYCbCr(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{6002536 0xc002935d40}) t])
;; 
JOKER FUNC color.TestPalette has: 
;; (defn TestPalette
;;   {:added "1.0"
;;    :go "testPalette(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{6004396 0xc002952720}) t])
;; 
JOKER FUNC color.TestSqDiff has: 
;; (defn TestSqDiff
;;   {:added "1.0"
;;    :go "testSqDiff(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{6007665 0xc00296c3c0}) t])
;; 
JOKER FUNC color.TestYCbCrGray has: 
;; (defn TestYCbCrGray
;;   "TestYCbCrGray tests that YCbCr colors are a superset of Gray colors."
;;   {:added "1.0"
;;    :go "testYCbCrGray(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{6001946 0xc002934620}) t])
;; 
JOKER FUNC color.TestYCbCrRoundtrip has: 
;; (defn TestYCbCrRoundtrip
;;   "TestYCbCrRoundtrip tests that a subset of RGB space can be converted to YCbCr
;; and back to within 2/256 tolerance."
;;   {:added "1.0"
;;    :go "testYCbCrRoundtrip(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{6000692 0xc0028b49e0}) t])
;; 
JOKER FUNC color.TestYCbCrToRGBConsistency has: 
;; (defn TestYCbCrToRGBConsistency
;;   "TestYCbCrToRGBConsistency tests that calling the RGBA method (16 bit color)
;; then truncating to 8 bits is equivalent to calling the YCbCrToRGB function (8
;; bit color)."
;;   {:added "1.0"
;;    :go "testYCbCrToRGBConsistency(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{6001361 0xc002918480}) t])
;; 
JOKER FUNC color.YCbCrToRGB has: 
;; (defn ^[ABEND042(cannot find typename color.uint8) ABEND042(cannot find typename color.uint8) ABEND042(cannot find typename color.uint8)] YCbCrToRGB
;;   "YCbCrToRGB converts a Y'CbCr triple to an RGB triple."
;;   {:added "1.0"
;;    :go "yCbCrToRGB(y, cb, cr)"}
;;   [y, cb, cr])
;; 
JOKER FUNC constant.BenchmarkStringAdd has: 
;; (defn BenchmarkStringAdd
;;   {:added "1.0"
;;    :go "benchmarkStringAdd(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{4600138 0xc001a89940}) b])
;; 
JOKER FUNC constant.BinaryOp has: 
;; (defn ^ABEND881(unrecognized Expr type *ast.InterfaceType at: &{4559049 0xc002031980 false}) BinaryOp
;;   "BinaryOp returns the result of the binary expression x op y.
;; The operation must be defined for the operands. If one of the
;; operands is Unknown, the result is Unknown.
;; BinaryOp doesn't handle comparisons or shifts; use Compare
;; or Shift instead.
;; 
;; To force integer division of Int operands, use op == token.QUO_ASSIGN
;; instead of token.QUO; the result is guaranteed to be Int in this case.
;; Division by zero leads to a run-time panic."
;;   {:added "1.0"
;;    :go "binaryOp(x_, op, y_)"}
;;   [x_, ^ABEND881(unrecognized Expr type *ast.SelectorExpr at: &{token Token}) op, y_])
;; 
JOKER FUNC constant.BitLen has: 
(defn ^Int BitLen
  "BitLen returns the number of bits required to represent
the absolute value x in binary representation; x must be an Int or an Unknown.
If x is Unknown, the result is 0."
  {:added "1.0"
   :go "bitLen(x)"}
  [x])

JOKER FUNC constant.BoolVal has: 
;; (defn ^ABEND042(cannot find typename constant.bool) BoolVal
;;   "BoolVal returns the Go boolean value of x, which must be a Bool or an Unknown.
;; If x is Unknown, the result is false."
;;   {:added "1.0"
;;    :go "boolVal(x)"}
;;   [x])
;; 
JOKER FUNC constant.Bytes has: 
;; (defn ^[ABEND042(cannot find typename constant.byte)] Bytes
;;   "Bytes returns the bytes for the absolute value of x in little-
;; endian binary representation; x must be an Int."
;;   {:added "1.0"
;;    :go "bytes(x)"}
;;   [x])
;; 
JOKER FUNC constant.Compare has: 
;; (defn ^ABEND042(cannot find typename constant.bool) Compare
;;   "Compare returns the result of the comparison x op y.
;; The comparison must be defined for the operands.
;; If one of the operands is Unknown, the result is
;; false."
;;   {:added "1.0"
;;    :go "compare(x_, op, y_)"}
;;   [x_, ^ABEND881(unrecognized Expr type *ast.SelectorExpr at: &{token Token}) op, y_])
;; 
JOKER FUNC constant.Denom has: 
;; (defn ^ABEND881(unrecognized Expr type *ast.InterfaceType at: &{4559049 0xc002031980 false}) Denom
;;   "Denom returns the denominator of x; x must be Int, Float, or Unknown.
;; If x is Unknown, or if it is too large or small to represent as a
;; fraction, the result is Unknown. Otherwise the result is an Int >= 1."
;;   {:added "1.0"
;;    :go "denom(x)"}
;;   [x])
;; 
JOKER FUNC constant.Float32Val has: 
;; (defn ^[ABEND042(cannot find typename constant.float32) ABEND042(cannot find typename constant.bool)] Float32Val
;;   "Float32Val is like Float64Val but for float32 instead of float64."
;;   {:added "1.0"
;;    :go "float32Val(x)"}
;;   [x])
;; 
JOKER FUNC constant.Float64Val has: 
;; (defn ^[ABEND042(cannot find typename constant.float64) ABEND042(cannot find typename constant.bool)] Float64Val
;;   "Float64Val returns the nearest Go float64 value of x and whether the result is exact;
;; x must be numeric or an Unknown, but not Complex. For values too small (too close to 0)
;; to represent as float64, Float64Val silently underflows to 0. The result sign always
;; matches the sign of x, even for 0.
;; If x is Unknown, the result is (0, false)."
;;   {:added "1.0"
;;    :go "float64Val(x)"}
;;   [x])
;; 
JOKER FUNC constant.Imag has: 
;; (defn ^ABEND881(unrecognized Expr type *ast.InterfaceType at: &{4559049 0xc002031980 false}) Imag
;;   "Imag returns the imaginary part of x, which must be a numeric or unknown value.
;; If x is Unknown, the result is Unknown."
;;   {:added "1.0"
;;    :go "imag(x)"}
;;   [x])
;; 
JOKER FUNC constant.Int64Val has: 
;; (defn ^[ABEND042(cannot find typename constant.int64) ABEND042(cannot find typename constant.bool)] Int64Val
;;   "Int64Val returns the Go int64 value of x and whether the result is exact;
;; x must be an Int or an Unknown. If the result is not exact, its value is undefined.
;; If x is Unknown, the result is (0, false)."
;;   {:added "1.0"
;;    :go "int64Val(x)"}
;;   [x])
;; 
JOKER FUNC constant.MakeBool has: 
;; (defn ^ABEND881(unrecognized Expr type *ast.InterfaceType at: &{4559049 0xc002031980 false}) MakeBool
;;   "MakeBool returns the Bool value for b."
;;   {:added "1.0"
;;    :go "makeBool(b)"}
;;   [b])
;; 
JOKER FUNC constant.MakeFloat64 has: 
;; (defn ^ABEND881(unrecognized Expr type *ast.InterfaceType at: &{4559049 0xc002031980 false}) MakeFloat64
;;   "MakeFloat64 returns the Float value for x.
;; If x is not finite, the result is an Unknown."
;;   {:added "1.0"
;;    :go "makeFloat64(x)"}
;;   [x])
;; 
JOKER FUNC constant.MakeFromBytes has: 
;; (defn ^ABEND881(unrecognized Expr type *ast.InterfaceType at: &{4559049 0xc002031980 false}) MakeFromBytes
;;   "MakeFromBytes returns the Int value given the bytes of its little-endian
;; binary representation. An empty byte slice argument represents 0."
;;   {:added "1.0"
;;    :go "makeFromBytes(bytes)"}
;;   [^ABEND881(unrecognized Expr type *ast.ArrayType at: &{4575061 <nil> byte}) bytes])
;; 
JOKER FUNC constant.MakeFromLiteral has: 
;; (defn ^ABEND881(unrecognized Expr type *ast.InterfaceType at: &{4559049 0xc002031980 false}) MakeFromLiteral
;;   "MakeFromLiteral returns the corresponding integer, floating-point,
;; imaginary, character, or string value for a Go literal string. The
;; tok value must be one of token.INT, token.FLOAT, token.IMAG,
;; token.CHAR, or token.STRING. The final argument must be zero.
;; If the literal string syntax is invalid, the result is an Unknown."
;;   {:added "1.0"
;;    :go "makeFromLiteral(lit, tok, zero)"}
;;   [^String lit, ^ABEND881(unrecognized Expr type *ast.SelectorExpr at: &{token Token}) tok, ^Int zero])
;; 
JOKER FUNC constant.MakeImag has: 
;; (defn ^ABEND881(unrecognized Expr type *ast.InterfaceType at: &{4559049 0xc002031980 false}) MakeImag
;;   "MakeImag returns the Complex value x*i;
;; x must be Int, Float, or Unknown.
;; If x is Unknown, the result is Unknown."
;;   {:added "1.0"
;;    :go "makeImag(x)"}
;;   [x])
;; 
JOKER FUNC constant.MakeInt64 has: 
;; (defn ^ABEND881(unrecognized Expr type *ast.InterfaceType at: &{4559049 0xc002031980 false}) MakeInt64
;;   "MakeInt64 returns the Int value for x."
;;   {:added "1.0"
;;    :go "makeInt64(x)"}
;;   [x])
;; 
JOKER FUNC constant.MakeString has: 
;; (defn ^ABEND881(unrecognized Expr type *ast.InterfaceType at: &{4559049 0xc002031980 false}) MakeString
;;   "MakeString returns the String value for s."
;;   {:added "1.0"
;;    :go "makeString(s)"}
;;   [^String s])
;; 
JOKER FUNC constant.MakeUint64 has: 
;; (defn ^ABEND881(unrecognized Expr type *ast.InterfaceType at: &{4559049 0xc002031980 false}) MakeUint64
;;   "MakeUint64 returns the Int value for x."
;;   {:added "1.0"
;;    :go "makeUint64(x)"}
;;   [x])
;; 
JOKER FUNC constant.MakeUnknown has: 
;; (defn ^ABEND881(unrecognized Expr type *ast.InterfaceType at: &{4559049 0xc002031980 false}) MakeUnknown
;;   "MakeUnknown returns the Unknown value."
;;   {:added "1.0"
;;    :go "makeUnknown()"}
;;   [])
;; 
JOKER FUNC constant.Num has: 
;; (defn ^ABEND881(unrecognized Expr type *ast.InterfaceType at: &{4559049 0xc002031980 false}) Num
;;   "Num returns the numerator of x; x must be Int, Float, or Unknown.
;; If x is Unknown, or if it is too large or small to represent as a
;; fraction, the result is Unknown. Otherwise the result is an Int
;; with the same sign as x."
;;   {:added "1.0"
;;    :go "num(x)"}
;;   [x])
;; 
JOKER FUNC constant.Real has: 
;; (defn ^ABEND881(unrecognized Expr type *ast.InterfaceType at: &{4559049 0xc002031980 false}) Real
;;   "Real returns the real part of x, which must be a numeric or unknown value.
;; If x is Unknown, the result is Unknown."
;;   {:added "1.0"
;;    :go "real(x)"}
;;   [x])
;; 
JOKER FUNC constant.Shift has: 
;; (defn ^ABEND881(unrecognized Expr type *ast.InterfaceType at: &{4559049 0xc002031980 false}) Shift
;;   "Shift returns the result of the shift expression x op s
;; with op == token.SHL or token.SHR (<< or >>). x must be
;; an Int or an Unknown. If x is Unknown, the result is x."
;;   {:added "1.0"
;;    :go "shift(x, op, s)"}
;;   [x, ^ABEND881(unrecognized Expr type *ast.SelectorExpr at: &{token Token}) op, ^Int s])
;; 
JOKER FUNC constant.Sign has: 
(defn ^Int Sign
  "Sign returns -1, 0, or 1 depending on whether x < 0, x == 0, or x > 0;
x must be numeric or Unknown. For complex values x, the sign is 0 if x == 0,
otherwise it is != 0. If x is Unknown, the result is 1."
  {:added "1.0"
   :go "sign(x)"}
  [x])

JOKER FUNC constant.StringVal has: 
(defn ^String StringVal
  "StringVal returns the Go string value of x, which must be a String or an Unknown.
If x is Unknown, the result is ""."
  {:added "1.0"
   :go "stringVal(x)"}
  [x])

JOKER FUNC constant.TestBytes has: 
;; (defn TestBytes
;;   {:added "1.0"
;;    :go "testBytes(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{4598948 0xc001a88400}) t])
;; 
JOKER FUNC constant.TestFractions has: 
;; (defn TestFractions
;;   {:added "1.0"
;;    :go "testFractions(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{4598351 0xc001a85ce0}) t])
;; 
JOKER FUNC constant.TestOps has: 
;; (defn TestOps
;;   {:added "1.0"
;;    :go "testOps(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{4592218 0xc00148bf40}) t])
;; 
JOKER FUNC constant.TestString has: 
;; (defn TestString
;;   {:added "1.0"
;;    :go "testString(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{4595921 0xc001a42c20}) t])
;; 
JOKER FUNC constant.TestUnknown has: 
;; (defn TestUnknown
;;   {:added "1.0"
;;    :go "testUnknown(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{4599425 0xc001a88c60}) t])
;; 
JOKER FUNC constant.ToComplex has: 
;; (defn ^ABEND881(unrecognized Expr type *ast.InterfaceType at: &{4559049 0xc002031980 false}) ToComplex
;;   "ToComplex converts x to a Complex value if x is representable as a Complex.
;; Otherwise it returns an Unknown."
;;   {:added "1.0"
;;    :go "toComplex(x)"}
;;   [x])
;; 
JOKER FUNC constant.ToFloat has: 
;; (defn ^ABEND881(unrecognized Expr type *ast.InterfaceType at: &{4559049 0xc002031980 false}) ToFloat
;;   "ToFloat converts x to a Float value if x is representable as a Float.
;; Otherwise it returns an Unknown."
;;   {:added "1.0"
;;    :go "toFloat(x)"}
;;   [x])
;; 
JOKER FUNC constant.ToInt has: 
;; (defn ^ABEND881(unrecognized Expr type *ast.InterfaceType at: &{4559049 0xc002031980 false}) ToInt
;;   "ToInt converts x to an Int value if x is representable as an Int.
;; Otherwise it returns an Unknown."
;;   {:added "1.0"
;;    :go "toInt(x)"}
;;   [x])
;; 
JOKER FUNC constant.Uint64Val has: 
;; (defn ^[ABEND042(cannot find typename constant.uint64) ABEND042(cannot find typename constant.bool)] Uint64Val
;;   "Uint64Val returns the Go uint64 value of x and whether the result is exact;
;; x must be an Int or an Unknown. If the result is not exact, its value is undefined.
;; If x is Unknown, the result is (0, false)."
;;   {:added "1.0"
;;    :go "uint64Val(x)"}
;;   [x])
;; 
JOKER FUNC constant.UnaryOp has: 
;; (defn ^ABEND881(unrecognized Expr type *ast.InterfaceType at: &{4559049 0xc002031980 false}) UnaryOp
;;   "UnaryOp returns the result of the unary expression op y.
;; The operation must be defined for the operand.
;; If prec > 0 it specifies the ^ (xor) result size in bits.
;; If y is Unknown, the result is Unknown."
;;   {:added "1.0"
;;    :go "unaryOp(op, y, prec)"}
;;   [^ABEND881(unrecognized Expr type *ast.SelectorExpr at: &{token Token}) op, y, ^Int prec])
;; 
JOKER FUNC constant_test.ExampleBinaryOp has: 
;; (defn ExampleBinaryOp
;;   {:added "1.0"
;;    :go "exampleBinaryOp()"}
;;   [])
;; 
JOKER FUNC constant_test.ExampleCompare has: 
;; (defn ExampleCompare
;;   {:added "1.0"
;;    :go "exampleCompare()"}
;;   [])
;; 
JOKER FUNC constant_test.ExampleSign has: 
;; (defn ExampleSign
;;   {:added "1.0"
;;    :go "exampleSign()"}
;;   [])
;; 
JOKER FUNC constant_test.ExampleUnaryOp has: 
;; (defn ExampleUnaryOp
;;   {:added "1.0"
;;    :go "exampleUnaryOp()"}
;;   [])
;; 
JOKER FUNC constant_test.Example_complexNumbers has: 
;; (defn Example_complexNumbers
;;   {:added "1.0"
;;    :go "example_complexNumbers()"}
;;   [])
;; 
JOKER FUNC context.Background has: 
;; (defn ^ABEND881(unrecognized Expr type *ast.InterfaceType at: &{912061 0xc00099ed80 false}) Background
;;   "Background returns a non-nil, empty Context. It is never canceled, has no
;; values, and has no deadline. It is typically used by the main function,
;; initialization, and tests, and as the top-level Context for incoming
;; requests."
;;   {:added "1.0"
;;    :go "background()"}
;;   [])
;; 
JOKER FUNC context.TODO has: 
;; (defn ^ABEND881(unrecognized Expr type *ast.InterfaceType at: &{912061 0xc00099ed80 false}) TODO
;;   "TODO returns a non-nil, empty Context. Code should use context.TODO when
;; it's unclear which Context to use or it is not yet available (because the
;; surrounding function has not yet been extended to accept a Context
;; parameter). TODO is recognized by static analysis tools that determine
;; whether Contexts are propagated correctly in a program."
;;   {:added "1.0"
;;    :go "tODO()"}
;;   [])
;; 
JOKER FUNC context.WithCancel has: 
(defn ^[ctx cancel] WithCancel
  "WithCancel returns a copy of parent with a new Done channel. The returned
context's Done channel is closed when the returned cancel function is called
or when the parent context's Done channel is closed, whichever happens first.

Canceling this context releases resources associated with it, so code should
call cancel as soon as the operations running in this Context complete."
  {:added "1.0"
   :go "withCancel(parent)"}
  [parent])

JOKER FUNC context.WithDeadline has: 
;; (defn ^[ABEND881(unrecognized Expr type *ast.InterfaceType at: &{912061 0xc00099ed80 false}) ABEND881(unrecognized Expr type *ast.FuncType at: &{917551 0xc00099fd10 <nil>})] WithDeadline
;;   "WithDeadline returns a copy of the parent context with the deadline adjusted
;; to be no later than d. If the parent's deadline is already earlier than d,
;; WithDeadline(parent, d) is semantically equivalent to parent. The returned
;; context's Done channel is closed when the deadline expires, when the returned
;; cancel function is called, or when the parent context's Done channel is
;; closed, whichever happens first.
;; 
;; Canceling this context releases resources associated with it, so code should
;; call cancel as soon as the operations running in this Context complete."
;;   {:added "1.0"
;;    :go "withDeadline(parent, d)"}
;;   [parent, ^ABEND881(unrecognized Expr type *ast.SelectorExpr at: &{time Time}) d])
;; 
JOKER FUNC context.WithTimeout has: 
;; (defn ^[ABEND881(unrecognized Expr type *ast.InterfaceType at: &{912061 0xc00099ed80 false}) ABEND881(unrecognized Expr type *ast.FuncType at: &{917551 0xc00099fd10 <nil>})] WithTimeout
;;   "WithTimeout returns WithDeadline(parent, time.Now().Add(timeout)).
;; 
;; Canceling this context releases resources associated with it, so code should
;; call cancel as soon as the operations running in this Context complete:
;; 
;; 	func slowOperationWithTimeout(ctx context.Context) (Result, error) {
;; 		ctx, cancel := context.WithTimeout(ctx, 100*time.Millisecond)
;; 		defer cancel()  // releases resources if slowOperation completes before timeout elapses
;; 		return slowOperation(ctx)
;; 	}"
;;   {:added "1.0"
;;    :go "withTimeout(parent, timeout)"}
;;   [parent, ^ABEND881(unrecognized Expr type *ast.SelectorExpr at: &{time Duration}) timeout])
;; 
JOKER FUNC context.WithValue has: 
;; (defn ^ABEND881(unrecognized Expr type *ast.InterfaceType at: &{912061 0xc00099ed80 false}) WithValue
;;   "WithValue returns a copy of parent in which the value associated with key is
;; val.
;; 
;; Use context Values only for request-scoped data that transits processes and
;; APIs, not for passing optional parameters to functions.
;; 
;; The provided key must be comparable and should not be of type
;; string or any other built-in type to avoid collisions between
;; packages using context. Users of WithValue should define their own
;; types for keys. To avoid allocating when assigning to an
;; interface{}, context keys often have concrete type
;; struct{}. Alternatively, exported context key variables' static
;; type should be a pointer or interface."
;;   {:added "1.0"
;;    :go "withValue(parent, key, val)"}
;;   [parent, ^ABEND881(unrecognized Expr type *ast.InterfaceType at: &{924722 0xc0009ba7b0 false}) key, ^ABEND881(unrecognized Expr type *ast.InterfaceType at: &{924722 0xc0009ba7b0 false}) val])
;; 
JOKER FUNC context.XTestAllocs has: 
;; (defn XTestAllocs
;;   {:added "1.0"
;;    :go "xTestAllocs(t, testingShort, testingAllocsPerRun)"}
;;   [t, ^ABEND881(unrecognized Expr type *ast.FuncType at: &{900152 0xc00095b620 0xc00095b650}) testingShort, ^ABEND881(unrecognized Expr type *ast.FuncType at: &{900185 0xc00095b710 0xc00095b740}) testingAllocsPerRun])
;; 
JOKER FUNC context.XTestBackground has: 
;; (defn XTestBackground
;;   {:added "1.0"
;;    :go "xTestBackground(t)"}
;;   [t])
;; 
JOKER FUNC context.XTestCancelRemoves has: 
;; (defn XTestCancelRemoves
;;   {:added "1.0"
;;    :go "xTestCancelRemoves(t)"}
;;   [t])
;; 
JOKER FUNC context.XTestCanceledTimeout has: 
;; (defn XTestCanceledTimeout
;;   {:added "1.0"
;;    :go "xTestCanceledTimeout(t)"}
;;   [t])
;; 
JOKER FUNC context.XTestChildFinishesFirst has: 
;; (defn XTestChildFinishesFirst
;;   {:added "1.0"
;;    :go "xTestChildFinishesFirst(t)"}
;;   [t])
;; 
JOKER FUNC context.XTestDeadline has: 
;; (defn XTestDeadline
;;   {:added "1.0"
;;    :go "xTestDeadline(t)"}
;;   [t])
;; 
JOKER FUNC context.XTestDeadlineExceededSupportsTimeout has: 
;; (defn XTestDeadlineExceededSupportsTimeout
;;   {:added "1.0"
;;    :go "xTestDeadlineExceededSupportsTimeout(t)"}
;;   [t])
;; 
JOKER FUNC context.XTestInterlockedCancels has: 
;; (defn XTestInterlockedCancels
;;   {:added "1.0"
;;    :go "xTestInterlockedCancels(t)"}
;;   [t])
;; 
JOKER FUNC context.XTestLayersCancel has: 
;; (defn XTestLayersCancel
;;   {:added "1.0"
;;    :go "xTestLayersCancel(t)"}
;;   [t])
;; 
JOKER FUNC context.XTestLayersTimeout has: 
;; (defn XTestLayersTimeout
;;   {:added "1.0"
;;    :go "xTestLayersTimeout(t)"}
;;   [t])
;; 
JOKER FUNC context.XTestParentFinishesChild has: 
;; (defn XTestParentFinishesChild
;;   {:added "1.0"
;;    :go "xTestParentFinishesChild(t)"}
;;   [t])
;; 
JOKER FUNC context.XTestSimultaneousCancels has: 
;; (defn XTestSimultaneousCancels
;;   {:added "1.0"
;;    :go "xTestSimultaneousCancels(t)"}
;;   [t])
;; 
JOKER FUNC context.XTestTODO has: 
;; (defn XTestTODO
;;   {:added "1.0"
;;    :go "xTestTODO(t)"}
;;   [t])
;; 
JOKER FUNC context.XTestTimeout has: 
;; (defn XTestTimeout
;;   {:added "1.0"
;;    :go "xTestTimeout(t)"}
;;   [t])
;; 
JOKER FUNC context.XTestValues has: 
;; (defn XTestValues
;;   {:added "1.0"
;;    :go "xTestValues(t)"}
;;   [t])
;; 
JOKER FUNC context.XTestWithCancel has: 
;; (defn XTestWithCancel
;;   {:added "1.0"
;;    :go "xTestWithCancel(t)"}
;;   [t])
;; 
JOKER FUNC context.XTestWithCancelCanceledParent has: 
;; (defn XTestWithCancelCanceledParent
;;   {:added "1.0"
;;    :go "xTestWithCancelCanceledParent(t)"}
;;   [t])
;; 
JOKER FUNC context.XTestWithValueChecksKey has: 
;; (defn XTestWithValueChecksKey
;;   {:added "1.0"
;;    :go "xTestWithValueChecksKey(t)"}
;;   [t])
;; 
JOKER FUNC context_test.BenchmarkCancelTree has: 
;; (defn BenchmarkCancelTree
;;   {:added "1.0"
;;    :go "benchmarkCancelTree(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{908546 0xc000997fc0}) b])
;; 
JOKER FUNC context_test.BenchmarkCheckCanceled has: 
;; (defn BenchmarkCheckCanceled
;;   {:added "1.0"
;;    :go "benchmarkCheckCanceled(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{909334 0xc0009990e0}) b])
;; 
JOKER FUNC context_test.BenchmarkCommonParentCancel has: 
;; (defn BenchmarkCommonParentCancel
;;   {:added "1.0"
;;    :go "benchmarkCommonParentCancel(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{907011 0xc000996200}) b])
;; 
JOKER FUNC context_test.BenchmarkWithTimeout has: 
;; (defn BenchmarkWithTimeout
;;   {:added "1.0"
;;    :go "benchmarkWithTimeout(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{907495 0xc000996b80}) b])
;; 
JOKER FUNC context_test.ExampleWithCancel has: 
;; (defn ExampleWithCancel
;;   "This example demonstrates the use of a cancelable context to prevent a
;; goroutine leak. By the end of the example function, the goroutine started
;; by gen will return without leaking."
;;   {:added "1.0"
;;    :go "exampleWithCancel()"}
;;   [])
;; 
JOKER FUNC context_test.ExampleWithDeadline has: 
;; (defn ExampleWithDeadline
;;   "This example passes a context with an arbitrary deadline to tell a blocking
;; function that it should abandon its work as soon as it gets to it."
;;   {:added "1.0"
;;    :go "exampleWithDeadline()"}
;;   [])
;; 
JOKER FUNC context_test.ExampleWithTimeout has: 
;; (defn ExampleWithTimeout
;;   "This example passes a context with a timeout to tell a blocking function that
;; it should abandon its work after the timeout elapses."
;;   {:added "1.0"
;;    :go "exampleWithTimeout()"}
;;   [])
;; 
JOKER FUNC context_test.ExampleWithValue has: 
;; (defn ExampleWithValue
;;   "This example demonstrates how a value can be passed to the context
;; and also how to retrieve it if it exists."
;;   {:added "1.0"
;;    :go "exampleWithValue()"}
;;   [])
;; 
JOKER FUNC context_test.TestAllocs has: 
;; (defn TestAllocs
;;   {:added "1.0"
;;    :go "testAllocs(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{888945 0xc000937980}) t])
;; 
JOKER FUNC context_test.TestBackground has: 
;; (defn TestBackground
;;   {:added "1.0"
;;    :go "testBackground(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{888240 0xc000936f00}) t])
;; 
JOKER FUNC context_test.TestCancelRemoves has: 
;; (defn TestCancelRemoves
;;   {:added "1.0"
;;    :go "testCancelRemoves(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{889397 0xc000944000}) t])
;; 
JOKER FUNC context_test.TestCanceledTimeout has: 
;; (defn TestCanceledTimeout
;;   {:added "1.0"
;;    :go "testCanceledTimeout(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{888797 0xc000937740}) t])
;; 
JOKER FUNC context_test.TestChildFinishesFirst has: 
;; (defn TestChildFinishesFirst
;;   {:added "1.0"
;;    :go "testChildFinishesFirst(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{888563 0xc0009373e0}) t])
;; 
JOKER FUNC context_test.TestDeadline has: 
;; (defn TestDeadline
;;   {:added "1.0"
;;    :go "testDeadline(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{888639 0xc000937500}) t])
;; 
JOKER FUNC context_test.TestDeadlineExceededIsNetError has: 
;; (defn TestDeadlineExceededIsNetError
;;   {:added "1.0"
;;    :go "testDeadlineExceededIsNetError(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{887722 0xc0009367e0}) t])
;; 
JOKER FUNC context_test.TestDeadlineExceededSupportsTimeout has: 
;; (defn TestDeadlineExceededSupportsTimeout
;;   {:added "1.0"
;;    :go "testDeadlineExceededSupportsTimeout(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{889674 0xc000944360}) t])
;; 
JOKER FUNC context_test.TestInterlockedCancels has: 
;; (defn TestInterlockedCancels
;;   {:added "1.0"
;;    :go "testInterlockedCancels(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{889155 0xc000937ca0}) t])
;; 
JOKER FUNC context_test.TestLayersCancel has: 
;; (defn TestLayersCancel
;;   {:added "1.0"
;;    :go "testLayersCancel(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{889235 0xc000937dc0}) t])
;; 
JOKER FUNC context_test.TestLayersTimeout has: 
;; (defn TestLayersTimeout
;;   {:added "1.0"
;;    :go "testLayersTimeout(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{889316 0xc000937ee0}) t])
;; 
JOKER FUNC context_test.TestParentFinishesChild has: 
;; (defn TestParentFinishesChild
;;   {:added "1.0"
;;    :go "testParentFinishesChild(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{888477 0xc0009372c0}) t])
;; 
JOKER FUNC context_test.TestSimultaneousCancels has: 
;; (defn TestSimultaneousCancels
;;   {:added "1.0"
;;    :go "testSimultaneousCancels(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{889069 0xc000937b80}) t])
;; 
JOKER FUNC context_test.TestTODO has: 
;; (defn TestTODO
;;   {:added "1.0"
;;    :go "testTODO(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{888312 0xc000937080}) t])
;; 
JOKER FUNC context_test.TestTimeout has: 
;; (defn TestTimeout
;;   {:added "1.0"
;;    :go "testTimeout(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{888714 0xc000937620}) t])
;; 
JOKER FUNC context_test.TestValues has: 
;; (defn TestValues
;;   {:added "1.0"
;;    :go "testValues(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{888871 0xc000937860}) t])
;; 
JOKER FUNC context_test.TestWithCancel has: 
;; (defn TestWithCancel
;;   {:added "1.0"
;;    :go "testWithCancel(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{888390 0xc0009371a0}) t])
;; 
JOKER FUNC context_test.TestWithCancelCanceledParent has: 
;; (defn TestWithCancelCanceledParent
;;   {:added "1.0"
;;    :go "testWithCancelCanceledParent(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{889489 0xc000944120}) t])
;; 
JOKER FUNC context_test.TestWithValueChecksKey has: 
;; (defn TestWithValueChecksKey
;;   {:added "1.0"
;;    :go "testWithValueChecksKey(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{889575 0xc000944240}) t])
;; 
JOKER FUNC cookiejar.New has: 
;; (defn ^[{:pslist psList, :mu ^ABEND881(unrecognized Expr type *ast.SelectorExpr at: &{sync Mutex}) mu, :entries ^ABEND881(unrecognized Expr type *ast.MapType at: &{9501640 string 0xc0044b0630}) entries, :nextseqnum nextSeqNum} Error] New
;;   "New returns a new cookie jar. A nil *Options is equivalent to a zero
;; Options."
;;   {:added "1.0"
;;    :go "new(o)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{9501878 Options}) o])
;; 
JOKER FUNC cookiejar.TestBasics has: 
;; (defn TestBasics
;;   {:added "1.0"
;;    :go "testBasics(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{9482537 0xc004481f40}) t])
;; 
JOKER FUNC cookiejar.TestCanonicalHost has: 
;; (defn TestCanonicalHost
;;   {:added "1.0"
;;    :go "testCanonicalHost(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{9469053 0xc004464640}) t])
;; 
JOKER FUNC cookiejar.TestChromiumBasics has: 
;; (defn TestChromiumBasics
;;   {:added "1.0"
;;    :go "testChromiumBasics(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{9491391 0xc004494860}) t])
;; 
JOKER FUNC cookiejar.TestChromiumDeletion has: 
;; (defn TestChromiumDeletion
;;   {:added "1.0"
;;    :go "testChromiumDeletion(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{9494315 0xc0044a6280}) t])
;; 
JOKER FUNC cookiejar.TestChromiumDomain has: 
;; (defn TestChromiumDomain
;;   {:added "1.0"
;;    :go "testChromiumDomain(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{9492899 0xc004495460}) t])
;; 
JOKER FUNC cookiejar.TestDefaultPath has: 
;; (defn TestDefaultPath
;;   {:added "1.0"
;;    :go "testDefaultPath(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{9472385 0xc00446ac80}) t])
;; 
JOKER FUNC cookiejar.TestDomainAndType has: 
;; (defn TestDomainAndType
;;   {:added "1.0"
;;    :go "testDomainAndType(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{9474308 0xc004478580}) t])
;; 
JOKER FUNC cookiejar.TestDomainHandling has: 
;; (defn TestDomainHandling
;;   {:added "1.0"
;;    :go "testDomainHandling(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{9498480 0xc0044a8cc0}) t])
;; 
JOKER FUNC cookiejar.TestExpiration has: 
;; (defn TestExpiration
;;   {:added "1.0"
;;    :go "testExpiration(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{9486085 0xc004485e20}) t])
;; 
JOKER FUNC cookiejar.TestHasDotSuffix has: 
;; (defn TestHasDotSuffix
;;   {:added "1.0"
;;    :go "testHasDotSuffix(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{9467740 0xc00445da40}) t])
;; 
JOKER FUNC cookiejar.TestHasPort has: 
;; (defn TestHasPort
;;   {:added "1.0"
;;    :go "testHasPort(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{9469668 0xc004464f00}) t])
;; 
JOKER FUNC cookiejar.TestIsIP has: 
;; (defn TestIsIP
;;   {:added "1.0"
;;    :go "testIsIP(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{9471889 0xc00446a5e0}) t])
;; 
JOKER FUNC cookiejar.TestIssue19384 has: 
;; (defn TestIssue19384
;;   {:added "1.0"
;;    :go "testIssue19384(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{9498607 0xc0044a8f60}) t])
;; 
JOKER FUNC cookiejar.TestJarKey has: 
;; (defn TestJarKey
;;   {:added "1.0"
;;    :go "testJarKey(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{9470596 0xc0044657c0}) t])
;; 
JOKER FUNC cookiejar.TestJarKeyNilPSL has: 
;; (defn TestJarKeyNilPSL
;;   {:added "1.0"
;;    :go "testJarKeyNilPSL(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{9471450 0xc00446a040}) t])
;; 
JOKER FUNC cookiejar.TestPunycode has: 
;; (defn TestPunycode
;;   {:added "1.0"
;;    :go "testPunycode(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{9465236 0xc00444cf60}) t])
;; 
JOKER FUNC cookiejar.TestUpdateAndDelete has: 
;; (defn TestUpdateAndDelete
;;   {:added "1.0"
;;    :go "testUpdateAndDelete(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{9485958 0xc004485b80}) t])
;; 
JOKER FUNC cookiejar_test.ExampleNew has: 
;; (defn ExampleNew
;;   {:added "1.0"
;;    :go "exampleNew()"}
;;   [])
;; 
JOKER FUNC crc32.BenchmarkCRC32 has: 
;; (defn BenchmarkCRC32
;;   {:added "1.0"
;;    :go "benchmarkCRC32(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{5485621 0xc001ea13e0}) b])
;; 
JOKER FUNC crc32.Checksum has: 
;; (defn ^ABEND042(cannot find typename crc32.uint32) Checksum
;;   "Checksum returns the CRC-32 checksum of data
;; using the polynomial represented by the Table."
;;   {:added "1.0"
;;    :go "checksum(data, tab)"}
;;   [^ABEND881(unrecognized Expr type *ast.ArrayType at: &{5501003 <nil> byte}) data, ^ABEND881(unrecognized Expr type *ast.StarExpr at: &{5501015 Table}) tab])
;; 
JOKER FUNC crc32.ChecksumIEEE has: 
;; (defn ^ABEND042(cannot find typename crc32.uint32) ChecksumIEEE
;;   "ChecksumIEEE returns the CRC-32 checksum of data
;; using the IEEE polynomial."
;;   {:added "1.0"
;;    :go "checksumIEEE(data)"}
;;   [^ABEND881(unrecognized Expr type *ast.ArrayType at: &{5501168 <nil> byte}) data])
;; 
JOKER FUNC crc32.MakeTable has: 
;; (defn ^[ABEND042(cannot find typename crc32.uint32)] MakeTable
;;   "MakeTable returns a Table constructed from the specified polynomial.
;; The contents of this Table must not be modified."
;;   {:added "1.0"
;;    :go "makeTable(poly)"}
;;   [poly])
;; 
JOKER FUNC crc32.New has: 
;; (defn ^ABEND881(unrecognized Expr type *ast.SelectorExpr at: &{hash Hash32}) New
;;   "New creates a new hash.Hash32 computing the CRC-32 checksum using the
;; polynomial represented by the Table. Its Sum method will lay the
;; value out in big-endian byte order. The returned Hash32 also
;; implements encoding.BinaryMarshaler and encoding.BinaryUnmarshaler to
;; marshal and unmarshal the internal state of the hash."
;;   {:added "1.0"
;;    :go "new(tab)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{5498313 Table}) tab])
;; 
JOKER FUNC crc32.NewIEEE has: 
;; (defn ^ABEND881(unrecognized Expr type *ast.SelectorExpr at: &{hash Hash32}) NewIEEE
;;   "NewIEEE creates a new hash.Hash32 computing the CRC-32 checksum using
;; the IEEE polynomial. Its Sum method will lay the value out in
;; big-endian byte order. The returned Hash32 also implements
;; encoding.BinaryMarshaler and encoding.BinaryUnmarshaler to marshal
;; and unmarshal the internal state of the hash."
;;   {:added "1.0"
;;    :go "newIEEE()"}
;;   [])
;; 
JOKER FUNC crc32.TestArchCastagnoli has: 
;; (defn TestArchCastagnoli
;;   {:added "1.0"
;;    :go "testArchCastagnoli(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{5484292 0xc001ea0040}) t])
;; 
JOKER FUNC crc32.TestArchIEEE has: 
;; (defn TestArchIEEE
;;   {:added "1.0"
;;    :go "testArchIEEE(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{5483997 0xc002329e80}) t])
;; 
JOKER FUNC crc32.TestGolden has: 
;; (defn TestGolden
;;   {:added "1.0"
;;    :go "testGolden(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{5484609 0xc001ea0480}) t])
;; 
JOKER FUNC crc32.TestGoldenMarshal has: 
;; (defn TestGoldenMarshal
;;   {:added "1.0"
;;    :go "testGoldenMarshal(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{5481260 0xc002603080}) t])
;; 
JOKER FUNC crc32.TestMarshalTableMismatch has: 
;; (defn TestMarshalTableMismatch
;;   {:added "1.0"
;;    :go "testMarshalTableMismatch(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{5482938 0xc002328b20}) t])
;; 
JOKER FUNC crc32.TestSimple has: 
;; (defn TestSimple
;;   "TestSimple tests the simple generic algorithm."
;;   {:added "1.0"
;;    :go "testSimple(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{5480986 0xc00290f840}) t])
;; 
JOKER FUNC crc32.TestSlicing has: 
;; (defn TestSlicing
;;   "TestSimple tests the slicing-by-8 algorithm."
;;   {:added "1.0"
;;    :go "testSlicing(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{5483332 0xc002329120}) t])
;; 
JOKER FUNC crc32.Update has: 
;; (defn ^ABEND042(cannot find typename crc32.uint32) Update
;;   "Update returns the result of adding the bytes in p to the crc."
;;   {:added "1.0"
;;    :go "update(crc, tab, p)"}
;;   [crc, ^ABEND881(unrecognized Expr type *ast.StarExpr at: &{5499978 Table}) tab, ^ABEND881(unrecognized Expr type *ast.ArrayType at: &{5499988 <nil> byte}) p])
;; 
JOKER FUNC crc32_test.ExampleMakeTable has: 
;; (defn ExampleMakeTable
;;   {:added "1.0"
;;    :go "exampleMakeTable()"}
;;   [])
;; 
JOKER FUNC crc64.BenchmarkCrc64 has: 
;; (defn BenchmarkCrc64
;;   {:added "1.0"
;;    :go "benchmarkCrc64(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{5511176 0xc002036c60}) b])
;; 
JOKER FUNC crc64.Checksum has: 
;; (defn ^ABEND042(cannot find typename crc64.uint64) Checksum
;;   "Checksum returns the CRC-64 checksum of data
;; using the polynomial represented by the Table."
;;   {:added "1.0"
;;    :go "checksum(data, tab)"}
;;   [^ABEND881(unrecognized Expr type *ast.ArrayType at: &{5516739 <nil> byte}) data, ^ABEND881(unrecognized Expr type *ast.StarExpr at: &{5516751 Table}) tab])
;; 
JOKER FUNC crc64.MakeTable has: 
;; (defn ^[ABEND042(cannot find typename crc64.uint64)] MakeTable
;;   "MakeTable returns a Table constructed from the specified polynomial.
;; The contents of this Table must not be modified."
;;   {:added "1.0"
;;    :go "makeTable(poly)"}
;;   [poly])
;; 
JOKER FUNC crc64.New has: 
;; (defn ^ABEND881(unrecognized Expr type *ast.SelectorExpr at: &{hash Hash64}) New
;;   "New creates a new hash.Hash64 computing the CRC-64 checksum using the
;; polynomial represented by the Table. Its Sum method will lay the
;; value out in big-endian byte order. The returned Hash64 also
;; implements encoding.BinaryMarshaler and encoding.BinaryUnmarshaler to
;; marshal and unmarshal the internal state of the hash."
;;   {:added "1.0"
;;    :go "new(tab)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{5513714 Table}) tab])
;; 
JOKER FUNC crc64.TestGolden has: 
;; (defn TestGolden
;;   {:added "1.0"
;;    :go "testGolden(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{5508362 0xc0020bc3a0}) t])
;; 
JOKER FUNC crc64.TestGoldenMarshal has: 
;; (defn TestGoldenMarshal
;;   {:added "1.0"
;;    :go "testGoldenMarshal(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{5508850 0xc0020a9de0}) t])
;; 
JOKER FUNC crc64.TestMarshalTableMismatch has: 
;; (defn TestMarshalTableMismatch
;;   {:added "1.0"
;;    :go "testMarshalTableMismatch(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{5510533 0xc00203d400}) t])
;; 
JOKER FUNC crc64.Update has: 
;; (defn ^ABEND042(cannot find typename crc64.uint64) Update
;;   "Update returns the result of adding the bytes in p to the crc."
;;   {:added "1.0"
;;    :go "update(crc, tab, p)"}
;;   [crc, ^ABEND881(unrecognized Expr type *ast.StarExpr at: &{5516226 Table}) tab, ^ABEND881(unrecognized Expr type *ast.ArrayType at: &{5516236 <nil> byte}) p])
;; 
JOKER FUNC crypto.RegisterHash has: 
;; (defn RegisterHash
;;   "RegisterHash registers a function that returns a new instance of the given
;; hash function. This is intended to be called from the init function in
;; packages that implement hash functions."
;;   {:added "1.0"
;;    :go "registerHash(h, f)"}
;;   [h, ^ABEND881(unrecognized Expr type *ast.FuncType at: &{930294 0xc0009d7770 0xc0009d77a0}) f])
;; 
JOKER FUNC crypto.TestCFBDecryptOutOfBoundsWrite has: 
;; (defn TestCFBDecryptOutOfBoundsWrite
;;   {:added "1.0"
;;    :go "testCFBDecryptOutOfBoundsWrite(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{926161 0xc0009cec20}) t])
;; 
JOKER FUNC crypto.TestCFBEncryptOutOfBoundsWrite has: 
;; (defn TestCFBEncryptOutOfBoundsWrite
;;   {:added "1.0"
;;    :go "testCFBEncryptOutOfBoundsWrite(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{926054 0xc0009cea60}) t])
;; 
JOKER FUNC crypto.TestCTROutOfBoundsWrite has: 
;; (defn TestCTROutOfBoundsWrite
;;   {:added "1.0"
;;    :go "testCTROutOfBoundsWrite(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{925881 0xc0009ce6e0}) t])
;; 
JOKER FUNC crypto.TestOFBOutOfBoundsWrite has: 
;; (defn TestOFBOutOfBoundsWrite
;;   {:added "1.0"
;;    :go "testOFBOutOfBoundsWrite(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{925964 0xc0009ce8a0}) t])
;; 
JOKER FUNC crypto.TestRC4OutOfBoundsWrite has: 
;; (defn TestRC4OutOfBoundsWrite
;;   {:added "1.0"
;;    :go "testRC4OutOfBoundsWrite(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{925598 0xc0009ce120}) t])
;; 
JOKER FUNC cryptobyte.NewBuilder has: 
;; (defn ^{:err err, :result ^ABEND881(unrecognized Expr type *ast.ArrayType at: &{14746102 <nil> byte}) result, :fixedsize fixedSize, :child ^ABEND881(unrecognized Expr type *ast.StarExpr at: &{14746146 Builder}) child, :offset ^Int offset, :pendinglenlen ^Int pendingLenLen, :pendingisasn1 pendingIsASN1, :incontinuation ^ABEND881(unrecognized Expr type *ast.StarExpr at: &{14746232 bool}) inContinuation} NewBuilder
;;   "NewBuilder creates a Builder that appends its output to the given buffer.
;; Like append(), the slice will be reallocated if its capacity is exceeded.
;; Use Bytes to get the final buffer."
;;   {:added "1.0"
;;    :go "newBuilder(buffer)"}
;;   [^ABEND881(unrecognized Expr type *ast.ArrayType at: &{14746456 <nil> byte}) buffer])
;; 
JOKER FUNC cryptobyte.NewFixedBuilder has: 
;; (defn ^{:err err, :result ^ABEND881(unrecognized Expr type *ast.ArrayType at: &{14746102 <nil> byte}) result, :fixedsize fixedSize, :child ^ABEND881(unrecognized Expr type *ast.StarExpr at: &{14746146 Builder}) child, :offset ^Int offset, :pendinglenlen ^Int pendingLenLen, :pendingisasn1 pendingIsASN1, :incontinuation ^ABEND881(unrecognized Expr type *ast.StarExpr at: &{14746232 bool}) inContinuation} NewFixedBuilder
;;   "NewFixedBuilder creates a Builder that appends its output into the given
;; buffer. This builder does not reallocate the output buffer. Writes that
;; would exceed the buffer's capacity are treated as an error."
;;   {:added "1.0"
;;    :go "newFixedBuilder(buffer)"}
;;   [^ABEND881(unrecognized Expr type *ast.ArrayType at: &{14746759 <nil> byte}) buffer])
;; 
JOKER FUNC cryptobyte.TestASN1Int64 has: 
;; (defn TestASN1Int64
;;   {:added "1.0"
;;    :go "testASN1Int64(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{14738641 0xc005fb62c0}) t])
;; 
JOKER FUNC cryptobyte.TestASN1ObjectIdentifier has: 
;; (defn TestASN1ObjectIdentifier
;;   {:added "1.0"
;;    :go "testASN1ObjectIdentifier(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{14726996 0xc005e1ba60}) t])
;; 
JOKER FUNC cryptobyte.TestASN1Uint64 has: 
;; (defn TestASN1Uint64
;;   {:added "1.0"
;;    :go "testASN1Uint64(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{14739554 0xc005fb7a20}) t])
;; 
JOKER FUNC cryptobyte.TestBytes has: 
;; (defn TestBytes
;;   {:added "1.0"
;;    :go "testBytes(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{14732087 0xc005efdda0}) t])
;; 
JOKER FUNC cryptobyte.TestContinuationError has: 
;; (defn TestContinuationError
;;   {:added "1.0"
;;    :go "testContinuationError(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{14731251 0xc005efce60}) t])
;; 
JOKER FUNC cryptobyte.TestContinuationNonError has: 
;; (defn TestContinuationNonError
;;   {:added "1.0"
;;    :go "testContinuationNonError(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{14731694 0xc005efd620}) t])
;; 
JOKER FUNC cryptobyte.TestGeneratedPanic has: 
;; (defn TestGeneratedPanic
;;   {:added "1.0"
;;    :go "testGeneratedPanic(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{14731897 0xc005efd9e0}) t])
;; 
JOKER FUNC cryptobyte.TestPreallocatedBuffer has: 
;; (defn TestPreallocatedBuffer
;;   {:added "1.0"
;;    :go "testPreallocatedBuffer(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{14737586 0xc005f9d040}) t])
;; 
JOKER FUNC cryptobyte.TestReadASN1 has: 
;; (defn TestReadASN1
;;   {:added "1.0"
;;    :go "testReadASN1(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{14721124 0xc005db6160}) t])
;; 
JOKER FUNC cryptobyte.TestReadASN1BitString has: 
;; (defn TestReadASN1BitString
;;   {:added "1.0"
;;    :go "testReadASN1BitString(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{14729845 0xc005e87400}) t])
;; 
JOKER FUNC cryptobyte.TestReadASN1GeneralizedTime has: 
;; (defn TestReadASN1GeneralizedTime
;;   {:added "1.0"
;;    :go "testReadASN1GeneralizedTime(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{14728194 0xc005e43480}) t])
;; 
JOKER FUNC cryptobyte.TestReadASN1IntegerInvalid has: 
;; (defn TestReadASN1IntegerInvalid
;;   {:added "1.0"
;;    :go "testReadASN1IntegerInvalid(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{14726590 0xc005e1b280}) t])
;; 
JOKER FUNC cryptobyte.TestReadASN1IntegerSigned has: 
;; (defn TestReadASN1IntegerSigned
;;   {:added "1.0"
;;    :go "testReadASN1IntegerSigned(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{14723876 0xc005ddd720}) t])
;; 
JOKER FUNC cryptobyte.TestReadASN1IntegerUnsigned has: 
;; (defn TestReadASN1IntegerUnsigned
;;   {:added "1.0"
;;    :go "testReadASN1IntegerUnsigned(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{14725812 0xc005e17fe0}) t])
;; 
JOKER FUNC cryptobyte.TestReadASN1Optional has: 
;; (defn TestReadASN1Optional
;;   {:added "1.0"
;;    :go "testReadASN1Optional(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{14721496 0xc005db6a80}) t])
;; 
JOKER FUNC cryptobyte.TestReadASN1OptionalInteger has: 
;; (defn TestReadASN1OptionalInteger
;;   {:added "1.0"
;;    :go "testReadASN1OptionalInteger(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{14723466 0xc005ddcec0}) t])
;; 
JOKER FUNC cryptobyte.TestReadASN1OptionalOctetString has: 
;; (defn TestReadASN1OptionalOctetString
;;   {:added "1.0"
;;    :go "testReadASN1OptionalOctetString(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{14722635 0xc005db7e80}) t])
;; 
JOKER FUNC cryptobyte.TestUMultiple has: 
;; (defn TestUMultiple
;;   {:added "1.0"
;;    :go "testUMultiple(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{14734364 0xc005f4ad00}) t])
;; 
JOKER FUNC cryptobyte.TestUint16 has: 
;; (defn TestUint16
;;   {:added "1.0"
;;    :go "testUint16(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{14733020 0xc005f1d1e0}) t])
;; 
JOKER FUNC cryptobyte.TestUint24 has: 
;; (defn TestUint24
;;   {:added "1.0"
;;    :go "testUint24(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{14733401 0xc005f1d9a0}) t])
;; 
JOKER FUNC cryptobyte.TestUint24Truncation has: 
;; (defn TestUint24Truncation
;;   {:added "1.0"
;;    :go "testUint24Truncation(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{14733803 0xc005f4a180}) t])
;; 
JOKER FUNC cryptobyte.TestUint32 has: 
;; (defn TestUint32
;;   {:added "1.0"
;;    :go "testUint32(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{14733958 0xc005f4a500}) t])
;; 
JOKER FUNC cryptobyte.TestUint8 has: 
;; (defn TestUint8
;;   {:added "1.0"
;;    :go "testUint8(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{14732658 0xc005f1ca40}) t])
;; 
JOKER FUNC cryptobyte.TestUint8LengthPrefixedMulti has: 
;; (defn TestUint8LengthPrefixedMulti
;;   {:added "1.0"
;;    :go "testUint8LengthPrefixedMulti(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{14735591 0xc005f5e640}) t])
;; 
JOKER FUNC cryptobyte.TestUint8LengthPrefixedNested has: 
;; (defn TestUint8LengthPrefixedNested
;;   {:added "1.0"
;;    :go "testUint8LengthPrefixedNested(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{14736524 0xc005f5fae0}) t])
;; 
JOKER FUNC cryptobyte.TestUint8LengthPrefixedSimple has: 
;; (defn TestUint8LengthPrefixedSimple
;;   {:added "1.0"
;;    :go "testUint8LengthPrefixedSimple(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{14734950 0xc005f4b940}) t])
;; 
JOKER FUNC cryptobyte.TestWriteWithPendingChild has: 
;; (defn TestWriteWithPendingChild
;;   {:added "1.0"
;;    :go "testWriteWithPendingChild(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{14738011 0xc005f9da40}) t])
;; 
JOKER FUNC cryptobyte_test.ExampleBuilderContinuation_errorHandling has: 
;; (defn ExampleBuilderContinuation_errorHandling
;;   {:added "1.0"
;;    :go "exampleBuilderContinuation_errorHandling()"}
;;   [])
;; 
JOKER FUNC cryptobyte_test.ExampleBuilder_aSN1 has: 
;; (defn ExampleBuilder_aSN1
;;   {:added "1.0"
;;    :go "exampleBuilder_aSN1()"}
;;   [])
;; 
JOKER FUNC cryptobyte_test.ExampleBuilder_lengthPrefixOverflow has: 
;; (defn ExampleBuilder_lengthPrefixOverflow
;;   {:added "1.0"
;;    :go "exampleBuilder_lengthPrefixOverflow()"}
;;   [])
;; 
JOKER FUNC cryptobyte_test.ExampleBuilder_lengthPrefixed has: 
;; (defn ExampleBuilder_lengthPrefixed
;;   {:added "1.0"
;;    :go "exampleBuilder_lengthPrefixed()"}
;;   [])
;; 
JOKER FUNC cryptobyte_test.ExampleString_aSN1 has: 
;; (defn ExampleString_aSN1
;;   {:added "1.0"
;;    :go "exampleString_aSN1()"}
;;   [])
;; 
JOKER FUNC cryptobyte_test.ExampleString_lengthPrefixed has: 
;; (defn ExampleString_lengthPrefixed
;;   {:added "1.0"
;;    :go "exampleString_lengthPrefixed()"}
;;   [])
;; 
JOKER FUNC csv.BenchmarkRead has: 
;; (defn BenchmarkRead
;;   {:added "1.0"
;;    :go "benchmarkRead(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{3337245 0xc000e9b260}) b])
;; 
JOKER FUNC csv.BenchmarkReadLargeFields has: 
;; (defn BenchmarkReadLargeFields
;;   {:added "1.0"
;;    :go "benchmarkReadLargeFields(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{3337611 0xc000e9b8c0}) b])
;; 
JOKER FUNC csv.BenchmarkReadReuseRecord has: 
;; (defn BenchmarkReadReuseRecord
;;   {:added "1.0"
;;    :go "benchmarkReadReuseRecord(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{3338686 0xc000e9bae0}) b])
;; 
JOKER FUNC csv.BenchmarkReadReuseRecordLargeFields has: 
;; (defn BenchmarkReadReuseRecordLargeFields
;;   {:added "1.0"
;;    :go "benchmarkReadReuseRecordLargeFields(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{3339166 0xc000ea0360}) b])
;; 
JOKER FUNC csv.BenchmarkReadReuseRecordWithFieldsPerRecord has: 
;; (defn BenchmarkReadReuseRecordWithFieldsPerRecord
;;   {:added "1.0"
;;    :go "benchmarkReadReuseRecordWithFieldsPerRecord(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{3338832 0xc000e9bd40}) b])
;; 
JOKER FUNC csv.BenchmarkReadReuseRecordWithoutFieldsPerRecord has: 
;; (defn BenchmarkReadReuseRecordWithoutFieldsPerRecord
;;   {:added "1.0"
;;    :go "benchmarkReadReuseRecordWithoutFieldsPerRecord(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{3339004 0xc000ea0040}) b])
;; 
JOKER FUNC csv.BenchmarkReadWithFieldsPerRecord has: 
;; (defn BenchmarkReadWithFieldsPerRecord
;;   {:added "1.0"
;;    :go "benchmarkReadWithFieldsPerRecord(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{3337343 0xc000e9b3e0}) b])
;; 
JOKER FUNC csv.BenchmarkReadWithoutFieldsPerRecord has: 
;; (defn BenchmarkReadWithoutFieldsPerRecord
;;   {:added "1.0"
;;    :go "benchmarkReadWithoutFieldsPerRecord(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{3337482 0xc000e9b640}) b])
;; 
JOKER FUNC csv.NewReader has: 
;; (defn ^{:comma Comma, :comment Comment, :fieldsperrecord ^Int FieldsPerRecord, :lazyquotes LazyQuotes, :trimleadingspace TrimLeadingSpace, :reuserecord ReuseRecord, :trailingcomma TrailingComma, :r ^ABEND881(unrecognized Expr type *ast.StarExpr at: &{3318190 0xc000d60a80}) r, :numline ^Int numLine, :rawbuffer ^ABEND881(unrecognized Expr type *ast.ArrayType at: &{3318355 <nil> byte}) rawBuffer, :recordbuffer ^ABEND881(unrecognized Expr type *ast.ArrayType at: &{3318645 <nil> byte}) recordBuffer, :fieldindexes ^ABEND881(unrecognized Expr type *ast.ArrayType at: &{3318794 <nil> int}) fieldIndexes, :lastrecord ^ABEND881(unrecognized Expr type *ast.ArrayType at: &{3318886 <nil> string}) lastRecord} NewReader
;;   "NewReader returns a new Reader that reads from r."
;;   {:added "1.0"
;;    :go "newReader(r)"}
;;   [^ABEND881(unrecognized Expr type *ast.SelectorExpr at: &{io Reader}) r])
;; 
JOKER FUNC csv.NewWriter has: 
;; (defn ^{:comma Comma, :usecrlf UseCRLF, :w ^ABEND881(unrecognized Expr type *ast.StarExpr at: &{3341027 0xc000ea0ac0}) w} NewWriter
;;   "NewWriter returns a new Writer that writes to w."
;;   {:added "1.0"
;;    :go "newWriter(w)"}
;;   [^ABEND881(unrecognized Expr type *ast.SelectorExpr at: &{io Writer}) w])
;; 
JOKER FUNC csv.TestError has: 
;; (defn TestError
;;   {:added "1.0"
;;    :go "testError(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{3312873 0xc000d5c200}) t])
;; 
JOKER FUNC csv.TestRead has: 
;; (defn TestRead
;;   {:added "1.0"
;;    :go "testRead(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{3325982 0xc000d81760}) t])
;; 
JOKER FUNC csv.TestWrite has: 
;; (defn TestWrite
;;   {:added "1.0"
;;    :go "testWrite(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{3312351 0xc000d59640}) t])
;; 
JOKER FUNC csv_test.ExampleReader has: 
;; (defn ExampleReader
;;   {:added "1.0"
;;    :go "exampleReader()"}
;;   [])
;; 
JOKER FUNC csv_test.ExampleReader_ReadAll has: 
;; (defn ExampleReader_ReadAll
;;   {:added "1.0"
;;    :go "exampleReader_ReadAll()"}
;;   [])
;; 
JOKER FUNC csv_test.ExampleReader_options has: 
;; (defn ExampleReader_options
;;   "This example shows how csv.Reader can be configured to handle other
;; types of CSV files."
;;   {:added "1.0"
;;    :go "exampleReader_options()"}
;;   [])
;; 
JOKER FUNC csv_test.ExampleWriter has: 
;; (defn ExampleWriter
;;   {:added "1.0"
;;    :go "exampleWriter()"}
;;   [])
;; 
JOKER FUNC csv_test.ExampleWriter_WriteAll has: 
;; (defn ExampleWriter_WriteAll
;;   {:added "1.0"
;;    :go "exampleWriter_WriteAll()"}
;;   [])
;; 
JOKER FUNC curve25519.BenchmarkScalarBaseMult has: 
;; (defn BenchmarkScalarBaseMult
;;   {:added "1.0"
;;    :go "benchmarkScalarBaseMult(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{14757267 0xc006112f20}) b])
;; 
JOKER FUNC curve25519.ScalarBaseMult has: 
;; (defn ScalarBaseMult
;;   "ScalarBaseMult sets dst to the product in*base where dst and base are the x
;; coordinates of group points, base is the standard generator and all values
;; are in little-endian form."
;;   {:added "1.0"
;;    :go "scalarBaseMult(dst, in)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{14756581 0xc00368b1d0}) dst, ^ABEND881(unrecognized Expr type *ast.StarExpr at: &{14756581 0xc00368b1d0}) in])
;; 
JOKER FUNC curve25519.ScalarMult has: 
;; (defn ScalarMult
;;   "ScalarMult sets dst to the product in*base where dst and base are the x
;; coordinates of group points and all values are in little-endian form."
;;   {:added "1.0"
;;    :go "scalarMult(dst, in, base)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{14756323 0xc00368aed0}) dst, ^ABEND881(unrecognized Expr type *ast.StarExpr at: &{14756323 0xc00368aed0}) in, ^ABEND881(unrecognized Expr type *ast.StarExpr at: &{14756323 0xc00368aed0}) base])
;; 
JOKER FUNC curve25519.TestBaseScalarMult has: 
;; (defn TestBaseScalarMult
;;   {:added "1.0"
;;    :go "testBaseScalarMult(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{14756954 0xc006112820}) t])
;; 
JOKER FUNC debug.FreeOSMemory has: 
;; (defn FreeOSMemory
;;   "FreeOSMemory forces a garbage collection followed by an
;; attempt to return as much memory to the operating system
;; as possible. (Even if this is not called, the runtime gradually
;; returns memory to the operating system in a background task.)"
;;   {:added "1.0"
;;    :go "freeOSMemory()"}
;;   [])
;; 
JOKER FUNC debug.PrintStack has: 
;; (defn PrintStack
;;   "PrintStack prints to standard error the stack trace returned by runtime.Stack."
;;   {:added "1.0"
;;    :go "printStack()"}
;;   [])
;; 
JOKER FUNC debug.ReadGCStats has: 
;; (defn ReadGCStats
;;   "ReadGCStats reads statistics about garbage collection into stats.
;; The number of entries in the pause history is system-dependent;
;; stats.Pause slice will be reused if large enough, reallocated otherwise.
;; ReadGCStats may use the full capacity of the stats.Pause slice.
;; If stats.PauseQuantiles is non-empty, ReadGCStats fills it with quantiles
;; summarizing the distribution of pause time. For example, if
;; len(stats.PauseQuantiles) is 5, it will be filled with the minimum,
;; 25%, 50%, 75%, and maximum pause times."
;;   {:added "1.0"
;;    :go "readGCStats(stats)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{12541923 GCStats}) stats])
;; 
JOKER FUNC debug.SetGCPercent has: 
(defn ^Int SetGCPercent
  "SetGCPercent sets the garbage collection target percentage:
a collection is triggered when the ratio of freshly allocated data
to live data remaining after the previous collection reaches this percentage.
SetGCPercent returns the previous setting.
The initial setting is the value of the GOGC environment variable
at startup, or 100 if the variable is not set.
A negative percentage disables garbage collection."
  {:added "1.0"
   :go "setGCPercent(percent)"}
  [^Int percent])

JOKER FUNC debug.SetMaxStack has: 
(defn ^Int SetMaxStack
  "SetMaxStack sets the maximum amount of memory that
can be used by a single goroutine stack.
If any goroutine exceeds this limit while growing its stack,
the program crashes.
SetMaxStack returns the previous setting.
The initial setting is 1 GB on 64-bit systems, 250 MB on 32-bit systems.

SetMaxStack is useful mainly for limiting the damage done by
goroutines that enter an infinite recursion. It only limits future
stack growth."
  {:added "1.0"
   :go "setMaxStack(bytes)"}
  [^Int bytes])

JOKER FUNC debug.SetMaxThreads has: 
(defn ^Int SetMaxThreads
  "SetMaxThreads sets the maximum number of operating system
threads that the Go program can use. If it attempts to use more than
this many, the program crashes.
SetMaxThreads returns the previous setting.
The initial setting is 10,000 threads.

The limit controls the number of operating system threads, not the number
of goroutines. A Go program creates a new thread only when a goroutine
is ready to run but all the existing threads are blocked in system calls, cgo calls,
or are locked to other goroutines due to use of runtime.LockOSThread.

SetMaxThreads is useful mainly for limiting the damage done by
programs that create an unbounded number of threads. The idea is
to take down the program before it takes down the operating system."
  {:added "1.0"
   :go "setMaxThreads(threads)"}
  [^Int threads])

JOKER FUNC debug.SetPanicOnFault has: 
;; (defn ^ABEND042(cannot find typename debug.bool) SetPanicOnFault
;;   "SetPanicOnFault controls the runtime's behavior when a program faults
;; at an unexpected (non-nil) address. Such faults are typically caused by
;; bugs such as runtime memory corruption, so the default response is to crash
;; the program. Programs working with memory-mapped files or unsafe
;; manipulation of memory may cause faults at non-nil addresses in less
;; dramatic situations; SetPanicOnFault allows such programs to request
;; that the runtime trigger only a panic, not a crash.
;; SetPanicOnFault applies only to the current goroutine.
;; It returns the previous setting."
;;   {:added "1.0"
;;    :go "setPanicOnFault(enabled)"}
;;   [enabled])
;; 
JOKER FUNC debug.SetTraceback has: 
;; (defn SetTraceback
;;   "SetTraceback sets the amount of detail printed by the runtime in
;; the traceback it prints before exiting due to an unrecovered panic
;; or an internal runtime error.
;; The level argument takes the same values as the GOTRACEBACK
;; environment variable. For example, SetTraceback("all") ensure
;; that the program prints all goroutines when it crashes.
;; See the package runtime documentation for details.
;; If SetTraceback is called with a level lower than that of the
;; environment variable, the call is ignored."
;;   {:added "1.0"
;;    :go "setTraceback(level)"}
;;   [^String level])
;; 
JOKER FUNC debug.Stack has: 
;; (defn ^[ABEND042(cannot find typename debug.byte)] Stack
;;   "Stack returns a formatted stack trace of the goroutine that calls it.
;; It calls runtime.Stack with a large enough buffer to capture the entire trace."
;;   {:added "1.0"
;;    :go "stack()"}
;;   [])
;; 
JOKER FUNC debug.WriteHeapDump has: 
;; (defn WriteHeapDump
;;   "WriteHeapDump writes a description of the heap and the objects in
;; it to the given file descriptor.
;; 
;; WriteHeapDump suspends the execution of all goroutines until the heap
;; dump is completely written.  Thus, the file descriptor must not be
;; connected to a pipe or socket whose other end is in the same Go
;; process; instead, use a temporary file or network socket.
;; 
;; The heap dump format is defined at https://golang.org/s/go15heapdump."
;;   {:added "1.0"
;;    :go "writeHeapDump(fd)"}
;;   [fd])
;; 
JOKER FUNC debug_test.TestFreeOSMemory has: 
;; (defn TestFreeOSMemory
;;   {:added "1.0"
;;    :go "testFreeOSMemory(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{12537627 0xc0058f5aa0}) t])
;; 
JOKER FUNC debug_test.TestReadGCStats has: 
;; (defn TestReadGCStats
;;   {:added "1.0"
;;    :go "testReadGCStats(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{12535243 0xc0058f0f20}) t])
;; 
JOKER FUNC debug_test.TestSetGCPercent has: 
;; (defn TestSetGCPercent
;;   {:added "1.0"
;;    :go "testSetGCPercent(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{12538098 0xc0058fc1c0}) t])
;; 
JOKER FUNC debug_test.TestSetMaxThreadsOvf has: 
;; (defn TestSetMaxThreadsOvf
;;   {:added "1.0"
;;    :go "testSetMaxThreadsOvf(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{12540200 0xc005904040}) t])
;; 
JOKER FUNC debug_test.TestStack has: 
;; (defn TestStack
;;   "The traceback should look something like this, modulo line numbers and hex constants.
;; 	Don't worry much about the base levels, but check the ones in our own package.
;; 
;; 		goroutine 10 [running]:
;; 		runtime/debug.Stack(0x0, 0x0, 0x0)
;; 			/Users/r/go/src/runtime/debug/stack.go:28 +0x80
;; 		runtime/debug.(*T).ptrmethod(0xc82005ee70, 0x0, 0x0, 0x0)
;; 			/Users/r/go/src/runtime/debug/stack_test.go:15 +0x29
;; 		runtime/debug.T.method(0x0, 0x0, 0x0, 0x0)
;; 			/Users/r/go/src/runtime/debug/stack_test.go:18 +0x32
;; 		runtime/debug.TestStack(0xc8201ce000)
;; 			/Users/r/go/src/runtime/debug/stack_test.go:37 +0x38
;; 		testing.tRunner(0xc8201ce000, 0x664b58)
;; 			/Users/r/go/src/testing/testing.go:456 +0x98
;; 		created by testing.RunTests
;; 			/Users/r/go/src/testing/testing.go:561 +0x86d"
;;   {:added "1.0"
;;    :go "testStack(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{12534260 0xc0058f00c0}) t])
;; 
JOKER FUNC debug_test.TestWriteHeapDumpFinalizers has: 
;; (defn TestWriteHeapDumpFinalizers
;;   {:added "1.0"
;;    :go "testWriteHeapDumpFinalizers(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{12548613 0xc005916600}) t])
;; 
JOKER FUNC debug_test.TestWriteHeapDumpNonempty has: 
;; (defn TestWriteHeapDumpNonempty
;;   {:added "1.0"
;;    :go "testWriteHeapDumpNonempty(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{12547965 0xc0059119a0}) t])
;; 
JOKER FUNC des.BenchmarkDecrypt has: 
;; (defn BenchmarkDecrypt
;;   {:added "1.0"
;;    :go "benchmarkDecrypt(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{1139966 0xc000944560}) b])
;; 
JOKER FUNC des.BenchmarkEncrypt has: 
;; (defn BenchmarkEncrypt
;;   {:added "1.0"
;;    :go "benchmarkEncrypt(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{1139688 0xc0009257e0}) b])
;; 
JOKER FUNC des.BenchmarkTDESDecrypt has: 
;; (defn BenchmarkTDESDecrypt
;;   {:added "1.0"
;;    :go "benchmarkTDESDecrypt(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{1140547 0xc000974c00}) b])
;; 
JOKER FUNC des.BenchmarkTDESEncrypt has: 
;; (defn BenchmarkTDESEncrypt
;;   {:added "1.0"
;;    :go "benchmarkTDESEncrypt(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{1140250 0xc00095c360}) b])
;; 
JOKER FUNC des.NewCipher has: 
;; (defn ^[ABEND881(unrecognized Expr type *ast.SelectorExpr at: &{cipher Block}) Error] NewCipher
;;   "NewCipher creates and returns a new cipher.Block."
;;   {:added "1.0"
;;    :go "newCipher(key)"}
;;   [^ABEND881(unrecognized Expr type *ast.ArrayType at: &{1083326 <nil> byte}) key])
;; 
JOKER FUNC des.NewTripleDESCipher has: 
;; (defn ^[ABEND881(unrecognized Expr type *ast.SelectorExpr at: &{cipher Block}) Error] NewTripleDESCipher
;;   "NewTripleDESCipher creates and returns a new cipher.Block."
;;   {:added "1.0"
;;    :go "newTripleDESCipher(key)"}
;;   [^ABEND881(unrecognized Expr type *ast.ArrayType at: &{1084457 <nil> byte}) key])
;; 
JOKER FUNC des.TestDESDecryptBlock has: 
;; (defn TestDESDecryptBlock
;;   {:added "1.0"
;;    :go "testDESDecryptBlock(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{1134858 0xc0008c8760}) t])
;; 
JOKER FUNC des.TestDESEncryptBlock has: 
;; (defn TestDESEncryptBlock
;;   {:added "1.0"
;;    :go "testDESEncryptBlock(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{1134579 0xc0008c80a0}) t])
;; 
JOKER FUNC des.TestDecryptTripleDES has: 
;; (defn TestDecryptTripleDES
;;   {:added "1.0"
;;    :go "testDecryptTripleDES(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{1135426 0xc0008d4b40}) t])
;; 
JOKER FUNC des.TestEncryptTripleDES has: 
;; (defn TestEncryptTripleDES
;;   {:added "1.0"
;;    :go "testEncryptTripleDES(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{1135145 0xc0008c9ec0}) t])
;; 
JOKER FUNC des.TestFinalPermute has: 
;; (defn TestFinalPermute
;;   {:added "1.0"
;;    :go "testFinalPermute(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{1139427 0xc0009245a0}) t])
;; 
JOKER FUNC des.TestInitialPermutationKnownAnswer has: 
;; (defn TestInitialPermutationKnownAnswer
;;   "Defined in Pub 800-20
;; Decrypting the Table A.1 plaintext with the
;; 0x01... key produces the corresponding ciphertext"
;;   {:added "1.0"
;;    :go "testInitialPermutationKnownAnswer(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{1136907 0xc00090e6c0}) t])
;; 
JOKER FUNC des.TestInitialPermute has: 
;; (defn TestInitialPermute
;;   {:added "1.0"
;;    :go "testInitialPermute(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{1139166 0xc0009240c0}) t])
;; 
JOKER FUNC des.TestInversePermutationKnownAnswer has: 
;; (defn TestInversePermutationKnownAnswer
;;   "Defined in Pub 800-20
;; Encrypting the Table A.1 ciphertext with the
;; 0x01... key produces the original plaintext"
;;   {:added "1.0"
;;    :go "testInversePermutationKnownAnswer(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{1136485 0xc0008fe420}) t])
;; 
JOKER FUNC des.TestPermutationOperationKnownAnswerDecrypt has: 
;; (defn TestPermutationOperationKnownAnswerDecrypt
;;   "Defined in Pub 800-20"
;;   {:added "1.0"
;;    :go "testPermutationOperationKnownAnswerDecrypt(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{1138239 0xc00091c680}) t])
;; 
JOKER FUNC des.TestPermutationOperationKnownAnswerEncrypt has: 
;; (defn TestPermutationOperationKnownAnswerEncrypt
;;   "Defined in Pub 800-20"
;;   {:added "1.0"
;;    :go "testPermutationOperationKnownAnswerEncrypt(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{1137897 0xc000915fe0}) t])
;; 
JOKER FUNC des.TestSemiWeakKeyPairs has: 
;; (defn TestSemiWeakKeyPairs
;;   "Use the known semi-weak key pairs to test DES implementation"
;;   {:added "1.0"
;;    :go "testSemiWeakKeyPairs(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{1134011 0xc0008bd6c0}) t])
;; 
JOKER FUNC des.TestSubstitutionTableKnownAnswerDecrypt has: 
;; (defn TestSubstitutionTableKnownAnswerDecrypt
;;   "Defined in Pub 800-20"
;;   {:added "1.0"
;;    :go "testSubstitutionTableKnownAnswerDecrypt(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{1138895 0xc00091d9e0}) t])
;; 
JOKER FUNC des.TestSubstitutionTableKnownAnswerEncrypt has: 
;; (defn TestSubstitutionTableKnownAnswerEncrypt
;;   "Defined in Pub 800-20"
;;   {:added "1.0"
;;    :go "testSubstitutionTableKnownAnswerEncrypt(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{1138578 0xc00091d2a0}) t])
;; 
JOKER FUNC des.TestVariableCiphertextKnownAnswer has: 
;; (defn TestVariableCiphertextKnownAnswer
;;   "Defined in Pub 800-20"
;;   {:added "1.0"
;;    :go "testVariableCiphertextKnownAnswer(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{1136067 0xc0008ec6a0}) t])
;; 
JOKER FUNC des.TestVariableKeyKnownAnswerDecrypt has: 
;; (defn TestVariableKeyKnownAnswerDecrypt
;;   "Defined in Pub 800-20"
;;   {:added "1.0"
;;    :go "testVariableKeyKnownAnswerDecrypt(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{1137555 0xc000915420}) t])
;; 
JOKER FUNC des.TestVariableKeyKnownAnswerEncrypt has: 
;; (defn TestVariableKeyKnownAnswerEncrypt
;;   "Defined in Pub 800-20"
;;   {:added "1.0"
;;    :go "testVariableKeyKnownAnswerEncrypt(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{1137222 0xc00090fea0}) t])
;; 
JOKER FUNC des.TestVariablePlaintextKnownAnswer has: 
;; (defn TestVariablePlaintextKnownAnswer
;;   "Defined in Pub 800-20"
;;   {:added "1.0"
;;    :go "testVariablePlaintextKnownAnswer(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{1135752 0xc0008ddc40}) t])
;; 
JOKER FUNC des.TestWeakKeys has: 
;; (defn TestWeakKeys
;;   "Use the known weak keys to test DES implementation"
;;   {:added "1.0"
;;    :go "testWeakKeys(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{1133471 0xc0008bcde0}) t])
;; 
JOKER FUNC des_test.ExampleNewTripleDESCipher has: 
;; (defn ExampleNewTripleDESCipher
;;   {:added "1.0"
;;    :go "exampleNewTripleDESCipher()"}
;;   [])
;; 
JOKER FUNC dnsmessage.BenchmarkAppendPack has: 
;; (defn BenchmarkAppendPack
;;   {:added "1.0"
;;    :go "benchmarkAppendPack(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{14981386 0xc0045d7e20}) b])
;; 
JOKER FUNC dnsmessage.BenchmarkBuilding has: 
;; (defn BenchmarkBuilding
;;   {:added "1.0"
;;    :go "benchmarkBuilding(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{14980048 0xc0045d67c0}) b])
;; 
JOKER FUNC dnsmessage.BenchmarkPack has: 
;; (defn BenchmarkPack
;;   {:added "1.0"
;;    :go "benchmarkPack(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{14981208 0xc0045d7a00}) b])
;; 
JOKER FUNC dnsmessage.BenchmarkParsing has: 
;; (defn BenchmarkParsing
;;   {:added "1.0"
;;    :go "benchmarkParsing(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{14978235 0xc0045c6720}) b])
;; 
JOKER FUNC dnsmessage.NewBuilder has: 
;; (defn ^{:msg ^ABEND881(unrecognized Expr type *ast.ArrayType at: &{15007962 <nil> byte}) msg, :section section, :header header, :start ^Int start, :compression ^ABEND881(unrecognized Expr type *ast.MapType at: &{15008329 string int}) compression} NewBuilder
;;   "NewBuilder creates a new builder with compression disabled.
;; 
;; Note: Most users will want to immediately enable compression with the
;; EnableCompression method. See that method's comment for why you may or may
;; not want to enable compression.
;; 
;; The DNS message is appended to the provided initial buffer buf (which may be
;; nil) as it is built. The final message is returned by the (*Builder).Finish
;; method, which may return the same underlying array if there was sufficient
;; capacity in the slice."
;;   {:added "1.0"
;;    :go "newBuilder(buf, h)"}
;;   [^ABEND881(unrecognized Expr type *ast.ArrayType at: &{15008885 <nil> byte}) buf, h])
;; 
JOKER FUNC dnsmessage.NewName has: 
;; (defn ^[{:data ^ABEND881(unrecognized Expr type *ast.ArrayType at: &{15024169 nameLen byte}) Data, :length Length} Error] NewName
;;   "NewName creates a new Name from a string."
;;   {:added "1.0"
;;    :go "newName(name)"}
;;   [^String name])
;; 
JOKER FUNC dnsmessage.TestBuilder has: 
;; (defn TestBuilder
;;   {:added "1.0"
;;    :go "testBuilder(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{14972885 0xc004286700}) t])
;; 
JOKER FUNC dnsmessage.TestBuilderResourceError has: 
;; (defn TestBuilderResourceError
;;   {:added "1.0"
;;    :go "testBuilderResourceError(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{14971002 0xc00427c620}) t])
;; 
JOKER FUNC dnsmessage.TestBuildingAllocs has: 
;; (defn TestBuildingAllocs
;;   {:added "1.0"
;;    :go "testBuildingAllocs(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{14980213 0xc0045d6b40}) t])
;; 
JOKER FUNC dnsmessage.TestDNSAppendPackUnpack has: 
;; (defn TestDNSAppendPackUnpack
;;   {:added "1.0"
;;    :go "testDNSAppendPackUnpack(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{14964295 0xc002f5cce0}) t])
;; 
JOKER FUNC dnsmessage.TestDNSPackUnpack has: 
;; (defn TestDNSPackUnpack
;;   {:added "1.0"
;;    :go "testDNSPackUnpack(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{14963653 0xc002f5c280}) t])
;; 
JOKER FUNC dnsmessage.TestFinishError has: 
;; (defn TestFinishError
;;   {:added "1.0"
;;    :go "testFinishError(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{14972704 0xc0042863a0}) t])
;; 
JOKER FUNC dnsmessage.TestHeaderUnpackError has: 
;; (defn TestHeaderUnpackError
;;   {:added "1.0"
;;    :go "testHeaderUnpackError(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{14961958 0xc002ae9f40}) t])
;; 
JOKER FUNC dnsmessage.TestIncompressibleName has: 
;; (defn TestIncompressibleName
;;   {:added "1.0"
;;    :go "testIncompressibleName(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{14961091 0xc002ae9040}) t])
;; 
JOKER FUNC dnsmessage.TestName has: 
;; (defn TestName
;;   {:added "1.0"
;;    :go "testName(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{14959449 0xc002ae3540}) t])
;; 
JOKER FUNC dnsmessage.TestNamePackUnpack has: 
;; (defn TestNamePackUnpack
;;   {:added "1.0"
;;    :go "testNamePackUnpack(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{14959915 0xc002ae3c80}) t])
;; 
JOKER FUNC dnsmessage.TestNameString has: 
;; (defn TestNameString
;;   {:added "1.0"
;;    :go "testNameString(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{14958606 0xc002ae2460}) t])
;; 
JOKER FUNC dnsmessage.TestParserStart has: 
;; (defn TestParserStart
;;   {:added "1.0"
;;    :go "testParserStart(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{14962357 0xc0034666a0}) t])
;; 
JOKER FUNC dnsmessage.TestParsingAllocs has: 
;; (defn TestParsingAllocs
;;   {:added "1.0"
;;    :go "testParsingAllocs(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{14978426 0xc0045c6b40}) t])
;; 
JOKER FUNC dnsmessage.TestQuestionPackUnpack has: 
;; (defn TestQuestionPackUnpack
;;   {:added "1.0"
;;    :go "testQuestionPackUnpack(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{14958808 0xc002ae27e0}) t])
;; 
JOKER FUNC dnsmessage.TestResourceNotStarted has: 
;; (defn TestResourceNotStarted
;;   {:added "1.0"
;;    :go "testResourceNotStarted(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{14962616 0xc003466b60}) t])
;; 
JOKER FUNC dnsmessage.TestResourcePack has: 
;; (defn TestResourcePack
;;   {:added "1.0"
;;    :go "testResourcePack(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{14975408 0xc004331b80}) t])
;; 
JOKER FUNC dnsmessage.TestSkipAfterRead has: 
;; (defn TestSkipAfterRead
;;   {:added "1.0"
;;    :go "testSkipAfterRead(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{14966312 0xc003ead160}) t])
;; 
JOKER FUNC dnsmessage.TestSkipAll has: 
;; (defn TestSkipAll
;;   {:added "1.0"
;;    :go "testSkipAll(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{14964972 0xc002f5d880}) t])
;; 
JOKER FUNC dnsmessage.TestSkipEach has: 
;; (defn TestSkipEach
;;   {:added "1.0"
;;    :go "testSkipEach(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{14965600 0xc003eac440}) t])
;; 
JOKER FUNC dnsmessage.TestSkipNotStarted has: 
;; (defn TestSkipNotStarted
;;   {:added "1.0"
;;    :go "testSkipNotStarted(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{14967233 0xc003f06480}) t])
;; 
JOKER FUNC dnsmessage.TestStartAppends has: 
;; (defn TestStartAppends
;;   {:added "1.0"
;;    :go "testStartAppends(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{14969618 0xc004026c40}) t])
;; 
JOKER FUNC dnsmessage.TestStartError has: 
;; (defn TestStartError
;;   {:added "1.0"
;;    :go "testStartError(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{14970104 0xc0040275a0}) t])
;; 
JOKER FUNC dnsmessage.TestTooLongTxt has: 
;; (defn TestTooLongTxt
;;   {:added "1.0"
;;    :go "testTooLongTxt(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{14969320 0xc004026720}) t])
;; 
JOKER FUNC dnsmessage.TestTooManyRecords has: 
;; (defn TestTooManyRecords
;;   {:added "1.0"
;;    :go "testTooManyRecords(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{14967686 0xc003f06be0}) t])
;; 
JOKER FUNC dnsmessage.TestVeryLongTxt has: 
;; (defn TestVeryLongTxt
;;   {:added "1.0"
;;    :go "testVeryLongTxt(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{14968432 0xc003f07720}) t])
;; 
JOKER FUNC dnsmessage_test.ExampleParser has: 
;; (defn ExampleParser
;;   {:added "1.0"
;;    :go "exampleParser()"}
;;   [])
;; 
JOKER FUNC doc.Examples has: 
;; (defn ^[{:name ^String Name, :doc ^String Doc, :code ^ABEND881(unrecognized Expr type *ast.SelectorExpr at: &{ast Node}) Code, :play ^ABEND881(unrecognized Expr type *ast.StarExpr at: &{4639691 0xc002094240}) Play, :comments ^ABEND881(unrecognized Expr type *ast.ArrayType at: &{4639756 <nil> 0xc002094340}) Comments, :output ^String Output, :unordered Unordered, :emptyoutput EmptyOutput, :order ^Int Order}] Examples
;;   "Examples returns the examples found in the files, sorted by Name field.
;; The Order fields record the order in which the examples were encountered.
;; 
;; Playable Examples must be in a package whose name ends in "_test".
;; An Example is "playable" (the Play field is non-nil) in either of these
;; circumstances:
;;   - The example function is self-contained: the function references only
;;     identifiers from other packages (or predeclared identifiers, such as
;;     "int") and the test file does not include a dot import.
;;   - The entire test file is the example: the file contains exactly one
;;     example function, zero test or benchmark functions, and at least one
;;     top-level function, type, variable, or constant declaration other
;;     than the example function."
;;   {:added "1.0"
;;    :go "examples(files)"}
;;   [^ABEND881(unrecognized Expr type *ast.Ellipsis at: &{4640735 0xc0020947e0}) files])
;; 
JOKER FUNC doc.IsPredeclared has: 
;; (defn ^ABEND042(cannot find typename doc.bool) IsPredeclared
;;   "IsPredeclared reports whether s is a predeclared identifier."
;;   {:added "1.0"
;;    :go "isPredeclared(s)"}
;;   [^String s])
;; 
JOKER FUNC doc.New has: 
;; (defn ^{:doc ^String Doc, :name ^String Name, :importpath ^String ImportPath, :imports ^ABEND881(unrecognized Expr type *ast.ArrayType at: &{4676364 <nil> string}) Imports, :filenames ^ABEND881(unrecognized Expr type *ast.ArrayType at: &{4676385 <nil> string}) Filenames, :notes ^ABEND881(unrecognized Expr type *ast.MapType at: &{4676406 string 0xc001b96a20}) Notes, :bugs ^ABEND881(unrecognized Expr type *ast.ArrayType at: &{4676547 <nil> string}) Bugs, :consts ^ABEND881(unrecognized Expr type *ast.ArrayType at: &{4676582 <nil> 0xc001b95d80}) Consts, :types ^ABEND881(unrecognized Expr type *ast.ArrayType at: &{4676599 <nil> 0xc001b95de0}) Types, :vars ^ABEND881(unrecognized Expr type *ast.ArrayType at: &{4676615 <nil> 0xc001b95e40}) Vars, :funcs ^ABEND881(unrecognized Expr type *ast.ArrayType at: &{4676632 <nil> 0xc001b95ea0}) Funcs} New
;;   "New computes the package documentation for the given package AST.
;; New takes ownership of the AST pkg and may edit or overwrite it."
;;   {:added "1.0"
;;    :go "new(pkg, importPath, mode)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{4678579 0xc001b9efa0}) pkg, ^String importPath, mode])
;; 
JOKER FUNC doc.Synopsis has: 
(defn ^String Synopsis
  "Synopsis returns a cleaned version of the first sentence in s.
That sentence ends after the first period followed by space and
not preceded by exactly one uppercase letter. The result string
has no \n, \r, or \t characters and uses only single spaces between
words. If s starts with any of the IllegalPrefixes, the result
is the empty string."
  {:added "1.0"
   :go "synopsis(s)"}
  [^String s])

JOKER FUNC doc.Test has: 
;; (defn Test
;;   {:added "1.0"
;;    :go "test(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{4667943 0xc001a77480}) t])
;; 
JOKER FUNC doc.TestBlocks has: 
;; (defn TestBlocks
;;   {:added "1.0"
;;    :go "testBlocks(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{4635280 0xc00208d900}) t])
;; 
JOKER FUNC doc.TestEmphasize has: 
;; (defn TestEmphasize
;;   {:added "1.0"
;;    :go "testEmphasize(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{4638167 0xc002090c40}) t])
;; 
JOKER FUNC doc.TestIsHeading has: 
;; (defn TestIsHeading
;;   {:added "1.0"
;;    :go "testIsHeading(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{4634173 0xc00208cae0}) t])
;; 
JOKER FUNC doc.TestPairedParensPrefixLen has: 
;; (defn TestPairedParensPrefixLen
;;   {:added "1.0"
;;    :go "testPairedParensPrefixLen(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{4638923 0xc002091960}) t])
;; 
JOKER FUNC doc.TestSynopsis has: 
;; (defn TestSynopsis
;;   {:added "1.0"
;;    :go "testSynopsis(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{4680618 0xc0017d2a60}) t])
;; 
JOKER FUNC doc.TestToText has: 
;; (defn TestToText
;;   {:added "1.0"
;;    :go "testToText(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{4635477 0xc00208dda0}) t])
;; 
JOKER FUNC doc.ToHTML has: 
;; (defn ToHTML
;;   "ToHTML converts comment text to formatted HTML.
;; The comment was prepared by DocReader,
;; so it is known not to have leading, trailing blank lines
;; nor to have trailing spaces at the end of lines.
;; The comment markers have already been removed.
;; 
;; Each span of unindented non-blank lines is converted into
;; a single paragraph. There is one exception to the rule: a span that
;; consists of a single line, is followed by another paragraph span,
;; begins with a capital letter, and contains no punctuation
;; other than parentheses and commas is formatted as a heading.
;; 
;; A span of indented lines is converted into a <pre> block,
;; with the common indent prefix removed.
;; 
;; URLs in the comment text are converted into links; if the URL also appears
;; in the words map, the link is taken from the map (if the corresponding map
;; value is the empty string, the URL is not converted into a link).
;; 
;; Go identifiers that appear in the words map are italicized; if the corresponding
;; map value is not the empty string, it is considered a URL and the word is converted
;; into a link."
;;   {:added "1.0"
;;    :go "toHTML(w, text, words)"}
;;   [^ABEND881(unrecognized Expr type *ast.SelectorExpr at: &{io Writer}) w, ^String text, ^ABEND881(unrecognized Expr type *ast.MapType at: &{4661000 string string}) words])
;; 
JOKER FUNC doc.ToText has: 
;; (defn ToText
;;   "ToText prepares comment text for presentation in textual output.
;; It wraps paragraphs of text to width or fewer Unicode code points
;; and then prefixes each line with the indent. In preformatted sections
;; (such as program text), it prefixes each non-blank line with preIndent."
;;   {:added "1.0"
;;    :go "toText(w, text, indent, preIndent, width)"}
;;   [^ABEND881(unrecognized Expr type *ast.SelectorExpr at: &{io Writer}) w, ^String text, ^String indent, ^String preIndent, ^Int width])
;; 
JOKER FUNC doc_test.TestExamples has: 
;; (defn TestExamples
;;   {:added "1.0"
;;    :go "testExamples(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{4604868 0xc001c7cfc0}) t])
;; 
JOKER FUNC doc_test.TestExamplesWholeFile has: 
;; (defn TestExamplesWholeFile
;;   {:added "1.0"
;;    :go "testExamplesWholeFile(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{4605876 0xc001c7de60}) t])
;; 
JOKER FUNC draw.BenchmarkCMYK has: 
;; (defn BenchmarkCMYK
;;   {:added "1.0"
;;    :go "benchmarkCMYK(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{6033864 0xc001d7cc40}) b])
;; 
JOKER FUNC draw.BenchmarkCopyOver has: 
;; (defn BenchmarkCopyOver
;;   {:added "1.0"
;;    :go "benchmarkCopyOver(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{6033292 0xc001d67ec0}) b])
;; 
JOKER FUNC draw.BenchmarkCopySrc has: 
;; (defn BenchmarkCopySrc
;;   {:added "1.0"
;;    :go "benchmarkCopySrc(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{6033388 0xc001d7c100}) b])
;; 
JOKER FUNC draw.BenchmarkFillOver has: 
;; (defn BenchmarkFillOver
;;   {:added "1.0"
;;    :go "benchmarkFillOver(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{6033124 0xc001d67ac0}) b])
;; 
JOKER FUNC draw.BenchmarkFillSrc has: 
;; (defn BenchmarkFillSrc
;;   {:added "1.0"
;;    :go "benchmarkFillSrc(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{6033208 0xc001d67cc0}) b])
;; 
JOKER FUNC draw.BenchmarkGenericMaskOver has: 
;; (defn BenchmarkGenericMaskOver
;;   {:added "1.0"
;;    :go "benchmarkGenericMaskOver(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{6034429 0xc001d7d780}) b])
;; 
JOKER FUNC draw.BenchmarkGenericMaskSrc has: 
;; (defn BenchmarkGenericMaskSrc
;;   {:added "1.0"
;;    :go "benchmarkGenericMaskSrc(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{6034651 0xc001d7dc40}) b])
;; 
JOKER FUNC draw.BenchmarkGenericOver has: 
;; (defn BenchmarkGenericOver
;;   {:added "1.0"
;;    :go "benchmarkGenericOver(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{6034321 0xc001d7d540}) b])
;; 
JOKER FUNC draw.BenchmarkGenericSrc has: 
;; (defn BenchmarkGenericSrc
;;   {:added "1.0"
;;    :go "benchmarkGenericSrc(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{6034545 0xc001d7da00}) b])
;; 
JOKER FUNC draw.BenchmarkGlyphOver has: 
;; (defn BenchmarkGlyphOver
;;   {:added "1.0"
;;    :go "benchmarkGlyphOver(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{6033962 0xc001d7ce80}) b])
;; 
JOKER FUNC draw.BenchmarkGray has: 
;; (defn BenchmarkGray
;;   {:added "1.0"
;;    :go "benchmarkGray(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{6033771 0xc001d7ca00}) b])
;; 
JOKER FUNC draw.BenchmarkNRGBAOver has: 
;; (defn BenchmarkNRGBAOver
;;   {:added "1.0"
;;    :go "benchmarkNRGBAOver(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{6033485 0xc001d7c340}) b])
;; 
JOKER FUNC draw.BenchmarkNRGBASrc has: 
;; (defn BenchmarkNRGBASrc
;;   {:added "1.0"
;;    :go "benchmarkNRGBASrc(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{6033583 0xc001d7c580}) b])
;; 
JOKER FUNC draw.BenchmarkPaletted has: 
;; (defn BenchmarkPaletted
;;   {:added "1.0"
;;    :go "benchmarkPaletted(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{6034154 0xc001d7d300}) b])
;; 
JOKER FUNC draw.BenchmarkRGBA has: 
;; (defn BenchmarkRGBA
;;   {:added "1.0"
;;    :go "benchmarkRGBA(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{6034056 0xc001d7d0c0}) b])
;; 
JOKER FUNC draw.BenchmarkYCbCr has: 
;; (defn BenchmarkYCbCr
;;   {:added "1.0"
;;    :go "benchmarkYCbCr(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{6033677 0xc001d7c7c0}) b])
;; 
JOKER FUNC draw.Draw has: 
;; (defn Draw
;;   "Draw calls DrawMask with a nil mask."
;;   {:added "1.0"
;;    :go "draw(dst, r, src, sp, op)"}
;;   [dst, ^ABEND881(unrecognized Expr type *ast.SelectorExpr at: &{image Rectangle}) r, ^ABEND881(unrecognized Expr type *ast.SelectorExpr at: &{image Image}) src, ^ABEND881(unrecognized Expr type *ast.SelectorExpr at: &{image Point}) sp, op])
;; 
JOKER FUNC draw.DrawMask has: 
;; (defn DrawMask
;;   "DrawMask aligns r.Min in dst with sp in src and mp in mask and then replaces the rectangle r
;; in dst with the result of a Porter-Duff composition. A nil mask is treated as opaque."
;;   {:added "1.0"
;;    :go "drawMask(dst, r, src, sp, mask, mp, op)"}
;;   [dst, ^ABEND881(unrecognized Expr type *ast.SelectorExpr at: &{image Rectangle}) r, ^ABEND881(unrecognized Expr type *ast.SelectorExpr at: &{image Image}) src, ^ABEND881(unrecognized Expr type *ast.SelectorExpr at: &{image Point}) sp, ^ABEND881(unrecognized Expr type *ast.SelectorExpr at: &{image Image}) mask, ^ABEND881(unrecognized Expr type *ast.SelectorExpr at: &{image Point}) mp, op])
;; 
JOKER FUNC draw.TestClip has: 
;; (defn TestClip
;;   {:added "1.0"
;;    :go "testClip(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{6058803 0xc001a80220}) t])
;; 
JOKER FUNC draw.TestDraw has: 
;; (defn TestDraw
;;   {:added "1.0"
;;    :go "testDraw(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{6068920 0xc001d4b940}) t])
;; 
JOKER FUNC draw.TestDrawOverlap has: 
;; (defn TestDrawOverlap
;;   {:added "1.0"
;;    :go "testDrawOverlap(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{6070582 0xc00208ffe0}) t])
;; 
JOKER FUNC draw.TestFill has: 
;; (defn TestFill
;;   {:added "1.0"
;;    :go "testFill(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{6072362 0xc001f1eba0}) t])
;; 
JOKER FUNC draw.TestFloydSteinbergCheckerboard has: 
;; (defn TestFloydSteinbergCheckerboard
;;   "TestFloydSteinbergCheckerboard tests that the result of Floyd-Steinberg
;; error diffusion of a uniform 50% gray source image with a black-and-white
;; palette is a checkerboard pattern."
;;   {:added "1.0"
;;    :go "testFloydSteinbergCheckerboard(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{6074332 0xc001b5c2a0}) t])
;; 
JOKER FUNC draw.TestNonZeroSrcPt has: 
;; (defn TestNonZeroSrcPt
;;   "TestNonZeroSrcPt checks drawing with a non-zero src point parameter."
;;   {:added "1.0"
;;    :go "testNonZeroSrcPt(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{6071904 0xc00155d9c0}) t])
;; 
JOKER FUNC draw.TestPaletted has: 
;; (defn TestPaletted
;;   "TestPaletted tests that the drawPaletted function behaves the same
;; regardless of whether dst is an *image.Paletted."
;;   {:added "1.0"
;;    :go "testPaletted(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{6075245 0xc001b5d320}) t])
;; 
JOKER FUNC draw.TestSqDiff has: 
;; (defn TestSqDiff
;;   {:added "1.0"
;;    :go "testSqDiff(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{6076247 0xc001b92c00}) t])
;; 
JOKER FUNC draw_test.ExampleDrawer_floydSteinberg has: 
;; (defn ExampleDrawer_floydSteinberg
;;   {:added "1.0"
;;    :go "exampleDrawer_floydSteinberg()"}
;;   [])
;; 
JOKER FUNC driver.IsScanValue has: 
;; (defn ^ABEND042(cannot find typename driver.bool) IsScanValue
;;   "IsScanValue is equivalent to IsValue.
;; It exists for compatibility."
;;   {:added "1.0"
;;    :go "isScanValue(v)"}
;;   [^ABEND881(unrecognized Expr type *ast.InterfaceType at: &{2624731 0xc001299bf0 false}) v])
;; 
JOKER FUNC driver.IsValue has: 
;; (defn ^ABEND042(cannot find typename driver.bool) IsValue
;;   "IsValue reports whether v is a valid Value parameter type."
;;   {:added "1.0"
;;    :go "isValue(v)"}
;;   [^ABEND881(unrecognized Expr type *ast.InterfaceType at: &{2624479 0xc0012998c0 false}) v])
;; 
JOKER FUNC driver.TestValueConverters has: 
;; (defn TestValueConverters
;;   {:added "1.0"
;;    :go "testValueConverters(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{2647341 0xc0012d4060}) t])
;; 
JOKER FUNC dsa.GenerateKey has: 
;; (defn ^Error GenerateKey
;;   "GenerateKey generates a public&private key pair. The Parameters of the
;; PrivateKey must already be valid (see GenerateParameters)."
;;   {:added "1.0"
;;    :go "generateKey(priv, rand)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{1155775 PrivateKey}) priv, ^ABEND881(unrecognized Expr type *ast.SelectorExpr at: &{io Reader}) rand])
;; 
JOKER FUNC dsa.GenerateParameters has: 
;; (defn ^Error GenerateParameters
;;   "GenerateParameters puts a random, valid set of DSA parameters into params.
;; This function can take many seconds, even on fast machines."
;;   {:added "1.0"
;;    :go "generateParameters(params, rand, sizes)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{1154049 Parameters}) params, ^ABEND881(unrecognized Expr type *ast.SelectorExpr at: &{io Reader}) rand, sizes])
;; 
JOKER FUNC dsa.Sign has: 
;; (defn ^[r s err] Sign
;;   "Sign signs an arbitrary length hash (which should be the result of hashing a
;; larger message) using the private key, priv. It returns the signature as a
;; pair of integers. The security of the private key depends on the entropy of
;; rand.
;; 
;; Note that FIPS 186-3 section 4.6 specifies that the hash should be truncated
;; to the byte-length of the subgroup. This function does not perform that
;; truncation itself.
;; 
;; Be aware that calling Sign with an attacker-controlled PrivateKey may
;; require an arbitrary amount of CPU."
;;   {:added "1.0"
;;    :go "sign(rand, priv, hash)"}
;;   [^ABEND881(unrecognized Expr type *ast.SelectorExpr at: &{io Reader}) rand, ^ABEND881(unrecognized Expr type *ast.StarExpr at: &{1157237 PrivateKey}) priv, ^ABEND881(unrecognized Expr type *ast.ArrayType at: &{1157255 <nil> byte}) hash])
;; 
JOKER FUNC dsa.TestParameterGeneration has: 
;; (defn TestParameterGeneration
;;   {:added "1.0"
;;    :go "testParameterGeneration(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{1160840 0xc000607e20}) t])
;; 
JOKER FUNC dsa.TestSignAndVerify has: 
;; (defn TestSignAndVerify
;;   {:added "1.0"
;;    :go "testSignAndVerify(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{1161290 0xc00072a660}) t])
;; 
JOKER FUNC dsa.TestSigningWithDegenerateKeys has: 
;; (defn TestSigningWithDegenerateKeys
;;   {:added "1.0"
;;    :go "testSigningWithDegenerateKeys(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{1162408 0xc00072ab20}) t])
;; 
JOKER FUNC dsa.Verify has: 
;; (defn ^ABEND042(cannot find typename dsa.bool) Verify
;;   "Verify verifies the signature in r, s of hash using the public key, pub. It
;; reports whether the signature is valid.
;; 
;; Note that FIPS 186-3 section 4.6 specifies that the hash should be truncated
;; to the byte-length of the subgroup. This function does not perform that
;; truncation itself."
;;   {:added "1.0"
;;    :go "verify(pub, hash, r, s)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{1158741 PublicKey}) pub, ^ABEND881(unrecognized Expr type *ast.ArrayType at: &{1158758 <nil> byte}) hash, ^ABEND881(unrecognized Expr type *ast.StarExpr at: &{1158771 0xc0006f6a80}) r, ^ABEND881(unrecognized Expr type *ast.StarExpr at: &{1158771 0xc0006f6a80}) s])
;; 
JOKER FUNC dwarf.New has: 
;; (defn ^[{:abbrev ^ABEND881(unrecognized Expr type *ast.ArrayType at: &{2740036 <nil> byte}) abbrev, :aranges ^ABEND881(unrecognized Expr type *ast.ArrayType at: &{2740053 <nil> byte}) aranges, :frame ^ABEND881(unrecognized Expr type *ast.ArrayType at: &{2740070 <nil> byte}) frame, :info ^ABEND881(unrecognized Expr type *ast.ArrayType at: &{2740087 <nil> byte}) info, :line ^ABEND881(unrecognized Expr type *ast.ArrayType at: &{2740104 <nil> byte}) line, :pubnames ^ABEND881(unrecognized Expr type *ast.ArrayType at: &{2740121 <nil> byte}) pubnames, :ranges ^ABEND881(unrecognized Expr type *ast.ArrayType at: &{2740138 <nil> byte}) ranges, :str ^ABEND881(unrecognized Expr type *ast.ArrayType at: &{2740155 <nil> byte}) str, :abbrevcache ^ABEND881(unrecognized Expr type *ast.MapType at: &{2740192 uint64 abbrevTable}) abbrevCache, :order ^ABEND881(unrecognized Expr type *ast.SelectorExpr at: &{binary ByteOrder}) order, :typecache ^ABEND881(unrecognized Expr type *ast.MapType at: &{2740258 Offset Type}) typeCache, :typesigs ^ABEND881(unrecognized Expr type *ast.MapType at: &{2740287 uint64 0xc001417940}) typeSigs, :unit ^ABEND881(unrecognized Expr type *ast.ArrayType at: &{2740321 <nil> unit}) unit} Error] New
;;   "New returns a new Data object initialized from the given parameters.
;; Rather than calling this function directly, clients should typically use
;; the DWARF method of the File type of the appropriate package debug/elf,
;; debug/macho, or debug/pe.
;; 
;; The []byte arguments are the data from the corresponding debug section
;; in the object file; for example, for an ELF object, abbrev is the contents of
;; the ".debug_abbrev" section."
;;   {:added "1.0"
;;    :go "new(abbrev, aranges, frame, info, line, pubnames, ranges, str)"}
;;   [^ABEND881(unrecognized Expr type *ast.ArrayType at: &{2740840 <nil> byte}) abbrev, ^ABEND881(unrecognized Expr type *ast.ArrayType at: &{2740840 <nil> byte}) aranges, ^ABEND881(unrecognized Expr type *ast.ArrayType at: &{2740840 <nil> byte}) frame, ^ABEND881(unrecognized Expr type *ast.ArrayType at: &{2740840 <nil> byte}) info, ^ABEND881(unrecognized Expr type *ast.ArrayType at: &{2740840 <nil> byte}) line, ^ABEND881(unrecognized Expr type *ast.ArrayType at: &{2740840 <nil> byte}) pubnames, ^ABEND881(unrecognized Expr type *ast.ArrayType at: &{2740840 <nil> byte}) ranges, ^ABEND881(unrecognized Expr type *ast.ArrayType at: &{2740840 <nil> byte}) str])
;; 
JOKER FUNC dwarf_test.Test64Bit has: 
;; (defn Test64Bit
;;   {:added "1.0"
;;    :go "test64Bit(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{2689894 0xc001377540}) t])
;; 
JOKER FUNC dwarf_test.TestLineELFClang has: 
;; (defn TestLineELFClang
;;   {:added "1.0"
;;    :go "testLineELFClang(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{2672657 0xc0013398c0}) t])
;; 
JOKER FUNC dwarf_test.TestLineELFGCC has: 
;; (defn TestLineELFGCC
;;   {:added "1.0"
;;    :go "testLineELFGCC(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{2669717 0xc0013267e0}) t])
;; 
JOKER FUNC dwarf_test.TestLineGCCWindows has: 
;; (defn TestLineGCCWindows
;;   {:added "1.0"
;;    :go "testLineGCCWindows(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{2671024 0xc001327d40}) t])
;; 
JOKER FUNC dwarf_test.TestLineSeek has: 
;; (defn TestLineSeek
;;   {:added "1.0"
;;    :go "testLineSeek(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{2673825 0xc00133eb60}) t])
;; 
JOKER FUNC dwarf_test.TestPathJoin has: 
;; (defn TestPathJoin
;;   {:added "1.0"
;;    :go "testPathJoin(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{2678373 0xc00134d6e0}) t])
;; 
JOKER FUNC dwarf_test.TestRangesSection has: 
;; (defn TestRangesSection
;;   {:added "1.0"
;;    :go "testRangesSection(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{2687761 0xc001372c40}) t])
;; 
JOKER FUNC dwarf_test.TestReaderRanges has: 
;; (defn TestReaderRanges
;;   {:added "1.0"
;;    :go "testReaderRanges(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{2688829 0xc001376220}) t])
;; 
JOKER FUNC dwarf_test.TestReaderSeek has: 
;; (defn TestReaderSeek
;;   {:added "1.0"
;;    :go "testReaderSeek(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{2687405 0xc0013725c0}) t])
;; 
JOKER FUNC dwarf_test.TestSplit has: 
;; (defn TestSplit
;;   {:added "1.0"
;;    :go "testSplit(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{2686377 0xc0013678e0}) t])
;; 
JOKER FUNC dwarf_test.TestTypedefCycle has: 
;; (defn TestTypedefCycle
;;   {:added "1.0"
;;    :go "testTypedefCycle(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{2682665 0xc001356c40}) t])
;; 
JOKER FUNC dwarf_test.TestTypedefsELF has: 
;; (defn TestTypedefsELF
;;   {:added "1.0"
;;    :go "testTypedefsELF(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{2681413 0xc0013533e0}) t])
;; 
JOKER FUNC dwarf_test.TestTypedefsELFDwarf4 has: 
;; (defn TestTypedefsELFDwarf4
;;   {:added "1.0"
;;    :go "testTypedefsELFDwarf4(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{2681626 0xc0013537a0}) t])
;; 
JOKER FUNC dwarf_test.TestTypedefsMachO has: 
;; (defn TestTypedefsMachO
;;   {:added "1.0"
;;    :go "testTypedefsMachO(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{2681514 0xc0013535c0}) t])
;; 
JOKER FUNC ecdsa.BenchmarkKeyGeneration has: 
;; (defn BenchmarkKeyGeneration
;;   {:added "1.0"
;;    :go "benchmarkKeyGeneration(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{1165600 0xc000622860}) b])
;; 
JOKER FUNC ecdsa.BenchmarkSignP256 has: 
;; (defn BenchmarkSignP256
;;   {:added "1.0"
;;    :go "benchmarkSignP256(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{1164656 0xc0008a7240}) b])
;; 
JOKER FUNC ecdsa.BenchmarkSignP384 has: 
;; (defn BenchmarkSignP384
;;   {:added "1.0"
;;    :go "benchmarkSignP384(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{1164955 0xc0008a7940}) b])
;; 
JOKER FUNC ecdsa.BenchmarkVerifyP256 has: 
;; (defn BenchmarkVerifyP256
;;   {:added "1.0"
;;    :go "benchmarkVerifyP256(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{1165256 0xc000622040}) b])
;; 
JOKER FUNC ecdsa.GenerateKey has: 
;; (defn ^[{:d ^ABEND881(unrecognized Expr type *ast.StarExpr at: &{1173462 0xc0009c6c40}) D} Error] GenerateKey
;;   "GenerateKey generates a public and private key pair."
;;   {:added "1.0"
;;    :go "generateKey(c, rand)"}
;;   [^ABEND881(unrecognized Expr type *ast.SelectorExpr at: &{elliptic Curve}) c, ^ABEND881(unrecognized Expr type *ast.SelectorExpr at: &{io Reader}) rand])
;; 
JOKER FUNC ecdsa.Sign has: 
;; (defn ^[r s err] Sign
;;   "Sign signs a hash (which should be the result of hashing a larger message)
;; using the private key, priv. If the hash is longer than the bit-length of the
;; private key's curve order, the hash will be truncated to that length.  It
;; returns the signature as a pair of integers. The security of the private key
;; depends on the entropy of rand."
;;   {:added "1.0"
;;    :go "sign(rand, priv, hash)"}
;;   [^ABEND881(unrecognized Expr type *ast.SelectorExpr at: &{io Reader}) rand, ^ABEND881(unrecognized Expr type *ast.StarExpr at: &{1176725 PrivateKey}) priv, ^ABEND881(unrecognized Expr type *ast.ArrayType at: &{1176743 <nil> byte}) hash])
;; 
JOKER FUNC ecdsa.TestINDCCA has: 
;; (defn TestINDCCA
;;   {:added "1.0"
;;    :go "testINDCCA(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{1168041 0xc00091b900}) t])
;; 
JOKER FUNC ecdsa.TestKeyGeneration has: 
;; (defn TestKeyGeneration
;;   {:added "1.0"
;;    :go "testKeyGeneration(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{1164392 0xc0008a6d40}) t])
;; 
JOKER FUNC ecdsa.TestNegativeInputs has: 
;; (defn TestNegativeInputs
;;   {:added "1.0"
;;    :go "testNegativeInputs(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{1171232 0xc00096b180}) t])
;; 
JOKER FUNC ecdsa.TestNonceSafety has: 
;; (defn TestNonceSafety
;;   {:added "1.0"
;;    :go "testNonceSafety(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{1167193 0xc00091a860}) t])
;; 
JOKER FUNC ecdsa.TestSignAndVerify has: 
;; (defn TestSignAndVerify
;;   {:added "1.0"
;;    :go "testSignAndVerify(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{1166276 0xc0006237a0}) t])
;; 
JOKER FUNC ecdsa.TestVectors has: 
;; (defn TestVectors
;;   {:added "1.0"
;;    :go "testVectors(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{1168390 0xc000926160}) t])
;; 
JOKER FUNC ecdsa.TestZeroHashSignature has: 
;; (defn TestZeroHashSignature
;;   {:added "1.0"
;;    :go "testZeroHashSignature(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{1171470 0xc00096b600}) t])
;; 
JOKER FUNC ecdsa.Verify has: 
;; (defn ^ABEND042(cannot find typename ecdsa.bool) Verify
;;   "Verify verifies the signature in r, s of hash using the public key, pub. Its
;; return value records whether the signature is valid."
;;   {:added "1.0"
;;    :go "verify(pub, hash, r, s)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{1178491 PublicKey}) pub, ^ABEND881(unrecognized Expr type *ast.ArrayType at: &{1178508 <nil> byte}) hash, ^ABEND881(unrecognized Expr type *ast.StarExpr at: &{1178521 0xc0009ddaa0}) r, ^ABEND881(unrecognized Expr type *ast.StarExpr at: &{1178521 0xc0009ddaa0}) s])
;; 
JOKER FUNC ecdsa_test.Example has: 
;; (defn Example
;;   {:added "1.0"
;;    :go "example()"}
;;   [])
;; 
JOKER FUNC elf.NewFile has: 
;; (defn ^[{:sections ^ABEND881(unrecognized Expr type *ast.ArrayType at: &{2883331 <nil> 0xc0015f2d60}) Sections, :progs ^ABEND881(unrecognized Expr type *ast.ArrayType at: &{2883353 <nil> 0xc0015f2dc0}) Progs, :closer ^ABEND881(unrecognized Expr type *ast.SelectorExpr at: &{io Closer}) closer, :gnuneed ^ABEND881(unrecognized Expr type *ast.ArrayType at: &{2883393 <nil> verneed}) gnuNeed, :gnuversym ^ABEND881(unrecognized Expr type *ast.ArrayType at: &{2883414 <nil> byte}) gnuVersym} Error] NewFile
;;   "NewFile creates a new File for accessing an ELF binary in an underlying reader.
;; The ELF binary is expected to start at position 0 in the ReaderAt."
;;   {:added "1.0"
;;    :go "newFile(r)"}
;;   [^ABEND881(unrecognized Expr type *ast.SelectorExpr at: &{io ReaderAt}) r])
;; 
JOKER FUNC elf.Open has: 
;; (defn ^[{:sections ^ABEND881(unrecognized Expr type *ast.ArrayType at: &{2883331 <nil> 0xc0015f2d60}) Sections, :progs ^ABEND881(unrecognized Expr type *ast.ArrayType at: &{2883353 <nil> 0xc0015f2dc0}) Progs, :closer ^ABEND881(unrecognized Expr type *ast.SelectorExpr at: &{io Closer}) closer, :gnuneed ^ABEND881(unrecognized Expr type *ast.ArrayType at: &{2883393 <nil> verneed}) gnuNeed, :gnuversym ^ABEND881(unrecognized Expr type *ast.ArrayType at: &{2883414 <nil> byte}) gnuVersym} Error] Open
;;   "Open opens the named file using os.Open and prepares it for use as an ELF binary."
;;   {:added "1.0"
;;    :go "open(name)"}
;;   [^String name])
;; 
JOKER FUNC elf.R_INFO has: 
;; (defn ^ABEND042(cannot find typename elf.uint64) R_INFO
;;   {:added "1.0"
;;    :go "r_INFO(sym, typ)"}
;;   [sym, typ])
;; 
JOKER FUNC elf.R_INFO32 has: 
;; (defn ^ABEND042(cannot find typename elf.uint32) R_INFO32
;;   {:added "1.0"
;;    :go "r_INFO32(sym, typ)"}
;;   [sym, typ])
;; 
JOKER FUNC elf.R_SYM32 has: 
;; (defn ^ABEND042(cannot find typename elf.uint32) R_SYM32
;;   {:added "1.0"
;;    :go "r_SYM32(info)"}
;;   [info])
;; 
JOKER FUNC elf.R_SYM64 has: 
;; (defn ^ABEND042(cannot find typename elf.uint32) R_SYM64
;;   {:added "1.0"
;;    :go "r_SYM64(info)"}
;;   [info])
;; 
JOKER FUNC elf.R_TYPE32 has: 
;; (defn ^ABEND042(cannot find typename elf.uint32) R_TYPE32
;;   {:added "1.0"
;;    :go "r_TYPE32(info)"}
;;   [info])
;; 
JOKER FUNC elf.R_TYPE64 has: 
;; (defn ^ABEND042(cannot find typename elf.uint32) R_TYPE64
;;   {:added "1.0"
;;    :go "r_TYPE64(info)"}
;;   [info])
;; 
JOKER FUNC elf.ST_BIND has: 
(defn ^Int ST_BIND
  {:added "1.0"
   :go "sT_BIND(info)"}
  [info])

JOKER FUNC elf.ST_INFO has: 
;; (defn ^ABEND042(cannot find typename elf.uint8) ST_INFO
;;   {:added "1.0"
;;    :go "sT_INFO(bind, typ)"}
;;   [bind, typ])
;; 
JOKER FUNC elf.ST_TYPE has: 
(defn ^Int ST_TYPE
  {:added "1.0"
   :go "sT_TYPE(info)"}
  [info])

JOKER FUNC elf.ST_VISIBILITY has: 
(defn ^Int ST_VISIBILITY
  {:added "1.0"
   :go "sT_VISIBILITY(other)"}
  [other])

JOKER FUNC elf.TestCompressedDWARF has: 
;; (defn TestCompressedDWARF
;;   {:added "1.0"
;;    :go "testCompressedDWARF(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{2947628 0xc0016f2700}) t])
;; 
JOKER FUNC elf.TestCompressedSection has: 
;; (defn TestCompressedSection
;;   {:added "1.0"
;;    :go "testCompressedSection(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{2948185 0xc0016f2f80}) t])
;; 
JOKER FUNC elf.TestDWARFRelocations has: 
;; (defn TestDWARFRelocations
;;   {:added "1.0"
;;    :go "testDWARFRelocations(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{2946840 0xc0016ef7c0}) t])
;; 
JOKER FUNC elf.TestNames has: 
;; (defn TestNames
;;   {:added "1.0"
;;    :go "testNames(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{2882127 0xc0015edfc0}) t])
;; 
JOKER FUNC elf.TestNoSectionOverlaps has: 
;; (defn TestNoSectionOverlaps
;;   {:added "1.0"
;;    :go "testNoSectionOverlaps(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{2950507 0xc0016fc6e0}) t])
;; 
JOKER FUNC elf.TestOpen has: 
;; (defn TestOpen
;;   {:added "1.0"
;;    :go "testOpen(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{2930739 0xc0016c4a60}) t])
;; 
JOKER FUNC elf.TestSymbols has: 
;; (defn TestSymbols
;;   "TODO: remove duplicate code"
;;   {:added "1.0"
;;    :go "testSymbols(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{2867746 0xc0015bb8e0}) t])
;; 
JOKER FUNC elliptic.BenchmarkBaseMult has: 
;; (defn BenchmarkBaseMult
;;   {:added "1.0"
;;    :go "benchmarkBaseMult(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{1197704 0xc0009e6380}) b])
;; 
JOKER FUNC elliptic.BenchmarkBaseMultP256 has: 
;; (defn BenchmarkBaseMultP256
;;   {:added "1.0"
;;    :go "benchmarkBaseMultP256(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{1197983 0xc0009e6a40}) b])
;; 
JOKER FUNC elliptic.BenchmarkScalarMultP256 has: 
;; (defn BenchmarkScalarMultP256
;;   {:added "1.0"
;;    :go "benchmarkScalarMultP256(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{1198264 0xc0009e7100}) b])
;; 
JOKER FUNC elliptic.GenerateKey has: 
;; (defn ^[priv x y err] GenerateKey
;;   "GenerateKey returns a public/private key pair. The private key is
;; generated using the given reader, which must return random data."
;;   {:added "1.0"
;;    :go "generateKey(curve, rand)"}
;;   [curve, ^ABEND881(unrecognized Expr type *ast.SelectorExpr at: &{io Reader}) rand])
;; 
JOKER FUNC elliptic.Marshal has: 
;; (defn ^[ABEND042(cannot find typename elliptic.byte)] Marshal
;;   "Marshal converts a point into the uncompressed form specified in section 4.3.6 of ANSI X9.62."
;;   {:added "1.0"
;;    :go "marshal(curve, x, y)"}
;;   [curve, ^ABEND881(unrecognized Expr type *ast.StarExpr at: &{1208958 0xc00086f7c0}) x, ^ABEND881(unrecognized Expr type *ast.StarExpr at: &{1208958 0xc00086f7c0}) y])
;; 
JOKER FUNC elliptic.P224 has: 
;; (defn ^ABEND881(unrecognized Expr type *ast.InterfaceType at: &{1201578 0xc000724960 false}) P224
;;   "P224 returns a Curve which implements P-224 (see FIPS 186-3, section D.2.2).
;; 
;; The cryptographic operations are implemented using constant-time algorithms."
;;   {:added "1.0"
;;    :go "p224()"}
;;   [])
;; 
JOKER FUNC elliptic.P256 has: 
;; (defn ^ABEND881(unrecognized Expr type *ast.InterfaceType at: &{1201578 0xc000724960 false}) P256
;;   "P256 returns a Curve which implements P-256 (see FIPS 186-3, section D.2.3)
;; 
;; The cryptographic operations are implemented using constant-time algorithms."
;;   {:added "1.0"
;;    :go "p256()"}
;;   [])
;; 
JOKER FUNC elliptic.P384 has: 
;; (defn ^ABEND881(unrecognized Expr type *ast.InterfaceType at: &{1201578 0xc000724960 false}) P384
;;   "P384 returns a Curve which implements P-384 (see FIPS 186-3, section D.2.4)
;; 
;; The cryptographic operations do not use constant-time algorithms."
;;   {:added "1.0"
;;    :go "p384()"}
;;   [])
;; 
JOKER FUNC elliptic.P521 has: 
;; (defn ^ABEND881(unrecognized Expr type *ast.InterfaceType at: &{1201578 0xc000724960 false}) P521
;;   "P521 returns a Curve which implements P-521 (see FIPS 186-3, section D.2.5)
;; 
;; The cryptographic operations do not use constant-time algorithms."
;;   {:added "1.0"
;;    :go "p521()"}
;;   [])
;; 
JOKER FUNC elliptic.TestBaseMult has: 
;; (defn TestBaseMult
;;   {:added "1.0"
;;    :go "testBaseMult(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{1192660 0xc000882840}) t])
;; 
JOKER FUNC elliptic.TestCombinedMult has: 
;; (defn TestCombinedMult
;;   {:added "1.0"
;;    :go "testCombinedMult(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{1196309 0xc0009483e0}) t])
;; 
JOKER FUNC elliptic.TestFuzz has: 
;; (defn TestFuzz
;;   {:added "1.0"
;;    :go "testFuzz(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{1180782 0xc00068eba0}) t])
;; 
JOKER FUNC elliptic.TestGenericBaseMult has: 
;; (defn TestGenericBaseMult
;;   {:added "1.0"
;;    :go "testGenericBaseMult(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{1193115 0xc0008833a0}) t])
;; 
JOKER FUNC elliptic.TestInfinity has: 
;; (defn TestInfinity
;;   {:added "1.0"
;;    :go "testInfinity(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{1195250 0xc00093e9e0}) t])
;; 
JOKER FUNC elliptic.TestMarshal has: 
;; (defn TestMarshal
;;   {:added "1.0"
;;    :go "testMarshal(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{1198557 0xc0009e7880}) t])
;; 
JOKER FUNC elliptic.TestOffCurve has: 
;; (defn TestOffCurve
;;   {:added "1.0"
;;    :go "testOffCurve(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{1182141 0xc000640200}) t])
;; 
JOKER FUNC elliptic.TestOnCurve has: 
;; (defn TestOnCurve
;;   {:added "1.0"
;;    :go "testOnCurve(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{1182008 0xc00068fe00}) t])
;; 
JOKER FUNC elliptic.TestP224Overflow has: 
;; (defn TestP224Overflow
;;   {:added "1.0"
;;    :go "testP224Overflow(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{1198941 0xc000a300c0}) t])
;; 
JOKER FUNC elliptic.TestP256BaseMult has: 
;; (defn TestP256BaseMult
;;   {:added "1.0"
;;    :go "testP256BaseMult(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{1193662 0xc000883f80}) t])
;; 
JOKER FUNC elliptic.TestP256Mult has: 
;; (defn TestP256Mult
;;   {:added "1.0"
;;    :go "testP256Mult(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{1194274 0xc000912e60}) t])
;; 
JOKER FUNC elliptic.TestToFromBig has: 
;; (defn TestToFromBig
;;   {:added "1.0"
;;    :go "testToFromBig(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{1180178 0xc00068e180}) t])
;; 
JOKER FUNC elliptic.TestUnmarshalToLargeCoordinates has: 
;; (defn TestUnmarshalToLargeCoordinates
;;   "See https://golang.org/issues/20482"
;;   {:added "1.0"
;;    :go "testUnmarshalToLargeCoordinates(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{1199386 0xc000a305a0}) t])
;; 
JOKER FUNC elliptic.Unmarshal has: 
;; (defn ^[x y] Unmarshal
;;   "Unmarshal converts a point, serialized by Marshal, into an x, y pair.
;; It is an error if the point is not in uncompressed form or is not on the curve.
;; On error, x = nil."
;;   {:added "1.0"
;;    :go "unmarshal(curve, data)"}
;;   [curve, ^ABEND881(unrecognized Expr type *ast.ArrayType at: &{1209449 <nil> byte}) data])
;; 
JOKER FUNC errors.New has: 
(defn ^Error New
  "New returns an error that formats as the given text."
  {:added "1.0"
   :go "new(text)"}
  [^String text])

JOKER FUNC errors_test.Example has: 
;; (defn Example
;;   {:added "1.0"
;;    :go "example()"}
;;   [])
;; 
JOKER FUNC errors_test.ExampleNew has: 
;; (defn ExampleNew
;;   {:added "1.0"
;;    :go "exampleNew()"}
;;   [])
;; 
JOKER FUNC errors_test.ExampleNew_errorf has: 
;; (defn ExampleNew_errorf
;;   "The fmt package's Errorf function lets us use the package's formatting
;; features to create descriptive error messages."
;;   {:added "1.0"
;;    :go "exampleNew_errorf()"}
;;   [])
;; 
JOKER FUNC errors_test.TestErrorMethod has: 
;; (defn TestErrorMethod
;;   {:added "1.0"
;;    :go "testErrorMethod(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{4099845 0xc00164d3c0}) t])
;; 
JOKER FUNC errors_test.TestNewEqual has: 
;; (defn TestNewEqual
;;   {:added "1.0"
;;    :go "testNewEqual(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{4099453 0xc00164cd20}) t])
;; 
JOKER FUNC exec.Command has: 
;; (defn ^{:path ^String Path, :args ^ABEND881(unrecognized Expr type *ast.ArrayType at: &{10135556 <nil> string}) Args, :env ^ABEND881(unrecognized Expr type *ast.ArrayType at: &{10135860 <nil> string}) Env, :dir ^String Dir, :stdin ^ABEND881(unrecognized Expr type *ast.SelectorExpr at: &{io Reader}) Stdin, :stdout ^ABEND881(unrecognized Expr type *ast.SelectorExpr at: &{io Writer}) Stdout, :stderr ^ABEND881(unrecognized Expr type *ast.SelectorExpr at: &{io Writer}) Stderr, :extrafiles ^ABEND881(unrecognized Expr type *ast.ArrayType at: &{10137662 <nil> 0xc0025e8bc0}) ExtraFiles, :sysprocattr ^ABEND881(unrecognized Expr type *ast.StarExpr at: &{10137826 0xc0025e8f20}) SysProcAttr, :process ^ABEND881(unrecognized Expr type *ast.StarExpr at: &{10137910 0xc0025e9860}) Process, :processstate ^ABEND881(unrecognized Expr type *ast.StarExpr at: &{10138043 0xc0025e9aa0}) ProcessState, :ctx ^ABEND881(unrecognized Expr type *ast.SelectorExpr at: &{context Context}) ctx, :lookpatherr lookPathErr, :finished finished, :childfiles ^ABEND881(unrecognized Expr type *ast.ArrayType at: &{10138246 <nil> 0xc0025760e0}) childFiles, :closeafterstart ^ABEND881(unrecognized Expr type *ast.ArrayType at: &{10138274 <nil> 0xc002576160}) closeAfterStart, :closeafterwait ^ABEND881(unrecognized Expr type *ast.ArrayType at: &{10138303 <nil> 0xc0025761e0}) closeAfterWait, :goroutine ^ABEND881(unrecognized Expr type *ast.ArrayType at: &{10138332 <nil> 0xc002576240}) goroutine, :errch ^ABEND881(unrecognized Expr type *ast.ChanType at: &{10138364 0 3 error}) errch, :waitdone ^ABEND881(unrecognized Expr type *ast.ChanType at: &{10138418 0 3 0xc002576300}) waitDone} Command
;;   "Command returns the Cmd struct to execute the named program with
;; the given arguments.
;; 
;; It sets only the Path and Args in the returned structure.
;; 
;; If name contains no path separators, Command uses LookPath to
;; resolve name to a complete path if possible. Otherwise it uses name
;; directly as Path.
;; 
;; The returned Cmd's Args field is constructed from the command name
;; followed by the elements of arg, so arg should not include the
;; command name itself. For example, Command("echo", "hello").
;; Args[0] is always name, not the possibly resolved Path."
;;   {:added "1.0"
;;    :go "command(name, arg)"}
;;   [^String name, ^ABEND881(unrecognized Expr type *ast.Ellipsis at: &{10139042 string}) arg])
;; 
JOKER FUNC exec.CommandContext has: 
;; (defn ^{:path ^String Path, :args ^ABEND881(unrecognized Expr type *ast.ArrayType at: &{10135556 <nil> string}) Args, :env ^ABEND881(unrecognized Expr type *ast.ArrayType at: &{10135860 <nil> string}) Env, :dir ^String Dir, :stdin ^ABEND881(unrecognized Expr type *ast.SelectorExpr at: &{io Reader}) Stdin, :stdout ^ABEND881(unrecognized Expr type *ast.SelectorExpr at: &{io Writer}) Stdout, :stderr ^ABEND881(unrecognized Expr type *ast.SelectorExpr at: &{io Writer}) Stderr, :extrafiles ^ABEND881(unrecognized Expr type *ast.ArrayType at: &{10137662 <nil> 0xc0025e8bc0}) ExtraFiles, :sysprocattr ^ABEND881(unrecognized Expr type *ast.StarExpr at: &{10137826 0xc0025e8f20}) SysProcAttr, :process ^ABEND881(unrecognized Expr type *ast.StarExpr at: &{10137910 0xc0025e9860}) Process, :processstate ^ABEND881(unrecognized Expr type *ast.StarExpr at: &{10138043 0xc0025e9aa0}) ProcessState, :ctx ^ABEND881(unrecognized Expr type *ast.SelectorExpr at: &{context Context}) ctx, :lookpatherr lookPathErr, :finished finished, :childfiles ^ABEND881(unrecognized Expr type *ast.ArrayType at: &{10138246 <nil> 0xc0025760e0}) childFiles, :closeafterstart ^ABEND881(unrecognized Expr type *ast.ArrayType at: &{10138274 <nil> 0xc002576160}) closeAfterStart, :closeafterwait ^ABEND881(unrecognized Expr type *ast.ArrayType at: &{10138303 <nil> 0xc0025761e0}) closeAfterWait, :goroutine ^ABEND881(unrecognized Expr type *ast.ArrayType at: &{10138332 <nil> 0xc002576240}) goroutine, :errch ^ABEND881(unrecognized Expr type *ast.ChanType at: &{10138364 0 3 error}) errch, :waitdone ^ABEND881(unrecognized Expr type *ast.ChanType at: &{10138418 0 3 0xc002576300}) waitDone} CommandContext
;;   "CommandContext is like Command but includes a context.
;; 
;; The provided context is used to kill the process (by calling
;; os.Process.Kill) if the context becomes done before the command
;; completes on its own."
;;   {:added "1.0"
;;    :go "commandContext(ctx, name, arg)"}
;;   [^ABEND881(unrecognized Expr type *ast.SelectorExpr at: &{context Context}) ctx, ^String name, ^ABEND881(unrecognized Expr type *ast.Ellipsis at: &{10139560 string}) arg])
;; 
JOKER FUNC exec.LookPath has: 
(defn ^[String Error] LookPath
  "LookPath searches for an executable named file in the
directories named by the PATH environment variable.
If file contains a slash, it is tried directly and the PATH is not consulted.
The result may be an absolute path or a path relative to the current directory."
  {:added "1.0"
   :go "lookPath(file)"}
  [^String file])

JOKER FUNC exec.TestDedupEnv has: 
;; (defn TestDedupEnv
;;   {:added "1.0"
;;    :go "testDedupEnv(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{10191660 0xc001b959e0}) t])
;; 
JOKER FUNC exec.TestLookPathNotFound has: 
;; (defn TestLookPathNotFound
;;   {:added "1.0"
;;    :go "testLookPathNotFound(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{10193111 0xc001a5c3e0}) t])
;; 
JOKER FUNC exec.TestLookPathUnixEmptyPath has: 
;; (defn TestLookPathUnixEmptyPath
;;   {:added "1.0"
;;    :go "testLookPathUnixEmptyPath(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{10158823 0xc0014848c0}) t])
;; 
JOKER FUNC exec.TestPrefixSuffixSaver has: 
;; (defn TestPrefixSuffixSaver
;;   {:added "1.0"
;;    :go "testPrefixSuffixSaver(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{10154243 0xc001aba300}) t])
;; 
JOKER FUNC exec_test.ExampleCmd_CombinedOutput has: 
;; (defn ExampleCmd_CombinedOutput
;;   {:added "1.0"
;;    :go "exampleCmd_CombinedOutput()"}
;;   [])
;; 
JOKER FUNC exec_test.ExampleCmd_Output has: 
;; (defn ExampleCmd_Output
;;   {:added "1.0"
;;    :go "exampleCmd_Output()"}
;;   [])
;; 
JOKER FUNC exec_test.ExampleCmd_Run has: 
;; (defn ExampleCmd_Run
;;   {:added "1.0"
;;    :go "exampleCmd_Run()"}
;;   [])
;; 
JOKER FUNC exec_test.ExampleCmd_Start has: 
;; (defn ExampleCmd_Start
;;   {:added "1.0"
;;    :go "exampleCmd_Start()"}
;;   [])
;; 
JOKER FUNC exec_test.ExampleCmd_StderrPipe has: 
;; (defn ExampleCmd_StderrPipe
;;   {:added "1.0"
;;    :go "exampleCmd_StderrPipe()"}
;;   [])
;; 
JOKER FUNC exec_test.ExampleCmd_StdinPipe has: 
;; (defn ExampleCmd_StdinPipe
;;   {:added "1.0"
;;    :go "exampleCmd_StdinPipe()"}
;;   [])
;; 
JOKER FUNC exec_test.ExampleCmd_StdoutPipe has: 
;; (defn ExampleCmd_StdoutPipe
;;   {:added "1.0"
;;    :go "exampleCmd_StdoutPipe()"}
;;   [])
;; 
JOKER FUNC exec_test.ExampleCommand has: 
;; (defn ExampleCommand
;;   {:added "1.0"
;;    :go "exampleCommand()"}
;;   [])
;; 
JOKER FUNC exec_test.ExampleCommandContext has: 
;; (defn ExampleCommandContext
;;   {:added "1.0"
;;    :go "exampleCommandContext()"}
;;   [])
;; 
JOKER FUNC exec_test.ExampleCommand_environment has: 
;; (defn ExampleCommand_environment
;;   {:added "1.0"
;;    :go "exampleCommand_environment()"}
;;   [])
;; 
JOKER FUNC exec_test.ExampleLookPath has: 
;; (defn ExampleLookPath
;;   {:added "1.0"
;;    :go "exampleLookPath()"}
;;   [])
;; 
JOKER FUNC exec_test.TestCatGoodAndBadFile has: 
;; (defn TestCatGoodAndBadFile
;;   {:added "1.0"
;;    :go "testCatGoodAndBadFile(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{10164161 0xc0012baac0}) t])
;; 
JOKER FUNC exec_test.TestCatStdin has: 
;; (defn TestCatStdin
;;   {:added "1.0"
;;    :go "testCatStdin(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{10163431 0xc00127e480}) t])
;; 
JOKER FUNC exec_test.TestClosePipeOnCopyError has: 
;; (defn TestClosePipeOnCopyError
;;   {:added "1.0"
;;    :go "testClosePipeOnCopyError(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{10186118 0xc001578f40}) t])
;; 
JOKER FUNC exec_test.TestCommandRelativeName has: 
;; (defn TestCommandRelativeName
;;   {:added "1.0"
;;    :go "testCommandRelativeName(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{10162559 0xc000da82a0}) t])
;; 
JOKER FUNC exec_test.TestContext has: 
;; (defn TestContext
;;   {:added "1.0"
;;    :go "testContext(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{10186990 0xc0013b0760}) t])
;; 
JOKER FUNC exec_test.TestContextCancel has: 
;; (defn TestContextCancel
;;   {:added "1.0"
;;    :go "testContextCancel(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{10187840 0xc001b89c00}) t])
;; 
JOKER FUNC exec_test.TestCredentialNoSetGroups has: 
;; (defn TestCredentialNoSetGroups
;;   {:added "1.0"
;;    :go "testCredentialNoSetGroups(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{10189906 0xc001a70120}) t])
;; 
JOKER FUNC exec_test.TestDedupEnvEcho has: 
;; (defn TestDedupEnvEcho
;;   "test that environment variables are de-duped."
;;   {:added "1.0"
;;    :go "testDedupEnvEcho(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{10189240 0xc001a69280}) t])
;; 
JOKER FUNC exec_test.TestEcho has: 
;; (defn TestEcho
;;   {:added "1.0"
;;    :go "testEcho(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{10162304 0xc0009bdf20}) t])
;; 
JOKER FUNC exec_test.TestEchoFileRace has: 
;; (defn TestEchoFileRace
;;   {:added "1.0"
;;    :go "testEchoFileRace(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{10163758 0xc00127f6a0}) t])
;; 
JOKER FUNC exec_test.TestExitStatus has: 
;; (defn TestExitStatus
;;   {:added "1.0"
;;    :go "testExitStatus(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{10165104 0xc0012c0ac0}) t])
;; 
JOKER FUNC exec_test.TestExtraFiles has: 
;; (defn TestExtraFiles
;;   {:added "1.0"
;;    :go "testExtraFiles(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{10176128 0xc0014910c0}) t])
;; 
JOKER FUNC exec_test.TestExtraFilesFDShuffle has: 
;; (defn TestExtraFilesFDShuffle
;;   {:added "1.0"
;;    :go "testExtraFilesFDShuffle(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{10172982 0xc001464680}) t])
;; 
JOKER FUNC exec_test.TestExtraFilesRace has: 
;; (defn TestExtraFilesRace
;;   {:added "1.0"
;;    :go "testExtraFilesRace(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{10178103 0xc0014cd500}) t])
;; 
JOKER FUNC exec_test.TestHelperProcess has: 
;; (defn TestHelperProcess
;;   "TestHelperProcess isn't a real test. It's used as a helper process
;; for TestParameterRun."
;;   {:added "1.0"
;;    :go "testHelperProcess()"}
;;   [])
;; 
JOKER FUNC exec_test.TestIgnorePipeErrorOnSuccess has: 
;; (defn TestIgnorePipeErrorOnSuccess
;;   "Issue 9173: ignore stdin pipe writes if the program completes successfully."
;;   {:added "1.0"
;;    :go "testIgnorePipeErrorOnSuccess(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{10185290 0xc001c307a0}) t])
;; 
JOKER FUNC exec_test.TestNoExistExecutable has: 
;; (defn TestNoExistExecutable
;;   {:added "1.0"
;;    :go "testNoExistExecutable(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{10164900 0xc0012bbfe0}) t])
;; 
JOKER FUNC exec_test.TestOutputStderrCapture has: 
;; (defn TestOutputStderrCapture
;;   {:added "1.0"
;;    :go "testOutputStderrCapture(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{10186628 0xc000e6f4e0}) t])
;; 
JOKER FUNC exec_test.TestPipeLookPathLeak has: 
;; (defn TestPipeLookPathLeak
;;   "Issue 5071"
;;   {:added "1.0"
;;    :go "testPipeLookPathLeak(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{10169122 0xc00131e200}) t])
;; 
JOKER FUNC exec_test.TestPipes has: 
;; (defn TestPipes
;;   {:added "1.0"
;;    :go "testPipes(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{10165638 0xc0012c9040}) t])
;; 
JOKER FUNC exec_test.TestStdinClose has: 
;; (defn TestStdinClose
;;   "Issue 6270."
;;   {:added "1.0"
;;    :go "testStdinClose(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{10166990 0xc0012d58c0}) t])
;; 
JOKER FUNC exec_test.TestStdinCloseRace has: 
;; (defn TestStdinCloseRace
;;   "Issue 17647.
;; It used to be the case that TestStdinClose, above, would fail when
;; run under the race detector. This test is a variant of TestStdinClose
;; that also used to fail when run under the race detector.
;; This test is run by cmd/dist under the race detector to verify that
;; the race detector no longer reports any problems."
;;   {:added "1.0"
;;    :go "testStdinCloseRace(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{10168010 0xc0012e4c60}) t])
;; 
JOKER FUNC exec_test.TestWaitid has: 
;; (defn TestWaitid
;;   "For issue #19314: make sure that SIGSTOP does not cause the process
;; to appear done."
;;   {:added "1.0"
;;    :go "testWaitid(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{10190731 0xc001b94ae0}) t])
;; 
JOKER FUNC expvar.BenchmarkFloatAdd has: 
;; (defn BenchmarkFloatAdd
;;   {:added "1.0"
;;    :go "benchmarkFloatAdd(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{4102444 0xc001640180}) b])
;; 
JOKER FUNC expvar.BenchmarkFloatSet has: 
;; (defn BenchmarkFloatSet
;;   {:added "1.0"
;;    :go "benchmarkFloatSet(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{4102578 0xc0016404c0}) b])
;; 
JOKER FUNC expvar.BenchmarkIntAdd has: 
;; (defn BenchmarkIntAdd
;;   {:added "1.0"
;;    :go "benchmarkIntAdd(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{4101654 0xc001647060}) b])
;; 
JOKER FUNC expvar.BenchmarkIntSet has: 
;; (defn BenchmarkIntSet
;;   {:added "1.0"
;;    :go "benchmarkIntSet(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{4101782 0xc0016473c0}) b])
;; 
JOKER FUNC expvar.BenchmarkMapAddDifferent has: 
;; (defn BenchmarkMapAddDifferent
;;   {:added "1.0"
;;    :go "benchmarkMapAddDifferent(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{4106056 0xc001636d00}) b])
;; 
JOKER FUNC expvar.BenchmarkMapAddDifferentSteadyState has: 
;; (defn BenchmarkMapAddDifferentSteadyState
;;   {:added "1.0"
;;    :go "benchmarkMapAddDifferentSteadyState(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{4106710 0xc001637c60}) b])
;; 
JOKER FUNC expvar.BenchmarkMapAddSame has: 
;; (defn BenchmarkMapAddSame
;;   {:added "1.0"
;;    :go "benchmarkMapAddSame(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{4105843 0xc0016366e0}) b])
;; 
JOKER FUNC expvar.BenchmarkMapAddSameSteadyState has: 
;; (defn BenchmarkMapAddSameSteadyState
;;   {:added "1.0"
;;    :go "benchmarkMapAddSameSteadyState(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{4106545 0xc001637820}) b])
;; 
JOKER FUNC expvar.BenchmarkMapSet has: 
;; (defn BenchmarkMapSet
;;   {:added "1.0"
;;    :go "benchmarkMapSet(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{4104988 0xc0016391e0}) b])
;; 
JOKER FUNC expvar.BenchmarkMapSetDifferent has: 
;; (defn BenchmarkMapSetDifferent
;;   {:added "1.0"
;;    :go "benchmarkMapSetDifferent(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{4105159 0xc001639620}) b])
;; 
JOKER FUNC expvar.BenchmarkMapSetString has: 
;; (defn BenchmarkMapSetString
;;   {:added "1.0"
;;    :go "benchmarkMapSetString(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{4105652 0xc001636200}) b])
;; 
JOKER FUNC expvar.BenchmarkRealworldExpvarUsage has: 
;; (defn BenchmarkRealworldExpvarUsage
;;   {:added "1.0"
;;    :go "benchmarkRealworldExpvarUsage(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{4108121 0xc001626500}) b])
;; 
JOKER FUNC expvar.BenchmarkStringSet has: 
;; (defn BenchmarkStringSet
;;   {:added "1.0"
;;    :go "benchmarkStringSet(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{4103353 0xc001641360}) b])
;; 
JOKER FUNC expvar.Do has: 
;; (defn Do
;;   "Do calls f for each exported variable.
;; The global variable map is locked during the iteration,
;; but existing entries may be concurrently updated."
;;   {:added "1.0"
;;    :go "do(f)"}
;;   [^ABEND881(unrecognized Expr type *ast.FuncType at: &{4117206 0xc001622e40 <nil>}) f])
;; 
JOKER FUNC expvar.Get has: 
;; (defn ^ABEND881(unrecognized Expr type *ast.InterfaceType at: &{4111551 0xc00163e5d0 false}) Get
;;   "Get retrieves a named exported variable. It returns nil if the name has
;; not been registered."
;;   {:added "1.0"
;;    :go "get(name)"}
;;   [^String name])
;; 
JOKER FUNC expvar.Handler has: 
;; (defn ^ABEND881(unrecognized Expr type *ast.SelectorExpr at: &{http Handler}) Handler
;;   "Handler returns the expvar HTTP Handler.
;; 
;; This is only needed to install the handler in a non-standard location."
;;   {:added "1.0"
;;    :go "handler()"}
;;   [])
;; 
JOKER FUNC expvar.NewFloat has: 
(defn ^{:f f} NewFloat
  {:added "1.0"
   :go "newFloat(name)"}
  [^String name])

JOKER FUNC expvar.NewInt has: 
(defn ^{:i i} NewInt
  {:added "1.0"
   :go "newInt(name)"}
  [^String name])

JOKER FUNC expvar.NewMap has: 
;; (defn ^{:m ^ABEND881(unrecognized Expr type *ast.SelectorExpr at: &{sync Map}) m, :keysmu ^ABEND881(unrecognized Expr type *ast.SelectorExpr at: &{sync RWMutex}) keysMu, :keys ^ABEND881(unrecognized Expr type *ast.ArrayType at: &{4113000 <nil> string}) keys} NewMap
;;   {:added "1.0"
;;    :go "newMap(name)"}
;;   [^String name])
;; 
JOKER FUNC expvar.NewString has: 
;; (defn ^{:s ^ABEND881(unrecognized Expr type *ast.SelectorExpr at: &{atomic Value}) s} NewString
;;   {:added "1.0"
;;    :go "newString(name)"}
;;   [^String name])
;; 
JOKER FUNC expvar.Publish has: 
;; (defn Publish
;;   "Publish declares a named exported variable. This should be called from a
;; package's init function when it creates its Vars. If the name is already
;; registered then this will log.Panic."
;;   {:added "1.0"
;;    :go "publish(name, v)"}
;;   [^String name, v])
;; 
JOKER FUNC expvar.RemoveAll has: 
;; (defn RemoveAll
;;   "RemoveAll removes all exported variables.
;; This is for tests only."
;;   {:added "1.0"
;;    :go "removeAll()"}
;;   [])
;; 
JOKER FUNC expvar.TestFloat has: 
;; (defn TestFloat
;;   {:added "1.0"
;;    :go "testFloat(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{4101904 0xc001647720}) t])
;; 
JOKER FUNC expvar.TestFunc has: 
;; (defn TestFunc
;;   {:added "1.0"
;;    :go "testFunc(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{4107175 0xc00162c800}) t])
;; 
JOKER FUNC expvar.TestHandler has: 
;; (defn TestHandler
;;   {:added "1.0"
;;    :go "testHandler(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{4107604 0xc00162d1c0}) t])
;; 
JOKER FUNC expvar.TestInt has: 
;; (defn TestInt
;;   {:added "1.0"
;;    :go "testInt(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{4101140 0xc0016465c0}) t])
;; 
JOKER FUNC expvar.TestMapCounter has: 
;; (defn TestMapCounter
;;   {:added "1.0"
;;    :go "testMapCounter(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{4103941 0xc001641f00}) t])
;; 
JOKER FUNC expvar.TestMapInit has: 
;; (defn TestMapInit
;;   {:added "1.0"
;;    :go "testMapInit(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{4103484 0xc0016416a0}) t])
;; 
JOKER FUNC expvar.TestNil has: 
;; (defn TestNil
;;   {:added "1.0"
;;    :go "testNil(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{4101016 0xc001646320}) t])
;; 
JOKER FUNC expvar.TestString has: 
;; (defn TestString
;;   {:added "1.0"
;;    :go "testString(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{4102705 0xc001640820}) t])
;; 
JOKER FUNC fcgi.ProcessEnv has: 
;; (defn ^ABEND881(unrecognized Expr type *ast.MapType at: &{9536674 string string}) ProcessEnv
;;   "ProcessEnv returns FastCGI environment variables associated with the request r
;; for which no effort was made to be included in the request itself - the data
;; is hidden in the request's context. As an example, if REMOTE_USER is set for a
;; request, it will not be found anywhere in r, but it will be included in
;; ProcessEnv's response (via r's context)."
;;   {:added "1.0"
;;    :go "processEnv(r)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{9536659 0xc00452b300}) r])
;; 
JOKER FUNC fcgi.Serve has: 
;; (defn ^Error Serve
;;   "Serve accepts incoming FastCGI connections on the listener l, creating a new
;; goroutine for each. The goroutine reads requests and then calls handler
;; to reply to them.
;; If l is nil, Serve accepts connections from os.Stdin.
;; If handler is nil, http.DefaultServeMux is used."
;;   {:added "1.0"
;;    :go "serve(l, handler)"}
;;   [^ABEND881(unrecognized Expr type *ast.SelectorExpr at: &{net Listener}) l, ^ABEND881(unrecognized Expr type *ast.SelectorExpr at: &{http Handler}) handler])
;; 
JOKER FUNC fcgi.TestChildServeCleansUp has: 
;; (defn TestChildServeCleansUp
;;   "Test that child.serve closes the bodies of aborted requests and closes the
;; bodies of all requests before returning. Causes deadlock if either condition
;; isn't met. See issue 6934."
;;   {:added "1.0"
;;    :go "testChildServeCleansUp(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{9524386 0xc0045035e0}) t])
;; 
JOKER FUNC fcgi.TestChildServeReadsEnvVars has: 
;; (defn TestChildServeReadsEnvVars
;;   "Test that environment variables set for a request can be
;; read by a handler. Ensures that variables not set will not
;; be exposed to a handler."
;;   {:added "1.0"
;;    :go "testChildServeReadsEnvVars(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{9526847 0xc004509b20}) t])
;; 
JOKER FUNC fcgi.TestGetValues has: 
;; (defn TestGetValues
;;   {:added "1.0"
;;    :go "testGetValues(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{9522015 0xc0044fd7c0}) t])
;; 
JOKER FUNC fcgi.TestMalformedParams has: 
;; (defn TestMalformedParams
;;   "Verifies it doesn't crash. 	Issue 11824."
;;   {:added "1.0"
;;    :go "testMalformedParams(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{9525172 0xc004508380}) t])
;; 
JOKER FUNC fcgi.TestSize has: 
;; (defn TestSize
;;   {:added "1.0"
;;    :go "testSize(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{9519376 0xc0044f6060}) t])
;; 
JOKER FUNC fcgi.TestStreams has: 
;; (defn TestStreams
;;   {:added "1.0"
;;    :go "testStreams(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{9520560 0xc0044f7760}) t])
;; 
JOKER FUNC filepath.Abs has: 
(defn ^[String Error] Abs
  "Abs returns an absolute representation of path.
If the path is not absolute it will be joined with the current
working directory to turn it into an absolute path. The absolute
path name for a given file is not guaranteed to be unique.
Abs calls Clean on the result."
  {:added "1.0"
   :go "abs(path)"}
  [^String path])

JOKER FUNC filepath.Base has: 
(defn ^String Base
  "Base returns the last element of path.
Trailing path separators are removed before extracting the last element.
If the path is empty, Base returns ".".
If the path consists entirely of separators, Base returns a single separator."
  {:added "1.0"
   :go "base(path)"}
  [^String path])

JOKER FUNC filepath.Clean has: 
(defn ^String Clean
  "Clean returns the shortest path name equivalent to path
by purely lexical processing. It applies the following rules
iteratively until no further processing can be done:

	1. Replace multiple Separator elements with a single one.
	2. Eliminate each . path name element (the current directory).
	3. Eliminate each inner .. path name element (the parent directory)
	   along with the non-.. element that precedes it.
	4. Eliminate .. elements that begin a rooted path:
	   that is, replace "/.." by "/" at the beginning of a path,
	   assuming Separator is '/'.

The returned path ends in a slash only if it represents a root directory,
such as "/" on Unix or `C:\` on Windows.

Finally, any occurrences of slash are replaced by Separator.

If the result of this process is an empty string, Clean
returns the string ".".

See also Rob Pike, ``Lexical File Names in Plan 9 or
Getting Dot-Dot Right,''
https://9p.io/sys/doc/lexnames.html"
  {:added "1.0"
   :go "clean(path)"}
  [^String path])

JOKER FUNC filepath.Dir has: 
(defn ^String Dir
  "Dir returns all but the last element of path, typically the path's directory.
After dropping the final element, Dir calls Clean on the path and trailing
slashes are removed.
If the path is empty, Dir returns ".".
If the path consists entirely of separators, Dir returns a single separator.
The returned path does not end in a separator unless it is the root directory."
  {:added "1.0"
   :go "dir(path)"}
  [^String path])

JOKER FUNC filepath.EvalSymlinks has: 
(defn ^[String Error] EvalSymlinks
  "EvalSymlinks returns the path name after the evaluation of any symbolic
links.
If path is relative the result will be relative to the current directory,
unless one of the components is an absolute symbolic link.
EvalSymlinks calls Clean on the result."
  {:added "1.0"
   :go "evalSymlinks(path)"}
  [^String path])

JOKER FUNC filepath.Ext has: 
(defn ^String Ext
  "Ext returns the file name extension used by path.
The extension is the suffix beginning at the final dot
in the final element of path; it is empty if there is
no dot."
  {:added "1.0"
   :go "ext(path)"}
  [^String path])

JOKER FUNC filepath.FromSlash has: 
(defn ^String FromSlash
  "FromSlash returns the result of replacing each slash ('/') character
in path with a separator character. Multiple slashes are replaced
by multiple separators."
  {:added "1.0"
   :go "fromSlash(path)"}
  [^String path])

JOKER FUNC filepath.Glob has: 
(defn ^[matches err] Glob
  "Glob returns the names of all files matching pattern or nil
if there is no matching file. The syntax of patterns is the same
as in Match. The pattern may describe hierarchical names such as
/usr/*/bin/ed (assuming the Separator is '/').

Glob ignores file system errors such as I/O errors reading directories.
The only possible returned error is ErrBadPattern, when pattern
is malformed."
  {:added "1.0"
   :go "glob(pattern)"}
  [^String pattern])

JOKER FUNC filepath.HasPrefix has: 
;; (defn ^ABEND042(cannot find typename filepath.bool) HasPrefix
;;   "HasPrefix exists for historical compatibility and should not be used.
;; 
;; Deprecated: HasPrefix does not respect path boundaries and
;; does not ignore case when required."
;;   {:added "1.0"
;;    :go "hasPrefix(p, prefix)"}
;;   [^String p, ^String prefix])
;; 
JOKER FUNC filepath.IsAbs has: 
;; (defn ^ABEND042(cannot find typename filepath.bool) IsAbs
;;   "IsAbs reports whether the path is absolute."
;;   {:added "1.0"
;;    :go "isAbs(path)"}
;;   [^String path])
;; 
JOKER FUNC filepath.Join has: 
;; (defn ^String Join
;;   "Join joins any number of path elements into a single path, adding
;; a Separator if necessary. Join calls Clean on the result; in particular,
;; all empty strings are ignored.
;; On Windows, the result is a UNC path if and only if the first path
;; element is a UNC path."
;;   {:added "1.0"
;;    :go "join(elem)"}
;;   [^ABEND881(unrecognized Expr type *ast.Ellipsis at: &{10274405 string}) elem])
;; 
JOKER FUNC filepath.Match has: 
(defn ^[matched err] Match
  "Match reports whether name matches the shell file name pattern.
The pattern syntax is:

	pattern:
		{ term }
	term:
		'*'         matches any sequence of non-Separator characters
		'?'         matches any single non-Separator character
		'[' [ '^' ] { character-range } ']'
		            character class (must be non-empty)
		c           matches character c (c != '*', '?', '\\', '[')
		'\\' c      matches character c

	character-range:
		c           matches character c (c != '\\', '-', ']')
		'\\' c      matches character c
		lo '-' hi   matches character c for lo <= c <= hi

Match requires pattern to match all of name, not just a substring.
The only possible returned error is ErrBadPattern, when pattern
is malformed.

On Windows, escaping is disabled. Instead, '\\' is treated as
path separator."
  {:added "1.0"
   :go "match(pattern, name)"}
  [^String pattern, ^String name])

JOKER FUNC filepath.Rel has: 
(defn ^[String Error] Rel
  "Rel returns a relative path that is lexically equivalent to targpath when
joined to basepath with an intervening separator. That is,
Join(basepath, Rel(basepath, targpath)) is equivalent to targpath itself.
On success, the returned path will always be relative to basepath,
even if basepath and targpath share no elements.
An error is returned if targpath can't be made relative to basepath or if
knowing the current working directory would be necessary to compute it.
Rel calls Clean on the result."
  {:added "1.0"
   :go "rel(basepath, targpath)"}
  [^String basepath, ^String targpath])

JOKER FUNC filepath.Split has: 
(defn ^[dir file] Split
  "Split splits path immediately following the final Separator,
separating it into a directory and file name component.
If there is no Separator in path, Split returns an empty dir
and file set to path.
The returned values have the property that path = dir+file."
  {:added "1.0"
   :go "split(path)"}
  [^String path])

JOKER FUNC filepath.SplitList has: 
(defn ^[String] SplitList
  "SplitList splits a list of paths joined by the OS-specific ListSeparator,
usually found in PATH or GOPATH environment variables.
Unlike strings.Split, SplitList returns an empty slice when passed an empty
string."
  {:added "1.0"
   :go "splitList(path)"}
  [^String path])

JOKER FUNC filepath.ToSlash has: 
(defn ^String ToSlash
  "ToSlash returns the result of replacing each separator character
in path with a slash ('/') character. Multiple separators are
replaced by multiple slashes."
  {:added "1.0"
   :go "toSlash(path)"}
  [^String path])

JOKER FUNC filepath.VolumeName has: 
(defn ^String VolumeName
  "VolumeName returns leading volume name.
Given "C:\foo\bar" it returns "C:" on Windows.
Given "\\host\share\foo" it returns "\\host\share".
On other platforms it returns ""."
  {:added "1.0"
   :go "volumeName(path)"}
  [^String path])

JOKER FUNC filepath.Walk has: 
(defn ^Error Walk
  "Walk walks the file tree rooted at root, calling walkFn for each file or
directory in the tree, including root. All errors that arise visiting files
and directories are filtered by walkFn. The files are walked in lexical
order, which makes the output deterministic but means that for very
large directories Walk can be inefficient.
Walk does not follow symbolic links."
  {:added "1.0"
   :go "walk(root, walkFn)"}
  [^String root, walkFn])

JOKER FUNC filepath_test.ExampleExt has: 
;; (defn ExampleExt
;;   {:added "1.0"
;;    :go "exampleExt()"}
;;   [])
;; 
JOKER FUNC filepath_test.ExampleJoin has: 
;; (defn ExampleJoin
;;   {:added "1.0"
;;    :go "exampleJoin()"}
;;   [])
;; 
JOKER FUNC filepath_test.ExampleRel has: 
;; (defn ExampleRel
;;   {:added "1.0"
;;    :go "exampleRel()"}
;;   [])
;; 
JOKER FUNC filepath_test.ExampleSplit has: 
;; (defn ExampleSplit
;;   {:added "1.0"
;;    :go "exampleSplit()"}
;;   [])
;; 
JOKER FUNC filepath_test.ExampleSplitList has: 
;; (defn ExampleSplitList
;;   {:added "1.0"
;;    :go "exampleSplitList()"}
;;   [])
;; 
JOKER FUNC filepath_test.ExampleWalk has: 
;; (defn ExampleWalk
;;   {:added "1.0"
;;    :go "exampleWalk()"}
;;   [])
;; 
JOKER FUNC filepath_test.TestAbs has: 
;; (defn TestAbs
;;   {:added "1.0"
;;    :go "testAbs(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{10306491 0xc0023ef300}) t])
;; 
JOKER FUNC filepath_test.TestAbsEmptyString has: 
;; (defn TestAbsEmptyString
;;   "Empty path needs to be special-cased on Windows. See golang.org/issue/24441.
;; We test it separately from all other absTests because the empty string is not
;; a valid path, so it can't be used with os.Stat."
;;   {:added "1.0"
;;    :go "testAbsEmptyString(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{10308197 0xc00185f540}) t])
;; 
JOKER FUNC filepath_test.TestBase has: 
;; (defn TestBase
;;   {:added "1.0"
;;    :go "testBase(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{10298237 0xc001e449e0}) t])
;; 
JOKER FUNC filepath_test.TestBug3486 has: 
;; (defn TestBug3486
;;   {:added "1.0"
;;    :go "testBug3486(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{10312742 0xc002ebf140}) t])
;; 
JOKER FUNC filepath_test.TestClean has: 
;; (defn TestClean
;;   {:added "1.0"
;;    :go "testClean(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{10285260 0xc002bf0b80}) t])
;; 
JOKER FUNC filepath_test.TestDir has: 
;; (defn TestDir
;;   {:added "1.0"
;;    :go "testDir(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{10299179 0xc00150c480}) t])
;; 
JOKER FUNC filepath_test.TestDriveLetterInEvalSymlinks has: 
;; (defn TestDriveLetterInEvalSymlinks
;;   {:added "1.0"
;;    :go "testDriveLetterInEvalSymlinks(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{10312197 0xc002e42260}) t])
;; 
JOKER FUNC filepath_test.TestEvalSymlinks has: 
;; (defn TestEvalSymlinks
;;   {:added "1.0"
;;    :go "testEvalSymlinks(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{10302538 0xc002592320}) t])
;; 
JOKER FUNC filepath_test.TestEvalSymlinksIsNotExist has: 
;; (defn TestEvalSymlinksIsNotExist
;;   {:added "1.0"
;;    :go "testEvalSymlinksIsNotExist(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{10304205 0xc0027f57c0}) t])
;; 
JOKER FUNC filepath_test.TestExt has: 
;; (defn TestExt
;;   {:added "1.0"
;;    :go "testExt(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{10290791 0xc00306b340}) t])
;; 
JOKER FUNC filepath_test.TestFromAndToSlash has: 
;; (defn TestFromAndToSlash
;;   {:added "1.0"
;;    :go "testFromAndToSlash(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{10286340 0xc002d01880}) t])
;; 
JOKER FUNC filepath_test.TestGlob has: 
;; (defn TestGlob
;;   {:added "1.0"
;;    :go "testGlob(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{10317869 0xc002600a20}) t])
;; 
JOKER FUNC filepath_test.TestGlobError has: 
;; (defn TestGlobError
;;   {:added "1.0"
;;    :go "testGlobError(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{10318570 0xc002601900}) t])
;; 
JOKER FUNC filepath_test.TestGlobSymlink has: 
;; (defn TestGlobSymlink
;;   {:added "1.0"
;;    :go "testGlobSymlink(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{10318967 0xc0022a65e0}) t])
;; 
JOKER FUNC filepath_test.TestGlobUNC has: 
;; (defn TestGlobUNC
;;   {:added "1.0"
;;    :go "testGlobUNC(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{10318702 0xc0022a28c0}) t])
;; 
JOKER FUNC filepath_test.TestIsAbs has: 
;; (defn TestIsAbs
;;   {:added "1.0"
;;    :go "testIsAbs(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{10300110 0xc00150d5c0}) t])
;; 
JOKER FUNC filepath_test.TestIssue13582 has: 
;; (defn TestIssue13582
;;   {:added "1.0"
;;    :go "testIssue13582(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{10304658 0xc002636040}) t])
;; 
JOKER FUNC filepath_test.TestJoin has: 
;; (defn TestJoin
;;   {:added "1.0"
;;    :go "testJoin(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{10290297 0xc00306aa20}) t])
;; 
JOKER FUNC filepath_test.TestMatch has: 
;; (defn TestMatch
;;   {:added "1.0"
;;    :go "testMatch(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{10317043 0xc0025fd9a0}) t])
;; 
JOKER FUNC filepath_test.TestNonWindowsGlobEscape has: 
;; (defn TestNonWindowsGlobEscape
;;   {:added "1.0"
;;    :go "testNonWindowsGlobEscape(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{10323109 0xc003427300}) t])
;; 
JOKER FUNC filepath_test.TestRel has: 
;; (defn TestRel
;;   {:added "1.0"
;;    :go "testRel(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{10310526 0xc002c1e5e0}) t])
;; 
JOKER FUNC filepath_test.TestSplit has: 
;; (defn TestSplit
;;   {:added "1.0"
;;    :go "testSplit(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{10288383 0xc002e304a0}) t])
;; 
JOKER FUNC filepath_test.TestSplitList has: 
;; (defn TestSplitList
;;   {:added "1.0"
;;    :go "testSplitList(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{10287478 0xc002d78ec0}) t])
;; 
JOKER FUNC filepath_test.TestVolumeName has: 
;; (defn TestVolumeName
;;   {:added "1.0"
;;    :go "testVolumeName(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{10311937 0xc002c75d40}) t])
;; 
JOKER FUNC filepath_test.TestWalk has: 
;; (defn TestWalk
;;   {:added "1.0"
;;    :go "testWalk(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{10292985 0xc003265140}) t])
;; 
JOKER FUNC filepath_test.TestWalkFileError has: 
;; (defn TestWalkFileError
;;   {:added "1.0"
;;    :go "testWalkFileError(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{10296653 0xc00340afa0}) t])
;; 
JOKER FUNC filepath_test.TestWalkSkipDirOnFile has: 
;; (defn TestWalkSkipDirOnFile
;;   {:added "1.0"
;;    :go "testWalkSkipDirOnFile(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{10295777 0xc00338de40}) t])
;; 
JOKER FUNC filepath_test.TestWalkSymlink has: 
;; (defn TestWalkSymlink
;;   {:added "1.0"
;;    :go "testWalkSymlink(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{10314488 0xc00238c760}) t])
;; 
JOKER FUNC filepath_test.TestWindowsGlob has: 
;; (defn TestWindowsGlob
;;   {:added "1.0"
;;    :go "testWindowsGlob(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{10320886 0xc002ec3c00}) t])
;; 
JOKER FUNC flag.Arg has: 
(defn ^String Arg
  "Arg returns the i'th command-line argument. Arg(0) is the first remaining argument
after flags have been processed. Arg returns an empty string if the
requested element does not exist."
  {:added "1.0"
   :go "arg(i)"}
  [^Int i])

JOKER FUNC flag.Args has: 
(defn ^[String] Args
  "Args returns the non-flag command-line arguments."
  {:added "1.0"
   :go "args()"}
  [])

JOKER FUNC flag.Bool has: 
;; (defn ^ABEND042(cannot find typename flag.bool) Bool
;;   "Bool defines a bool flag with specified name, default value, and usage string.
;; The return value is the address of a bool variable that stores the value of the flag."
;;   {:added "1.0"
;;    :go "bool(name, value, usage)"}
;;   [^String name, value, ^String usage])
;; 
JOKER FUNC flag.BoolVar has: 
;; (defn BoolVar
;;   "BoolVar defines a bool flag with specified name, default value, and usage string.
;; The argument p points to a bool variable in which to store the value of the flag."
;;   {:added "1.0"
;;    :go "boolVar(p, name, value, usage)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{4152731 bool}) p, ^String name, value, ^String usage])
;; 
JOKER FUNC flag.Duration has: 
;; (defn ^ABEND881(unrecognized Expr type *ast.SelectorExpr at: &{time Duration}) Duration
;;   "Duration defines a time.Duration flag with specified name, default value, and usage string.
;; The return value is the address of a time.Duration variable that stores the value of the flag.
;; The flag accepts a value acceptable to time.ParseDuration."
;;   {:added "1.0"
;;    :go "duration(name, value, usage)"}
;;   [^String name, ^ABEND881(unrecognized Expr type *ast.SelectorExpr at: &{time Duration}) value, ^String usage])
;; 
JOKER FUNC flag.DurationVar has: 
;; (defn DurationVar
;;   "DurationVar defines a time.Duration flag with specified name, default value, and usage string.
;; The argument p points to a time.Duration variable in which to store the value of the flag.
;; The flag accepts a value acceptable to time.ParseDuration."
;;   {:added "1.0"
;;    :go "durationVar(p, name, value, usage)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{4161289 0xc0014db560}) p, ^String name, ^ABEND881(unrecognized Expr type *ast.SelectorExpr at: &{time Duration}) value, ^String usage])
;; 
JOKER FUNC flag.Float64 has: 
;; (defn ^ABEND042(cannot find typename flag.float64) Float64
;;   "Float64 defines a float64 flag with specified name, default value, and usage string.
;; The return value is the address of a float64 variable that stores the value of the flag."
;;   {:added "1.0"
;;    :go "float64(name, value, usage)"}
;;   [^String name, value, ^String usage])
;; 
JOKER FUNC flag.Float64Var has: 
;; (defn Float64Var
;;   "Float64Var defines a float64 flag with specified name, default value, and usage string.
;; The argument p points to a float64 variable in which to store the value of the flag."
;;   {:added "1.0"
;;    :go "float64Var(p, name, value, usage)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{4159874 float64}) p, ^String name, value, ^String usage])
;; 
JOKER FUNC flag.Int has: 
(defn ^Int Int
  "Int defines an int flag with specified name, default value, and usage string.
The return value is the address of an int variable that stores the value of the flag."
  {:added "1.0"
   :go "int(name, value, usage)"}
  [^String name, ^Int value, ^String usage])

JOKER FUNC flag.Int64 has: 
;; (defn ^ABEND042(cannot find typename flag.int64) Int64
;;   "Int64 defines an int64 flag with specified name, default value, and usage string.
;; The return value is the address of an int64 variable that stores the value of the flag."
;;   {:added "1.0"
;;    :go "int64(name, value, usage)"}
;;   [^String name, value, ^String usage])
;; 
JOKER FUNC flag.Int64Var has: 
;; (defn Int64Var
;;   "Int64Var defines an int64 flag with specified name, default value, and usage string.
;; The argument p points to an int64 variable in which to store the value of the flag."
;;   {:added "1.0"
;;    :go "int64Var(p, name, value, usage)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{4155051 int64}) p, ^String name, value, ^String usage])
;; 
JOKER FUNC flag.IntVar has: 
;; (defn IntVar
;;   "IntVar defines an int flag with specified name, default value, and usage string.
;; The argument p points to an int variable in which to store the value of the flag."
;;   {:added "1.0"
;;    :go "intVar(p, name, value, usage)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{4153887 int}) p, ^String name, ^Int value, ^String usage])
;; 
JOKER FUNC flag.Lookup has: 
(defn ^{:name ^String Name, :usage ^String Usage, :value Value, :defvalue ^String DefValue} Lookup
  "Lookup returns the Flag structure of the named command-line flag,
returning nil if none exists."
  {:added "1.0"
   :go "lookup(name)"}
  [^String name])

JOKER FUNC flag.NArg has: 
(defn ^Int NArg
  "NArg is the number of arguments remaining after flags have been processed."
  {:added "1.0"
   :go "nArg()"}
  [])

JOKER FUNC flag.NFlag has: 
(defn ^Int NFlag
  "NFlag returns the number of command-line flags that have been set."
  {:added "1.0"
   :go "nFlag()"}
  [])

JOKER FUNC flag.NewFlagSet has: 
;; (defn ^{:usage ^ABEND881(unrecognized Expr type *ast.FuncType at: &{4142928 0xc0013ace10 <nil>}) Usage, :name ^String name, :parsed parsed, :actual ^ABEND881(unrecognized Expr type *ast.MapType at: &{4142993 string 0xc00151c9a0}) actual, :formal ^ABEND881(unrecognized Expr type *ast.MapType at: &{4143025 string 0xc00151ca20}) formal, :args ^ABEND881(unrecognized Expr type *ast.ArrayType at: &{4143057 <nil> string}) args, :errorhandling errorHandling, :output ^ABEND881(unrecognized Expr type *ast.SelectorExpr at: &{io Writer}) output} NewFlagSet
;;   "NewFlagSet returns a new, empty flag set with the specified name and
;; error handling property. If the name is not empty, it will be printed
;; in the default usage message and in error messages."
;;   {:added "1.0"
;;    :go "newFlagSet(name, errorHandling)"}
;;   [^String name, errorHandling])
;; 
JOKER FUNC flag.Parse has: 
;; (defn Parse
;;   "Parse parses the command-line flags from os.Args[1:]. Must be called
;; after all flags are defined and before flags are accessed by the program."
;;   {:added "1.0"
;;    :go "parse()"}
;;   [])
;; 
JOKER FUNC flag.Parsed has: 
;; (defn ^ABEND042(cannot find typename flag.bool) Parsed
;;   "Parsed reports whether the command-line flags have been parsed."
;;   {:added "1.0"
;;    :go "parsed()"}
;;   [])
;; 
JOKER FUNC flag.PrintDefaults has: 
;; (defn PrintDefaults
;;   "PrintDefaults prints, to standard error unless configured otherwise,
;; a usage message showing the default settings of all defined
;; command-line flags.
;; For an integer valued flag x, the default output has the form
;; 	-x int
;; 		usage-message-for-x (default 7)
;; The usage message will appear on a separate line for anything but
;; a bool flag with a one-byte name. For bool flags, the type is
;; omitted and if the flag name is one byte the usage message appears
;; on the same line. The parenthetical default is omitted if the
;; default is the zero value for the type. The listed type, here int,
;; can be changed by placing a back-quoted name in the flag's usage
;; string; the first such item in the message is taken to be a parameter
;; name to show in the message and the back quotes are stripped from
;; the message when displayed. For instance, given
;; 	flag.String("I", "", "search `directory` for include files")
;; the output will be
;; 	-I directory
;; 		search directory for include files."
;;   {:added "1.0"
;;    :go "printDefaults()"}
;;   [])
;; 
JOKER FUNC flag.ResetForTesting has: 
;; (defn ResetForTesting
;;   "ResetForTesting clears all flag state and sets the usage function as directed.
;; After calling ResetForTesting, parse errors in flag handling will not
;; exit the program."
;;   {:added "1.0"
;;    :go "resetForTesting(usage)"}
;;   [^ABEND881(unrecognized Expr type *ast.FuncType at: &{4134953 0xc001467890 <nil>}) usage])
;; 
JOKER FUNC flag.Set has: 
(defn ^Error Set
  "Set sets the value of the named command-line flag."
  {:added "1.0"
   :go "set(name, value)"}
  [^String name, ^String value])

JOKER FUNC flag.String has: 
(defn ^String String
  "String defines a string flag with specified name, default value, and usage string.
The return value is the address of a string variable that stores the value of the flag."
  {:added "1.0"
   :go "string(name, value, usage)"}
  [^String name, ^String value, ^String usage])

JOKER FUNC flag.StringVar has: 
;; (defn StringVar
;;   "StringVar defines a string flag with specified name, default value, and usage string.
;; The argument p points to a string variable in which to store the value of the flag."
;;   {:added "1.0"
;;    :go "stringVar(p, name, value, usage)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{4158642 string}) p, ^String name, ^String value, ^String usage])
;; 
JOKER FUNC flag.Uint has: 
(defn ^Int Uint
  "Uint defines a uint flag with specified name, default value, and usage string.
The return value is the address of a uint variable that stores the value of the flag."
  {:added "1.0"
   :go "uint(name, value, usage)"}
  [^String name, ^Int value, ^String usage])

JOKER FUNC flag.Uint64 has: 
;; (defn ^ABEND042(cannot find typename flag.uint64) Uint64
;;   "Uint64 defines a uint64 flag with specified name, default value, and usage string.
;; The return value is the address of a uint64 variable that stores the value of the flag."
;;   {:added "1.0"
;;    :go "uint64(name, value, usage)"}
;;   [^String name, value, ^String usage])
;; 
JOKER FUNC flag.Uint64Var has: 
;; (defn Uint64Var
;;   "Uint64Var defines a uint64 flag with specified name, default value, and usage string.
;; The argument p points to a uint64 variable in which to store the value of the flag."
;;   {:added "1.0"
;;    :go "uint64Var(p, name, value, usage)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{4157421 uint64}) p, ^String name, value, ^String usage])
;; 
JOKER FUNC flag.UintVar has: 
;; (defn UintVar
;;   "UintVar defines a uint flag with specified name, default value, and usage string.
;; The argument p points to a uint variable in which to store the value of the flag."
;;   {:added "1.0"
;;    :go "uintVar(p, name, value, usage)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{4156236 uint}) p, ^String name, ^Int value, ^String usage])
;; 
JOKER FUNC flag.UnquoteUsage has: 
;; (defn ^[name usage] UnquoteUsage
;;   "UnquoteUsage extracts a back-quoted name from the usage
;; string for a flag and returns it and the un-quoted usage.
;; Given "a `name` to show" it returns ("name", "a name to show").
;; If there are no back quotes, the name is an educated guess of the
;; type of the flag's value, or the empty string if the flag is boolean."
;;   {:added "1.0"
;;    :go "unquoteUsage(flag)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{4146969 Flag}) flag])
;; 
JOKER FUNC flag.Var has: 
;; (defn Var
;;   "Var defines a flag with the specified name and usage string. The type and
;; value of the flag are represented by the first argument, of type Value, which
;; typically holds a user-defined implementation of Value. For instance, the
;; caller could create a flag that turns a comma-separated string into a slice
;; of strings by giving the slice the methods of Value; in particular, Set would
;; decompose the comma-separated string into the slice."
;;   {:added "1.0"
;;    :go "var(value, name, usage)"}
;;   [value, ^String name, ^String usage])
;; 
JOKER FUNC flag.Visit has: 
;; (defn Visit
;;   "Visit visits the command-line flags in lexicographical order, calling fn
;; for each. It visits only those flags that have been set."
;;   {:added "1.0"
;;    :go "visit(fn)"}
;;   [^ABEND881(unrecognized Expr type *ast.FuncType at: &{4145236 0xc00139c810 <nil>}) fn])
;; 
JOKER FUNC flag.VisitAll has: 
;; (defn VisitAll
;;   "VisitAll visits the command-line flags in lexicographical order, calling
;; fn for each. It visits all flags, even those not set."
;;   {:added "1.0"
;;    :go "visitAll(fn)"}
;;   [^ABEND881(unrecognized Expr type *ast.FuncType at: &{4144816 0xc00139c4b0 <nil>}) fn])
;; 
JOKER FUNC flag_test.Example has: 
;; (defn Example
;;   {:added "1.0"
;;    :go "example()"}
;;   [])
;; 
JOKER FUNC flag_test.ExampleValue has: 
;; (defn ExampleValue
;;   {:added "1.0"
;;    :go "exampleValue()"}
;;   [])
;; 
JOKER FUNC flag_test.TestChangingArgs has: 
;; (defn TestChangingArgs
;;   "This tests that one can reset the flags. This still works but not well, and is
;; superseded by FlagSet."
;;   {:added "1.0"
;;    :go "testChangingArgs(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{4125792 0xc00156e0c0}) t])
;; 
JOKER FUNC flag_test.TestEverything has: 
;; (defn TestEverything
;;   {:added "1.0"
;;    :go "testEverything(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{4118559 0xc00159dbe0}) t])
;; 
JOKER FUNC flag_test.TestFlagSetParse has: 
;; (defn TestFlagSetParse
;;   {:added "1.0"
;;    :go "testFlagSetParse(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{4123685 0xc00157f8e0}) t])
;; 
JOKER FUNC flag_test.TestGet has: 
;; (defn TestGet
;;   {:added "1.0"
;;    :go "testGet(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{4120277 0xc001597d80}) t])
;; 
JOKER FUNC flag_test.TestGetters has: 
;; (defn TestGetters
;;   {:added "1.0"
;;    :go "testGetters(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{4129832 0xc001563a00}) t])
;; 
JOKER FUNC flag_test.TestHelp has: 
;; (defn TestHelp
;;   "Test that -help invokes the usage message and returns ErrHelp."
;;   {:added "1.0"
;;    :go "testHelp(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{4126448 0xc00156ece0}) t])
;; 
JOKER FUNC flag_test.TestIntFlagOverflow has: 
;; (defn TestIntFlagOverflow
;;   "Issue 19230: validate range of Int and Uint flag values."
;;   {:added "1.0"
;;    :go "testIntFlagOverflow(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{4129065 0xc001562c80}) t])
;; 
JOKER FUNC flag_test.TestParse has: 
;; (defn TestParse
;;   {:added "1.0"
;;    :go "testParse(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{4123567 0xc00157f6a0}) t])
;; 
JOKER FUNC flag_test.TestPrintDefaults has: 
;; (defn TestPrintDefaults
;;   {:added "1.0"
;;    :go "testPrintDefaults(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{4128137 0xc00156fce0}) t])
;; 
JOKER FUNC flag_test.TestSetOutput has: 
;; (defn TestSetOutput
;;   {:added "1.0"
;;    :go "testSetOutput(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{4125382 0xc001577a80}) t])
;; 
JOKER FUNC flag_test.TestUsage has: 
;; (defn TestUsage
;;   {:added "1.0"
;;    :go "testUsage(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{4121415 0xc0015912e0}) t])
;; 
JOKER FUNC flag_test.TestUsageOutput has: 
;; (defn TestUsageOutput
;;   "Issue 20998: Usage should respect CommandLine.output."
;;   {:added "1.0"
;;    :go "testUsageOutput(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{4129450 0xc0015632a0}) t])
;; 
JOKER FUNC flag_test.TestUserDefined has: 
;; (defn TestUserDefined
;;   {:added "1.0"
;;    :go "testUserDefined(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{4123991 0xc00157ff20}) t])
;; 
JOKER FUNC flag_test.TestUserDefinedBool has: 
;; (defn TestUserDefinedBool
;;   {:added "1.0"
;;    :go "testUserDefinedBool(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{4124950 0xc0015771a0}) t])
;; 
JOKER FUNC flag_test.TestUserDefinedForCommandLine has: 
;; (defn TestUserDefinedForCommandLine
;;   {:added "1.0"
;;    :go "testUserDefinedForCommandLine(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{4124414 0xc001576840}) t])
;; 
JOKER FUNC flate.BenchmarkDecode has: 
;; (defn BenchmarkDecode
;;   {:added "1.0"
;;    :go "benchmarkDecode(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{589149 0xc0001f1d20}) b])
;; 
JOKER FUNC flate.BenchmarkEncode has: 
;; (defn BenchmarkEncode
;;   {:added "1.0"
;;    :go "benchmarkEncode(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{584366 0xc0005cca80}) b])
;; 
JOKER FUNC flate.NewReader has: 
;; (defn ^ABEND881(unrecognized Expr type *ast.SelectorExpr at: &{io ReadCloser}) NewReader
;;   "NewReader returns a new ReadCloser that can be used
;; to read the uncompressed version of r.
;; If r does not also implement io.ByteReader,
;; the decompressor may read more data than necessary from r.
;; It is the caller's responsibility to call Close on the ReadCloser
;; when finished reading.
;; 
;; The ReadCloser returned by NewReader also implements Resetter."
;;   {:added "1.0"
;;    :go "newReader(r)"}
;;   [^ABEND881(unrecognized Expr type *ast.SelectorExpr at: &{io Reader}) r])
;; 
JOKER FUNC flate.NewReaderDict has: 
;; (defn ^ABEND881(unrecognized Expr type *ast.SelectorExpr at: &{io ReadCloser}) NewReaderDict
;;   "NewReaderDict is like NewReader but initializes the reader
;; with a preset dictionary. The returned Reader behaves as if
;; the uncompressed data stream started with the given dictionary,
;; which has already been read. NewReaderDict is typically used
;; to read data compressed by NewWriterDict.
;; 
;; The ReadCloser returned by NewReader also implements Resetter."
;;   {:added "1.0"
;;    :go "newReaderDict(r, dict)"}
;;   [^ABEND881(unrecognized Expr type *ast.SelectorExpr at: &{io Reader}) r, ^ABEND881(unrecognized Expr type *ast.ArrayType at: &{647712 <nil> byte}) dict])
;; 
JOKER FUNC flate.NewWriter has: 
;; (defn ^[{:d d, :dict ^ABEND881(unrecognized Expr type *ast.ArrayType at: &{616170 <nil> byte}) dict} Error] NewWriter
;;   "NewWriter returns a new Writer compressing data at the given level.
;; Following zlib, levels range from 1 (BestSpeed) to 9 (BestCompression);
;; higher levels typically run slower but compress more. Level 0
;; (NoCompression) does not attempt any compression; it only adds the
;; necessary DEFLATE framing.
;; Level -1 (DefaultCompression) uses the default compression level.
;; Level -2 (HuffmanOnly) will use Huffman compression only, giving
;; a very fast compression for all types of input, but sacrificing considerable
;; compression efficiency.
;; 
;; If level is in the range [-2, 9] then the error returned will be nil.
;; Otherwise the error returned will be non-nil."
;;   {:added "1.0"
;;    :go "newWriter(w, level)"}
;;   [^ABEND881(unrecognized Expr type *ast.SelectorExpr at: &{io Writer}) w, ^Int level])
;; 
JOKER FUNC flate.NewWriterDict has: 
;; (defn ^[{:d d, :dict ^ABEND881(unrecognized Expr type *ast.ArrayType at: &{616170 <nil> byte}) dict} Error] NewWriterDict
;;   "NewWriterDict is like NewWriter but initializes the new
;; Writer with a preset dictionary. The returned Writer behaves
;; as if the dictionary had been written to it without producing
;; any compressed output. The compressed data written to w
;; can only be decompressed by a Reader initialized with the
;; same dictionary."
;;   {:added "1.0"
;;    :go "newWriterDict(w, level, dict)"}
;;   [^ABEND881(unrecognized Expr type *ast.SelectorExpr at: &{io Writer}) w, ^Int level, ^ABEND881(unrecognized Expr type *ast.ArrayType at: &{615638 <nil> byte}) dict])
;; 
JOKER FUNC flate.TestBestSpeed has: 
;; (defn TestBestSpeed
;;   "TestBestSpeed tests that round-tripping through deflate and then inflate
;; recovers the original input. The Write sizes are near the thresholds in the
;; compressor.encSpeed method (0, 16, 128), as well as near maxStoreBlockSize
;; (65535)."
;;   {:added "1.0"
;;    :go "testBestSpeed(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{736545 0xc000591fe0}) t])
;; 
JOKER FUNC flate.TestBestSpeedMatch has: 
;; (defn TestBestSpeedMatch
;;   {:added "1.0"
;;    :go "testBestSpeedMatch(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{739708 0xc000514a80}) t])
;; 
JOKER FUNC flate.TestBestSpeedMaxMatchOffset has: 
;; (defn TestBestSpeedMaxMatchOffset
;;   {:added "1.0"
;;    :go "testBestSpeedMaxMatchOffset(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{742278 0xc0001ce260}) t])
;; 
JOKER FUNC flate.TestBlockHuff has: 
;; (defn TestBlockHuff
;;   "TestBlockHuff tests huffman encoding against reference files
;; to detect possible regressions.
;; If encoding/bit allocation changes you can regenerate these files
;; by using the -update flag."
;;   {:added "1.0"
;;    :go "testBlockHuff(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{648521 0xc0006e8500}) t])
;; 
JOKER FUNC flate.TestBulkHash4 has: 
;; (defn TestBulkHash4
;;   {:added "1.0"
;;    :go "testBulkHash4(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{724828 0xc00083cb00}) t])
;; 
JOKER FUNC flate.TestDeflate has: 
;; (defn TestDeflate
;;   {:added "1.0"
;;    :go "testDeflate(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{725459 0xc00083d6c0}) t])
;; 
JOKER FUNC flate.TestDeflateInflate has: 
;; (defn TestDeflateInflate
;;   {:added "1.0"
;;    :go "testDeflateInflate(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{730992 0xc000293fe0}) t])
;; 
JOKER FUNC flate.TestDeflateInflateString has: 
;; (defn TestDeflateInflateString
;;   {:added "1.0"
;;    :go "testDeflateInflateString(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{731857 0xc0000e7340}) t])
;; 
JOKER FUNC flate.TestDeterministic has: 
;; (defn TestDeterministic
;;   "Test if two runs produce identical results
;; even when writing different sizes to the Writer."
;;   {:added "1.0"
;;    :go "testDeterministic(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{586676 0xc0001ed7a0}) t])
;; 
JOKER FUNC flate.TestDictDecoder has: 
;; (defn TestDictDecoder
;;   {:added "1.0"
;;    :go "testDictDecoder(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{745040 0xc0002efa80}) t])
;; 
JOKER FUNC flate.TestInvalidBits has: 
;; (defn TestInvalidBits
;;   {:added "1.0"
;;    :go "testInvalidBits(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{751179 0xc00079cdc0}) t])
;; 
JOKER FUNC flate.TestInvalidEncoding has: 
;; (defn TestInvalidEncoding
;;   {:added "1.0"
;;    :go "testInvalidEncoding(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{750775 0xc00076e3a0}) t])
;; 
JOKER FUNC flate.TestIssue5915 has: 
;; (defn TestIssue5915
;;   "The following test should not panic."
;;   {:added "1.0"
;;    :go "testIssue5915(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{749749 0xc0006637a0}) t])
;; 
JOKER FUNC flate.TestIssue5962 has: 
;; (defn TestIssue5962
;;   "The following test should not panic."
;;   {:added "1.0"
;;    :go "testIssue5962(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{750151 0xc0006a5760}) t])
;; 
JOKER FUNC flate.TestIssue6255 has: 
;; (defn TestIssue6255
;;   "The following test should not panic."
;;   {:added "1.0"
;;    :go "testIssue6255(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{750450 0xc0006dba60}) t])
;; 
JOKER FUNC flate.TestMaxStackSize has: 
;; (defn TestMaxStackSize
;;   {:added "1.0"
;;    :go "testMaxStackSize(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{743929 0xc0000eeec0}) t])
;; 
JOKER FUNC flate.TestNlitOutOfRange has: 
;; (defn TestNlitOutOfRange
;;   {:added "1.0"
;;    :go "testNlitOutOfRange(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{588370 0xc0001f1720}) t])
;; 
JOKER FUNC flate.TestReaderDict has: 
;; (defn TestReaderDict
;;   {:added "1.0"
;;    :go "testReaderDict(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{732225 0xc0003604e0}) t])
;; 
JOKER FUNC flate.TestReaderEarlyEOF has: 
;; (defn TestReaderEarlyEOF
;;   "Verify that flate.Reader.Read returns (n, io.EOF) instead
;; of (n, nil) + (0, io.EOF) when possible.
;; 
;; This helps net/http.Transport reuse HTTP/1 connections more
;; aggressively.
;; 
;; See https://github.com/google/go-github/pull/317 for background."
;;   {:added "1.0"
;;    :go "testReaderEarlyEOF(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{758775 0xc0005ddfe0}) t])
;; 
JOKER FUNC flate.TestReaderTruncated has: 
;; (defn TestReaderTruncated
;;   {:added "1.0"
;;    :go "testReaderTruncated(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{690086 0xc00079daa0}) t])
;; 
JOKER FUNC flate.TestRegression2508 has: 
;; (defn TestRegression2508
;;   "See https://golang.org/issue/2508"
;;   {:added "1.0"
;;    :go "testRegression2508(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{733249 0xc000361c60}) t])
;; 
JOKER FUNC flate.TestReset has: 
;; (defn TestReset
;;   {:added "1.0"
;;    :go "testReset(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{689515 0xc00079cd80}) t])
;; 
JOKER FUNC flate.TestResetDict has: 
;; (defn TestResetDict
;;   {:added "1.0"
;;    :go "testResetDict(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{690844 0xc0007a6660}) t])
;; 
JOKER FUNC flate.TestReverseBits has: 
;; (defn TestReverseBits
;;   {:added "1.0"
;;    :go "testReverseBits(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{731155 0xc0002574c0}) t])
;; 
JOKER FUNC flate.TestStreams has: 
;; (defn TestStreams
;;   {:added "1.0"
;;    :go "testStreams(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{751483 0xc0007c5c80}) t])
;; 
JOKER FUNC flate.TestTruncatedStreams has: 
;; (defn TestTruncatedStreams
;;   {:added "1.0"
;;    :go "testTruncatedStreams(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{758150 0xc0005dd860}) t])
;; 
JOKER FUNC flate.TestVeryLongSparseChunk has: 
;; (defn TestVeryLongSparseChunk
;;   {:added "1.0"
;;    :go "testVeryLongSparseChunk(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{726333 0xc000844a60}) t])
;; 
JOKER FUNC flate.TestWriteBlock has: 
;; (defn TestWriteBlock
;;   "TestWriteBlock tests if the writeBlock encoding has changed.
;; To update the reference files use the "-update" flag on the test."
;;   {:added "1.0"
;;    :go "testWriteBlock(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{684477 0xc00078ce40}) t])
;; 
JOKER FUNC flate.TestWriteBlockDynamic has: 
;; (defn TestWriteBlockDynamic
;;   "TestWriteBlockDynamic tests if the writeBlockDynamic encoding has changed.
;; To update the reference files use the "-update" flag on the test."
;;   {:added "1.0"
;;    :go "testWriteBlockDynamic(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{684740 0xc00078d0c0}) t])
;; 
JOKER FUNC flate.TestWriteError has: 
;; (defn TestWriteError
;;   "Test if errors from the underlying writer is passed upwards."
;;   {:added "1.0"
;;    :go "testWriteError(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{585154 0xc0005cdc80}) t])
;; 
JOKER FUNC flate.TestWriterDict has: 
;; (defn TestWriterDict
;;   {:added "1.0"
;;    :go "testWriterDict(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{732718 0xc000360fa0}) t])
;; 
JOKER FUNC flate.TestWriterPersistentError has: 
;; (defn TestWriterPersistentError
;;   {:added "1.0"
;;    :go "testWriterPersistentError(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{738616 0xc00051ac00}) t])
;; 
JOKER FUNC flate.TestWriterReset has: 
;; (defn TestWriterReset
;;   {:added "1.0"
;;    :go "testWriterReset(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{733610 0xc0005e4100}) t])
;; 
JOKER FUNC flate_test.Example_dictionary has: 
;; (defn Example_dictionary
;;   "A preset dictionary can be used to improve the compression ratio.
;; The downside to using a dictionary is that the compressor and decompressor
;; must agree in advance what dictionary to use."
;;   {:added "1.0"
;;    :go "example_dictionary()"}
;;   [])
;; 
JOKER FUNC flate_test.Example_reset has: 
;; (defn Example_reset
;;   "In performance critical applications, Reset can be used to discard the
;; current compressor or decompressor state and reinitialize them quickly
;; by taking advantage of previously allocated memory."
;;   {:added "1.0"
;;    :go "example_reset()"}
;;   [])
;; 
JOKER FUNC flate_test.Example_synchronization has: 
;; (defn Example_synchronization
;;   "DEFLATE is suitable for transmitting compressed data across the network."
;;   {:added "1.0"
;;    :go "example_synchronization()"}
;;   [])
;; 
JOKER FUNC fmt.Errorf has: 
;; (defn ^Error Errorf
;;   "Errorf formats according to a format specifier and returns the string
;; as a value that satisfies error."
;;   {:added "1.0"
;;    :go "errorf(format, a)"}
;;   [^String format, ^ABEND881(unrecognized Expr type *ast.Ellipsis at: &{4174874 0xc00149a4c0}) a])
;; 
JOKER FUNC fmt.Fprint has: 
;; (defn ^[n err] Fprint
;;   "Fprint formats using the default formats for its operands and writes to w.
;; Spaces are added between operands when neither is a string.
;; It returns the number of bytes written and any write error encountered."
;;   {:added "1.0"
;;    :go "fprint(w, a)"}
;;   [^ABEND881(unrecognized Expr type *ast.SelectorExpr at: &{io Writer}) w, ^ABEND881(unrecognized Expr type *ast.Ellipsis at: &{4175233 0xc00149a800}) a])
;; 
JOKER FUNC fmt.Fprintf has: 
;; (defn ^[n err] Fprintf
;;   "Fprintf formats according to a format specifier and writes to w.
;; It returns the number of bytes written and any write error encountered."
;;   {:added "1.0"
;;    :go "fprintf(w, format, a)"}
;;   [^ABEND881(unrecognized Expr type *ast.SelectorExpr at: &{io Writer}) w, ^String format, ^ABEND881(unrecognized Expr type *ast.Ellipsis at: &{4174120 0xc0014b5920}) a])
;; 
JOKER FUNC fmt.Fprintln has: 
;; (defn ^[n err] Fprintln
;;   "Fprintln formats using the default formats for its operands and writes to w.
;; Spaces are always added between operands and a newline is appended.
;; It returns the number of bytes written and any write error encountered."
;;   {:added "1.0"
;;    :go "fprintln(w, a)"}
;;   [^ABEND881(unrecognized Expr type *ast.SelectorExpr at: &{io Writer}) w, ^ABEND881(unrecognized Expr type *ast.Ellipsis at: &{4176336 0xc00149b340}) a])
;; 
JOKER FUNC fmt.Fscan has: 
;; (defn ^[n err] Fscan
;;   "Fscan scans text read from r, storing successive space-separated
;; values into successive arguments. Newlines count as space. It
;; returns the number of items successfully scanned. If that is less
;; than the number of arguments, err will report why."
;;   {:added "1.0"
;;    :go "fscan(r, a)"}
;;   [^ABEND881(unrecognized Expr type *ast.SelectorExpr at: &{io Reader}) r, ^ABEND881(unrecognized Expr type *ast.Ellipsis at: &{4244828 0xc0013e3360}) a])
;; 
JOKER FUNC fmt.Fscanf has: 
;; (defn ^[n err] Fscanf
;;   "Fscanf scans text read from r, storing successive space-separated
;; values into successive arguments as determined by the format. It
;; returns the number of items successfully parsed.
;; Newlines in the input must match newlines in the format."
;;   {:added "1.0"
;;    :go "fscanf(r, format, a)"}
;;   [^ABEND881(unrecognized Expr type *ast.SelectorExpr at: &{io Reader}) r, ^String format, ^ABEND881(unrecognized Expr type *ast.Ellipsis at: &{4245517 0xc0012b4400}) a])
;; 
JOKER FUNC fmt.Fscanln has: 
;; (defn ^[n err] Fscanln
;;   "Fscanln is similar to Fscan, but stops scanning at a newline and
;; after the final item there must be a newline or EOF."
;;   {:added "1.0"
;;    :go "fscanln(r, a)"}
;;   [^ABEND881(unrecognized Expr type *ast.SelectorExpr at: &{io Reader}) r, ^ABEND881(unrecognized Expr type *ast.Ellipsis at: &{4245103 0xc0013e6340}) a])
;; 
JOKER FUNC fmt.Print has: 
;; (defn ^[n err] Print
;;   "Print formats using the default formats for its operands and writes to standard output.
;; Spaces are added between operands when neither is a string.
;; It returns the number of bytes written and any write error encountered."
;;   {:added "1.0"
;;    :go "print(a)"}
;;   [^ABEND881(unrecognized Expr type *ast.Ellipsis at: &{4175591 0xc00149ac40}) a])
;; 
JOKER FUNC fmt.Printf has: 
;; (defn ^[n err] Printf
;;   "Printf formats according to a format specifier and writes to standard output.
;; It returns the number of bytes written and any write error encountered."
;;   {:added "1.0"
;;    :go "printf(format, a)"}
;;   [^String format, ^ABEND881(unrecognized Expr type *ast.Ellipsis at: &{4174430 0xc0014b5de0}) a])
;; 
JOKER FUNC fmt.Println has: 
;; (defn ^[n err] Println
;;   "Println formats using the default formats for its operands and writes to standard output.
;; Spaces are always added between operands and a newline is appended.
;; It returns the number of bytes written and any write error encountered."
;;   {:added "1.0"
;;    :go "println(a)"}
;;   [^ABEND881(unrecognized Expr type *ast.Ellipsis at: &{4176708 0xc00149b780}) a])
;; 
JOKER FUNC fmt.Scan has: 
;; (defn ^[n err] Scan
;;   "Scan scans text read from standard input, storing successive
;; space-separated values into successive arguments. Newlines count
;; as space. It returns the number of items successfully scanned.
;; If that is less than the number of arguments, err will report why."
;;   {:added "1.0"
;;    :go "scan(a)"}
;;   [^ABEND881(unrecognized Expr type *ast.Ellipsis at: &{4242556 0xc001371c20}) a])
;; 
JOKER FUNC fmt.Scanf has: 
;; (defn ^[n err] Scanf
;;   "Scanf scans text read from standard input, storing successive
;; space-separated values into successive arguments as determined by
;; the format. It returns the number of items successfully scanned.
;; If that is less than the number of arguments, err will report why.
;; Newlines in the input must match newlines in the format.
;; The one exception: the verb %c always scans the next rune in the
;; input, even if it is a space (or tab etc.) or newline."
;;   {:added "1.0"
;;    :go "scanf(format, a)"}
;;   [^String format, ^ABEND881(unrecognized Expr type *ast.Ellipsis at: &{4243320 0xc0013e2200}) a])
;; 
JOKER FUNC fmt.Scanln has: 
;; (defn ^[n err] Scanln
;;   "Scanln is similar to Scan, but stops scanning at a newline and
;; after the final item there must be a newline or EOF."
;;   {:added "1.0"
;;    :go "scanln(a)"}
;;   [^ABEND881(unrecognized Expr type *ast.Ellipsis at: &{4242762 0xc001371ea0}) a])
;; 
JOKER FUNC fmt.Sprint has: 
;; (defn ^String Sprint
;;   "Sprint formats using the default formats for its operands and returns the resulting string.
;; Spaces are added between operands when neither is a string."
;;   {:added "1.0"
;;    :go "sprint(a)"}
;;   [^ABEND881(unrecognized Expr type *ast.Ellipsis at: &{4175835 0xc00149aea0}) a])
;; 
JOKER FUNC fmt.Sprintf has: 
;; (defn ^String Sprintf
;;   "Sprintf formats according to a format specifier and returns the resulting string."
;;   {:added "1.0"
;;    :go "sprintf(format, a)"}
;;   [^String format, ^ABEND881(unrecognized Expr type *ast.Ellipsis at: &{4174626 0xc00149a080}) a])
;; 
JOKER FUNC fmt.Sprintln has: 
;; (defn ^String Sprintln
;;   "Sprintln formats using the default formats for its operands and returns the resulting string.
;; Spaces are always added between operands and a newline is appended."
;;   {:added "1.0"
;;    :go "sprintln(a)"}
;;   [^ABEND881(unrecognized Expr type *ast.Ellipsis at: &{4176966 0xc00149b9e0}) a])
;; 
JOKER FUNC fmt.Sscan has: 
;; (defn ^[n err] Sscan
;;   "Sscan scans the argument string, storing successive space-separated
;; values into successive arguments. Newlines count as space. It
;; returns the number of items successfully scanned. If that is less
;; than the number of arguments, err will report why."
;;   {:added "1.0"
;;    :go "sscan(str, a)"}
;;   [^String str, ^ABEND881(unrecognized Expr type *ast.Ellipsis at: &{4243842 0xc0013e2940}) a])
;; 
JOKER FUNC fmt.Sscanf has: 
;; (defn ^[n err] Sscanf
;;   "Sscanf scans the argument string, storing successive space-separated
;; values into successive arguments as determined by the format. It
;; returns the number of items successfully parsed.
;; Newlines in the input must match newlines in the format."
;;   {:added "1.0"
;;    :go "sscanf(str, format, a)"}
;;   [^String str, ^String format, ^ABEND881(unrecognized Expr type *ast.Ellipsis at: &{4244454 0xc0013e2fa0}) a])
;; 
JOKER FUNC fmt.Sscanln has: 
;; (defn ^[n err] Sscanln
;;   "Sscanln is similar to Sscan, but stops scanning at a newline and
;; after the final item there must be a newline or EOF."
;;   {:added "1.0"
;;    :go "sscanln(str, a)"}
;;   [^String str, ^ABEND881(unrecognized Expr type *ast.Ellipsis at: &{4244076 0xc0013e2c20}) a])
;; 
JOKER FUNC fmt_test.BenchmarkFprintInt has: 
;; (defn BenchmarkFprintInt
;;   {:added "1.0"
;;    :go "benchmarkFprintInt(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{4341793 0xc001e4f820}) b])
;; 
JOKER FUNC fmt_test.BenchmarkFprintIntNoAlloc has: 
;; (defn BenchmarkFprintIntNoAlloc
;;   {:added "1.0"
;;    :go "benchmarkFprintIntNoAlloc(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{4342112 0xc001e538e0}) b])
;; 
JOKER FUNC fmt_test.BenchmarkFprintfBytes has: 
;; (defn BenchmarkFprintfBytes
;;   {:added "1.0"
;;    :go "benchmarkFprintfBytes(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{4341929 0xc001e53460}) b])
;; 
JOKER FUNC fmt_test.BenchmarkManyArgs has: 
;; (defn BenchmarkManyArgs
;;   {:added "1.0"
;;    :go "benchmarkManyArgs(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{4341560 0xc001e38c60}) b])
;; 
JOKER FUNC fmt_test.BenchmarkScanInts has: 
;; (defn BenchmarkScanInts
;;   {:added "1.0"
;;    :go "benchmarkScanInts(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{4230181 0xc001317140}) b])
;; 
JOKER FUNC fmt_test.BenchmarkScanRecursiveInt has: 
;; (defn BenchmarkScanRecursiveInt
;;   {:added "1.0"
;;    :go "benchmarkScanRecursiveInt(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{4230415 0xc001317fe0}) b])
;; 
JOKER FUNC fmt_test.BenchmarkScanRecursiveIntReaderWrapper has: 
;; (defn BenchmarkScanRecursiveIntReaderWrapper
;;   {:added "1.0"
;;    :go "benchmarkScanRecursiveIntReaderWrapper(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{4230659 0xc0013d2840}) b])
;; 
JOKER FUNC fmt_test.BenchmarkSprintfBoolean has: 
;; (defn BenchmarkSprintfBoolean
;;   {:added "1.0"
;;    :go "benchmarkSprintfBoolean(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{4340578 0xc001e1d920}) b])
;; 
JOKER FUNC fmt_test.BenchmarkSprintfBytes has: 
;; (defn BenchmarkSprintfBytes
;;   {:added "1.0"
;;    :go "benchmarkSprintfBytes(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{4341038 0xc001e2ccc0}) b])
;; 
JOKER FUNC fmt_test.BenchmarkSprintfComplex has: 
;; (defn BenchmarkSprintfComplex
;;   {:added "1.0"
;;    :go "benchmarkSprintfComplex(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{4340431 0xc001e1d5c0}) b])
;; 
JOKER FUNC fmt_test.BenchmarkSprintfEmpty has: 
;; (defn BenchmarkSprintfEmpty
;;   {:added "1.0"
;;    :go "benchmarkSprintfEmpty(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{4339092 0xc001e00780}) b])
;; 
JOKER FUNC fmt_test.BenchmarkSprintfFloat has: 
;; (defn BenchmarkSprintfFloat
;;   {:added "1.0"
;;    :go "benchmarkSprintfFloat(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{4340293 0xc001e12a60}) b])
;; 
JOKER FUNC fmt_test.BenchmarkSprintfHexBytes has: 
;; (defn BenchmarkSprintfHexBytes
;;   {:added "1.0"
;;    :go "benchmarkSprintfHexBytes(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{4340867 0xc001e1dfa0}) b])
;; 
JOKER FUNC fmt_test.BenchmarkSprintfHexString has: 
;; (defn BenchmarkSprintfHexString
;;   {:added "1.0"
;;    :go "benchmarkSprintfHexString(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{4340715 0xc001e1dc80}) b])
;; 
JOKER FUNC fmt_test.BenchmarkSprintfInt has: 
;; (defn BenchmarkSprintfInt
;;   {:added "1.0"
;;    :go "benchmarkSprintfInt(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{4339828 0xc001e015a0}) b])
;; 
JOKER FUNC fmt_test.BenchmarkSprintfIntInt has: 
;; (defn BenchmarkSprintfIntInt
;;   {:added "1.0"
;;    :go "benchmarkSprintfIntInt(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{4339959 0xc001e018e0}) b])
;; 
JOKER FUNC fmt_test.BenchmarkSprintfPadding has: 
;; (defn BenchmarkSprintfPadding
;;   {:added "1.0"
;;    :go "benchmarkSprintfPadding(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{4338958 0xc001e00480}) b])
;; 
JOKER FUNC fmt_test.BenchmarkSprintfPrefixedInt has: 
;; (defn BenchmarkSprintfPrefixedInt
;;   {:added "1.0"
;;    :go "benchmarkSprintfPrefixedInt(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{4340101 0xc001e0df20}) b])
;; 
JOKER FUNC fmt_test.BenchmarkSprintfQuoteString has: 
;; (defn BenchmarkSprintfQuoteString
;;   {:added "1.0"
;;    :go "benchmarkSprintfQuoteString(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{4339672 0xc001e012c0}) b])
;; 
JOKER FUNC fmt_test.BenchmarkSprintfSlowParsingPath has: 
;; (defn BenchmarkSprintfSlowParsingPath
;;   {:added "1.0"
;;    :go "benchmarkSprintfSlowParsingPath(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{4339533 0xc001e00fe0}) b])
;; 
JOKER FUNC fmt_test.BenchmarkSprintfString has: 
;; (defn BenchmarkSprintfString
;;   {:added "1.0"
;;    :go "benchmarkSprintfString(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{4339218 0xc001e00a20}) b])
;; 
JOKER FUNC fmt_test.BenchmarkSprintfStringer has: 
;; (defn BenchmarkSprintfStringer
;;   {:added "1.0"
;;    :go "benchmarkSprintfStringer(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{4341210 0xc001e36020}) b])
;; 
JOKER FUNC fmt_test.BenchmarkSprintfStructure has: 
;; (defn BenchmarkSprintfStructure
;;   {:added "1.0"
;;    :go "benchmarkSprintfStructure(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{4341373 0xc001e371c0}) b])
;; 
JOKER FUNC fmt_test.BenchmarkSprintfTruncateString has: 
;; (defn BenchmarkSprintfTruncateString
;;   {:added "1.0"
;;    :go "benchmarkSprintfTruncateString(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{4339363 0xc001e00d00}) b])
;; 
JOKER FUNC fmt_test.ExampleStringer has: 
;; (defn ExampleStringer
;;   {:added "1.0"
;;    :go "exampleStringer()"}
;;   [])
;; 
JOKER FUNC fmt_test.TestBadVerbRecursion has: 
;; (defn TestBadVerbRecursion
;;   {:added "1.0"
;;    :go "testBadVerbRecursion(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{4351334 0xc001184960}) t])
;; 
JOKER FUNC fmt_test.TestBlank has: 
;; (defn TestBlank
;;   "TestBlank checks that Sprint (and hence Print, Fprint) puts spaces in the
;; right places, that is, between arg pairs in which neither is a string."
;;   {:added "1.0"
;;    :go "testBlank(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{4347017 0xc00203dc40}) t])
;; 
JOKER FUNC fmt_test.TestBlankln has: 
;; (defn TestBlankln
;;   "TestBlankln checks that Sprintln (and hence Println, Fprintln) puts spaces in
;; the right places, that is, between all arg pairs."
;;   {:added "1.0"
;;    :go "testBlankln(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{4347323 0xc002156480}) t])
;; 
JOKER FUNC fmt_test.TestComplexFormatting has: 
;; (defn TestComplexFormatting
;;   "TestComplexFormatting checks that a complex always formats to the same
;; thing as if done by hand with two singleton prints."
;;   {:added "1.0"
;;    :go "testComplexFormatting(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{4335891 0xc001deb320}) t])
;; 
JOKER FUNC fmt_test.TestCountMallocs has: 
;; (defn TestCountMallocs
;;   {:added "1.0"
;;    :go "testCountMallocs(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{4343169 0xc001e6e3e0}) t])
;; 
JOKER FUNC fmt_test.TestEOF has: 
;; (defn TestEOF
;;   "TestEOF verifies that when we scan, we see at most EOF once per call to a
;; Scan function, and then only when it's really an EOF."
;;   {:added "1.0"
;;    :go "testEOF(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{4222568 0xc00162ae20}) t])
;; 
JOKER FUNC fmt_test.TestEOFAllTypes has: 
;; (defn TestEOFAllTypes
;;   {:added "1.0"
;;    :go "testEOFAllTypes(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{4224437 0xc000a57140}) t])
;; 
JOKER FUNC fmt_test.TestEOFAtEndOfInput has: 
;; (defn TestEOFAtEndOfInput
;;   "TestEOFAtEndOfInput verifies that we see an EOF error if we run out of input.
;; This was a buglet: we used to get "expected integer"."
;;   {:added "1.0"
;;    :go "testEOFAtEndOfInput(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{4223303 0xc00162ba80}) t])
;; 
JOKER FUNC fmt_test.TestEmptyMap has: 
;; (defn TestEmptyMap
;;   {:added "1.0"
;;    :go "testEmptyMap(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{4346552 0xc001ffff60}) t])
;; 
JOKER FUNC fmt_test.TestFlagParser has: 
;; (defn TestFlagParser
;;   {:added "1.0"
;;    :go "testFlagParser(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{4344287 0xc001edfdc0}) t])
;; 
JOKER FUNC fmt_test.TestFmtInterface has: 
;; (defn TestFmtInterface
;;   {:added "1.0"
;;    :go "testFmtInterface(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{4299878 0xc001b1bc60}) t])
;; 
JOKER FUNC fmt_test.TestFormatterFlags has: 
;; (defn TestFormatterFlags
;;   {:added "1.0"
;;    :go "testFormatterFlags(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{4354530 0xc001175780}) t])
;; 
JOKER FUNC fmt_test.TestFormatterPrintln has: 
;; (defn TestFormatterPrintln
;;   "TestFormatterPrintln checks Formatter with Sprint, Sprintln, Sprintf."
;;   {:added "1.0"
;;    :go "testFormatterPrintln(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{4347585 0xc002156860}) t])
;; 
JOKER FUNC fmt_test.TestHexByte has: 
;; (defn TestHexByte
;;   {:added "1.0"
;;    :go "testHexByte(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{4237276 0xc00063f820}) t])
;; 
JOKER FUNC fmt_test.TestHexBytes has: 
;; (defn TestHexBytes
;;   "Issue 9124.
;; %x on bytes couldn't handle non-space bytes terminating the scan."
;;   {:added "1.0"
;;    :go "testHexBytes(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{4230992 0xc0013d2e80}) t])
;; 
JOKER FUNC fmt_test.TestInf has: 
;; (defn TestInf
;;   {:added "1.0"
;;    :go "testInf(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{4218333 0xc00149fc60}) t])
;; 
JOKER FUNC fmt_test.TestIsSpace has: 
;; (defn TestIsSpace
;;   {:added "1.0"
;;    :go "testIsSpace(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{4351628 0xc001184fc0}) t])
;; 
JOKER FUNC fmt_test.TestLineByLineFscanf has: 
;; (defn TestLineByLineFscanf
;;   "TestLineByLineFscanf tests that Fscanf does not read past newline. Issue
;; 3481."
;;   {:added "1.0"
;;    :go "testLineByLineFscanf(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{4227016 0xc000523f80}) t])
;; 
JOKER FUNC fmt_test.TestMapPrinter has: 
;; (defn TestMapPrinter
;;   {:added "1.0"
;;    :go "testMapPrinter(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{4346002 0xc001fa55a0}) t])
;; 
JOKER FUNC fmt_test.TestMultiLine has: 
;; (defn TestMultiLine
;;   {:added "1.0"
;;    :go "testMultiLine(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{4225912 0xc000bb6f60}) t])
;; 
JOKER FUNC fmt_test.TestNaN has: 
;; (defn TestNaN
;;   {:added "1.0"
;;    :go "testNaN(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{4217670 0xc00149e6e0}) t])
;; 
JOKER FUNC fmt_test.TestNilDoesNotBecomeTyped has: 
;; (defn TestNilDoesNotBecomeTyped
;;   {:added "1.0"
;;    :go "testNilDoesNotBecomeTyped(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{4351994 0xc001185540}) t])
;; 
JOKER FUNC fmt_test.TestPanics has: 
;; (defn TestPanics
;;   {:added "1.0"
;;    :go "testPanics(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{4350656 0xc0011cdf20}) t])
;; 
JOKER FUNC fmt_test.TestParsenum has: 
;; (defn TestParsenum
;;   {:added "1.0"
;;    :go "testParsenum(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{4354735 0xc001175ca0}) t])
;; 
JOKER FUNC fmt_test.TestReorder has: 
;; (defn TestReorder
;;   {:added "1.0"
;;    :go "testReorder(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{4338729 0xc001df3f60}) t])
;; 
JOKER FUNC fmt_test.TestScan has: 
;; (defn TestScan
;;   {:added "1.0"
;;    :go "testScan(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{4215615 0xc00129a660}) t])
;; 
JOKER FUNC fmt_test.TestScanEmpty has: 
;; (defn TestScanEmpty
;;   "Empty strings are not valid input when scanning a string."
;;   {:added "1.0"
;;    :go "testScanEmpty(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{4220481 0xc001612980}) t])
;; 
JOKER FUNC fmt_test.TestScanInts has: 
;; (defn TestScanInts
;;   {:added "1.0"
;;    :go "testScanInts(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{4229416 0xc000476740}) t])
;; 
JOKER FUNC fmt_test.TestScanMultiple has: 
;; (defn TestScanMultiple
;;   {:added "1.0"
;;    :go "testScanMultiple(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{4219813 0xc001519bc0}) t])
;; 
JOKER FUNC fmt_test.TestScanNewlinesAreSpaces has: 
;; (defn TestScanNewlinesAreSpaces
;;   {:added "1.0"
;;    :go "testScanNewlinesAreSpaces(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{4232334 0xc0013fc6e0}) t])
;; 
JOKER FUNC fmt_test.TestScanNotPointer has: 
;; (defn TestScanNotPointer
;;   {:added "1.0"
;;    :go "testScanNotPointer(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{4221215 0xc001613540}) t])
;; 
JOKER FUNC fmt_test.TestScanOverflow has: 
;; (defn TestScanOverflow
;;   {:added "1.0"
;;    :go "testScanOverflow(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{4216709 0xc0012ea2c0}) t])
;; 
JOKER FUNC fmt_test.TestScanStateCount has: 
;; (defn TestScanStateCount
;;   {:added "1.0"
;;    :go "testScanStateCount(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{4227759 0xc000e78120}) t])
;; 
JOKER FUNC fmt_test.TestScanf has: 
;; (defn TestScanf
;;   {:added "1.0"
;;    :go "testScanf(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{4215888 0xc00129aea0}) t])
;; 
JOKER FUNC fmt_test.TestScanfMulti has: 
;; (defn TestScanfMulti
;;   {:added "1.0"
;;    :go "testScanfMulti(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{4219672 0xc0015197e0}) t])
;; 
JOKER FUNC fmt_test.TestScanfNewlineMatchFormat has: 
;; (defn TestScanfNewlineMatchFormat
;;   {:added "1.0"
;;    :go "testScanfNewlineMatchFormat(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{4233619 0xc000d2c100}) t])
;; 
JOKER FUNC fmt_test.TestScanln has: 
;; (defn TestScanln
;;   {:added "1.0"
;;    :go "testScanln(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{4215751 0xc00129aaa0}) t])
;; 
JOKER FUNC fmt_test.TestScanlnNewlinesTerminate has: 
;; (defn TestScanlnNewlinesTerminate
;;   {:added "1.0"
;;    :go "testScanlnNewlinesTerminate(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{4232896 0xc0013fd3e0}) t])
;; 
JOKER FUNC fmt_test.TestScanlnNoNewline has: 
;; (defn TestScanlnNoNewline
;;   {:added "1.0"
;;    :go "testScanlnNoNewline(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{4221518 0xc001613aa0}) t])
;; 
JOKER FUNC fmt_test.TestScanlnWithMiddleNewline has: 
;; (defn TestScanlnWithMiddleNewline
;;   {:added "1.0"
;;    :go "testScanlnWithMiddleNewline(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{4221831 0xc001613f80}) t])
;; 
JOKER FUNC fmt_test.TestSlicePrinter has: 
;; (defn TestSlicePrinter
;;   {:added "1.0"
;;    :go "testSlicePrinter(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{4345145 0xc001f586c0}) t])
;; 
JOKER FUNC fmt_test.TestSprintf has: 
;; (defn TestSprintf
;;   {:added "1.0"
;;    :go "testSprintf(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{4334517 0xc001ddf6a0}) t])
;; 
JOKER FUNC fmt_test.TestStringer has: 
;; (defn TestStringer
;;   {:added "1.0"
;;    :go "testStringer(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{4239206 0xc0012db660}) t])
;; 
JOKER FUNC fmt_test.TestStructPrinter has: 
;; (defn TestStructPrinter
;;   {:added "1.0"
;;    :go "testStructPrinter(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{4344526 0xc001eef3e0}) t])
;; 
JOKER FUNC fmt_test.TestUnreadRuneWithBufio has: 
;; (defn TestUnreadRuneWithBufio
;;   "TestUnreadRuneWithBufio verifies that, at least when using bufio, successive
;; calls to Fscan do not lose runes."
;;   {:added "1.0"
;;    :go "testUnreadRuneWithBufio(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{4224946 0xc000a57e60}) t])
;; 
JOKER FUNC fmt_test.TestWidthAndPrecision has: 
;; (defn TestWidthAndPrecision
;;   {:added "1.0"
;;    :go "testWidthAndPrecision(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{4349191 0xc0011cc840}) t])
;; 
JOKER FUNC fnv.BenchmarkFnv128KB has: 
;; (defn BenchmarkFnv128KB
;;   {:added "1.0"
;;    :go "benchmarkFnv128KB(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{5524164 0xc001ff1fa0}) b])
;; 
JOKER FUNC fnv.BenchmarkFnv128aKB has: 
;; (defn BenchmarkFnv128aKB
;;   {:added "1.0"
;;    :go "benchmarkFnv128aKB(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{5524233 0xc001fea100}) b])
;; 
JOKER FUNC fnv.BenchmarkFnv32KB has: 
;; (defn BenchmarkFnv32KB
;;   {:added "1.0"
;;    :go "benchmarkFnv32KB(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{5523895 0xc001ff1a20}) b])
;; 
JOKER FUNC fnv.BenchmarkFnv32aKB has: 
;; (defn BenchmarkFnv32aKB
;;   {:added "1.0"
;;    :go "benchmarkFnv32aKB(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{5523962 0xc001ff1b80}) b])
;; 
JOKER FUNC fnv.BenchmarkFnv64KB has: 
;; (defn BenchmarkFnv64KB
;;   {:added "1.0"
;;    :go "benchmarkFnv64KB(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{5524029 0xc001ff1ce0}) b])
;; 
JOKER FUNC fnv.BenchmarkFnv64aKB has: 
;; (defn BenchmarkFnv64aKB
;;   {:added "1.0"
;;    :go "benchmarkFnv64aKB(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{5524096 0xc001ff1e40}) b])
;; 
JOKER FUNC fnv.New128 has: 
;; (defn ^ABEND881(unrecognized Expr type *ast.SelectorExpr at: &{hash Hash}) New128
;;   "New128 returns a new 128-bit FNV-1 hash.Hash.
;; Its Sum method will lay the value out in big-endian byte order."
;;   {:added "1.0"
;;    :go "new128()"}
;;   [])
;; 
JOKER FUNC fnv.New128a has: 
;; (defn ^ABEND881(unrecognized Expr type *ast.SelectorExpr at: &{hash Hash}) New128a
;;   "New128a returns a new 128-bit FNV-1a hash.Hash.
;; Its Sum method will lay the value out in big-endian byte order."
;;   {:added "1.0"
;;    :go "new128a()"}
;;   [])
;; 
JOKER FUNC fnv.New32 has: 
;; (defn ^ABEND881(unrecognized Expr type *ast.SelectorExpr at: &{hash Hash32}) New32
;;   "New32 returns a new 32-bit FNV-1 hash.Hash.
;; Its Sum method will lay the value out in big-endian byte order."
;;   {:added "1.0"
;;    :go "new32()"}
;;   [])
;; 
JOKER FUNC fnv.New32a has: 
;; (defn ^ABEND881(unrecognized Expr type *ast.SelectorExpr at: &{hash Hash32}) New32a
;;   "New32a returns a new 32-bit FNV-1a hash.Hash.
;; Its Sum method will lay the value out in big-endian byte order."
;;   {:added "1.0"
;;    :go "new32a()"}
;;   [])
;; 
JOKER FUNC fnv.New64 has: 
;; (defn ^ABEND881(unrecognized Expr type *ast.SelectorExpr at: &{hash Hash64}) New64
;;   "New64 returns a new 64-bit FNV-1 hash.Hash.
;; Its Sum method will lay the value out in big-endian byte order."
;;   {:added "1.0"
;;    :go "new64()"}
;;   [])
;; 
JOKER FUNC fnv.New64a has: 
;; (defn ^ABEND881(unrecognized Expr type *ast.SelectorExpr at: &{hash Hash64}) New64a
;;   "New64a returns a new 64-bit FNV-1a hash.Hash.
;; Its Sum method will lay the value out in big-endian byte order."
;;   {:added "1.0"
;;    :go "new64a()"}
;;   [])
;; 
JOKER FUNC fnv.TestGolden128 has: 
;; (defn TestGolden128
;;   {:added "1.0"
;;    :go "testGolden128(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{5520491 0xc001ffefa0}) t])
;; 
JOKER FUNC fnv.TestGolden128a has: 
;; (defn TestGolden128a
;;   {:added "1.0"
;;    :go "testGolden128a(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{5520566 0xc001fff120}) t])
;; 
JOKER FUNC fnv.TestGolden32 has: 
;; (defn TestGolden32
;;   {:added "1.0"
;;    :go "testGolden32(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{5520200 0xc001ffe980}) t])
;; 
JOKER FUNC fnv.TestGolden32a has: 
;; (defn TestGolden32a
;;   {:added "1.0"
;;    :go "testGolden32a(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{5520272 0xc001ffeb20}) t])
;; 
JOKER FUNC fnv.TestGolden64 has: 
;; (defn TestGolden64
;;   {:added "1.0"
;;    :go "testGolden64(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{5520345 0xc001ffeca0}) t])
;; 
JOKER FUNC fnv.TestGolden64a has: 
;; (defn TestGolden64a
;;   {:added "1.0"
;;    :go "testGolden64a(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{5520417 0xc001ffee20}) t])
;; 
JOKER FUNC fnv.TestGoldenMarshal has: 
;; (defn TestGoldenMarshal
;;   {:added "1.0"
;;    :go "testGoldenMarshal(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{5521077 0xc001fffd60}) t])
;; 
JOKER FUNC fnv.TestIntegrity128 has: 
;; (defn TestIntegrity128
;;   {:added "1.0"
;;    :go "testIntegrity128(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{5522718 0xc001ff0100}) t])
;; 
JOKER FUNC fnv.TestIntegrity128a has: 
;; (defn TestIntegrity128a
;;   {:added "1.0"
;;    :go "testIntegrity128a(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{5522788 0xc001ff0260}) t])
;; 
JOKER FUNC fnv.TestIntegrity32 has: 
;; (defn TestIntegrity32
;;   {:added "1.0"
;;    :go "testIntegrity32(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{5522446 0xc001ff5b60}) t])
;; 
JOKER FUNC fnv.TestIntegrity32a has: 
;; (defn TestIntegrity32a
;;   {:added "1.0"
;;    :go "testIntegrity32a(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{5522514 0xc001ff5ce0}) t])
;; 
JOKER FUNC fnv.TestIntegrity64 has: 
;; (defn TestIntegrity64
;;   {:added "1.0"
;;    :go "testIntegrity64(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{5522582 0xc001ff5e40}) t])
;; 
JOKER FUNC fnv.TestIntegrity64a has: 
;; (defn TestIntegrity64a
;;   {:added "1.0"
;;    :go "testIntegrity64a(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{5522650 0xc001ff5fa0}) t])
;; 
JOKER FUNC format.Node has: 
;; (defn ^Error Node
;;   "Node formats node in canonical gofmt style and writes the result to dst.
;; 
;; The node type must be *ast.File, *printer.CommentedNode, []ast.Decl,
;; []ast.Stmt, or assignment-compatible to ast.Expr, ast.Decl, ast.Spec,
;; or ast.Stmt. Node does not modify node. Imports are not sorted for
;; nodes representing partial source files (for instance, if the node is
;; not an *ast.File or a *printer.CommentedNode not wrapping an *ast.File).
;; 
;; The function may return early (before the entire result is written)
;; and return a formatting error, for instance due to an incorrect AST."
;;   {:added "1.0"
;;    :go "node(dst, fset, node)"}
;;   [^ABEND881(unrecognized Expr type *ast.SelectorExpr at: &{io Writer}) dst, ^ABEND881(unrecognized Expr type *ast.StarExpr at: &{4691719 0xc001a5ce00}) fset, ^ABEND881(unrecognized Expr type *ast.InterfaceType at: &{4691740 0xc001a58ea0 false}) node])
;; 
JOKER FUNC format.Source has: 
;; (defn ^[[ABEND042(cannot find typename format.byte)] Error] Source
;;   "Source formats src in canonical gofmt style and returns the result
;; or an (I/O or syntax) error. src is expected to be a syntactically
;; correct Go source file, or a list of Go declarations or statements.
;; 
;; If src is a partial source file, the leading and trailing space of src
;; is applied to the result (such that it has the same leading and trailing
;; space as src), and the result is indented by the same amount as the first
;; line of src containing code. Imports are not sorted for partial source files."
;;   {:added "1.0"
;;    :go "source(src)"}
;;   [^ABEND881(unrecognized Expr type *ast.ArrayType at: &{4693303 <nil> byte}) src])
;; 
JOKER FUNC format.String has: 
(defn ^[String Error] String
  {:added "1.0"
   :go "string(s)"}
  [^String s])

JOKER FUNC format.TestNode has: 
;; (defn TestNode
;;   {:added "1.0"
;;    :go "testNode(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{4682407 0xc0017e08a0}) t])
;; 
JOKER FUNC format.TestPartial has: 
;; (defn TestPartial
;;   {:added "1.0"
;;    :go "testPartial(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{4684438 0xc001a4e2c0}) t])
;; 
JOKER FUNC format.TestSource has: 
;; (defn TestSource
;;   {:added "1.0"
;;    :go "testSource(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{4682787 0xc0017e1160}) t])
;; 
JOKER FUNC format_test.ExampleNode has: 
;; (defn ExampleNode
;;   {:added "1.0"
;;    :go "exampleNode()"}
;;   [])
;; 
JOKER FUNC gif.BenchmarkDecode has: 
;; (defn BenchmarkDecode
;;   {:added "1.0"
;;    :go "benchmarkDecode(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{6122969 0xc002721280}) b])
;; 
JOKER FUNC gif.BenchmarkEncode has: 
;; (defn BenchmarkEncode
;;   {:added "1.0"
;;    :go "benchmarkEncode(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{6091567 0xc0023d0d80}) b])
;; 
JOKER FUNC gif.BenchmarkQuantizedEncode has: 
;; (defn BenchmarkQuantizedEncode
;;   {:added "1.0"
;;    :go "benchmarkQuantizedEncode(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{6092260 0xc0023d1ee0}) b])
;; 
JOKER FUNC gif.Decode has: 
;; (defn ^[ABEND881(unrecognized Expr type *ast.SelectorExpr at: &{image Image}) Error] Decode
;;   "Decode reads a GIF image from r and returns the first embedded
;; image as an image.Image."
;;   {:added "1.0"
;;    :go "decode(r)"}
;;   [^ABEND881(unrecognized Expr type *ast.SelectorExpr at: &{io Reader}) r])
;; 
JOKER FUNC gif.DecodeAll has: 
;; (defn ^[{:image ^ABEND881(unrecognized Expr type *ast.ArrayType at: &{6108188 <nil> 0xc002576f00}) Image, :delay ^ABEND881(unrecognized Expr type *ast.ArrayType at: &{6108239 <nil> int}) Delay, :loopcount ^Int LoopCount, :disposal ^ABEND881(unrecognized Expr type *ast.ArrayType at: &{6108832 <nil> byte}) Disposal, :config ^ABEND881(unrecognized Expr type *ast.SelectorExpr at: &{image Config}) Config, :backgroundindex BackgroundIndex} Error] DecodeAll
;;   "DecodeAll reads a GIF image from r and returns the sequential frames
;; and timing information."
;;   {:added "1.0"
;;    :go "decodeAll(r)"}
;;   [^ABEND881(unrecognized Expr type *ast.SelectorExpr at: &{io Reader}) r])
;; 
JOKER FUNC gif.DecodeConfig has: 
;; (defn ^[ABEND881(unrecognized Expr type *ast.SelectorExpr at: &{image Config}) Error] DecodeConfig
;;   "DecodeConfig returns the global color model and dimensions of a GIF image
;; without decoding the entire image."
;;   {:added "1.0"
;;    :go "decodeConfig(r)"}
;;   [^ABEND881(unrecognized Expr type *ast.SelectorExpr at: &{io Reader}) r])
;; 
JOKER FUNC gif.Encode has: 
;; (defn ^Error Encode
;;   "Encode writes the Image m to w in GIF format."
;;   {:added "1.0"
;;    :go "encode(w, m, o)"}
;;   [^ABEND881(unrecognized Expr type *ast.SelectorExpr at: &{io Writer}) w, ^ABEND881(unrecognized Expr type *ast.SelectorExpr at: &{image Image}) m, ^ABEND881(unrecognized Expr type *ast.StarExpr at: &{6133989 Options}) o])
;; 
JOKER FUNC gif.EncodeAll has: 
;; (defn ^Error EncodeAll
;;   "EncodeAll writes the images in g to w in GIF format with the
;; given loop count and delay between frames."
;;   {:added "1.0"
;;    :go "encodeAll(w, g)"}
;;   [^ABEND881(unrecognized Expr type *ast.SelectorExpr at: &{io Writer}) w, ^ABEND881(unrecognized Expr type *ast.StarExpr at: &{6132718 GIF}) g])
;; 
JOKER FUNC gif.TestBounds has: 
;; (defn TestBounds
;;   {:added "1.0"
;;    :go "testBounds(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{6116838 0xc002649e40}) t])
;; 
JOKER FUNC gif.TestColorTablesMatch has: 
;; (defn TestColorTablesMatch
;;   {:added "1.0"
;;    :go "testColorTablesMatch(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{6089631 0xc0023a6980}) t])
;; 
JOKER FUNC gif.TestDecode has: 
;; (defn TestDecode
;;   {:added "1.0"
;;    :go "testDecode(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{6111608 0xc0025e92c0}) t])
;; 
JOKER FUNC gif.TestDecodeMemoryConsumption has: 
;; (defn TestDecodeMemoryConsumption
;;   "See golang.org/issue/22237"
;;   {:added "1.0"
;;    :go "testDecodeMemoryConsumption(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{6122107 0xc002720020}) t])
;; 
JOKER FUNC gif.TestEncodeAllFramesOutOfBounds has: 
;; (defn TestEncodeAllFramesOutOfBounds
;;   {:added "1.0"
;;    :go "testEncodeAllFramesOutOfBounds(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{6084901 0xc00231caa0}) t])
;; 
JOKER FUNC gif.TestEncodeAllGo1Dot4 has: 
;; (defn TestEncodeAllGo1Dot4
;;   {:added "1.0"
;;    :go "testEncodeAllGo1Dot4(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{6083783 0xc002227700}) t])
;; 
JOKER FUNC gif.TestEncodeAllGo1Dot5 has: 
;; (defn TestEncodeAllGo1Dot5
;;   {:added "1.0"
;;    :go "testEncodeAllGo1Dot5(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{6083874 0xc002227880}) t])
;; 
JOKER FUNC gif.TestEncodeAllGo1Dot5GlobalColorModel has: 
;; (defn TestEncodeAllGo1Dot5GlobalColorModel
;;   {:added "1.0"
;;    :go "testEncodeAllGo1Dot5GlobalColorModel(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{6083980 0xc002227a00}) t])
;; 
JOKER FUNC gif.TestEncodeBadPalettes has: 
;; (defn TestEncodeBadPalettes
;;   {:added "1.0"
;;    :go "testEncodeBadPalettes(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{6088896 0xc00236db60}) t])
;; 
JOKER FUNC gif.TestEncodeCroppedSubImages has: 
;; (defn TestEncodeCroppedSubImages
;;   {:added "1.0"
;;    :go "testEncodeCroppedSubImages(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{6090756 0xc0023a7aa0}) t])
;; 
JOKER FUNC gif.TestEncodeImplicitConfigSize has: 
;; (defn TestEncodeImplicitConfigSize
;;   {:added "1.0"
;;    :go "testEncodeImplicitConfigSize(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{6086273 0xc00234ea40}) t])
;; 
JOKER FUNC gif.TestEncodeMismatchDelay has: 
;; (defn TestEncodeMismatchDelay
;;   {:added "1.0"
;;    :go "testEncodeMismatchDelay(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{6084057 0xc002227b80}) t])
;; 
JOKER FUNC gif.TestEncodeNonZeroMinPoint has: 
;; (defn TestEncodeNonZeroMinPoint
;;   {:added "1.0"
;;    :go "testEncodeNonZeroMinPoint(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{6085652 0xc00231d9c0}) t])
;; 
JOKER FUNC gif.TestEncodePalettes has: 
;; (defn TestEncodePalettes
;;   {:added "1.0"
;;    :go "testEncodePalettes(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{6087358 0xc00234f520}) t])
;; 
JOKER FUNC gif.TestEncodeZeroGIF has: 
;; (defn TestEncodeZeroGIF
;;   {:added "1.0"
;;    :go "testEncodeZeroGIF(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{6084731 0xc00231c800}) t])
;; 
JOKER FUNC gif.TestLoopCount has: 
;; (defn TestLoopCount
;;   {:added "1.0"
;;    :go "testLoopCount(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{6119833 0xc002712340}) t])
;; 
JOKER FUNC gif.TestNoPalette has: 
;; (defn TestNoPalette
;;   {:added "1.0"
;;    :go "testNoPalette(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{6117441 0xc00265e6a0}) t])
;; 
JOKER FUNC gif.TestPixelOutsidePaletteRange has: 
;; (defn TestPixelOutsidePaletteRange
;;   {:added "1.0"
;;    :go "testPixelOutsidePaletteRange(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{6118128 0xc00265ef60}) t])
;; 
JOKER FUNC gif.TestSubImage has: 
;; (defn TestSubImage
;;   {:added "1.0"
;;    :go "testSubImage(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{6079454 0xc0021b06e0}) t])
;; 
JOKER FUNC gif.TestTransparentIndex has: 
;; (defn TestTransparentIndex
;;   {:added "1.0"
;;    :go "testTransparentIndex(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{6114869 0xc0025f7a40}) t])
;; 
JOKER FUNC gif.TestTransparentPixelOutsidePaletteRange has: 
;; (defn TestTransparentPixelOutsidePaletteRange
;;   {:added "1.0"
;;    :go "testTransparentPixelOutsidePaletteRange(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{6118923 0xc00265f9a0}) t])
;; 
JOKER FUNC gif.TestUnexpectedEOF has: 
;; (defn TestUnexpectedEOF
;;   {:added "1.0"
;;    :go "testUnexpectedEOF(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{6121659 0xc0027138c0}) t])
;; 
JOKER FUNC gif.TestWriter has: 
;; (defn TestWriter
;;   {:added "1.0"
;;    :go "testWriter(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{6078707 0xc0021a57e0}) t])
;; 
JOKER FUNC gob.BenchmarkDecodeComplex128Slice has: 
;; (defn BenchmarkDecodeComplex128Slice
;;   {:added "1.0"
;;    :go "benchmarkDecodeComplex128Slice(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{3462038 0xc0018dce00}) b])
;; 
JOKER FUNC gob.BenchmarkDecodeFloat64Slice has: 
;; (defn BenchmarkDecodeFloat64Slice
;;   {:added "1.0"
;;    :go "benchmarkDecodeFloat64Slice(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{3462192 0xc0018dd100}) b])
;; 
JOKER FUNC gob.BenchmarkDecodeInt32Slice has: 
;; (defn BenchmarkDecodeInt32Slice
;;   {:added "1.0"
;;    :go "benchmarkDecodeInt32Slice(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{3462337 0xc0018dd3e0}) b])
;; 
JOKER FUNC gob.BenchmarkDecodeInterfaceSlice has: 
;; (defn BenchmarkDecodeInterfaceSlice
;;   {:added "1.0"
;;    :go "benchmarkDecodeInterfaceSlice(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{3462638 0xc0018dd9a0}) b])
;; 
JOKER FUNC gob.BenchmarkDecodeMap has: 
;; (defn BenchmarkDecodeMap
;;   {:added "1.0"
;;    :go "benchmarkDecodeMap(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{3462791 0xc0018ddc80}) b])
;; 
JOKER FUNC gob.BenchmarkDecodeStringSlice has: 
;; (defn BenchmarkDecodeStringSlice
;;   {:added "1.0"
;;    :go "benchmarkDecodeStringSlice(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{3462479 0xc0018dd6c0}) b])
;; 
JOKER FUNC gob.BenchmarkEncodeComplex128Slice has: 
;; (defn BenchmarkEncodeComplex128Slice
;;   {:added "1.0"
;;    :go "benchmarkEncodeComplex128Slice(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{3460193 0xc0018d2700}) b])
;; 
JOKER FUNC gob.BenchmarkEncodeFloat64Slice has: 
;; (defn BenchmarkEncodeFloat64Slice
;;   {:added "1.0"
;;    :go "benchmarkEncodeFloat64Slice(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{3460347 0xc0018d2a00}) b])
;; 
JOKER FUNC gob.BenchmarkEncodeInt32Slice has: 
;; (defn BenchmarkEncodeInt32Slice
;;   {:added "1.0"
;;    :go "benchmarkEncodeInt32Slice(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{3460492 0xc0018d2ce0}) b])
;; 
JOKER FUNC gob.BenchmarkEncodeInterfaceSlice has: 
;; (defn BenchmarkEncodeInterfaceSlice
;;   {:added "1.0"
;;    :go "benchmarkEncodeInterfaceSlice(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{3460803 0xc0018d32e0}) b])
;; 
JOKER FUNC gob.BenchmarkEncodeStringSlice has: 
;; (defn BenchmarkEncodeStringSlice
;;   {:added "1.0"
;;    :go "benchmarkEncodeStringSlice(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{3460644 0xc0018d3000}) b])
;; 
JOKER FUNC gob.BenchmarkEndToEndByteBuffer has: 
;; (defn BenchmarkEndToEndByteBuffer
;;   {:added "1.0"
;;    :go "benchmarkEndToEndByteBuffer(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{3457990 0xc0018c7d40}) b])
;; 
JOKER FUNC gob.BenchmarkEndToEndPipe has: 
;; (defn BenchmarkEndToEndPipe
;;   {:added "1.0"
;;    :go "benchmarkEndToEndPipe(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{3457717 0xc0018c7760}) b])
;; 
JOKER FUNC gob.BenchmarkEndToEndSliceByteBuffer has: 
;; (defn BenchmarkEndToEndSliceByteBuffer
;;   {:added "1.0"
;;    :go "benchmarkEndToEndSliceByteBuffer(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{3458283 0xc0018ce380}) b])
;; 
JOKER FUNC gob.NewDecoder has: 
;; (defn ^{:mutex ^ABEND881(unrecognized Expr type *ast.SelectorExpr at: &{sync Mutex}) mutex, :r ^ABEND881(unrecognized Expr type *ast.SelectorExpr at: &{io Reader}) r, :buf buf, :wiretype ^ABEND881(unrecognized Expr type *ast.MapType at: &{3400972 typeId 0xc00180c980}) wireType, :decodercache ^ABEND881(unrecognized Expr type *ast.MapType at: &{3401069 0xc00180ca40 0xc001803620}) decoderCache, :ignorercache ^ABEND881(unrecognized Expr type *ast.MapType at: &{3401152 typeId 0xc00180cba0}) ignorerCache, :freelist ^ABEND881(unrecognized Expr type *ast.StarExpr at: &{3401235 decoderState}) freeList, :countbuf ^ABEND881(unrecognized Expr type *ast.ArrayType at: &{3401340 <nil> byte}) countBuf, :err err} NewDecoder
;;   "NewDecoder returns a new decoder that reads from the io.Reader.
;; If r does not also implement io.ByteReader, it will be wrapped in a
;; bufio.Reader."
;;   {:added "1.0"
;;    :go "newDecoder(r)"}
;;   [^ABEND881(unrecognized Expr type *ast.SelectorExpr at: &{io Reader}) r])
;; 
JOKER FUNC gob.NewEncoder has: 
;; (defn ^{:mutex ^ABEND881(unrecognized Expr type *ast.SelectorExpr at: &{sync Mutex}) mutex, :w ^ABEND881(unrecognized Expr type *ast.ArrayType at: &{3581713 <nil> 0xc001aaa380}) w, :sent ^ABEND881(unrecognized Expr type *ast.MapType at: &{3581775 0xc001aaa460 typeId}) sent, :countstate ^ABEND881(unrecognized Expr type *ast.StarExpr at: &{3581845 encoderState}) countState, :freelist ^ABEND881(unrecognized Expr type *ast.StarExpr at: &{3581909 encoderState}) freeList, :bytebuf byteBuf, :err err} NewEncoder
;;   "NewEncoder returns a new encoder that will transmit on the io.Writer."
;;   {:added "1.0"
;;    :go "newEncoder(w)"}
;;   [^ABEND881(unrecognized Expr type *ast.SelectorExpr at: &{io Writer}) w])
;; 
JOKER FUNC gob.Register has: 
;; (defn Register
;;   "Register records a type, identified by a value for that type, under its
;; internal type name. That name will identify the concrete type of a value
;; sent or received as an interface variable. Only types that will be
;; transferred as implementations of interface values need to be registered.
;; Expecting to be used only during initialization, it panics if the mapping
;; between types and names is not a bijection."
;;   {:added "1.0"
;;    :go "register(value)"}
;;   [^ABEND881(unrecognized Expr type *ast.InterfaceType at: &{3369725 0xc0011a3f20 false}) value])
;; 
JOKER FUNC gob.RegisterName has: 
;; (defn RegisterName
;;   "RegisterName is like Register but uses the provided name rather than the
;; type's default."
;;   {:added "1.0"
;;    :go "registerName(name, value)"}
;;   [^String name, ^ABEND881(unrecognized Expr type *ast.InterfaceType at: &{3368504 0xc0011a3b60 false}) value])
;; 
JOKER FUNC gob.Test29ElementSlice has: 
;; (defn Test29ElementSlice
;;   {:added "1.0"
;;    :go "test29ElementSlice(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{3542300 0xc001a27940}) t])
;; 
JOKER FUNC gob.TestArray has: 
;; (defn TestArray
;;   {:added "1.0"
;;    :go "testArray(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{3525362 0xc0019ec320}) t])
;; 
JOKER FUNC gob.TestArrayType has: 
;; (defn TestArrayType
;;   {:added "1.0"
;;    :go "testArrayType(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{3374663 0xc001243200}) t])
;; 
JOKER FUNC gob.TestAutoIndirection has: 
;; (defn TestAutoIndirection
;;   {:added "1.0"
;;    :go "testAutoIndirection(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{3483140 0xc00193f260}) t])
;; 
JOKER FUNC gob.TestBadCount has: 
;; (defn TestBadCount
;;   "Used to crash: negative count in recvMessage."
;;   {:added "1.0"
;;    :go "testBadCount(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{3535597 0xc001a130a0}) t])
;; 
JOKER FUNC gob.TestBadData has: 
;; (defn TestBadData
;;   "TestBadData tests that various problems caused by malformed input
;; are caught as errors and do not cause panics."
;;   {:added "1.0"
;;    :go "testBadData(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{3544468 0xc001a2f4a0}) t])
;; 
JOKER FUNC gob.TestBadRecursiveType has: 
;; (defn TestBadRecursiveType
;;   {:added "1.0"
;;    :go "testBadRecursiveType(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{3486412 0xc00194a840}) t])
;; 
JOKER FUNC gob.TestBasic has: 
;; (defn TestBasic
;;   "Sanity checks"
;;   {:added "1.0"
;;    :go "testBasic(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{3373831 0xc001242320}) t])
;; 
JOKER FUNC gob.TestBasicEncoderDecoder has: 
;; (defn TestBasicEncoderDecoder
;;   "Test basic operations in a safe manner."
;;   {:added "1.0"
;;    :go "testBasicEncoderDecoder(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{3518202 0xc0019d13a0}) t])
;; 
JOKER FUNC gob.TestCatchInvalidNilValue has: 
;; (defn TestCatchInvalidNilValue
;;   "Test that untyped nils generate an error, not a panic.
;; See Issue 16204."
;;   {:added "1.0"
;;    :go "testCatchInvalidNilValue(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{3538652 0xc001a20840}) t])
;; 
JOKER FUNC gob.TestChanFuncIgnored has: 
;; (defn TestChanFuncIgnored
;;   {:added "1.0"
;;    :go "testChanFuncIgnored(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{3536721 0xc001a183a0}) t])
;; 
JOKER FUNC gob.TestCountDecodeMallocs has: 
;; (defn TestCountDecodeMallocs
;;   {:added "1.0"
;;    :go "testCountDecodeMallocs(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{3459169 0xc0018cf420}) t])
;; 
JOKER FUNC gob.TestCountEncodeMallocs has: 
;; (defn TestCountEncodeMallocs
;;   {:added "1.0"
;;    :go "testCountEncodeMallocs(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{3458625 0xc0018ceb20}) t])
;; 
JOKER FUNC gob.TestDebugSingleton has: 
;; (defn TestDebugSingleton
;;   {:added "1.0"
;;    :go "testDebugSingleton(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{3494621 0xc001965560}) t])
;; 
JOKER FUNC gob.TestDebugStruct has: 
;; (defn TestDebugStruct
;;   {:added "1.0"
;;    :go "testDebugStruct(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{3495454 0xc00196e5a0}) t])
;; 
JOKER FUNC gob.TestDecodeIntoNothing has: 
;; (defn TestDecodeIntoNothing
;;   {:added "1.0"
;;    :go "testDecodeIntoNothing(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{3530774 0xc0019fbb80}) t])
;; 
JOKER FUNC gob.TestDefaultsInArray has: 
;; (defn TestDefaultsInArray
;;   "Regression test for bug: must send zero values inside arrays"
;;   {:added "1.0"
;;    :go "testDefaultsInArray(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{3526314 0xc0019ed4e0}) t])
;; 
JOKER FUNC gob.TestEncodeIntSlice has: 
;; (defn TestEncodeIntSlice
;;   {:added "1.0"
;;    :go "testEncodeIntSlice(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{3519118 0xc0019d4440}) t])
;; 
JOKER FUNC gob.TestEncoderDecoder has: 
;; (defn TestEncoderDecoder
;;   {:added "1.0"
;;    :go "testEncoderDecoder(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{3520902 0xc0019d8b00}) t])
;; 
JOKER FUNC gob.TestEndToEnd has: 
;; (defn TestEndToEnd
;;   {:added "1.0"
;;    :go "testEndToEnd(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{3476961 0xc00191faa0}) t])
;; 
JOKER FUNC gob.TestErrorForHugeSlice has: 
;; (defn TestErrorForHugeSlice
;;   "Don't crash, just give error when allocating a huge slice.
;; Issue 8084."
;;   {:added "1.0"
;;    :go "testErrorForHugeSlice(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{3542808 0xc001a2e180}) t])
;; 
JOKER FUNC gob.TestErrorInvalidTypeId has: 
;; (defn TestErrorInvalidTypeId
;;   "Don't crash, just give error with invalid type id.
;; Issue 9649."
;;   {:added "1.0"
;;    :go "testErrorInvalidTypeId(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{3498448 0xc001975820}) t])
;; 
JOKER FUNC gob.TestFuzz has: 
;; (defn TestFuzz
;;   "This does some "fuzz testing" by attempting to decode a sequence of random bytes."
;;   {:added "1.0"
;;    :go "testFuzz(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{3496296 0xc00196f600}) t])
;; 
JOKER FUNC gob.TestFuzzOneByte has: 
;; (defn TestFuzzOneByte
;;   "TestFuzzOneByte tries to decode corrupted input sequences
;; and checks that no panic occurs."
;;   {:added "1.0"
;;    :go "testFuzzOneByte(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{3497407 0xc0019747a0}) t])
;; 
JOKER FUNC gob.TestFuzzRegressions has: 
;; (defn TestFuzzRegressions
;;   {:added "1.0"
;;    :go "testFuzzRegressions(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{3496694 0xc00196fce0}) t])
;; 
JOKER FUNC gob.TestGobEncodeIsZero has: 
;; (defn TestGobEncodeIsZero
;;   {:added "1.0"
;;    :go "testGobEncodeIsZero(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{3516771 0xc0019c7940}) t])
;; 
JOKER FUNC gob.TestGobEncodePtrError has: 
;; (defn TestGobEncodePtrError
;;   {:added "1.0"
;;    :go "testGobEncodePtrError(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{3517176 0xc0019d0280}) t])
;; 
JOKER FUNC gob.TestGobEncoderArrayField has: 
;; (defn TestGobEncoderArrayField
;;   "Test with a large field with methods."
;;   {:added "1.0"
;;    :go "testGobEncoderArrayField(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{3506330 0xc0019a1960}) t])
;; 
JOKER FUNC gob.TestGobEncoderExtraIndirect has: 
;; (defn TestGobEncoderExtraIndirect
;;   "This was a bug: the receiver has a different indirection level
;; than the variable."
;;   {:added "1.0"
;;    :go "testGobEncoderExtraIndirect(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{3515514 0xc0019c6400}) t])
;; 
JOKER FUNC gob.TestGobEncoderField has: 
;; (defn TestGobEncoderField
;;   {:added "1.0"
;;    :go "testGobEncoderField(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{3504318 0xc0019912a0}) t])
;; 
JOKER FUNC gob.TestGobEncoderFieldTypeError has: 
;; (defn TestGobEncoderFieldTypeError
;;   {:added "1.0"
;;    :go "testGobEncoderFieldTypeError(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{3511994 0xc0019bc2a0}) t])
;; 
JOKER FUNC gob.TestGobEncoderFieldsOfDifferentType has: 
;; (defn TestGobEncoderFieldsOfDifferentType
;;   "As long as the fields have the same name and implement the
;; interface, we can cross-connect them. Not sure it's useful
;; and may even be bad but it works and it's hard to prevent
;; without exposing the contents of the object, which would
;; defeat the purpose."
;;   {:added "1.0"
;;    :go "testGobEncoderFieldsOfDifferentType(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{3507732 0xc0019a5300}) t])
;; 
JOKER FUNC gob.TestGobEncoderIgnoreNilEncoder has: 
;; (defn TestGobEncoderIgnoreNilEncoder
;;   {:added "1.0"
;;    :go "testGobEncoderIgnoreNilEncoder(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{3514626 0xc0019c1320}) t])
;; 
JOKER FUNC gob.TestGobEncoderIgnoreNonStructField has: 
;; (defn TestGobEncoderIgnoreNonStructField
;;   {:added "1.0"
;;    :go "testGobEncoderIgnoreNonStructField(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{3514111 0xc0019c0940}) t])
;; 
JOKER FUNC gob.TestGobEncoderIgnoreStructField has: 
;; (defn TestGobEncoderIgnoreStructField
;;   {:added "1.0"
;;    :go "testGobEncoderIgnoreStructField(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{3513681 0xc0019c00e0}) t])
;; 
JOKER FUNC gob.TestGobEncoderIndirectArrayField has: 
;; (defn TestGobEncoderIndirectArrayField
;;   "Test an indirection to a large field with methods."
;;   {:added "1.0"
;;    :go "testGobEncoderIndirectArrayField(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{3506880 0xc0019a4520}) t])
;; 
JOKER FUNC gob.TestGobEncoderIndirectField has: 
;; (defn TestGobEncoderIndirectField
;;   "GobEncode/Decode should work even if the value is
;; more indirect than the receiver."
;;   {:added "1.0"
;;    :go "testGobEncoderIndirectField(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{3505805 0xc0019a0e80}) t])
;; 
JOKER FUNC gob.TestGobEncoderNonStructSingleton has: 
;; (defn TestGobEncoderNonStructSingleton
;;   {:added "1.0"
;;    :go "testGobEncoderNonStructSingleton(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{3513316 0xc0019bd960}) t])
;; 
JOKER FUNC gob.TestGobEncoderPointerThenValue has: 
;; (defn TestGobEncoderPointerThenValue
;;   "Test that we can use a pointer then a value type of a GobEncoder
;; in the same encoded value."
;;   {:added "1.0"
;;    :go "testGobEncoderPointerThenValue(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{3510732 0xc0019b2880}) t])
;; 
JOKER FUNC gob.TestGobEncoderStructSingleton has: 
;; (defn TestGobEncoderStructSingleton
;;   "Even though ByteStruct is a struct, it's treated as a singleton at the top level."
;;   {:added "1.0"
;;    :go "testGobEncoderStructSingleton(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{3512948 0xc0019bd1a0}) t])
;; 
JOKER FUNC gob.TestGobEncoderValueEncoder has: 
;; (defn TestGobEncoderValueEncoder
;;   "Test that we can encode a value and decode into a pointer."
;;   {:added "1.0"
;;    :go "testGobEncoderValueEncoder(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{3508555 0xc0019ac300}) t])
;; 
JOKER FUNC gob.TestGobEncoderValueField has: 
;; (defn TestGobEncoderValueField
;;   "Even though the field is a value, we can still take its address
;; and should be able to call the methods."
;;   {:added "1.0"
;;    :go "testGobEncoderValueField(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{3505265 0xc0019a0540}) t])
;; 
JOKER FUNC gob.TestGobEncoderValueThenPointer has: 
;; (defn TestGobEncoderValueThenPointer
;;   "Test that we can use a value then a pointer type of a GobEncoder
;; in the same encoded value. Bug 4647."
;;   {:added "1.0"
;;    :go "testGobEncoderValueThenPointer(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{3509235 0xc0019acda0}) t])
;; 
JOKER FUNC gob.TestGobMapInterfaceEncode has: 
;; (defn TestGobMapInterfaceEncode
;;   {:added "1.0"
;;    :go "testGobMapInterfaceEncode(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{3533900 0xc001a0d0e0}) t])
;; 
JOKER FUNC gob.TestGobPtrSlices has: 
;; (defn TestGobPtrSlices
;;   {:added "1.0"
;;    :go "testGobPtrSlices(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{3537530 0xc001a19520}) t])
;; 
JOKER FUNC gob.TestHugeWriteFails has: 
;; (defn TestHugeWriteFails
;;   "TestHugeWriteFails tests that enormous messages trigger an error."
;;   {:added "1.0"
;;    :go "testHugeWriteFails(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{3544999 0xc001a2fe40}) t])
;; 
JOKER FUNC gob.TestIgnoreInterface has: 
;; (defn TestIgnoreInterface
;;   {:added "1.0"
;;    :go "testIgnoreInterface(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{3493222 0xc0019618c0}) t])
;; 
JOKER FUNC gob.TestIgnoreRecursiveType has: 
;; (defn TestIgnoreRecursiveType
;;   {:added "1.0"
;;    :go "testIgnoreRecursiveType(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{3531579 0xc001a02a80}) t])
;; 
JOKER FUNC gob.TestIgnoredFields has: 
;; (defn TestIgnoredFields
;;   {:added "1.0"
;;    :go "testIgnoredFields(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{3485698 0xc001945760}) t])
;; 
JOKER FUNC gob.TestIndirectSliceMapArray has: 
;; (defn TestIndirectSliceMapArray
;;   {:added "1.0"
;;    :go "testIndirectSliceMapArray(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{3486946 0xc00194b280}) t])
;; 
JOKER FUNC gob.TestIntCodec has: 
;; (defn TestIntCodec
;;   "Test basic encode/decode routines for signed integers"
;;   {:added "1.0"
;;    :go "testIntCodec(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{3465923 0xc0018fb320}) t])
;; 
JOKER FUNC gob.TestInterface has: 
;; (defn TestInterface
;;   {:added "1.0"
;;    :go "testInterface(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{3489419 0xc001957a80}) t])
;; 
JOKER FUNC gob.TestInterfaceBasic has: 
;; (defn TestInterfaceBasic
;;   {:added "1.0"
;;    :go "testInterfaceBasic(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{3491446 0xc00195b9a0}) t])
;; 
JOKER FUNC gob.TestInterfaceIndirect has: 
;; (defn TestInterfaceIndirect
;;   "A version of a bug reported on golang-nuts. Also tests top-level
;; slice of interfaces. The issue was registering *T caused T to be
;; stored as the concrete type."
;;   {:added "1.0"
;;    :go "testInterfaceIndirect(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{3529270 0xc0019fab00}) t])
;; 
JOKER FUNC gob.TestInterfacePointer has: 
;; (defn TestInterfacePointer
;;   "We'll send pointers; should receive values.
;; Also check that we can register T but send *T."
;;   {:added "1.0"
;;    :go "testInterfacePointer(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{3492523 0xc001960c40}) t])
;; 
JOKER FUNC gob.TestMapBug1 has: 
;; (defn TestMapBug1
;;   {:added "1.0"
;;    :go "testMapBug1(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{3533441 0xc001a0c720}) t])
;; 
JOKER FUNC gob.TestMapType has: 
;; (defn TestMapType
;;   {:added "1.0"
;;    :go "testMapType(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{3375907 0xc001248460}) t])
;; 
JOKER FUNC gob.TestMutipleEncodingsOfBadType has: 
;; (defn TestMutipleEncodingsOfBadType
;;   "Test that a failed compilation doesn't leave around an executable encoder.
;; Issue 3723."
;;   {:added "1.0"
;;    :go "testMutipleEncodingsOfBadType(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{3541509 0xc001a26fe0}) t])
;; 
JOKER FUNC gob.TestNestedInterfaces has: 
;; (defn TestNestedInterfaces
;;   {:added "1.0"
;;    :go "testNestedInterfaces(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{3532482 0xc001a03580}) t])
;; 
JOKER FUNC gob.TestNesting has: 
;; (defn TestNesting
;;   {:added "1.0"
;;    :go "testNesting(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{3482338 0xc001937f20}) t])
;; 
JOKER FUNC gob.TestNetIP has: 
;; (defn TestNetIP
;;   {:added "1.0"
;;    :go "testNetIP(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{3517523 0xc0019d0a40}) t])
;; 
JOKER FUNC gob.TestNilPointerInsideInterface has: 
;; (defn TestNilPointerInsideInterface
;;   {:added "1.0"
;;    :go "testNilPointerInsideInterface(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{3540866 0xc001a266c0}) t])
;; 
JOKER FUNC gob.TestNilPointerPanics has: 
;; (defn TestNilPointerPanics
;;   {:added "1.0"
;;    :go "testNilPointerPanics(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{3539846 0xc001a21840}) t])
;; 
JOKER FUNC gob.TestOverflow has: 
;; (defn TestOverflow
;;   {:added "1.0"
;;    :go "testOverflow(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{3479088 0xc001930420}) t])
;; 
JOKER FUNC gob.TestPtrToMapOfMap has: 
;; (defn TestPtrToMapOfMap
;;   "getDecEnginePtr cached engine for ut.base instead of ut.user so we passed
;; a *map and then tried to reuse its engine to decode the inner map."
;;   {:added "1.0"
;;    :go "testPtrToMapOfMap(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{3538042 0xc001a19e40}) t])
;; 
JOKER FUNC gob.TestPtrTypeToType has: 
;; (defn TestPtrTypeToType
;;   {:added "1.0"
;;    :go "testPtrTypeToType(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{3524254 0xc0019e8700}) t])
;; 
JOKER FUNC gob.TestRecursiveMapType has: 
;; (defn TestRecursiveMapType
;;   {:added "1.0"
;;    :go "testRecursiveMapType(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{3525771 0xc0019ecb60}) t])
;; 
JOKER FUNC gob.TestRecursiveSliceType has: 
;; (defn TestRecursiveSliceType
;;   {:added "1.0"
;;    :go "testRecursiveSliceType(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{3526018 0xc0019ed020}) t])
;; 
JOKER FUNC gob.TestRegistration has: 
;; (defn TestRegistration
;;   "Should be OK to register the same type multiple times, as long as they're
;; at the same level of indirection."
;;   {:added "1.0"
;;    :go "testRegistration(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{3377448 0xc001249700}) t])
;; 
JOKER FUNC gob.TestRegistrationNaming has: 
;; (defn TestRegistrationNaming
;;   "See comment in type.go/Register."
;;   {:added "1.0"
;;    :go "testRegistrationNaming(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{3377626 0xc001249a00}) t])
;; 
JOKER FUNC gob.TestReorderedFields has: 
;; (defn TestReorderedFields
;;   {:added "1.0"
;;    :go "testReorderedFields(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{3485017 0xc001944a20}) t])
;; 
JOKER FUNC gob.TestReregistration has: 
;; (defn TestReregistration
;;   "Reregister some basic types to check registration is idempotent."
;;   {:added "1.0"
;;    :go "testReregistration(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{3374146 0xc001242940}) t])
;; 
JOKER FUNC gob.TestScalarDecInstructions has: 
;; (defn TestScalarDecInstructions
;;   "Test instruction execution for decoding.
;; Do not run the machine yet; instead do individual instructions crafted by hand."
;;   {:added "1.0"
;;    :go "testScalarDecInstructions(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{3472339 0xc001914a20}) t])
;; 
JOKER FUNC gob.TestScalarEncInstructions has: 
;; (defn TestScalarEncInstructions
;;   "Test instruction execution for encoding.
;; Do not run the machine yet; instead do individual instructions crafted by hand."
;;   {:added "1.0"
;;    :go "testScalarEncInstructions(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{3467100 0xc001900580}) t])
;; 
JOKER FUNC gob.TestSequentialDecoder has: 
;; (defn TestSequentialDecoder
;;   "Verify that sequential Decoders built on a single input will
;; succeed if the input implements ReadByte and there is no
;; type information in the stream."
;;   {:added "1.0"
;;    :go "testSequentialDecoder(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{3536060 0xc001a136c0}) t])
;; 
JOKER FUNC gob.TestSingletons has: 
;; (defn TestSingletons
;;   {:added "1.0"
;;    :go "testSingletons(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{3527263 0xc0019f6860}) t])
;; 
JOKER FUNC gob.TestSlice has: 
;; (defn TestSlice
;;   {:added "1.0"
;;    :go "testSlice(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{3524873 0xc0019e99a0}) t])
;; 
JOKER FUNC gob.TestSliceIncompatibility has: 
;; (defn TestSliceIncompatibility
;;   {:added "1.0"
;;    :go "testSliceIncompatibility(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{3537247 0xc001a19080}) t])
;; 
JOKER FUNC gob.TestSliceReusesMemory has: 
;; (defn TestSliceReusesMemory
;;   {:added "1.0"
;;    :go "testSliceReusesMemory(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{3534513 0xc001a0dd40}) t])
;; 
JOKER FUNC gob.TestSliceType has: 
;; (defn TestSliceType
;;   {:added "1.0"
;;    :go "testSliceType(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{3375362 0xc001243c40}) t])
;; 
JOKER FUNC gob.TestStressParallel has: 
;; (defn TestStressParallel
;;   {:added "1.0"
;;    :go "testStressParallel(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{3378246 0xc0012505a0}) t])
;; 
JOKER FUNC gob.TestStructNonStruct has: 
;; (defn TestStructNonStruct
;;   {:added "1.0"
;;    :go "testStructNonStruct(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{3528189 0xc0019f7ba0}) t])
;; 
JOKER FUNC gob.TestStructType has: 
;; (defn TestStructType
;;   {:added "1.0"
;;    :go "testStructType(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{3376938 0xc001249280}) t])
;; 
JOKER FUNC gob.TestTopLevelNilPointer has: 
;; (defn TestTopLevelNilPointer
;;   "A top-level nil pointer generates a panic with a helpful string-valued message."
;;   {:added "1.0"
;;    :go "testTopLevelNilPointer(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{3539159 0xc001a20dc0}) t])
;; 
JOKER FUNC gob.TestTypeRace has: 
;; (defn TestTypeRace
;;   "Issue 23328. Note that this test name is known to cmd/dist/test.go."
;;   {:added "1.0"
;;    :go "testTypeRace(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{3378780 0xc001250f80}) t])
;; 
JOKER FUNC gob.TestTypeToPtrPtrPtrPtrType has: 
;; (defn TestTypeToPtrPtrPtrPtrType
;;   {:added "1.0"
;;    :go "testTypeToPtrPtrPtrPtrType(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{3524461 0xc0019e8ae0}) t])
;; 
JOKER FUNC gob.TestTypeToPtrType has: 
;; (defn TestTypeToPtrType
;;   {:added "1.0"
;;    :go "testTypeToPtrType(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{3524055 0xc0019e8320}) t])
;; 
JOKER FUNC gob.TestUintCodec has: 
;; (defn TestUintCodec
;;   "Test basic encode/decode routines for unsigned integers"
;;   {:added "1.0"
;;    :go "testUintCodec(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{3464973 0xc0018fa160}) t])
;; 
JOKER FUNC gob.TestUnexportedFields has: 
;; (defn TestUnexportedFields
;;   {:added "1.0"
;;    :go "testUnexportedFields(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{3494027 0xc001964660}) t])
;; 
JOKER FUNC gob.TestUnsupported has: 
;; (defn TestUnsupported
;;   {:added "1.0"
;;    :go "testUnsupported(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{3523594 0xc0019e39e0}) t])
;; 
JOKER FUNC gob.TestValueError has: 
;; (defn TestValueError
;;   {:added "1.0"
;;    :go "testValueError(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{3525068 0xc0019e9da0}) t])
;; 
JOKER FUNC gob.TestWrongTypeDecoder has: 
;; (defn TestWrongTypeDecoder
;;   "Test that we recognize a bad type the first time."
;;   {:added "1.0"
;;    :go "testWrongTypeDecoder(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{3523231 0xc0019e34a0}) t])
;; 
JOKER FUNC gob_test.Example_basic has: 
;; (defn Example_basic
;;   "This example shows the basic usage of the package: Create an encoder,
;; transmit some values, receive them with a decoder."
;;   {:added "1.0"
;;    :go "example_basic()"}
;;   [])
;; 
JOKER FUNC gob_test.Example_encodeDecode has: 
;; (defn Example_encodeDecode
;;   "This example transmits a value that implements the custom encoding and decoding methods."
;;   {:added "1.0"
;;    :go "example_encodeDecode()"}
;;   [])
;; 
JOKER FUNC gob_test.Example_interface has: 
;; (defn Example_interface
;;   "This example shows how to encode an interface value. The key
;; distinction from regular types is to register the concrete type that
;; implements the interface."
;;   {:added "1.0"
;;    :go "example_interface()"}
;;   [])
;; 
JOKER FUNC gosym.NewLineTable has: 
;; (defn ^{:data ^ABEND881(unrecognized Expr type *ast.ArrayType at: &{2954321 <nil> byte}) Data, :pc PC, :line ^Int Line, :mu ^ABEND881(unrecognized Expr type *ast.SelectorExpr at: &{sync Mutex}) mu, :go12 ^Int go12, :binary ^ABEND881(unrecognized Expr type *ast.SelectorExpr at: &{binary ByteOrder}) binary, :quantum quantum, :ptrsize ptrsize, :functab ^ABEND881(unrecognized Expr type *ast.ArrayType at: &{2954528 <nil> byte}) functab, :nfunctab nfunctab, :filetab ^ABEND881(unrecognized Expr type *ast.ArrayType at: &{2954562 <nil> byte}) filetab, :nfiletab nfiletab, :filemap ^ABEND881(unrecognized Expr type *ast.MapType at: &{2954596 string uint32}) fileMap, :strings ^ABEND881(unrecognized Expr type *ast.MapType at: &{2954624 uint32 string}) strings} NewLineTable
;;   "NewLineTable returns a new PC/line table
;; corresponding to the encoded data.
;; Text must be the start address of the
;; corresponding text segment."
;;   {:added "1.0"
;;    :go "newLineTable(data, text)"}
;;   [^ABEND881(unrecognized Expr type *ast.ArrayType at: &{2956873 <nil> byte}) data, text])
;; 
JOKER FUNC gosym.NewTable has: 
;; (defn ^[{:syms ^ABEND881(unrecognized Expr type *ast.ArrayType at: &{2976217 <nil> Sym}) Syms, :funcs ^ABEND881(unrecognized Expr type *ast.ArrayType at: &{2976267 <nil> Func}) Funcs, :files ^ABEND881(unrecognized Expr type *ast.MapType at: &{2976281 string 0xc00175f280}) Files, :objs ^ABEND881(unrecognized Expr type *ast.ArrayType at: &{2976341 <nil> Obj}) Objs, :go12line ^ABEND881(unrecognized Expr type *ast.StarExpr at: &{2976405 LineTable}) go12line} Error] NewTable
;;   "NewTable decodes the Go symbol table (the ".gosymtab" section in ELF),
;; returning an in-memory representation.
;; Starting with Go 1.3, the Go symbol table no longer includes symbol data."
;;   {:added "1.0"
;;    :go "newTable(symtab, pcln)"}
;;   [^ABEND881(unrecognized Expr type *ast.ArrayType at: &{2979971 <nil> byte}) symtab, ^ABEND881(unrecognized Expr type *ast.StarExpr at: &{2979984 LineTable}) pcln])
;; 
JOKER FUNC gosym.TestLineAline has: 
;; (defn TestLineAline
;;   {:added "1.0"
;;    :go "testLineAline(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{2969906 0xc001747f80}) t])
;; 
JOKER FUNC gosym.TestLineFromAline has: 
;; (defn TestLineFromAline
;;   {:added "1.0"
;;    :go "testLineFromAline(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{2968677 0xc001746ee0}) t])
;; 
JOKER FUNC gosym.TestPCLine has: 
;; (defn TestPCLine
;;   {:added "1.0"
;;    :go "testPCLine(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{2971093 0xc00174cf60}) t])
;; 
JOKER FUNC gosym.TestRemotePackage has: 
;; (defn TestRemotePackage
;;   {:added "1.0"
;;    :go "testRemotePackage(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{2952717 0xc00170f6e0}) t])
;; 
JOKER FUNC gosym.TestStandardLibPackage has: 
;; (defn TestStandardLibPackage
;;   {:added "1.0"
;;    :go "testStandardLibPackage(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{2951758 0xc00170e3e0}) t])
;; 
JOKER FUNC gosym.TestStandardLibPathPackage has: 
;; (defn TestStandardLibPathPackage
;;   {:added "1.0"
;;    :go "testStandardLibPathPackage(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{2952230 0xc00170ed60}) t])
;; 
JOKER FUNC gzip.NewReader has: 
;; (defn ^[{:r ^ABEND881(unrecognized Expr type *ast.SelectorExpr at: &{flate Reader}) r, :decompressor ^ABEND881(unrecognized Expr type *ast.SelectorExpr at: &{io ReadCloser}) decompressor, :digest digest, :size size, :buf ^ABEND881(unrecognized Expr type *ast.ArrayType at: &{783311 0xc00030db20 byte}) buf, :err err, :multistream multistream} Error] NewReader
;;   "NewReader creates a new Reader reading the given reader.
;; If r does not also implement io.ByteReader,
;; the decompressor may read more data than necessary from r.
;; 
;; It is the caller's responsibility to call Close on the Reader when done.
;; 
;; The Reader.Header fields will be valid in the Reader returned."
;;   {:added "1.0"
;;    :go "newReader(r)"}
;;   [^ABEND881(unrecognized Expr type *ast.SelectorExpr at: &{io Reader}) r])
;; 
JOKER FUNC gzip.NewWriter has: 
;; (defn ^{:w ^ABEND881(unrecognized Expr type *ast.SelectorExpr at: &{io Writer}) w, :level ^Int level, :wroteheader wroteHeader, :compressor ^ABEND881(unrecognized Expr type *ast.StarExpr at: &{798244 0xc00075d0e0}) compressor, :digest digest, :size size, :closed closed, :buf ^ABEND881(unrecognized Expr type *ast.ArrayType at: &{798405 0xc00075d280 byte}) buf, :err err} NewWriter
;;   "NewWriter returns a new Writer.
;; Writes to the returned writer are compressed and written to w.
;; 
;; It is the caller's responsibility to call Close on the Writer when done.
;; Writes may be buffered and not flushed until Close.
;; 
;; Callers that wish to set the fields in Writer.Header must do so before
;; the first call to Write, Flush, or Close."
;;   {:added "1.0"
;;    :go "newWriter(w)"}
;;   [^ABEND881(unrecognized Expr type *ast.SelectorExpr at: &{io Writer}) w])
;; 
JOKER FUNC gzip.NewWriterLevel has: 
;; (defn ^[{:w ^ABEND881(unrecognized Expr type *ast.SelectorExpr at: &{io Writer}) w, :level ^Int level, :wroteheader wroteHeader, :compressor ^ABEND881(unrecognized Expr type *ast.StarExpr at: &{798244 0xc00075d0e0}) compressor, :digest digest, :size size, :closed closed, :buf ^ABEND881(unrecognized Expr type *ast.ArrayType at: &{798405 0xc00075d280 byte}) buf, :err err} Error] NewWriterLevel
;;   "NewWriterLevel is like NewWriter but specifies the compression level instead
;; of assuming DefaultCompression.
;; 
;; The compression level can be DefaultCompression, NoCompression, HuffmanOnly
;; or any integer value between BestSpeed and BestCompression inclusive.
;; The error returned will be nil if the level is valid."
;;   {:added "1.0"
;;    :go "newWriterLevel(w, level)"}
;;   [^ABEND881(unrecognized Expr type *ast.SelectorExpr at: &{io Writer}) w, ^Int level])
;; 
JOKER FUNC gzip.TestConcat has: 
;; (defn TestConcat
;;   "Multiple gzip files concatenated form a valid gzip file."
;;   {:added "1.0"
;;    :go "testConcat(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{794141 0xc0006850a0}) t])
;; 
JOKER FUNC gzip.TestDecompressor has: 
;; (defn TestDecompressor
;;   {:added "1.0"
;;    :go "testDecompressor(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{776965 0xc0004b41c0}) t])
;; 
JOKER FUNC gzip.TestEmpty has: 
;; (defn TestEmpty
;;   "TestEmpty tests that an empty payload still forms a valid GZIP stream."
;;   {:added "1.0"
;;    :go "testEmpty(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{789809 0xc00057df80}) t])
;; 
JOKER FUNC gzip.TestGZIPFilesHaveZeroMTimes has: 
;; (defn TestGZIPFilesHaveZeroMTimes
;;   "TestGZIPFilesHaveZeroMTimes checks that every .gz file in the tree
;; has a zero MTIME. This is a requirement for the Debian maintainers
;; to be able to have deterministic packages.
;; 
;; See https://golang.org/issue/14937."
;;   {:added "1.0"
;;    :go "testGZIPFilesHaveZeroMTimes(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{795952 0xc0006ad220}) t])
;; 
JOKER FUNC gzip.TestIssue6550 has: 
;; (defn TestIssue6550
;;   {:added "1.0"
;;    :go "testIssue6550(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{778255 0xc0004b5de0}) t])
;; 
JOKER FUNC gzip.TestLatin1 has: 
;; (defn TestLatin1
;;   "TestLatin1 tests the internal functions for converting to and from Latin-1."
;;   {:added "1.0"
;;    :go "testLatin1(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{791584 0xc0005ce2e0}) t])
;; 
JOKER FUNC gzip.TestLatin1RoundTrip has: 
;; (defn TestLatin1RoundTrip
;;   "TestLatin1RoundTrip tests that metadata that is representable in Latin-1
;; survives a round trip."
;;   {:added "1.0"
;;    :go "testLatin1RoundTrip(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{792292 0xc0005cef60}) t])
;; 
JOKER FUNC gzip.TestLimitedWrite has: 
;; (defn TestLimitedWrite
;;   "Write should never return more bytes than the input slice."
;;   {:added "1.0"
;;    :go "testLimitedWrite(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{795099 0xc0006ac580}) t])
;; 
JOKER FUNC gzip.TestMultistreamFalse has: 
;; (defn TestMultistreamFalse
;;   {:added "1.0"
;;    :go "testMultistreamFalse(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{778810 0xc0003368a0}) t])
;; 
JOKER FUNC gzip.TestNilStream has: 
;; (defn TestNilStream
;;   {:added "1.0"
;;    :go "testNilStream(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{779799 0xc000337a40}) t])
;; 
JOKER FUNC gzip.TestRoundTrip has: 
;; (defn TestRoundTrip
;;   "TestRoundTrip tests that gzipping and then gunzipping is the identity
;; function."
;;   {:added "1.0"
;;    :go "testRoundTrip(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{790483 0xc00046ecc0}) t])
;; 
JOKER FUNC gzip.TestTruncatedStreams has: 
;; (defn TestTruncatedStreams
;;   {:added "1.0"
;;    :go "testTruncatedStreams(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{780133 0xc000337de0}) t])
;; 
JOKER FUNC gzip.TestWriterFlush has: 
;; (defn TestWriterFlush
;;   {:added "1.0"
;;    :go "testWriterFlush(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{793396 0xc0006842e0}) t])
;; 
JOKER FUNC gzip.TestWriterReset has: 
;; (defn TestWriterReset
;;   {:added "1.0"
;;    :go "testWriterReset(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{794509 0xc000685860}) t])
;; 
JOKER FUNC gzip_test.ExampleReader_Multistream has: 
;; (defn ExampleReader_Multistream
;;   {:added "1.0"
;;    :go "exampleReader_Multistream()"}
;;   [])
;; 
JOKER FUNC gzip_test.Example_writerReader has: 
;; (defn Example_writerReader
;;   {:added "1.0"
;;    :go "example_writerReader()"}
;;   [])
;; 
JOKER FUNC hash_test.Example_binaryMarshaler has: 
;; (defn Example_binaryMarshaler
;;   {:added "1.0"
;;    :go "example_binaryMarshaler()"}
;;   [])
;; 
JOKER FUNC hash_test.TestMarshalHash has: 
;; (defn TestMarshalHash
;;   {:added "1.0"
;;    :go "testMarshalHash(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{5458849 0xc002a894a0}) t])
;; 
JOKER FUNC heap.BenchmarkDup has: 
;; (defn BenchmarkDup
;;   {:added "1.0"
;;    :go "benchmarkDup(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{858761 0xc0008a5220}) b])
;; 
JOKER FUNC heap.Fix has: 
;; (defn Fix
;;   "Fix re-establishes the heap ordering after the element at index i has changed its value.
;; Changing the value of the element at index i and then calling Fix is equivalent to,
;; but less expensive than, calling Remove(h, i) followed by a Push of the new value.
;; The complexity is O(log(n)) where n = h.Len()."
;;   {:added "1.0"
;;    :go "fix(h, i)"}
;;   [h, ^Int i])
;; 
JOKER FUNC heap.Init has: 
;; (defn Init
;;   "Init establishes the heap invariants required by the other routines in this package.
;; Init is idempotent with respect to the heap invariants
;; and may be called whenever the heap invariants may have been invalidated.
;; Its complexity is O(n) where n = h.Len()."
;;   {:added "1.0"
;;    :go "init(h)"}
;;   [h])
;; 
JOKER FUNC heap.Pop has: 
;; (defn ^ABEND881(unrecognized Expr type *ast.InterfaceType at: &{853543 0xc000875680 false}) Pop
;;   "Pop removes the minimum element (according to Less) from the heap
;; and returns it. The complexity is O(log(n)) where n = h.Len().
;; It is equivalent to Remove(h, 0)."
;;   {:added "1.0"
;;    :go "pop(h)"}
;;   [h])
;; 
JOKER FUNC heap.Push has: 
;; (defn Push
;;   "Push pushes the element x onto the heap. The complexity is
;; O(log(n)) where n = h.Len()."
;;   {:added "1.0"
;;    :go "push(h, x)"}
;;   [h, ^ABEND881(unrecognized Expr type *ast.InterfaceType at: &{853299 0xc000875500 false}) x])
;; 
JOKER FUNC heap.Remove has: 
;; (defn ^ABEND881(unrecognized Expr type *ast.InterfaceType at: &{853764 0xc000875800 false}) Remove
;;   "Remove removes the element at index i from the heap.
;; The complexity is O(log(n)) where n = h.Len()."
;;   {:added "1.0"
;;    :go "remove(h, i)"}
;;   [h, ^Int i])
;; 
JOKER FUNC heap.Test has: 
;; (defn Test
;;   {:added "1.0"
;;    :go "test(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{857476 0xc00089ae40}) t])
;; 
JOKER FUNC heap.TestFix has: 
;; (defn TestFix
;;   {:added "1.0"
;;    :go "testFix(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{858976 0xc0008a57c0}) t])
;; 
JOKER FUNC heap.TestInit0 has: 
;; (defn TestInit0
;;   {:added "1.0"
;;    :go "testInit0(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{856902 0xc000893f20}) t])
;; 
JOKER FUNC heap.TestInit1 has: 
;; (defn TestInit1
;;   {:added "1.0"
;;    :go "testInit1(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{857191 0xc00089a6a0}) t])
;; 
JOKER FUNC heap.TestRemove0 has: 
;; (defn TestRemove0
;;   {:added "1.0"
;;    :go "testRemove0(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{857852 0xc00089b940}) t])
;; 
JOKER FUNC heap.TestRemove1 has: 
;; (defn TestRemove1
;;   {:added "1.0"
;;    :go "testRemove1(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{858118 0xc0008a40a0}) t])
;; 
JOKER FUNC heap.TestRemove2 has: 
;; (defn TestRemove2
;;   {:added "1.0"
;;    :go "testRemove2(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{858374 0xc0008a47c0}) t])
;; 
JOKER FUNC heap_test.Example_intHeap has: 
;; (defn Example_intHeap
;;   "This example inserts several ints into an IntHeap, checks the minimum,
;; and removes them in order of priority."
;;   {:added "1.0"
;;    :go "example_intHeap()"}
;;   [])
;; 
JOKER FUNC heap_test.Example_priorityQueue has: 
;; (defn Example_priorityQueue
;;   "This example creates a PriorityQueue with some items, adds and manipulates an item,
;; and then removes the items in priority order."
;;   {:added "1.0"
;;    :go "example_priorityQueue()"}
;;   [])
;; 
JOKER FUNC hex.BenchmarkEncode has: 
;; (defn BenchmarkEncode
;;   {:added "1.0"
;;    :go "benchmarkEncode(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{3597854 0xc001b00580}) b])
;; 
JOKER FUNC hex.Decode has: 
;; (defn ^[Int Error] Decode
;;   "Decode decodes src into DecodedLen(len(src)) bytes,
;; returning the actual number of bytes written to dst.
;; 
;; Decode expects that src contains only hexadecimal
;; characters and that src has even length.
;; If the input is malformed, Decode returns the number
;; of bytes decoded before the error."
;;   {:added "1.0"
;;    :go "decode(dst, src)"}
;;   [^ABEND881(unrecognized Expr type *ast.ArrayType at: &{3599914 <nil> byte}) dst, ^ABEND881(unrecognized Expr type *ast.ArrayType at: &{3599914 <nil> byte}) src])
;; 
JOKER FUNC hex.DecodeString has: 
;; (defn ^[[ABEND042(cannot find typename hex.byte)] Error] DecodeString
;;   "DecodeString returns the bytes represented by the hexadecimal string s.
;; 
;; DecodeString expects that src contains only hexadecimal
;; characters and that src has even length.
;; If the input is malformed, DecodeString returns
;; the bytes decoded before the error."
;;   {:added "1.0"
;;    :go "decodeString(s)"}
;;   [^String s])
;; 
JOKER FUNC hex.DecodedLen has: 
(defn ^Int DecodedLen
  "DecodedLen returns the length of a decoding of x source bytes.
Specifically, it returns x / 2."
  {:added "1.0"
   :go "decodedLen(x)"}
  [^Int x])

JOKER FUNC hex.Dump has: 
;; (defn ^String Dump
;;   "Dump returns a string that contains a hex dump of the given data. The format
;; of the hex dump matches the output of `hexdump -C` on the command line."
;;   {:added "1.0"
;;    :go "dump(data)"}
;;   [^ABEND881(unrecognized Expr type *ast.ArrayType at: &{3601665 <nil> byte}) data])
;; 
JOKER FUNC hex.Dumper has: 
;; (defn ^ABEND881(unrecognized Expr type *ast.SelectorExpr at: &{io WriteCloser}) Dumper
;;   "Dumper returns a WriteCloser that writes a hex dump of all written data to
;; w. The format of the dump matches the output of `hexdump -C` on the command
;; line."
;;   {:added "1.0"
;;    :go "dumper(w)"}
;;   [^ABEND881(unrecognized Expr type *ast.SelectorExpr at: &{io Writer}) w])
;; 
JOKER FUNC hex.Encode has: 
;; (defn ^Int Encode
;;   "Encode encodes src into EncodedLen(len(src))
;; bytes of dst. As a convenience, it returns the number
;; of bytes written to dst, but this value is always EncodedLen(len(src)).
;; Encode implements hexadecimal encoding."
;;   {:added "1.0"
;;    :go "encode(dst, src)"}
;;   [^ABEND881(unrecognized Expr type *ast.ArrayType at: &{3598846 <nil> byte}) dst, ^ABEND881(unrecognized Expr type *ast.ArrayType at: &{3598846 <nil> byte}) src])
;; 
JOKER FUNC hex.EncodeToString has: 
;; (defn ^String EncodeToString
;;   "EncodeToString returns the hexadecimal encoding of src."
;;   {:added "1.0"
;;    :go "encodeToString(src)"}
;;   [^ABEND881(unrecognized Expr type *ast.ArrayType at: &{3600857 <nil> byte}) src])
;; 
JOKER FUNC hex.EncodedLen has: 
(defn ^Int EncodedLen
  "EncodedLen returns the length of an encoding of n source bytes.
Specifically, it returns n * 2."
  {:added "1.0"
   :go "encodedLen(n)"}
  [^Int n])

JOKER FUNC hex.NewDecoder has: 
;; (defn ^ABEND881(unrecognized Expr type *ast.SelectorExpr at: &{io Reader}) NewDecoder
;;   "NewDecoder returns an io.Reader that decodes hexadecimal characters from r.
;; NewDecoder expects that r contain only an even number of hexadecimal characters."
;;   {:added "1.0"
;;    :go "newDecoder(r)"}
;;   [^ABEND881(unrecognized Expr type *ast.SelectorExpr at: &{io Reader}) r])
;; 
JOKER FUNC hex.NewEncoder has: 
;; (defn ^ABEND881(unrecognized Expr type *ast.SelectorExpr at: &{io Writer}) NewEncoder
;;   "NewEncoder returns an io.Writer that writes lowercase hexadecimal characters to w."
;;   {:added "1.0"
;;    :go "newEncoder(w)"}
;;   [^ABEND881(unrecognized Expr type *ast.SelectorExpr at: &{io Writer}) w])
;; 
JOKER FUNC hex.TestDecode has: 
;; (defn TestDecode
;;   {:added "1.0"
;;    :go "testDecode(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{3592508 0xc001aec3c0}) t])
;; 
JOKER FUNC hex.TestDecodeErr has: 
;; (defn TestDecodeErr
;;   {:added "1.0"
;;    :go "testDecodeErr(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{3593937 0xc001aedec0}) t])
;; 
JOKER FUNC hex.TestDecodeString has: 
;; (defn TestDecodeString
;;   {:added "1.0"
;;    :go "testDecodeString(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{3593264 0xc001aed220}) t])
;; 
JOKER FUNC hex.TestDecodeStringErr has: 
;; (defn TestDecodeStringErr
;;   {:added "1.0"
;;    :go "testDecodeStringErr(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{3594238 0xc001af4640}) t])
;; 
JOKER FUNC hex.TestDecoderErr has: 
;; (defn TestDecoderErr
;;   {:added "1.0"
;;    :go "testDecoderErr(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{3595721 0xc001afa380}) t])
;; 
JOKER FUNC hex.TestDump has: 
;; (defn TestDump
;;   {:added "1.0"
;;    :go "testDump(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{3597341 0xc001b00040}) t])
;; 
JOKER FUNC hex.TestDumper has: 
;; (defn TestDumper
;;   {:added "1.0"
;;    :go "testDumper(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{3596185 0xc001afab20}) t])
;; 
JOKER FUNC hex.TestDumper_doubleclose has: 
;; (defn TestDumper_doubleclose
;;   {:added "1.0"
;;    :go "testDumper_doubleclose(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{3596716 0xc001afb520}) t])
;; 
JOKER FUNC hex.TestDumper_earlyclose has: 
;; (defn TestDumper_earlyclose
;;   {:added "1.0"
;;    :go "testDumper_earlyclose(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{3597102 0xc001afbb60}) t])
;; 
JOKER FUNC hex.TestEncode has: 
;; (defn TestEncode
;;   {:added "1.0"
;;    :go "testEncode(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{3592168 0xc001ae3ca0}) t])
;; 
JOKER FUNC hex.TestEncodeToString has: 
;; (defn TestEncodeToString
;;   {:added "1.0"
;;    :go "testEncodeToString(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{3593077 0xc001aece20}) t])
;; 
JOKER FUNC hex.TestEncoderDecoder has: 
;; (defn TestEncoderDecoder
;;   {:added "1.0"
;;    :go "testEncoderDecoder(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{3594486 0xc001af4be0}) t])
;; 
JOKER FUNC hex_test.ExampleDecode has: 
;; (defn ExampleDecode
;;   {:added "1.0"
;;    :go "exampleDecode()"}
;;   [])
;; 
JOKER FUNC hex_test.ExampleDecodeString has: 
;; (defn ExampleDecodeString
;;   {:added "1.0"
;;    :go "exampleDecodeString()"}
;;   [])
;; 
JOKER FUNC hex_test.ExampleDump has: 
;; (defn ExampleDump
;;   {:added "1.0"
;;    :go "exampleDump()"}
;;   [])
;; 
JOKER FUNC hex_test.ExampleDumper has: 
;; (defn ExampleDumper
;;   {:added "1.0"
;;    :go "exampleDumper()"}
;;   [])
;; 
JOKER FUNC hex_test.ExampleEncode has: 
;; (defn ExampleEncode
;;   {:added "1.0"
;;    :go "exampleEncode()"}
;;   [])
;; 
JOKER FUNC hex_test.ExampleEncodeToString has: 
;; (defn ExampleEncodeToString
;;   {:added "1.0"
;;    :go "exampleEncodeToString()"}
;;   [])
;; 
JOKER FUNC hmac.BenchmarkHMACSHA256_1K has: 
;; (defn BenchmarkHMACSHA256_1K
;;   {:added "1.0"
;;    :go "benchmarkHMACSHA256_1K(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{1271844 0xc000b50180}) b])
;; 
JOKER FUNC hmac.BenchmarkHMACSHA256_32 has: 
;; (defn BenchmarkHMACSHA256_32
;;   {:added "1.0"
;;    :go "benchmarkHMACSHA256_32(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{1272095 0xc000b50880}) b])
;; 
JOKER FUNC hmac.Equal has: 
;; (defn ^ABEND042(cannot find typename hmac.bool) Equal
;;   "Equal compares two MACs for equality without leaking timing information."
;;   {:added "1.0"
;;    :go "equal(mac1, mac2)"}
;;   [^ABEND881(unrecognized Expr type *ast.ArrayType at: &{1252430 <nil> byte}) mac1, ^ABEND881(unrecognized Expr type *ast.ArrayType at: &{1252430 <nil> byte}) mac2])
;; 
JOKER FUNC hmac.New has: 
;; (defn ^ABEND881(unrecognized Expr type *ast.SelectorExpr at: &{hash Hash}) New
;;   "New returns a new HMAC hash using the given hash.Hash type and key.
;; Note that unlike other hash implementations in the standard library,
;; the returned Hash does not implement encoding.BinaryMarshaler
;; or encoding.BinaryUnmarshaler."
;;   {:added "1.0"
;;    :go "new(h, key)"}
;;   [^ABEND881(unrecognized Expr type *ast.FuncType at: &{1251808 0xc00099ea20 0xc00099ea50}) h, ^ABEND881(unrecognized Expr type *ast.ArrayType at: &{1251830 <nil> byte}) key])
;; 
JOKER FUNC hmac.TestEqual has: 
;; (defn TestEqual
;;   {:added "1.0"
;;    :go "testEqual(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{1271437 0xc000b4db40}) t])
;; 
JOKER FUNC hmac.TestHMAC has: 
;; (defn TestHMAC
;;   {:added "1.0"
;;    :go "testHMAC(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{1270661 0xc000b4ca60}) t])
;; 
JOKER FUNC hpack.AppendHuffmanString has: 
;; (defn ^[ABEND042(cannot find typename hpack.byte)] AppendHuffmanString
;;   "AppendHuffmanString appends s, as encoded in Huffman codes, to dst
;; and returns the extended buffer."
;;   {:added "1.0"
;;    :go "appendHuffmanString(dst, s)"}
;;   [^ABEND881(unrecognized Expr type *ast.ArrayType at: &{15115618 <nil> byte}) dst, ^String s])
;; 
JOKER FUNC hpack.BenchmarkEncoderSearchTable has: 
;; (defn BenchmarkEncoderSearchTable
;;   {:added "1.0"
;;    :go "benchmarkEncoderSearchTable(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{15148441 0xc003095c40}) b])
;; 
JOKER FUNC hpack.BenchmarkHuffmanDecode has: 
;; (defn BenchmarkHuffmanDecode
;;   {:added "1.0"
;;    :go "benchmarkHuffmanDecode(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{15131334 0xc001f06980}) b])
;; 
JOKER FUNC hpack.HuffmanDecode has: 
;; (defn ^[Int Error] HuffmanDecode
;;   "HuffmanDecode decodes the string in v and writes the expanded
;; result to w, returning the number of bytes written to w and the
;; Write call's return value. At most one Write call is made."
;;   {:added "1.0"
;;    :go "huffmanDecode(w, v)"}
;;   [^ABEND881(unrecognized Expr type *ast.SelectorExpr at: &{io Writer}) w, ^ABEND881(unrecognized Expr type *ast.ArrayType at: &{15112103 <nil> byte}) v])
;; 
JOKER FUNC hpack.HuffmanDecodeToString has: 
;; (defn ^[String Error] HuffmanDecodeToString
;;   "HuffmanDecodeToString decodes the string in v."
;;   {:added "1.0"
;;    :go "huffmanDecodeToString(v)"}
;;   [^ABEND881(unrecognized Expr type *ast.ArrayType at: &{15112381 <nil> byte}) v])
;; 
JOKER FUNC hpack.HuffmanEncodeLength has: 
;; (defn ^ABEND042(cannot find typename hpack.uint64) HuffmanEncodeLength
;;   "HuffmanEncodeLength returns the number of bytes required to encode
;; s in Huffman codes. The result is round up to byte boundary."
;;   {:added "1.0"
;;    :go "huffmanEncodeLength(s)"}
;;   [^String s])
;; 
JOKER FUNC hpack.NewDecoder has: 
;; (defn ^{:dyntab dynTab, :emit ^ABEND881(unrecognized Expr type *ast.FuncType at: &{15082868 0xc0051c1830 <nil>}) emit, :emitenabled emitEnabled, :maxstrlen ^Int maxStrLen, :buf ^ABEND881(unrecognized Expr type *ast.ArrayType at: &{15083183 <nil> byte}) buf, :savebuf ^ABEND881(unrecognized Expr type *ast.SelectorExpr at: &{bytes Buffer}) saveBuf} NewDecoder
;;   "NewDecoder returns a new decoder with the provided maximum dynamic
;; table size. The emitFunc will be called for each valid field
;; parsed, in the same goroutine as calls to Write, before Write returns."
;;   {:added "1.0"
;;    :go "newDecoder(maxDynamicTableSize, emitFunc)"}
;;   [maxDynamicTableSize, ^ABEND881(unrecognized Expr type *ast.FuncType at: &{15083639 0xc0051c1920 <nil>}) emitFunc])
;; 
JOKER FUNC hpack.NewEncoder has: 
;; (defn ^{:dyntab dynTab, :minsize minSize, :maxsizelimit maxSizeLimit, :tablesizeupdate tableSizeUpdate, :w ^ABEND881(unrecognized Expr type *ast.SelectorExpr at: &{io Writer}) w, :buf ^ABEND881(unrecognized Expr type *ast.ArrayType at: &{15095511 <nil> byte}) buf} NewEncoder
;;   "NewEncoder returns a new Encoder which performs HPACK encoding. An
;; encoded data is written to w."
;;   {:added "1.0"
;;    :go "newEncoder(w)"}
;;   [^ABEND881(unrecognized Expr type *ast.SelectorExpr at: &{io Writer}) w])
;; 
JOKER FUNC hpack.TestAppendHpackString has: 
;; (defn TestAppendHpackString
;;   {:added "1.0"
;;    :go "testAppendHpackString(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{15143511 0xc003180960}) t])
;; 
JOKER FUNC hpack.TestAppendHuffmanString has: 
;; (defn TestAppendHuffmanString
;;   {:added "1.0"
;;    :go "testAppendHuffmanString(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{15131943 0xc001f073e0}) t])
;; 
JOKER FUNC hpack.TestAppendIndexed has: 
;; (defn TestAppendIndexed
;;   {:added "1.0"
;;    :go "testAppendIndexed(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{15143988 0xc003181180}) t])
;; 
JOKER FUNC hpack.TestAppendIndexedName has: 
;; (defn TestAppendIndexedName
;;   {:added "1.0"
;;    :go "testAppendIndexedName(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{15145315 0xc00266a5e0}) t])
;; 
JOKER FUNC hpack.TestAppendNewName has: 
;; (defn TestAppendNewName
;;   {:added "1.0"
;;    :go "testAppendNewName(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{15144401 0xc0031819c0}) t])
;; 
JOKER FUNC hpack.TestAppendTableSize has: 
;; (defn TestAppendTableSize
;;   {:added "1.0"
;;    :go "testAppendTableSize(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{15146059 0xc00266b320}) t])
;; 
JOKER FUNC hpack.TestAppendVarInt has: 
;; (defn TestAppendVarInt
;;   {:added "1.0"
;;    :go "testAppendVarInt(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{15142949 0xc00317dba0}) t])
;; 
JOKER FUNC hpack.TestDecodeC3_NoHuffman has: 
;; (defn TestDecodeC3_NoHuffman
;;   "C.3 Request Examples without Huffman Coding
;; http://http2.github.io/http2-spec/compression.html#rfc.section.C.3"
;;   {:added "1.0"
;;    :go "testDecodeC3_NoHuffman(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{15121151 0xc0061054c0}) t])
;; 
JOKER FUNC hpack.TestDecodeC4_Huffman has: 
;; (defn TestDecodeC4_Huffman
;;   "C.4 Request Examples with Huffman Coding
;; http://http2.github.io/http2-spec/compression.html#rfc.section.C.4"
;;   {:added "1.0"
;;    :go "testDecodeC4_Huffman(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{15122443 0xc00610c3a0}) t])
;; 
JOKER FUNC hpack.TestDecodeC5_ResponsesNoHuff has: 
;; (defn TestDecodeC5_ResponsesNoHuff
;;   "http://http2.github.io/http2-spec/compression.html#rfc.section.C.5
;; "This section shows several consecutive header lists, corresponding
;; to HTTP responses, on the same connection. The HTTP/2 setting
;; parameter SETTINGS_HEADER_TABLE_SIZE is set to the value of 256
;; octets, causing some evictions to occur.""
;;   {:added "1.0"
;;    :go "testDecodeC5_ResponsesNoHuff(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{15123922 0xc00610d300}) t])
;; 
JOKER FUNC hpack.TestDecodeC6_ResponsesHuffman has: 
;; (defn TestDecodeC6_ResponsesHuffman
;;   "http://http2.github.io/http2-spec/compression.html#rfc.section.C.6
;; "This section shows the same examples as the previous section, but
;; using Huffman encoding for the literal values. The HTTP/2 setting
;; parameter SETTINGS_HEADER_TABLE_SIZE is set to the value of 256
;; octets, causing some evictions to occur. The eviction mechanism
;; uses the length of the decoded literal values, so the same
;; evictions occurs as in the previous section.""
;;   {:added "1.0"
;;    :go "testDecodeC6_ResponsesHuffman(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{15126265 0xc006126540}) t])
;; 
JOKER FUNC hpack.TestDecoderDecode has: 
;; (defn TestDecoderDecode
;;   {:added "1.0"
;;    :go "testDecoderDecode(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{15119062 0xc006103a60}) t])
;; 
JOKER FUNC hpack.TestDynamicSizeUpdate has: 
;; (defn TestDynamicSizeUpdate
;;   {:added "1.0"
;;    :go "testDynamicSizeUpdate(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{15139129 0xc002323a60}) t])
;; 
JOKER FUNC hpack.TestDynamicTableAt has: 
;; (defn TestDynamicTableAt
;;   {:added "1.0"
;;    :go "testDynamicTableAt(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{15117428 0xc005f314e0}) t])
;; 
JOKER FUNC hpack.TestDynamicTableSizeEvict has: 
;; (defn TestDynamicTableSizeEvict
;;   {:added "1.0"
;;    :go "testDynamicTableSizeEvict(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{15118079 0xc006102400}) t])
;; 
JOKER FUNC hpack.TestEmitEnabled has: 
;; (defn TestEmitEnabled
;;   {:added "1.0"
;;    :go "testEmitEnabled(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{15137598 0xc000835e00}) t])
;; 
JOKER FUNC hpack.TestEncoderSearchTable has: 
;; (defn TestEncoderSearchTable
;;   {:added "1.0"
;;    :go "testEncoderSearchTable(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{15141746 0xc00317c620}) t])
;; 
JOKER FUNC hpack.TestEncoderSetMaxDynamicTableSize has: 
;; (defn TestEncoderSetMaxDynamicTableSize
;;   {:added "1.0"
;;    :go "testEncoderSetMaxDynamicTableSize(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{15146491 0xc00266bb00}) t])
;; 
JOKER FUNC hpack.TestEncoderSetMaxDynamicTableSizeLimit has: 
;; (defn TestEncoderSetMaxDynamicTableSizeLimit
;;   {:added "1.0"
;;    :go "testEncoderSetMaxDynamicTableSizeLimit(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{15147282 0xc003094880}) t])
;; 
JOKER FUNC hpack.TestEncoderTableSizeUpdate has: 
;; (defn TestEncoderTableSizeUpdate
;;   {:added "1.0"
;;    :go "testEncoderTableSizeUpdate(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{15139919 0xc002474500}) t])
;; 
JOKER FUNC hpack.TestEncoderWriteField has: 
;; (defn TestEncoderWriteField
;;   {:added "1.0"
;;    :go "testEncoderWriteField(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{15140623 0xc002475180}) t])
;; 
JOKER FUNC hpack.TestHeaderFieldTable has: 
;; (defn TestHeaderFieldTable
;;   {:added "1.0"
;;    :go "testHeaderFieldTable(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{15071737 0xc0056fe8c0}) t])
;; 
JOKER FUNC hpack.TestHeaderFieldTable_LookupMapEviction has: 
;; (defn TestHeaderFieldTable_LookupMapEviction
;;   {:added "1.0"
;;    :go "testHeaderFieldTable_LookupMapEviction(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{15074659 0xc0058577c0}) t])
;; 
JOKER FUNC hpack.TestHuffmanDecode has: 
;; (defn TestHuffmanDecode
;;   {:added "1.0"
;;    :go "testHuffmanDecode(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{15130211 0xc0032bba80}) t])
;; 
JOKER FUNC hpack.TestHuffmanDecodeCorruptPadding has: 
;; (defn TestHuffmanDecodeCorruptPadding
;;   {:added "1.0"
;;    :go "testHuffmanDecodeCorruptPadding(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{15130004 0xc0032bb6a0}) t])
;; 
JOKER FUNC hpack.TestHuffmanDecodeEOS has: 
;; (defn TestHuffmanDecodeEOS
;;   {:added "1.0"
;;    :go "testHuffmanDecodeEOS(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{15129494 0xc0032bada0}) t])
;; 
JOKER FUNC hpack.TestHuffmanDecodeExcessPadding has: 
;; (defn TestHuffmanDecodeExcessPadding
;;   {:added "1.0"
;;    :go "testHuffmanDecodeExcessPadding(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{15128772 0xc0032ba3e0}) t])
;; 
JOKER FUNC hpack.TestHuffmanDecodeFuzz has: 
;; (defn TestHuffmanDecodeFuzz
;;   {:added "1.0"
;;    :go "testHuffmanDecodeFuzz(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{15134394 0xc001723a60}) t])
;; 
JOKER FUNC hpack.TestHuffmanDecodeMaxLengthOnTrailingByte has: 
;; (defn TestHuffmanDecodeMaxLengthOnTrailingByte
;;   {:added "1.0"
;;    :go "testHuffmanDecodeMaxLengthOnTrailingByte(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{15129762 0xc0032bb260}) t])
;; 
JOKER FUNC hpack.TestHuffmanFuzzCrash has: 
;; (defn TestHuffmanFuzzCrash
;;   "Fuzz crash, originally reported at https://github.com/bradfitz/http2/issues/56"
;;   {:added "1.0"
;;    :go "testHuffmanFuzzCrash(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{15137060 0xc0008353a0}) t])
;; 
JOKER FUNC hpack.TestHuffmanMaxStrLen has: 
;; (defn TestHuffmanMaxStrLen
;;   {:added "1.0"
;;    :go "testHuffmanMaxStrLen(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{15132885 0xc001f07ec0}) t])
;; 
JOKER FUNC hpack.TestHuffmanRoundtripStress has: 
;; (defn TestHuffmanRoundtripStress
;;   {:added "1.0"
;;    :go "testHuffmanRoundtripStress(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{15133491 0xc001722940}) t])
;; 
JOKER FUNC hpack.TestReadVarInt has: 
;; (defn TestReadVarInt
;;   {:added "1.0"
;;    :go "testReadVarInt(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{15135301 0xc001726a40}) t])
;; 
JOKER FUNC hpack.TestSaveBufLimit has: 
;; (defn TestSaveBufLimit
;;   {:added "1.0"
;;    :go "testSaveBufLimit(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{15138232 0xc002322960}) t])
;; 
JOKER FUNC hpack.TestStaticTable has: 
;; (defn TestStaticTable
;;   {:added "1.0"
;;    :go "testStaticTable(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{15075310 0xc005876480}) t])
;; 
JOKER FUNC html.BenchmarkEscape has: 
;; (defn BenchmarkEscape
;;   {:added "1.0"
;;    :go "benchmarkEscape(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{5544432 0xc001b1af40}) b])
;; 
JOKER FUNC html.BenchmarkEscapeNone has: 
;; (defn BenchmarkEscapeNone
;;   {:added "1.0"
;;    :go "benchmarkEscapeNone(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{5544557 0xc001b1b200}) b])
;; 
JOKER FUNC html.BenchmarkUnescape has: 
;; (defn BenchmarkUnescape
;;   {:added "1.0"
;;    :go "benchmarkUnescape(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{5544680 0xc001b1b4c0}) b])
;; 
JOKER FUNC html.BenchmarkUnescapeDense has: 
;; (defn BenchmarkUnescapeDense
;;   {:added "1.0"
;;    :go "benchmarkUnescapeDense(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{5545118 0xc001b16a60}) b])
;; 
JOKER FUNC html.BenchmarkUnescapeNone has: 
;; (defn BenchmarkUnescapeNone
;;   {:added "1.0"
;;    :go "benchmarkUnescapeNone(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{5544831 0xc001b16020}) b])
;; 
JOKER FUNC html.BenchmarkUnescapeSparse has: 
;; (defn BenchmarkUnescapeSparse
;;   {:added "1.0"
;;    :go "benchmarkUnescapeSparse(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{5544984 0xc001b16340}) b])
;; 
JOKER FUNC html.EscapeString has: 
(defn ^String EscapeString
  "EscapeString escapes special characters like "<" to become "&lt;". It
escapes only five such characters: <, >, &, ' and ".
UnescapeString(EscapeString(s)) == s always holds, but the converse isn't
always true."
  {:added "1.0"
   :go "escapeString(s)"}
  [^String s])

JOKER FUNC html.TestEntityLength has: 
;; (defn TestEntityLength
;;   {:added "1.0"
;;    :go "testEntityLength(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{5541019 0xc001bc66c0}) t])
;; 
JOKER FUNC html.TestUnescape has: 
;; (defn TestUnescape
;;   {:added "1.0"
;;    :go "testUnescape(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{5543427 0xc001b22fe0}) t])
;; 
JOKER FUNC html.TestUnescapeEscape has: 
;; (defn TestUnescapeEscape
;;   {:added "1.0"
;;    :go "testUnescapeEscape(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{5543667 0xc001b1a5e0}) t])
;; 
JOKER FUNC html.UnescapeString has: 
(defn ^String UnescapeString
  "UnescapeString unescapes entities like "&lt;" to become "<". It unescapes a
larger range of entities than EscapeString escapes. For example, "&aacute;"
unescapes to "á", as does "&#225;" and "&#xE1;".
UnescapeString(EscapeString(s)) == s always holds, but the converse isn't
always true."
  {:added "1.0"
   :go "unescapeString(s)"}
  [^String s])

JOKER FUNC html_test.ExampleEscapeString has: 
;; (defn ExampleEscapeString
;;   {:added "1.0"
;;    :go "exampleEscapeString()"}
;;   [])
;; 
JOKER FUNC html_test.ExampleUnescapeString has: 
;; (defn ExampleUnescapeString
;;   {:added "1.0"
;;    :go "exampleUnescapeString()"}
;;   [])
;; 
JOKER FUNC http.BenchmarkCookieString has: 
;; (defn BenchmarkCookieString
;;   {:added "1.0"
;;    :go "benchmarkCookieString(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{8273937 0xc0019850c0}) b])
;; 
JOKER FUNC http.BenchmarkHeaderWriteSubset has: 
;; (defn BenchmarkHeaderWriteSubset
;;   {:added "1.0"
;;    :go "benchmarkHeaderWriteSubset(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{8283455 0xc002b29260}) b])
;; 
JOKER FUNC http.BenchmarkReadCookies has: 
;; (defn BenchmarkReadCookies
;;   {:added "1.0"
;;    :go "benchmarkReadCookies(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{8275796 0xc001a90700}) b])
;; 
JOKER FUNC http.BenchmarkReadSetCookies has: 
;; (defn BenchmarkReadSetCookies
;;   {:added "1.0"
;;    :go "benchmarkReadSetCookies(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{8274588 0xc001985900}) b])
;; 
JOKER FUNC http.CanonicalHeaderKey has: 
(defn ^String CanonicalHeaderKey
  "CanonicalHeaderKey returns the canonical format of the
header key s. The canonicalization converts the first
letter and any letter following a hyphen to upper case;
the rest are converted to lowercase. For example, the
canonical key for "accept-encoding" is "Accept-Encoding".
If s contains a space or invalid header field bytes, it is
returned without modifications."
  {:added "1.0"
   :go "canonicalHeaderKey(s)"}
  [^String s])

JOKER FUNC http.DetectContentType has: 
;; (defn ^String DetectContentType
;;   "DetectContentType implements the algorithm described
;; at https://mimesniff.spec.whatwg.org/ to determine the
;; Content-Type of the given data. It considers at most the
;; first 512 bytes of data. DetectContentType always returns
;; a valid MIME type: if it cannot determine a more specific one, it
;; returns "application/octet-stream"."
;;   {:added "1.0"
;;    :go "detectContentType(data)"}
;;   [^ABEND881(unrecognized Expr type *ast.ArrayType at: &{8714951 <nil> byte}) data])
;; 
JOKER FUNC http.Error has: 
;; (defn Error
;;   "Error replies to the request with the specified error message and HTTP code.
;; It does not otherwise end the request; the caller should ensure no further
;; writes are done to w.
;; The error message should be plain text."
;;   {:added "1.0"
;;    :go "error(w, error, code)"}
;;   [w, ^String error, ^Int code])
;; 
JOKER FUNC http.ExportHttp2ConfigureTransport has: 
;; (defn ^Error ExportHttp2ConfigureTransport
;;   {:added "1.0"
;;    :go "exportHttp2ConfigureTransport(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{8296821 Transport}) t])
;; 
JOKER FUNC http.ExportSetH2GoawayTimeout has: 
;; (defn ^restore ExportSetH2GoawayTimeout
;;   {:added "1.0"
;;    :go "exportSetH2GoawayTimeout(d)"}
;;   [^ABEND881(unrecognized Expr type *ast.SelectorExpr at: &{time Duration}) d])
;; 
JOKER FUNC http.FileServer has: 
;; (defn ^ABEND881(unrecognized Expr type *ast.InterfaceType at: &{9304673 0xc0042407e0 false}) FileServer
;;   "FileServer returns a handler that serves HTTP requests
;; with the contents of the file system rooted at root.
;; 
;; To use the operating system's file system implementation,
;; use http.Dir:
;; 
;;     http.Handle("/", http.FileServer(http.Dir("/tmp")))
;; 
;; As a special case, the returned file server redirects any request
;; ending in "/index.html" to the same path, without the final
;; "index.html"."
;;   {:added "1.0"
;;    :go "fileServer(root)"}
;;   [root])
;; 
JOKER FUNC http.Get has: 
(defn ^[resp err] Get
  "Get issues a GET to the specified URL. If the response is one of
the following redirect codes, Get follows the redirect, up to a
maximum of 10 redirects:

   301 (Moved Permanently)
   302 (Found)
   303 (See Other)
   307 (Temporary Redirect)
   308 (Permanent Redirect)

An error is returned if there were too many redirects or if there
was an HTTP protocol error. A non-2xx response doesn't cause an
error. Any returned error will be of type *url.Error. The url.Error
value's Timeout method will report true if request timed out or was
canceled.

When err is nil, resp always contains a non-nil resp.Body.
Caller should close resp.Body when done reading from it.

Get is a wrapper around DefaultClient.Get.

To make a request with custom headers, use NewRequest and
DefaultClient.Do."
  {:added "1.0"
   :go "get(url)"}
  [^String url])

JOKER FUNC http.Handle has: 
;; (defn Handle
;;   "Handle registers the handler for the given pattern
;; in the DefaultServeMux.
;; The documentation for ServeMux explains how patterns are matched."
;;   {:added "1.0"
;;    :go "handle(pattern, handler)"}
;;   [^String pattern, handler])
;; 
JOKER FUNC http.HandleFunc has: 
;; (defn HandleFunc
;;   "HandleFunc registers the handler function for the given pattern
;; in the DefaultServeMux.
;; The documentation for ServeMux explains how patterns are matched."
;;   {:added "1.0"
;;    :go "handleFunc(pattern, handler)"}
;;   [^String pattern, ^ABEND881(unrecognized Expr type *ast.FuncType at: &{9375397 0xc00430d470 <nil>}) handler])
;; 
JOKER FUNC http.Head has: 
(defn ^[resp err] Head
  "Head issues a HEAD to the specified URL. If the response is one of
the following redirect codes, Head follows the redirect, up to a
maximum of 10 redirects:

   301 (Moved Permanently)
   302 (Found)
   303 (See Other)
   307 (Temporary Redirect)
   308 (Permanent Redirect)

Head is a wrapper around DefaultClient.Head"
  {:added "1.0"
   :go "head(url)"}
  [^String url])

JOKER FUNC http.ListenAndServe has: 
(defn ^Error ListenAndServe
  "ListenAndServe listens on the TCP network address addr and then calls
Serve with handler to handle requests on incoming connections.
Accepted connections are configured to enable TCP keep-alives.

The handler is typically nil, in which case the DefaultServeMux is used.

ListenAndServe always returns a non-nil error."
  {:added "1.0"
   :go "listenAndServe(addr, handler)"}
  [^String addr, handler])

JOKER FUNC http.ListenAndServeTLS has: 
(defn ^Error ListenAndServeTLS
  "ListenAndServeTLS acts identically to ListenAndServe, except that it
expects HTTPS connections. Additionally, files containing a certificate and
matching private key for the server must be provided. If the certificate
is signed by a certificate authority, the certFile should be the concatenation
of the server's certificate, any intermediates, and the CA's certificate."
  {:added "1.0"
   :go "listenAndServeTLS(addr, certFile, keyFile, handler)"}
  [^String addr, ^String certFile, ^String keyFile, handler])

JOKER FUNC http.MaxBytesReader has: 
;; (defn ^ABEND881(unrecognized Expr type *ast.SelectorExpr at: &{io ReadCloser}) MaxBytesReader
;;   "MaxBytesReader is similar to io.LimitReader but is intended for
;; limiting the size of incoming request bodies. In contrast to
;; io.LimitReader, MaxBytesReader's result is a ReadCloser, returns a
;; non-EOF error for a Read beyond the limit, and closes the
;; underlying reader when its Close method is called.
;; 
;; MaxBytesReader prevents clients from accidentally or maliciously
;; sending a large request and wasting server resources."
;;   {:added "1.0"
;;    :go "maxBytesReader(w, r, n)"}
;;   [w, ^ABEND881(unrecognized Expr type *ast.SelectorExpr at: &{io ReadCloser}) r, n])
;; 
JOKER FUNC http.NewFileTransport has: 
;; (defn ^ABEND881(unrecognized Expr type *ast.InterfaceType at: &{8337357 0xc002d17ec0 false}) NewFileTransport
;;   "NewFileTransport returns a new RoundTripper, serving the provided
;; FileSystem. The returned RoundTripper ignores the URL host in its
;; incoming requests, as well as most other properties of the
;; request.
;; 
;; The typical use case for NewFileTransport is to register the "file"
;; protocol with a Transport, as in:
;; 
;;   t := &http.Transport{}
;;   t.RegisterProtocol("file", http.NewFileTransport(http.Dir("/")))
;;   c := &http.Client{Transport: t}
;;   res, err := c.Get("file:///etc/passwd")
;;   ..."
;;   {:added "1.0"
;;    :go "newFileTransport(fs)"}
;;   [fs])
;; 
JOKER FUNC http.NewRequest has: 
;; (defn ^[{:method ^String Method, :url ^ABEND881(unrecognized Expr type *ast.StarExpr at: &{8188350 0xc003045220}) URL, :proto ^String Proto, :protomajor ^Int ProtoMajor, :protominor ^Int ProtoMinor, :header Header, :body ^ABEND881(unrecognized Expr type *ast.SelectorExpr at: &{io ReadCloser}) Body, :getbody ^ABEND881(unrecognized Expr type *ast.FuncType at: &{8190400 0xc0034097a0 0xc003409860}) GetBody, :contentlength ContentLength, :transferencoding ^ABEND881(unrecognized Expr type *ast.ArrayType at: &{8191048 <nil> string}) TransferEncoding, :close Close, :host ^String Host, :form ^ABEND881(unrecognized Expr type *ast.SelectorExpr at: &{url Values}) Form, :postform ^ABEND881(unrecognized Expr type *ast.SelectorExpr at: &{url Values}) PostForm, :multipartform ^ABEND881(unrecognized Expr type *ast.StarExpr at: &{8193146 0xc003048780}) MultipartForm, :trailer Trailer, :remoteaddr ^String RemoteAddr, :requesturi ^String RequestURI, :tls ^ABEND881(unrecognized Expr type *ast.StarExpr at: &{8195135 0xc003048e60}) TLS, :cancel ^ABEND881(unrecognized Expr type *ast.ChanType at: &{8195582 8195582 2 0xc003049020}) Cancel, :response ^ABEND881(unrecognized Expr type *ast.StarExpr at: &{8195750 Response}) Response, :ctx ^ABEND881(unrecognized Expr type *ast.SelectorExpr at: &{context Context}) ctx} Error] NewRequest
;;   "NewRequest returns a new Request given a method, URL, and optional body.
;; 
;; If the provided body is also an io.Closer, the returned
;; Request.Body is set to body and will be closed by the Client
;; methods Do, Post, and PostForm, and Transport.RoundTrip.
;; 
;; NewRequest returns a Request suitable for use with Client.Do or
;; Transport.RoundTrip. To create a request for use with testing a
;; Server Handler, either use the NewRequest function in the
;; net/http/httptest package, use ReadRequest, or manually update the
;; Request fields. See the Request type's documentation for the
;; difference between inbound and outbound request fields.
;; 
;; If body is of type *bytes.Buffer, *bytes.Reader, or
;; *strings.Reader, the returned request's ContentLength is set to its
;; exact value (instead of -1), GetBody is populated (so 307 and 308
;; redirects can replay the body), and Body is set to NoBody if the
;; ContentLength is 0."
;;   {:added "1.0"
;;    :go "newRequest(method, url, body)"}
;;   [^String method, ^String url, ^ABEND881(unrecognized Expr type *ast.SelectorExpr at: &{io Reader}) body])
;; 
JOKER FUNC http.NewServeMux has: 
;; (defn ^{:mu ^ABEND881(unrecognized Expr type *ast.SelectorExpr at: &{sync RWMutex}) mu, :m ^ABEND881(unrecognized Expr type *ast.MapType at: &{9368327 string muxEntry}) m, :hosts hosts} NewServeMux
;;   "NewServeMux allocates and returns a new ServeMux."
;;   {:added "1.0"
;;    :go "newServeMux()"}
;;   [])
;; 
JOKER FUNC http.NewTestTimeoutHandler has: 
;; (defn ^ABEND881(unrecognized Expr type *ast.InterfaceType at: &{9304673 0xc0042407e0 false}) NewTestTimeoutHandler
;;   {:added "1.0"
;;    :go "newTestTimeoutHandler(handler, ch)"}
;;   [handler, ^ABEND881(unrecognized Expr type *ast.ChanType at: &{8294059 8294059 2 0xc002f2d9a0}) ch])
;; 
JOKER FUNC http.NotFound has: 
;; (defn NotFound
;;   "NotFound replies to the request with an HTTP 404 not found error."
;;   {:added "1.0"
;;    :go "notFound(w, r)"}
;;   [w, ^ABEND881(unrecognized Expr type *ast.StarExpr at: &{9362355 Request}) r])
;; 
JOKER FUNC http.NotFoundHandler has: 
;; (defn ^ABEND881(unrecognized Expr type *ast.InterfaceType at: &{9304673 0xc0042407e0 false}) NotFoundHandler
;;   "NotFoundHandler returns a simple request handler
;; that replies to each request with a ``404 page not found'' reply."
;;   {:added "1.0"
;;    :go "notFoundHandler()"}
;;   [])
;; 
JOKER FUNC http.ParseHTTPVersion has: 
(defn ^[major minor ok] ParseHTTPVersion
  "ParseHTTPVersion parses a HTTP version string.
"HTTP/1.0" returns (1, 0, true)."
  {:added "1.0"
   :go "parseHTTPVersion(vers)"}
  [^String vers])

JOKER FUNC http.ParseTime has: 
(defn ^[t err] ParseTime
  "ParseTime parses a time header (such as the Date: header),
trying each of the three formats allowed by HTTP/1.1:
TimeFormat, time.RFC850, and time.ANSIC."
  {:added "1.0"
   :go "parseTime(text)"}
  [^String text])

JOKER FUNC http.Post has: 
;; (defn ^[resp err] Post
;;   "Post issues a POST to the specified URL.
;; 
;; Caller should close resp.Body when done reading from it.
;; 
;; If the provided body is an io.Closer, it is closed after the
;; request.
;; 
;; Post is a wrapper around DefaultClient.Post.
;; 
;; To set custom headers, use NewRequest and DefaultClient.Do.
;; 
;; See the Client.Do method documentation for details on how redirects
;; are handled."
;;   {:added "1.0"
;;    :go "post(url, contentType, body)"}
;;   [^String url, ^String contentType, ^ABEND881(unrecognized Expr type *ast.SelectorExpr at: &{io Reader}) body])
;; 
JOKER FUNC http.PostForm has: 
;; (defn ^[resp err] PostForm
;;   "PostForm issues a POST to the specified URL, with data's keys and
;; values URL-encoded as the request body.
;; 
;; The Content-Type header is set to application/x-www-form-urlencoded.
;; To set other headers, use NewRequest and DefaultClient.Do.
;; 
;; When err is nil, resp always contains a non-nil resp.Body.
;; Caller should close resp.Body when done reading from it.
;; 
;; PostForm is a wrapper around DefaultClient.PostForm.
;; 
;; See the Client.Do method documentation for details on how redirects
;; are handled."
;;   {:added "1.0"
;;    :go "postForm(url, data)"}
;;   [^String url, ^ABEND881(unrecognized Expr type *ast.SelectorExpr at: &{url Values}) data])
;; 
JOKER FUNC http.ProxyFromEnvironment has: 
;; (defn ^[ABEND881(unrecognized Expr type *ast.SelectorExpr at: &{url URL}) Error] ProxyFromEnvironment
;;   "ProxyFromEnvironment returns the URL of the proxy to use for a
;; given request, as indicated by the environment variables
;; HTTP_PROXY, HTTPS_PROXY and NO_PROXY (or the lowercase versions
;; thereof). HTTPS_PROXY takes precedence over HTTP_PROXY for https
;; requests.
;; 
;; The environment values may be either a complete URL or a
;; "host[:port]", in which case the "http" scheme is assumed.
;; An error is returned if the value is a different form.
;; 
;; A nil URL and nil error are returned if no proxy is defined in the
;; environment, or a proxy should not be used for the given request,
;; as defined by NO_PROXY.
;; 
;; As a special case, if req.URL.Host is "localhost" (with or without
;; a port number), then a nil URL and nil error will be returned."
;;   {:added "1.0"
;;    :go "proxyFromEnvironment(req)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{8375923 Request}) req])
;; 
JOKER FUNC http.ProxyURL has: 
;; (defn ^ABEND881(unrecognized Expr type *ast.FuncType at: &{8376120 0xc002cb6810 0xc002cb6840}) ProxyURL
;;   "ProxyURL returns a proxy function (for use in a Transport)
;; that always returns the same URL."
;;   {:added "1.0"
;;    :go "proxyURL(fixedURL)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{8376110 0xc002cb8ac0}) fixedURL])
;; 
JOKER FUNC http.ReadRequest has: 
;; (defn ^[{:method ^String Method, :url ^ABEND881(unrecognized Expr type *ast.StarExpr at: &{8188350 0xc003045220}) URL, :proto ^String Proto, :protomajor ^Int ProtoMajor, :protominor ^Int ProtoMinor, :header Header, :body ^ABEND881(unrecognized Expr type *ast.SelectorExpr at: &{io ReadCloser}) Body, :getbody ^ABEND881(unrecognized Expr type *ast.FuncType at: &{8190400 0xc0034097a0 0xc003409860}) GetBody, :contentlength ContentLength, :transferencoding ^ABEND881(unrecognized Expr type *ast.ArrayType at: &{8191048 <nil> string}) TransferEncoding, :close Close, :host ^String Host, :form ^ABEND881(unrecognized Expr type *ast.SelectorExpr at: &{url Values}) Form, :postform ^ABEND881(unrecognized Expr type *ast.SelectorExpr at: &{url Values}) PostForm, :multipartform ^ABEND881(unrecognized Expr type *ast.StarExpr at: &{8193146 0xc003048780}) MultipartForm, :trailer Trailer, :remoteaddr ^String RemoteAddr, :requesturi ^String RequestURI, :tls ^ABEND881(unrecognized Expr type *ast.StarExpr at: &{8195135 0xc003048e60}) TLS, :cancel ^ABEND881(unrecognized Expr type *ast.ChanType at: &{8195582 8195582 2 0xc003049020}) Cancel, :response ^ABEND881(unrecognized Expr type *ast.StarExpr at: &{8195750 Response}) Response, :ctx ^ABEND881(unrecognized Expr type *ast.SelectorExpr at: &{context Context}) ctx} Error] ReadRequest
;;   "ReadRequest reads and parses an incoming request from b.
;; 
;; ReadRequest is a low-level function and should only be used for
;; specialized applications; most code should use the Server to read
;; requests and handle them via the Handler interface. ReadRequest
;; only supports HTTP/1.x requests. For HTTP/2, use golang.org/x/net/http2."
;;   {:added "1.0"
;;    :go "readRequest(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{8215392 0xc0028bce20}) b])
;; 
JOKER FUNC http.ReadResponse has: 
;; (defn ^[{:status ^String Status, :statuscode ^Int StatusCode, :proto ^String Proto, :protomajor ^Int ProtoMajor, :protominor ^Int ProtoMinor, :header Header, :body ^ABEND881(unrecognized Expr type *ast.SelectorExpr at: &{io ReadCloser}) Body, :contentlength ContentLength, :transferencoding ^ABEND881(unrecognized Expr type *ast.ArrayType at: &{9407667 <nil> string}) TransferEncoding, :close Close, :uncompressed Uncompressed, :trailer Trailer, :request ^ABEND881(unrecognized Expr type *ast.StarExpr at: &{9409011 Request}) Request, :tls ^ABEND881(unrecognized Expr type *ast.StarExpr at: &{9409233 0xc004367340}) TLS} Error] ReadResponse
;;   "ReadResponse reads and returns an HTTP response from r.
;; The req parameter optionally specifies the Request that corresponds
;; to this Response. If nil, a GET request is assumed.
;; Clients must call resp.Body.Close when finished reading resp.Body.
;; After that call, clients can inspect resp.Trailer to find key/value
;; pairs included in the response trailer."
;;   {:added "1.0"
;;    :go "readResponse(r, req)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{9410416 0xc004367ee0}) r, ^ABEND881(unrecognized Expr type *ast.StarExpr at: &{9410435 Request}) req])
;; 
JOKER FUNC http.Redirect has: 
;; (defn Redirect
;;   "Redirect replies to the request with a redirect to url,
;; which may be a path relative to the request path.
;; 
;; The provided code should be in the 3xx range and is usually
;; StatusMovedPermanently, StatusFound or StatusSeeOther.
;; 
;; If the Content-Type header has not been set, Redirect sets it
;; to "text/html; charset=utf-8" and writes a small HTML body.
;; Setting the Content-Type header to any value, including nil,
;; disables that behavior."
;;   {:added "1.0"
;;    :go "redirect(w, r, url, code)"}
;;   [w, ^ABEND881(unrecognized Expr type *ast.StarExpr at: &{9363749 Request}) r, ^String url, ^Int code])
;; 
JOKER FUNC http.RedirectHandler has: 
;; (defn ^ABEND881(unrecognized Expr type *ast.InterfaceType at: &{9304673 0xc0042407e0 false}) RedirectHandler
;;   "RedirectHandler returns a request handler that redirects
;; each request it receives to the given url using the given
;; status code.
;; 
;; The provided code should be in the 3xx range and is usually
;; StatusMovedPermanently, StatusFound or StatusSeeOther."
;;   {:added "1.0"
;;    :go "redirectHandler(url, code)"}
;;   [^String url, ^Int code])
;; 
JOKER FUNC http.ResetCachedEnvironment has: 
;; (defn ResetCachedEnvironment
;;   {:added "1.0"
;;    :go "resetCachedEnvironment()"}
;;   [])
;; 
JOKER FUNC http.ResetProxyEnv has: 
;; (defn ResetProxyEnv
;;   {:added "1.0"
;;    :go "resetProxyEnv()"}
;;   [])
;; 
JOKER FUNC http.Serve has: 
;; (defn ^Error Serve
;;   "Serve accepts incoming HTTP connections on the listener l,
;; creating a new service goroutine for each. The service goroutines
;; read requests and then call handler to reply to them.
;; 
;; The handler is typically nil, in which case the DefaultServeMux is used.
;; 
;; HTTP/2 support is only enabled if the Listener returns *tls.Conn
;; connections and they were configured with "h2" in the TLS
;; Config.NextProtos.
;; 
;; Serve always returns a non-nil error."
;;   {:added "1.0"
;;    :go "serve(l, handler)"}
;;   [^ABEND881(unrecognized Expr type *ast.SelectorExpr at: &{net Listener}) l, handler])
;; 
JOKER FUNC http.ServeContent has: 
;; (defn ServeContent
;;   "ServeContent replies to the request using the content in the
;; provided ReadSeeker. The main benefit of ServeContent over io.Copy
;; is that it handles Range requests properly, sets the MIME type, and
;; handles If-Match, If-Unmodified-Since, If-None-Match, If-Modified-Since,
;; and If-Range requests.
;; 
;; If the response's Content-Type header is not set, ServeContent
;; first tries to deduce the type from name's file extension and,
;; if that fails, falls back to reading the first block of the content
;; and passing it to DetectContentType.
;; The name is otherwise unused; in particular it can be empty and is
;; never sent in the response.
;; 
;; If modtime is not the zero time or Unix epoch, ServeContent
;; includes it in a Last-Modified header in the response. If the
;; request includes an If-Modified-Since header, ServeContent uses
;; modtime to decide whether the content needs to be sent at all.
;; 
;; The content's Seek method must work: ServeContent uses
;; a seek to the end of the content to determine its size.
;; 
;; If the caller has set w's ETag header formatted per RFC 7232, section 2.3,
;; ServeContent uses it to handle requests using If-Match, If-None-Match, or If-Range.
;; 
;; Note that *os.File implements the io.ReadSeeker interface."
;;   {:added "1.0"
;;    :go "serveContent(w, req, name, modtime, content)"}
;;   [w, ^ABEND881(unrecognized Expr type *ast.StarExpr at: &{8439965 Request}) req, ^String name, ^ABEND881(unrecognized Expr type *ast.SelectorExpr at: &{time Time}) modtime, ^ABEND881(unrecognized Expr type *ast.SelectorExpr at: &{io ReadSeeker}) content])
;; 
JOKER FUNC http.ServeFile has: 
;; (defn ServeFile
;;   "ServeFile replies to the request with the contents of the named
;; file or directory.
;; 
;; If the provided file or directory name is a relative path, it is
;; interpreted relative to the current directory and may ascend to
;; parent directories. If the provided name is constructed from user
;; input, it should be sanitized before calling ServeFile.
;; 
;; As a precaution, ServeFile will reject requests where r.URL.Path
;; contains a ".." path element; this protects against callers who
;; might unsafely use filepath.Join on r.URL.Path without sanitizing
;; it and then use that filepath.Join result as the name argument.
;; 
;; As another special case, ServeFile redirects any request where r.URL.Path
;; ends in "/index.html" to the same path, without the final
;; "index.html". To avoid such redirects either modify the path or
;; use ServeContent.
;; 
;; Outside of those two special cases, ServeFile does not use
;; r.URL.Path for selecting the file or directory to serve; only the
;; file or directory provided in the name argument is used."
;;   {:added "1.0"
;;    :go "serveFile(w, r, name)"}
;;   [w, ^ABEND881(unrecognized Expr type *ast.StarExpr at: &{8454421 Request}) r, ^String name])
;; 
JOKER FUNC http.ServeTLS has: 
;; (defn ^Error ServeTLS
;;   "ServeTLS accepts incoming HTTPS connections on the listener l,
;; creating a new service goroutine for each. The service goroutines
;; read requests and then call handler to reply to them.
;; 
;; The handler is typically nil, in which case the DefaultServeMux is used.
;; 
;; Additionally, files containing a certificate and matching private key
;; for the server must be provided. If the certificate is signed by a
;; certificate authority, the certFile should be the concatenation
;; of the server's certificate, any intermediates, and the CA's certificate.
;; 
;; ServeTLS always returns a non-nil error."
;;   {:added "1.0"
;;    :go "serveTLS(l, handler, certFile, keyFile)"}
;;   [^ABEND881(unrecognized Expr type *ast.SelectorExpr at: &{net Listener}) l, handler, ^String certFile, ^String keyFile])
;; 
JOKER FUNC http.SetCookie has: 
;; (defn SetCookie
;;   "SetCookie adds a Set-Cookie header to the provided ResponseWriter's headers.
;; The provided cookie must have a valid Name. Invalid cookies may be
;; silently dropped."
;;   {:added "1.0"
;;    :go "setCookie(w, cookie)"}
;;   [w, ^ABEND881(unrecognized Expr type *ast.StarExpr at: &{8495788 Cookie}) cookie])
;; 
JOKER FUNC http.SetPendingDialHooks has: 
;; (defn SetPendingDialHooks
;;   "SetPendingDialHooks sets the hooks that run before and after handling
;; pending dials."
;;   {:added "1.0"
;;    :go "setPendingDialHooks(before, after)"}
;;   [^ABEND881(unrecognized Expr type *ast.FuncType at: &{8293797 0xc0030e8660 <nil>}) before, ^ABEND881(unrecognized Expr type *ast.FuncType at: &{8293797 0xc0030e8660 <nil>}) after])
;; 
JOKER FUNC http.SetReadLoopBeforeNextReadHook has: 
;; (defn SetReadLoopBeforeNextReadHook
;;   {:added "1.0"
;;    :go "setReadLoopBeforeNextReadHook(f)"}
;;   [^ABEND881(unrecognized Expr type *ast.FuncType at: &{8293553 0xc0030e8510 <nil>}) f])
;; 
JOKER FUNC http.SetTestHookServerServe has: 
;; (defn SetTestHookServerServe
;;   {:added "1.0"
;;    :go "setTestHookServerServe(fn)"}
;;   [^ABEND881(unrecognized Expr type *ast.FuncType at: &{8293953 0xc0030e87b0 <nil>}) fn])
;; 
JOKER FUNC http.StatusText has: 
(defn ^String StatusText
  "StatusText returns a text for the HTTP status code. It returns the empty
string if the code is unknown."
  {:added "1.0"
   :go "statusText(code)"}
  [^Int code])

JOKER FUNC http.StripPrefix has: 
;; (defn ^ABEND881(unrecognized Expr type *ast.InterfaceType at: &{9304673 0xc0042407e0 false}) StripPrefix
;;   "StripPrefix returns a handler that serves HTTP requests
;; by removing the given prefix from the request URL's Path
;; and invoking the handler h. StripPrefix handles a
;; request for a path that doesn't begin with prefix by
;; replying with an HTTP 404 not found error."
;;   {:added "1.0"
;;    :go "stripPrefix(prefix, h)"}
;;   [^String prefix, h])
;; 
JOKER FUNC http.TestAddCookie has: 
;; (defn TestAddCookie
;;   {:added "1.0"
;;    :go "testAddCookie(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{8266343 0xc0018ee440}) t])
;; 
JOKER FUNC http.TestBodyReadBadTrailer has: 
;; (defn TestBodyReadBadTrailer
;;   {:added "1.0"
;;    :go "testBodyReadBadTrailer(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{8721269 0xc003af6660}) t])
;; 
JOKER FUNC http.TestCacheKeys has: 
;; (defn TestCacheKeys
;;   {:added "1.0"
;;    :go "testCacheKeys(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{9301372 0xc004237e00}) t])
;; 
JOKER FUNC http.TestCleanHost has: 
;; (defn TestCleanHost
;;   {:added "1.0"
;;    :go "testCleanHost(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{9052683 0xc003ea85a0}) t])
;; 
JOKER FUNC http.TestCmdGoNoHTTPServer has: 
;; (defn TestCmdGoNoHTTPServer
;;   "Test that cmd/go doesn't link in the HTTP server.
;; 
;; This catches accidental dependencies between the HTTP transport and
;; server code."
;;   {:added "1.0"
;;    :go "testCmdGoNoHTTPServer(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{9053751 0xc003ea9180}) t])
;; 
JOKER FUNC http.TestCookieSanitizePath has: 
;; (defn TestCookieSanitizePath
;;   {:added "1.0"
;;    :go "testCookieSanitizePath(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{8273302 0xc0019845e0}) t])
;; 
JOKER FUNC http.TestCookieSanitizeValue has: 
;; (defn TestCookieSanitizeValue
;;   {:added "1.0"
;;    :go "testCookieSanitizeValue(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{8272525 0xc0019817a0}) t])
;; 
JOKER FUNC http.TestDetectInMemoryReaders has: 
;; (defn TestDetectInMemoryReaders
;;   {:added "1.0"
;;    :go "testDetectInMemoryReaders(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{8722566 0xc003af7e20}) t])
;; 
JOKER FUNC http.TestFileTransport has: 
;; (defn TestFileTransport
;;   {:added "1.0"
;;    :go "testFileTransport(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{8635492 0xc0039c4cc0}) t])
;; 
JOKER FUNC http.TestFinalChunkedBodyReadEOF has: 
;; (defn TestFinalChunkedBodyReadEOF
;;   {:added "1.0"
;;    :go "testFinalChunkedBodyReadEOF(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{8721948 0xc003af7340}) t])
;; 
JOKER FUNC http.TestForeachHeaderElement has: 
;; (defn TestForeachHeaderElement
;;   {:added "1.0"
;;    :go "testForeachHeaderElement(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{9052030 0xc003ea19a0}) t])
;; 
JOKER FUNC http.TestHasToken has: 
;; (defn TestHasToken
;;   {:added "1.0"
;;    :go "testHasToken(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{8283026 0xc002b28b60}) t])
;; 
JOKER FUNC http.TestHeaderWrite has: 
;; (defn TestHeaderWrite
;;   {:added "1.0"
;;    :go "testHeaderWrite(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{8281140 0xc00126e820}) t])
;; 
JOKER FUNC http.TestHeaderWriteSubsetAllocs has: 
;; (defn TestHeaderWriteSubsetAllocs
;;   {:added "1.0"
;;    :go "testHeaderWriteSubsetAllocs(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{8283606 0xc002b29620}) t])
;; 
JOKER FUNC http.TestLocationResponse has: 
;; (defn TestLocationResponse
;;   {:added "1.0"
;;    :go "testLocationResponse(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{8167891 0xc0022de960}) t])
;; 
JOKER FUNC http.TestNeedsSniff has: 
;; (defn TestNeedsSniff
;;   {:added "1.0"
;;    :go "testNeedsSniff(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{8174259 0xc0026b8440}) t])
;; 
JOKER FUNC http.TestParseRange has: 
;; (defn TestParseRange
;;   {:added "1.0"
;;    :go "testParseRange(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{8638524 0xc0039d4580}) t])
;; 
JOKER FUNC http.TestParseTime has: 
;; (defn TestParseTime
;;   {:added "1.0"
;;    :go "testParseTime(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{8281776 0xc00126f320}) t])
;; 
JOKER FUNC http.TestReadCookies has: 
;; (defn TestReadCookies
;;   {:added "1.0"
;;    :go "testReadCookies(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{8271341 0xc001980160}) t])
;; 
JOKER FUNC http.TestReadRequest has: 
;; (defn TestReadRequest
;;   {:added "1.0"
;;    :go "testReadRequest(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{9137088 0xc003fd0f00}) t])
;; 
JOKER FUNC http.TestReadRequest_Bad has: 
;; (defn TestReadRequest_Bad
;;   {:added "1.0"
;;    :go "testReadRequest_Bad(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{9138780 0xc003fd27e0}) t])
;; 
JOKER FUNC http.TestReadResponse has: 
;; (defn TestReadResponse
;;   "tests successful calls to ReadResponse, and inspects the returned Response.
;; For error cases, see TestReadResponseErrors below."
;;   {:added "1.0"
;;    :go "testReadResponse(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{8163159 0xc002377420}) t])
;; 
JOKER FUNC http.TestReadResponseCloseInMiddle has: 
;; (defn TestReadResponseCloseInMiddle
;;   "TestReadResponseCloseInMiddle tests that closing a body after
;; reading only part of its contents advances the read to the end of
;; the request, right up until the next request."
;;   {:added "1.0"
;;    :go "testReadResponseCloseInMiddle(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{8164416 0xc001810ca0}) t])
;; 
JOKER FUNC http.TestReadResponseErrors has: 
;; (defn TestReadResponseErrors
;;   "Test various ReadResponse error cases. (also tests success cases, but mostly
;; it's about errors).  This does not test anything involving the bodies. Only
;; the return value from ReadResponse itself."
;;   {:added "1.0"
;;    :go "testReadResponseErrors(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{8169999 0xc00259cea0}) t])
;; 
JOKER FUNC http.TestReadSetCookies has: 
;; (defn TestReadSetCookies
;;   {:added "1.0"
;;    :go "testReadSetCookies(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{8270243 0xc00197cfa0}) t])
;; 
JOKER FUNC http.TestRequestWrite has: 
;; (defn TestRequestWrite
;;   {:added "1.0"
;;    :go "testRequestWrite(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{8471419 0xc00309f860}) t])
;; 
JOKER FUNC http.TestRequestWriteClosesBody has: 
;; (defn TestRequestWriteClosesBody
;;   "TestRequestWriteClosesBody tests that Request.Write closes its request.Body.
;; It also indirectly tests NewRequest and that it doesn't wrap an existing Closer
;; inside a NopCloser, and that it serializes it correctly."
;;   {:added "1.0"
;;    :go "testRequestWriteClosesBody(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{8476074 0xc0030b4100}) t])
;; 
JOKER FUNC http.TestRequestWriteError has: 
;; (defn TestRequestWriteError
;;   "TestRequestWriteError tests the Write err != nil checks in (*Request).write."
;;   {:added "1.0"
;;    :go "testRequestWriteError(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{8477111 0xc0030b5240}) t])
;; 
JOKER FUNC http.TestRequestWriteTransport has: 
;; (defn TestRequestWriteTransport
;;   {:added "1.0"
;;    :go "testRequestWriteTransport(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{8472584 0xc0030a8f60}) t])
;; 
JOKER FUNC http.TestResponseContentLengthShortBody has: 
;; (defn TestResponseContentLengthShortBody
;;   {:added "1.0"
;;    :go "testResponseContentLengthShortBody(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{8169024 0xc00259c160}) t])
;; 
JOKER FUNC http.TestResponseStatusStutter has: 
;; (defn TestResponseStatusStutter
;;   {:added "1.0"
;;    :go "testResponseStatusStutter(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{8168721 0xc0022dfbc0}) t])
;; 
JOKER FUNC http.TestResponseWrite has: 
;; (defn TestResponseWrite
;;   {:added "1.0"
;;    :go "testResponseWrite(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{8284856 0xc002b2c480}) t])
;; 
JOKER FUNC http.TestResponseWritesOnlySingleConnectionClose has: 
;; (defn TestResponseWritesOnlySingleConnectionClose
;;   "A response should only write out single Connection: close header. Tests #19499."
;;   {:added "1.0"
;;    :go "testResponseWritesOnlySingleConnectionClose(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{8174813 0xc0026b8b60}) t])
;; 
JOKER FUNC http.TestSetCookie has: 
;; (defn TestSetCookie
;;   {:added "1.0"
;;    :go "testSetCookie(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{8265395 0xc0020b74a0}) t])
;; 
JOKER FUNC http.TestSetCookieDoubleQuotes has: 
;; (defn TestSetCookieDoubleQuotes
;;   {:added "1.0"
;;    :go "testSetCookieDoubleQuotes(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{8271705 0xc001980800}) t])
;; 
JOKER FUNC http.TestTransportPersistConnReadLoopEOF has: 
;; (defn TestTransportPersistConnReadLoopEOF
;;   "Issue 15446: incorrect wrapping of errors when server closes an idle connection."
;;   {:added "1.0"
;;    :go "testTransportPersistConnReadLoopEOF(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{8175938 0xc0026b9aa0}) t])
;; 
JOKER FUNC http.TestTransportShouldRetryRequest has: 
;; (defn TestTransportShouldRetryRequest
;;   {:added "1.0"
;;    :go "testTransportShouldRetryRequest(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{8178123 0xc002c69dc0}) t])
;; 
JOKER FUNC http.TestWriteResponse has: 
;; (defn TestWriteResponse
;;   {:added "1.0"
;;    :go "testWriteResponse(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{8163762 0xc001810260}) t])
;; 
JOKER FUNC http.TestWriteSetCookies has: 
;; (defn TestWriteSetCookies
;;   {:added "1.0"
;;    :go "testWriteSetCookies(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{8264666 0xc0020b67e0}) t])
;; 
JOKER FUNC http.TimeoutHandler has: 
;; (defn ^ABEND881(unrecognized Expr type *ast.InterfaceType at: &{9304673 0xc0042407e0 false}) TimeoutHandler
;;   "TimeoutHandler returns a Handler that runs h with the given time limit.
;; 
;; The new Handler calls h.ServeHTTP to handle each request, but if a
;; call runs for longer than its time limit, the handler responds with
;; a 503 Service Unavailable error and the given message in its body.
;; (If msg is empty, a suitable default message will be sent.)
;; After such a timeout, writes by h to its ResponseWriter will return
;; ErrHandlerTimeout.
;; 
;; TimeoutHandler buffers all Handler writes to memory and does not
;; support the Hijacker or Flusher interfaces."
;;   {:added "1.0"
;;    :go "timeoutHandler(h, dt, msg)"}
;;   [h, ^ABEND881(unrecognized Expr type *ast.SelectorExpr at: &{time Duration}) dt, ^String msg])
;; 
JOKER FUNC http_test.BenchmarkClient has: 
;; (defn BenchmarkClient
;;   "A benchmark for profiling the client without the HTTP server code.
;; The server code runs in a subprocess."
;;   {:added "1.0"
;;    :go "benchmarkClient(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{9276549 0xc0041d6000}) b])
;; 
JOKER FUNC http_test.BenchmarkClientServer has: 
;; (defn BenchmarkClientServer
;;   {:added "1.0"
;;    :go "benchmarkClientServer(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{9273026 0xc0041cc2e0}) b])
;; 
JOKER FUNC http_test.BenchmarkClientServerParallel4 has: 
;; (defn BenchmarkClientServerParallel4
;;   {:added "1.0"
;;    :go "benchmarkClientServerParallel4(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{9273581 0xc0041ccf00}) b])
;; 
JOKER FUNC http_test.BenchmarkClientServerParallel64 has: 
;; (defn BenchmarkClientServerParallel64
;;   {:added "1.0"
;;    :go "benchmarkClientServerParallel64(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{9273681 0xc0041cd080}) b])
;; 
JOKER FUNC http_test.BenchmarkClientServerParallelTLS4 has: 
;; (defn BenchmarkClientServerParallelTLS4
;;   {:added "1.0"
;;    :go "benchmarkClientServerParallelTLS4(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{9273784 0xc0041cd200}) b])
;; 
JOKER FUNC http_test.BenchmarkClientServerParallelTLS64 has: 
;; (defn BenchmarkClientServerParallelTLS64
;;   {:added "1.0"
;;    :go "benchmarkClientServerParallelTLS64(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{9273886 0xc0041cd380}) b])
;; 
JOKER FUNC http_test.BenchmarkCloseNotifier has: 
;; (defn BenchmarkCloseNotifier
;;   {:added "1.0"
;;    :go "benchmarkCloseNotifier(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{9284079 0xc0041f7bc0}) b])
;; 
JOKER FUNC http_test.BenchmarkReadRequestApachebench has: 
;; (defn BenchmarkReadRequestApachebench
;;   {:added "1.0"
;;    :go "benchmarkReadRequestApachebench(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{8261118 0xc002a7dbc0}) b])
;; 
JOKER FUNC http_test.BenchmarkReadRequestChrome has: 
;; (defn BenchmarkReadRequestChrome
;;   {:added "1.0"
;;    :go "benchmarkReadRequestChrome(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{8260175 0xc002a7d880}) b])
;; 
JOKER FUNC http_test.BenchmarkReadRequestCurl has: 
;; (defn BenchmarkReadRequestCurl
;;   {:added "1.0"
;;    :go "benchmarkReadRequestCurl(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{8260929 0xc002a7da20}) b])
;; 
JOKER FUNC http_test.BenchmarkReadRequestSiege has: 
;; (defn BenchmarkReadRequestSiege
;;   {:added "1.0"
;;    :go "benchmarkReadRequestSiege(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{8261313 0xc002a7dd60}) b])
;; 
JOKER FUNC http_test.BenchmarkReadRequestWrk has: 
;; (defn BenchmarkReadRequestWrk
;;   {:added "1.0"
;;    :go "benchmarkReadRequestWrk(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{8261576 0xc002a7df00}) b])
;; 
JOKER FUNC http_test.BenchmarkResponseStatusLine has: 
;; (defn BenchmarkResponseStatusLine
;;   {:added "1.0"
;;    :go "benchmarkResponseStatusLine(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{9300571 0xc0042372a0}) b])
;; 
JOKER FUNC http_test.BenchmarkServeMux has: 
;; (defn BenchmarkServeMux
;;   {:added "1.0"
;;    :go "benchmarkServeMux(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{9154708 0xc004032b00}) b])
;; 
JOKER FUNC http_test.BenchmarkServeMux_SkipServe has: 
;; (defn BenchmarkServeMux_SkipServe
;;   {:added "1.0"
;;    :go "benchmarkServeMux_SkipServe(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{9154796 0xc004032c60}) b])
;; 
JOKER FUNC http_test.BenchmarkServer has: 
;; (defn BenchmarkServer
;;   "A benchmark for profiling the server without the HTTP client code.
;; The client code runs in a subprocess.
;; 
;; For use like:
;;   $ go test -c
;;   $ ./http.test -test.run=XX -test.bench=BenchmarkServer -test.benchtime=15s -test.cpuprofile=http.prof
;;   $ go tool pprof http.test http.prof
;;   (pprof) web"
;;   {:added "1.0"
;;    :go "benchmarkServer(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{9275028 0xc0041d2520}) b])
;; 
JOKER FUNC http_test.BenchmarkServerFakeConnNoKeepAlive has: 
;; (defn BenchmarkServerFakeConnNoKeepAlive
;;   {:added "1.0"
;;    :go "benchmarkServerFakeConnNoKeepAlive(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{9278858 0xc0041eeac0}) b])
;; 
JOKER FUNC http_test.BenchmarkServerFakeConnWithKeepAlive has: 
;; (defn BenchmarkServerFakeConnWithKeepAlive
;;   {:added "1.0"
;;    :go "benchmarkServerFakeConnWithKeepAlive(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{9280133 0xc0041efde0}) b])
;; 
JOKER FUNC http_test.BenchmarkServerFakeConnWithKeepAliveLite has: 
;; (defn BenchmarkServerFakeConnWithKeepAliveLite
;;   "same as above, but representing the most simple possible request
;; and handler. Notably: the handler does not call rw.Header()."
;;   {:added "1.0"
;;    :go "benchmarkServerFakeConnWithKeepAliveLite(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{9281204 0xc0041f49a0}) b])
;; 
JOKER FUNC http_test.BenchmarkServerHandlerNoHeader has: 
;; (defn BenchmarkServerHandlerNoHeader
;;   "Neither a Content-Type or Content-Length, so sniffed and counted."
;;   {:added "1.0"
;;    :go "benchmarkServerHandlerNoHeader(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{9282921 0xc0041f6420}) b])
;; 
JOKER FUNC http_test.BenchmarkServerHandlerNoLen has: 
;; (defn BenchmarkServerHandlerNoLen
;;   "A Content-Type is set, but no length. No sniffing, but will count the Content-Length."
;;   {:added "1.0"
;;    :go "benchmarkServerHandlerNoLen(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{9282378 0xc0041f5ba0}) b])
;; 
JOKER FUNC http_test.BenchmarkServerHandlerNoType has: 
;; (defn BenchmarkServerHandlerNoType
;;   "A Content-Length is set, but the Content-Type will be sniffed."
;;   {:added "1.0"
;;    :go "benchmarkServerHandlerNoType(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{9282638 0xc0041f5fa0}) b])
;; 
JOKER FUNC http_test.BenchmarkServerHandlerTypeLen has: 
;; (defn BenchmarkServerHandlerTypeLen
;;   "Both Content-Type and Content-Length set. Should be no buffering."
;;   {:added "1.0"
;;    :go "benchmarkServerHandlerTypeLen(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{9282032 0xc0041f5620}) b])
;; 
JOKER FUNC http_test.BenchmarkServerHijack has: 
;; (defn BenchmarkServerHijack
;;   {:added "1.0"
;;    :go "benchmarkServerHijack(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{9283578 0xc0041f7140}) b])
;; 
JOKER FUNC http_test.ExampleFileServer has: 
;; (defn ExampleFileServer
;;   {:added "1.0"
;;    :go "exampleFileServer()"}
;;   [])
;; 
JOKER FUNC http_test.ExampleFileServer_stripPrefix has: 
;; (defn ExampleFileServer_stripPrefix
;;   {:added "1.0"
;;    :go "exampleFileServer_stripPrefix()"}
;;   [])
;; 
JOKER FUNC http_test.ExampleGet has: 
;; (defn ExampleGet
;;   {:added "1.0"
;;    :go "exampleGet()"}
;;   [])
;; 
JOKER FUNC http_test.ExampleHijacker has: 
;; (defn ExampleHijacker
;;   {:added "1.0"
;;    :go "exampleHijacker()"}
;;   [])
;; 
JOKER FUNC http_test.ExampleListenAndServe has: 
;; (defn ExampleListenAndServe
;;   {:added "1.0"
;;    :go "exampleListenAndServe()"}
;;   [])
;; 
JOKER FUNC http_test.ExampleListenAndServeTLS has: 
;; (defn ExampleListenAndServeTLS
;;   {:added "1.0"
;;    :go "exampleListenAndServeTLS()"}
;;   [])
;; 
JOKER FUNC http_test.ExampleResponseWriter_trailers has: 
;; (defn ExampleResponseWriter_trailers
;;   "HTTP Trailers are a set of key/value pairs like headers that come
;; after the HTTP response, instead of before."
;;   {:added "1.0"
;;    :go "exampleResponseWriter_trailers()"}
;;   [])
;; 
JOKER FUNC http_test.ExampleServeMux_Handle has: 
;; (defn ExampleServeMux_Handle
;;   {:added "1.0"
;;    :go "exampleServeMux_Handle()"}
;;   [])
;; 
JOKER FUNC http_test.ExampleServer_Shutdown has: 
;; (defn ExampleServer_Shutdown
;;   {:added "1.0"
;;    :go "exampleServer_Shutdown()"}
;;   [])
;; 
JOKER FUNC http_test.ExampleStripPrefix has: 
;; (defn ExampleStripPrefix
;;   {:added "1.0"
;;    :go "exampleStripPrefix()"}
;;   [])
;; 
JOKER FUNC http_test.Test304Responses_h1 has: 
;; (defn Test304Responses_h1
;;   "Test304Responses verifies that 304s don't declare that they're
;; chunking in their response headers and aren't allowed to produce
;; output."
;;   {:added "1.0"
;;    :go "test304Responses_h1(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{9099630 0xc003f4bcc0}) t])
;; 
JOKER FUNC http_test.Test304Responses_h2 has: 
;; (defn Test304Responses_h2
;;   {:added "1.0"
;;    :go "test304Responses_h2(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{9099701 0xc003f4be20}) t])
;; 
JOKER FUNC http_test.TestAcceptMaxFds has: 
;; (defn TestAcceptMaxFds
;;   {:added "1.0"
;;    :go "testAcceptMaxFds(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{9238177 0xc004150860}) t])
;; 
JOKER FUNC http_test.TestAppendTime has: 
;; (defn TestAppendTime
;;   {:added "1.0"
;;    :go "testAppendTime(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{9249615 0xc00416fb00}) t])
;; 
JOKER FUNC http_test.TestAutomaticHTTP2_ListenAndServe has: 
;; (defn TestAutomaticHTTP2_ListenAndServe
;;   {:added "1.0"
;;    :go "testAutomaticHTTP2_ListenAndServe(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{9181862 0xc0040984a0}) t])
;; 
JOKER FUNC http_test.TestAutomaticHTTP2_ListenAndServe_GetCertificate has: 
;; (defn TestAutomaticHTTP2_ListenAndServe_GetCertificate
;;   {:added "1.0"
;;    :go "testAutomaticHTTP2_ListenAndServe_GetCertificate(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{9182143 0xc004098980}) t])
;; 
JOKER FUNC http_test.TestAutomaticHTTP2_Serve_H2TLSConfig has: 
;; (defn TestAutomaticHTTP2_Serve_H2TLSConfig
;;   {:added "1.0"
;;    :go "testAutomaticHTTP2_Serve_H2TLSConfig(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{9180803 0xc0040953a0}) t])
;; 
JOKER FUNC http_test.TestAutomaticHTTP2_Serve_NoTLSConfig has: 
;; (defn TestAutomaticHTTP2_Serve_NoTLSConfig
;;   "Issue 15908"
;;   {:added "1.0"
;;    :go "testAutomaticHTTP2_Serve_NoTLSConfig(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{9180587 0xc004095040}) t])
;; 
JOKER FUNC http_test.TestAutomaticHTTP2_Serve_NonH2TLSConfig has: 
;; (defn TestAutomaticHTTP2_Serve_NonH2TLSConfig
;;   {:added "1.0"
;;    :go "testAutomaticHTTP2_Serve_NonH2TLSConfig(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{9180691 0xc0040951c0}) t])
;; 
JOKER FUNC http_test.TestAutomaticHTTP2_Serve_WithTLSConfig has: 
;; (defn TestAutomaticHTTP2_Serve_WithTLSConfig
;;   {:added "1.0"
;;    :go "testAutomaticHTTP2_Serve_WithTLSConfig(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{9181361 0xc004095d60}) t])
;; 
JOKER FUNC http_test.TestBadResponseAfterReadingBody has: 
;; (defn TestBadResponseAfterReadingBody
;;   {:added "1.0"
;;    :go "testBadResponseAfterReadingBody(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{9125491 0xc003fb49c0}) t])
;; 
JOKER FUNC http_test.TestBasicAuth has: 
;; (defn TestBasicAuth
;;   {:added "1.0"
;;    :go "testBasicAuth(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{8689574 0xc003a92aa0}) t])
;; 
JOKER FUNC http_test.TestBasicAuthHeadersPreserved has: 
;; (defn TestBasicAuthHeadersPreserved
;;   {:added "1.0"
;;    :go "testBasicAuthHeadersPreserved(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{8690452 0xc003a93a60}) t])
;; 
JOKER FUNC http_test.TestCancelRequestMidBody_h1 has: 
;; (defn TestCancelRequestMidBody_h1
;;   "Tests that closing the Request.Cancel channel also while still
;; reading the response body. Issue 13159."
;;   {:added "1.0"
;;    :go "testCancelRequestMidBody_h1(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{9101868 0xc003f5a520}) t])
;; 
JOKER FUNC http_test.TestCancelRequestMidBody_h2 has: 
;; (defn TestCancelRequestMidBody_h2
;;   {:added "1.0"
;;    :go "testCancelRequestMidBody_h2(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{9101955 0xc003f5a680}) t])
;; 
JOKER FUNC http_test.TestCancelRequestWithChannel has: 
;; (defn TestCancelRequestWithChannel
;;   {:added "1.0"
;;    :go "testCancelRequestWithChannel(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{8553572 0xc00388d020}) t])
;; 
JOKER FUNC http_test.TestCancelRequestWithChannelBeforeDo_Cancel has: 
;; (defn TestCancelRequestWithChannelBeforeDo_Cancel
;;   {:added "1.0"
;;    :go "testCancelRequestWithChannelBeforeDo_Cancel(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{8554886 0xc0038926e0}) t])
;; 
JOKER FUNC http_test.TestCancelRequestWithChannelBeforeDo_Context has: 
;; (defn TestCancelRequestWithChannelBeforeDo_Context
;;   {:added "1.0"
;;    :go "testCancelRequestWithChannelBeforeDo_Context(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{8555002 0xc003892840}) t])
;; 
JOKER FUNC http_test.TestCaseSensitiveMethod_h1 has: 
;; (defn TestCaseSensitiveMethod_h1
;;   {:added "1.0"
;;    :go "testCaseSensitiveMethod_h1(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{9223488 0xc00412a1e0}) t])
;; 
JOKER FUNC http_test.TestCaseSensitiveMethod_h2 has: 
;; (defn TestCaseSensitiveMethod_h2
;;   {:added "1.0"
;;    :go "testCaseSensitiveMethod_h2(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{9223573 0xc00412a340}) t])
;; 
JOKER FUNC http_test.TestChunkedNoContent has: 
;; (defn TestChunkedNoContent
;;   "From https://golang.org/issue/4454 ,
;; "client fails to handle requests with no body and chunked encoding""
;;   {:added "1.0"
;;    :go "testChunkedNoContent(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{8544579 0xc00386eea0}) t])
;; 
JOKER FUNC http_test.TestChunkedResponseHeaders_h1 has: 
;; (defn TestChunkedResponseHeaders_h1
;;   {:added "1.0"
;;    :go "testChunkedResponseHeaders_h1(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{9090845 0xc003f33a20}) t])
;; 
JOKER FUNC http_test.TestChunkedResponseHeaders_h2 has: 
;; (defn TestChunkedResponseHeaders_h2
;;   {:added "1.0"
;;    :go "testChunkedResponseHeaders_h2(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{9090936 0xc003f33b80}) t])
;; 
JOKER FUNC http_test.TestClient has: 
;; (defn TestClient
;;   {:added "1.0"
;;    :go "testClient(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{8661014 0xc003a2d0a0}) t])
;; 
JOKER FUNC http_test.TestClientAltersCookiesOnRedirect has: 
;; (defn TestClientAltersCookiesOnRedirect
;;   "Issue 17494: cookies should be altered when Client follows redirects."
;;   {:added "1.0"
;;    :go "testClientAltersCookiesOnRedirect(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{8703586 0xc003ac6ba0}) t])
;; 
JOKER FUNC http_test.TestClientCanClose has: 
;; (defn TestClientCanClose
;;   "TestClientCanClose verifies that clients can also force a connection to close."
;;   {:added "1.0"
;;    :go "testClientCanClose(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{9169109 0xc004062b20}) t])
;; 
JOKER FUNC http_test.TestClientCopyHeadersOnRedirect has: 
;; (defn TestClientCopyHeadersOnRedirect
;;   "Issue 4800: copy (some) headers when Client follows a redirect."
;;   {:added "1.0"
;;    :go "testClientCopyHeadersOnRedirect(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{8699947 0xc003aba8e0}) t])
;; 
JOKER FUNC http_test.TestClientCopyHostOnRedirect has: 
;; (defn TestClientCopyHostOnRedirect
;;   "Issue 22233: copy host when Client follows a relative redirect."
;;   {:added "1.0"
;;    :go "testClientCopyHostOnRedirect(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{8701558 0xc003ac0740}) t])
;; 
JOKER FUNC http_test.TestClientErrorWithRequestURI has: 
;; (defn TestClientErrorWithRequestURI
;;   {:added "1.0"
;;    :go "testClientErrorWithRequestURI(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{8683501 0xc003a7c340}) t])
;; 
JOKER FUNC http_test.TestClientHeadContentLength_h1 has: 
;; (defn TestClientHeadContentLength_h1
;;   "Verify Response.ContentLength is populated. https://golang.org/issue/4126"
;;   {:added "1.0"
;;    :go "testClientHeadContentLength_h1(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{8687783 0xc003a886c0}) t])
;; 
JOKER FUNC http_test.TestClientHeadContentLength_h2 has: 
;; (defn TestClientHeadContentLength_h2
;;   {:added "1.0"
;;    :go "testClientHeadContentLength_h2(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{8687878 0xc003a88820}) t])
;; 
JOKER FUNC http_test.TestClientHead_h1 has: 
;; (defn TestClientHead_h1
;;   {:added "1.0"
;;    :go "testClientHead_h1(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{8661458 0xc003a2d9a0}) t])
;; 
JOKER FUNC http_test.TestClientHead_h2 has: 
;; (defn TestClientHead_h2
;;   {:added "1.0"
;;    :go "testClientHead_h2(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{8661525 0xc003a2db00}) t])
;; 
JOKER FUNC http_test.TestClientInsecureTransport has: 
;; (defn TestClientInsecureTransport
;;   {:added "1.0"
;;    :go "testClientInsecureTransport(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{8682437 0xc003a79220}) t])
;; 
JOKER FUNC http_test.TestClientRedirect308NoGetBody has: 
;; (defn TestClientRedirect308NoGetBody
;;   "Don't follow a 307/308 if we can't resent the request body."
;;   {:added "1.0"
;;    :go "testClientRedirect308NoGetBody(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{8675040 0xc003a5c1e0}) t])
;; 
JOKER FUNC http_test.TestClientRedirect308NoLocation has: 
;; (defn TestClientRedirect308NoLocation
;;   "Issue 17773: don't follow a 308 (or 307) if the response doesn't
;; have a Location header."
;;   {:added "1.0"
;;    :go "testClientRedirect308NoLocation(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{8674454 0xc003a55640}) t])
;; 
JOKER FUNC http_test.TestClientRedirectContext has: 
;; (defn TestClientRedirectContext
;;   "Tests that Client redirects' contexts are derived from the original request's context."
;;   {:added "1.0"
;;    :go "testClientRedirectContext(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{8667903 0xc003a42cc0}) t])
;; 
JOKER FUNC http_test.TestClientRedirectEatsBody_h1 has: 
;; (defn TestClientRedirectEatsBody_h1
;;   {:added "1.0"
;;    :go "testClientRedirectEatsBody_h1(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{8696819 0xc003aafc60}) t])
;; 
JOKER FUNC http_test.TestClientRedirectEatsBody_h2 has: 
;; (defn TestClientRedirectEatsBody_h2
;;   {:added "1.0"
;;    :go "testClientRedirectEatsBody_h2(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{8696910 0xc003aafdc0}) t])
;; 
JOKER FUNC http_test.TestClientRedirectResponseWithoutRequest has: 
;; (defn TestClientRedirectResponseWithoutRequest
;;   "Issue 15577: don't assume the roundtripper's response populates its Request field."
;;   {:added "1.0"
;;    :go "testClientRedirectResponseWithoutRequest(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{8699616 0xc003aba480}) t])
;; 
JOKER FUNC http_test.TestClientRedirectTypes has: 
;; (defn TestClientRedirectTypes
;;   {:added "1.0"
;;    :go "testClientRedirectTypes(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{8708243 0xc003ad3740}) t])
;; 
JOKER FUNC http_test.TestClientRedirectUseResponse has: 
;; (defn TestClientRedirectUseResponse
;;   {:added "1.0"
;;    :go "testClientRedirectUseResponse(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{8673383 0xc003a54280}) t])
;; 
JOKER FUNC http_test.TestClientRedirects has: 
;; (defn TestClientRedirects
;;   {:added "1.0"
;;    :go "testClientRedirects(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{8664637 0xc003a37660}) t])
;; 
JOKER FUNC http_test.TestClientSendsCookieFromJar has: 
;; (defn TestClientSendsCookieFromJar
;;   {:added "1.0"
;;    :go "testClientSendsCookieFromJar(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{8676271 0xc003a5d940}) t])
;; 
JOKER FUNC http_test.TestClientTimeoutCancel has: 
;; (defn TestClientTimeoutCancel
;;   "Issue 16094: if Client.Timeout is set but not hit, a Timeout error shouldn't be
;; returned."
;;   {:added "1.0"
;;    :go "testClientTimeoutCancel(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{8696152 0xc003aaee60}) t])
;; 
JOKER FUNC http_test.TestClientTimeoutKillsConn_AfterHeaders has: 
;; (defn TestClientTimeoutKillsConn_AfterHeaders
;;   "Issue 23399: verify that if a client request times out, the Transport's
;; conn is closed so that it's not reused.
;; 
;; This is the test variant that has the server send response headers
;; first, and time out during the the write of the response body."
;;   {:added "1.0"
;;    :go "testClientTimeoutKillsConn_AfterHeaders(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{8630115 0xc0039ba440}) t])
;; 
JOKER FUNC http_test.TestClientTimeoutKillsConn_BeforeHeaders has: 
;; (defn TestClientTimeoutKillsConn_BeforeHeaders
;;   "Issue 23399: verify that if a client request times out, the Transport's
;; conn is closed so that it's not reused.
;; 
;; This is the test variant that times out before the server replies with
;; any response headers."
;;   {:added "1.0"
;;    :go "testClientTimeoutKillsConn_BeforeHeaders(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{8628579 0xc0039af000}) t])
;; 
JOKER FUNC http_test.TestClientTimeout_Headers_h1 has: 
;; (defn TestClientTimeout_Headers_h1
;;   {:added "1.0"
;;    :go "testClientTimeout_Headers_h1(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{8694475 0xc003aa19a0}) t])
;; 
JOKER FUNC http_test.TestClientTimeout_Headers_h2 has: 
;; (defn TestClientTimeout_Headers_h2
;;   {:added "1.0"
;;    :go "testClientTimeout_Headers_h2(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{8694564 0xc003aa1b00}) t])
;; 
JOKER FUNC http_test.TestClientTimeout_h1 has: 
;; (defn TestClientTimeout_h1
;;   {:added "1.0"
;;    :go "testClientTimeout_h1(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{8692436 0xc003a9b880}) t])
;; 
JOKER FUNC http_test.TestClientTimeout_h2 has: 
;; (defn TestClientTimeout_h2
;;   {:added "1.0"
;;    :go "testClientTimeout_h2(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{8692509 0xc003a9b9e0}) t])
;; 
JOKER FUNC http_test.TestClientWithCorrectTLSServerName has: 
;; (defn TestClientWithCorrectTLSServerName
;;   {:added "1.0"
;;    :go "testClientWithCorrectTLSServerName(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{8683909 0xc003a7c980}) t])
;; 
JOKER FUNC http_test.TestClientWithIncorrectTLSServerName has: 
;; (defn TestClientWithIncorrectTLSServerName
;;   {:added "1.0"
;;    :go "testClientWithIncorrectTLSServerName(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{8684458 0xc003a7d2c0}) t])
;; 
JOKER FUNC http_test.TestClientWriteShutdown has: 
;; (defn TestClientWriteShutdown
;;   "TestClientWriteShutdown tests that if the client shuts down the write
;; side of their TCP connection, the server doesn't send a 400 Bad Request."
;;   {:added "1.0"
;;    :go "testClientWriteShutdown(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{9220587 0xc004111520}) t])
;; 
JOKER FUNC http_test.TestClientWrites has: 
;; (defn TestClientWrites
;;   "TestClientWrites verifies that client requests are buffered and we
;; don't send a TCP packet per line of the http request + body."
;;   {:added "1.0"
;;    :go "testClientWrites(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{8681690 0xc003a78260}) t])
;; 
JOKER FUNC http_test.TestCloseIdleConnections_h1 has: 
;; (defn TestCloseIdleConnections_h1
;;   "Issue 14607"
;;   {:added "1.0"
;;    :go "testCloseIdleConnections_h1(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{9122397 0xc003fa6c20}) t])
;; 
JOKER FUNC http_test.TestCloseIdleConnections_h2 has: 
;; (defn TestCloseIdleConnections_h2
;;   {:added "1.0"
;;    :go "testCloseIdleConnections_h2(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{9122484 0xc003fa6d80}) t])
;; 
JOKER FUNC http_test.TestCloseNotifier has: 
;; (defn TestCloseNotifier
;;   {:added "1.0"
;;    :go "testCloseNotifier(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{9225173 0xc00412be80}) t])
;; 
JOKER FUNC http_test.TestCloseNotifierChanLeak has: 
;; (defn TestCloseNotifierChanLeak
;;   {:added "1.0"
;;    :go "testCloseNotifierChanLeak(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{9227272 0xc004130220}) t])
;; 
JOKER FUNC http_test.TestCloseNotifierPipelined has: 
;; (defn TestCloseNotifierPipelined
;;   "Tests that a pipelined request does not cause the first request's
;; Handler's CloseNotify channel to fire.
;; 
;; Issue 13165 (where it used to deadlock), but behavior changed in Issue 23921."
;;   {:added "1.0"
;;    :go "testCloseNotifierPipelined(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{9226160 0xc00412ce20}) t])
;; 
JOKER FUNC http_test.TestCloseWrite has: 
;; (defn TestCloseWrite
;;   {:added "1.0"
;;    :go "testCloseWrite(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{9255894 0xc004191720}) t])
;; 
JOKER FUNC http_test.TestCodesPreventingContentTypeAndBody has: 
;; (defn TestCodesPreventingContentTypeAndBody
;;   "Issue 6157, Issue 6685"
;;   {:added "1.0"
;;    :go "testCodesPreventingContentTypeAndBody(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{9242707 0xc00415f8c0}) t])
;; 
JOKER FUNC http_test.TestConcurrentReadWriteReqBody_h1 has: 
;; (defn TestConcurrentReadWriteReqBody_h1
;;   {:added "1.0"
;;    :go "testConcurrentReadWriteReqBody_h1(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{9108100 0xc003f6c8c0}) t])
;; 
JOKER FUNC http_test.TestConcurrentReadWriteReqBody_h2 has: 
;; (defn TestConcurrentReadWriteReqBody_h2
;;   {:added "1.0"
;;    :go "testConcurrentReadWriteReqBody_h2(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{9108199 0xc003f6ca20}) t])
;; 
JOKER FUNC http_test.TestConcurrentServerServe has: 
;; (defn TestConcurrentServerServe
;;   "Verify this doesn't race (Issue 16505)"
;;   {:added "1.0"
;;    :go "testConcurrentServerServe(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{9284877 0xc0041fcb80}) t])
;; 
JOKER FUNC http_test.TestConnectRequest_h1 has: 
;; (defn TestConnectRequest_h1
;;   {:added "1.0"
;;    :go "testConnectRequest_h1(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{9109602 0xc003f721a0}) t])
;; 
JOKER FUNC http_test.TestConnectRequest_h2 has: 
;; (defn TestConnectRequest_h2
;;   {:added "1.0"
;;    :go "testConnectRequest_h2(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{9109677 0xc003f72300}) t])
;; 
JOKER FUNC http_test.TestConsumingBodyOnNextConn has: 
;; (defn TestConsumingBodyOnNextConn
;;   {:added "1.0"
;;    :go "testConsumingBodyOnNextConn(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{9142173 0xc00400a080}) t])
;; 
JOKER FUNC http_test.TestContentLengthZero has: 
;; (defn TestContentLengthZero
;;   "TestContentLengthZero tests that for both an HTTP/1.0 and HTTP/1.1
;; request (both keep-alive), when a Handler never writes any
;; response, the net/http package adds a "Content-Length: 0" response
;; header."
;;   {:added "1.0"
;;    :go "testContentLengthZero(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{9224267 0xc00412ae80}) t])
;; 
JOKER FUNC http_test.TestContentTypeOkayOn204 has: 
;; (defn TestContentTypeOkayOn204
;;   {:added "1.0"
;;    :go "testContentTypeOkayOn204(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{9243784 0xc0041608a0}) t])
;; 
JOKER FUNC http_test.TestContentTypeWithCopy_h1 has: 
;; (defn TestContentTypeWithCopy_h1
;;   {:added "1.0"
;;    :go "testContentTypeWithCopy_h1(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{8486629 0xc002f64d20}) t])
;; 
JOKER FUNC http_test.TestContentTypeWithCopy_h2 has: 
;; (defn TestContentTypeWithCopy_h2
;;   {:added "1.0"
;;    :go "testContentTypeWithCopy_h2(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{8486714 0xc002f64e80}) t])
;; 
JOKER FUNC http_test.TestDeleteRedirects has: 
;; (defn TestDeleteRedirects
;;   {:added "1.0"
;;    :go "testDeleteRedirects(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{8670032 0xc003a469e0}) t])
;; 
JOKER FUNC http_test.TestDetectContentType has: 
;; (defn TestDetectContentType
;;   {:added "1.0"
;;    :go "testDetectContentType(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{8484129 0xc002f55fa0}) t])
;; 
JOKER FUNC http_test.TestDirJoin has: 
;; (defn TestDirJoin
;;   {:added "1.0"
;;    :go "testDirJoin(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{8308922 0xc000b27e20}) t])
;; 
JOKER FUNC http_test.TestDirectoryIfNotModified has: 
;; (defn TestDirectoryIfNotModified
;;   {:added "1.0"
;;    :go "testDirectoryIfNotModified(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{8315656 0xc0030cbd40}) t])
;; 
JOKER FUNC http_test.TestDoubleHijack has: 
;; (defn TestDoubleHijack
;;   {:added "1.0"
;;    :go "testDoubleHijack(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{9239343 0xc004151ea0}) t])
;; 
JOKER FUNC http_test.TestEmptyDirOpenCWD has: 
;; (defn TestEmptyDirOpenCWD
;;   {:added "1.0"
;;    :go "testEmptyDirOpenCWD(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{8309819 0xc000b2ce80}) t])
;; 
JOKER FUNC http_test.TestEmptyPasswordAuth has: 
;; (defn TestEmptyPasswordAuth
;;   {:added "1.0"
;;    :go "testEmptyPasswordAuth(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{8688755 0xc003a89a80}) t])
;; 
JOKER FUNC http_test.TestFSRedirect has: 
;; (defn TestFSRedirect
;;   {:added "1.0"
;;    :go "testFSRedirect(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{8304076 0xc0020fe800}) t])
;; 
JOKER FUNC http_test.TestFileServerCleanPath has: 
;; (defn TestFileServerCleanPath
;;   {:added "1.0"
;;    :go "testFileServerCleanPath(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{8331391 0xc002d1e3a0}) t])
;; 
JOKER FUNC http_test.TestFileServerCleans has: 
;; (defn TestFileServerCleans
;;   {:added "1.0"
;;    :go "testFileServerCleans(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{8304663 0xc0020ff480}) t])
;; 
JOKER FUNC http_test.TestFileServerEscapesNames has: 
;; (defn TestFileServerEscapesNames
;;   {:added "1.0"
;;    :go "testFileServerEscapesNames(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{8305320 0xc002104100}) t])
;; 
JOKER FUNC http_test.TestFileServerImplicitLeadingSlash has: 
;; (defn TestFileServerImplicitLeadingSlash
;;   {:added "1.0"
;;    :go "testFileServerImplicitLeadingSlash(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{8308004 0xc000b26c80}) t])
;; 
JOKER FUNC http_test.TestFileServerNotDirError has: 
;; (defn TestFileServerNotDirError
;;   "Issue 18984: tests that requests for paths beyond files return not-found errors"
;;   {:added "1.0"
;;    :go "testFileServerNotDirError(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{8330335 0xc002d190e0}) t])
;; 
JOKER FUNC http_test.TestFileServerSortsNames has: 
;; (defn TestFileServerSortsNames
;;   {:added "1.0"
;;    :go "testFileServerSortsNames(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{8307045 0xc002105ba0}) t])
;; 
JOKER FUNC http_test.TestFileServerZeroByte has: 
;; (defn TestFileServerZeroByte
;;   {:added "1.0"
;;    :go "testFileServerZeroByte(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{8313750 0xc002ba1380}) t])
;; 
JOKER FUNC http_test.TestFormFileCallsParseMultipartForm has: 
;; (defn TestFormFileCallsParseMultipartForm
;;   "Test that FormFile invokes ParseMultipartForm."
;;   {:added "1.0"
;;    :go "testFormFileCallsParseMultipartForm(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{8241373 0xc002c94f60}) t])
;; 
JOKER FUNC http_test.TestFormFileOrder has: 
;; (defn TestFormFileOrder
;;   "Test that FormFile errors if called after
;; MultipartReader on the same request."
;;   {:added "1.0"
;;    :go "testFormFileOrder(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{8242572 0xc002c95e00}) t])
;; 
JOKER FUNC http_test.TestFormValueCallsParseMultipartForm has: 
;; (defn TestFormValueCallsParseMultipartForm
;;   "Test that FormValue invokes ParseMultipartForm."
;;   {:added "1.0"
;;    :go "testFormValueCallsParseMultipartForm(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{8240923 0xc002c94940}) t])
;; 
JOKER FUNC http_test.TestGetBasicAuth has: 
;; (defn TestGetBasicAuth
;;   {:added "1.0"
;;    :go "testGetBasicAuth(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{8248522 0xc003189800}) t])
;; 
JOKER FUNC http_test.TestGetRequestFormat has: 
;; (defn TestGetRequestFormat
;;   {:added "1.0"
;;    :go "testGetRequestFormat(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{8662087 0xc003a306c0}) t])
;; 
JOKER FUNC http_test.TestH12_200NoBody has: 
;; (defn TestH12_200NoBody
;;   {:added "1.0"
;;    :go "testH12_200NoBody(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{9095437 0xc003f41460}) t])
;; 
JOKER FUNC http_test.TestH12_AutoGzip has: 
;; (defn TestH12_AutoGzip
;;   "Verify that both our HTTP/1 and HTTP/2 request and auto-decompress gzip.
;; Some hosts send gzip even if you don't ask for it; see golang.org/issue/13298"
;;   {:added "1.0"
;;    :go "testH12_AutoGzip(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{9098649 0xc003f4ad80}) t])
;; 
JOKER FUNC http_test.TestH12_AutoGzipWithDumpResponse has: 
;; (defn TestH12_AutoGzipWithDumpResponse
;;   "Issue 15366"
;;   {:added "1.0"
;;    :go "testH12_AutoGzipWithDumpResponse(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{9121493 0xc003fa3e40}) t])
;; 
JOKER FUNC http_test.TestH12_AutoGzip_Disabled has: 
;; (defn TestH12_AutoGzip_Disabled
;;   {:added "1.0"
;;    :go "testH12_AutoGzip_Disabled(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{9099101 0xc003f4b4e0}) t])
;; 
JOKER FUNC http_test.TestH12_ExplicitContentLength has: 
;; (defn TestH12_ExplicitContentLength
;;   {:added "1.0"
;;    :go "testH12_ExplicitContentLength(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{9096037 0xc003f460c0}) t])
;; 
JOKER FUNC http_test.TestH12_FlushBeforeBody has: 
;; (defn TestH12_FlushBeforeBody
;;   {:added "1.0"
;;    :go "testH12_FlushBeforeBody(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{9096221 0xc003f464e0}) t])
;; 
JOKER FUNC http_test.TestH12_FlushMidBody has: 
;; (defn TestH12_FlushMidBody
;;   {:added "1.0"
;;    :go "testH12_FlushMidBody(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{9096384 0xc003f46880}) t])
;; 
JOKER FUNC http_test.TestH12_HandlerWritesTooLittle has: 
;; (defn TestH12_HandlerWritesTooLittle
;;   {:added "1.0"
;;    :go "testH12_HandlerWritesTooLittle(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{9097118 0xc003f47820}) t])
;; 
JOKER FUNC http_test.TestH12_HandlerWritesTooMuch has: 
;; (defn TestH12_HandlerWritesTooMuch
;;   "Tests that the HTTP/1 and HTTP/2 servers prevent handlers from
;; writing more than they declared. This test does not test whether
;; the transport deals with too much data, though, since the server
;; doesn't make it possible to send bogus data. For those tests, see
;; transport_test.go (for HTTP/1) or x/net/http2/transport_test.go
;; (for HTTP/2)."
;;   {:added "1.0"
;;    :go "testH12_HandlerWritesTooMuch(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{9098091 0xc003f4a4e0}) t])
;; 
JOKER FUNC http_test.TestH12_HeadContentLengthLargeBody has: 
;; (defn TestH12_HeadContentLengthLargeBody
;;   {:added "1.0"
;;    :go "testH12_HeadContentLengthLargeBody(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{9095188 0xc003f40ea0}) t])
;; 
JOKER FUNC http_test.TestH12_HeadContentLengthNoBody has: 
;; (defn TestH12_HeadContentLengthNoBody
;;   "Issue 13532"
;;   {:added "1.0"
;;    :go "testH12_HeadContentLengthNoBody(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{9094834 0xc003f407a0}) t])
;; 
JOKER FUNC http_test.TestH12_HeadContentLengthSmallBody has: 
;; (defn TestH12_HeadContentLengthSmallBody
;;   {:added "1.0"
;;    :go "testH12_HeadContentLengthSmallBody(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{9094996 0xc003f40ac0}) t])
;; 
JOKER FUNC http_test.TestH12_Head_ExplicitLen has: 
;; (defn TestH12_Head_ExplicitLen
;;   {:added "1.0"
;;    :go "testH12_Head_ExplicitLen(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{9096578 0xc003f46ce0}) t])
;; 
JOKER FUNC http_test.TestH12_Head_ImplicitLen has: 
;; (defn TestH12_Head_ImplicitLen
;;   {:added "1.0"
;;    :go "testH12_Head_ImplicitLen(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{9096853 0xc003f472a0}) t])
;; 
JOKER FUNC http_test.TestH12_RequestContentLength_Known_NonZero has: 
;; (defn TestH12_RequestContentLength_Known_NonZero
;;   {:added "1.0"
;;    :go "testH12_RequestContentLength_Known_NonZero(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{9100715 0xc003f53080}) t])
;; 
JOKER FUNC http_test.TestH12_RequestContentLength_Known_Zero has: 
;; (defn TestH12_RequestContentLength_Known_Zero
;;   {:added "1.0"
;;    :go "testH12_RequestContentLength_Known_Zero(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{9100865 0xc003f53300}) t])
;; 
JOKER FUNC http_test.TestH12_RequestContentLength_Unknown has: 
;; (defn TestH12_RequestContentLength_Unknown
;;   {:added "1.0"
;;    :go "testH12_RequestContentLength_Unknown(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{9100990 0xc003f53520}) t])
;; 
JOKER FUNC http_test.TestH12_ServerEmptyContentLength has: 
;; (defn TestH12_ServerEmptyContentLength
;;   {:added "1.0"
;;    :go "testH12_ServerEmptyContentLength(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{9100474 0xc003f52ca0}) t])
;; 
JOKER FUNC http_test.TestH12_SmallBody has: 
;; (defn TestH12_SmallBody
;;   {:added "1.0"
;;    :go "testH12_SmallBody(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{9095880 0xc003f41dc0}) t])
;; 
JOKER FUNC http_test.TestH2_204NoBody has: 
;; (defn TestH2_204NoBody
;;   {:added "1.0"
;;    :go "testH2_204NoBody(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{9095545 0xc003f416a0}) t])
;; 
JOKER FUNC http_test.TestH2_304NoBody has: 
;; (defn TestH2_304NoBody
;;   {:added "1.0"
;;    :go "testH2_304NoBody(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{9095608 0xc003f41800}) t])
;; 
JOKER FUNC http_test.TestH2_404NoBody has: 
;; (defn TestH2_404NoBody
;;   {:added "1.0"
;;    :go "testH2_404NoBody(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{9095671 0xc003f41960}) t])
;; 
JOKER FUNC http_test.TestHTTP10ConnectionHeader has: 
;; (defn TestHTTP10ConnectionHeader
;;   "https://golang.org/issue/5955
;; Note that this does not test the "request too large"
;; exit path from the http server. This is intentional;
;; not sending Connection: close is just a minor wire
;; optimization and is pointless if dealing with a
;; badly behaved client."
;;   {:added "1.0"
;;    :go "testHTTP10ConnectionHeader(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{9240197 0xc004156a80}) t])
;; 
JOKER FUNC http_test.TestHTTP10KeepAlive204Response has: 
;; (defn TestHTTP10KeepAlive204Response
;;   "Issue 15647: 204 responses can't have bodies, so HTTP/1.0 keep-alive conns should stay open."
;;   {:added "1.0"
;;    :go "testHTTP10KeepAlive204Response(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{9170395 0xc004063a20}) t])
;; 
JOKER FUNC http_test.TestHTTP10KeepAlive304Response has: 
;; (defn TestHTTP10KeepAlive304Response
;;   {:added "1.0"
;;    :go "testHTTP10KeepAlive304Response(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{9170702 0xc004063d60}) t])
;; 
JOKER FUNC http_test.TestHTTP11KeepAlive204Response has: 
;; (defn TestHTTP11KeepAlive204Response
;;   {:added "1.0"
;;    :go "testHTTP11KeepAlive204Response(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{9170555 0xc004063bc0}) t])
;; 
JOKER FUNC http_test.TestHTTP2NoWriteDeadline has: 
;; (defn TestHTTP2NoWriteDeadline
;;   "Test that the HTTP/2 server does not send RST when WriteDeadline not set."
;;   {:added "1.0"
;;    :go "testHTTP2NoWriteDeadline(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{9161906 0xc00404ed00}) t])
;; 
JOKER FUNC http_test.TestHTTP2UpgradeClosesConnection has: 
;; (defn TestHTTP2UpgradeClosesConnection
;;   {:added "1.0"
;;    :go "testHTTP2UpgradeClosesConnection(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{9169905 0xc004063480}) t])
;; 
JOKER FUNC http_test.TestHTTP2WriteDeadlineEnforcedPerStream has: 
;; (defn TestHTTP2WriteDeadlineEnforcedPerStream
;;   "Test that the HTTP/2 server RSTs stream on slow write."
;;   {:added "1.0"
;;    :go "testHTTP2WriteDeadlineEnforcedPerStream(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{9160166 0xc004045020}) t])
;; 
JOKER FUNC http_test.TestHTTP2WriteDeadlineExtendedOnNewRequest has: 
;; (defn TestHTTP2WriteDeadlineExtendedOnNewRequest
;;   "Test that the HTTP/2 server handles Server.WriteTimeout (Issue 18437)"
;;   {:added "1.0"
;;    :go "testHTTP2WriteDeadlineExtendedOnNewRequest(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{9158460 0xc00403f1c0}) t])
;; 
JOKER FUNC http_test.TestHTTPSClientDetectsHTTPServer has: 
;; (defn TestHTTPSClientDetectsHTTPServer
;;   "Check that an HTTPS client can interpret a particular TLS error
;; to determine that the server is speaking HTTP.
;; See golang.org/issue/11111."
;;   {:added "1.0"
;;    :go "testHTTPSClientDetectsHTTPServer(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{8687274 0xc003a85ee0}) t])
;; 
JOKER FUNC http_test.TestHandlerBodyClose has: 
;; (defn TestHandlerBodyClose
;;   {:added "1.0"
;;    :go "testHandlerBodyClose(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{9193102 0xc0040b1880}) t])
;; 
JOKER FUNC http_test.TestHandlerFinishSkipBigContentLengthRead has: 
;; (defn TestHandlerFinishSkipBigContentLengthRead
;;   "If a Handler finishes and there's an unread request body,
;; verify the server try to do implicit read on it before replying."
;;   {:added "1.0"
;;    :go "testHandlerFinishSkipBigContentLengthRead(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{9262098 0xc0041a3220}) t])
;; 
JOKER FUNC http_test.TestHandlerPanicNil_h1 has: 
;; (defn TestHandlerPanicNil_h1
;;   {:added "1.0"
;;    :go "testHandlerPanicNil_h1(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{9211808 0xc0040f4be0}) t])
;; 
JOKER FUNC http_test.TestHandlerPanicNil_h2 has: 
;; (defn TestHandlerPanicNil_h2
;;   {:added "1.0"
;;    :go "testHandlerPanicNil_h2(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{9211899 0xc0040f4da0}) t])
;; 
JOKER FUNC http_test.TestHandlerPanicWithHijack has: 
;; (defn TestHandlerPanicWithHijack
;;   {:added "1.0"
;;    :go "testHandlerPanicWithHijack(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{9212230 0xc0040f52e0}) t])
;; 
JOKER FUNC http_test.TestHandlerPanic_h1 has: 
;; (defn TestHandlerPanic_h1
;;   {:added "1.0"
;;    :go "testHandlerPanic_h1(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{9211988 0xc0040f4f60}) t])
;; 
JOKER FUNC http_test.TestHandlerPanic_h2 has: 
;; (defn TestHandlerPanic_h2
;;   {:added "1.0"
;;    :go "testHandlerPanic_h2(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{9212105 0xc0040f5120}) t])
;; 
JOKER FUNC http_test.TestHandlerSetTransferEncodingChunked has: 
;; (defn TestHandlerSetTransferEncodingChunked
;;   "https://golang.org/issue/15960"
;;   {:added "1.0"
;;    :go "testHandlerSetTransferEncodingChunked(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{9271970 0xc0041c71a0}) t])
;; 
JOKER FUNC http_test.TestHandlerSetTransferEncodingGzip has: 
;; (defn TestHandlerSetTransferEncodingGzip
;;   "https://golang.org/issue/16063"
;;   {:added "1.0"
;;    :go "testHandlerSetTransferEncodingGzip(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{9272479 0xc0041c7940}) t])
;; 
JOKER FUNC http_test.TestHandlerSetsBodyNil_h1 has: 
;; (defn TestHandlerSetsBodyNil_h1
;;   {:added "1.0"
;;    :go "testHandlerSetsBodyNil_h1(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{9262756 0xc0041a3c60}) t])
;; 
JOKER FUNC http_test.TestHandlerSetsBodyNil_h2 has: 
;; (defn TestHandlerSetsBodyNil_h2
;;   {:added "1.0"
;;    :go "testHandlerSetsBodyNil_h2(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{9262839 0xc0041a3dc0}) t])
;; 
JOKER FUNC http_test.TestHandlersCanSetConnectionClose10 has: 
;; (defn TestHandlersCanSetConnectionClose10
;;   {:added "1.0"
;;    :go "testHandlersCanSetConnectionClose10(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{9169674 0xc004063140}) t])
;; 
JOKER FUNC http_test.TestHandlersCanSetConnectionClose11 has: 
;; (defn TestHandlersCanSetConnectionClose11
;;   "TestHandlersCanSetConnectionClose verifies that handlers can force a connection to close,
;; even for HTTP/1.1 requests."
;;   {:added "1.0"
;;    :go "testHandlersCanSetConnectionClose11(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{9169449 0xc004062e00}) t])
;; 
JOKER FUNC http_test.TestHeadResponses_h1 has: 
;; (defn TestHeadResponses_h1
;;   "TestHeadResponses verifies that all MIME type sniffing and Content-Length
;; counting of GET requests also happens on HEAD requests."
;;   {:added "1.0"
;;    :go "testHeadResponses_h1(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{9175717 0xc0040837a0}) t])
;; 
JOKER FUNC http_test.TestHeadResponses_h2 has: 
;; (defn TestHeadResponses_h2
;;   {:added "1.0"
;;    :go "testHeadResponses_h2(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{9175790 0xc004083900}) t])
;; 
JOKER FUNC http_test.TestHeaderToWire has: 
;; (defn TestHeaderToWire
;;   "Tests regarding the ordering of Write, WriteHeader, Header, and
;; Flush calls. In Go 1.0, rw.WriteHeader immediately flushed the
;; (*response).header to the wire. In Go 1.1, the actual wire flush is
;; delayed, so we could maybe tack on a Content-Length and better
;; Content-Type after we see more (or all) of the output. To preserve
;; compatibility with Go 1, we need to be careful to track which
;; headers were live at the time of WriteHeader, so we write the same
;; ones, even if the handler modifies them (~erroneously) after the
;; first Write."
;;   {:added "1.0"
;;    :go "testHeaderToWire(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{9232692 0xc00413ef80}) t])
;; 
JOKER FUNC http_test.TestHijackAfterCloseNotifier has: 
;; (defn TestHijackAfterCloseNotifier
;;   "Tests that we can use CloseNotifier in one request, and later call Hijack
;; on a second request on the same connection.
;; 
;; It also tests that the connReader stitches together its background
;; 1-byte read for CloseNotifier when CloseNotifier doesn't fire with
;; the rest of the second HTTP later.
;; 
;; Issue 9763.
;; HTTP/1-only test. (http2 doesn't have Hijack)"
;;   {:added "1.0"
;;    :go "testHijackAfterCloseNotifier(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{9228247 0xc004130c80}) t])
;; 
JOKER FUNC http_test.TestHijackBeforeRequestBodyRead has: 
;; (defn TestHijackBeforeRequestBodyRead
;;   {:added "1.0"
;;    :go "testHijackBeforeRequestBodyRead(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{9229497 0xc00413a100}) t])
;; 
JOKER FUNC http_test.TestHostHandlers has: 
;; (defn TestHostHandlers
;;   {:added "1.0"
;;    :go "testHostHandlers(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{9144019 0xc00400b980}) t])
;; 
JOKER FUNC http_test.TestIdentityResponse has: 
;; (defn TestIdentityResponse
;;   "TestIdentityResponse verifies that a handler can unset"
;;   {:added "1.0"
;;    :go "testIdentityResponse(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{9164771 0xc004054080}) t])
;; 
JOKER FUNC http_test.TestIdentityResponseHeaders has: 
;; (defn TestIdentityResponseHeaders
;;   {:added "1.0"
;;    :go "testIdentityResponseHeaders(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{9174733 0xc0040826c0}) t])
;; 
JOKER FUNC http_test.TestIdleConnChannelLeak has: 
;; (defn TestIdleConnChannelLeak
;;   {:added "1.0"
;;    :go "testIdleConnChannelLeak(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{8570346 0xc0038d3060}) t])
;; 
JOKER FUNC http_test.TestIdleConnH2Crash has: 
;; (defn TestIdleConnH2Crash
;;   "Issue 16208: Go 1.7 crashed after Transport.IdleConnTimeout if an
;; HTTP/2 connection was established but but its caller no longer
;; wanted it. (Assuming the connection cache was enabled, which it is
;; by default)
;; 
;; This test reproduced the crash by setting the IdleConnTimeout low
;; (to make the test reasonable) and then making a request which is
;; canceled by the DialTLS hook, which then also waits to return the
;; real connection until after the RoundTrip saw the error.  Then we
;; know the successful tls.Dial from DialTLS will need to go into the
;; idle pool. Then we give it a of time to explode."
;;   {:added "1.0"
;;    :go "testIdleConnH2Crash(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{8617050 0xc003990300}) t])
;; 
JOKER FUNC http_test.TestInterruptWithPanic_ErrAbortHandler_h1 has: 
;; (defn TestInterruptWithPanic_ErrAbortHandler_h1
;;   {:added "1.0"
;;    :go "testInterruptWithPanic_ErrAbortHandler_h1(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{9119470 0xc003f99ba0}) t])
;; 
JOKER FUNC http_test.TestInterruptWithPanic_ErrAbortHandler_h2 has: 
;; (defn TestInterruptWithPanic_ErrAbortHandler_h2
;;   {:added "1.0"
;;    :go "testInterruptWithPanic_ErrAbortHandler_h2(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{9119587 0xc003f99d20}) t])
;; 
JOKER FUNC http_test.TestInterruptWithPanic_h1 has: 
;; (defn TestInterruptWithPanic_h1
;;   {:added "1.0"
;;    :go "testInterruptWithPanic_h1(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{9119080 0xc003f995a0}) t])
;; 
JOKER FUNC http_test.TestInterruptWithPanic_h2 has: 
;; (defn TestInterruptWithPanic_h2
;;   {:added "1.0"
;;    :go "testInterruptWithPanic_h2(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{9119175 0xc003f99720}) t])
;; 
JOKER FUNC http_test.TestInterruptWithPanic_nil_h1 has: 
;; (defn TestInterruptWithPanic_nil_h1
;;   {:added "1.0"
;;    :go "testInterruptWithPanic_nil_h1(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{9119274 0xc003f998a0}) t])
;; 
JOKER FUNC http_test.TestInterruptWithPanic_nil_h2 has: 
;; (defn TestInterruptWithPanic_nil_h2
;;   {:added "1.0"
;;    :go "testInterruptWithPanic_nil_h2(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{9119366 0xc003f99a20}) t])
;; 
JOKER FUNC http_test.TestInvalidTrailerClosesConnection has: 
;; (defn TestInvalidTrailerClosesConnection
;;   {:added "1.0"
;;    :go "testInvalidTrailerClosesConnection(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{9196140 0xc0040be820}) t])
;; 
JOKER FUNC http_test.TestIssue10884_MaxBytesEOF has: 
;; (defn TestIssue10884_MaxBytesEOF
;;   {:added "1.0"
;;    :go "testIssue10884_MaxBytesEOF(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{8253862 0xc0032f8ca0}) t])
;; 
JOKER FUNC http_test.TestIssue11549_Expect100 has: 
;; (defn TestIssue11549_Expect100
;;   {:added "1.0"
;;    :go "testIssue11549_Expect100(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{9261001 0xc0041a2560}) t])
;; 
JOKER FUNC http_test.TestIssue13893_Expect100 has: 
;; (defn TestIssue13893_Expect100
;;   {:added "1.0"
;;    :go "testIssue13893_Expect100(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{9260393 0xc00419fd20}) t])
;; 
JOKER FUNC http_test.TestIssue3595 has: 
;; (defn TestIssue3595
;;   "Test that a client receives a server's reply, even if the server doesn't read
;; the entire request body."
;;   {:added "1.0"
;;    :go "testIssue3595(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{8543844 0xc00386e2c0}) t])
;; 
JOKER FUNC http_test.TestIssue3644 has: 
;; (defn TestIssue3644
;;   "Test that the transport doesn't close the TCP connection early,
;; before the response body has been read. This was a regression
;; which sadly lacked a triggering test. The large response body made
;; the old race easier to trigger."
;;   {:added "1.0"
;;    :go "testIssue3644(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{8543196 0xc0038696a0}) t])
;; 
JOKER FUNC http_test.TestIssue4191_InfiniteGetTimeout has: 
;; (defn TestIssue4191_InfiniteGetTimeout
;;   {:added "1.0"
;;    :go "testIssue4191_InfiniteGetTimeout(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{8546620 0xc003875020}) t])
;; 
JOKER FUNC http_test.TestIssue4191_InfiniteGetToPutTimeout has: 
;; (defn TestIssue4191_InfiniteGetToPutTimeout
;;   {:added "1.0"
;;    :go "testIssue4191_InfiniteGetToPutTimeout(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{8547848 0xc003878780}) t])
;; 
JOKER FUNC http_test.TestJarCalls has: 
;; (defn TestJarCalls
;;   {:added "1.0"
;;    :go "testJarCalls(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{8678685 0xc003a68b00}) t])
;; 
JOKER FUNC http_test.TestKeepAliveFinalChunkWithEOF has: 
;; (defn TestKeepAliveFinalChunkWithEOF
;;   "Issue 15703"
;;   {:added "1.0"
;;    :go "testKeepAliveFinalChunkWithEOF(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{9170933 0xc004063f40}) t])
;; 
JOKER FUNC http_test.TestLinuxSendfile has: 
;; (defn TestLinuxSendfile
;;   "verifies that sendfile is being used on Linux"
;;   {:added "1.0"
;;    :go "testLinuxSendfile(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{8327463 0xc0031a5ee0}) t])
;; 
JOKER FUNC http_test.TestLinuxSendfileChild has: 
;; (defn TestLinuxSendfileChild
;;   "TestLinuxSendfileChild isn't a real test. It's used as a helper process
;; for TestLinuxSendfile."
;;   {:added "1.0"
;;    :go "testLinuxSendfileChild()"}
;;   [])
;; 
JOKER FUNC http_test.TestMain has: 
;; (defn TestMain
;;   {:added "1.0"
;;    :go "testMain(m)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{8227705 0xc002750c60}) m])
;; 
JOKER FUNC http_test.TestMaxBytesReaderStickyError has: 
;; (defn TestMaxBytesReaderStickyError
;;   "Issue 14981: MaxBytesReader's return error wasn't sticky. It
;; doesn't technically need to be, but people expected it to be."
;;   {:added "1.0"
;;    :go "testMaxBytesReaderStickyError(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{8254248 0xc0032f91e0}) t])
;; 
JOKER FUNC http_test.TestMissingFileMultipartRequest has: 
;; (defn TestMissingFileMultipartRequest
;;   {:added "1.0"
;;    :go "testMissingFileMultipartRequest(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{8240677 0xc002c946c0}) t])
;; 
JOKER FUNC http_test.TestMissingStatusNoPanic has: 
;; (defn TestMissingStatusNoPanic
;;   "Ensure that a missing status doesn't make the server panic
;; See Issue https://golang.org/issues/21701"
;;   {:added "1.0"
;;    :go "testMissingStatusNoPanic(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{8625313 0xc0039abfc0}) t])
;; 
JOKER FUNC http_test.TestMultipartReader has: 
;; (defn TestMultipartReader
;;   {:added "1.0"
;;    :go "testMultipartReader(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{8235958 0xc002c481e0}) t])
;; 
JOKER FUNC http_test.TestMultipartReaderOrder has: 
;; (defn TestMultipartReaderOrder
;;   "Test that MultipartReader errors if called
;; after ParseMultipartForm on the same request."
;;   {:added "1.0"
;;    :go "testMultipartReaderOrder(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{8242138 0xc002c95880}) t])
;; 
JOKER FUNC http_test.TestMultipartRequest has: 
;; (defn TestMultipartRequest
;;   {:added "1.0"
;;    :go "testMultipartRequest(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{8239754 0xc002c4bc00}) t])
;; 
JOKER FUNC http_test.TestMultipartRequestAuto has: 
;; (defn TestMultipartRequestAuto
;;   {:added "1.0"
;;    :go "testMultipartRequestAuto(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{8240341 0xc002c94320}) t])
;; 
JOKER FUNC http_test.TestMuxRedirectLeadingSlashes has: 
;; (defn TestMuxRedirectLeadingSlashes
;;   "Tests for https://golang.org/issue/900"
;;   {:added "1.0"
;;    :go "testMuxRedirectLeadingSlashes(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{9149809 0xc00401dc20}) t])
;; 
JOKER FUNC http_test.TestNewClientServerTest has: 
;; (defn TestNewClientServerTest
;;   "Testing the newClientServerTest helper itself."
;;   {:added "1.0"
;;    :go "testNewClientServerTest(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{9090280 0xc003f32cc0}) t])
;; 
JOKER FUNC http_test.TestNewRequestContentLength has: 
;; (defn TestNewRequestContentLength
;;   {:added "1.0"
;;    :go "testNewRequestContentLength(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{8246421 0xc002eff080}) t])
;; 
JOKER FUNC http_test.TestNewRequestGetBody has: 
;; (defn TestNewRequestGetBody
;;   "verify that NewRequest sets Request.GetBody and that it works"
;;   {:added "1.0"
;;    :go "testNewRequestGetBody(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{8255739 0xc00339ace0}) t])
;; 
JOKER FUNC http_test.TestNewRequestHost has: 
;; (defn TestNewRequestHost
;;   {:added "1.0"
;;    :go "testNewRequestHost(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{8245418 0xc002ef9ea0}) t])
;; 
JOKER FUNC http_test.TestNextProtoUpgrade has: 
;; (defn TestNextProtoUpgrade
;;   {:added "1.0"
;;    :go "testNextProtoUpgrade(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{8489120 0xc002f6daa0}) t])
;; 
JOKER FUNC http_test.TestNoBodyOnChunked304Response has: 
;; (defn TestNoBodyOnChunked304Response
;;   "Issue 22330: do not allow the response body to be read when the status code
;; forbids a response body."
;;   {:added "1.0"
;;    :go "testNoBodyOnChunked304Response(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{8626876 0xc0039ad860}) t])
;; 
JOKER FUNC http_test.TestNoContentLengthIfTransferEncoding has: 
;; (defn TestNoContentLengthIfTransferEncoding
;;   "Issue 9987: shouldn't add automatic Content-Length (or
;; Content-Type) if a Transfer-Encoding was set by the handler."
;;   {:added "1.0"
;;    :go "testNoContentLengthIfTransferEncoding(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{9258710 0xc00419e020}) t])
;; 
JOKER FUNC http_test.TestNoCrashReturningTransportAltConn has: 
;; (defn TestNoCrashReturningTransportAltConn
;;   "Issue 13839"
;;   {:added "1.0"
;;    :go "testNoCrashReturningTransportAltConn(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{8597755 0xc003933600}) t])
;; 
JOKER FUNC http_test.TestNoSniffExpectRequestBody_h1 has: 
;; (defn TestNoSniffExpectRequestBody_h1
;;   {:added "1.0"
;;    :go "testNoSniffExpectRequestBody_h1(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{9123446 0xc003fac180}) t])
;; 
JOKER FUNC http_test.TestNoSniffExpectRequestBody_h2 has: 
;; (defn TestNoSniffExpectRequestBody_h2
;;   {:added "1.0"
;;    :go "testNoSniffExpectRequestBody_h2(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{9123541 0xc003fac2e0}) t])
;; 
JOKER FUNC http_test.TestOnlyWriteTimeout has: 
;; (defn TestOnlyWriteTimeout
;;   "golang.org/issue/4741 -- setting only a write timeout that triggers
;; shouldn't cause a handler to block forever on reads (next HTTP
;; request) that will never happen."
;;   {:added "1.0"
;;    :go "testOnlyWriteTimeout(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{9163161 0xc004052140}) t])
;; 
JOKER FUNC http_test.TestOptions has: 
;; (defn TestOptions
;;   {:added "1.0"
;;    :go "testOptions(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{9230866 0xc00413b740}) t])
;; 
JOKER FUNC http_test.TestParseBasicAuth has: 
;; (defn TestParseBasicAuth
;;   {:added "1.0"
;;    :go "testParseBasicAuth(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{8250391 0xc00318b480}) t])
;; 
JOKER FUNC http_test.TestParseFormInitializeOnError has: 
;; (defn TestParseFormInitializeOnError
;;   {:added "1.0"
;;    :go "testParseFormInitializeOnError(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{8235537 0xc002b4faa0}) t])
;; 
JOKER FUNC http_test.TestParseFormQuery has: 
;; (defn TestParseFormQuery
;;   {:added "1.0"
;;    :go "testParseFormQuery(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{8232423 0xc002790ec0}) t])
;; 
JOKER FUNC http_test.TestParseFormQueryMethods has: 
;; (defn TestParseFormQueryMethods
;;   "Tests that we only parse the form automatically for certain methods."
;;   {:added "1.0"
;;    :go "testParseFormQueryMethods(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{8234085 0xc002b4e780}) t])
;; 
JOKER FUNC http_test.TestParseFormUnknownContentType has: 
;; (defn TestParseFormUnknownContentType
;;   {:added "1.0"
;;    :go "testParseFormUnknownContentType(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{8235056 0xc002b4f300}) t])
;; 
JOKER FUNC http_test.TestParseHTTPVersion has: 
;; (defn TestParseHTTPVersion
;;   {:added "1.0"
;;    :go "testParseHTTPVersion(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{8247783 0xc003188b60}) t])
;; 
JOKER FUNC http_test.TestParseMultipartForm has: 
;; (defn TestParseMultipartForm
;;   {:added "1.0"
;;    :go "testParseMultipartForm(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{8238208 0xc002c49f20}) t])
;; 
JOKER FUNC http_test.TestParseMultipartFormOrder has: 
;; (defn TestParseMultipartFormOrder
;;   "Test that ParseMultipartForm errors if called
;; after MultipartReader on the same request."
;;   {:added "1.0"
;;    :go "testParseMultipartFormOrder(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{8241725 0xc002c953a0}) t])
;; 
JOKER FUNC http_test.TestParseMultipartFormPopulatesPostForm has: 
;; (defn TestParseMultipartFormPopulatesPostForm
;;   "Issue 9305: ParseMultipartForm should populate PostForm too"
;;   {:added "1.0"
;;    :go "testParseMultipartFormPopulatesPostForm(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{8236809 0xc002c48d60}) t])
;; 
JOKER FUNC http_test.TestPostFormRequestFormat has: 
;; (defn TestPostFormRequestFormat
;;   {:added "1.0"
;;    :go "testPostFormRequestFormat(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{8663316 0xc003a31e80}) t])
;; 
JOKER FUNC http_test.TestPostRedirects has: 
;; (defn TestPostRedirects
;;   {:added "1.0"
;;    :go "testPostRedirects(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{8668863 0xc003a43f00}) t])
;; 
JOKER FUNC http_test.TestPostRequestFormat has: 
;; (defn TestPostRequestFormat
;;   {:added "1.0"
;;    :go "testPostRequestFormat(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{8662581 0xc003a31040}) t])
;; 
JOKER FUNC http_test.TestProxyFromEnvironment has: 
;; (defn TestProxyFromEnvironment
;;   {:added "1.0"
;;    :go "testProxyFromEnvironment(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{8569492 0xc0038cdfe0}) t])
;; 
JOKER FUNC http_test.TestProxyFromEnvironmentLowerCase has: 
;; (defn TestProxyFromEnvironmentLowerCase
;;   {:added "1.0"
;;    :go "testProxyFromEnvironmentLowerCase(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{8569924 0xc0038d2820}) t])
;; 
JOKER FUNC http_test.TestQuery has: 
;; (defn TestQuery
;;   {:added "1.0"
;;    :go "testQuery(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{8232182 0xc002790a00}) t])
;; 
JOKER FUNC http_test.TestReadRequestErrors has: 
;; (defn TestReadRequestErrors
;;   {:added "1.0"
;;    :go "testReadRequestErrors(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{8244349 0xc002ef8ea0}) t])
;; 
JOKER FUNC http_test.TestRedirect has: 
;; (defn TestRedirect
;;   "Test different URL formats and schemes"
;;   {:added "1.0"
;;    :go "testRedirect(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{9207003 0xc0040ea9c0}) t])
;; 
JOKER FUNC http_test.TestRedirectBadPath has: 
;; (defn TestRedirectBadPath
;;   {:added "1.0"
;;    :go "testRedirectBadPath(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{9206581 0xc0040ea320}) t])
;; 
JOKER FUNC http_test.TestRedirectCookiesJar has: 
;; (defn TestRedirectCookiesJar
;;   {:added "1.0"
;;    :go "testRedirectCookiesJar(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{8677805 0xc003a63800}) t])
;; 
JOKER FUNC http_test.TestRedirect_contentTypeAndBody has: 
;; (defn TestRedirect_contentTypeAndBody
;;   "Test that Redirect sets Content-Type header for GET and HEAD requests
;; and writes a short HTML body, unless the request already has a Content-Type header."
;;   {:added "1.0"
;;    :go "testRedirect_contentTypeAndBody(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{9208736 0xc0040ebb60}) t])
;; 
JOKER FUNC http_test.TestRedirect_h1 has: 
;; (defn TestRedirect_h1
;;   {:added "1.0"
;;    :go "testRedirect_h1(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{8238685 0xc002c4a5e0}) t])
;; 
JOKER FUNC http_test.TestRedirect_h2 has: 
;; (defn TestRedirect_h2
;;   {:added "1.0"
;;    :go "testRedirect_h2(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{8238748 0xc002c4a740}) t])
;; 
JOKER FUNC http_test.TestReferer has: 
;; (defn TestReferer
;;   {:added "1.0"
;;    :go "testReferer(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{8697996 0xc003ab70a0}) t])
;; 
JOKER FUNC http_test.TestRequestBadHost has: 
;; (defn TestRequestBadHost
;;   {:added "1.0"
;;    :go "testRequestBadHost(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{8251483 0xc0032f4a40}) t])
;; 
JOKER FUNC http_test.TestRequestBodyCloseDoesntBlock has: 
;; (defn TestRequestBodyCloseDoesntBlock
;;   "Test that a hanging Request.Body.Read from another goroutine can't
;; cause the Handler goroutine's Request.Body.Close to block.
;; See issue 7121."
;;   {:added "1.0"
;;    :go "testRequestBodyCloseDoesntBlock(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{9247963 0xc00416e0e0}) t])
;; 
JOKER FUNC http_test.TestRequestBodyLimit_h1 has: 
;; (defn TestRequestBodyLimit_h1
;;   {:added "1.0"
;;    :go "testRequestBodyLimit_h1(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{9219044 0xc0041101e0}) t])
;; 
JOKER FUNC http_test.TestRequestBodyLimit_h2 has: 
;; (defn TestRequestBodyLimit_h2
;;   {:added "1.0"
;;    :go "testRequestBodyLimit_h2(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{9219123 0xc004110340}) t])
;; 
JOKER FUNC http_test.TestRequestBodyReadErrorClosesConnection has: 
;; (defn TestRequestBodyReadErrorClosesConnection
;;   {:added "1.0"
;;    :go "testRequestBodyReadErrorClosesConnection(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{9195298 0xc0040b9c00}) t])
;; 
JOKER FUNC http_test.TestRequestBodyTimeoutClosesConnection has: 
;; (defn TestRequestBodyTimeoutClosesConnection
;;   {:added "1.0"
;;    :go "testRequestBodyTimeoutClosesConnection(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{9199000 0xc0040c39e0}) t])
;; 
JOKER FUNC http_test.TestRequestInvalidMethod has: 
;; (defn TestRequestInvalidMethod
;;   {:added "1.0"
;;    :go "testRequestInvalidMethod(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{8245700 0xc002efe500}) t])
;; 
JOKER FUNC http_test.TestRequestLimit_h1 has: 
;; (defn TestRequestLimit_h1
;;   {:added "1.0"
;;    :go "testRequestLimit_h1(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{9217142 0xc0041084a0}) t])
;; 
JOKER FUNC http_test.TestRequestLimit_h2 has: 
;; (defn TestRequestLimit_h2
;;   {:added "1.0"
;;    :go "testRequestLimit_h2(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{9217213 0xc004108600}) t])
;; 
JOKER FUNC http_test.TestRequestWriteBufferedWriter has: 
;; (defn TestRequestWriteBufferedWriter
;;   {:added "1.0"
;;    :go "testRequestWriteBufferedWriter(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{8251123 0xc0032f4420}) t])
;; 
JOKER FUNC http_test.TestResponseBodyReadAfterClose_h1 has: 
;; (defn TestResponseBodyReadAfterClose_h1
;;   "Don't allow a Body.Read after Body.Close. Issue 13648."
;;   {:added "1.0"
;;    :go "testResponseBodyReadAfterClose_h1(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{9107431 0xc003f65be0}) t])
;; 
JOKER FUNC http_test.TestResponseBodyReadAfterClose_h2 has: 
;; (defn TestResponseBodyReadAfterClose_h2
;;   {:added "1.0"
;;    :go "testResponseBodyReadAfterClose_h2(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{9107530 0xc003f65d40}) t])
;; 
JOKER FUNC http_test.TestResponseSetsTLSConnectionState has: 
;; (defn TestResponseSetsTLSConnectionState
;;   {:added "1.0"
;;    :go "testResponseSetsTLSConnectionState(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{8686353 0xc003a84f20}) t])
;; 
JOKER FUNC http_test.TestResponseWriterWriteString has: 
;; (defn TestResponseWriterWriteString
;;   "test that ResponseWriter implements io.stringWriter."
;;   {:added "1.0"
;;    :go "testResponseWriterWriteString(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{9249161 0xc00416f3c0}) t])
;; 
JOKER FUNC http_test.TestRetryRequestsOnError has: 
;; (defn TestRetryRequestsOnError
;;   "Issues 4677, 18241, and 17844. If we try to reuse a connection that the
;; server is in the process of closing, we may end up successfully writing out
;; our request (or a portion of our request) only to find a connection error
;; when we try to read from (or finish writing to) the socket.
;; 
;; NOTE: we resend a request only if:
;;   - we reused a keep-alive connection
;;   - we haven't yet received any header data
;;   - either we wrote no bytes to the server, or the request is idempotent
;; This automatically prevents an infinite resend loop because we'll run out of
;; the cached keep-alive connections eventually."
;;   {:added "1.0"
;;    :go "testRetryRequestsOnError(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{8579650 0xc0038eba60}) t])
;; 
JOKER FUNC http_test.TestReuseRequest has: 
;; (defn TestReuseRequest
;;   {:added "1.0"
;;    :go "testReuseRequest(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{8505141 0xc0037f0bc0}) t])
;; 
JOKER FUNC http_test.TestRoundTripGzip has: 
;; (defn TestRoundTripGzip
;;   "Test that the modification made to the Request by the RoundTripper is cleaned up"
;;   {:added "1.0"
;;    :go "testRoundTripGzip(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{8522825 0xc003823fc0}) t])
;; 
JOKER FUNC http_test.TestRoundTripReturnsProxyError has: 
;; (defn TestRoundTripReturnsProxyError
;;   "Test for issue 8755
;; Ensure that if a proxy returns an error, it is exposed by RoundTrip"
;;   {:added "1.0"
;;    :go "testRoundTripReturnsProxyError(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{8586485 0xc00390f7a0}) t])
;; 
JOKER FUNC http_test.TestSOCKS5Proxy has: 
;; (defn TestSOCKS5Proxy
;;   {:added "1.0"
;;    :go "testSOCKS5Proxy(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{8530370 0xc0038420c0}) t])
;; 
JOKER FUNC http_test.TestServeContent has: 
;; (defn TestServeContent
;;   {:added "1.0"
;;    :go "testServeContent(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{8317368 0xc0030cfd20}) t])
;; 
JOKER FUNC http_test.TestServeContentErrorMessages has: 
;; (defn TestServeContentErrorMessages
;;   {:added "1.0"
;;    :go "testServeContentErrorMessages(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{8326796 0xc0031a5200}) t])
;; 
JOKER FUNC http_test.TestServeDirWithoutTrailingSlash has: 
;; (defn TestServeDirWithoutTrailingSlash
;;   "Issue 13996"
;;   {:added "1.0"
;;    :go "testServeDirWithoutTrailingSlash(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{8311686 0xc002b9b1e0}) t])
;; 
JOKER FUNC http_test.TestServeFile has: 
;; (defn TestServeFile
;;   {:added "1.0"
;;    :go "testServeFile(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{8299855 0xc0021299e0}) t])
;; 
JOKER FUNC http_test.TestServeFileContentType has: 
;; (defn TestServeFileContentType
;;   {:added "1.0"
;;    :go "testServeFileContentType(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{8310071 0xc000b2d3e0}) t])
;; 
JOKER FUNC http_test.TestServeFileFromCWD has: 
;; (defn TestServeFileFromCWD
;;   {:added "1.0"
;;    :go "testServeFileFromCWD(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{8311313 0xc002b9aa40}) t])
;; 
JOKER FUNC http_test.TestServeFileMimeType has: 
;; (defn TestServeFileMimeType
;;   {:added "1.0"
;;    :go "testServeFileMimeType(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{8310876 0xc002b9a220}) t])
;; 
JOKER FUNC http_test.TestServeFileWithContentEncoding_h1 has: 
;; (defn TestServeFileWithContentEncoding_h1
;;   "Tests that ServeFile doesn't add a Content-Length if a Content-Encoding is
;; specified."
;;   {:added "1.0"
;;    :go "testServeFileWithContentEncoding_h1(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{8312163 0xc002b9baa0}) t])
;; 
JOKER FUNC http_test.TestServeFileWithContentEncoding_h2 has: 
;; (defn TestServeFileWithContentEncoding_h2
;;   {:added "1.0"
;;    :go "testServeFileWithContentEncoding_h2(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{8312266 0xc002b9bc00}) t])
;; 
JOKER FUNC http_test.TestServeFile_DotDot has: 
;; (defn TestServeFile_DotDot
;;   {:added "1.0"
;;    :go "testServeFile_DotDot(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{8303150 0xc002133880}) t])
;; 
JOKER FUNC http_test.TestServeHTTP10Close has: 
;; (defn TestServeHTTP10Close
;;   "TestServeHTTP10Close verifies that HTTP/1.0 requests won't be kept alive."
;;   {:added "1.0"
;;    :go "testServeHTTP10Close(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{9168841 0xc004062800}) t])
;; 
JOKER FUNC http_test.TestServeIndexHtml has: 
;; (defn TestServeIndexHtml
;;   {:added "1.0"
;;    :go "testServeIndexHtml(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{8313225 0xc002ba0980}) t])
;; 
JOKER FUNC http_test.TestServeMuxHandleFuncWithNilHandler has: 
;; (defn TestServeMuxHandleFuncWithNilHandler
;;   "Issue 24297"
;;   {:added "1.0"
;;    :go "testServeMuxHandleFuncWithNilHandler(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{9148182 0xc004019fc0}) t])
;; 
JOKER FUNC http_test.TestServeMuxHandler has: 
;; (defn TestServeMuxHandler
;;   {:added "1.0"
;;    :go "testServeMuxHandler(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{9147600 0xc004019260}) t])
;; 
JOKER FUNC http_test.TestServeMuxHandlerRedirects has: 
;; (defn TestServeMuxHandlerRedirects
;;   "TestServeMuxHandlerRedirects tests that automatic redirects generated by
;; mux.Handler() shouldn't clear the request's query string."
;;   {:added "1.0"
;;    :go "testServeMuxHandlerRedirects(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{9148834 0xc00401c780}) t])
;; 
JOKER FUNC http_test.TestServeTLS has: 
;; (defn TestServeTLS
;;   {:added "1.0"
;;    :go "testServeTLS(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{9179196 0xc004091720}) t])
;; 
JOKER FUNC http_test.TestServeWithSlashRedirectForHostPatterns has: 
;; (defn TestServeWithSlashRedirectForHostPatterns
;;   {:added "1.0"
;;    :go "testServeWithSlashRedirectForHostPatterns(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{9152391 0xc00402c720}) t])
;; 
JOKER FUNC http_test.TestServeWithSlashRedirectKeepsQueryString has: 
;; (defn TestServeWithSlashRedirectKeepsQueryString
;;   "Test that the special cased "/route" redirect
;; implicitly created by a registered "/route/"
;; properly sets the query string in the redirect URL.
;; See Issue 17841."
;;   {:added "1.0"
;;    :go "testServeWithSlashRedirectKeepsQueryString(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{9150744 0xc0040248c0}) t])
;; 
JOKER FUNC http_test.TestServerAllowsBlockingRemoteAddr has: 
;; (defn TestServerAllowsBlockingRemoteAddr
;;   "Issue 12943"
;;   {:added "1.0"
;;    :go "testServerAllowsBlockingRemoteAddr(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{9172859 0xc0040766c0}) t])
;; 
JOKER FUNC http_test.TestServerBufferedChunking has: 
;; (defn TestServerBufferedChunking
;;   "Tests that chunked server responses that write 1 byte at a time are
;; buffered before chunk headers are added, not after chunk headers."
;;   {:added "1.0"
;;    :go "testServerBufferedChunking(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{9221525 0xc004118460}) t])
;; 
JOKER FUNC http_test.TestServerCancelsReadTimeoutWhenIdle has: 
;; (defn TestServerCancelsReadTimeoutWhenIdle
;;   "Issue 18447: test that the Server's ReadTimeout is stopped while
;; the server's doing its 1-byte background read between requests,
;; waiting for the connection to maybe close."
;;   {:added "1.0"
;;    :go "testServerCancelsReadTimeoutWhenIdle(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{9292273 0xc00421c660}) t])
;; 
JOKER FUNC http_test.TestServerCloseDeadlock has: 
;; (defn TestServerCloseDeadlock
;;   "Issue 17878: tests that we can call Close twice."
;;   {:added "1.0"
;;    :go "testServerCloseDeadlock(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{9290875 0xc004215200}) t])
;; 
JOKER FUNC http_test.TestServerCloseListenerOnce has: 
;; (defn TestServerCloseListenerOnce
;;   "Issue 24803: don't call Listener.Close on Server.Shutdown."
;;   {:added "1.0"
;;    :go "testServerCloseListenerOnce(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{9299093 0xc004231940}) t])
;; 
JOKER FUNC http_test.TestServerConnState has: 
;; (defn TestServerConnState
;;   {:added "1.0"
;;    :go "testServerConnState(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{9249996 0xc004172340}) t])
;; 
JOKER FUNC http_test.TestServerConnStateNew has: 
;; (defn TestServerConnStateNew
;;   {:added "1.0"
;;    :go "testServerConnStateNew(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{9255149 0xc004190ca0}) t])
;; 
JOKER FUNC http_test.TestServerContentType_h1 has: 
;; (defn TestServerContentType_h1
;;   {:added "1.0"
;;    :go "testServerContentType_h1(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{8484361 0xc002f62400}) t])
;; 
JOKER FUNC http_test.TestServerContentType_h2 has: 
;; (defn TestServerContentType_h2
;;   {:added "1.0"
;;    :go "testServerContentType_h2(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{8484442 0xc002f62560}) t])
;; 
JOKER FUNC http_test.TestServerContext_LocalAddrContextKey_h1 has: 
;; (defn TestServerContext_LocalAddrContextKey_h1
;;   {:added "1.0"
;;    :go "testServerContext_LocalAddrContextKey_h1(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{9271022 0xc0041c6080}) t])
;; 
JOKER FUNC http_test.TestServerContext_LocalAddrContextKey_h2 has: 
;; (defn TestServerContext_LocalAddrContextKey_h2
;;   {:added "1.0"
;;    :go "testServerContext_LocalAddrContextKey_h2(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{9271136 0xc0041c61e0}) t])
;; 
JOKER FUNC http_test.TestServerContext_ServerContextKey_h1 has: 
;; (defn TestServerContext_ServerContextKey_h1
;;   {:added "1.0"
;;    :go "testServerContext_ServerContextKey_h1(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{9270348 0xc0041bb420}) t])
;; 
JOKER FUNC http_test.TestServerContext_ServerContextKey_h2 has: 
;; (defn TestServerContext_ServerContextKey_h2
;;   {:added "1.0"
;;    :go "testServerContext_ServerContextKey_h2(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{9270456 0xc0041bb580}) t])
;; 
JOKER FUNC http_test.TestServerDuplicateBackgroundRead has: 
;; (defn TestServerDuplicateBackgroundRead
;;   "Issue 18535: test that the Server doesn't try to do a background
;; read if it's already done one."
;;   {:added "1.0"
;;    :go "testServerDuplicateBackgroundRead(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{9293764 0xc004222120}) t])
;; 
JOKER FUNC http_test.TestServerEmptyBodyRace_h1 has: 
;; (defn TestServerEmptyBodyRace_h1
;;   "golang.org/issue/7856"
;;   {:added "1.0"
;;    :go "testServerEmptyBodyRace_h1(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{9254289 0xc00418da40}) t])
;; 
JOKER FUNC http_test.TestServerEmptyBodyRace_h2 has: 
;; (defn TestServerEmptyBodyRace_h2
;;   {:added "1.0"
;;    :go "testServerEmptyBodyRace_h2(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{9254374 0xc00418dba0}) t])
;; 
JOKER FUNC http_test.TestServerExpect has: 
;; (defn TestServerExpect
;;   "Tests that the server responds to the "Expect" request header
;; correctly.
;; http2 test: TestServer_Response_Automatic100Continue"
;;   {:added "1.0"
;;    :go "testServerExpect(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{9185630 0xc0040a1a20}) t])
;; 
JOKER FUNC http_test.TestServerFileStatError has: 
;; (defn TestServerFileStatError
;;   "Issue 12991"
;;   {:added "1.0"
;;    :go "testServerFileStatError(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{8326099 0xc0031a4620}) t])
;; 
JOKER FUNC http_test.TestServerFlushAndHijack has: 
;; (defn TestServerFlushAndHijack
;;   "This verifies that a handler can Flush and then Hijack.
;; 
;; An similar test crashed once during development, but it was only
;; testing this tangentially and temporarily until another TODO was
;; fixed.
;; 
;; So add an explicit test for this."
;;   {:added "1.0"
;;    :go "testServerFlushAndHijack(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{9256400 0xc004191c20}) t])
;; 
JOKER FUNC http_test.TestServerGracefulClose has: 
;; (defn TestServerGracefulClose
;;   "Tests that the server flushes its response headers out when it's
;; ignoring the response body and waits a bit before forcefully
;; closing the TCP connection, causing the client to get a RST.
;; See https://golang.org/issue/3595"
;;   {:added "1.0"
;;    :go "testServerGracefulClose(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{9222408 0xc004119000}) t])
;; 
JOKER FUNC http_test.TestServerHandlersCanHandleH2PRI has: 
;; (defn TestServerHandlersCanHandleH2PRI
;;   {:added "1.0"
;;    :go "testServerHandlersCanHandleH2PRI(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{9265718 0xc0041aab60}) t])
;; 
JOKER FUNC http_test.TestServerHijackGetsBackgroundByte has: 
;; (defn TestServerHijackGetsBackgroundByte
;;   "Test that the bufio.Reader returned by Hijack includes any buffered
;; byte (from the Server's backgroundRead) in its buffer. We want the
;; Handler code to be able to tell that a byte is available via
;; bufio.Reader.Buffered(), without resorting to Reading it
;; (potentially blocking) to get at it."
;;   {:added "1.0"
;;    :go "testServerHijackGetsBackgroundByte(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{9294946 0xc0042232c0}) t])
;; 
JOKER FUNC http_test.TestServerHijackGetsBackgroundByte_big has: 
;; (defn TestServerHijackGetsBackgroundByte_big
;;   "Like TestServerHijackGetsBackgroundByte above but sending a
;; immediate 1MB of data to the server to fill up the server's 4KB
;; buffer."
;;   {:added "1.0"
;;    :go "testServerHijackGetsBackgroundByte_big(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{9296351 0xc004228a40}) t])
;; 
JOKER FUNC http_test.TestServerIdleTimeout has: 
;; (defn TestServerIdleTimeout
;;   {:added "1.0"
;;    :go "testServerIdleTimeout(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{9285128 0xc0041fd060}) t])
;; 
JOKER FUNC http_test.TestServerIssue5953_h1 has: 
;; (defn TestServerIssue5953_h1
;;   "Issue 5953: shouldn't sniff if the handler set a Content-Type header,
;; even if it's the empty string."
;;   {:added "1.0"
;;    :go "testServerIssue5953_h1(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{8485943 0xc002f63fa0}) t])
;; 
JOKER FUNC http_test.TestServerIssue5953_h2 has: 
;; (defn TestServerIssue5953_h2
;;   {:added "1.0"
;;    :go "testServerIssue5953_h2(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{8486020 0xc002f64100}) t])
;; 
JOKER FUNC http_test.TestServerKeepAliveAfterWriteError has: 
;; (defn TestServerKeepAliveAfterWriteError
;;   "golang.org/issue/8534 -- the Server shouldn't reuse a connection
;; for keep-alive after it's seen any Write error (e.g. a timeout) on
;; that net.Conn.
;; 
;; To test, verify we don't timeout or see fewer unique client
;; addresses (== unique connections) than requests."
;;   {:added "1.0"
;;    :go "testServerKeepAliveAfterWriteError(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{9257359 0xc004196b20}) t])
;; 
JOKER FUNC http_test.TestServerKeepAlivesEnabled has: 
;; (defn TestServerKeepAlivesEnabled
;;   {:added "1.0"
;;    :go "testServerKeepAlivesEnabled(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{9253888 0xc00418d2a0}) t])
;; 
JOKER FUNC http_test.TestServerKeepAlivesEnabled_h1 has: 
;; (defn TestServerKeepAlivesEnabled_h1
;;   "Issue 17717: tests that Server.SetKeepAlivesEnabled is respected by
;; both HTTP/1 and HTTP/2."
;;   {:added "1.0"
;;    :go "testServerKeepAlivesEnabled_h1(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{9291064 0xc004215460}) t])
;; 
JOKER FUNC http_test.TestServerKeepAlivesEnabled_h2 has: 
;; (defn TestServerKeepAlivesEnabled_h2
;;   {:added "1.0"
;;    :go "testServerKeepAlivesEnabled_h2(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{9291157 0xc0042155c0}) t])
;; 
JOKER FUNC http_test.TestServerListenNotComparableListener has: 
;; (defn TestServerListenNotComparableListener
;;   "Issue 24812: don't crash on non-comparable Listener"
;;   {:added "1.0"
;;    :go "testServerListenNotComparableListener(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{9298656 0xc004231300}) t])
;; 
JOKER FUNC http_test.TestServerNoContentType_h1 has: 
;; (defn TestServerNoContentType_h1
;;   {:added "1.0"
;;    :go "testServerNoContentType_h1(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{9215493 0xc004104260}) t])
;; 
JOKER FUNC http_test.TestServerNoContentType_h2 has: 
;; (defn TestServerNoContentType_h2
;;   {:added "1.0"
;;    :go "testServerNoContentType_h2(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{9215589 0xc0041043e0}) t])
;; 
JOKER FUNC http_test.TestServerNoDate_h1 has: 
;; (defn TestServerNoDate_h1
;;   {:added "1.0"
;;    :go "testServerNoDate_h1(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{9215310 0xc0040fff60}) t])
;; 
JOKER FUNC http_test.TestServerNoDate_h2 has: 
;; (defn TestServerNoDate_h2
;;   {:added "1.0"
;;    :go "testServerNoDate_h2(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{9215398 0xc0041040e0}) t])
;; 
JOKER FUNC http_test.TestServerReaderFromOrder_h1 has: 
;; (defn TestServerReaderFromOrder_h1
;;   "See golang.org/issue/5660"
;;   {:added "1.0"
;;    :go "testServerReaderFromOrder_h1(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{9241444 0xc004157f20}) t])
;; 
JOKER FUNC http_test.TestServerReaderFromOrder_h2 has: 
;; (defn TestServerReaderFromOrder_h2
;;   {:added "1.0"
;;    :go "testServerReaderFromOrder_h2(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{9241533 0xc00415e080}) t])
;; 
JOKER FUNC http_test.TestServerRequestContextCancel_ConnClose has: 
;; (defn TestServerRequestContextCancel_ConnClose
;;   "Tests that the Request.Context available to the Handler is canceled
;; if the peer closes their TCP connection. This requires that the server
;; is always blocked in a Read call so it notices the EOF from the client.
;; See issues 15927 and 15224."
;;   {:added "1.0"
;;    :go "testServerRequestContextCancel_ConnClose(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{9269432 0xc0041ba500}) t])
;; 
JOKER FUNC http_test.TestServerRequestContextCancel_ServeHTTPDone_h1 has: 
;; (defn TestServerRequestContextCancel_ServeHTTPDone_h1
;;   {:added "1.0"
;;    :go "testServerRequestContextCancel_ServeHTTPDone_h1(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{9268335 0xc0041b5680}) t])
;; 
JOKER FUNC http_test.TestServerRequestContextCancel_ServeHTTPDone_h2 has: 
;; (defn TestServerRequestContextCancel_ServeHTTPDone_h2
;;   {:added "1.0"
;;    :go "testServerRequestContextCancel_ServeHTTPDone_h2(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{9268463 0xc0041b57e0}) t])
;; 
JOKER FUNC http_test.TestServerSetKeepAlivesEnabledClosesConns has: 
;; (defn TestServerSetKeepAlivesEnabledClosesConns
;;   "Tests that calls to Server.SetKeepAlivesEnabled(false) closes any
;; currently-open connections."
;;   {:added "1.0"
;;    :go "testServerSetKeepAlivesEnabledClosesConns(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{9286716 0xc004207060}) t])
;; 
JOKER FUNC http_test.TestServerShutdownStateNew has: 
;; (defn TestServerShutdownStateNew
;;   {:added "1.0"
;;    :go "testServerShutdownStateNew(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{9289095 0xc004211860}) t])
;; 
JOKER FUNC http_test.TestServerShutdownThenServe has: 
;; (defn TestServerShutdownThenServe
;;   "Issue 20239: don't block in Serve if Shutdown is called first."
;;   {:added "1.0"
;;    :go "testServerShutdownThenServe(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{9299643 0xc0042362a0}) t])
;; 
JOKER FUNC http_test.TestServerShutdown_h1 has: 
;; (defn TestServerShutdown_h1
;;   {:added "1.0"
;;    :go "testServerShutdown_h1(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{9287732 0xc0042101c0}) t])
;; 
JOKER FUNC http_test.TestServerShutdown_h2 has: 
;; (defn TestServerShutdown_h2
;;   {:added "1.0"
;;    :go "testServerShutdown_h2(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{9287807 0xc004210320}) t])
;; 
JOKER FUNC http_test.TestServerTimeouts has: 
;; (defn TestServerTimeouts
;;   {:added "1.0"
;;    :go "testServerTimeouts(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{9155846 0xc0040382e0}) t])
;; 
JOKER FUNC http_test.TestServerUndeclaredTrailers_h1 has: 
;; (defn TestServerUndeclaredTrailers_h1
;;   {:added "1.0"
;;    :go "testServerUndeclaredTrailers_h1(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{9124408 0xc003fad1c0}) t])
;; 
JOKER FUNC http_test.TestServerUndeclaredTrailers_h2 has: 
;; (defn TestServerUndeclaredTrailers_h2
;;   {:added "1.0"
;;    :go "testServerUndeclaredTrailers_h2(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{9124503 0xc003fad320}) t])
;; 
JOKER FUNC http_test.TestServerUnreadRequestBodyLarge has: 
;; (defn TestServerUnreadRequestBodyLarge
;;   "Over a ~256KB (maxPostHandlerReadBytes) threshold, the server
;; should ignore client request bodies that a handler didn't read
;; and close the connection."
;;   {:added "1.0"
;;    :go "testServerUnreadRequestBodyLarge(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{9189721 0xc0040ab140}) t])
;; 
JOKER FUNC http_test.TestServerUnreadRequestBodyLittle has: 
;; (defn TestServerUnreadRequestBodyLittle
;;   "Under a ~256KB (maxPostHandlerReadBytes) threshold, the server
;; should consume client request bodies that a handler didn't read."
;;   {:added "1.0"
;;    :go "testServerUnreadRequestBodyLittle(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{9188562 0xc0040a5f60}) t])
;; 
JOKER FUNC http_test.TestServerValidatesHeaders has: 
;; (defn TestServerValidatesHeaders
;;   "Test that we validate the valid bytes in HTTP/1 headers.
;; Issue 11207."
;;   {:added "1.0"
;;    :go "testServerValidatesHeaders(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{9266885 0xc0041b4020}) t])
;; 
JOKER FUNC http_test.TestServerValidatesHostHeader has: 
;; (defn TestServerValidatesHostHeader
;;   "Test that we validate the Host header.
;; Issue 11206 (invalid bytes in Host) and 13624 (Host present in HTTP/1.1)"
;;   {:added "1.0"
;;    :go "testServerValidatesHostHeader(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{9263621 0xc0041a6c40}) t])
;; 
JOKER FUNC http_test.TestServerValidatesMethod has: 
;; (defn TestServerValidatesMethod
;;   "Issue 18319: test that the Server validates the request method."
;;   {:added "1.0"
;;    :go "testServerValidatesMethod(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{9297614 0xc004230180}) t])
;; 
JOKER FUNC http_test.TestServerWriteHijackZeroBytes has: 
;; (defn TestServerWriteHijackZeroBytes
;;   "Issue 16456: allow writing 0 bytes on hijacked conn to test hijack
;; without any log spam."
;;   {:added "1.0"
;;    :go "testServerWriteHijackZeroBytes(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{9214567 0xc0040fefc0}) t])
;; 
JOKER FUNC http_test.TestSetBasicAuth has: 
;; (defn TestSetBasicAuth
;;   {:added "1.0"
;;    :go "testSetBasicAuth(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{8239476 0xc002c4b6c0}) t])
;; 
JOKER FUNC http_test.TestSetsRemoteAddr_h1 has: 
;; (defn TestSetsRemoteAddr_h1
;;   {:added "1.0"
;;    :go "testSetsRemoteAddr_h1(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{9171629 0xc00406ada0}) t])
;; 
JOKER FUNC http_test.TestSetsRemoteAddr_h2 has: 
;; (defn TestSetsRemoteAddr_h2
;;   {:added "1.0"
;;    :go "testSetsRemoteAddr_h2(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{9171704 0xc00406af20}) t])
;; 
JOKER FUNC http_test.TestShouldCopyHeaderOnRedirect has: 
;; (defn TestShouldCopyHeaderOnRedirect
;;   "Part of Issue 4800"
;;   {:added "1.0"
;;    :go "testShouldCopyHeaderOnRedirect(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{8706472 0xc003ad2080}) t])
;; 
JOKER FUNC http_test.TestShouldRedirectConcurrency has: 
;; (defn TestShouldRedirectConcurrency
;;   {:added "1.0"
;;    :go "testShouldRedirectConcurrency(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{9154498 0xc0040326e0}) t])
;; 
JOKER FUNC http_test.TestSniffWriteSize_h1 has: 
;; (defn TestSniffWriteSize_h1
;;   {:added "1.0"
;;    :go "testSniffWriteSize_h1(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{8487731 0xc002f6c160}) t])
;; 
JOKER FUNC http_test.TestSniffWriteSize_h2 has: 
;; (defn TestSniffWriteSize_h2
;;   {:added "1.0"
;;    :go "testSniffWriteSize_h2(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{8487806 0xc002f6c2c0}) t])
;; 
JOKER FUNC http_test.TestStarRequest has: 
;; (defn TestStarRequest
;;   {:added "1.0"
;;    :go "testStarRequest(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{8251955 0xc0032f5260}) t])
;; 
JOKER FUNC http_test.TestStarRequestFoo_h1 has: 
;; (defn TestStarRequestFoo_h1
;;   {:added "1.0"
;;    :go "testStarRequestFoo_h1(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{9112245 0xc003f796a0}) t])
;; 
JOKER FUNC http_test.TestStarRequestFoo_h2 has: 
;; (defn TestStarRequestFoo_h2
;;   {:added "1.0"
;;    :go "testStarRequestFoo_h2(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{9112328 0xc003f79820}) t])
;; 
JOKER FUNC http_test.TestStarRequestOptions_h1 has: 
;; (defn TestStarRequestOptions_h1
;;   {:added "1.0"
;;    :go "testStarRequestOptions_h1(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{9112415 0xc003f799a0}) t])
;; 
JOKER FUNC http_test.TestStarRequestOptions_h2 has: 
;; (defn TestStarRequestOptions_h2
;;   {:added "1.0"
;;    :go "testStarRequestOptions_h2(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{9112502 0xc003f79b20}) t])
;; 
JOKER FUNC http_test.TestStreamingGet_h1 has: 
;; (defn TestStreamingGet_h1
;;   {:added "1.0"
;;    :go "testStreamingGet_h1(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{8680356 0xc003a70780}) t])
;; 
JOKER FUNC http_test.TestStreamingGet_h2 has: 
;; (defn TestStreamingGet_h2
;;   {:added "1.0"
;;    :go "testStreamingGet_h2(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{8680427 0xc003a708e0}) t])
;; 
JOKER FUNC http_test.TestStressSurpriseServerCloses has: 
;; (defn TestStressSurpriseServerCloses
;;   "Test for https://golang.org/issue/2616 (appropriate issue number)
;; This fails pretty reliably with GOMAXPROCS=100 or something high."
;;   {:added "1.0"
;;    :go "testStressSurpriseServerCloses(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{8518634 0xc00381e4c0}) t])
;; 
JOKER FUNC http_test.TestStripPasswordFromError has: 
;; (defn TestStripPasswordFromError
;;   {:added "1.0"
;;    :go "testStripPasswordFromError(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{8691513 0xc003a9ace0}) t])
;; 
JOKER FUNC http_test.TestStripPortFromHost has: 
;; (defn TestStripPortFromHost
;;   "Issue 23351: document and test behavior of ServeMux with ports"
;;   {:added "1.0"
;;    :go "testStripPortFromHost(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{9300067 0xc004236920}) t])
;; 
JOKER FUNC http_test.TestStripPrefix has: 
;; (defn TestStripPrefix
;;   {:added "1.0"
;;    :go "testStripPrefix(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{9216154 0xc004105000}) t])
;; 
JOKER FUNC http_test.TestStripPrefix_notModifyRequest has: 
;; (defn TestStripPrefix_notModifyRequest
;;   "https://golang.org/issue/18952."
;;   {:added "1.0"
;;    :go "testStripPrefix_notModifyRequest(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{9216846 0xc004105fc0}) t])
;; 
JOKER FUNC http_test.TestTLSHandshakeTimeout has: 
;; (defn TestTLSHandshakeTimeout
;;   {:added "1.0"
;;    :go "testTLSHandshakeTimeout(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{9176891 0xc00408ad60}) t])
;; 
JOKER FUNC http_test.TestTLSHandshakeTrace has: 
;; (defn TestTLSHandshakeTrace
;;   "Test the httptrace.TLSHandshake{Start,Done} hooks with a https http1
;; connections. The http2 test is done in TestTransportEventTrace_h2"
;;   {:added "1.0"
;;    :go "testTLSHandshakeTrace(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{8612152 0xc003975b00}) t])
;; 
JOKER FUNC http_test.TestTLSServer has: 
;; (defn TestTLSServer
;;   {:added "1.0"
;;    :go "testTLSServer(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{9177810 0xc004090000}) t])
;; 
JOKER FUNC http_test.TestTLSServerClosesConnection has: 
;; (defn TestTLSServerClosesConnection
;;   "Trying to repro golang.org/issue/3514"
;;   {:added "1.0"
;;    :go "testTLSServerClosesConnection(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{8573954 0xc0038dc680}) t])
;; 
JOKER FUNC http_test.TestTimeoutHandlerEmptyResponse has: 
;; (defn TestTimeoutHandlerEmptyResponse
;;   "https://golang.org/issue/15948"
;;   {:added "1.0"
;;    :go "testTimeoutHandlerEmptyResponse(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{9205833 0xc0040e15e0}) t])
;; 
JOKER FUNC http_test.TestTimeoutHandlerPanicRecovery has: 
;; (defn TestTimeoutHandlerPanicRecovery
;;   "https://golang.org/issues/22084"
;;   {:added "1.0"
;;    :go "testTimeoutHandlerPanicRecovery(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{9206375 0xc0040e1fa0}) t])
;; 
JOKER FUNC http_test.TestTimeoutHandlerRace has: 
;; (defn TestTimeoutHandlerRace
;;   "See issues 8209 and 8414."
;;   {:added "1.0"
;;    :go "testTimeoutHandlerRace(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{9201852 0xc0040d6a20}) t])
;; 
JOKER FUNC http_test.TestTimeoutHandlerRaceHeader has: 
;; (defn TestTimeoutHandlerRaceHeader
;;   "See issues 8209 and 8414."
;;   {:added "1.0"
;;    :go "testTimeoutHandlerRaceHeader(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{9202716 0xc0040d7de0}) t])
;; 
JOKER FUNC http_test.TestTimeoutHandlerRaceHeaderTimeout has: 
;; (defn TestTimeoutHandlerRaceHeaderTimeout
;;   "Issue 9162"
;;   {:added "1.0"
;;    :go "testTimeoutHandlerRaceHeaderTimeout(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{9203401 0xc0040dcc60}) t])
;; 
JOKER FUNC http_test.TestTimeoutHandlerStartTimerWhenServing has: 
;; (defn TestTimeoutHandlerStartTimerWhenServing
;;   "Issue 14568."
;;   {:added "1.0"
;;    :go "testTimeoutHandlerStartTimerWhenServing(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{9205003 0xc0040e0a00}) t])
;; 
JOKER FUNC http_test.TestTimeoutHandler_h1 has: 
;; (defn TestTimeoutHandler_h1
;;   {:added "1.0"
;;    :go "testTimeoutHandler_h1(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{9200009 0xc0040c6800}) t])
;; 
JOKER FUNC http_test.TestTimeoutHandler_h2 has: 
;; (defn TestTimeoutHandler_h2
;;   {:added "1.0"
;;    :go "testTimeoutHandler_h2(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{9200084 0xc0040c6960}) t])
;; 
JOKER FUNC http_test.TestTolerateCRLFBeforeRequestLine has: 
;; (defn TestTolerateCRLFBeforeRequestLine
;;   "tolerate extra CRLF(s) before Request-Line on subsequent requests on a conn
;; Issue 10876."
;;   {:added "1.0"
;;    :go "testTolerateCRLFBeforeRequestLine(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{9259775 0xc00419f3a0}) t])
;; 
JOKER FUNC http_test.TestTrailersClientToServer_h1 has: 
;; (defn TestTrailersClientToServer_h1
;;   "Tests that clients can send trailers to a server and that the server can read them."
;;   {:added "1.0"
;;    :go "testTrailersClientToServer_h1(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{9103258 0xc003f5bcc0}) t])
;; 
JOKER FUNC http_test.TestTrailersClientToServer_h2 has: 
;; (defn TestTrailersClientToServer_h2
;;   {:added "1.0"
;;    :go "testTrailersClientToServer_h2(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{9103349 0xc003f5be20}) t])
;; 
JOKER FUNC http_test.TestTrailersServerToClient_Flush_h1 has: 
;; (defn TestTrailersServerToClient_Flush_h1
;;   {:added "1.0"
;;    :go "testTrailersServerToClient_Flush_h1(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{9105058 0xc003f61980}) t])
;; 
JOKER FUNC http_test.TestTrailersServerToClient_Flush_h2 has: 
;; (defn TestTrailersServerToClient_Flush_h2
;;   {:added "1.0"
;;    :go "testTrailersServerToClient_Flush_h2(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{9105161 0xc003f61b00}) t])
;; 
JOKER FUNC http_test.TestTrailersServerToClient_h1 has: 
;; (defn TestTrailersServerToClient_h1
;;   "Tests that servers send trailers to a client and that the client can read them."
;;   {:added "1.0"
;;    :go "testTrailersServerToClient_h1(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{9104844 0xc003f61680}) t])
;; 
JOKER FUNC http_test.TestTrailersServerToClient_h2 has: 
;; (defn TestTrailersServerToClient_h2
;;   {:added "1.0"
;;    :go "testTrailersServerToClient_h2(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{9104948 0xc003f61800}) t])
;; 
JOKER FUNC http_test.TestTransportAltProto has: 
;; (defn TestTransportAltProto
;;   {:added "1.0"
;;    :go "testTransportAltProto(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{8558601 0xc0038a07a0}) t])
;; 
JOKER FUNC http_test.TestTransportAndServerSharedBodyRace_h1 has: 
;; (defn TestTransportAndServerSharedBodyRace_h1
;;   "Issue 6995
;; A server Handler can receive a Request, and then turn around and
;; give a copy of that Request.Body out to the Transport (e.g. any
;; proxy).  So then two people own that Request.Body (both the server
;; and the http client), and both think they can close it on failure.
;; Therefore, all incoming server requests Bodies need to be thread-safe."
;;   {:added "1.0"
;;    :go "testTransportAndServerSharedBodyRace_h1(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{9244694 0xc004161260}) t])
;; 
JOKER FUNC http_test.TestTransportAndServerSharedBodyRace_h2 has: 
;; (defn TestTransportAndServerSharedBodyRace_h2
;;   {:added "1.0"
;;    :go "testTransportAndServerSharedBodyRace_h2(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{9244806 0xc0041613c0}) t])
;; 
JOKER FUNC http_test.TestTransportAutomaticHTTP2 has: 
;; (defn TestTransportAutomaticHTTP2
;;   {:added "1.0"
;;    :go "testTransportAutomaticHTTP2(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{8595267 0xc00392d1c0}) t])
;; 
JOKER FUNC http_test.TestTransportAutomaticHTTP2_DefaultTransport has: 
;; (defn TestTransportAutomaticHTTP2_DefaultTransport
;;   "golang.org/issue/14391: also check DefaultTransport"
;;   {:added "1.0"
;;    :go "testTransportAutomaticHTTP2_DefaultTransport(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{8595437 0xc00392d3a0}) t])
;; 
JOKER FUNC http_test.TestTransportAutomaticHTTP2_Dial has: 
;; (defn TestTransportAutomaticHTTP2_Dial
;;   {:added "1.0"
;;    :go "testTransportAutomaticHTTP2_Dial(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{8596053 0xc00392dce0}) t])
;; 
JOKER FUNC http_test.TestTransportAutomaticHTTP2_DialTLS has: 
;; (defn TestTransportAutomaticHTTP2_DialTLS
;;   {:added "1.0"
;;    :go "testTransportAutomaticHTTP2_DialTLS(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{8596196 0xc00392dfa0}) t])
;; 
JOKER FUNC http_test.TestTransportAutomaticHTTP2_ExpectContinueTimeout has: 
;; (defn TestTransportAutomaticHTTP2_ExpectContinueTimeout
;;   {:added "1.0"
;;    :go "testTransportAutomaticHTTP2_ExpectContinueTimeout(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{8595906 0xc00392daa0}) t])
;; 
JOKER FUNC http_test.TestTransportAutomaticHTTP2_TLSConfig has: 
;; (defn TestTransportAutomaticHTTP2_TLSConfig
;;   {:added "1.0"
;;    :go "testTransportAutomaticHTTP2_TLSConfig(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{8595747 0xc00392d860}) t])
;; 
JOKER FUNC http_test.TestTransportAutomaticHTTP2_TLSNextProto has: 
;; (defn TestTransportAutomaticHTTP2_TLSNextProto
;;   {:added "1.0"
;;    :go "testTransportAutomaticHTTP2_TLSNextProto(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{8595565 0xc00392d560}) t])
;; 
JOKER FUNC http_test.TestTransportBodyReadError has: 
;; (defn TestTransportBodyReadError
;;   "Issue 18239: make sure the Transport doesn't retry requests with bodies
;; if Request.GetBody is not defined."
;;   {:added "1.0"
;;    :go "testTransportBodyReadError(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{8711935 0xc003ad9280}) t])
;; 
JOKER FUNC http_test.TestTransportCancelBeforeResponseHeaders has: 
;; (defn TestTransportCancelBeforeResponseHeaders
;;   "Issue 11020. The returned error message should be errRequestCanceled"
;;   {:added "1.0"
;;    :go "testTransportCancelBeforeResponseHeaders(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{8556024 0xc0038939c0}) t])
;; 
JOKER FUNC http_test.TestTransportCancelRequest has: 
;; (defn TestTransportCancelRequest
;;   {:added "1.0"
;;    :go "testTransportCancelRequest(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{8551033 0xc0038885e0}) t])
;; 
JOKER FUNC http_test.TestTransportCancelRequestInDial has: 
;; (defn TestTransportCancelRequestInDial
;;   {:added "1.0"
;;    :go "testTransportCancelRequestInDial(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{8552303 0xc003889c00}) t])
;; 
JOKER FUNC http_test.TestTransportCheckContextDoneEarly has: 
;; (defn TestTransportCheckContextDoneEarly
;;   "Issue 25852: Transport should check whether Context is done early."
;;   {:added "1.0"
;;    :go "testTransportCheckContextDoneEarly(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{8628011 0xc0039ae8e0}) t])
;; 
JOKER FUNC http_test.TestTransportCloseIdleConnsThenReturn has: 
;; (defn TestTransportCloseIdleConnsThenReturn
;;   "tests that putting an idle conn after a call to CloseIdleConns does return it"
;;   {:added "1.0"
;;    :go "testTransportCloseIdleConnsThenReturn(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{8586926 0xc00390fe40}) t])
;; 
JOKER FUNC http_test.TestTransportCloseResponseBody has: 
;; (defn TestTransportCloseResponseBody
;;   "golang.org/issue/3672 -- Client can't close HTTP stream
;; Calling Close on a Response.Body used to just read until EOF.
;; Now it actually closes the TCP connection."
;;   {:added "1.0"
;;    :go "testTransportCloseResponseBody(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{8557115 0xc003898a80}) t])
;; 
JOKER FUNC http_test.TestTransportClosesBodyOnError has: 
;; (defn TestTransportClosesBodyOnError
;;   "Issue 6981"
;;   {:added "1.0"
;;    :go "testTransportClosesBodyOnError(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{8584437 0xc0038ff1e0}) t])
;; 
JOKER FUNC http_test.TestTransportClosesRequestBody has: 
;; (defn TestTransportClosesRequestBody
;;   "Verify the status quo: that the Client.Post function coerces its
;; body into a ReadCloser if it's a Closer, and that the Transport
;; then closes it."
;;   {:added "1.0"
;;    :go "testTransportClosesRequestBody(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{8572196 0xc0038d8580}) t])
;; 
JOKER FUNC http_test.TestTransportConcurrency has: 
;; (defn TestTransportConcurrency
;;   {:added "1.0"
;;    :go "testTransportConcurrency(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{8545076 0xc00386f820}) t])
;; 
JOKER FUNC http_test.TestTransportConnectionCloseOnRequest has: 
;; (defn TestTransportConnectionCloseOnRequest
;;   {:added "1.0"
;;    :go "testTransportConnectionCloseOnRequest(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{8507921 0xc0037f5a20}) t])
;; 
JOKER FUNC http_test.TestTransportConnectionCloseOnRequestDisableKeepAlive has: 
;; (defn TestTransportConnectionCloseOnRequestDisableKeepAlive
;;   "if the Transport's DisableKeepAlives is set, all requests should
;; send Connection: close.
;; HTTP/1-only (Connection: close doesn't exist in h2)"
;;   {:added "1.0"
;;    :go "testTransportConnectionCloseOnRequestDisableKeepAlive(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{8509541 0xc0037ff220}) t])
;; 
JOKER FUNC http_test.TestTransportConnectionCloseOnResponse has: 
;; (defn TestTransportConnectionCloseOnResponse
;;   {:added "1.0"
;;    :go "testTransportConnectionCloseOnResponse(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{8506649 0xc0037f4500}) t])
;; 
JOKER FUNC http_test.TestTransportContentEncodingCaseInsensitive has: 
;; (defn TestTransportContentEncodingCaseInsensitive
;;   "Test for issue 19248: Content-Encoding's value is case insensitive."
;;   {:added "1.0"
;;    :go "testTransportContentEncodingCaseInsensitive(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{8589881 0xc00391ae80}) t])
;; 
JOKER FUNC http_test.TestTransportDialCancelRace has: 
;; (defn TestTransportDialCancelRace
;;   {:added "1.0"
;;    :go "testTransportDialCancelRace(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{8590635 0xc00391bda0}) t])
;; 
JOKER FUNC http_test.TestTransportDialPreservesNetOpProxyError has: 
;; (defn TestTransportDialPreservesNetOpProxyError
;;   "Issue 16997: test transport dial preserves typed errors"
;;   {:added "1.0"
;;    :go "testTransportDialPreservesNetOpProxyError(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{8536974 0xc003857380}) t])
;; 
JOKER FUNC http_test.TestTransportDialTLS has: 
;; (defn TestTransportDialTLS
;;   {:added "1.0"
;;    :go "testTransportDialTLS(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{8585612 0xc00390e620}) t])
;; 
JOKER FUNC http_test.TestTransportDiscardsUnneededConns has: 
;; (defn TestTransportDiscardsUnneededConns
;;   "Issue 13957"
;;   {:added "1.0"
;;    :go "testTransportDiscardsUnneededConns(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{9113979 0xc003f817e0}) t])
;; 
JOKER FUNC http_test.TestTransportEmptyMethod has: 
;; (defn TestTransportEmptyMethod
;;   "Issue 13311"
;;   {:added "1.0"
;;    :go "testTransportEmptyMethod(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{8559370 0xc0038a1620}) t])
;; 
JOKER FUNC http_test.TestTransportEventTrace has: 
;; (defn TestTransportEventTrace
;;   {:added "1.0"
;;    :go "testTransportEventTrace(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{8601792 0xc003941e80}) t])
;; 
JOKER FUNC http_test.TestTransportEventTraceRealDNS has: 
;; (defn TestTransportEventTraceRealDNS
;;   {:added "1.0"
;;    :go "testTransportEventTraceRealDNS(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{8610100 0xc00396f980}) t])
;; 
JOKER FUNC http_test.TestTransportEventTraceTLSVerify has: 
;; (defn TestTransportEventTraceTLSVerify
;;   {:added "1.0"
;;    :go "testTransportEventTraceTLSVerify(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{8608144 0xc0039679a0}) t])
;; 
JOKER FUNC http_test.TestTransportEventTrace_NoHooks has: 
;; (defn TestTransportEventTrace_NoHooks
;;   "test a non-nil httptrace.ClientTrace but with all hooks set to zero."
;;   {:added "1.0"
;;    :go "testTransportEventTrace_NoHooks(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{8602057 0xc0039441c0}) t])
;; 
JOKER FUNC http_test.TestTransportEventTrace_NoHooks_h2 has: 
;; (defn TestTransportEventTrace_NoHooks_h2
;;   {:added "1.0"
;;    :go "testTransportEventTrace_NoHooks_h2(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{8602159 0xc003944340}) t])
;; 
JOKER FUNC http_test.TestTransportEventTrace_h2 has: 
;; (defn TestTransportEventTrace_h2
;;   {:added "1.0"
;;    :go "testTransportEventTrace_h2(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{8601887 0xc003944000}) t])
;; 
JOKER FUNC http_test.TestTransportExpect100Continue has: 
;; (defn TestTransportExpect100Continue
;;   "If a request has Expect:100-continue header, the request blocks sending body until the first response.
;; Premature consumption of the request body should not be occurred."
;;   {:added "1.0"
;;    :go "testTransportExpect100Continue(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{8527541 0xc003837420}) t])
;; 
JOKER FUNC http_test.TestTransportFlushesBodyChunks has: 
;; (defn TestTransportFlushesBodyChunks
;;   "Issue 6574"
;;   {:added "1.0"
;;    :go "testTransportFlushesBodyChunks(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{8591875 0xc003923580}) t])
;; 
JOKER FUNC http_test.TestTransportFlushesRequestHeader has: 
;; (defn TestTransportFlushesRequestHeader
;;   "Issue 22088: flush Transport request headers if we're not sure the body won't block on read."
;;   {:added "1.0"
;;    :go "testTransportFlushesRequestHeader(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{8593474 0xc003926e00}) t])
;; 
JOKER FUNC http_test.TestTransportGCRequest_Body_h1 has: 
;; (defn TestTransportGCRequest_Body_h1
;;   "tests that Transport doesn't retain a pointer to the provided request."
;;   {:added "1.0"
;;    :go "testTransportGCRequest_Body_h1(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{9115857 0xc003f85ba0}) t])
;; 
JOKER FUNC http_test.TestTransportGCRequest_Body_h2 has: 
;; (defn TestTransportGCRequest_Body_h2
;;   {:added "1.0"
;;    :go "testTransportGCRequest_Body_h2(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{9115953 0xc003f85d20}) t])
;; 
JOKER FUNC http_test.TestTransportGCRequest_NoBody_h1 has: 
;; (defn TestTransportGCRequest_NoBody_h1
;;   {:added "1.0"
;;    :go "testTransportGCRequest_NoBody_h1(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{9116051 0xc003f85ea0}) t])
;; 
JOKER FUNC http_test.TestTransportGCRequest_NoBody_h2 has: 
;; (defn TestTransportGCRequest_NoBody_h2
;;   {:added "1.0"
;;    :go "testTransportGCRequest_NoBody_h2(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{9116148 0xc003f8e020}) t])
;; 
JOKER FUNC http_test.TestTransportGzip has: 
;; (defn TestTransportGzip
;;   {:added "1.0"
;;    :go "testTransportGzip(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{8524656 0xc003834200}) t])
;; 
JOKER FUNC http_test.TestTransportGzipRecursive has: 
;; (defn TestTransportGzipRecursive
;;   "TestTransportGzipRecursive sends a gzip quine and checks that the
;; client gets the same value back. This is more cute than anything,
;; but checks that we don't recurse forever, and checks that
;; Content-Encoding is removed."
;;   {:added "1.0"
;;    :go "testTransportGzipRecursive(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{8538124 0xc00385a6a0}) t])
;; 
JOKER FUNC http_test.TestTransportGzipShort has: 
;; (defn TestTransportGzipShort
;;   "golang.org/issue/7750: request fails when server replies with
;; a short gzip body"
;;   {:added "1.0"
;;    :go "testTransportGzipShort(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{8538820 0xc00385b420}) t])
;; 
JOKER FUNC http_test.TestTransportHeadChunkedResponse has: 
;; (defn TestTransportHeadChunkedResponse
;;   "TestTransportHeadChunkedResponse verifies that we ignore chunked transfer-encoding
;; on responses to HEAD requests."
;;   {:added "1.0"
;;    :go "testTransportHeadChunkedResponse(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{8521379 0xc003822ae0}) t])
;; 
JOKER FUNC http_test.TestTransportHeadResponses has: 
;; (defn TestTransportHeadResponses
;;   "TestTransportHeadResponses verifies that we deal with Content-Lengths
;; with no bodies properly"
;;   {:added "1.0"
;;    :go "testTransportHeadResponses(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{8520346 0xc00381f880}) t])
;; 
JOKER FUNC http_test.TestTransportIDNA_h1 has: 
;; (defn TestTransportIDNA_h1
;;   "Issue 13835: international domain names should work"
;;   {:added "1.0"
;;    :go "testTransportIDNA_h1(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{8619483 0xc003995080}) t])
;; 
JOKER FUNC http_test.TestTransportIDNA_h2 has: 
;; (defn TestTransportIDNA_h2
;;   {:added "1.0"
;;    :go "testTransportIDNA_h2(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{8619556 0xc0039951e0}) t])
;; 
JOKER FUNC http_test.TestTransportIdleCacheKeys has: 
;; (defn TestTransportIdleCacheKeys
;;   {:added "1.0"
;;    :go "testTransportIdleCacheKeys(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{8509925 0xc0037ff9c0}) t])
;; 
JOKER FUNC http_test.TestTransportIdleConnCrash has: 
;; (defn TestTransportIdleConnCrash
;;   "This used to crash; https://golang.org/issue/3266"
;;   {:added "1.0"
;;    :go "testTransportIdleConnCrash(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{8542449 0xc003868bc0}) t])
;; 
JOKER FUNC http_test.TestTransportIdleConnTimeout_h1 has: 
;; (defn TestTransportIdleConnTimeout_h1
;;   {:added "1.0"
;;    :go "testTransportIdleConnTimeout_h1(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{8614832 0xc00398a6e0}) t])
;; 
JOKER FUNC http_test.TestTransportIdleConnTimeout_h2 has: 
;; (defn TestTransportIdleConnTimeout_h2
;;   {:added "1.0"
;;    :go "testTransportIdleConnTimeout_h2(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{8614927 0xc00398a840}) t])
;; 
JOKER FUNC http_test.TestTransportIgnore1xxResponses has: 
;; (defn TestTransportIgnore1xxResponses
;;   "Issue 17739: the HTTP client must ignore any unknown 1xx
;; informational responses before the actual response."
;;   {:added "1.0"
;;    :go "testTransportIgnore1xxResponses(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{8563849 0xc0038b8740}) t])
;; 
JOKER FUNC http_test.TestTransportIssue10457 has: 
;; (defn TestTransportIssue10457
;;   "Tests that we don't leak Transport persistConn.readLoop goroutines
;; when a server hangs up immediately after saying it would keep-alive."
;;   {:added "1.0"
;;    :go "testTransportIssue10457(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{8577686 0xc0038ea4c0}) t])
;; 
JOKER FUNC http_test.TestTransportKeepAlives has: 
;; (defn TestTransportKeepAlives
;;   "Two subsequent requests and verify their response is the same.
;; The response from the server is our own IP:port"
;;   {:added "1.0"
;;    :go "testTransportKeepAlives(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{8505743 0xc0037f17c0}) t])
;; 
JOKER FUNC http_test.TestTransportLimits1xxResponses has: 
;; (defn TestTransportLimits1xxResponses
;;   {:added "1.0"
;;    :go "testTransportLimits1xxResponses(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{8564964 0xc0038b99c0}) t])
;; 
JOKER FUNC http_test.TestTransportMaxConnsPerHostIncludeDialInProgress has: 
;; (defn TestTransportMaxConnsPerHostIncludeDialInProgress
;;   {:added "1.0"
;;    :go "testTransportMaxConnsPerHostIncludeDialInProgress(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{8514313 0xc0038121c0}) t])
;; 
JOKER FUNC http_test.TestTransportMaxIdleConns has: 
;; (defn TestTransportMaxIdleConns
;;   {:added "1.0"
;;    :go "testTransportMaxIdleConns(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{8613185 0xc003982d20}) t])
;; 
JOKER FUNC http_test.TestTransportMaxPerHostIdleConns has: 
;; (defn TestTransportMaxPerHostIdleConns
;;   {:added "1.0"
;;    :go "testTransportMaxPerHostIdleConns(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{8512404 0xc00380a1c0}) t])
;; 
JOKER FUNC http_test.TestTransportNoHost has: 
;; (defn TestTransportNoHost
;;   {:added "1.0"
;;    :go "testTransportNoHost(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{8559033 0xc0038a0fe0}) t])
;; 
JOKER FUNC http_test.TestTransportNoReuseAfterEarlyResponse has: 
;; (defn TestTransportNoReuseAfterEarlyResponse
;;   "Verifies that the Transport doesn't reuse a connection in the case
;; where the server replies before the request has been fully
;; written. We still honor that reply (see TestIssue3595), but don't
;; send future requests on the connection because it's then in a
;; questionable state.
;; golang.org/issue/7569"
;;   {:added "1.0"
;;    :go "testTransportNoReuseAfterEarlyResponse(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{8575995 0xc0038e4680}) t])
;; 
JOKER FUNC http_test.TestTransportPersistConnLeak has: 
;; (defn TestTransportPersistConnLeak
;;   "tests that persistent goroutine connections shut down when no longer desired."
;;   {:added "1.0"
;;    :go "testTransportPersistConnLeak(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{8539767 0xc003860420}) t])
;; 
JOKER FUNC http_test.TestTransportPersistConnLeakShortBody has: 
;; (defn TestTransportPersistConnLeakShortBody
;;   "golang.org/issue/4531: Transport leaks goroutines when
;; request.ContentLength is explicitly short"
;;   {:added "1.0"
;;    :go "testTransportPersistConnLeakShortBody(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{8541402 0xc003861c00}) t])
;; 
JOKER FUNC http_test.TestTransportPrefersResponseOverWriteError has: 
;; (defn TestTransportPrefersResponseOverWriteError
;;   "Issue 11745."
;;   {:added "1.0"
;;    :go "testTransportPrefersResponseOverWriteError(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{8594161 0xc003927b20}) t])
;; 
JOKER FUNC http_test.TestTransportProxy has: 
;; (defn TestTransportProxy
;;   {:added "1.0"
;;    :go "testTransportProxy(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{8533372 0xc003847ce0}) t])
;; 
JOKER FUNC http_test.TestTransportProxyConnectHeader has: 
;; (defn TestTransportProxyConnectHeader
;;   "Issue 13290: send User-Agent in proxy CONNECT"
;;   {:added "1.0"
;;    :go "testTransportProxyConnectHeader(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{8621554 0xc00399d620}) t])
;; 
JOKER FUNC http_test.TestTransportRangeAndGzip has: 
;; (defn TestTransportRangeAndGzip
;;   "This tests that an client requesting a content range won't also
;; implicitly ask for gzip support. If they want that, they need to do it
;; on their own.
;; golang.org/issue/8923"
;;   {:added "1.0"
;;    :go "testTransportRangeAndGzip(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{8588187 0xc003916f00}) t])
;; 
JOKER FUNC http_test.TestTransportReadToEndReusesConn has: 
;; (defn TestTransportReadToEndReusesConn
;;   "Tests that the HTTP transport re-uses connections when a client
;; reads to the end of a response Body without closing it."
;;   {:added "1.0"
;;    :go "testTransportReadToEndReusesConn(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{8510933 0xc003802a20}) t])
;; 
JOKER FUNC http_test.TestTransportReading100Continue has: 
;; (defn TestTransportReading100Continue
;;   "Issue 2184"
;;   {:added "1.0"
;;    :go "testTransportReading100Continue(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{8561186 0xc0038a78a0}) t])
;; 
JOKER FUNC http_test.TestTransportRejectsAlphaPort has: 
;; (defn TestTransportRejectsAlphaPort
;;   "Issue 14353: port can only contain digits."
;;   {:added "1.0"
;;    :go "testTransportRejectsAlphaPort(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{8611633 0xc003975360}) t])
;; 
JOKER FUNC http_test.TestTransportRejectsInvalidHeaders_h1 has: 
;; (defn TestTransportRejectsInvalidHeaders_h1
;;   {:added "1.0"
;;    :go "testTransportRejectsInvalidHeaders_h1(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{9117165 0xc003f8f4c0}) t])
;; 
JOKER FUNC http_test.TestTransportRejectsInvalidHeaders_h2 has: 
;; (defn TestTransportRejectsInvalidHeaders_h2
;;   {:added "1.0"
;;    :go "testTransportRejectsInvalidHeaders_h2(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{9117273 0xc003f8f620}) t])
;; 
JOKER FUNC http_test.TestTransportRemovesDeadIdleConnections has: 
;; (defn TestTransportRemovesDeadIdleConnections
;;   {:added "1.0"
;;    :go "testTransportRemovesDeadIdleConnections(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{8515909 0xc003813ba0}) t])
;; 
JOKER FUNC http_test.TestTransportResponseCancelRace has: 
;; (defn TestTransportResponseCancelRace
;;   "Test for issue 10474"
;;   {:added "1.0"
;;    :go "testTransportResponseCancelRace(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{8588908 0xc003917da0}) t])
;; 
JOKER FUNC http_test.TestTransportResponseHeaderLength has: 
;; (defn TestTransportResponseHeaderLength
;;   {:added "1.0"
;;    :go "testTransportResponseHeaderLength(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{8600907 0xc003940c60}) t])
;; 
JOKER FUNC http_test.TestTransportResponseHeaderTimeout has: 
;; (defn TestTransportResponseHeaderTimeout
;;   {:added "1.0"
;;    :go "testTransportResponseHeaderTimeout(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{8549260 0xc00387e460}) t])
;; 
JOKER FUNC http_test.TestTransportReturnsPeekError has: 
;; (defn TestTransportReturnsPeekError
;;   "Issue 16465: Transport.RoundTrip should return the raw net.Conn.Read error from Peek
;; back to the caller."
;;   {:added "1.0"
;;    :go "testTransportReturnsPeekError(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{8618807 0xc003994440}) t])
;; 
JOKER FUNC http_test.TestTransportReuseConnEmptyResponseBody has: 
;; (defn TestTransportReuseConnEmptyResponseBody
;;   "Issue 13633: there was a race where we returned bodyless responses
;; to callers before recycling the persistent connection, which meant
;; a client doing two subsequent requests could end up on different
;; connections. It's somewhat harmless but enough tests assume it's
;; not true in order to test other things that it's worth fixing.
;; Plus it's nice to be consistent and not have timing-dependent
;; behavior."
;;   {:added "1.0"
;;    :go "testTransportReuseConnEmptyResponseBody(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{8597105 0xc003932960}) t])
;; 
JOKER FUNC http_test.TestTransportReuseConnection_Gzip_Chunked has: 
;; (defn TestTransportReuseConnection_Gzip_Chunked
;;   {:added "1.0"
;;    :go "testTransportReuseConnection_Gzip_Chunked(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{8599728 0xc00393b940}) t])
;; 
JOKER FUNC http_test.TestTransportReuseConnection_Gzip_ContentLength has: 
;; (defn TestTransportReuseConnection_Gzip_ContentLength
;;   {:added "1.0"
;;    :go "testTransportReuseConnection_Gzip_ContentLength(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{8599844 0xc00393baa0}) t])
;; 
JOKER FUNC http_test.TestTransportServerClosingUnexpectedly has: 
;; (defn TestTransportServerClosingUnexpectedly
;;   {:added "1.0"
;;    :go "testTransportServerClosingUnexpectedly(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{8517157 0xc00381b040}) t])
;; 
JOKER FUNC http_test.TestTransportSocketLateBinding has: 
;; (defn TestTransportSocketLateBinding
;;   {:added "1.0"
;;    :go "testTransportSocketLateBinding(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{8559806 0xc0038a1cc0}) t])
;; 
JOKER FUNC http_test.TestTransportTLSHandshakeTimeout has: 
;; (defn TestTransportTLSHandshakeTimeout
;;   {:added "1.0"
;;    :go "testTransportTLSHandshakeTimeout(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{8572652 0xc0038d8f40}) t])
;; 
JOKER FUNC http_test.TestTransportTreat101Terminal has: 
;; (defn TestTransportTreat101Terminal
;;   "Issue 26161: the HTTP client must treat 101 responses
;; as the final response."
;;   {:added "1.0"
;;    :go "testTransportTreat101Terminal(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{8565812 0xc0038c8780}) t])
;; 
JOKER FUNC http_test.TestTransportUserAgent_h1 has: 
;; (defn TestTransportUserAgent_h1
;;   {:added "1.0"
;;    :go "testTransportUserAgent_h1(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{9110812 0xc003f73a60}) t])
;; 
JOKER FUNC http_test.TestTransportUserAgent_h2 has: 
;; (defn TestTransportUserAgent_h2
;;   {:added "1.0"
;;    :go "testTransportUserAgent_h2(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{9110895 0xc003f73bc0}) t])
;; 
JOKER FUNC http_test.TestTransportUsesTLSConfigServerName has: 
;; (defn TestTransportUsesTLSConfigServerName
;;   "Test for golang.org/issue/5829; the Transport should respect TLSClientConfig.ServerName
;; when not empty.
;; 
;; tls.Config.ServerName (non-empty, set to "example.com") takes
;; precedence over "some-other-host.tld" which previously incorrectly
;; took precedence. We don't actually connect to (or even resolve)
;; "some-other-host.tld", though, because of the Transport.Dial hook.
;; 
;; The httptest.Server has a cert with "example.com" as its name."
;;   {:added "1.0"
;;    :go "testTransportUsesTLSConfigServerName(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{8685794 0xc003a843c0}) t])
;; 
JOKER FUNC http_test.TestWithContextDeepCopiesURL has: 
;; (defn TestWithContextDeepCopiesURL
;;   {:added "1.0"
;;    :go "testWithContextDeepCopiesURL(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{8255104 0xc00339a320}) t])
;; 
JOKER FUNC http_test.TestWriteAfterHijack has: 
;; (defn TestWriteAfterHijack
;;   {:added "1.0"
;;    :go "testWriteAfterHijack(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{9238583 0xc004151060}) t])
;; 
JOKER FUNC http_test.TestWriteHeader0_h1 has: 
;; (defn TestWriteHeader0_h1
;;   {:added "1.0"
;;    :go "testWriteHeader0_h1(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{9126155 0xc003fb57e0}) t])
;; 
JOKER FUNC http_test.TestWriteHeader0_h2 has: 
;; (defn TestWriteHeader0_h2
;;   {:added "1.0"
;;    :go "testWriteHeader0_h2(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{9126226 0xc003fb5940}) t])
;; 
JOKER FUNC http_test.TestWriteHeaderNoCodeCheck_h1 has: 
;; (defn TestWriteHeaderNoCodeCheck_h1
;;   "Issue 23010: don't be super strict checking WriteHeader's code if
;; it's not even valid to call WriteHeader then anyway."
;;   {:added "1.0"
;;    :go "testWriteHeaderNoCodeCheck_h1(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{9127385 0xc003fb8980}) t])
;; 
JOKER FUNC http_test.TestWriteHeaderNoCodeCheck_h1hijack has: 
;; (defn TestWriteHeaderNoCodeCheck_h1hijack
;;   {:added "1.0"
;;    :go "testWriteHeaderNoCodeCheck_h1hijack(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{9127494 0xc003fb8b00}) t])
;; 
JOKER FUNC http_test.TestWriteHeaderNoCodeCheck_h2 has: 
;; (defn TestWriteHeaderNoCodeCheck_h2
;;   {:added "1.0"
;;    :go "testWriteHeaderNoCodeCheck_h2(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{9127590 0xc003fb8c80}) t])
;; 
JOKER FUNC http_test.TestZeroLengthPostAndResponse_h1 has: 
;; (defn TestZeroLengthPostAndResponse_h1
;;   "TestZeroLengthPostAndResponse exercises an optimization done by the Transport:
;; when there is no body (either because the method doesn't permit a body, or an
;; explicit Content-Length of zero is present), then the transport can re-use the
;; connection immediately. But when it re-uses the connection, it typically closes
;; the previous request's body, which is not optimal for zero-lengthed bodies,
;; as the client would then see http.ErrBodyReadAfterClose and not 0, io.EOF."
;;   {:added "1.0"
;;    :go "testZeroLengthPostAndResponse_h1(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{9210681 0xc0040ef640}) t])
;; 
JOKER FUNC http_test.TestZeroLengthPostAndResponse_h2 has: 
;; (defn TestZeroLengthPostAndResponse_h2
;;   {:added "1.0"
;;    :go "testZeroLengthPostAndResponse_h2(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{9210779 0xc0040ef7a0}) t])
;; 
JOKER FUNC http_test.Test_scanETag has: 
;; (defn Test_scanETag
;;   {:added "1.0"
;;    :go "test_scanETag(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{8332451 0xc002d1f800}) t])
;; 
JOKER FUNC httpguts.HeaderValuesContainsToken has: 
;; (defn ^ABEND042(cannot find typename httpguts.bool) HeaderValuesContainsToken
;;   "HeaderValuesContainsToken reports whether any string in values
;; contains the provided token, ASCII case-insensitively."
;;   {:added "1.0"
;;    :go "headerValuesContainsToken(values, token)"}
;;   [^ABEND881(unrecognized Expr type *ast.ArrayType at: &{15044004 <nil> string}) values, ^String token])
;; 
JOKER FUNC httpguts.IsTokenRune has: 
;; (defn ^ABEND042(cannot find typename httpguts.bool) IsTokenRune
;;   {:added "1.0"
;;    :go "isTokenRune(r)"}
;;   [r])
;; 
JOKER FUNC httpguts.PunycodeHostPort has: 
(defn ^[String Error] PunycodeHostPort
  "PunycodeHostPort returns the IDNA Punycode version
of the provided "host" or "host:port" string."
  {:added "1.0"
   :go "punycodeHostPort(v)"}
  [^String v])

JOKER FUNC httpguts.TestHeaderValuesContainsToken has: 
;; (defn TestHeaderValuesContainsToken
;;   {:added "1.0"
;;    :go "testHeaderValuesContainsToken(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{15039378 0xc004ee9800}) t])
;; 
JOKER FUNC httpguts.TestIsToken has: 
;; (defn TestIsToken
;;   {:added "1.0"
;;    :go "testIsToken(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{15039135 0xc004ee9360}) t])
;; 
JOKER FUNC httpguts.TestPunycodeHostPort has: 
;; (defn TestPunycodeHostPort
;;   {:added "1.0"
;;    :go "testPunycodeHostPort(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{15040512 0xc0052d09c0}) t])
;; 
JOKER FUNC httpguts.ValidHeaderFieldName has: 
;; (defn ^ABEND042(cannot find typename httpguts.bool) ValidHeaderFieldName
;;   "ValidHeaderFieldName reports whether v is a valid HTTP/1.x header name.
;; HTTP/2 imposes the additional restriction that uppercase ASCII
;; letters are not allowed.
;; 
;;  RFC 7230 says:
;;   header-field   = field-name ":" OWS field-value OWS
;;   field-name     = token
;;   token          = 1*tchar
;;   tchar = "!" / "#" / "$" / "%" / "&" / "'" / "*" / "+" / "-" / "." /
;;           "^" / "_" / "`" / "|" / "~" / DIGIT / ALPHA"
;;   {:added "1.0"
;;    :go "validHeaderFieldName(v)"}
;;   [^String v])
;; 
JOKER FUNC httpguts.ValidHeaderFieldValue has: 
;; (defn ^ABEND042(cannot find typename httpguts.bool) ValidHeaderFieldValue
;;   "ValidHeaderFieldValue reports whether v is a valid "field-value" according to
;; http://www.w3.org/Protocols/rfc2616/rfc2616-sec4.html#sec4.2 :
;; 
;;        message-header = field-name ":" [ field-value ]
;;        field-value    = *( field-content | LWS )
;;        field-content  = <the OCTETs making up the field-value
;;                         and consisting of either *TEXT or combinations
;;                         of token, separators, and quoted-string>
;; 
;; http://www.w3.org/Protocols/rfc2616/rfc2616-sec2.html#sec2.2 :
;; 
;;        TEXT           = <any OCTET except CTLs,
;;                          but including LWS>
;;        LWS            = [CRLF] 1*( SP | HT )
;;        CTL            = <any US-ASCII control character
;;                         (octets 0 - 31) and DEL (127)>
;; 
;; RFC 7230 says:
;;  field-value    = *( field-content / obs-fold )
;;  obj-fold       =  N/A to http2, and deprecated
;;  field-content  = field-vchar [ 1*( SP / HTAB ) field-vchar ]
;;  field-vchar    = VCHAR / obs-text
;;  obs-text       = %x80-FF
;;  VCHAR          = "any visible [USASCII] character"
;; 
;; http2 further says: "Similarly, HTTP/2 allows header field values
;; that are not valid. While most of the values that can be encoded
;; will not alter header field parsing, carriage return (CR, ASCII
;; 0xd), line feed (LF, ASCII 0xa), and the zero character (NUL, ASCII
;; 0x0) might be exploited by an attacker if they are translated
;; verbatim. Any request or response that contains a character not
;; permitted in a header field value MUST be treated as malformed
;; (Section 8.1.2.6). Valid characters are defined by the
;; field-content ABNF rule in Section 3.2 of [RFC7230]."
;; 
;; This function does not (yet?) properly handle the rejection of
;; strings that begin or end with SP or HTAB."
;;   {:added "1.0"
;;    :go "validHeaderFieldValue(v)"}
;;   [^String v])
;; 
JOKER FUNC httpguts.ValidHostHeader has: 
;; (defn ^ABEND042(cannot find typename httpguts.bool) ValidHostHeader
;;   "ValidHostHeader reports whether h is a valid host header."
;;   {:added "1.0"
;;    :go "validHostHeader(h)"}
;;   [^String h])
;; 
JOKER FUNC httpguts.ValidTrailerHeader has: 
;; (defn ^ABEND042(cannot find typename httpguts.bool) ValidTrailerHeader
;;   "ValidTrailerHeader reports whether name is a valid header field name to appear
;; in trailers.
;; See RFC 7230, Section 4.1.2"
;;   {:added "1.0"
;;    :go "validTrailerHeader(name)"}
;;   [^String name])
;; 
JOKER FUNC httpproxy.ExportUseProxy has: 
;; (defn ^ABEND042(cannot find typename httpproxy.bool) ExportUseProxy
;;   {:added "1.0"
;;    :go "exportUseProxy(cfg, host)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{15051671 Config}) cfg, ^String host])
;; 
JOKER FUNC httpproxy.FromEnvironment has: 
(defn ^{:httpproxy ^String HTTPProxy, :httpsproxy ^String HTTPSProxy, :noproxy ^String NoProxy, :cgi CGI} FromEnvironment
  "FromEnvironment returns a Config instance populated from the
environment variables HTTP_PROXY, HTTPS_PROXY and NO_PROXY (or the
lowercase versions thereof). HTTPS_PROXY takes precedence over
HTTP_PROXY for https requests.

The environment values may be either a complete URL or a
"host[:port]", in which case the "http" scheme is assumed. An error
is returned if the value is a different form."
  {:added "1.0"
   :go "fromEnvironment()"}
  [])

JOKER FUNC httpproxy_test.BenchmarkProxyForURL has: 
;; (defn BenchmarkProxyForURL
;;   {:added "1.0"
;;    :go "benchmarkProxyForURL(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{15070887 0xc0056fda00}) b])
;; 
JOKER FUNC httpproxy_test.TestAllNoProxy has: 
;; (defn TestAllNoProxy
;;   {:added "1.0"
;;    :go "testAllNoProxy(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{15070630 0xc0056fd540}) t])
;; 
JOKER FUNC httpproxy_test.TestFromEnvironment has: 
;; (defn TestFromEnvironment
;;   {:added "1.0"
;;    :go "testFromEnvironment(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{15066991 0xc0056624c0}) t])
;; 
JOKER FUNC httpproxy_test.TestFromEnvironmentLowerCase has: 
;; (defn TestFromEnvironmentLowerCase
;;   {:added "1.0"
;;    :go "testFromEnvironmentLowerCase(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{15067888 0xc005663340}) t])
;; 
JOKER FUNC httpproxy_test.TestFromEnvironmentWithRequestMethod has: 
;; (defn TestFromEnvironmentWithRequestMethod
;;   {:added "1.0"
;;    :go "testFromEnvironmentWithRequestMethod(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{15067432 0xc005662be0}) t])
;; 
JOKER FUNC httpproxy_test.TestInvalidNoProxy has: 
;; (defn TestInvalidNoProxy
;;   {:added "1.0"
;;    :go "testInvalidNoProxy(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{15070393 0xc0056fd180}) t])
;; 
JOKER FUNC httpproxy_test.TestProxyForURL has: 
;; (defn TestProxyForURL
;;   {:added "1.0"
;;    :go "testProxyForURL(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{15066880 0xc0056622c0}) t])
;; 
JOKER FUNC httpproxy_test.TestUseProxy has: 
;; (defn TestUseProxy
;;   {:added "1.0"
;;    :go "testUseProxy(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{15070109 0xc0056fcba0}) t])
;; 
JOKER FUNC httptest.NewRecorder has: 
;; (defn ^{:code ^Int Code, :headermap ^ABEND881(unrecognized Expr type *ast.SelectorExpr at: &{http Header}) HeaderMap, :body ^ABEND881(unrecognized Expr type *ast.StarExpr at: &{9538753 0xc00454a1e0}) Body, :flushed Flushed, :result ^ABEND881(unrecognized Expr type *ast.StarExpr at: &{9538845 0xc00454a320}) result, :snapheader ^ABEND881(unrecognized Expr type *ast.SelectorExpr at: &{http Header}) snapHeader, :wroteheader wroteHeader} NewRecorder
;;   "NewRecorder returns an initialized ResponseRecorder."
;;   {:added "1.0"
;;    :go "newRecorder()"}
;;   [])
;; 
JOKER FUNC httptest.NewRequest has: 
;; (defn ^ABEND881(unrecognized Expr type *ast.SelectorExpr at: &{http Request}) NewRequest
;;   "NewRequest returns a new incoming server Request, suitable
;; for passing to an http.Handler for testing.
;; 
;; The target is the RFC 7230 "request-target": it may be either a
;; path or an absolute URL. If target is an absolute URL, the host name
;; from the URL is used. Otherwise, "example.com" is used.
;; 
;; The TLS field is set to a non-nil dummy value if target has scheme
;; "https".
;; 
;; The Request.Proto is always HTTP/1.1.
;; 
;; An empty method means "GET".
;; 
;; The provided body may be nil. If the body is of type *bytes.Reader,
;; *strings.Reader, or *bytes.Buffer, the Request.ContentLength is
;; set.
;; 
;; NewRequest panics on error for ease of use in testing, where a
;; panic is acceptable.
;; 
;; To generate a client HTTP request instead of a server request, see
;; the NewRequest function in the net/http package."
;;   {:added "1.0"
;;    :go "newRequest(method, target, body)"}
;;   [^String method, ^String target, ^ABEND881(unrecognized Expr type *ast.SelectorExpr at: &{io Reader}) body])
;; 
JOKER FUNC httptest.NewServer has: 
;; (defn ^{:url ^String URL, :listener ^ABEND881(unrecognized Expr type *ast.SelectorExpr at: &{net Listener}) Listener, :tls ^ABEND881(unrecognized Expr type *ast.StarExpr at: &{9567211 0xc0045b8180}) TLS, :config ^ABEND881(unrecognized Expr type *ast.StarExpr at: &{9567325 0xc0045b82a0}) Config, :certificate ^ABEND881(unrecognized Expr type *ast.StarExpr at: &{9567431 0xc0045b8380}) certificate, :wg ^ABEND881(unrecognized Expr type *ast.SelectorExpr at: &{sync WaitGroup}) wg, :mu ^ABEND881(unrecognized Expr type *ast.SelectorExpr at: &{sync Mutex}) mu, :closed closed, :conns ^ABEND881(unrecognized Expr type *ast.MapType at: &{9567657 0xc0045b8600 0xc0045b8660}) conns, :client ^ABEND881(unrecognized Expr type *ast.StarExpr at: &{9567834 0xc0045b8780}) client} NewServer
;;   "NewServer starts and returns a new Server.
;; The caller should call Close when finished, to shut it down."
;;   {:added "1.0"
;;    :go "newServer(handler)"}
;;   [^ABEND881(unrecognized Expr type *ast.SelectorExpr at: &{http Handler}) handler])
;; 
JOKER FUNC httptest.NewTLSServer has: 
;; (defn ^{:url ^String URL, :listener ^ABEND881(unrecognized Expr type *ast.SelectorExpr at: &{net Listener}) Listener, :tls ^ABEND881(unrecognized Expr type *ast.StarExpr at: &{9567211 0xc0045b8180}) TLS, :config ^ABEND881(unrecognized Expr type *ast.StarExpr at: &{9567325 0xc0045b82a0}) Config, :certificate ^ABEND881(unrecognized Expr type *ast.StarExpr at: &{9567431 0xc0045b8380}) certificate, :wg ^ABEND881(unrecognized Expr type *ast.SelectorExpr at: &{sync WaitGroup}) wg, :mu ^ABEND881(unrecognized Expr type *ast.SelectorExpr at: &{sync Mutex}) mu, :closed closed, :conns ^ABEND881(unrecognized Expr type *ast.MapType at: &{9567657 0xc0045b8600 0xc0045b8660}) conns, :client ^ABEND881(unrecognized Expr type *ast.StarExpr at: &{9567834 0xc0045b8780}) client} NewTLSServer
;;   "NewTLSServer starts and returns a new Server using TLS.
;; The caller should call Close when finished, to shut it down."
;;   {:added "1.0"
;;    :go "newTLSServer(handler)"}
;;   [^ABEND881(unrecognized Expr type *ast.SelectorExpr at: &{http Handler}) handler])
;; 
JOKER FUNC httptest.NewUnstartedServer has: 
;; (defn ^{:url ^String URL, :listener ^ABEND881(unrecognized Expr type *ast.SelectorExpr at: &{net Listener}) Listener, :tls ^ABEND881(unrecognized Expr type *ast.StarExpr at: &{9567211 0xc0045b8180}) TLS, :config ^ABEND881(unrecognized Expr type *ast.StarExpr at: &{9567325 0xc0045b82a0}) Config, :certificate ^ABEND881(unrecognized Expr type *ast.StarExpr at: &{9567431 0xc0045b8380}) certificate, :wg ^ABEND881(unrecognized Expr type *ast.SelectorExpr at: &{sync WaitGroup}) wg, :mu ^ABEND881(unrecognized Expr type *ast.SelectorExpr at: &{sync Mutex}) mu, :closed closed, :conns ^ABEND881(unrecognized Expr type *ast.MapType at: &{9567657 0xc0045b8600 0xc0045b8660}) conns, :client ^ABEND881(unrecognized Expr type *ast.StarExpr at: &{9567834 0xc0045b8780}) client} NewUnstartedServer
;;   "NewUnstartedServer returns a new Server but doesn't start it.
;; 
;; After changing its configuration, the caller should call Start or
;; StartTLS.
;; 
;; The caller should call Close when finished, to shut it down."
;;   {:added "1.0"
;;    :go "newUnstartedServer(handler)"}
;;   [^ABEND881(unrecognized Expr type *ast.SelectorExpr at: &{http Handler}) handler])
;; 
JOKER FUNC httptest.TestNewRequest has: 
;; (defn TestNewRequest
;;   {:added "1.0"
;;    :go "testNewRequest(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{9553869 0xc004580fa0}) t])
;; 
JOKER FUNC httptest.TestRecorder has: 
;; (defn TestRecorder
;;   {:added "1.0"
;;    :go "testRecorder(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{9557981 0xc00458cde0}) t])
;; 
JOKER FUNC httptest.TestServer has: 
;; (defn TestServer
;;   {:added "1.0"
;;    :go "testServer(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{9546233 0xc0045616e0}) t])
;; 
JOKER FUNC httptest.TestServerZeroValueClose has: 
;; (defn TestServerZeroValueClose
;;   "Issue 19729: panic in Server.Close for values created directly
;; without a constructor (so the unexported client field is nil)."
;;   {:added "1.0"
;;    :go "testServerZeroValueClose(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{9551008 0xc004575040}) t])
;; 
JOKER FUNC httptest_test.ExampleNewTLSServer has: 
;; (defn ExampleNewTLSServer
;;   {:added "1.0"
;;    :go "exampleNewTLSServer()"}
;;   [])
;; 
JOKER FUNC httptest_test.ExampleResponseRecorder has: 
;; (defn ExampleResponseRecorder
;;   {:added "1.0"
;;    :go "exampleResponseRecorder()"}
;;   [])
;; 
JOKER FUNC httptest_test.ExampleServer has: 
;; (defn ExampleServer
;;   {:added "1.0"
;;    :go "exampleServer()"}
;;   [])
;; 
JOKER FUNC httptrace.ContextClientTrace has: 
;; (defn ^{:getconn ^ABEND881(unrecognized Expr type *ast.FuncType at: &{9579670 0xc0045d1590 <nil>}) GetConn, :gotconn ^ABEND881(unrecognized Expr type *ast.FuncType at: &{9579881 0xc0045d15f0 <nil>}) GotConn, :putidleconn ^ABEND881(unrecognized Expr type *ast.FuncType at: &{9580344 0xc0045d1650 <nil>}) PutIdleConn, :gotfirstresponsebyte ^ABEND881(unrecognized Expr type *ast.FuncType at: &{9580480 0xc0045d16b0 <nil>}) GotFirstResponseByte, :got100continue ^ABEND881(unrecognized Expr type *ast.FuncType at: &{9580591 0xc0045d1710 <nil>}) Got100Continue, :got1xxresponse ^ABEND881(unrecognized Expr type *ast.FuncType at: &{9580915 0xc0045d1770 0xc0045d17a0}) Got1xxResponse, :dnsstart ^ABEND881(unrecognized Expr type *ast.FuncType at: &{9581025 0xc0045d1800 <nil>}) DNSStart, :dnsdone ^ABEND881(unrecognized Expr type *ast.FuncType at: &{9581100 0xc0045d1860 <nil>}) DNSDone, :connectstart ^ABEND881(unrecognized Expr type *ast.FuncType at: &{9581308 0xc0045d18c0 <nil>}) ConnectStart, :connectdone ^ABEND881(unrecognized Expr type *ast.FuncType at: &{9581605 0xc0045d1920 <nil>}) ConnectDone, :tlshandshakestart ^ABEND881(unrecognized Expr type *ast.FuncType at: &{9581863 0xc0045d1980 <nil>}) TLSHandshakeStart, :tlshandshakedone ^ABEND881(unrecognized Expr type *ast.FuncType at: &{9582050 0xc0045d19e0 <nil>}) TLSHandshakeDone, :wroteheaderfield ^ABEND881(unrecognized Expr type *ast.FuncType at: &{9582284 0xc0045d1a70 <nil>}) WroteHeaderField, :wroteheaders ^ABEND881(unrecognized Expr type *ast.FuncType at: &{9582416 0xc0045d1ad0 <nil>}) WroteHeaders, :wait100continue ^ABEND881(unrecognized Expr type *ast.FuncType at: &{9582666 0xc0045d1b30 <nil>}) Wait100Continue, :wroterequest ^ABEND881(unrecognized Expr type *ast.FuncType at: &{9582841 0xc0045d1b90 <nil>}) WroteRequest} ContextClientTrace
;;   "ContextClientTrace returns the ClientTrace associated with the
;; provided context. If none, it returns nil."
;;   {:added "1.0"
;;    :go "contextClientTrace(ctx)"}
;;   [^ABEND881(unrecognized Expr type *ast.SelectorExpr at: &{context Context}) ctx])
;; 
JOKER FUNC httptrace.TestCompose has: 
;; (defn TestCompose
;;   {:added "1.0"
;;    :go "testCompose(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{9586196 0xc0045efde0}) t])
;; 
JOKER FUNC httptrace.TestWithClientTrace has: 
;; (defn TestWithClientTrace
;;   {:added "1.0"
;;    :go "testWithClientTrace(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{9585600 0xc0045ef2c0}) t])
;; 
JOKER FUNC httptrace.WithClientTrace has: 
;; (defn ^ABEND881(unrecognized Expr type *ast.SelectorExpr at: &{context Context}) WithClientTrace
;;   "WithClientTrace returns a new context based on the provided parent
;; ctx. HTTP client requests made with the returned context will use
;; the provided trace hooks, in addition to any previous hooks
;; registered with ctx. Any hooks defined in the provided trace will
;; be called first."
;;   {:added "1.0"
;;    :go "withClientTrace(ctx, trace)"}
;;   [^ABEND881(unrecognized Expr type *ast.SelectorExpr at: &{context Context}) ctx, ^ABEND881(unrecognized Expr type *ast.StarExpr at: &{9578083 ClientTrace}) trace])
;; 
JOKER FUNC httptrace_test.Example has: 
;; (defn Example
;;   {:added "1.0"
;;    :go "example()"}
;;   [])
;; 
JOKER FUNC httputil.BenchmarkServeHTTP has: 
;; (defn BenchmarkServeHTTP
;;   {:added "1.0"
;;    :go "benchmarkServeHTTP(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{9644896 0xc0046c2bc0}) b])
;; 
JOKER FUNC httputil.DumpRequest has: 
;; (defn ^[[ABEND042(cannot find typename httputil.byte)] Error] DumpRequest
;;   "DumpRequest returns the given request in its HTTP/1.x wire
;; representation. It should only be used by servers to debug client
;; requests. The returned representation is an approximation only;
;; some details of the initial request are lost while parsing it into
;; an http.Request. In particular, the order and case of header field
;; names are lost. The order of values in multi-valued headers is kept
;; intact. HTTP/2 requests are dumped in HTTP/1.x form, not in their
;; original binary representations.
;; 
;; If body is true, DumpRequest also returns the body. To do so, it
;; consumes req.Body and then replaces it with a new io.ReadCloser
;; that yields the same bytes. If DumpRequest returns an error,
;; the state of req is undefined.
;; 
;; The documentation for http.Request.Write details which fields
;; of req are included in the dump."
;;   {:added "1.0"
;;    :go "dumpRequest(req, body)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{9597786 0xc004627040}) req, body])
;; 
JOKER FUNC httputil.DumpRequestOut has: 
;; (defn ^[[ABEND042(cannot find typename httputil.byte)] Error] DumpRequestOut
;;   "DumpRequestOut is like DumpRequest but for outgoing client requests. It
;; includes any headers that the standard http.Transport adds, such as
;; User-Agent."
;;   {:added "1.0"
;;    :go "dumpRequestOut(req, body)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{9593999 0xc00461e320}) req, body])
;; 
JOKER FUNC httputil.DumpResponse has: 
;; (defn ^[[ABEND042(cannot find typename httputil.byte)] Error] DumpResponse
;;   "DumpResponse is like DumpRequest but dumps a response."
;;   {:added "1.0"
;;    :go "dumpResponse(resp, body)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{9600316 0xc00462b600}) resp, body])
;; 
JOKER FUNC httputil.NewChunkedReader has: 
;; (defn ^ABEND881(unrecognized Expr type *ast.SelectorExpr at: &{io Reader}) NewChunkedReader
;;   "NewChunkedReader returns a new chunkedReader that translates the data read from r
;; out of HTTP "chunked" format before returning it.
;; The chunkedReader returns io.EOF when the final 0-length chunk is read.
;; 
;; NewChunkedReader is not needed by normal applications. The http package
;; automatically decodes chunking when reading response bodies."
;;   {:added "1.0"
;;    :go "newChunkedReader(r)"}
;;   [^ABEND881(unrecognized Expr type *ast.SelectorExpr at: &{io Reader}) r])
;; 
JOKER FUNC httputil.NewChunkedWriter has: 
;; (defn ^ABEND881(unrecognized Expr type *ast.SelectorExpr at: &{io WriteCloser}) NewChunkedWriter
;;   "NewChunkedWriter returns a new chunkedWriter that translates writes into HTTP
;; "chunked" format before writing them to w. Closing the returned chunkedWriter
;; sends the final 0-length chunk that marks the end of the stream but does
;; not send the final CRLF that appears after trailers; trailers and the last
;; CRLF must be written separately.
;; 
;; NewChunkedWriter is not needed by normal applications. The http
;; package adds chunking automatically if handlers don't set a
;; Content-Length header. Using NewChunkedWriter inside a handler
;; would result in double chunking or chunking with a Content-Length
;; length, both of which are wrong."
;;   {:added "1.0"
;;    :go "newChunkedWriter(w)"}
;;   [^ABEND881(unrecognized Expr type *ast.SelectorExpr at: &{io Writer}) w])
;; 
JOKER FUNC httputil.NewClientConn has: 
;; (defn ^{:mu ^ABEND881(unrecognized Expr type *ast.SelectorExpr at: &{sync Mutex}) mu, :c ^ABEND881(unrecognized Expr type *ast.SelectorExpr at: &{net Conn}) c, :r ^ABEND881(unrecognized Expr type *ast.StarExpr at: &{9655506 0xc0046e5700}) r, :re re, :we we, :lastbody ^ABEND881(unrecognized Expr type *ast.SelectorExpr at: &{io ReadCloser}) lastbody, :nread ^Int nread, :nwritten ^Int nwritten, :pipereq ^ABEND881(unrecognized Expr type *ast.MapType at: &{9655633 0xc0046e59a0 uint}) pipereq, :pipe ^ABEND881(unrecognized Expr type *ast.SelectorExpr at: &{textproto Pipeline}) pipe, :writereq ^ABEND881(unrecognized Expr type *ast.FuncType at: &{9655696 0xc0046d5ad0 0xc0046d5b00}) writeReq} NewClientConn
;;   "NewClientConn is an artifact of Go's early HTTP implementation.
;; It is low-level, old, and unused by Go's current HTTP stack.
;; We should have deleted it before Go 1.
;; 
;; Deprecated: Use the Client or Transport in package net/http instead."
;;   {:added "1.0"
;;    :go "newClientConn(c, r)"}
;;   [^ABEND881(unrecognized Expr type *ast.SelectorExpr at: &{net Conn}) c, ^ABEND881(unrecognized Expr type *ast.StarExpr at: &{9656017 0xc0046e5dc0}) r])
;; 
JOKER FUNC httputil.NewProxyClientConn has: 
;; (defn ^{:mu ^ABEND881(unrecognized Expr type *ast.SelectorExpr at: &{sync Mutex}) mu, :c ^ABEND881(unrecognized Expr type *ast.SelectorExpr at: &{net Conn}) c, :r ^ABEND881(unrecognized Expr type *ast.StarExpr at: &{9655506 0xc0046e5700}) r, :re re, :we we, :lastbody ^ABEND881(unrecognized Expr type *ast.SelectorExpr at: &{io ReadCloser}) lastbody, :nread ^Int nread, :nwritten ^Int nwritten, :pipereq ^ABEND881(unrecognized Expr type *ast.MapType at: &{9655633 0xc0046e59a0 uint}) pipereq, :pipe ^ABEND881(unrecognized Expr type *ast.SelectorExpr at: &{textproto Pipeline}) pipe, :writereq ^ABEND881(unrecognized Expr type *ast.FuncType at: &{9655696 0xc0046d5ad0 0xc0046d5b00}) writeReq} NewProxyClientConn
;;   "NewProxyClientConn is an artifact of Go's early HTTP implementation.
;; It is low-level, old, and unused by Go's current HTTP stack.
;; We should have deleted it before Go 1.
;; 
;; Deprecated: Use the Client or Transport in package net/http instead."
;;   {:added "1.0"
;;    :go "newProxyClientConn(c, r)"}
;;   [^ABEND881(unrecognized Expr type *ast.SelectorExpr at: &{net Conn}) c, ^ABEND881(unrecognized Expr type *ast.StarExpr at: &{9656514 0xc0046ea420}) r])
;; 
JOKER FUNC httputil.NewServerConn has: 
;; (defn ^{:mu ^ABEND881(unrecognized Expr type *ast.SelectorExpr at: &{sync Mutex}) mu, :c ^ABEND881(unrecognized Expr type *ast.SelectorExpr at: &{net Conn}) c, :r ^ABEND881(unrecognized Expr type *ast.StarExpr at: &{9650543 0xc0046da880}) r, :re re, :we we, :lastbody ^ABEND881(unrecognized Expr type *ast.SelectorExpr at: &{io ReadCloser}) lastbody, :nread ^Int nread, :nwritten ^Int nwritten, :pipereq ^ABEND881(unrecognized Expr type *ast.MapType at: &{9650670 0xc0046dab20 uint}) pipereq, :pipe ^ABEND881(unrecognized Expr type *ast.SelectorExpr at: &{textproto Pipeline}) pipe} NewServerConn
;;   "NewServerConn is an artifact of Go's early HTTP implementation.
;; It is low-level, old, and unused by Go's current HTTP stack.
;; We should have deleted it before Go 1.
;; 
;; Deprecated: Use the Server in package net/http instead."
;;   {:added "1.0"
;;    :go "newServerConn(c, r)"}
;;   [^ABEND881(unrecognized Expr type *ast.SelectorExpr at: &{net Conn}) c, ^ABEND881(unrecognized Expr type *ast.StarExpr at: &{9650990 0xc0046dade0}) r])
;; 
JOKER FUNC httputil.NewSingleHostReverseProxy has: 
;; (defn ^{:director ^ABEND881(unrecognized Expr type *ast.FuncType at: &{9610631 0xc004641a70 <nil>}) Director, :transport ^ABEND881(unrecognized Expr type *ast.SelectorExpr at: &{http RoundTripper}) Transport, :flushinterval ^ABEND881(unrecognized Expr type *ast.SelectorExpr at: &{time Duration}) FlushInterval, :errorlog ^ABEND881(unrecognized Expr type *ast.StarExpr at: &{9611156 0xc0046476a0}) ErrorLog, :bufferpool BufferPool, :modifyresponse ^ABEND881(unrecognized Expr type *ast.FuncType at: &{9611792 0xc004641ad0 0xc004641b00}) ModifyResponse, :errorhandler ^ABEND881(unrecognized Expr type *ast.FuncType at: &{9612058 0xc004641b60 <nil>}) ErrorHandler} NewSingleHostReverseProxy
;;   "NewSingleHostReverseProxy returns a new ReverseProxy that routes
;; URLs to the scheme, host, and base path provided in target. If the
;; target's path is "/base" and the incoming request was for "/dir",
;; the target request will be for /base/dir.
;; NewSingleHostReverseProxy does not rewrite the Host header.
;; To rewrite Host headers, use ReverseProxy directly with a custom
;; Director policy."
;;   {:added "1.0"
;;    :go "newSingleHostReverseProxy(target)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{9612957 0xc0046564a0}) target])
;; 
JOKER FUNC httputil.TestClonesRequestHeaders has: 
;; (defn TestClonesRequestHeaders
;;   "Issue 18327: verify we always do a deep copy of the Request.Header map
;; before any mutations."
;;   {:added "1.0"
;;    :go "testClonesRequestHeaders(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{9646324 0xc0046c8760}) t])
;; 
JOKER FUNC httputil.TestDumpRequest has: 
;; (defn TestDumpRequest
;;   {:added "1.0"
;;    :go "testDumpRequest(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{9605788 0xc00463ea40}) t])
;; 
JOKER FUNC httputil.TestDumpResponse has: 
;; (defn TestDumpResponse
;;   {:added "1.0"
;;    :go "testDumpResponse(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{9609386 0xc004646560}) t])
;; 
JOKER FUNC httputil.TestModifyResponseClosesBody has: 
;; (defn TestModifyResponseClosesBody
;;   {:added "1.0"
;;    :go "testModifyResponseClosesBody(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{9647308 0xc0046c9a20}) t])
;; 
JOKER FUNC httputil.TestNilBody has: 
;; (defn TestNilBody
;;   "Issue 12344"
;;   {:added "1.0"
;;    :go "testNilBody(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{9633694 0xc004697e60}) t])
;; 
JOKER FUNC httputil.TestReverseProxy has: 
;; (defn TestReverseProxy
;;   {:added "1.0"
;;    :go "testReverseProxy(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{9622068 0xc004678de0}) t])
;; 
JOKER FUNC httputil.TestReverseProxyCancelation has: 
;; (defn TestReverseProxyCancelation
;;   {:added "1.0"
;;    :go "testReverseProxyCancelation(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{9631894 0xc004696260}) t])
;; 
JOKER FUNC httputil.TestReverseProxyErrorHandler has: 
;; (defn TestReverseProxyErrorHandler
;;   {:added "1.0"
;;    :go "testReverseProxyErrorHandler(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{9641070 0xc0046baac0}) t])
;; 
JOKER FUNC httputil.TestReverseProxyFlushInterval has: 
;; (defn TestReverseProxyFlushInterval
;;   {:added "1.0"
;;    :go "testReverseProxyFlushInterval(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{9630853 0xc004692f80}) t])
;; 
JOKER FUNC httputil.TestReverseProxyGetPutBuffer has: 
;; (defn TestReverseProxyGetPutBuffer
;;   {:added "1.0"
;;    :go "testReverseProxyGetPutBuffer(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{9635925 0xc0046a8b40}) t])
;; 
JOKER FUNC httputil.TestReverseProxyModifyResponse has: 
;; (defn TestReverseProxyModifyResponse
;;   "Issue 14237. Test ModifyResponse and that an error from it
;; causes the proxy to return StatusBadGateway, or StatusOK otherwise."
;;   {:added "1.0"
;;    :go "testReverseProxyModifyResponse(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{9639640 0xc0046b0ea0}) t])
;; 
JOKER FUNC httputil.TestReverseProxyQuery has: 
;; (defn TestReverseProxyQuery
;;   {:added "1.0"
;;    :go "testReverseProxyQuery(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{9630051 0xc00468fd80}) t])
;; 
JOKER FUNC httputil.TestReverseProxyStripHeadersPresentInConnection has: 
;; (defn TestReverseProxyStripHeadersPresentInConnection
;;   "Issue 16875: remove any proxied headers mentioned in the "Connection"
;; header value."
;;   {:added "1.0"
;;    :go "testReverseProxyStripHeadersPresentInConnection(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{9626395 0xc004685e40}) t])
;; 
JOKER FUNC httputil.TestReverseProxy_CopyBuffer has: 
;; (defn TestReverseProxy_CopyBuffer
;;   "Issue 16659: log errors from short read"
;;   {:added "1.0"
;;    :go "testReverseProxy_CopyBuffer(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{9643353 0xc0046bf240}) t])
;; 
JOKER FUNC httputil.TestReverseProxy_NilBody has: 
;; (defn TestReverseProxy_NilBody
;;   "Issue 16036: send a Request with a nil Body when possible"
;;   {:added "1.0"
;;    :go "testReverseProxy_NilBody(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{9638736 0xc0046b0100}) t])
;; 
JOKER FUNC httputil.TestReverseProxy_PanicBodyError has: 
;; (defn TestReverseProxy_PanicBodyError
;;   "Issue 23643: panic on body copy error"
;;   {:added "1.0"
;;    :go "testReverseProxy_PanicBodyError(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{9648454 0xc0046d2fe0}) t])
;; 
JOKER FUNC httputil.TestReverseProxy_Post has: 
;; (defn TestReverseProxy_Post
;;   {:added "1.0"
;;    :go "testReverseProxy_Post(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{9637193 0xc0046ae540}) t])
;; 
JOKER FUNC httputil.TestServeHTTPDeepCopy has: 
;; (defn TestServeHTTPDeepCopy
;;   {:added "1.0"
;;    :go "testServeHTTPDeepCopy(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{9645291 0xc0046c3420}) t])
;; 
JOKER FUNC httputil.TestUserAgentHeader has: 
;; (defn TestUserAgentHeader
;;   "Issue 15524"
;;   {:added "1.0"
;;    :go "testUserAgentHeader(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{9634497 0xc00469cea0}) t])
;; 
JOKER FUNC httputil.TestXForwardedFor has: 
;; (defn TestXForwardedFor
;;   {:added "1.0"
;;    :go "testXForwardedFor(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{9628375 0xc00468e180}) t])
;; 
JOKER FUNC httputil_test.ExampleDumpRequest has: 
;; (defn ExampleDumpRequest
;;   {:added "1.0"
;;    :go "exampleDumpRequest()"}
;;   [])
;; 
JOKER FUNC httputil_test.ExampleDumpRequestOut has: 
;; (defn ExampleDumpRequestOut
;;   {:added "1.0"
;;    :go "exampleDumpRequestOut()"}
;;   [])
;; 
JOKER FUNC httputil_test.ExampleDumpResponse has: 
;; (defn ExampleDumpResponse
;;   {:added "1.0"
;;    :go "exampleDumpResponse()"}
;;   [])
;; 
JOKER FUNC httputil_test.ExampleReverseProxy has: 
;; (defn ExampleReverseProxy
;;   {:added "1.0"
;;    :go "exampleReverseProxy()"}
;;   [])
;; 
JOKER FUNC idna.BidiRule has: 
;; (defn ^ABEND881(unrecognized Expr type *ast.FuncType at: &{15163999 0xc0053df290 <nil>}) BidiRule
;;   "BidiRule enables the Bidi rule as defined in RFC 5893. Any application
;; that relies on proper validation of labels should include this rule."
;;   {:added "1.0"
;;    :go "bidiRule()"}
;;   [])
;; 
JOKER FUNC idna.MapForLookup has: 
;; (defn ^ABEND881(unrecognized Expr type *ast.FuncType at: &{15163999 0xc0053df290 <nil>}) MapForLookup
;;   "MapForLookup sets validation and mapping options such that a given IDN is
;; transformed for domain name lookup according to the requirements set out in
;; Section 5 of RFC 5891. The mappings follow the recommendations of RFC 5894,
;; RFC 5895 and UTS 46. It does not add the Bidi Rule. Use the BidiRule option
;; to add this check.
;; 
;; The mappings include normalization and mapping case, width and other
;; compatibility mappings."
;;   {:added "1.0"
;;    :go "mapForLookup()"}
;;   [])
;; 
JOKER FUNC idna.New has: 
;; (defn ^{} New
;;   "New creates a new Profile.
;; 
;; With no options, the returned Profile is the most permissive and equals the
;; Punycode Profile. Options can be passed to further restrict the Profile. The
;; MapForLookup and ValidateForRegistration options set a collection of options,
;; for lookup and registration purposes respectively, which can be tailored by
;; adding more fine-grained options, where later options override earlier
;; options."
;;   {:added "1.0"
;;    :go "new(o)"}
;;   [^ABEND881(unrecognized Expr type *ast.Ellipsis at: &{15168822 Option}) o])
;; 
JOKER FUNC idna.RemoveLeadingDots has: 
;; (defn ^ABEND881(unrecognized Expr type *ast.FuncType at: &{15163999 0xc0053df290 <nil>}) RemoveLeadingDots
;;   "RemoveLeadingDots removes leading label separators. Leading runes that map to
;; dots, such as U+3002 IDEOGRAPHIC FULL STOP, are removed as well.
;; 
;; This is the behavior suggested by the UTS #46 and is adopted by some
;; browsers."
;;   {:added "1.0"
;;    :go "removeLeadingDots(remove)"}
;;   [remove])
;; 
JOKER FUNC idna.StrictDomainName has: 
;; (defn ^ABEND881(unrecognized Expr type *ast.FuncType at: &{15163999 0xc0053df290 <nil>}) StrictDomainName
;;   "StrictDomainName limits the set of permissible ASCII characters to those
;; allowed in domain names as defined in RFC 1034 (A-Z, a-z, 0-9 and the
;; hyphen). This is set by default for MapForLookup and ValidateForRegistration.
;; 
;; This option is useful, for instance, for browsers that allow characters
;; outside this range, for example a '_' (U+005F LOW LINE). See
;; http://www.rfc-editor.org/std/std3.txt for more details This option
;; corresponds to the UseSTD3ASCIIRules option in UTS #46."
;;   {:added "1.0"
;;    :go "strictDomainName(use)"}
;;   [use])
;; 
JOKER FUNC idna.TestPunycode has: 
;; (defn TestPunycode
;;   {:added "1.0"
;;    :go "testPunycode(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{15158577 0xc004929220}) t])
;; 
JOKER FUNC idna.TestPunycodeErrors has: 
;; (defn TestPunycodeErrors
;;   {:added "1.0"
;;    :go "testPunycodeErrors(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{15159638 0xc00492c120}) t])
;; 
JOKER FUNC idna.ToASCII has: 
(defn ^[String Error] ToASCII
  "ToASCII is a wrapper for Punycode.ToASCII."
  {:added "1.0"
   :go "toASCII(s)"}
  [^String s])

JOKER FUNC idna.ToUnicode has: 
(defn ^[String Error] ToUnicode
  "ToUnicode is a wrapper for Punycode.ToUnicode."
  {:added "1.0"
   :go "toUnicode(s)"}
  [^String s])

JOKER FUNC idna.Transitional has: 
;; (defn ^ABEND881(unrecognized Expr type *ast.FuncType at: &{15163999 0xc0053df290 <nil>}) Transitional
;;   "Transitional sets a Profile to use the Transitional mapping as defined in UTS
;; #46. This will cause, for example, "ß" to be mapped to "ss". Using the
;; transitional mapping provides a compromise between IDNA2003 and IDNA2008
;; compatibility. It is used by most browsers when resolving domain names. This
;; option is only meaningful if combined with MapForLookup."
;;   {:added "1.0"
;;    :go "transitional(transitional)"}
;;   [transitional])
;; 
JOKER FUNC idna.ValidateForRegistration has: 
;; (defn ^ABEND881(unrecognized Expr type *ast.FuncType at: &{15163999 0xc0053df290 <nil>}) ValidateForRegistration
;;   "ValidateForRegistration sets validation options to verify that a given IDN is
;; properly formatted for registration as defined by Section 4 of RFC 5891."
;;   {:added "1.0"
;;    :go "validateForRegistration()"}
;;   [])
;; 
JOKER FUNC idna.ValidateLabels has: 
;; (defn ^ABEND881(unrecognized Expr type *ast.FuncType at: &{15163999 0xc0053df290 <nil>}) ValidateLabels
;;   "ValidateLabels sets whether to check the mandatory label validation criteria
;; as defined in Section 5.4 of RFC 5891. This includes testing for correct use
;; of hyphens ('-'), normalization, validity of runes, and the context rules."
;;   {:added "1.0"
;;    :go "validateLabels(enable)"}
;;   [enable])
;; 
JOKER FUNC idna.VerifyDNSLength has: 
;; (defn ^ABEND881(unrecognized Expr type *ast.FuncType at: &{15163999 0xc0053df290 <nil>}) VerifyDNSLength
;;   "VerifyDNSLength sets whether a Profile should fail if any of the IDN parts
;; are longer than allowed by the RFC."
;;   {:added "1.0"
;;    :go "verifyDNSLength(verify)"}
;;   [verify])
;; 
JOKER FUNC image.Decode has: 
;; (defn ^[ABEND881(unrecognized Expr type *ast.InterfaceType at: &{5947542 0xc0014e2c30 false}) String Error] Decode
;;   "Decode decodes an image that has been encoded in a registered format.
;; The string returned is the format name used during format registration.
;; Format registration is typically done by an init function in the codec-
;; specific package."
;;   {:added "1.0"
;;    :go "decode(r)"}
;;   [^ABEND881(unrecognized Expr type *ast.SelectorExpr at: &{io Reader}) r])
;; 
JOKER FUNC image.DecodeConfig has: 
;; (defn ^[{:colormodel ^ABEND881(unrecognized Expr type *ast.SelectorExpr at: &{color Model}) ColorModel, :width ^Int Width, :height ^Int Height} String Error] DecodeConfig
;;   "DecodeConfig decodes the color model and dimensions of an image that has
;; been encoded in a registered format. The string returned is the format name
;; used during format registration. Format registration is typically done by
;; an init function in the codec-specific package."
;;   {:added "1.0"
;;    :go "decodeConfig(r)"}
;;   [^ABEND881(unrecognized Expr type *ast.SelectorExpr at: &{io Reader}) r])
;; 
JOKER FUNC image.NewAlpha has: 
;; (defn ^{:pix ^ABEND881(unrecognized Expr type *ast.ArrayType at: &{5959873 <nil> uint8}) Pix, :stride ^Int Stride, :rect Rect} NewAlpha
;;   "NewAlpha returns a new Alpha image with the given bounds."
;;   {:added "1.0"
;;    :go "newAlpha(r)"}
;;   [r])
;; 
JOKER FUNC image.NewAlpha16 has: 
;; (defn ^{:pix ^ABEND881(unrecognized Expr type *ast.ArrayType at: &{5962267 <nil> uint8}) Pix, :stride ^Int Stride, :rect Rect} NewAlpha16
;;   "NewAlpha16 returns a new Alpha16 image with the given bounds."
;;   {:added "1.0"
;;    :go "newAlpha16(r)"}
;;   [r])
;; 
JOKER FUNC image.NewCMYK has: 
;; (defn ^{:pix ^ABEND881(unrecognized Expr type *ast.ArrayType at: &{5969257 <nil> uint8}) Pix, :stride ^Int Stride, :rect Rect} NewCMYK
;;   "NewCMYK returns a new CMYK image with the given bounds."
;;   {:added "1.0"
;;    :go "newCMYK(r)"}
;;   [r])
;; 
JOKER FUNC image.NewGray has: 
;; (defn ^{:pix ^ABEND881(unrecognized Expr type *ast.ArrayType at: &{5964834 <nil> uint8}) Pix, :stride ^Int Stride, :rect Rect} NewGray
;;   "NewGray returns a new Gray image with the given bounds."
;;   {:added "1.0"
;;    :go "newGray(r)"}
;;   [r])
;; 
JOKER FUNC image.NewGray16 has: 
;; (defn ^{:pix ^ABEND881(unrecognized Expr type *ast.ArrayType at: &{5966969 <nil> uint8}) Pix, :stride ^Int Stride, :rect Rect} NewGray16
;;   "NewGray16 returns a new Gray16 image with the given bounds."
;;   {:added "1.0"
;;    :go "newGray16(r)"}
;;   [r])
;; 
JOKER FUNC image.NewNRGBA has: 
;; (defn ^{:pix ^ABEND881(unrecognized Expr type *ast.ArrayType at: &{5954255 <nil> uint8}) Pix, :stride ^Int Stride, :rect Rect} NewNRGBA
;;   "NewNRGBA returns a new NRGBA image with the given bounds."
;;   {:added "1.0"
;;    :go "newNRGBA(r)"}
;;   [r])
;; 
JOKER FUNC image.NewNRGBA64 has: 
;; (defn ^{:pix ^ABEND881(unrecognized Expr type *ast.ArrayType at: &{5956822 <nil> uint8}) Pix, :stride ^Int Stride, :rect Rect} NewNRGBA64
;;   "NewNRGBA64 returns a new NRGBA64 image with the given bounds."
;;   {:added "1.0"
;;    :go "newNRGBA64(r)"}
;;   [r])
;; 
JOKER FUNC image.NewNYCbCrA has: 
;; (defn ^{:a ^ABEND881(unrecognized Expr type *ast.ArrayType at: &{5918384 <nil> uint8}) A, :astride ^Int AStride} NewNYCbCrA
;;   "NewNYCbCrA returns a new NYCbCrA image with the given bounds and subsample
;; ratio."
;;   {:added "1.0"
;;    :go "newNYCbCrA(r, subsampleRatio)"}
;;   [r, subsampleRatio])
;; 
JOKER FUNC image.NewPaletted has: 
;; (defn ^{:pix ^ABEND881(unrecognized Expr type *ast.ArrayType at: &{5971536 <nil> uint8}) Pix, :stride ^Int Stride, :rect Rect, :palette ^ABEND881(unrecognized Expr type *ast.SelectorExpr at: &{color Palette}) Palette} NewPaletted
;;   "NewPaletted returns a new Paletted image with the given width, height and
;; palette."
;;   {:added "1.0"
;;    :go "newPaletted(r, p)"}
;;   [r, ^ABEND881(unrecognized Expr type *ast.SelectorExpr at: &{color Palette}) p])
;; 
JOKER FUNC image.NewRGBA has: 
;; (defn ^{:pix ^ABEND881(unrecognized Expr type *ast.ArrayType at: &{5948688 <nil> uint8}) Pix, :stride ^Int Stride, :rect Rect} NewRGBA
;;   "NewRGBA returns a new RGBA image with the given bounds."
;;   {:added "1.0"
;;    :go "newRGBA(r)"}
;;   [r])
;; 
JOKER FUNC image.NewRGBA64 has: 
;; (defn ^{:pix ^ABEND881(unrecognized Expr type *ast.ArrayType at: &{5951226 <nil> uint8}) Pix, :stride ^Int Stride, :rect Rect} NewRGBA64
;;   "NewRGBA64 returns a new RGBA64 image with the given bounds."
;;   {:added "1.0"
;;    :go "newRGBA64(r)"}
;;   [r])
;; 
JOKER FUNC image.NewUniform has: 
;; (defn ^{:c ^ABEND881(unrecognized Expr type *ast.SelectorExpr at: &{color Color}) C} NewUniform
;;   {:added "1.0"
;;    :go "newUniform(c)"}
;;   [^ABEND881(unrecognized Expr type *ast.SelectorExpr at: &{color Color}) c])
;; 
JOKER FUNC image.NewYCbCr has: 
;; (defn ^{:y ^ABEND881(unrecognized Expr type *ast.ArrayType at: &{5914754 <nil> uint8}) Y, :cb ^ABEND881(unrecognized Expr type *ast.ArrayType at: &{5914754 <nil> uint8}) Cb, :cr ^ABEND881(unrecognized Expr type *ast.ArrayType at: &{5914754 <nil> uint8}) Cr, :ystride ^Int YStride, :cstride ^Int CStride, :subsampleratio SubsampleRatio, :rect Rect} NewYCbCr
;;   "NewYCbCr returns a new YCbCr image with the given bounds and subsample
;; ratio."
;;   {:added "1.0"
;;    :go "newYCbCr(r, subsampleRatio)"}
;;   [r, subsampleRatio])
;; 
JOKER FUNC image.Pt has: 
(defn ^{:x ^Int X, :y ^Int Y} Pt
  "Pt is shorthand for Point{X, Y}."
  {:added "1.0"
   :go "pt(X, Y)"}
  [^Int X, ^Int Y])

JOKER FUNC image.Rect has: 
(defn ^{:min Min, :max Max} Rect
  "Rect is shorthand for Rectangle{Pt(x0, y0), Pt(x1, y1)}. The returned
rectangle has minimum and maximum coordinates swapped if necessary so that
it is well-formed."
  {:added "1.0"
   :go "rect(x0, y0, x1, y1)"}
  [^Int x0, ^Int y0, ^Int x1, ^Int y1])

JOKER FUNC image.RegisterFormat has: 
;; (defn RegisterFormat
;;   "RegisterFormat registers an image format for use by Decode.
;; Name is the name of the format, like "jpeg" or "png".
;; Magic is the magic prefix that identifies the format's encoding. The magic
;; string can contain "?" wildcards that each match any one byte.
;; Decode is the function that decodes the encoded image.
;; DecodeConfig is the function that decodes just its configuration."
;;   {:added "1.0"
;;    :go "registerFormat(name, magic, decode, decodeConfig)"}
;;   [^String name, ^String magic, ^ABEND881(unrecognized Expr type *ast.FuncType at: &{5944402 0xc001467f50 0xc001467fb0}) decode, ^ABEND881(unrecognized Expr type *ast.FuncType at: &{5944447 0xc00149c090 0xc00149c180}) decodeConfig])
;; 
JOKER FUNC image.Test16BitsPerColorChannel has: 
;; (defn Test16BitsPerColorChannel
;;   {:added "1.0"
;;    :go "test16BitsPerColorChannel(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{5942538 0xc0023ad780}) t])
;; 
JOKER FUNC image.TestImage has: 
;; (defn TestImage
;;   {:added "1.0"
;;    :go "testImage(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{5940669 0xc002351160}) t])
;; 
JOKER FUNC image.TestRectangle has: 
;; (defn TestRectangle
;;   {:added "1.0"
;;    :go "testRectangle(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{5921171 0xc001c49cc0}) t])
;; 
JOKER FUNC image.TestYCbCr has: 
;; (defn TestYCbCr
;;   {:added "1.0"
;;    :go "testYCbCr(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{5924275 0xc0021d2a80}) t])
;; 
JOKER FUNC image.TestYCbCrSlicesDontOverlap has: 
;; (defn TestYCbCrSlicesDontOverlap
;;   {:added "1.0"
;;    :go "testYCbCrSlicesDontOverlap(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{5926984 0xc00222e7a0}) t])
;; 
JOKER FUNC image_test.Example has: 
;; (defn Example
;;   {:added "1.0"
;;    :go "example()"}
;;   [])
;; 
JOKER FUNC image_test.Example_decodeConfig has: 
;; (defn Example_decodeConfig
;;   {:added "1.0"
;;    :go "example_decodeConfig()"}
;;   [])
;; 
JOKER FUNC image_test.TestDecode has: 
;; (defn TestDecode
;;   {:added "1.0"
;;    :go "testDecode(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{5938736 0xc002344420}) t])
;; 
JOKER FUNC importer.Default has: 
;; (defn ^ABEND881(unrecognized Expr type *ast.SelectorExpr at: &{types Importer}) Default
;;   "Default returns an Importer for the compiler that built the running binary.
;; If available, the result implements types.ImporterFrom."
;;   {:added "1.0"
;;    :go "default()"}
;;   [])
;; 
JOKER FUNC importer.For has: 
;; (defn ^ABEND881(unrecognized Expr type *ast.SelectorExpr at: &{types Importer}) For
;;   "For returns an Importer for importing from installed packages
;; for the compilers "gc" and "gccgo", or for importing directly
;; from the source if the compiler argument is "source". In this
;; latter case, importing may fail under circumstances where the
;; exported API is not entirely defined in pure Go source code
;; (if the package API depends on cgo-defined entities, the type
;; checker won't have access to those).
;; 
;; If lookup is nil, the default package lookup mechanism for the
;; given compiler is used, and the resulting importer attempts
;; to resolve relative and absolute import paths to canonical
;; import path IDs before finding the imported file.
;; 
;; If lookup is non-nil, then the returned importer calls lookup
;; each time it needs to resolve an import path. In this mode
;; the importer can only be invoked with canonical import paths
;; (not relative or absolute ones); it is assumed that the translation
;; to canonical import paths is being done by the client of the
;; importer."
;;   {:added "1.0"
;;    :go "for(compiler, lookup)"}
;;   [^String compiler, lookup])
;; 
JOKER FUNC importer.TestFor has: 
;; (defn TestFor
;;   {:added "1.0"
;;    :go "testFor(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{4694387 0xc001a60f60}) t])
;; 
JOKER FUNC io.Copy has: 
(defn ^[written err] Copy
  "Copy copies from src to dst until either EOF is reached
on src or an error occurs. It returns the number of bytes
copied and the first error encountered while copying, if any.

A successful Copy returns err == nil, not err == EOF.
Because Copy is defined to read from src until EOF, it does
not treat an EOF from Read as an error to be reported.

If src implements the WriterTo interface,
the copy is implemented by calling src.WriteTo(dst).
Otherwise, if dst implements the ReaderFrom interface,
the copy is implemented by calling dst.ReadFrom(src)."
  {:added "1.0"
   :go "copy(dst, src)"}
  [dst, src])

JOKER FUNC io.CopyBuffer has: 
;; (defn ^[written err] CopyBuffer
;;   "CopyBuffer is identical to Copy except that it stages through the
;; provided buffer (if one is required) rather than allocating a
;; temporary one. If buf is nil, one is allocated; otherwise if it has
;; zero length, CopyBuffer panics."
;;   {:added "1.0"
;;    :go "copyBuffer(dst, src, buf)"}
;;   [dst, src, ^ABEND881(unrecognized Expr type *ast.ArrayType at: &{6347836 <nil> byte}) buf])
;; 
JOKER FUNC io.CopyN has: 
(defn ^[written err] CopyN
  "CopyN copies n bytes (or until an error) from src to dst.
It returns the number of bytes copied and the earliest
error encountered while copying.
On return, written == n if and only if err == nil.

If dst implements the ReaderFrom interface,
the copy is implemented using it."
  {:added "1.0"
   :go "copyN(dst, src, n)"}
  [dst, src, n])

JOKER FUNC io.LimitReader has: 
;; (defn ^ABEND881(unrecognized Expr type *ast.InterfaceType at: &{6337983 0xc0023f3c80 false}) LimitReader
;;   "LimitReader returns a Reader that reads from r
;; but stops with EOF after n bytes.
;; The underlying implementation is a *LimitedReader."
;;   {:added "1.0"
;;    :go "limitReader(r, n)"}
;;   [r, n])
;; 
JOKER FUNC io.MultiReader has: 
;; (defn ^ABEND881(unrecognized Expr type *ast.InterfaceType at: &{6337983 0xc0023f3c80 false}) MultiReader
;;   "MultiReader returns a Reader that's the logical concatenation of
;; the provided input readers. They're read sequentially. Once all
;; inputs have returned EOF, Read will return EOF.  If any of the readers
;; return a non-nil, non-EOF error, Read will return that error."
;;   {:added "1.0"
;;    :go "multiReader(readers)"}
;;   [^ABEND881(unrecognized Expr type *ast.Ellipsis at: &{6388666 Reader}) readers])
;; 
JOKER FUNC io.MultiWriter has: 
;; (defn ^ABEND881(unrecognized Expr type *ast.InterfaceType at: &{6338474 0xc0023f3d70 false}) MultiWriter
;;   "MultiWriter creates a writer that duplicates its writes to all the
;; provided writers, similar to the Unix tee(1) command.
;; 
;; Each write is written to each listed writer, one at a time.
;; If a listed writer returns an error, that overall write operation
;; stops and returns the error; it does not continue down the list."
;;   {:added "1.0"
;;    :go "multiWriter(writers)"}
;;   [^ABEND881(unrecognized Expr type *ast.Ellipsis at: &{6389843 Writer}) writers])
;; 
JOKER FUNC io.NewSectionReader has: 
(defn ^{:r r, :base base, :off off, :limit limit} NewSectionReader
  "NewSectionReader returns a SectionReader that reads from r
starting at offset off and stops with EOF after n bytes."
  {:added "1.0"
   :go "newSectionReader(r, off, n)"}
  [r, off, n])

JOKER FUNC io.Pipe has: 
;; (defn ^[{:p ^ABEND881(unrecognized Expr type *ast.StarExpr at: &{6365849 pipe}) p} {:p ^ABEND881(unrecognized Expr type *ast.StarExpr at: &{6366647 pipe}) p}] Pipe
;;   "Pipe creates a synchronous in-memory pipe.
;; It can be used to connect code expecting an io.Reader
;; with code expecting an io.Writer.
;; 
;; Reads and Writes on the pipe are matched one to one
;; except when multiple Reads are needed to consume a single Write.
;; That is, each Write to the PipeWriter blocks until it has satisfied
;; one or more Reads from the PipeReader that fully consume
;; the written data.
;; The data is copied directly from the Write to the corresponding
;; Read (or Reads); there is no internal buffering.
;; 
;; It is safe to call Read and Write in parallel with each other or with Close.
;; Parallel calls to Read and parallel calls to Write are also safe:
;; the individual calls will be gated sequentially."
;;   {:added "1.0"
;;    :go "pipe()"}
;;   [])
;; 
JOKER FUNC io.ReadAtLeast has: 
;; (defn ^[n err] ReadAtLeast
;;   "ReadAtLeast reads from r into buf until it has read at least min bytes.
;; It returns the number of bytes copied and an error if fewer bytes were read.
;; The error is EOF only if no bytes were read.
;; If an EOF happens after reading fewer than min bytes,
;; ReadAtLeast returns ErrUnexpectedEOF.
;; If min is greater than the length of buf, ReadAtLeast returns ErrShortBuffer.
;; On return, n >= min if and only if err == nil.
;; If r returns an error having read at least min bytes, the error is dropped."
;;   {:added "1.0"
;;    :go "readAtLeast(r, buf, min)"}
;;   [r, ^ABEND881(unrecognized Expr type *ast.ArrayType at: &{6345516 <nil> byte}) buf, ^Int min])
;; 
JOKER FUNC io.ReadFull has: 
;; (defn ^[n err] ReadFull
;;   "ReadFull reads exactly len(buf) bytes from r into buf.
;; It returns the number of bytes copied and an error if fewer bytes were read.
;; The error is EOF only if no bytes were read.
;; If an EOF happens after reading some but not all the bytes,
;; ReadFull returns ErrUnexpectedEOF.
;; On return, n == len(buf) if and only if err == nil.
;; If r returns an error having read at least len(buf) bytes, the error is dropped."
;;   {:added "1.0"
;;    :go "readFull(r, buf)"}
;;   [r, ^ABEND881(unrecognized Expr type *ast.ArrayType at: &{6346241 <nil> byte}) buf])
;; 
JOKER FUNC io.TeeReader has: 
;; (defn ^ABEND881(unrecognized Expr type *ast.InterfaceType at: &{6337983 0xc0023f3c80 false}) TeeReader
;;   "TeeReader returns a Reader that writes to w what it reads from r.
;; All reads from r performed through it are matched with
;; corresponding writes to w. There is no internal buffering -
;; the write must complete before the read completes.
;; Any error encountered while writing is reported as a read error."
;;   {:added "1.0"
;;    :go "teeReader(r, w)"}
;;   [r, w])
;; 
JOKER FUNC io.WriteString has: 
(defn ^[n err] WriteString
  "WriteString writes the contents of the string s to w, which accepts a slice of bytes.
If w implements a WriteString method, it is invoked directly.
Otherwise, w.Write is called exactly once."
  {:added "1.0"
   :go "writeString(w, s)"}
  [w, ^String s])

JOKER FUNC io_test.BenchmarkCopyNLarge has: 
;; (defn BenchmarkCopyNLarge
;;   {:added "1.0"
;;    :go "benchmarkCopyNLarge(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{6356404 0xc0017d6700}) b])
;; 
JOKER FUNC io_test.BenchmarkCopyNSmall has: 
;; (defn BenchmarkCopyNSmall
;;   {:added "1.0"
;;    :go "benchmarkCopyNSmall(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{6356190 0xc0017d6140}) b])
;; 
JOKER FUNC io_test.ExampleCopy has: 
;; (defn ExampleCopy
;;   {:added "1.0"
;;    :go "exampleCopy()"}
;;   [])
;; 
JOKER FUNC io_test.ExampleCopyBuffer has: 
;; (defn ExampleCopyBuffer
;;   {:added "1.0"
;;    :go "exampleCopyBuffer()"}
;;   [])
;; 
JOKER FUNC io_test.ExampleCopyN has: 
;; (defn ExampleCopyN
;;   {:added "1.0"
;;    :go "exampleCopyN()"}
;;   [])
;; 
JOKER FUNC io_test.ExampleLimitReader has: 
;; (defn ExampleLimitReader
;;   {:added "1.0"
;;    :go "exampleLimitReader()"}
;;   [])
;; 
JOKER FUNC io_test.ExampleMultiReader has: 
;; (defn ExampleMultiReader
;;   {:added "1.0"
;;    :go "exampleMultiReader()"}
;;   [])
;; 
JOKER FUNC io_test.ExampleMultiWriter has: 
;; (defn ExampleMultiWriter
;;   {:added "1.0"
;;    :go "exampleMultiWriter()"}
;;   [])
;; 
JOKER FUNC io_test.ExamplePipe has: 
;; (defn ExamplePipe
;;   {:added "1.0"
;;    :go "examplePipe()"}
;;   [])
;; 
JOKER FUNC io_test.ExampleReadAtLeast has: 
;; (defn ExampleReadAtLeast
;;   {:added "1.0"
;;    :go "exampleReadAtLeast()"}
;;   [])
;; 
JOKER FUNC io_test.ExampleReadFull has: 
;; (defn ExampleReadFull
;;   {:added "1.0"
;;    :go "exampleReadFull()"}
;;   [])
;; 
JOKER FUNC io_test.ExampleSectionReader has: 
;; (defn ExampleSectionReader
;;   {:added "1.0"
;;    :go "exampleSectionReader()"}
;;   [])
;; 
JOKER FUNC io_test.ExampleSectionReader_ReadAt has: 
;; (defn ExampleSectionReader_ReadAt
;;   {:added "1.0"
;;    :go "exampleSectionReader_ReadAt()"}
;;   [])
;; 
JOKER FUNC io_test.ExampleSectionReader_Seek has: 
;; (defn ExampleSectionReader_Seek
;;   {:added "1.0"
;;    :go "exampleSectionReader_Seek()"}
;;   [])
;; 
JOKER FUNC io_test.ExampleSeeker_Seek has: 
;; (defn ExampleSeeker_Seek
;;   {:added "1.0"
;;    :go "exampleSeeker_Seek()"}
;;   [])
;; 
JOKER FUNC io_test.ExampleTeeReader has: 
;; (defn ExampleTeeReader
;;   {:added "1.0"
;;    :go "exampleTeeReader()"}
;;   [])
;; 
JOKER FUNC io_test.ExampleWriteString has: 
;; (defn ExampleWriteString
;;   {:added "1.0"
;;    :go "exampleWriteString()"}
;;   [])
;; 
JOKER FUNC io_test.TestCopy has: 
;; (defn TestCopy
;;   {:added "1.0"
;;    :go "testCopy(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{6352449 0xc0017f0400}) t])
;; 
JOKER FUNC io_test.TestCopyBuffer has: 
;; (defn TestCopyBuffer
;;   {:added "1.0"
;;    :go "testCopyBuffer(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{6352970 0xc0017f0e40}) t])
;; 
JOKER FUNC io_test.TestCopyBufferNil has: 
;; (defn TestCopyBufferNil
;;   {:added "1.0"
;;    :go "testCopyBufferNil(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{6353241 0xc0017f12c0}) t])
;; 
JOKER FUNC io_test.TestCopyN has: 
;; (defn TestCopyN
;;   {:added "1.0"
;;    :go "testCopyN(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{6355523 0xc0018174a0}) t])
;; 
JOKER FUNC io_test.TestCopyNEOF has: 
;; (defn TestCopyNEOF
;;   {:added "1.0"
;;    :go "testCopyNEOF(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{6356889 0xc0017d7220}) t])
;; 
JOKER FUNC io_test.TestCopyNReadFrom has: 
;; (defn TestCopyNReadFrom
;;   {:added "1.0"
;;    :go "testCopyNReadFrom(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{6355728 0xc001817880}) t])
;; 
JOKER FUNC io_test.TestCopyNWriteTo has: 
;; (defn TestCopyNWriteTo
;;   {:added "1.0"
;;    :go "testCopyNWriteTo(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{6355954 0xc001817ce0}) t])
;; 
JOKER FUNC io_test.TestCopyNegative has: 
;; (defn TestCopyNegative
;;   {:added "1.0"
;;    :go "testCopyNegative(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{6352656 0xc0017f07e0}) t])
;; 
JOKER FUNC io_test.TestCopyPriority has: 
;; (defn TestCopyPriority
;;   "It's preferable to choose WriterTo over ReaderFrom, since a WriterTo can issue one large write,
;; while the ReaderFrom must read until EOF, potentially allocating when running out of buffer.
;; Make sure that we choose WriterTo when both are implemented."
;;   {:added "1.0"
;;    :go "testCopyPriority(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{6354482 0xc0018163e0}) t])
;; 
JOKER FUNC io_test.TestCopyReadErrWriteErr has: 
;; (defn TestCopyReadErrWriteErr
;;   "In case a Read results in an error with non-zero bytes read, and
;; the subsequent Write also results in an error, the error from Write
;; is returned, as it is the one that prevented progressing further."
;;   {:added "1.0"
;;    :go "testCopyReadErrWriteErr(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{6355243 0xc001816ea0}) t])
;; 
JOKER FUNC io_test.TestCopyReadFrom has: 
;; (defn TestCopyReadFrom
;;   {:added "1.0"
;;    :go "testCopyReadFrom(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{6353494 0xc0017f16e0}) t])
;; 
JOKER FUNC io_test.TestCopyWriteTo has: 
;; (defn TestCopyWriteTo
;;   {:added "1.0"
;;    :go "testCopyWriteTo(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{6353730 0xc0017f1b20}) t])
;; 
JOKER FUNC io_test.TestInterleavedMultiReader has: 
;; (defn TestInterleavedMultiReader
;;   {:added "1.0"
;;    :go "testInterleavedMultiReader(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{6377414 0xc0029aa000}) t])
;; 
JOKER FUNC io_test.TestMultiReader has: 
;; (defn TestMultiReader
;;   {:added "1.0"
;;    :go "testMultiReader(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{6368719 0xc00230fa80}) t])
;; 
JOKER FUNC io_test.TestMultiReaderCopy has: 
;; (defn TestMultiReaderCopy
;;   "Test that MultiReader copies the input slice and is insulated from future modification."
;;   {:added "1.0"
;;    :go "testMultiReaderCopy(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{6373281 0xc00288a520}) t])
;; 
JOKER FUNC io_test.TestMultiReaderFinalEOF has: 
;; (defn TestMultiReaderFinalEOF
;;   "Test that a reader returning (n, EOF) at the end of an MultiReader
;; chain continues to return EOF on its final read, rather than
;; yielding a (0, EOF)."
;;   {:added "1.0"
;;    :go "testMultiReaderFinalEOF(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{6376214 0xc00288ec80}) t])
;; 
JOKER FUNC io_test.TestMultiReaderFlatten has: 
;; (defn TestMultiReaderFlatten
;;   "Test that MultiReader properly flattens chained multiReaders when Read is called"
;;   {:added "1.0"
;;    :go "testMultiReaderFlatten(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{6374547 0xc00288b760}) t])
;; 
JOKER FUNC io_test.TestMultiReaderFreesExhaustedReaders has: 
;; (defn TestMultiReaderFreesExhaustedReaders
;;   {:added "1.0"
;;    :go "testMultiReaderFreesExhaustedReaders(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{6376461 0xc00288f180}) t])
;; 
JOKER FUNC io_test.TestMultiReaderSingleByteWithEOF has: 
;; (defn TestMultiReaderSingleByteWithEOF
;;   "This used to yield bytes forever; issue 16795."
;;   {:added "1.0"
;;    :go "testMultiReaderSingleByteWithEOF(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{6375780 0xc00288e6c0}) t])
;; 
JOKER FUNC io_test.TestMultiWriter has: 
;; (defn TestMultiWriter
;;   {:added "1.0"
;;    :go "testMultiWriter(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{6369763 0xc002318ee0}) t])
;; 
JOKER FUNC io_test.TestMultiWriterCopy has: 
;; (defn TestMultiWriterCopy
;;   "Test that MultiWriter copies the input slice and is insulated from future modification."
;;   {:added "1.0"
;;    :go "testMultiWriterCopy(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{6373671 0xc00288aa60}) t])
;; 
JOKER FUNC io_test.TestMultiWriterError has: 
;; (defn TestMultiWriterError
;;   {:added "1.0"
;;    :go "testMultiWriterError(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{6372778 0xc002615ca0}) t])
;; 
JOKER FUNC io_test.TestMultiWriterSingleChainFlatten has: 
;; (defn TestMultiWriterSingleChainFlatten
;;   "Test that MultiWriter properly flattens chained multiWriters,"
;;   {:added "1.0"
;;    :go "testMultiWriterSingleChainFlatten(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{6371934 0xc002615040}) t])
;; 
JOKER FUNC io_test.TestMultiWriter_String has: 
;; (defn TestMultiWriter_String
;;   {:added "1.0"
;;    :go "testMultiWriter_String(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{6369950 0xc002319220}) t])
;; 
JOKER FUNC io_test.TestMultiWriter_StringCheckCall has: 
;; (defn TestMultiWriter_StringCheckCall
;;   {:added "1.0"
;;    :go "testMultiWriter_StringCheckCall(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{6370811 0xc002319f60}) t])
;; 
JOKER FUNC io_test.TestMultiWriter_WriteStringSingleAlloc has: 
;; (defn TestMultiWriter_WriteStringSingleAlloc
;;   "test that a multiWriter.WriteString calls results in at most 1 allocation,
;; even if multiple targets don't support WriteString."
;;   {:added "1.0"
;;    :go "testMultiWriter_WriteStringSingleAlloc(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{6370185 0xc002319460}) t])
;; 
JOKER FUNC io_test.TestPipe1 has: 
;; (defn TestPipe1
;;   "Test a single read/write pair."
;;   {:added "1.0"
;;    :go "testPipe1(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{6378620 0xc0029ab260}) t])
;; 
JOKER FUNC io_test.TestPipe2 has: 
;; (defn TestPipe2
;;   "Test a sequence of read/write pairs."
;;   {:added "1.0"
;;    :go "testPipe2(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{6379222 0xc001278020}) t])
;; 
JOKER FUNC io_test.TestPipe3 has: 
;; (defn TestPipe3
;;   {:added "1.0"
;;    :go "testPipe3(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{6379918 0xc001278f80}) t])
;; 
JOKER FUNC io_test.TestPipeCloseError has: 
;; (defn TestPipeCloseError
;;   {:added "1.0"
;;    :go "testPipeCloseError(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{6384402 0xc001192760}) t])
;; 
JOKER FUNC io_test.TestPipeConcurrent has: 
;; (defn TestPipeConcurrent
;;   {:added "1.0"
;;    :go "testPipeConcurrent(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{6385112 0xc001193420}) t])
;; 
JOKER FUNC io_test.TestPipeReadClose has: 
;; (defn TestPipeReadClose
;;   {:added "1.0"
;;    :go "testPipeReadClose(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{6381634 0xc0029b10c0}) t])
;; 
JOKER FUNC io_test.TestPipeReadClose2 has: 
;; (defn TestPipeReadClose2
;;   "Test close on Read side during Read."
;;   {:added "1.0"
;;    :go "testPipeReadClose2(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{6382217 0xc0029b1c00}) t])
;; 
JOKER FUNC io_test.TestPipeWriteClose has: 
;; (defn TestPipeWriteClose
;;   {:added "1.0"
;;    :go "testPipeWriteClose(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{6382541 0xc00118c240}) t])
;; 
JOKER FUNC io_test.TestPipeWriteClose2 has: 
;; (defn TestPipeWriteClose2
;;   "Test close on Write side during Write."
;;   {:added "1.0"
;;    :go "testPipeWriteClose2(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{6383137 0xc00118cce0}) t])
;; 
JOKER FUNC io_test.TestReadAtLeast has: 
;; (defn TestReadAtLeast
;;   {:added "1.0"
;;    :go "testReadAtLeast(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{6358051 0xc0017dc520}) t])
;; 
JOKER FUNC io_test.TestReadAtLeastWithDataAndEOF has: 
;; (defn TestReadAtLeastWithDataAndEOF
;;   {:added "1.0"
;;    :go "testReadAtLeastWithDataAndEOF(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{6358474 0xc0017dcd00}) t])
;; 
JOKER FUNC io_test.TestReadAtLeastWithDataAndError has: 
;; (defn TestReadAtLeastWithDataAndError
;;   {:added "1.0"
;;    :go "testReadAtLeastWithDataAndError(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{6358596 0xc0017dcf60}) t])
;; 
JOKER FUNC io_test.TestSectionReader_ReadAt has: 
;; (defn TestSectionReader_ReadAt
;;   {:added "1.0"
;;    :go "testSectionReader_ReadAt(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{6360523 0xc001c39640}) t])
;; 
JOKER FUNC io_test.TestSectionReader_Seek has: 
;; (defn TestSectionReader_Seek
;;   {:added "1.0"
;;    :go "testSectionReader_Seek(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{6362137 0xc00183e060}) t])
;; 
JOKER FUNC io_test.TestSectionReader_Size has: 
;; (defn TestSectionReader_Size
;;   {:added "1.0"
;;    :go "testSectionReader_Size(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{6363108 0xc00183efa0}) t])
;; 
JOKER FUNC io_test.TestTeeReader has: 
;; (defn TestTeeReader
;;   {:added "1.0"
;;    :go "testTeeReader(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{6359688 0xc001c38500}) t])
;; 
JOKER FUNC io_test.TestWriteAfterWriterClose has: 
;; (defn TestWriteAfterWriterClose
;;   {:added "1.0"
;;    :go "testWriteAfterWriterClose(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{6383723 0xc00118db20}) t])
;; 
JOKER FUNC io_test.TestWriteEmpty has: 
;; (defn TestWriteEmpty
;;   {:added "1.0"
;;    :go "testWriteEmpty(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{6383415 0xc00118d2e0}) t])
;; 
JOKER FUNC io_test.TestWriteNil has: 
;; (defn TestWriteNil
;;   {:added "1.0"
;;    :go "testWriteNil(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{6383565 0xc00118d700}) t])
;; 
JOKER FUNC iotest.DataErrReader has: 
;; (defn ^ABEND881(unrecognized Expr type *ast.SelectorExpr at: &{io Reader}) DataErrReader
;;   "DataErrReader changes the way errors are handled by a Reader. Normally, a
;; Reader returns an error (typically EOF) from the first Read call after the
;; last piece of data is read. DataErrReader wraps a Reader and changes its
;; behavior so the final error is returned along with the final data, instead
;; of in the first call after the final data."
;;   {:added "1.0"
;;    :go "dataErrReader(r)"}
;;   [^ABEND881(unrecognized Expr type *ast.SelectorExpr at: &{io Reader}) r])
;; 
JOKER FUNC iotest.HalfReader has: 
;; (defn ^ABEND881(unrecognized Expr type *ast.SelectorExpr at: &{io Reader}) HalfReader
;;   "HalfReader returns a Reader that implements Read
;; by reading half as many requested bytes from r."
;;   {:added "1.0"
;;    :go "halfReader(r)"}
;;   [^ABEND881(unrecognized Expr type *ast.SelectorExpr at: &{io Reader}) r])
;; 
JOKER FUNC iotest.NewReadLogger has: 
;; (defn ^ABEND881(unrecognized Expr type *ast.SelectorExpr at: &{io Reader}) NewReadLogger
;;   "NewReadLogger returns a reader that behaves like r except
;; that it logs (using log.Printf) each read to standard error,
;; printing the prefix and the hexadecimal data read."
;;   {:added "1.0"
;;    :go "newReadLogger(prefix, r)"}
;;   [^String prefix, ^ABEND881(unrecognized Expr type *ast.SelectorExpr at: &{io Reader}) r])
;; 
JOKER FUNC iotest.NewWriteLogger has: 
;; (defn ^ABEND881(unrecognized Expr type *ast.SelectorExpr at: &{io Writer}) NewWriteLogger
;;   "NewWriteLogger returns a writer that behaves like w except
;; that it logs (using log.Printf) each write to standard error,
;; printing the prefix and the hexadecimal data written."
;;   {:added "1.0"
;;    :go "newWriteLogger(prefix, w)"}
;;   [^String prefix, ^ABEND881(unrecognized Expr type *ast.SelectorExpr at: &{io Writer}) w])
;; 
JOKER FUNC iotest.OneByteReader has: 
;; (defn ^ABEND881(unrecognized Expr type *ast.SelectorExpr at: &{io Reader}) OneByteReader
;;   "OneByteReader returns a Reader that implements
;; each non-empty Read by reading one byte from r."
;;   {:added "1.0"
;;    :go "oneByteReader(r)"}
;;   [^ABEND881(unrecognized Expr type *ast.SelectorExpr at: &{io Reader}) r])
;; 
JOKER FUNC iotest.TimeoutReader has: 
;; (defn ^ABEND881(unrecognized Expr type *ast.SelectorExpr at: &{io Reader}) TimeoutReader
;;   "TimeoutReader returns ErrTimeout on the second read
;; with no data. Subsequent calls to read succeed."
;;   {:added "1.0"
;;    :go "timeoutReader(r)"}
;;   [^ABEND881(unrecognized Expr type *ast.SelectorExpr at: &{io Reader}) r])
;; 
JOKER FUNC iotest.TruncateWriter has: 
;; (defn ^ABEND881(unrecognized Expr type *ast.SelectorExpr at: &{io Writer}) TruncateWriter
;;   "TruncateWriter returns a Writer that writes to w
;; but stops silently after n bytes."
;;   {:added "1.0"
;;    :go "truncateWriter(w, n)"}
;;   [^ABEND881(unrecognized Expr type *ast.SelectorExpr at: &{io Writer}) w, n])
;; 
JOKER FUNC ioutil.NopCloser has: 
;; (defn ^ABEND881(unrecognized Expr type *ast.SelectorExpr at: &{io ReadCloser}) NopCloser
;;   "NopCloser returns a ReadCloser with a no-op Close method wrapping
;; the provided Reader r."
;;   {:added "1.0"
;;    :go "nopCloser(r)"}
;;   [^ABEND881(unrecognized Expr type *ast.SelectorExpr at: &{io Reader}) r])
;; 
JOKER FUNC ioutil.ReadAll has: 
;; (defn ^[[ABEND042(cannot find typename ioutil.byte)] Error] ReadAll
;;   "ReadAll reads from r until an error or EOF and returns the data it read.
;; A successful call returns err == nil, not err == EOF. Because ReadAll is
;; defined to read from src until EOF, it does not treat an EOF from Read
;; as an error to be reported."
;;   {:added "1.0"
;;    :go "readAll(r)"}
;;   [^ABEND881(unrecognized Expr type *ast.SelectorExpr at: &{io Reader}) r])
;; 
JOKER FUNC ioutil.ReadDir has: 
;; (defn ^[[ABEND881(unrecognized Expr type *ast.SelectorExpr at: &{os FileInfo})] Error] ReadDir
;;   "ReadDir reads the directory named by dirname and returns
;; a list of directory entries sorted by filename."
;;   {:added "1.0"
;;    :go "readDir(dirname)"}
;;   [^String dirname])
;; 
JOKER FUNC ioutil.ReadFile has: 
;; (defn ^[[ABEND042(cannot find typename ioutil.byte)] Error] ReadFile
;;   "ReadFile reads the file named by filename and returns the contents.
;; A successful call returns err == nil, not err == EOF. Because ReadFile
;; reads the whole file, it does not treat an EOF from Read as an error
;; to be reported."
;;   {:added "1.0"
;;    :go "readFile(filename)"}
;;   [^String filename])
;; 
JOKER FUNC ioutil.TempDir has: 
(defn ^[name err] TempDir
  "TempDir creates a new temporary directory in the directory dir
with a name beginning with prefix and returns the path of the
new directory. If dir is the empty string, TempDir uses the
default directory for temporary files (see os.TempDir).
Multiple programs calling TempDir simultaneously
will not choose the same directory. It is the caller's responsibility
to remove the directory when no longer needed."
  {:added "1.0"
   :go "tempDir(dir, prefix)"}
  [^String dir, ^String prefix])

JOKER FUNC ioutil.TempFile has: 
(defn ^[f err] TempFile
  "TempFile creates a new temporary file in the directory dir,
opens the file for reading and writing, and returns the resulting *os.File.
The filename is generated by taking pattern and adding a random
string to the end. If pattern includes a "*", the random string
replaces the last "*".
If dir is the empty string, TempFile uses the default directory
for temporary files (see os.TempDir).
Multiple programs calling TempFile simultaneously
will not choose the same file. The caller can use f.Name()
to find the pathname of the file. It is the caller's responsibility
to remove the file when no longer needed."
  {:added "1.0"
   :go "tempFile(dir, pattern)"}
  [^String dir, ^String pattern])

JOKER FUNC ioutil.TestReadDir has: 
;; (defn TestReadDir
;;   {:added "1.0"
;;    :go "testReadDir(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{6403419 0xc0022e63a0}) t])
;; 
JOKER FUNC ioutil.TestReadFile has: 
;; (defn TestReadFile
;;   {:added "1.0"
;;    :go "testReadFile(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{6402306 0xc0028d73a0}) t])
;; 
JOKER FUNC ioutil.TestTempDir has: 
;; (defn TestTempDir
;;   {:added "1.0"
;;    :go "testTempDir(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{6393372 0xc001bf9de0}) t])
;; 
JOKER FUNC ioutil.TestTempDir_BadDir has: 
;; (defn TestTempDir_BadDir
;;   "test that we return a nice error message if the dir argument to TempDir doesn't
;; exist (or that it's empty and os.TempDir doesn't exist)"
;;   {:added "1.0"
;;    :go "testTempDir_BadDir(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{6394106 0xc0026288a0}) t])
;; 
JOKER FUNC ioutil.TestTempFile has: 
;; (defn TestTempFile
;;   {:added "1.0"
;;    :go "testTempFile(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{6392341 0xc001bf89e0}) t])
;; 
JOKER FUNC ioutil.TestTempFile_pattern has: 
;; (defn TestTempFile_pattern
;;   {:added "1.0"
;;    :go "testTempFile_pattern(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{6392691 0xc001bf90a0}) t])
;; 
JOKER FUNC ioutil.TestWriteFile has: 
;; (defn TestWriteFile
;;   {:added "1.0"
;;    :go "testWriteFile(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{6402674 0xc0028d7960}) t])
;; 
JOKER FUNC ioutil.WriteFile has: 
;; (defn ^Error WriteFile
;;   "WriteFile writes data to a file named by filename.
;; If the file does not exist, WriteFile creates it with permissions perm;
;; otherwise WriteFile truncates it before writing."
;;   {:added "1.0"
;;    :go "writeFile(filename, data, perm)"}
;;   [^String filename, ^ABEND881(unrecognized Expr type *ast.ArrayType at: &{6400038 <nil> byte}) data, ^ABEND881(unrecognized Expr type *ast.SelectorExpr at: &{os FileMode}) perm])
;; 
JOKER FUNC ioutil_test.ExampleReadAll has: 
;; (defn ExampleReadAll
;;   {:added "1.0"
;;    :go "exampleReadAll()"}
;;   [])
;; 
JOKER FUNC ioutil_test.ExampleReadDir has: 
;; (defn ExampleReadDir
;;   {:added "1.0"
;;    :go "exampleReadDir()"}
;;   [])
;; 
JOKER FUNC ioutil_test.ExampleReadFile has: 
;; (defn ExampleReadFile
;;   {:added "1.0"
;;    :go "exampleReadFile()"}
;;   [])
;; 
JOKER FUNC ioutil_test.ExampleTempDir has: 
;; (defn ExampleTempDir
;;   {:added "1.0"
;;    :go "exampleTempDir()"}
;;   [])
;; 
JOKER FUNC ioutil_test.ExampleTempFile has: 
;; (defn ExampleTempFile
;;   {:added "1.0"
;;    :go "exampleTempFile()"}
;;   [])
;; 
JOKER FUNC ioutil_test.ExampleTempFile_suffix has: 
;; (defn ExampleTempFile_suffix
;;   {:added "1.0"
;;    :go "exampleTempFile_suffix()"}
;;   [])
;; 
JOKER FUNC jpeg.BenchmarkDecodeBaseline has: 
;; (defn BenchmarkDecodeBaseline
;;   {:added "1.0"
;;    :go "benchmarkDecodeBaseline(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{6176513 0xc0013cd740}) b])
;; 
JOKER FUNC jpeg.BenchmarkDecodeProgressive has: 
;; (defn BenchmarkDecodeProgressive
;;   {:added "1.0"
;;    :go "benchmarkDecodeProgressive(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{6176614 0xc0013cd8a0}) b])
;; 
JOKER FUNC jpeg.BenchmarkEncodeRGBA has: 
;; (defn BenchmarkEncodeRGBA
;;   {:added "1.0"
;;    :go "benchmarkEncodeRGBA(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{6141494 0xc002977da0}) b])
;; 
JOKER FUNC jpeg.BenchmarkEncodeYCbCr has: 
;; (defn BenchmarkEncodeYCbCr
;;   {:added "1.0"
;;    :go "benchmarkEncodeYCbCr(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{6142026 0xc00298ec60}) b])
;; 
JOKER FUNC jpeg.BenchmarkFDCT has: 
;; (defn BenchmarkFDCT
;;   {:added "1.0"
;;    :go "benchmarkFDCT(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{6177200 0xc000d2e240}) b])
;; 
JOKER FUNC jpeg.BenchmarkIDCT has: 
;; (defn BenchmarkIDCT
;;   {:added "1.0"
;;    :go "benchmarkIDCT(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{6177261 0xc000d2e3a0}) b])
;; 
JOKER FUNC jpeg.Decode has: 
;; (defn ^[ABEND881(unrecognized Expr type *ast.SelectorExpr at: &{image Image}) Error] Decode
;;   "Decode reads a JPEG image from r and returns it as an image.Image."
;;   {:added "1.0"
;;    :go "decode(r)"}
;;   [^ABEND881(unrecognized Expr type *ast.SelectorExpr at: &{io Reader}) r])
;; 
JOKER FUNC jpeg.DecodeConfig has: 
;; (defn ^[ABEND881(unrecognized Expr type *ast.SelectorExpr at: &{image Config}) Error] DecodeConfig
;;   "DecodeConfig returns the color model and dimensions of a JPEG image without
;; decoding the entire image."
;;   {:added "1.0"
;;    :go "decodeConfig(r)"}
;;   [^ABEND881(unrecognized Expr type *ast.SelectorExpr at: &{io Reader}) r])
;; 
JOKER FUNC jpeg.Encode has: 
;; (defn ^Error Encode
;;   "Encode writes the Image m to w in JPEG 4:2:0 baseline format with the given
;; options. Default parameters are used if a nil *Options is passed."
;;   {:added "1.0"
;;    :go "encode(w, m, o)"}
;;   [^ABEND881(unrecognized Expr type *ast.SelectorExpr at: &{io Writer}) w, ^ABEND881(unrecognized Expr type *ast.SelectorExpr at: &{image Image}) m, ^ABEND881(unrecognized Expr type *ast.StarExpr at: &{6215991 Options}) o])
;; 
JOKER FUNC jpeg.TestDCT has: 
;; (defn TestDCT
;;   {:added "1.0"
;;    :go "testDCT(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{6177316 0xc000d2e500}) t])
;; 
JOKER FUNC jpeg.TestDecodeEOF has: 
;; (defn TestDecodeEOF
;;   {:added "1.0"
;;    :go "testDecodeEOF(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{6168743 0xc0014c5d40}) t])
;; 
JOKER FUNC jpeg.TestDecodeProgressive has: 
;; (defn TestDecodeProgressive
;;   "TestDecodeProgressive tests that decoding the baseline and progressive
;; versions of the same image result in exactly the same pixel data, in YCbCr
;; space for color images, and Y space for grayscale images."
;;   {:added "1.0"
;;    :go "testDecodeProgressive(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{6166383 0xc001502f00}) t])
;; 
JOKER FUNC jpeg.TestEncodeYCbCr has: 
;; (defn TestEncodeYCbCr
;;   {:added "1.0"
;;    :go "testEncodeYCbCr(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{6140474 0xc002976720}) t])
;; 
JOKER FUNC jpeg.TestExtraneousData has: 
;; (defn TestExtraneousData
;;   {:added "1.0"
;;    :go "testExtraneousData(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{6174219 0xc0013c5100}) t])
;; 
JOKER FUNC jpeg.TestLargeImageWithShortData has: 
;; (defn TestLargeImageWithShortData
;;   {:added "1.0"
;;    :go "testLargeImageWithShortData(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{6171227 0xc0013c45e0}) t])
;; 
JOKER FUNC jpeg.TestTruncatedSOSDataDoesntPanic has: 
;; (defn TestTruncatedSOSDataDoesntPanic
;;   {:added "1.0"
;;    :go "testTruncatedSOSDataDoesntPanic(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{6170837 0xc0009c9e40}) t])
;; 
JOKER FUNC jpeg.TestUnscaledQuant has: 
;; (defn TestUnscaledQuant
;;   {:added "1.0"
;;    :go "testUnscaledQuant(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{6137043 0xc0028c6340}) t])
;; 
JOKER FUNC jpeg.TestWriteGrayscale has: 
;; (defn TestWriteGrayscale
;;   "TestWriteGrayscale tests that a grayscale images survives a round-trip
;; through encode/decode cycle."
;;   {:added "1.0"
;;    :go "testWriteGrayscale(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{6139341 0xc002964ca0}) t])
;; 
JOKER FUNC jpeg.TestWriter has: 
;; (defn TestWriter
;;   {:added "1.0"
;;    :go "testWriter(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{6138425 0xc0028c7c40}) t])
;; 
JOKER FUNC jpeg.TestZigUnzig has: 
;; (defn TestZigUnzig
;;   {:added "1.0"
;;    :go "testZigUnzig(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{6135978 0xc002898c40}) t])
;; 
JOKER FUNC json.BenchmarkCodeDecoder has: 
;; (defn BenchmarkCodeDecoder
;;   {:added "1.0"
;;    :go "benchmarkCodeDecoder(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{3651828 0xc001bd3520}) b])
;; 
JOKER FUNC json.BenchmarkCodeEncoder has: 
;; (defn BenchmarkCodeEncoder
;;   {:added "1.0"
;;    :go "benchmarkCodeEncoder(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{3651195 0xc001bd27e0}) b])
;; 
JOKER FUNC json.BenchmarkCodeMarshal has: 
;; (defn BenchmarkCodeMarshal
;;   {:added "1.0"
;;    :go "benchmarkCodeMarshal(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{3651529 0xc001bd2ee0}) b])
;; 
JOKER FUNC json.BenchmarkCodeUnmarshal has: 
;; (defn BenchmarkCodeUnmarshal
;;   {:added "1.0"
;;    :go "benchmarkCodeUnmarshal(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{3653126 0xc001bdb240}) b])
;; 
JOKER FUNC json.BenchmarkCodeUnmarshalReuse has: 
;; (defn BenchmarkCodeUnmarshalReuse
;;   {:added "1.0"
;;    :go "benchmarkCodeUnmarshalReuse(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{3653456 0xc001bdb8e0}) b])
;; 
JOKER FUNC json.BenchmarkDecoderStream has: 
;; (defn BenchmarkDecoderStream
;;   {:added "1.0"
;;    :go "benchmarkDecoderStream(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{3652601 0xc001bda6a0}) b])
;; 
JOKER FUNC json.BenchmarkEncoderEncode has: 
;; (defn BenchmarkEncoderEncode
;;   {:added "1.0"
;;    :go "benchmarkEncoderEncode(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{3790305 0xc001dc97c0}) b])
;; 
JOKER FUNC json.BenchmarkIssue10335 has: 
;; (defn BenchmarkIssue10335
;;   {:added "1.0"
;;    :go "benchmarkIssue10335(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{3654510 0xc001be0e00}) b])
;; 
JOKER FUNC json.BenchmarkNumberIsValid has: 
;; (defn BenchmarkNumberIsValid
;;   {:added "1.0"
;;    :go "benchmarkNumberIsValid(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{3702283 0xc001c92f40}) b])
;; 
JOKER FUNC json.BenchmarkNumberIsValidRegexp has: 
;; (defn BenchmarkNumberIsValidRegexp
;;   {:added "1.0"
;;    :go "benchmarkNumberIsValidRegexp(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{3702414 0xc001c931c0}) b])
;; 
JOKER FUNC json.BenchmarkTypeFieldsCache has: 
;; (defn BenchmarkTypeFieldsCache
;;   {:added "1.0"
;;    :go "benchmarkTypeFieldsCache(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{3655035 0xc001be1840}) b])
;; 
JOKER FUNC json.BenchmarkUnicodeDecoder has: 
;; (defn BenchmarkUnicodeDecoder
;;   {:added "1.0"
;;    :go "benchmarkUnicodeDecoder(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{3652297 0xc001bd3f40}) b])
;; 
JOKER FUNC json.BenchmarkUnmapped has: 
;; (defn BenchmarkUnmapped
;;   {:added "1.0"
;;    :go "benchmarkUnmapped(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{3654743 0xc001be1320}) b])
;; 
JOKER FUNC json.BenchmarkUnmarshalFloat64 has: 
;; (defn BenchmarkUnmarshalFloat64
;;   {:added "1.0"
;;    :go "benchmarkUnmarshalFloat64(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{3654049 0xc001be0400}) b])
;; 
JOKER FUNC json.BenchmarkUnmarshalInt64 has: 
;; (defn BenchmarkUnmarshalInt64
;;   {:added "1.0"
;;    :go "benchmarkUnmarshalInt64(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{3654284 0xc001be0900}) b])
;; 
JOKER FUNC json.BenchmarkUnmarshalString has: 
;; (defn BenchmarkUnmarshalString
;;   {:added "1.0"
;;    :go "benchmarkUnmarshalString(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{3653803 0xc001bdbf00}) b])
;; 
JOKER FUNC json.Compact has: 
;; (defn ^Error Compact
;;   "Compact appends to dst the JSON-encoded src with
;; insignificant space characters elided."
;;   {:added "1.0"
;;    :go "compact(dst, src)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{3807981 0xc001e01980}) dst, ^ABEND881(unrecognized Expr type *ast.ArrayType at: &{3808000 <nil> byte}) src])
;; 
JOKER FUNC json.HTMLEscape has: 
;; (defn HTMLEscape
;;   "HTMLEscape appends to dst the JSON-encoded src with <, >, &, U+2028 and U+2029
;; characters inside string literals changed to \u003c, \u003e, \u0026, \u2028, \u2029
;; so that the JSON will be safe to embed inside HTML <script> tags.
;; For historical reasons, web browsers don't honor standard HTML
;; escaping within <script> tags, so an alternative JSON encoding must
;; be used."
;;   {:added "1.0"
;;    :go "hTMLEscape(dst, src)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{3622559 0xc001b5f1a0}) dst, ^ABEND881(unrecognized Expr type *ast.ArrayType at: &{3622578 <nil> byte}) src])
;; 
JOKER FUNC json.Indent has: 
;; (defn ^Error Indent
;;   "Indent appends to dst an indented form of the JSON-encoded src.
;; Each element in a JSON object or array begins on a new,
;; indented line beginning with prefix followed by one or more
;; copies of indent according to the indentation nesting.
;; The data appended to dst does not begin with the prefix nor
;; any indentation, to make it easier to embed inside other formatted JSON data.
;; Although leading space characters (space, tab, carriage return, newline)
;; at the beginning of src are dropped, trailing space characters
;; at the end of src are preserved and copied to dst.
;; For example, if src has no trailing spaces, neither will dst;
;; if src ends in a trailing newline, so will dst."
;;   {:added "1.0"
;;    :go "indent(dst, src, prefix, indent)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{3809888 0xc001e0d520}) dst, ^ABEND881(unrecognized Expr type *ast.ArrayType at: &{3809907 <nil> byte}) src, ^String prefix, ^String indent])
;; 
JOKER FUNC json.Marshal has: 
;; (defn ^[[ABEND042(cannot find typename json.byte)] Error] Marshal
;;   "Marshal returns the JSON encoding of v.
;; 
;; Marshal traverses the value v recursively.
;; If an encountered value implements the Marshaler interface
;; and is not a nil pointer, Marshal calls its MarshalJSON method
;; to produce JSON. If no MarshalJSON method is present but the
;; value implements encoding.TextMarshaler instead, Marshal calls
;; its MarshalText method and encodes the result as a JSON string.
;; The nil pointer exception is not strictly necessary
;; but mimics a similar, necessary exception in the behavior of
;; UnmarshalJSON.
;; 
;; Otherwise, Marshal uses the following type-dependent default encodings:
;; 
;; Boolean values encode as JSON booleans.
;; 
;; Floating point, integer, and Number values encode as JSON numbers.
;; 
;; String values encode as JSON strings coerced to valid UTF-8,
;; replacing invalid bytes with the Unicode replacement rune.
;; The angle brackets "<" and ">" are escaped to "\u003c" and "\u003e"
;; to keep some browsers from misinterpreting JSON output as HTML.
;; Ampersand "&" is also escaped to "\u0026" for the same reason.
;; This escaping can be disabled using an Encoder that had SetEscapeHTML(false)
;; called on it.
;; 
;; Array and slice values encode as JSON arrays, except that
;; []byte encodes as a base64-encoded string, and a nil slice
;; encodes as the null JSON value.
;; 
;; Struct values encode as JSON objects.
;; Each exported struct field becomes a member of the object, using the
;; field name as the object key, unless the field is omitted for one of the
;; reasons given below.
;; 
;; The encoding of each struct field can be customized by the format string
;; stored under the "json" key in the struct field's tag.
;; The format string gives the name of the field, possibly followed by a
;; comma-separated list of options. The name may be empty in order to
;; specify options without overriding the default field name.
;; 
;; The "omitempty" option specifies that the field should be omitted
;; from the encoding if the field has an empty value, defined as
;; false, 0, a nil pointer, a nil interface value, and any empty array,
;; slice, map, or string.
;; 
;; As a special case, if the field tag is "-", the field is always omitted.
;; Note that a field with name "-" can still be generated using the tag "-,".
;; 
;; Examples of struct field tags and their meanings:
;; 
;;   // Field appears in JSON as key "myName".
;;   Field int `json:"myName"`
;; 
;;   // Field appears in JSON as key "myName" and
;;   // the field is omitted from the object if its value is empty,
;;   // as defined above.
;;   Field int `json:"myName,omitempty"`
;; 
;;   // Field appears in JSON as key "Field" (the default), but
;;   // the field is skipped if empty.
;;   // Note the leading comma.
;;   Field int `json:",omitempty"`
;; 
;;   // Field is ignored by this package.
;;   Field int `json:"-"`
;; 
;;   // Field appears in JSON as key "-".
;;   Field int `json:"-,"`
;; 
;; The "string" option signals that a field is stored as JSON inside a
;; JSON-encoded string. It applies only to fields of string, floating point,
;; integer, or boolean types. This extra level of encoding is sometimes used
;; when communicating with JavaScript programs:
;; 
;;    Int64String int64 `json:",string"`
;; 
;; The key name will be used if it's a non-empty string consisting of
;; only Unicode letters, digits, and ASCII punctuation except quotation
;; marks, backslash, and comma.
;; 
;; Anonymous struct fields are usually marshaled as if their inner exported fields
;; were fields in the outer struct, subject to the usual Go visibility rules amended
;; as described in the next paragraph.
;; An anonymous struct field with a name given in its JSON tag is treated as
;; having that name, rather than being anonymous.
;; An anonymous struct field of interface type is treated the same as having
;; that type as its name, rather than being anonymous.
;; 
;; The Go visibility rules for struct fields are amended for JSON when
;; deciding which field to marshal or unmarshal. If there are
;; multiple fields at the same level, and that level is the least
;; nested (and would therefore be the nesting level selected by the
;; usual Go rules), the following extra rules apply:
;; 
;; 1) Of those fields, if any are JSON-tagged, only tagged fields are considered,
;; even if there are multiple untagged fields that would otherwise conflict.
;; 
;; 2) If there is exactly one field (tagged or not according to the first rule), that is selected.
;; 
;; 3) Otherwise there are multiple fields, and all are ignored; no error occurs.
;; 
;; Handling of anonymous struct fields is new in Go 1.1.
;; Prior to Go 1.1, anonymous struct fields were ignored. To force ignoring of
;; an anonymous struct field in both current and earlier versions, give the field
;; a JSON tag of "-".
;; 
;; Map values encode as JSON objects. The map's key type must either be a
;; string, an integer type, or implement encoding.TextMarshaler. The map keys
;; are sorted and used as JSON object keys by applying the following rules,
;; subject to the UTF-8 coercion described for string values above:
;;   - string keys are used directly
;;   - encoding.TextMarshalers are marshaled
;;   - integer keys are converted to strings
;; 
;; Pointer values encode as the value pointed to.
;; A nil pointer encodes as the null JSON value.
;; 
;; Interface values encode as the value contained in the interface.
;; A nil interface value encodes as the null JSON value.
;; 
;; Channel, complex, and function values cannot be encoded in JSON.
;; Attempting to encode such a value causes Marshal to return
;; an UnsupportedTypeError.
;; 
;; JSON cannot represent cyclic data structures and Marshal does not
;; handle them. Passing cyclic structures to Marshal will result in
;; an infinite recursion."
;;   {:added "1.0"
;;    :go "marshal(v)"}
;;   [^ABEND881(unrecognized Expr type *ast.InterfaceType at: &{3621412 0xc001b39f20 false}) v])
;; 
JOKER FUNC json.MarshalIndent has: 
;; (defn ^[[ABEND042(cannot find typename json.byte)] Error] MarshalIndent
;;   "MarshalIndent is like Marshal but applies Indent to format the output.
;; Each JSON element in the output will begin on a new line beginning with prefix
;; followed by one or more copies of indent according to the indentation nesting."
;;   {:added "1.0"
;;    :go "marshalIndent(v, prefix, indent)"}
;;   [^ABEND881(unrecognized Expr type *ast.InterfaceType at: &{3621911 0xc001b601e0 false}) v, ^String prefix, ^String indent])
;; 
JOKER FUNC json.NewDecoder has: 
;; (defn ^{:r ^ABEND881(unrecognized Expr type *ast.SelectorExpr at: &{io Reader}) r, :buf ^ABEND881(unrecognized Expr type *ast.ArrayType at: &{3795262 <nil> byte}) buf, :d d, :scanp ^Int scanp, :scanned scanned, :scan scan, :err err, :tokenstate ^Int tokenState, :tokenstack ^ABEND881(unrecognized Expr type *ast.ArrayType at: &{3795446 <nil> int}) tokenStack} NewDecoder
;;   "NewDecoder returns a new decoder that reads from r.
;; 
;; The decoder introduces its own buffering and may
;; read data from r beyond the JSON values requested."
;;   {:added "1.0"
;;    :go "newDecoder(r)"}
;;   [^ABEND881(unrecognized Expr type *ast.SelectorExpr at: &{io Reader}) r])
;; 
JOKER FUNC json.NewEncoder has: 
;; (defn ^{:w ^ABEND881(unrecognized Expr type *ast.SelectorExpr at: &{io Writer}) w, :err err, :escapehtml escapeHTML, :indentbuf ^ABEND881(unrecognized Expr type *ast.StarExpr at: &{3799350 0xc001dea7e0}) indentBuf, :indentprefix ^String indentPrefix, :indentvalue ^String indentValue} NewEncoder
;;   "NewEncoder returns a new encoder that writes to w."
;;   {:added "1.0"
;;    :go "newEncoder(w)"}
;;   [^ABEND881(unrecognized Expr type *ast.SelectorExpr at: &{io Writer}) w])
;; 
JOKER FUNC json.TestAnonymousFields has: 
;; (defn TestAnonymousFields
;;   {:added "1.0"
;;    :go "testAnonymousFields(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{3816402 0xc001e2d740}) t])
;; 
JOKER FUNC json.TestBlocking has: 
;; (defn TestBlocking
;;   {:added "1.0"
;;    :go "testBlocking(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{3789923 0xc001dc9160}) t])
;; 
JOKER FUNC json.TestByteKind has: 
;; (defn TestByteKind
;;   "Custom types with []byte as underlying type could not be marshaled
;; and then unmarshaled.
;; Issue 8962."
;;   {:added "1.0"
;;    :go "testByteKind(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{3748529 0xc001d29880}) t])
;; 
JOKER FUNC json.TestCompact has: 
;; (defn TestCompact
;;   {:added "1.0"
;;    :go "testCompact(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{3774723 0xc001d87ce0}) t])
;; 
JOKER FUNC json.TestCompactBig has: 
;; (defn TestCompactBig
;;   {:added "1.0"
;;    :go "testCompactBig(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{3776494 0xc001d920c0}) t])
;; 
JOKER FUNC json.TestCompactSeparators has: 
;; (defn TestCompactSeparators
;;   {:added "1.0"
;;    :go "testCompactSeparators(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{3775322 0xc001d909c0}) t])
;; 
JOKER FUNC json.TestDecodeInStream has: 
;; (defn TestDecodeInStream
;;   {:added "1.0"
;;    :go "testDecodeInStream(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{3793346 0xc001dda600}) t])
;; 
JOKER FUNC json.TestDecoder has: 
;; (defn TestDecoder
;;   {:added "1.0"
;;    :go "testDecoder(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{3787234 0xc001dc42c0}) t])
;; 
JOKER FUNC json.TestDecoderBuffered has: 
;; (defn TestDecoderBuffered
;;   {:added "1.0"
;;    :go "testDecoderBuffered(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{3788105 0xc001dc5040}) t])
;; 
JOKER FUNC json.TestDuplicatedFieldDisappears has: 
;; (defn TestDuplicatedFieldDisappears
;;   {:added "1.0"
;;    :go "testDuplicatedFieldDisappears(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{3822502 0xc001e47000}) t])
;; 
JOKER FUNC json.TestEmbeddedBug has: 
;; (defn TestEmbeddedBug
;;   "Issue 5245."
;;   {:added "1.0"
;;    :go "testEmbeddedBug(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{3821327 0xc001e39e60}) t])
;; 
JOKER FUNC json.TestEmptyString has: 
;; (defn TestEmptyString
;;   "Test that the empty string doesn't panic decoding when ,string is specified
;; Issue 3450"
;;   {:added "1.0"
;;    :go "testEmptyString(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{3740188 0xc001d14840}) t])
;; 
JOKER FUNC json.TestEncodeBytekind has: 
;; (defn TestEncodeBytekind
;;   "Issue 13783"
;;   {:added "1.0"
;;    :go "testEncodeBytekind(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{3826702 0xc001e53c00}) t])
;; 
JOKER FUNC json.TestEncodePointerString has: 
;; (defn TestEncodePointerString
;;   "golang.org/issue/8582"
;;   {:added "1.0"
;;    :go "testEncodePointerString(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{3824521 0xc001e4f2e0}) t])
;; 
JOKER FUNC json.TestEncodeRenamedByteSlice has: 
;; (defn TestEncodeRenamedByteSlice
;;   {:added "1.0"
;;    :go "testEncodeRenamedByteSlice(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{3813530 0xc001e1c820}) t])
;; 
JOKER FUNC json.TestEncodeString has: 
;; (defn TestEncodeString
;;   {:added "1.0"
;;    :go "testEncodeString(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{3825856 0xc001e52aa0}) t])
;; 
JOKER FUNC json.TestEncoder has: 
;; (defn TestEncoder
;;   {:added "1.0"
;;    :go "testEncoder(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{3785307 0xc001db3f80}) t])
;; 
JOKER FUNC json.TestEncoderIndent has: 
;; (defn TestEncoderIndent
;;   {:added "1.0"
;;    :go "testEncoderIndent(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{3785981 0xc001dbeaa0}) t])
;; 
JOKER FUNC json.TestEncoderSetEscapeHTML has: 
;; (defn TestEncoderSetEscapeHTML
;;   {:added "1.0"
;;    :go "testEncoderSetEscapeHTML(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{3786302 0xc001dbf140}) t])
;; 
JOKER FUNC json.TestErrorMessageFromMisusedString has: 
;; (defn TestErrorMessageFromMisusedString
;;   "If people misuse the ,string modifier, the error message should be
;; helpful, telling the user that they're doing it wrong."
;;   {:added "1.0"
;;    :go "testErrorMessageFromMisusedString(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{3734173 0xc001d08600}) t])
;; 
JOKER FUNC json.TestEscape has: 
;; (defn TestEscape
;;   {:added "1.0"
;;    :go "testEscape(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{3733023 0xc001cffd40}) t])
;; 
JOKER FUNC json.TestFold has: 
;; (defn TestFold
;;   {:added "1.0"
;;    :go "testFold(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{3613152 0xc001b42cc0}) t])
;; 
JOKER FUNC json.TestFoldAgainstUnicode has: 
;; (defn TestFoldAgainstUnicode
;;   {:added "1.0"
;;    :go "testFoldAgainstUnicode(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{3613503 0xc001b43540}) t])
;; 
JOKER FUNC json.TestHTMLEscape has: 
;; (defn TestHTMLEscape
;;   {:added "1.0"
;;    :go "testHTMLEscape(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{3824111 0xc001e4ec60}) t])
;; 
JOKER FUNC json.TestHTTPDecoding has: 
;; (defn TestHTTPDecoding
;;   "Test from golang.org/issue/11893"
;;   {:added "1.0"
;;    :go "testHTTPDecoding(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{3794298 0xc001ddb740}) t])
;; 
JOKER FUNC json.TestIndent has: 
;; (defn TestIndent
;;   {:added "1.0"
;;    :go "testIndent(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{3775852 0xc001d91320}) t])
;; 
JOKER FUNC json.TestIndentBig has: 
;; (defn TestIndentBig
;;   {:added "1.0"
;;    :go "testIndentBig(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{3776771 0xc001d926e0}) t])
;; 
JOKER FUNC json.TestIndentErrors has: 
;; (defn TestIndentErrors
;;   {:added "1.0"
;;    :go "testIndentErrors(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{3777947 0xc001d93a40}) t])
;; 
JOKER FUNC json.TestInterfaceSet has: 
;; (defn TestInterfaceSet
;;   {:added "1.0"
;;    :go "testInterfaceSet(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{3741678 0xc001d1a520}) t])
;; 
JOKER FUNC json.TestInvalidStringOption has: 
;; (defn TestInvalidStringOption
;;   "Test that string option is ignored for invalid types.
;; Issue 9812."
;;   {:added "1.0"
;;    :go "testInvalidStringOption(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{3754057 0xc001d3d380}) t])
;; 
JOKER FUNC json.TestInvalidUnmarshal has: 
;; (defn TestInvalidUnmarshal
;;   {:added "1.0"
;;    :go "testInvalidUnmarshal(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{3753021 0xc001d3c3c0}) t])
;; 
JOKER FUNC json.TestInvalidUnmarshalText has: 
;; (defn TestInvalidUnmarshalText
;;   {:added "1.0"
;;    :go "testInvalidUnmarshalText(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{3753651 0xc001d3cd00}) t])
;; 
JOKER FUNC json.TestIssue10281 has: 
;; (defn TestIssue10281
;;   {:added "1.0"
;;    :go "testIssue10281(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{3823919 0xc001e4e8a0}) t])
;; 
JOKER FUNC json.TestLargeByteSlice has: 
;; (defn TestLargeByteSlice
;;   {:added "1.0"
;;    :go "testLargeByteSlice(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{3732166 0xc001cfeb60}) t])
;; 
JOKER FUNC json.TestMarshal has: 
;; (defn TestMarshal
;;   {:added "1.0"
;;    :go "testMarshal(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{3726638 0xc001cf0760}) t])
;; 
JOKER FUNC json.TestMarshalBadUTF8 has: 
;; (defn TestMarshalBadUTF8
;;   {:added "1.0"
;;    :go "testMarshalBadUTF8(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{3727369 0xc001cf1280}) t])
;; 
JOKER FUNC json.TestMarshalEmbeds has: 
;; (defn TestMarshalEmbeds
;;   {:added "1.0"
;;    :go "testMarshalEmbeds(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{3727813 0xc001cf1b80}) t])
;; 
JOKER FUNC json.TestMarshalFloat has: 
;; (defn TestMarshalFloat
;;   {:added "1.0"
;;    :go "testMarshalFloat(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{3829176 0xc001e5db60}) t])
;; 
JOKER FUNC json.TestMarshalNumberZeroVal has: 
;; (defn TestMarshalNumberZeroVal
;;   {:added "1.0"
;;    :go "testMarshalNumberZeroVal(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{3727598 0xc001cf1780}) t])
;; 
JOKER FUNC json.TestMarshalPanic has: 
;; (defn TestMarshalPanic
;;   {:added "1.0"
;;    :go "testMarshalPanic(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{3834717 0xc001e6fd40}) t])
;; 
JOKER FUNC json.TestMarshalRawMessageValue has: 
;; (defn TestMarshalRawMessageValue
;;   {:added "1.0"
;;    :go "testMarshalRawMessageValue(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{3830987 0xc001e67ea0}) t])
;; 
JOKER FUNC json.TestMarshalerEscaping has: 
;; (defn TestMarshalerEscaping
;;   {:added "1.0"
;;    :go "testMarshalerEscaping(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{3815931 0xc001e2cf00}) t])
;; 
JOKER FUNC json.TestNilMarshal has: 
;; (defn TestNilMarshal
;;   "Issue 16042."
;;   {:added "1.0"
;;    :go "testNilMarshal(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{3820526 0xc001e38ec0}) t])
;; 
JOKER FUNC json.TestNullRawMessage has: 
;; (defn TestNullRawMessage
;;   {:added "1.0"
;;    :go "testNullRawMessage(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{3789321 0xc001dc8780}) t])
;; 
JOKER FUNC json.TestNullString has: 
;; (defn TestNullString
;;   "Test that a null for ,string is not replaced with the previous quoted string (issue 7046).
;; It should also not be an error (issue 2540, issue 8587)."
;;   {:added "1.0"
;;    :go "testNullString(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{3740712 0xc001d14e60}) t])
;; 
JOKER FUNC json.TestNumberAccessors has: 
;; (defn TestNumberAccessors
;;   "Independent of Decode, basic coverage of the accessors in Number"
;;   {:added "1.0"
;;    :go "testNumberAccessors(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{3731361 0xc001cfd9c0}) t])
;; 
JOKER FUNC json.TestNumberIsValid has: 
;; (defn TestNumberIsValid
;;   {:added "1.0"
;;    :go "testNumberIsValid(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{3700595 0xc001c8b920}) t])
;; 
JOKER FUNC json.TestOmitEmpty has: 
;; (defn TestOmitEmpty
;;   {:added "1.0"
;;    :go "testOmitEmpty(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{3812146 0xc001e13300}) t])
;; 
JOKER FUNC json.TestPrefilled has: 
;; (defn TestPrefilled
;;   "Test semantics of pre-filled struct fields and pre-filled map fields.
;; Issue 4900."
;;   {:added "1.0"
;;    :go "testPrefilled(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{3751868 0xc001d36ee0}) t])
;; 
JOKER FUNC json.TestRawMessage has: 
;; (defn TestRawMessage
;;   {:added "1.0"
;;    :go "testRawMessage(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{3788723 0xc001dc5d60}) t])
;; 
JOKER FUNC json.TestRefUnmarshal has: 
;; (defn TestRefUnmarshal
;;   {:added "1.0"
;;    :go "testRefUnmarshal(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{3739621 0xc001d0fe40}) t])
;; 
JOKER FUNC json.TestRefValMarshal has: 
;; (defn TestRefValMarshal
;;   {:added "1.0"
;;    :go "testRefValMarshal(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{3815090 0xc001e2c140}) t])
;; 
JOKER FUNC json.TestSkipArrayObjects has: 
;; (defn TestSkipArrayObjects
;;   "Test that extra object elements in an array do not result in a
;; "data changing underfoot" error.
;; Issue 3717"
;;   {:added "1.0"
;;    :go "testSkipArrayObjects(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{3751599 0xc001d36b00}) t])
;; 
JOKER FUNC json.TestSliceOfCustomByte has: 
;; (defn TestSliceOfCustomByte
;;   "The fix for issue 8962 introduced a regression.
;; Issue 12921."
;;   {:added "1.0"
;;    :go "testSliceOfCustomByte(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{3748900 0xc001d29f60}) t])
;; 
JOKER FUNC json.TestStringBytes has: 
;; (defn TestStringBytes
;;   {:added "1.0"
;;    :go "testStringBytes(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{3822821 0xc001e47600}) t])
;; 
JOKER FUNC json.TestStringKind has: 
;; (defn TestStringKind
;;   {:added "1.0"
;;    :go "testStringKind(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{3747979 0xc001d290c0}) t])
;; 
JOKER FUNC json.TestStringTag has: 
;; (defn TestStringTag
;;   {:added "1.0"
;;    :go "testStringTag(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{3812763 0xc001e13ba0}) t])
;; 
JOKER FUNC json.TestStructTagObjectKey has: 
;; (defn TestStructTagObjectKey
;;   {:added "1.0"
;;    :go "testStructTagObjectKey(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{3694982 0xc001c7eea0}) t])
;; 
JOKER FUNC json.TestTagParsing has: 
;; (defn TestTagParsing
;;   {:added "1.0"
;;    :go "testTagParsing(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{3695755 0xc001c7fac0}) t])
;; 
JOKER FUNC json.TestTaggedFieldDominates has: 
;; (defn TestTaggedFieldDominates
;;   "Test that a field with a tag dominates untagged fields."
;;   {:added "1.0"
;;    :go "testTaggedFieldDominates(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{3822065 0xc001e46980}) t])
;; 
JOKER FUNC json.TestTextMarshalerMapKeysAreSorted has: 
;; (defn TestTextMarshalerMapKeysAreSorted
;;   {:added "1.0"
;;    :go "testTextMarshalerMapKeysAreSorted(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{3827454 0xc001e5cac0}) t])
;; 
JOKER FUNC json.TestUnmarshal has: 
;; (defn TestUnmarshal
;;   {:added "1.0"
;;    :go "testUnmarshal(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{3728653 0xc001cf6740}) t])
;; 
JOKER FUNC json.TestUnmarshalEmbeddedUnexported has: 
;; (defn TestUnmarshalEmbeddedUnexported
;;   "Test unmarshal behavior with regards to embedded unexported structs.
;; 
;; (Issue 21357) If the embedded struct is a pointer and is unallocated,
;; this returns an error because unmarshal cannot set the field.
;; 
;; (Issue 24152) If the embedded struct is given an explicit name,
;; ensure that the normal unmarshal logic does not panic in reflect."
;;   {:added "1.0"
;;    :go "testUnmarshalEmbeddedUnexported(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{3754961 0xc001d3de60}) t])
;; 
JOKER FUNC json.TestUnmarshalInterface has: 
;; (defn TestUnmarshalInterface
;;   {:added "1.0"
;;    :go "testUnmarshalInterface(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{3732565 0xc001cff420}) t])
;; 
JOKER FUNC json.TestUnmarshalJSONLiteralError has: 
;; (defn TestUnmarshalJSONLiteralError
;;   {:added "1.0"
;;    :go "testUnmarshalJSONLiteralError(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{3751181 0xc001d36500}) t])
;; 
JOKER FUNC json.TestUnmarshalMarshal has: 
;; (defn TestUnmarshalMarshal
;;   {:added "1.0"
;;    :go "testUnmarshalMarshal(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{3730567 0xc001cfcdc0}) t])
;; 
JOKER FUNC json.TestUnmarshalNulls has: 
;; (defn TestUnmarshalNulls
;;   "JSON null values should be ignored for primitives and string values instead of resulting in an error.
;; Issue 2540"
;;   {:added "1.0"
;;    :go "testUnmarshalNulls(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{3744273 0xc001d22700}) t])
;; 
JOKER FUNC json.TestUnmarshalPanic has: 
;; (defn TestUnmarshalPanic
;;   {:added "1.0"
;;    :go "testUnmarshalPanic(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{3757888 0xc001d541e0}) t])
;; 
JOKER FUNC json.TestUnmarshalPtrPtr has: 
;; (defn TestUnmarshalPtrPtr
;;   {:added "1.0"
;;    :go "testUnmarshalPtrPtr(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{3732802 0xc001cff8c0}) t])
;; 
JOKER FUNC json.TestUnmarshalSyntax has: 
;; (defn TestUnmarshalSyntax
;;   {:added "1.0"
;;    :go "testUnmarshalSyntax(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{3749876 0xc001d31100}) t])
;; 
JOKER FUNC json.TestUnmarshalTypeError has: 
;; (defn TestUnmarshalTypeError
;;   {:added "1.0"
;;    :go "testUnmarshalTypeError(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{3749462 0xc001d30a40}) t])
;; 
JOKER FUNC json.TestUnmarshalUnexported has: 
;; (defn TestUnmarshalUnexported
;;   {:added "1.0"
;;    :go "testUnmarshalUnexported(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{3750349 0xc001d317c0}) t])
;; 
JOKER FUNC json.TestUnsupportedValues has: 
;; (defn TestUnsupportedValues
;;   {:added "1.0"
;;    :go "testUnsupportedValues(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{3814030 0xc001e1d140}) t])
;; 
JOKER FUNC json.TestValid has: 
;; (defn TestValid
;;   {:added "1.0"
;;    :go "testValid(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{3774121 0xc001d873a0}) t])
;; 
JOKER FUNC json.Unmarshal has: 
;; (defn ^Error Unmarshal
;;   "Unmarshal parses the JSON-encoded data and stores the result
;; in the value pointed to by v. If v is nil or not a pointer,
;; Unmarshal returns an InvalidUnmarshalError.
;; 
;; Unmarshal uses the inverse of the encodings that
;; Marshal uses, allocating maps, slices, and pointers as necessary,
;; with the following additional rules:
;; 
;; To unmarshal JSON into a pointer, Unmarshal first handles the case of
;; the JSON being the JSON literal null. In that case, Unmarshal sets
;; the pointer to nil. Otherwise, Unmarshal unmarshals the JSON into
;; the value pointed at by the pointer. If the pointer is nil, Unmarshal
;; allocates a new value for it to point to.
;; 
;; To unmarshal JSON into a value implementing the Unmarshaler interface,
;; Unmarshal calls that value's UnmarshalJSON method, including
;; when the input is a JSON null.
;; Otherwise, if the value implements encoding.TextUnmarshaler
;; and the input is a JSON quoted string, Unmarshal calls that value's
;; UnmarshalText method with the unquoted form of the string.
;; 
;; To unmarshal JSON into a struct, Unmarshal matches incoming object
;; keys to the keys used by Marshal (either the struct field name or its tag),
;; preferring an exact match but also accepting a case-insensitive match. By
;; default, object keys which don't have a corresponding struct field are
;; ignored (see Decoder.DisallowUnknownFields for an alternative).
;; 
;; To unmarshal JSON into an interface value,
;; Unmarshal stores one of these in the interface value:
;; 
;; 	bool, for JSON booleans
;; 	float64, for JSON numbers
;; 	string, for JSON strings
;; 	[]interface{}, for JSON arrays
;; 	map[string]interface{}, for JSON objects
;; 	nil for JSON null
;; 
;; To unmarshal a JSON array into a slice, Unmarshal resets the slice length
;; to zero and then appends each element to the slice.
;; As a special case, to unmarshal an empty JSON array into a slice,
;; Unmarshal replaces the slice with a new empty slice.
;; 
;; To unmarshal a JSON array into a Go array, Unmarshal decodes
;; JSON array elements into corresponding Go array elements.
;; If the Go array is smaller than the JSON array,
;; the additional JSON array elements are discarded.
;; If the JSON array is smaller than the Go array,
;; the additional Go array elements are set to zero values.
;; 
;; To unmarshal a JSON object into a map, Unmarshal first establishes a map to
;; use. If the map is nil, Unmarshal allocates a new map. Otherwise Unmarshal
;; reuses the existing map, keeping existing entries. Unmarshal then stores
;; key-value pairs from the JSON object into the map. The map's key type must
;; either be a string, an integer, or implement encoding.TextUnmarshaler.
;; 
;; If a JSON value is not appropriate for a given target type,
;; or if a JSON number overflows the target type, Unmarshal
;; skips that field and completes the unmarshaling as best it can.
;; If no more serious errors are encountered, Unmarshal returns
;; an UnmarshalTypeError describing the earliest such error. In any
;; case, it's not guaranteed that all the remaining fields following
;; the problematic one will be unmarshaled into the target object.
;; 
;; The JSON null value unmarshals into an interface, map, pointer, or slice
;; by setting that Go value to nil. Because null is often used in JSON to mean
;; ``not present,'' unmarshaling a JSON null into any other Go type has no effect
;; on the value and produces no error.
;; 
;; When unmarshaling quoted strings, invalid UTF-8 or
;; invalid UTF-16 surrogate pairs are not treated as an error.
;; Instead, they are replaced by the Unicode replacement
;; character U+FFFD."
;;   {:added "1.0"
;;    :go "unmarshal(data, v)"}
;;   [^ABEND881(unrecognized Expr type *ast.ArrayType at: &{3661731 <nil> byte}) data, ^ABEND881(unrecognized Expr type *ast.InterfaceType at: &{3661741 0xc001bfe240 false}) v])
;; 
JOKER FUNC json.Valid has: 
;; (defn ^ABEND042(cannot find typename json.bool) Valid
;;   "Valid reports whether data is a valid JSON encoding."
;;   {:added "1.0"
;;    :go "valid(data)"}
;;   [^ABEND881(unrecognized Expr type *ast.ArrayType at: &{3758796 <nil> byte}) data])
;; 
JOKER FUNC json_test.ExampleDecoder has: 
;; (defn ExampleDecoder
;;   "This example uses a Decoder to decode a stream of distinct JSON values."
;;   {:added "1.0"
;;    :go "exampleDecoder()"}
;;   [])
;; 
JOKER FUNC json_test.ExampleDecoder_Decode_stream has: 
;; (defn ExampleDecoder_Decode_stream
;;   "This example uses a Decoder to decode a streaming array of JSON objects."
;;   {:added "1.0"
;;    :go "exampleDecoder_Decode_stream()"}
;;   [])
;; 
JOKER FUNC json_test.ExampleDecoder_Token has: 
;; (defn ExampleDecoder_Token
;;   "This example uses a Decoder to decode a stream of distinct JSON values."
;;   {:added "1.0"
;;    :go "exampleDecoder_Token()"}
;;   [])
;; 
JOKER FUNC json_test.ExampleIndent has: 
;; (defn ExampleIndent
;;   {:added "1.0"
;;    :go "exampleIndent()"}
;;   [])
;; 
JOKER FUNC json_test.ExampleMarshal has: 
;; (defn ExampleMarshal
;;   {:added "1.0"
;;    :go "exampleMarshal()"}
;;   [])
;; 
JOKER FUNC json_test.ExampleMarshalIndent has: 
;; (defn ExampleMarshalIndent
;;   {:added "1.0"
;;    :go "exampleMarshalIndent()"}
;;   [])
;; 
JOKER FUNC json_test.ExampleRawMessage_marshal has: 
;; (defn ExampleRawMessage_marshal
;;   "This example uses RawMessage to use a precomputed JSON during marshal."
;;   {:added "1.0"
;;    :go "exampleRawMessage_marshal()"}
;;   [])
;; 
JOKER FUNC json_test.ExampleRawMessage_unmarshal has: 
;; (defn ExampleRawMessage_unmarshal
;;   "This example uses RawMessage to delay parsing part of a JSON message."
;;   {:added "1.0"
;;    :go "exampleRawMessage_unmarshal()"}
;;   [])
;; 
JOKER FUNC json_test.ExampleUnmarshal has: 
;; (defn ExampleUnmarshal
;;   {:added "1.0"
;;    :go "exampleUnmarshal()"}
;;   [])
;; 
JOKER FUNC json_test.Example_customMarshalJSON has: 
;; (defn Example_customMarshalJSON
;;   {:added "1.0"
;;    :go "example_customMarshalJSON()"}
;;   [])
;; 
JOKER FUNC jsonrpc.Dial has: 
;; (defn ^[ABEND881(unrecognized Expr type *ast.SelectorExpr at: &{rpc Client}) Error] Dial
;;   "Dial connects to a JSON-RPC server at the specified network address."
;;   {:added "1.0"
;;    :go "dial(network, address)"}
;;   [^String network, ^String address])
;; 
JOKER FUNC jsonrpc.NewClient has: 
;; (defn ^ABEND881(unrecognized Expr type *ast.SelectorExpr at: &{rpc Client}) NewClient
;;   "NewClient returns a new rpc.Client to handle requests to the
;; set of services at the other end of the connection."
;;   {:added "1.0"
;;    :go "newClient(conn)"}
;;   [^ABEND881(unrecognized Expr type *ast.SelectorExpr at: &{io ReadWriteCloser}) conn])
;; 
JOKER FUNC jsonrpc.NewClientCodec has: 
;; (defn ^ABEND881(unrecognized Expr type *ast.SelectorExpr at: &{rpc ClientCodec}) NewClientCodec
;;   "NewClientCodec returns a new rpc.ClientCodec using JSON-RPC on conn."
;;   {:added "1.0"
;;    :go "newClientCodec(conn)"}
;;   [^ABEND881(unrecognized Expr type *ast.SelectorExpr at: &{io ReadWriteCloser}) conn])
;; 
JOKER FUNC jsonrpc.NewServerCodec has: 
;; (defn ^ABEND881(unrecognized Expr type *ast.SelectorExpr at: &{rpc ServerCodec}) NewServerCodec
;;   "NewServerCodec returns a new rpc.ServerCodec using JSON-RPC on conn."
;;   {:added "1.0"
;;    :go "newServerCodec(conn)"}
;;   [^ABEND881(unrecognized Expr type *ast.SelectorExpr at: &{io ReadWriteCloser}) conn])
;; 
JOKER FUNC jsonrpc.ServeConn has: 
;; (defn ServeConn
;;   "ServeConn runs the JSON-RPC server on a single connection.
;; ServeConn blocks, serving the connection until the client hangs up.
;; The caller typically invokes ServeConn in a go statement."
;;   {:added "1.0"
;;    :go "serveConn(conn)"}
;;   [^ABEND881(unrecognized Expr type *ast.SelectorExpr at: &{io ReadWriteCloser}) conn])
;; 
JOKER FUNC jsonrpc.TestBuiltinTypes has: 
;; (defn TestBuiltinTypes
;;   {:added "1.0"
;;    :go "testBuiltinTypes(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{9777313 0xc0048918c0}) t])
;; 
JOKER FUNC jsonrpc.TestClient has: 
;; (defn TestClient
;;   {:added "1.0"
;;    :go "testClient(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{9775571 0xc00488f5a0}) t])
;; 
JOKER FUNC jsonrpc.TestMalformedInput has: 
;; (defn TestMalformedInput
;;   {:added "1.0"
;;    :go "testMalformedInput(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{9778324 0xc004896a60}) t])
;; 
JOKER FUNC jsonrpc.TestMalformedOutput has: 
;; (defn TestMalformedOutput
;;   {:added "1.0"
;;    :go "testMalformedOutput(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{9778497 0xc004896d80}) t])
;; 
JOKER FUNC jsonrpc.TestServer has: 
;; (defn TestServer
;;   {:added "1.0"
;;    :go "testServer(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{9774869 0xc00488e800}) t])
;; 
JOKER FUNC jsonrpc.TestServerEmptyMessage has: 
;; (defn TestServerEmptyMessage
;;   {:added "1.0"
;;    :go "testServerEmptyMessage(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{9774542 0xc00488e140}) t])
;; 
JOKER FUNC jsonrpc.TestServerErrorHasNullResult has: 
;; (defn TestServerErrorHasNullResult
;;   {:added "1.0"
;;    :go "testServerErrorHasNullResult(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{9778845 0xc004897400}) t])
;; 
JOKER FUNC jsonrpc.TestServerNoParams has: 
;; (defn TestServerNoParams
;;   {:added "1.0"
;;    :go "testServerNoParams(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{9774165 0xc004885a80}) t])
;; 
JOKER FUNC jsonrpc.TestUnexpectedError has: 
;; (defn TestUnexpectedError
;;   {:added "1.0"
;;    :go "testUnexpectedError(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{9779703 0xc0048a0240}) t])
;; 
JOKER FUNC list.New has: 
(defn ^{:root root, :len ^Int len} New
  "New returns an initialized list."
  {:added "1.0"
   :go "new()"}
  [])

JOKER FUNC list.TestExtending has: 
;; (defn TestExtending
;;   {:added "1.0"
;;    :go "testExtending(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{870260 0xc0008d8220}) t])
;; 
JOKER FUNC list.TestInsertAfterUnknownMark has: 
;; (defn TestInsertAfterUnknownMark
;;   "Test that a list l is not modified when calling InsertAfter with a mark that is not an element of l."
;;   {:added "1.0"
;;    :go "testInsertAfterUnknownMark(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{873793 0xc0008e56a0}) t])
;; 
JOKER FUNC list.TestInsertBeforeUnknownMark has: 
;; (defn TestInsertBeforeUnknownMark
;;   "Test that a list l is not modified when calling InsertBefore with a mark that is not an element of l."
;;   {:added "1.0"
;;    :go "testInsertBeforeUnknownMark(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{873506 0xc0008e5180}) t])
;; 
JOKER FUNC list.TestIssue4103 has: 
;; (defn TestIssue4103
;;   {:added "1.0"
;;    :go "testIssue4103(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{871474 0xc0008dc1c0}) t])
;; 
JOKER FUNC list.TestIssue6349 has: 
;; (defn TestIssue6349
;;   {:added "1.0"
;;    :go "testIssue6349(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{871857 0xc0008dca40}) t])
;; 
JOKER FUNC list.TestList has: 
;; (defn TestList
;;   {:added "1.0"
;;    :go "testList(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{867795 0xc0008cc7c0}) t])
;; 
JOKER FUNC list.TestMove has: 
;; (defn TestMove
;;   {:added "1.0"
;;    :go "testMove(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{872138 0xc0008dd100}) t])
;; 
JOKER FUNC list.TestMoveUnknownMark has: 
;; (defn TestMoveUnknownMark
;;   "Test that a list l is not modified when calling MoveAfter or MoveBefore with a mark that is not an element of l."
;;   {:added "1.0"
;;    :go "testMoveUnknownMark(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{874084 0xc0008e5bc0}) t])
;; 
JOKER FUNC list.TestRemove has: 
;; (defn TestRemove
;;   {:added "1.0"
;;    :go "testRemove(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{871213 0xc0008d9ae0}) t])
;; 
JOKER FUNC list.TestZeroList has: 
;; (defn TestZeroList
;;   "Test PushFront, PushBack, PushFrontList, PushBackList with uninitialized List"
;;   {:added "1.0"
;;    :go "testZeroList(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{873046 0xc0008e49c0}) t])
;; 
JOKER FUNC list_test.Example has: 
;; (defn Example
;;   {:added "1.0"
;;    :go "example()"}
;;   [])
;; 
JOKER FUNC log.BenchmarkItoa has: 
;; (defn BenchmarkItoa
;;   {:added "1.0"
;;    :go "benchmarkItoa(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{6409695 0xc0026847e0}) b])
;; 
JOKER FUNC log.BenchmarkPrintln has: 
;; (defn BenchmarkPrintln
;;   {:added "1.0"
;;    :go "benchmarkPrintln(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{6410047 0xc002685240}) b])
;; 
JOKER FUNC log.BenchmarkPrintlnNoFlags has: 
;; (defn BenchmarkPrintlnNoFlags
;;   {:added "1.0"
;;    :go "benchmarkPrintlnNoFlags(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{6410244 0xc0026856e0}) b])
;; 
JOKER FUNC log.Fatal has: 
;; (defn Fatal
;;   "Fatal is equivalent to Print() followed by a call to os.Exit(1)."
;;   {:added "1.0"
;;    :go "fatal(v)"}
;;   [^ABEND881(unrecognized Expr type *ast.Ellipsis at: &{6419706 0xc00235fb00}) v])
;; 
JOKER FUNC log.Fatalf has: 
;; (defn Fatalf
;;   "Fatalf is equivalent to Printf() followed by a call to os.Exit(1)."
;;   {:added "1.0"
;;    :go "fatalf(format, v)"}
;;   [^String format, ^ABEND881(unrecognized Expr type *ast.Ellipsis at: &{6419871 0xc00235fde0}) v])
;; 
JOKER FUNC log.Fatalln has: 
;; (defn Fatalln
;;   "Fatalln is equivalent to Println() followed by a call to os.Exit(1)."
;;   {:added "1.0"
;;    :go "fatalln(v)"}
;;   [^ABEND881(unrecognized Expr type *ast.Ellipsis at: &{6420033 0xc0026620c0}) v])
;; 
JOKER FUNC log.Flags has: 
(defn ^Int Flags
  "Flags returns the output flags for the standard logger."
  {:added "1.0"
   :go "flags()"}
  [])

JOKER FUNC log.New has: 
;; (defn ^{:mu ^ABEND881(unrecognized Expr type *ast.SelectorExpr at: &{sync Mutex}) mu, :prefix ^String prefix, :flag ^Int flag, :out ^ABEND881(unrecognized Expr type *ast.SelectorExpr at: &{io Writer}) out, :buf ^ABEND881(unrecognized Expr type *ast.ArrayType at: &{6413026 <nil> byte}) buf} New
;;   "New creates a new Logger. The out variable sets the
;; destination to which log data will be written.
;; The prefix appears at the beginning of each generated log line.
;; The flag argument defines the logging properties."
;;   {:added "1.0"
;;    :go "new(out, prefix, flag)"}
;;   [^ABEND881(unrecognized Expr type *ast.SelectorExpr at: &{io Writer}) out, ^String prefix, ^Int flag])
;; 
JOKER FUNC log.Output has: 
(defn ^Error Output
  "Output writes the output for a logging event. The string s contains
the text to print after the prefix specified by the flags of the
Logger. A newline is appended if the last character of s is not
already a newline. Calldepth is the count of the number of
frames to skip when computing the file name and line number
if Llongfile or Lshortfile is set; a value of 1 will print the details
for the caller of Output."
  {:added "1.0"
   :go "output(calldepth, s)"}
  [^Int calldepth, ^String s])

JOKER FUNC log.Panic has: 
;; (defn Panic
;;   "Panic is equivalent to Print() followed by a call to panic()."
;;   {:added "1.0"
;;    :go "panic(v)"}
;;   [^ABEND881(unrecognized Expr type *ast.Ellipsis at: &{6420179 0xc002662360}) v])
;; 
JOKER FUNC log.Panicf has: 
;; (defn Panicf
;;   "Panicf is equivalent to Printf() followed by a call to panic()."
;;   {:added "1.0"
;;    :go "panicf(format, v)"}
;;   [^String format, ^ABEND881(unrecognized Expr type *ast.Ellipsis at: &{6420347 0xc002662640}) v])
;; 
JOKER FUNC log.Panicln has: 
;; (defn Panicln
;;   "Panicln is equivalent to Println() followed by a call to panic()."
;;   {:added "1.0"
;;    :go "panicln(v)"}
;;   [^ABEND881(unrecognized Expr type *ast.Ellipsis at: &{6420512 0xc002662920}) v])
;; 
JOKER FUNC log.Prefix has: 
(defn ^String Prefix
  "Prefix returns the output prefix for the standard logger."
  {:added "1.0"
   :go "prefix()"}
  [])

JOKER FUNC log.Print has: 
;; (defn Print
;;   "Print calls Output to print to the standard logger.
;; Arguments are handled in the manner of fmt.Print."
;;   {:added "1.0"
;;    :go "print(v)"}
;;   [^ABEND881(unrecognized Expr type *ast.Ellipsis at: &{6419186 0xc00235f440}) v])
;; 
JOKER FUNC log.Printf has: 
;; (defn Printf
;;   "Printf calls Output to print to the standard logger.
;; Arguments are handled in the manner of fmt.Printf."
;;   {:added "1.0"
;;    :go "printf(format, v)"}
;;   [^String format, ^ABEND881(unrecognized Expr type *ast.Ellipsis at: &{6419379 0xc00235f6a0}) v])
;; 
JOKER FUNC log.Println has: 
;; (defn Println
;;   "Println calls Output to print to the standard logger.
;; Arguments are handled in the manner of fmt.Println."
;;   {:added "1.0"
;;    :go "println(v)"}
;;   [^ABEND881(unrecognized Expr type *ast.Ellipsis at: &{6419569 0xc00235f900}) v])
;; 
JOKER FUNC log.SetFlags has: 
;; (defn SetFlags
;;   "SetFlags sets the output flags for the standard logger."
;;   {:added "1.0"
;;    :go "setFlags(flag)"}
;;   [^Int flag])
;; 
JOKER FUNC log.SetOutput has: 
;; (defn SetOutput
;;   "SetOutput sets the output destination for the standard logger."
;;   {:added "1.0"
;;    :go "setOutput(w)"}
;;   [^ABEND881(unrecognized Expr type *ast.SelectorExpr at: &{io Writer}) w])
;; 
JOKER FUNC log.SetPrefix has: 
;; (defn SetPrefix
;;   "SetPrefix sets the output prefix for the standard logger."
;;   {:added "1.0"
;;    :go "setPrefix(prefix)"}
;;   [^String prefix])
;; 
JOKER FUNC log.TestAll has: 
;; (defn TestAll
;;   {:added "1.0"
;;    :go "testAll(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{6406943 0xc0025c54e0}) t])
;; 
JOKER FUNC log.TestEmptyPrintCreatesLine has: 
;; (defn TestEmptyPrintCreatesLine
;;   {:added "1.0"
;;    :go "testEmptyPrintCreatesLine(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{6409354 0xc002684060}) t])
;; 
JOKER FUNC log.TestFlagAndPrefixSetting has: 
;; (defn TestFlagAndPrefixSetting
;;   {:added "1.0"
;;    :go "testFlagAndPrefixSetting(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{6407590 0xc0025c8380}) t])
;; 
JOKER FUNC log.TestOutput has: 
;; (defn TestOutput
;;   {:added "1.0"
;;    :go "testOutput(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{6407158 0xc0025c59c0}) t])
;; 
JOKER FUNC log.TestOutputRace has: 
;; (defn TestOutputRace
;;   {:added "1.0"
;;    :go "testOutputRace(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{6407414 0xc0025c5ee0}) t])
;; 
JOKER FUNC log.TestUTCFlag has: 
;; (defn TestUTCFlag
;;   {:added "1.0"
;;    :go "testUTCFlag(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{6408499 0xc0025c9260}) t])
;; 
JOKER FUNC log_test.ExampleLogger has: 
;; (defn ExampleLogger
;;   {:added "1.0"
;;    :go "exampleLogger()"}
;;   [])
;; 
JOKER FUNC log_test.ExampleLogger_Output has: 
;; (defn ExampleLogger_Output
;;   {:added "1.0"
;;    :go "exampleLogger_Output()"}
;;   [])
;; 
JOKER FUNC lzw.BenchmarkDecoder has: 
;; (defn BenchmarkDecoder
;;   {:added "1.0"
;;    :go "benchmarkDecoder(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{820572 0xc0006ef740}) b])
;; 
JOKER FUNC lzw.BenchmarkEncoder has: 
;; (defn BenchmarkEncoder
;;   {:added "1.0"
;;    :go "benchmarkEncoder(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{806954 0xc000718280}) b])
;; 
JOKER FUNC lzw.NewReader has: 
;; (defn ^ABEND881(unrecognized Expr type *ast.SelectorExpr at: &{io ReadCloser}) NewReader
;;   "NewReader creates a new io.ReadCloser.
;; Reads from the returned io.ReadCloser read and decompress data from r.
;; If r does not also implement io.ByteReader,
;; the decompressor may read more data than necessary from r.
;; It is the caller's responsibility to call Close on the ReadCloser when
;; finished reading.
;; The number of bits to use for literal codes, litWidth, must be in the
;; range [2,8] and is typically 8. It must equal the litWidth
;; used during compression."
;;   {:added "1.0"
;;    :go "newReader(r, order, litWidth)"}
;;   [^ABEND881(unrecognized Expr type *ast.SelectorExpr at: &{io Reader}) r, order, ^Int litWidth])
;; 
JOKER FUNC lzw.NewWriter has: 
;; (defn ^ABEND881(unrecognized Expr type *ast.SelectorExpr at: &{io WriteCloser}) NewWriter
;;   "NewWriter creates a new io.WriteCloser.
;; Writes to the returned io.WriteCloser are compressed and written to w.
;; It is the caller's responsibility to call Close on the WriteCloser when
;; finished writing.
;; The number of bits to use for literal codes, litWidth, must be in the
;; range [2,8] and is typically 8. Input bytes must be less than 1<<litWidth."
;;   {:added "1.0"
;;    :go "newWriter(w, order, litWidth)"}
;;   [^ABEND881(unrecognized Expr type *ast.SelectorExpr at: &{io Writer}) w, order, ^Int litWidth])
;; 
JOKER FUNC lzw.TestHiCodeDoesNotOverflow has: 
;; (defn TestHiCodeDoesNotOverflow
;;   {:added "1.0"
;;    :go "testHiCodeDoesNotOverflow(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{817730 0xc0007c3940}) t])
;; 
JOKER FUNC lzw.TestNoLongerSavingPriorExpansions has: 
;; (defn TestNoLongerSavingPriorExpansions
;;   "TestNoLongerSavingPriorExpansions tests the decoder state when codes other
;; than clear codes continue to be seen after decoder.hi and decoder.width
;; reach their maximum values (4095 and 12), i.e. after we no longer save prior
;; expansions. In particular, it tests seeing the highest possible code, 4095."
;;   {:added "1.0"
;;    :go "testNoLongerSavingPriorExpansions(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{818472 0xc0006ee2e0}) t])
;; 
JOKER FUNC lzw.TestReader has: 
;; (defn TestReader
;;   {:added "1.0"
;;    :go "testReader(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{816626 0xc0007c22e0}) t])
;; 
JOKER FUNC lzw.TestSmallLitWidth has: 
;; (defn TestSmallLitWidth
;;   {:added "1.0"
;;    :go "testSmallLitWidth(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{806661 0xc000695cc0}) t])
;; 
JOKER FUNC lzw.TestWriter has: 
;; (defn TestWriter
;;   {:added "1.0"
;;    :go "testWriter(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{806001 0xc000695220}) t])
;; 
JOKER FUNC lzw.TestWriterReturnValues has: 
;; (defn TestWriterReturnValues
;;   {:added "1.0"
;;    :go "testWriterReturnValues(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{806468 0xc000695860}) t])
;; 
JOKER FUNC macho.NewFatFile has: 
;; (defn ^[{:magic Magic, :arches ^ABEND881(unrecognized Expr type *ast.ArrayType at: &{2997110 <nil> FatArch}) Arches, :closer ^ABEND881(unrecognized Expr type *ast.SelectorExpr at: &{io Closer}) closer} Error] NewFatFile
;;   "NewFatFile creates a new FatFile for accessing all the Mach-O images in a
;; universal binary. The Mach-O binary is expected to start at position 0 in
;; the ReaderAt."
;;   {:added "1.0"
;;    :go "newFatFile(r)"}
;;   [^ABEND881(unrecognized Expr type *ast.SelectorExpr at: &{io ReaderAt}) r])
;; 
JOKER FUNC macho.NewFile has: 
;; (defn ^[{:byteorder ^ABEND881(unrecognized Expr type *ast.SelectorExpr at: &{binary ByteOrder}) ByteOrder, :loads ^ABEND881(unrecognized Expr type *ast.ArrayType at: &{3003775 <nil> Load}) Loads, :sections ^ABEND881(unrecognized Expr type *ast.ArrayType at: &{3003793 <nil> 0xc00127e6e0}) Sections, :symtab ^ABEND881(unrecognized Expr type *ast.StarExpr at: &{3003815 Symtab}) Symtab, :dysymtab ^ABEND881(unrecognized Expr type *ast.StarExpr at: &{3003833 Dysymtab}) Dysymtab, :closer ^ABEND881(unrecognized Expr type *ast.SelectorExpr at: &{io Closer}) closer} Error] NewFile
;;   "NewFile creates a new File for accessing a Mach-O binary in an underlying reader.
;; The Mach-O binary is expected to start at position 0 in the ReaderAt."
;;   {:added "1.0"
;;    :go "newFile(r)"}
;;   [^ABEND881(unrecognized Expr type *ast.SelectorExpr at: &{io ReaderAt}) r])
;; 
JOKER FUNC macho.Open has: 
;; (defn ^[{:byteorder ^ABEND881(unrecognized Expr type *ast.SelectorExpr at: &{binary ByteOrder}) ByteOrder, :loads ^ABEND881(unrecognized Expr type *ast.ArrayType at: &{3003775 <nil> Load}) Loads, :sections ^ABEND881(unrecognized Expr type *ast.ArrayType at: &{3003793 <nil> 0xc00127e6e0}) Sections, :symtab ^ABEND881(unrecognized Expr type *ast.StarExpr at: &{3003815 Symtab}) Symtab, :dysymtab ^ABEND881(unrecognized Expr type *ast.StarExpr at: &{3003833 Dysymtab}) Dysymtab, :closer ^ABEND881(unrecognized Expr type *ast.SelectorExpr at: &{io Closer}) closer} Error] Open
;;   "Open opens the named file using os.Open and prepares it for use as a Mach-O binary."
;;   {:added "1.0"
;;    :go "open(name)"}
;;   [^String name])
;; 
JOKER FUNC macho.OpenFat has: 
;; (defn ^[{:magic Magic, :arches ^ABEND881(unrecognized Expr type *ast.ArrayType at: &{2997110 <nil> FatArch}) Arches, :closer ^ABEND881(unrecognized Expr type *ast.SelectorExpr at: &{io Closer}) closer} Error] OpenFat
;;   "OpenFat opens the named file using os.Open and prepares it for use as a Mach-O
;; universal binary."
;;   {:added "1.0"
;;    :go "openFat(name)"}
;;   [^String name])
;; 
JOKER FUNC macho.TestOpen has: 
;; (defn TestOpen
;;   {:added "1.0"
;;    :go "testOpen(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{3027100 0xc000d34520}) t])
;; 
JOKER FUNC macho.TestOpenFailure has: 
;; (defn TestOpenFailure
;;   {:added "1.0"
;;    :go "testOpenFailure(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{3029360 0xc000bff640}) t])
;; 
JOKER FUNC macho.TestOpenFat has: 
;; (defn TestOpenFat
;;   {:added "1.0"
;;    :go "testOpenFat(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{3029560 0xc000bff9a0}) t])
;; 
JOKER FUNC macho.TestOpenFatFailure has: 
;; (defn TestOpenFatFailure
;;   {:added "1.0"
;;    :go "testOpenFatFailure(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{3030361 0xc000b0caa0}) t])
;; 
JOKER FUNC macho.TestRelocTypeString has: 
;; (defn TestRelocTypeString
;;   {:added "1.0"
;;    :go "testRelocTypeString(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{3030817 0xc000b0d3c0}) t])
;; 
JOKER FUNC macho.TestTypeString has: 
;; (defn TestTypeString
;;   {:added "1.0"
;;    :go "testTypeString(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{3031164 0xc000b0d800}) t])
;; 
JOKER FUNC mail.ParseAddress has: 
(defn ^[{:name ^String Name, :address ^String Address} Error] ParseAddress
  "Parses a single RFC 5322 address, e.g. "Barry Gibbs <bg@example.com>""
  {:added "1.0"
   :go "parseAddress(address)"}
  [^String address])

JOKER FUNC mail.ParseAddressList has: 
(defn ^[[{:name ^String Name, :address ^String Address}] Error] ParseAddressList
  "ParseAddressList parses the given string as a list of addresses."
  {:added "1.0"
   :go "parseAddressList(list)"}
  [^String list])

JOKER FUNC mail.ParseDate has: 
;; (defn ^[ABEND881(unrecognized Expr type *ast.SelectorExpr at: &{time Time}) Error] ParseDate
;;   "ParseDate parses an RFC 5322 date string."
;;   {:added "1.0"
;;    :go "parseDate(date)"}
;;   [^String date])
;; 
JOKER FUNC mail.ReadMessage has: 
;; (defn ^[msg err] ReadMessage
;;   "ReadMessage reads a message from r.
;; The headers are parsed, and the body of the message will be available
;; for reading from msg.Body."
;;   {:added "1.0"
;;    :go "readMessage(r)"}
;;   [^ABEND881(unrecognized Expr type *ast.SelectorExpr at: &{io Reader}) r])
;; 
JOKER FUNC mail.TestAddressFormattingAndParsing has: 
;; (defn TestAddressFormattingAndParsing
;;   {:added "1.0"
;;    :go "testAddressFormattingAndParsing(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{9695505 0xc004767920}) t])
;; 
JOKER FUNC mail.TestAddressParser has: 
;; (defn TestAddressParser
;;   {:added "1.0"
;;    :go "testAddressParser(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{9687437 0xc004758040}) t])
;; 
JOKER FUNC mail.TestAddressParsing has: 
;; (defn TestAddressParsing
;;   {:added "1.0"
;;    :go "testAddressParsing(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{9679983 0xc00474c0a0}) t])
;; 
JOKER FUNC mail.TestAddressParsingAndFormatting has: 
;; (defn TestAddressParsingAndFormatting
;;   "Check if all valid addresses can be parsed, formatted and parsed again"
;;   {:added "1.0"
;;    :go "testAddressParsingAndFormatting(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{9693402 0xc004766720}) t])
;; 
JOKER FUNC mail.TestAddressParsingError has: 
;; (defn TestAddressParsingError
;;   {:added "1.0"
;;    :go "testAddressParsingError(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{9678465 0xc00474b020}) t])
;; 
JOKER FUNC mail.TestAddressString has: 
;; (defn TestAddressString
;;   {:added "1.0"
;;    :go "testAddressString(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{9691068 0xc00475e860}) t])
;; 
JOKER FUNC mail.TestDateParsing has: 
;; (defn TestDateParsing
;;   {:added "1.0"
;;    :go "testDateParsing(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{9677327 0xc004743a60}) t])
;; 
JOKER FUNC mail.TestParsing has: 
;; (defn TestParsing
;;   {:added "1.0"
;;    :go "testParsing(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{9676417 0xc0047429a0}) t])
;; 
JOKER FUNC mail_test.ExampleParseAddress has: 
;; (defn ExampleParseAddress
;;   {:added "1.0"
;;    :go "exampleParseAddress()"}
;;   [])
;; 
JOKER FUNC mail_test.ExampleParseAddressList has: 
;; (defn ExampleParseAddressList
;;   {:added "1.0"
;;    :go "exampleParseAddressList()"}
;;   [])
;; 
JOKER FUNC mail_test.ExampleReadMessage has: 
;; (defn ExampleReadMessage
;;   {:added "1.0"
;;    :go "exampleReadMessage()"}
;;   [])
;; 
JOKER FUNC math.Abs has: 
;; (defn ^ABEND042(cannot find typename math.float64) Abs
;;   "Abs returns the absolute value of x.
;; 
;; Special cases are:
;; 	Abs(±Inf) = +Inf
;; 	Abs(NaN) = NaN"
;;   {:added "1.0"
;;    :go "abs(x)"}
;;   [x])
;; 
JOKER FUNC math.Acos has: 
;; (defn ^ABEND042(cannot find typename math.float64) Acos
;;   "Acos returns the arccosine, in radians, of x.
;; 
;; Special case is:
;; 	Acos(x) = NaN if x < -1 or x > 1"
;;   {:added "1.0"
;;    :go "acos(x)"}
;;   [x])
;; 
JOKER FUNC math.Acosh has: 
;; (defn ^ABEND042(cannot find typename math.float64) Acosh
;;   "Acosh returns the inverse hyperbolic cosine of x.
;; 
;; Special cases are:
;; 	Acosh(+Inf) = +Inf
;; 	Acosh(x) = NaN if x < 1
;; 	Acosh(NaN) = NaN"
;;   {:added "1.0"
;;    :go "acosh(x)"}
;;   [x])
;; 
JOKER FUNC math.Asin has: 
;; (defn ^ABEND042(cannot find typename math.float64) Asin
;;   "Asin returns the arcsine, in radians, of x.
;; 
;; Special cases are:
;; 	Asin(±0) = ±0
;; 	Asin(x) = NaN if x < -1 or x > 1"
;;   {:added "1.0"
;;    :go "asin(x)"}
;;   [x])
;; 
JOKER FUNC math.Asinh has: 
;; (defn ^ABEND042(cannot find typename math.float64) Asinh
;;   "Asinh returns the inverse hyperbolic sine of x.
;; 
;; Special cases are:
;; 	Asinh(±0) = ±0
;; 	Asinh(±Inf) = ±Inf
;; 	Asinh(NaN) = NaN"
;;   {:added "1.0"
;;    :go "asinh(x)"}
;;   [x])
;; 
JOKER FUNC math.Atan has: 
;; (defn ^ABEND042(cannot find typename math.float64) Atan
;;   "Atan returns the arctangent, in radians, of x.
;; 
;; Special cases are:
;;      Atan(±0) = ±0
;;      Atan(±Inf) = ±Pi/2"
;;   {:added "1.0"
;;    :go "atan(x)"}
;;   [x])
;; 
JOKER FUNC math.Atan2 has: 
;; (defn ^ABEND042(cannot find typename math.float64) Atan2
;;   "Atan2 returns the arc tangent of y/x, using
;; the signs of the two to determine the quadrant
;; of the return value.
;; 
;; Special cases are (in order):
;; 	Atan2(y, NaN) = NaN
;; 	Atan2(NaN, x) = NaN
;; 	Atan2(+0, x>=0) = +0
;; 	Atan2(-0, x>=0) = -0
;; 	Atan2(+0, x<=-0) = +Pi
;; 	Atan2(-0, x<=-0) = -Pi
;; 	Atan2(y>0, 0) = +Pi/2
;; 	Atan2(y<0, 0) = -Pi/2
;; 	Atan2(+Inf, +Inf) = +Pi/4
;; 	Atan2(-Inf, +Inf) = -Pi/4
;; 	Atan2(+Inf, -Inf) = 3Pi/4
;; 	Atan2(-Inf, -Inf) = -3Pi/4
;; 	Atan2(y, +Inf) = 0
;; 	Atan2(y>0, -Inf) = +Pi
;; 	Atan2(y<0, -Inf) = -Pi
;; 	Atan2(+Inf, x) = +Pi/2
;; 	Atan2(-Inf, x) = -Pi/2"
;;   {:added "1.0"
;;    :go "atan2(y, x)"}
;;   [y, x])
;; 
JOKER FUNC math.Atanh has: 
;; (defn ^ABEND042(cannot find typename math.float64) Atanh
;;   "Atanh returns the inverse hyperbolic tangent of x.
;; 
;; Special cases are:
;; 	Atanh(1) = +Inf
;; 	Atanh(±0) = ±0
;; 	Atanh(-1) = -Inf
;; 	Atanh(x) = NaN if x < -1 or x > 1
;; 	Atanh(NaN) = NaN"
;;   {:added "1.0"
;;    :go "atanh(x)"}
;;   [x])
;; 
JOKER FUNC math.Cbrt has: 
;; (defn ^ABEND042(cannot find typename math.float64) Cbrt
;;   "Cbrt returns the cube root of x.
;; 
;; Special cases are:
;; 	Cbrt(±0) = ±0
;; 	Cbrt(±Inf) = ±Inf
;; 	Cbrt(NaN) = NaN"
;;   {:added "1.0"
;;    :go "cbrt(x)"}
;;   [x])
;; 
JOKER FUNC math.Ceil has: 
;; (defn ^ABEND042(cannot find typename math.float64) Ceil
;;   "Ceil returns the least integer value greater than or equal to x.
;; 
;; Special cases are:
;; 	Ceil(±0) = ±0
;; 	Ceil(±Inf) = ±Inf
;; 	Ceil(NaN) = NaN"
;;   {:added "1.0"
;;    :go "ceil(x)"}
;;   [x])
;; 
JOKER FUNC math.Copysign has: 
;; (defn ^ABEND042(cannot find typename math.float64) Copysign
;;   "Copysign returns a value with the magnitude
;; of x and the sign of y."
;;   {:added "1.0"
;;    :go "copysign(x, y)"}
;;   [x, y])
;; 
JOKER FUNC math.Cos has: 
;; (defn ^ABEND042(cannot find typename math.float64) Cos
;;   "Cos returns the cosine of the radian argument x.
;; 
;; Special cases are:
;; 	Cos(±Inf) = NaN
;; 	Cos(NaN) = NaN"
;;   {:added "1.0"
;;    :go "cos(x)"}
;;   [x])
;; 
JOKER FUNC math.Cosh has: 
;; (defn ^ABEND042(cannot find typename math.float64) Cosh
;;   "Cosh returns the hyperbolic cosine of x.
;; 
;; Special cases are:
;; 	Cosh(±0) = 1
;; 	Cosh(±Inf) = +Inf
;; 	Cosh(NaN) = NaN"
;;   {:added "1.0"
;;    :go "cosh(x)"}
;;   [x])
;; 
JOKER FUNC math.Dim has: 
;; (defn ^ABEND042(cannot find typename math.float64) Dim
;;   "Dim returns the maximum of x-y or 0.
;; 
;; Special cases are:
;; 	Dim(+Inf, +Inf) = NaN
;; 	Dim(-Inf, -Inf) = NaN
;; 	Dim(x, NaN) = Dim(NaN, x) = NaN"
;;   {:added "1.0"
;;    :go "dim(x, y)"}
;;   [x, y])
;; 
JOKER FUNC math.Erf has: 
;; (defn ^ABEND042(cannot find typename math.float64) Erf
;;   "Erf returns the error function of x.
;; 
;; Special cases are:
;; 	Erf(+Inf) = 1
;; 	Erf(-Inf) = -1
;; 	Erf(NaN) = NaN"
;;   {:added "1.0"
;;    :go "erf(x)"}
;;   [x])
;; 
JOKER FUNC math.Erfc has: 
;; (defn ^ABEND042(cannot find typename math.float64) Erfc
;;   "Erfc returns the complementary error function of x.
;; 
;; Special cases are:
;; 	Erfc(+Inf) = 0
;; 	Erfc(-Inf) = 2
;; 	Erfc(NaN) = NaN"
;;   {:added "1.0"
;;    :go "erfc(x)"}
;;   [x])
;; 
JOKER FUNC math.Erfcinv has: 
;; (defn ^ABEND042(cannot find typename math.float64) Erfcinv
;;   "Erfcinv returns the inverse of Erfc(x).
;; 
;; Special cases are:
;; 	Erfcinv(0) = +Inf
;; 	Erfcinv(2) = -Inf
;; 	Erfcinv(x) = NaN if x < 0 or x > 2
;; 	Erfcinv(NaN) = NaN"
;;   {:added "1.0"
;;    :go "erfcinv(x)"}
;;   [x])
;; 
JOKER FUNC math.Erfinv has: 
;; (defn ^ABEND042(cannot find typename math.float64) Erfinv
;;   "Erfinv returns the inverse error function of x.
;; 
;; Special cases are:
;; 	Erfinv(1) = +Inf
;; 	Erfinv(-1) = -Inf
;; 	Erfinv(x) = NaN if x < -1 or x > 1
;; 	Erfinv(NaN) = NaN"
;;   {:added "1.0"
;;    :go "erfinv(x)"}
;;   [x])
;; 
JOKER FUNC math.Exp has: 
;; (defn ^ABEND042(cannot find typename math.float64) Exp
;;   "Exp returns e**x, the base-e exponential of x.
;; 
;; Special cases are:
;; 	Exp(+Inf) = +Inf
;; 	Exp(NaN) = NaN
;; Very large values overflow to 0 or +Inf.
;; Very small values underflow to 1."
;;   {:added "1.0"
;;    :go "exp(x)"}
;;   [x])
;; 
JOKER FUNC math.Exp2 has: 
;; (defn ^ABEND042(cannot find typename math.float64) Exp2
;;   "Exp2 returns 2**x, the base-2 exponential of x.
;; 
;; Special cases are the same as Exp."
;;   {:added "1.0"
;;    :go "exp2(x)"}
;;   [x])
;; 
JOKER FUNC math.Expm1 has: 
;; (defn ^ABEND042(cannot find typename math.float64) Expm1
;;   "Expm1 returns e**x - 1, the base-e exponential of x minus 1.
;; It is more accurate than Exp(x) - 1 when x is near zero.
;; 
;; Special cases are:
;; 	Expm1(+Inf) = +Inf
;; 	Expm1(-Inf) = -1
;; 	Expm1(NaN) = NaN
;; Very large values overflow to -1 or +Inf."
;;   {:added "1.0"
;;    :go "expm1(x)"}
;;   [x])
;; 
JOKER FUNC math.Float32bits has: 
;; (defn ^ABEND042(cannot find typename math.uint32) Float32bits
;;   "Float32bits returns the IEEE 754 binary representation of f."
;;   {:added "1.0"
;;    :go "float32bits(f)"}
;;   [f])
;; 
JOKER FUNC math.Float32frombits has: 
;; (defn ^ABEND042(cannot find typename math.float32) Float32frombits
;;   "Float32frombits returns the floating point number corresponding
;; to the IEEE 754 binary representation b."
;;   {:added "1.0"
;;    :go "float32frombits(b)"}
;;   [b])
;; 
JOKER FUNC math.Float64bits has: 
;; (defn ^ABEND042(cannot find typename math.uint64) Float64bits
;;   "Float64bits returns the IEEE 754 binary representation of f."
;;   {:added "1.0"
;;    :go "float64bits(f)"}
;;   [f])
;; 
JOKER FUNC math.Float64frombits has: 
;; (defn ^ABEND042(cannot find typename math.float64) Float64frombits
;;   "Float64frombits returns the floating point number corresponding
;; the IEEE 754 binary representation b."
;;   {:added "1.0"
;;    :go "float64frombits(b)"}
;;   [b])
;; 
JOKER FUNC math.Floor has: 
;; (defn ^ABEND042(cannot find typename math.float64) Floor
;;   "Floor returns the greatest integer value less than or equal to x.
;; 
;; Special cases are:
;; 	Floor(±0) = ±0
;; 	Floor(±Inf) = ±Inf
;; 	Floor(NaN) = NaN"
;;   {:added "1.0"
;;    :go "floor(x)"}
;;   [x])
;; 
JOKER FUNC math.Frexp has: 
(defn ^[frac exp] Frexp
  "Frexp breaks f into a normalized fraction
and an integral power of two.
It returns frac and exp satisfying f == frac × 2**exp,
with the absolute value of frac in the interval [½, 1).

Special cases are:
	Frexp(±0) = ±0, 0
	Frexp(±Inf) = ±Inf, 0
	Frexp(NaN) = NaN, 0"
  {:added "1.0"
   :go "frexp(f)"}
  [f])

JOKER FUNC math.Gamma has: 
;; (defn ^ABEND042(cannot find typename math.float64) Gamma
;;   "Gamma returns the Gamma function of x.
;; 
;; Special cases are:
;; 	Gamma(+Inf) = +Inf
;; 	Gamma(+0) = +Inf
;; 	Gamma(-0) = -Inf
;; 	Gamma(x) = NaN for integer x < 0
;; 	Gamma(-Inf) = NaN
;; 	Gamma(NaN) = NaN"
;;   {:added "1.0"
;;    :go "gamma(x)"}
;;   [x])
;; 
JOKER FUNC math.Hypot has: 
;; (defn ^ABEND042(cannot find typename math.float64) Hypot
;;   "Hypot returns Sqrt(p*p + q*q), taking care to avoid
;; unnecessary overflow and underflow.
;; 
;; Special cases are:
;; 	Hypot(±Inf, q) = +Inf
;; 	Hypot(p, ±Inf) = +Inf
;; 	Hypot(NaN, q) = NaN
;; 	Hypot(p, NaN) = NaN"
;;   {:added "1.0"
;;    :go "hypot(p, q)"}
;;   [p, q])
;; 
JOKER FUNC math.Ilogb has: 
(defn ^Int Ilogb
  "Ilogb returns the binary exponent of x as an integer.

Special cases are:
	Ilogb(±Inf) = MaxInt32
	Ilogb(0) = MinInt32
	Ilogb(NaN) = MaxInt32"
  {:added "1.0"
   :go "ilogb(x)"}
  [x])

JOKER FUNC math.Inf has: 
;; (defn ^ABEND042(cannot find typename math.float64) Inf
;;   "Inf returns positive infinity if sign >= 0, negative infinity if sign < 0."
;;   {:added "1.0"
;;    :go "inf(sign)"}
;;   [^Int sign])
;; 
JOKER FUNC math.IsInf has: 
;; (defn ^ABEND042(cannot find typename math.bool) IsInf
;;   "IsInf reports whether f is an infinity, according to sign.
;; If sign > 0, IsInf reports whether f is positive infinity.
;; If sign < 0, IsInf reports whether f is negative infinity.
;; If sign == 0, IsInf reports whether f is either infinity."
;;   {:added "1.0"
;;    :go "isInf(f, sign)"}
;;   [f, ^Int sign])
;; 
JOKER FUNC math.IsNaN has: 
(defn ^is IsNaN
  "IsNaN reports whether f is an IEEE 754 ``not-a-number'' value."
  {:added "1.0"
   :go "isNaN(f)"}
  [f])

JOKER FUNC math.J0 has: 
;; (defn ^ABEND042(cannot find typename math.float64) J0
;;   "J0 returns the order-zero Bessel function of the first kind.
;; 
;; Special cases are:
;; 	J0(±Inf) = 0
;; 	J0(0) = 1
;; 	J0(NaN) = NaN"
;;   {:added "1.0"
;;    :go "j0(x)"}
;;   [x])
;; 
JOKER FUNC math.J1 has: 
;; (defn ^ABEND042(cannot find typename math.float64) J1
;;   "J1 returns the order-one Bessel function of the first kind.
;; 
;; Special cases are:
;; 	J1(±Inf) = 0
;; 	J1(NaN) = NaN"
;;   {:added "1.0"
;;    :go "j1(x)"}
;;   [x])
;; 
JOKER FUNC math.Jn has: 
;; (defn ^ABEND042(cannot find typename math.float64) Jn
;;   "Jn returns the order-n Bessel function of the first kind.
;; 
;; Special cases are:
;; 	Jn(n, ±Inf) = 0
;; 	Jn(n, NaN) = NaN"
;;   {:added "1.0"
;;    :go "jn(n, x)"}
;;   [^Int n, x])
;; 
JOKER FUNC math.Ldexp has: 
;; (defn ^ABEND042(cannot find typename math.float64) Ldexp
;;   "Ldexp is the inverse of Frexp.
;; It returns frac × 2**exp.
;; 
;; Special cases are:
;; 	Ldexp(±0, exp) = ±0
;; 	Ldexp(±Inf, exp) = ±Inf
;; 	Ldexp(NaN, exp) = NaN"
;;   {:added "1.0"
;;    :go "ldexp(frac, exp)"}
;;   [frac, ^Int exp])
;; 
JOKER FUNC math.Lgamma has: 
(defn ^[lgamma sign] Lgamma
  "Lgamma returns the natural logarithm and sign (-1 or +1) of Gamma(x).

Special cases are:
	Lgamma(+Inf) = +Inf
	Lgamma(0) = +Inf
	Lgamma(-integer) = +Inf
	Lgamma(-Inf) = -Inf
	Lgamma(NaN) = NaN"
  {:added "1.0"
   :go "lgamma(x)"}
  [x])

JOKER FUNC math.Log has: 
;; (defn ^ABEND042(cannot find typename math.float64) Log
;;   "Log returns the natural logarithm of x.
;; 
;; Special cases are:
;; 	Log(+Inf) = +Inf
;; 	Log(0) = -Inf
;; 	Log(x < 0) = NaN
;; 	Log(NaN) = NaN"
;;   {:added "1.0"
;;    :go "log(x)"}
;;   [x])
;; 
JOKER FUNC math.Log10 has: 
;; (defn ^ABEND042(cannot find typename math.float64) Log10
;;   "Log10 returns the decimal logarithm of x.
;; The special cases are the same as for Log."
;;   {:added "1.0"
;;    :go "log10(x)"}
;;   [x])
;; 
JOKER FUNC math.Log1p has: 
;; (defn ^ABEND042(cannot find typename math.float64) Log1p
;;   "Log1p returns the natural logarithm of 1 plus its argument x.
;; It is more accurate than Log(1 + x) when x is near zero.
;; 
;; Special cases are:
;; 	Log1p(+Inf) = +Inf
;; 	Log1p(±0) = ±0
;; 	Log1p(-1) = -Inf
;; 	Log1p(x < -1) = NaN
;; 	Log1p(NaN) = NaN"
;;   {:added "1.0"
;;    :go "log1p(x)"}
;;   [x])
;; 
JOKER FUNC math.Log2 has: 
;; (defn ^ABEND042(cannot find typename math.float64) Log2
;;   "Log2 returns the binary logarithm of x.
;; The special cases are the same as for Log."
;;   {:added "1.0"
;;    :go "log2(x)"}
;;   [x])
;; 
JOKER FUNC math.Logb has: 
;; (defn ^ABEND042(cannot find typename math.float64) Logb
;;   "Logb returns the binary exponent of x.
;; 
;; Special cases are:
;; 	Logb(±Inf) = +Inf
;; 	Logb(0) = -Inf
;; 	Logb(NaN) = NaN"
;;   {:added "1.0"
;;    :go "logb(x)"}
;;   [x])
;; 
JOKER FUNC math.Max has: 
;; (defn ^ABEND042(cannot find typename math.float64) Max
;;   "Max returns the larger of x or y.
;; 
;; Special cases are:
;; 	Max(x, +Inf) = Max(+Inf, x) = +Inf
;; 	Max(x, NaN) = Max(NaN, x) = NaN
;; 	Max(+0, ±0) = Max(±0, +0) = +0
;; 	Max(-0, -0) = -0"
;;   {:added "1.0"
;;    :go "max(x, y)"}
;;   [x, y])
;; 
JOKER FUNC math.Min has: 
;; (defn ^ABEND042(cannot find typename math.float64) Min
;;   "Min returns the smaller of x or y.
;; 
;; Special cases are:
;; 	Min(x, -Inf) = Min(-Inf, x) = -Inf
;; 	Min(x, NaN) = Min(NaN, x) = NaN
;; 	Min(-0, ±0) = Min(±0, -0) = -0"
;;   {:added "1.0"
;;    :go "min(x, y)"}
;;   [x, y])
;; 
JOKER FUNC math.Mod has: 
;; (defn ^ABEND042(cannot find typename math.float64) Mod
;;   "Mod returns the floating-point remainder of x/y.
;; The magnitude of the result is less than y and its
;; sign agrees with that of x.
;; 
;; Special cases are:
;; 	Mod(±Inf, y) = NaN
;; 	Mod(NaN, y) = NaN
;; 	Mod(x, 0) = NaN
;; 	Mod(x, ±Inf) = x
;; 	Mod(x, NaN) = NaN"
;;   {:added "1.0"
;;    :go "mod(x, y)"}
;;   [x, y])
;; 
JOKER FUNC math.Modf has: 
(defn ^[int frac] Modf
  "Modf returns integer and fractional floating-point numbers
that sum to f. Both values have the same sign as f.

Special cases are:
	Modf(±Inf) = ±Inf, NaN
	Modf(NaN) = NaN, NaN"
  {:added "1.0"
   :go "modf(f)"}
  [f])

JOKER FUNC math.NaN has: 
;; (defn ^ABEND042(cannot find typename math.float64) NaN
;;   "NaN returns an IEEE 754 ``not-a-number'' value."
;;   {:added "1.0"
;;    :go "naN()"}
;;   [])
;; 
JOKER FUNC math.Nextafter has: 
(defn ^r Nextafter
  "Nextafter returns the next representable float64 value after x towards y.

Special cases are:
	Nextafter(x, x)   = x
	Nextafter(NaN, y) = NaN
	Nextafter(x, NaN) = NaN"
  {:added "1.0"
   :go "nextafter(x, y)"}
  [x, y])

JOKER FUNC math.Nextafter32 has: 
(defn ^r Nextafter32
  "Nextafter32 returns the next representable float32 value after x towards y.

Special cases are:
	Nextafter32(x, x)   = x
	Nextafter32(NaN, y) = NaN
	Nextafter32(x, NaN) = NaN"
  {:added "1.0"
   :go "nextafter32(x, y)"}
  [x, y])

JOKER FUNC math.Pow has: 
;; (defn ^ABEND042(cannot find typename math.float64) Pow
;;   "Pow returns x**y, the base-x exponential of y.
;; 
;; Special cases are (in order):
;; 	Pow(x, ±0) = 1 for any x
;; 	Pow(1, y) = 1 for any y
;; 	Pow(x, 1) = x for any x
;; 	Pow(NaN, y) = NaN
;; 	Pow(x, NaN) = NaN
;; 	Pow(±0, y) = ±Inf for y an odd integer < 0
;; 	Pow(±0, -Inf) = +Inf
;; 	Pow(±0, +Inf) = +0
;; 	Pow(±0, y) = +Inf for finite y < 0 and not an odd integer
;; 	Pow(±0, y) = ±0 for y an odd integer > 0
;; 	Pow(±0, y) = +0 for finite y > 0 and not an odd integer
;; 	Pow(-1, ±Inf) = 1
;; 	Pow(x, +Inf) = +Inf for |x| > 1
;; 	Pow(x, -Inf) = +0 for |x| > 1
;; 	Pow(x, +Inf) = +0 for |x| < 1
;; 	Pow(x, -Inf) = +Inf for |x| < 1
;; 	Pow(+Inf, y) = +Inf for y > 0
;; 	Pow(+Inf, y) = +0 for y < 0
;; 	Pow(-Inf, y) = Pow(-0, -y)
;; 	Pow(x, y) = NaN for finite x < 0 and finite non-integer y"
;;   {:added "1.0"
;;    :go "pow(x, y)"}
;;   [x, y])
;; 
JOKER FUNC math.Pow10 has: 
;; (defn ^ABEND042(cannot find typename math.float64) Pow10
;;   "Pow10 returns 10**n, the base-10 exponential of n.
;; 
;; Special cases are:
;; 	Pow10(n) =    0 for n < -323
;; 	Pow10(n) = +Inf for n > 308"
;;   {:added "1.0"
;;    :go "pow10(n)"}
;;   [^Int n])
;; 
JOKER FUNC math.Remainder has: 
;; (defn ^ABEND042(cannot find typename math.float64) Remainder
;;   "Remainder returns the IEEE 754 floating-point remainder of x/y.
;; 
;; Special cases are:
;; 	Remainder(±Inf, y) = NaN
;; 	Remainder(NaN, y) = NaN
;; 	Remainder(x, 0) = NaN
;; 	Remainder(x, ±Inf) = x
;; 	Remainder(x, NaN) = NaN"
;;   {:added "1.0"
;;    :go "remainder(x, y)"}
;;   [x, y])
;; 
JOKER FUNC math.Round has: 
;; (defn ^ABEND042(cannot find typename math.float64) Round
;;   "Round returns the nearest integer, rounding half away from zero.
;; 
;; Special cases are:
;; 	Round(±0) = ±0
;; 	Round(±Inf) = ±Inf
;; 	Round(NaN) = NaN"
;;   {:added "1.0"
;;    :go "round(x)"}
;;   [x])
;; 
JOKER FUNC math.RoundToEven has: 
;; (defn ^ABEND042(cannot find typename math.float64) RoundToEven
;;   "RoundToEven returns the nearest integer, rounding ties to even.
;; 
;; Special cases are:
;; 	RoundToEven(±0) = ±0
;; 	RoundToEven(±Inf) = ±Inf
;; 	RoundToEven(NaN) = NaN"
;;   {:added "1.0"
;;    :go "roundToEven(x)"}
;;   [x])
;; 
JOKER FUNC math.Signbit has: 
;; (defn ^ABEND042(cannot find typename math.bool) Signbit
;;   "Signbit returns true if x is negative or negative zero."
;;   {:added "1.0"
;;    :go "signbit(x)"}
;;   [x])
;; 
JOKER FUNC math.Sin has: 
;; (defn ^ABEND042(cannot find typename math.float64) Sin
;;   "Sin returns the sine of the radian argument x.
;; 
;; Special cases are:
;; 	Sin(±0) = ±0
;; 	Sin(±Inf) = NaN
;; 	Sin(NaN) = NaN"
;;   {:added "1.0"
;;    :go "sin(x)"}
;;   [x])
;; 
JOKER FUNC math.Sincos has: 
(defn ^[sin cos] Sincos
  "Sincos returns Sin(x), Cos(x).

Special cases are:
	Sincos(±0) = ±0, 1
	Sincos(±Inf) = NaN, NaN
	Sincos(NaN) = NaN, NaN"
  {:added "1.0"
   :go "sincos(x)"}
  [x])

JOKER FUNC math.Sinh has: 
;; (defn ^ABEND042(cannot find typename math.float64) Sinh
;;   "Sinh returns the hyperbolic sine of x.
;; 
;; Special cases are:
;; 	Sinh(±0) = ±0
;; 	Sinh(±Inf) = ±Inf
;; 	Sinh(NaN) = NaN"
;;   {:added "1.0"
;;    :go "sinh(x)"}
;;   [x])
;; 
JOKER FUNC math.Sqrt has: 
;; (defn ^ABEND042(cannot find typename math.float64) Sqrt
;;   "Sqrt returns the square root of x.
;; 
;; Special cases are:
;; 	Sqrt(+Inf) = +Inf
;; 	Sqrt(±0) = ±0
;; 	Sqrt(x < 0) = NaN
;; 	Sqrt(NaN) = NaN"
;;   {:added "1.0"
;;    :go "sqrt(x)"}
;;   [x])
;; 
JOKER FUNC math.Tan has: 
;; (defn ^ABEND042(cannot find typename math.float64) Tan
;;   "Tan returns the tangent of the radian argument x.
;; 
;; Special cases are:
;; 	Tan(±0) = ±0
;; 	Tan(±Inf) = NaN
;; 	Tan(NaN) = NaN"
;;   {:added "1.0"
;;    :go "tan(x)"}
;;   [x])
;; 
JOKER FUNC math.Tanh has: 
;; (defn ^ABEND042(cannot find typename math.float64) Tanh
;;   "Tanh returns the hyperbolic tangent of x.
;; 
;; Special cases are:
;; 	Tanh(±0) = ±0
;; 	Tanh(±Inf) = ±1
;; 	Tanh(NaN) = NaN"
;;   {:added "1.0"
;;    :go "tanh(x)"}
;;   [x])
;; 
JOKER FUNC math.Trunc has: 
;; (defn ^ABEND042(cannot find typename math.float64) Trunc
;;   "Trunc returns the integer value of x.
;; 
;; Special cases are:
;; 	Trunc(±0) = ±0
;; 	Trunc(±Inf) = ±Inf
;; 	Trunc(NaN) = NaN"
;;   {:added "1.0"
;;    :go "trunc(x)"}
;;   [x])
;; 
JOKER FUNC math.Y0 has: 
;; (defn ^ABEND042(cannot find typename math.float64) Y0
;;   "Y0 returns the order-zero Bessel function of the second kind.
;; 
;; Special cases are:
;; 	Y0(+Inf) = 0
;; 	Y0(0) = -Inf
;; 	Y0(x < 0) = NaN
;; 	Y0(NaN) = NaN"
;;   {:added "1.0"
;;    :go "y0(x)"}
;;   [x])
;; 
JOKER FUNC math.Y1 has: 
;; (defn ^ABEND042(cannot find typename math.float64) Y1
;;   "Y1 returns the order-one Bessel function of the second kind.
;; 
;; Special cases are:
;; 	Y1(+Inf) = 0
;; 	Y1(0) = -Inf
;; 	Y1(x < 0) = NaN
;; 	Y1(NaN) = NaN"
;;   {:added "1.0"
;;    :go "y1(x)"}
;;   [x])
;; 
JOKER FUNC math.Yn has: 
;; (defn ^ABEND042(cannot find typename math.float64) Yn
;;   "Yn returns the order-n Bessel function of the second kind.
;; 
;; Special cases are:
;; 	Yn(n, +Inf) = 0
;; 	Yn(n ≥ 0, 0) = -Inf
;; 	Yn(n < 0, 0) = +Inf if n is odd, -Inf if n is even
;; 	Yn(n, x < 0) = NaN
;; 	Yn(n, NaN) = NaN"
;;   {:added "1.0"
;;    :go "yn(n, x)"}
;;   [^Int n, x])
;; 
JOKER FUNC math_test.BenchmarkAbs has: 
;; (defn BenchmarkAbs
;;   {:added "1.0"
;;    :go "benchmarkAbs(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{6640623 0xc002be2940}) b])
;; 
JOKER FUNC math_test.BenchmarkAcos has: 
;; (defn BenchmarkAcos
;;   {:added "1.0"
;;    :go "benchmarkAcos(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{6638290 0xc002bcabc0}) b])
;; 
JOKER FUNC math_test.BenchmarkAcosh has: 
;; (defn BenchmarkAcosh
;;   {:added "1.0"
;;    :go "benchmarkAcosh(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{6638398 0xc002bcaea0}) b])
;; 
JOKER FUNC math_test.BenchmarkAsin has: 
;; (defn BenchmarkAsin
;;   {:added "1.0"
;;    :go "benchmarkAsin(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{6638507 0xc002bcb180}) b])
;; 
JOKER FUNC math_test.BenchmarkAsinh has: 
;; (defn BenchmarkAsinh
;;   {:added "1.0"
;;    :go "benchmarkAsinh(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{6638615 0xc002bcb460}) b])
;; 
JOKER FUNC math_test.BenchmarkAtan has: 
;; (defn BenchmarkAtan
;;   {:added "1.0"
;;    :go "benchmarkAtan(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{6638723 0xc002bcb740}) b])
;; 
JOKER FUNC math_test.BenchmarkAtan2 has: 
;; (defn BenchmarkAtan2
;;   {:added "1.0"
;;    :go "benchmarkAtan2(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{6638940 0xc002bcbd00}) b])
;; 
JOKER FUNC math_test.BenchmarkAtanh has: 
;; (defn BenchmarkAtanh
;;   {:added "1.0"
;;    :go "benchmarkAtanh(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{6638831 0xc002bcba20}) b])
;; 
JOKER FUNC math_test.BenchmarkCbrt has: 
;; (defn BenchmarkCbrt
;;   {:added "1.0"
;;    :go "benchmarkCbrt(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{6639051 0xc002bda020}) b])
;; 
JOKER FUNC math_test.BenchmarkCeil has: 
;; (defn BenchmarkCeil
;;   {:added "1.0"
;;    :go "benchmarkCeil(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{6639158 0xc002bda300}) b])
;; 
JOKER FUNC math_test.BenchmarkCopysign has: 
;; (defn BenchmarkCopysign
;;   {:added "1.0"
;;    :go "benchmarkCopysign(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{6639293 0xc002bda640}) b])
;; 
JOKER FUNC math_test.BenchmarkCos has: 
;; (defn BenchmarkCos
;;   {:added "1.0"
;;    :go "benchmarkCos(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{6639416 0xc002bda960}) b])
;; 
JOKER FUNC math_test.BenchmarkCosh has: 
;; (defn BenchmarkCosh
;;   {:added "1.0"
;;    :go "benchmarkCosh(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{6639522 0xc002bdac40}) b])
;; 
JOKER FUNC math_test.BenchmarkDim has: 
;; (defn BenchmarkDim
;;   {:added "1.0"
;;    :go "benchmarkDim(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{6640733 0xc002be2c20}) b])
;; 
JOKER FUNC math_test.BenchmarkErf has: 
;; (defn BenchmarkErf
;;   {:added "1.0"
;;    :go "benchmarkErf(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{6639629 0xc002bdaf20}) b])
;; 
JOKER FUNC math_test.BenchmarkErfc has: 
;; (defn BenchmarkErfc
;;   {:added "1.0"
;;    :go "benchmarkErfc(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{6639735 0xc002bdb200}) b])
;; 
JOKER FUNC math_test.BenchmarkErfcinv has: 
;; (defn BenchmarkErfcinv
;;   {:added "1.0"
;;    :go "benchmarkErfcinv(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{6639956 0xc002bdb7c0}) b])
;; 
JOKER FUNC math_test.BenchmarkErfinv has: 
;; (defn BenchmarkErfinv
;;   {:added "1.0"
;;    :go "benchmarkErfinv(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{6639844 0xc002bdb4e0}) b])
;; 
JOKER FUNC math_test.BenchmarkExp has: 
;; (defn BenchmarkExp
;;   {:added "1.0"
;;    :go "benchmarkExp(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{6640065 0xc002bdbaa0}) b])
;; 
JOKER FUNC math_test.BenchmarkExp2 has: 
;; (defn BenchmarkExp2
;;   {:added "1.0"
;;    :go "benchmarkExp2(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{6640389 0xc002be2340}) b])
;; 
JOKER FUNC math_test.BenchmarkExp2Go has: 
;; (defn BenchmarkExp2Go
;;   {:added "1.0"
;;    :go "benchmarkExp2Go(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{6640498 0xc002be2620}) b])
;; 
JOKER FUNC math_test.BenchmarkExpGo has: 
;; (defn BenchmarkExpGo
;;   {:added "1.0"
;;    :go "benchmarkExpGo(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{6640172 0xc002bdbd80}) b])
;; 
JOKER FUNC math_test.BenchmarkExpm1 has: 
;; (defn BenchmarkExpm1
;;   {:added "1.0"
;;    :go "benchmarkExpm1(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{6640281 0xc002be2060}) b])
;; 
JOKER FUNC math_test.BenchmarkFloor has: 
;; (defn BenchmarkFloor
;;   {:added "1.0"
;;    :go "benchmarkFloor(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{6640848 0xc002be2f40}) b])
;; 
JOKER FUNC math_test.BenchmarkFrexp has: 
;; (defn BenchmarkFrexp
;;   {:added "1.0"
;;    :go "benchmarkFrexp(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{6641281 0xc002be3b80}) b])
;; 
JOKER FUNC math_test.BenchmarkGamma has: 
;; (defn BenchmarkGamma
;;   {:added "1.0"
;;    :go "benchmarkGamma(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{6641413 0xc002be3f20}) b])
;; 
JOKER FUNC math_test.BenchmarkHypot has: 
;; (defn BenchmarkHypot
;;   {:added "1.0"
;;    :go "benchmarkHypot(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{6641523 0xc002bea200}) b])
;; 
JOKER FUNC math_test.BenchmarkHypotGo has: 
;; (defn BenchmarkHypotGo
;;   {:added "1.0"
;;    :go "benchmarkHypotGo(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{6641636 0xc002bea520}) b])
;; 
JOKER FUNC math_test.BenchmarkIlogb has: 
;; (defn BenchmarkIlogb
;;   {:added "1.0"
;;    :go "benchmarkIlogb(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{6641749 0xc002bea840}) b])
;; 
JOKER FUNC math_test.BenchmarkJ0 has: 
;; (defn BenchmarkJ0
;;   {:added "1.0"
;;    :go "benchmarkJ0(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{6641853 0xc002beab20}) b])
;; 
JOKER FUNC math_test.BenchmarkJ1 has: 
;; (defn BenchmarkJ1
;;   {:added "1.0"
;;    :go "benchmarkJ1(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{6641957 0xc002beae00}) b])
;; 
JOKER FUNC math_test.BenchmarkJn has: 
;; (defn BenchmarkJn
;;   {:added "1.0"
;;    :go "benchmarkJn(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{6642061 0xc002beb0e0}) b])
;; 
JOKER FUNC math_test.BenchmarkLdexp has: 
;; (defn BenchmarkLdexp
;;   {:added "1.0"
;;    :go "benchmarkLdexp(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{6642171 0xc002beb400}) b])
;; 
JOKER FUNC math_test.BenchmarkLgamma has: 
;; (defn BenchmarkLgamma
;;   {:added "1.0"
;;    :go "benchmarkLgamma(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{6642284 0xc002beb720}) b])
;; 
JOKER FUNC math_test.BenchmarkLog has: 
;; (defn BenchmarkLog
;;   {:added "1.0"
;;    :go "benchmarkLog(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{6642417 0xc002bebac0}) b])
;; 
JOKER FUNC math_test.BenchmarkLog10 has: 
;; (defn BenchmarkLog10
;;   {:added "1.0"
;;    :go "benchmarkLog10(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{6642740 0xc002bf2360}) b])
;; 
JOKER FUNC math_test.BenchmarkLog1p has: 
;; (defn BenchmarkLog1p
;;   {:added "1.0"
;;    :go "benchmarkLog1p(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{6642631 0xc002bf2080}) b])
;; 
JOKER FUNC math_test.BenchmarkLog2 has: 
;; (defn BenchmarkLog2
;;   {:added "1.0"
;;    :go "benchmarkLog2(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{6642848 0xc002bf2640}) b])
;; 
JOKER FUNC math_test.BenchmarkLogb has: 
;; (defn BenchmarkLogb
;;   {:added "1.0"
;;    :go "benchmarkLogb(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{6642523 0xc002bebda0}) b])
;; 
JOKER FUNC math_test.BenchmarkMax has: 
;; (defn BenchmarkMax
;;   {:added "1.0"
;;    :go "benchmarkMax(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{6640955 0xc002be3220}) b])
;; 
JOKER FUNC math_test.BenchmarkMin has: 
;; (defn BenchmarkMin
;;   {:added "1.0"
;;    :go "benchmarkMin(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{6641063 0xc002be3540}) b])
;; 
JOKER FUNC math_test.BenchmarkMod has: 
;; (defn BenchmarkMod
;;   {:added "1.0"
;;    :go "benchmarkMod(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{6641171 0xc002be3860}) b])
;; 
JOKER FUNC math_test.BenchmarkModf has: 
;; (defn BenchmarkModf
;;   {:added "1.0"
;;    :go "benchmarkModf(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{6642956 0xc002bf2920}) b])
;; 
JOKER FUNC math_test.BenchmarkNextafter32 has: 
;; (defn BenchmarkNextafter32
;;   {:added "1.0"
;;    :go "benchmarkNextafter32(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{6643099 0xc002bf2cc0}) b])
;; 
JOKER FUNC math_test.BenchmarkNextafter64 has: 
;; (defn BenchmarkNextafter64
;;   {:added "1.0"
;;    :go "benchmarkNextafter64(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{6643241 0xc002bf3020}) b])
;; 
JOKER FUNC math_test.BenchmarkPow10Neg has: 
;; (defn BenchmarkPow10Neg
;;   {:added "1.0"
;;    :go "benchmarkPow10Neg(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{6643754 0xc002bf3d40}) b])
;; 
JOKER FUNC math_test.BenchmarkPow10Pos has: 
;; (defn BenchmarkPow10Pos
;;   {:added "1.0"
;;    :go "benchmarkPow10Pos(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{6643610 0xc002bf39e0}) b])
;; 
JOKER FUNC math_test.BenchmarkPowFrac has: 
;; (defn BenchmarkPowFrac
;;   {:added "1.0"
;;    :go "benchmarkPowFrac(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{6643469 0xc002bf3660}) b])
;; 
JOKER FUNC math_test.BenchmarkPowInt has: 
;; (defn BenchmarkPowInt
;;   {:added "1.0"
;;    :go "benchmarkPowInt(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{6643358 0xc002bf3340}) b])
;; 
JOKER FUNC math_test.BenchmarkRemainder has: 
;; (defn BenchmarkRemainder
;;   {:added "1.0"
;;    :go "benchmarkRemainder(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{6644145 0xc002bf8660}) b])
;; 
JOKER FUNC math_test.BenchmarkRound has: 
;; (defn BenchmarkRound
;;   {:added "1.0"
;;    :go "benchmarkRound(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{6643899 0xc002bf80a0}) b])
;; 
JOKER FUNC math_test.BenchmarkRoundToEven has: 
;; (defn BenchmarkRoundToEven
;;   {:added "1.0"
;;    :go "benchmarkRoundToEven(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{6644020 0xc002bf8380}) b])
;; 
JOKER FUNC math_test.BenchmarkSignbit has: 
;; (defn BenchmarkSignbit
;;   {:added "1.0"
;;    :go "benchmarkSignbit(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{6644285 0xc002bf89c0}) b])
;; 
JOKER FUNC math_test.BenchmarkSin has: 
;; (defn BenchmarkSin
;;   {:added "1.0"
;;    :go "benchmarkSin(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{6644404 0xc002bf8ca0}) b])
;; 
JOKER FUNC math_test.BenchmarkSincos has: 
;; (defn BenchmarkSincos
;;   {:added "1.0"
;;    :go "benchmarkSincos(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{6644512 0xc002bf8f80}) b])
;; 
JOKER FUNC math_test.BenchmarkSinh has: 
;; (defn BenchmarkSinh
;;   {:added "1.0"
;;    :go "benchmarkSinh(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{6644649 0xc002bf9320}) b])
;; 
JOKER FUNC math_test.BenchmarkSqrtGoLatency has: 
;; (defn BenchmarkSqrtGoLatency
;;   {:added "1.0"
;;    :go "benchmarkSqrtGoLatency(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{6645142 0xc002bf9fa0}) b])
;; 
JOKER FUNC math_test.BenchmarkSqrtIndirect has: 
;; (defn BenchmarkSqrtIndirect
;;   {:added "1.0"
;;    :go "benchmarkSqrtIndirect(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{6644765 0xc002bf9600}) b])
;; 
JOKER FUNC math_test.BenchmarkSqrtIndirectLatency has: 
;; (defn BenchmarkSqrtIndirectLatency
;;   {:added "1.0"
;;    :go "benchmarkSqrtIndirectLatency(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{6645018 0xc002bf9c80}) b])
;; 
JOKER FUNC math_test.BenchmarkSqrtLatency has: 
;; (defn BenchmarkSqrtLatency
;;   {:added "1.0"
;;    :go "benchmarkSqrtLatency(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{6644896 0xc002bf99a0}) b])
;; 
JOKER FUNC math_test.BenchmarkSqrtPrime has: 
;; (defn BenchmarkSqrtPrime
;;   {:added "1.0"
;;    :go "benchmarkSqrtPrime(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{6645645 0xc002c00620}) b])
;; 
JOKER FUNC math_test.BenchmarkTan has: 
;; (defn BenchmarkTan
;;   {:added "1.0"
;;    :go "benchmarkTan(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{6645760 0xc002c00900}) b])
;; 
JOKER FUNC math_test.BenchmarkTanh has: 
;; (defn BenchmarkTanh
;;   {:added "1.0"
;;    :go "benchmarkTanh(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{6645866 0xc002c00be0}) b])
;; 
JOKER FUNC math_test.BenchmarkTrunc has: 
;; (defn BenchmarkTrunc
;;   {:added "1.0"
;;    :go "benchmarkTrunc(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{6645974 0xc002c00ec0}) b])
;; 
JOKER FUNC math_test.BenchmarkY0 has: 
;; (defn BenchmarkY0
;;   {:added "1.0"
;;    :go "benchmarkY0(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{6646080 0xc002c011a0}) b])
;; 
JOKER FUNC math_test.BenchmarkY1 has: 
;; (defn BenchmarkY1
;;   {:added "1.0"
;;    :go "benchmarkY1(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{6646184 0xc002c01480}) b])
;; 
JOKER FUNC math_test.BenchmarkYn has: 
;; (defn BenchmarkYn
;;   {:added "1.0"
;;    :go "benchmarkYn(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{6646288 0xc002c01760}) b])
;; 
JOKER FUNC math_test.ExampleAcos has: 
;; (defn ExampleAcos
;;   {:added "1.0"
;;    :go "exampleAcos()"}
;;   [])
;; 
JOKER FUNC math_test.ExampleAcosh has: 
;; (defn ExampleAcosh
;;   {:added "1.0"
;;    :go "exampleAcosh()"}
;;   [])
;; 
JOKER FUNC math_test.ExampleAsin has: 
;; (defn ExampleAsin
;;   {:added "1.0"
;;    :go "exampleAsin()"}
;;   [])
;; 
JOKER FUNC math_test.ExampleAsinh has: 
;; (defn ExampleAsinh
;;   {:added "1.0"
;;    :go "exampleAsinh()"}
;;   [])
;; 
JOKER FUNC math_test.ExampleAtan has: 
;; (defn ExampleAtan
;;   {:added "1.0"
;;    :go "exampleAtan()"}
;;   [])
;; 
JOKER FUNC math_test.ExampleAtan2 has: 
;; (defn ExampleAtan2
;;   {:added "1.0"
;;    :go "exampleAtan2()"}
;;   [])
;; 
JOKER FUNC math_test.ExampleAtanh has: 
;; (defn ExampleAtanh
;;   {:added "1.0"
;;    :go "exampleAtanh()"}
;;   [])
;; 
JOKER FUNC math_test.ExampleCeil has: 
;; (defn ExampleCeil
;;   {:added "1.0"
;;    :go "exampleCeil()"}
;;   [])
;; 
JOKER FUNC math_test.ExampleCos has: 
;; (defn ExampleCos
;;   {:added "1.0"
;;    :go "exampleCos()"}
;;   [])
;; 
JOKER FUNC math_test.ExampleCosh has: 
;; (defn ExampleCosh
;;   {:added "1.0"
;;    :go "exampleCosh()"}
;;   [])
;; 
JOKER FUNC math_test.ExampleFloor has: 
;; (defn ExampleFloor
;;   {:added "1.0"
;;    :go "exampleFloor()"}
;;   [])
;; 
JOKER FUNC math_test.ExamplePow has: 
;; (defn ExamplePow
;;   {:added "1.0"
;;    :go "examplePow()"}
;;   [])
;; 
JOKER FUNC math_test.ExamplePow10 has: 
;; (defn ExamplePow10
;;   {:added "1.0"
;;    :go "examplePow10()"}
;;   [])
;; 
JOKER FUNC math_test.ExampleSin has: 
;; (defn ExampleSin
;;   {:added "1.0"
;;    :go "exampleSin()"}
;;   [])
;; 
JOKER FUNC math_test.ExampleSincos has: 
;; (defn ExampleSincos
;;   {:added "1.0"
;;    :go "exampleSincos()"}
;;   [])
;; 
JOKER FUNC math_test.ExampleSinh has: 
;; (defn ExampleSinh
;;   {:added "1.0"
;;    :go "exampleSinh()"}
;;   [])
;; 
JOKER FUNC math_test.ExampleSqrt has: 
;; (defn ExampleSqrt
;;   {:added "1.0"
;;    :go "exampleSqrt()"}
;;   [])
;; 
JOKER FUNC math_test.ExampleTan has: 
;; (defn ExampleTan
;;   {:added "1.0"
;;    :go "exampleTan()"}
;;   [])
;; 
JOKER FUNC math_test.ExampleTanh has: 
;; (defn ExampleTanh
;;   {:added "1.0"
;;    :go "exampleTanh()"}
;;   [])
;; 
JOKER FUNC math_test.TestAbs has: 
;; (defn TestAbs
;;   {:added "1.0"
;;    :go "testAbs(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{6617647 0xc002b54880}) t])
;; 
JOKER FUNC math_test.TestAcos has: 
;; (defn TestAcos
;;   {:added "1.0"
;;    :go "testAcos(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{6609623 0xc00229f2e0}) t])
;; 
JOKER FUNC math_test.TestAcosh has: 
;; (defn TestAcosh
;;   {:added "1.0"
;;    :go "testAcosh(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{6609969 0xc00229fb00}) t])
;; 
JOKER FUNC math_test.TestAsin has: 
;; (defn TestAsin
;;   {:added "1.0"
;;    :go "testAsin(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{6610333 0xc002b24340}) t])
;; 
JOKER FUNC math_test.TestAsinh has: 
;; (defn TestAsinh
;;   {:added "1.0"
;;    :go "testAsinh(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{6610683 0xc002b24b60}) t])
;; 
JOKER FUNC math_test.TestAtan has: 
;; (defn TestAtan
;;   {:added "1.0"
;;    :go "testAtan(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{6611033 0xc002b25320}) t])
;; 
JOKER FUNC math_test.TestAtan2 has: 
;; (defn TestAtan2
;;   {:added "1.0"
;;    :go "testAtan2(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{6611734 0xc002b38300}) t])
;; 
JOKER FUNC math_test.TestAtanh has: 
;; (defn TestAtanh
;;   {:added "1.0"
;;    :go "testAtanh(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{6611373 0xc002b25ae0}) t])
;; 
JOKER FUNC math_test.TestCbrt has: 
;; (defn TestCbrt
;;   {:added "1.0"
;;    :go "testCbrt(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{6612136 0xc002b38c20}) t])
;; 
JOKER FUNC math_test.TestCeil has: 
;; (defn TestCeil
;;   {:added "1.0"
;;    :go "testCeil(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{6612475 0xc002b393e0}) t])
;; 
JOKER FUNC math_test.TestCopysign has: 
;; (defn TestCopysign
;;   {:added "1.0"
;;    :go "testCopysign(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{6612808 0xc002b39b40}) t])
;; 
JOKER FUNC math_test.TestCos has: 
;; (defn TestCos
;;   {:added "1.0"
;;    :go "testCos(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{6613354 0xc002b3a6e0}) t])
;; 
JOKER FUNC math_test.TestCosh has: 
;; (defn TestCosh
;;   {:added "1.0"
;;    :go "testCosh(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{6613682 0xc002b3aea0}) t])
;; 
JOKER FUNC math_test.TestDim has: 
;; (defn TestDim
;;   {:added "1.0"
;;    :go "testDim(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{6617971 0xc002b54fe0}) t])
;; 
JOKER FUNC math_test.TestErf has: 
;; (defn TestErf
;;   {:added "1.0"
;;    :go "testErf(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{6614016 0xc002b3b660}) t])
;; 
JOKER FUNC math_test.TestErfc has: 
;; (defn TestErfc
;;   {:added "1.0"
;;    :go "testErfc(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{6614354 0xc002b3be80}) t])
;; 
JOKER FUNC math_test.TestErfcinv has: 
;; (defn TestErfcinv
;;   {:added "1.0"
;;    :go "testErfcinv(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{6615361 0xc002b434c0}) t])
;; 
JOKER FUNC math_test.TestErfinv has: 
;; (defn TestErfinv
;;   {:added "1.0"
;;    :go "testErfinv(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{6614705 0xc002b426a0}) t])
;; 
JOKER FUNC math_test.TestExp has: 
;; (defn TestExp
;;   {:added "1.0"
;;    :go "testExp(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{6616034 0xc002b482e0}) t])
;; 
JOKER FUNC math_test.TestExp2 has: 
;; (defn TestExp2
;;   {:added "1.0"
;;    :go "testExp2(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{6617022 0xc002b499e0}) t])
;; 
JOKER FUNC math_test.TestExpm1 has: 
;; (defn TestExpm1
;;   {:added "1.0"
;;    :go "testExpm1(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{6616497 0xc002b48e00}) t])
;; 
JOKER FUNC math_test.TestFloatMinMax has: 
;; (defn TestFloatMinMax
;;   {:added "1.0"
;;    :go "testFloatMinMax(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{6637804 0xc002bca560}) t])
;; 
JOKER FUNC math_test.TestFloor has: 
;; (defn TestFloor
;;   {:added "1.0"
;;    :go "testFloor(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{6618558 0xc002b55d40}) t])
;; 
JOKER FUNC math_test.TestFrexp has: 
;; (defn TestFrexp
;;   {:added "1.0"
;;    :go "testFrexp(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{6620702 0xc002b5ea80}) t])
;; 
JOKER FUNC math_test.TestGamma has: 
;; (defn TestGamma
;;   {:added "1.0"
;;    :go "testGamma(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{6621377 0xc002b5fba0}) t])
;; 
JOKER FUNC math_test.TestHypot has: 
;; (defn TestHypot
;;   {:added "1.0"
;;    :go "testHypot(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{6621877 0xc002b687c0}) t])
;; 
JOKER FUNC math_test.TestHypotGo has: 
;; (defn TestHypotGo
;;   {:added "1.0"
;;    :go "testHypotGo(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{6622348 0xc002b69280}) t])
;; 
JOKER FUNC math_test.TestIlogb has: 
;; (defn TestIlogb
;;   {:added "1.0"
;;    :go "testIlogb(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{6622825 0xc002b69d40}) t])
;; 
JOKER FUNC math_test.TestJ0 has: 
;; (defn TestJ0
;;   {:added "1.0"
;;    :go "testJ0(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{6623378 0xc002b70860}) t])
;; 
JOKER FUNC math_test.TestJ1 has: 
;; (defn TestJ1
;;   {:added "1.0"
;;    :go "testJ1(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{6623698 0xc002b71040}) t])
;; 
JOKER FUNC math_test.TestJn has: 
;; (defn TestJn
;;   {:added "1.0"
;;    :go "testJn(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{6624009 0xc002b71800}) t])
;; 
JOKER FUNC math_test.TestLargeCos has: 
;; (defn TestLargeCos
;;   "Check that math functions of high angle values
;; return accurate results. [Since (vf[i] + large) - large != vf[i],
;; testing for Trig(vf[i] + large) == Trig(vf[i]), where large is
;; a multiple of 2*Pi, is misleading.]"
;;   {:added "1.0"
;;    :go "testLargeCos(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{6636287 0xc002bc4980}) t])
;; 
JOKER FUNC math_test.TestLargeSin has: 
;; (defn TestLargeSin
;;   {:added "1.0"
;;    :go "testLargeSin(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{6636521 0xc002bc4ee0}) t])
;; 
JOKER FUNC math_test.TestLargeSincos has: 
;; (defn TestLargeSincos
;;   {:added "1.0"
;;    :go "testLargeSincos(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{6636758 0xc002bc5440}) t])
;; 
JOKER FUNC math_test.TestLargeTan has: 
;; (defn TestLargeTan
;;   {:added "1.0"
;;    :go "testLargeTan(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{6637053 0xc002bc5b60}) t])
;; 
JOKER FUNC math_test.TestLdexp has: 
;; (defn TestLdexp
;;   {:added "1.0"
;;    :go "testLdexp(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{6624561 0xc002b72640}) t])
;; 
JOKER FUNC math_test.TestLgamma has: 
;; (defn TestLgamma
;;   {:added "1.0"
;;    :go "testLgamma(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{6625604 0xc002b7e040}) t])
;; 
JOKER FUNC math_test.TestLog has: 
;; (defn TestLog
;;   {:added "1.0"
;;    :go "testLog(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{6626066 0xc002b7ec00}) t])
;; 
JOKER FUNC math_test.TestLog10 has: 
;; (defn TestLog10
;;   {:added "1.0"
;;    :go "testLog10(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{6626973 0xc002b82020}) t])
;; 
JOKER FUNC math_test.TestLog1p has: 
;; (defn TestLog1p
;;   {:added "1.0"
;;    :go "testLog1p(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{6627412 0xc002b829e0}) t])
;; 
JOKER FUNC math_test.TestLog2 has: 
;; (defn TestLog2
;;   {:added "1.0"
;;    :go "testLog2(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{6627865 0xc002b833e0}) t])
;; 
JOKER FUNC math_test.TestLogb has: 
;; (defn TestLogb
;;   {:added "1.0"
;;    :go "testLogb(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{6626478 0xc002b7f560}) t])
;; 
JOKER FUNC math_test.TestMax has: 
;; (defn TestMax
;;   {:added "1.0"
;;    :go "testMax(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{6618892 0xc002b5a4a0}) t])
;; 
JOKER FUNC math_test.TestMin has: 
;; (defn TestMin
;;   {:added "1.0"
;;    :go "testMin(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{6619487 0xc002b5b240}) t])
;; 
JOKER FUNC math_test.TestMod has: 
;; (defn TestMod
;;   {:added "1.0"
;;    :go "testMod(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{6620086 0xc002b5bfe0}) t])
;; 
JOKER FUNC math_test.TestModf has: 
;; (defn TestModf
;;   {:added "1.0"
;;    :go "testModf(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{6628441 0xc002b96100}) t])
;; 
JOKER FUNC math_test.TestNaN has: 
;; (defn TestNaN
;;   {:added "1.0"
;;    :go "testNaN(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{6609411 0xc00229ef40}) t])
;; 
JOKER FUNC math_test.TestNextafter32 has: 
;; (defn TestNextafter32
;;   {:added "1.0"
;;    :go "testNextafter32(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{6628909 0xc002b96c80}) t])
;; 
JOKER FUNC math_test.TestNextafter64 has: 
;; (defn TestNextafter64
;;   {:added "1.0"
;;    :go "testNextafter64(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{6629428 0xc002b97600}) t])
;; 
JOKER FUNC math_test.TestPow has: 
;; (defn TestPow
;;   {:added "1.0"
;;    :go "testPow(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{6629897 0xc002b97ee0}) t])
;; 
JOKER FUNC math_test.TestPow10 has: 
;; (defn TestPow10
;;   {:added "1.0"
;;    :go "testPow10(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{6630270 0xc002baa800}) t])
;; 
JOKER FUNC math_test.TestRemainder has: 
;; (defn TestRemainder
;;   {:added "1.0"
;;    :go "testRemainder(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{6630477 0xc002baac40}) t])
;; 
JOKER FUNC math_test.TestRound has: 
;; (defn TestRound
;;   {:added "1.0"
;;    :go "testRound(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{6631135 0xc002bab700}) t])
;; 
JOKER FUNC math_test.TestRoundToEven has: 
;; (defn TestRoundToEven
;;   {:added "1.0"
;;    :go "testRoundToEven(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{6631504 0xc002babf40}) t])
;; 
JOKER FUNC math_test.TestSignbit has: 
;; (defn TestSignbit
;;   {:added "1.0"
;;    :go "testSignbit(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{6631913 0xc002bb2780}) t])
;; 
JOKER FUNC math_test.TestSin has: 
;; (defn TestSin
;;   {:added "1.0"
;;    :go "testSin(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{6632267 0xc002bb2e80}) t])
;; 
JOKER FUNC math_test.TestSincos has: 
;; (defn TestSincos
;;   {:added "1.0"
;;    :go "testSincos(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{6632597 0xc002bb3640}) t])
;; 
JOKER FUNC math_test.TestSinh has: 
;; (defn TestSinh
;;   {:added "1.0"
;;    :go "testSinh(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{6632822 0xc002bb3be0}) t])
;; 
JOKER FUNC math_test.TestSqrt has: 
;; (defn TestSqrt
;;   {:added "1.0"
;;    :go "testSqrt(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{6633157 0xc002bb63a0}) t])
;; 
JOKER FUNC math_test.TestTan has: 
;; (defn TestTan
;;   {:added "1.0"
;;    :go "testTan(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{6633732 0xc002bb7060}) t])
;; 
JOKER FUNC math_test.TestTanh has: 
;; (defn TestTanh
;;   {:added "1.0"
;;    :go "testTanh(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{6634090 0xc002bb7860}) t])
;; 
JOKER FUNC math_test.TestTrunc has: 
;; (defn TestTrunc
;;   {:added "1.0"
;;    :go "testTrunc(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{6634430 0xc002bc0020}) t])
;; 
JOKER FUNC math_test.TestY0 has: 
;; (defn TestY0
;;   {:added "1.0"
;;    :go "testY0(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{6634763 0xc002bc0780}) t])
;; 
JOKER FUNC math_test.TestY1 has: 
;; (defn TestY1
;;   {:added "1.0"
;;    :go "testY1(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{6635084 0xc002bc0fa0}) t])
;; 
JOKER FUNC math_test.TestYn has: 
;; (defn TestYn
;;   {:added "1.0"
;;    :go "testYn(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{6635414 0xc002bc17e0}) t])
;; 
JOKER FUNC md5.BenchmarkHash1K has: 
;; (defn BenchmarkHash1K
;;   {:added "1.0"
;;    :go "benchmarkHash1K(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{1294633 0xc000b89600}) b])
;; 
JOKER FUNC md5.BenchmarkHash1KUnaligned has: 
;; (defn BenchmarkHash1KUnaligned
;;   {:added "1.0"
;;    :go "benchmarkHash1KUnaligned(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{1294864 0xc000b89a80}) b])
;; 
JOKER FUNC md5.BenchmarkHash8Bytes has: 
;; (defn BenchmarkHash8Bytes
;;   {:added "1.0"
;;    :go "benchmarkHash8Bytes(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{1294565 0xc000b89480}) b])
;; 
JOKER FUNC md5.BenchmarkHash8BytesUnaligned has: 
;; (defn BenchmarkHash8BytesUnaligned
;;   {:added "1.0"
;;    :go "benchmarkHash8BytesUnaligned(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{1294788 0xc000b89900}) b])
;; 
JOKER FUNC md5.BenchmarkHash8K has: 
;; (defn BenchmarkHash8K
;;   {:added "1.0"
;;    :go "benchmarkHash8K(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{1294704 0xc000b89780}) b])
;; 
JOKER FUNC md5.BenchmarkHash8KUnaligned has: 
;; (defn BenchmarkHash8KUnaligned
;;   {:added "1.0"
;;    :go "benchmarkHash8KUnaligned(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{1294943 0xc000b89c00}) b])
;; 
JOKER FUNC md5.New has: 
;; (defn ^ABEND881(unrecognized Expr type *ast.SelectorExpr at: &{hash Hash}) New
;;   "New returns a new hash.Hash computing the MD5 checksum. The Hash also
;; implements encoding.BinaryMarshaler and encoding.BinaryUnmarshaler to
;; marshal and unmarshal the internal state of the hash."
;;   {:added "1.0"
;;    :go "new()"}
;;   [])
;; 
JOKER FUNC md5.Sum has: 
;; (defn ^[ABEND042(cannot find typename md5.byte)] Sum
;;   "Sum returns the MD5 checksum of the data."
;;   {:added "1.0"
;;    :go "sum(data)"}
;;   [^ABEND881(unrecognized Expr type *ast.ArrayType at: &{1299473 <nil> byte}) data])
;; 
JOKER FUNC md5.TestBlockGeneric has: 
;; (defn TestBlockGeneric
;;   "Tests that blockGeneric (pure Go) and block (in assembly for amd64, 386, arm) match."
;;   {:added "1.0"
;;    :go "testBlockGeneric(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{1293863 0xc000b884e0}) t])
;; 
JOKER FUNC md5.TestGolden has: 
;; (defn TestGolden
;;   {:added "1.0"
;;    :go "testGolden(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{1291635 0xc000b7f380}) t])
;; 
JOKER FUNC md5.TestGoldenMarshal has: 
;; (defn TestGoldenMarshal
;;   {:added "1.0"
;;    :go "testGoldenMarshal(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{1292366 0xc000b867c0}) t])
;; 
JOKER FUNC md5.TestLarge has: 
;; (defn TestLarge
;;   {:added "1.0"
;;    :go "testLarge(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{1293140 0xc000b87960}) t])
;; 
JOKER FUNC md5_test.ExampleNew has: 
;; (defn ExampleNew
;;   {:added "1.0"
;;    :go "exampleNew()"}
;;   [])
;; 
JOKER FUNC md5_test.ExampleNew_file has: 
;; (defn ExampleNew_file
;;   {:added "1.0"
;;    :go "exampleNew_file()"}
;;   [])
;; 
JOKER FUNC md5_test.ExampleSum has: 
;; (defn ExampleSum
;;   {:added "1.0"
;;    :go "exampleSum()"}
;;   [])
;; 
JOKER FUNC mime.AddExtensionType has: 
(defn ^Error AddExtensionType
  "AddExtensionType sets the MIME type associated with
the extension ext to typ. The extension should begin with
a leading dot, as in ".html"."
  {:added "1.0"
   :go "addExtensionType(ext, typ)"}
  [^String ext, ^String typ])

JOKER FUNC mime.BenchmarkExtensionsByType has: 
;; (defn BenchmarkExtensionsByType
;;   {:added "1.0"
;;    :go "benchmarkExtensionsByType(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{7319204 0xc00365a660}) b])
;; 
JOKER FUNC mime.BenchmarkQDecodeHeader has: 
;; (defn BenchmarkQDecodeHeader
;;   {:added "1.0"
;;    :go "benchmarkQDecodeHeader(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{7347165 0xc0036cc3e0}) b])
;; 
JOKER FUNC mime.BenchmarkQDecodeWord has: 
;; (defn BenchmarkQDecodeWord
;;   {:added "1.0"
;;    :go "benchmarkQDecodeWord(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{7347009 0xc0036cc100}) b])
;; 
JOKER FUNC mime.BenchmarkQEncodeWord has: 
;; (defn BenchmarkQEncodeWord
;;   {:added "1.0"
;;    :go "benchmarkQEncodeWord(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{7346886 0xc0036c9e60}) b])
;; 
JOKER FUNC mime.BenchmarkTypeByExtension has: 
;; (defn BenchmarkTypeByExtension
;;   {:added "1.0"
;;    :go "benchmarkTypeByExtension(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{7318914 0xc00365a0a0}) b])
;; 
JOKER FUNC mime.ExtensionsByType has: 
(defn ^[[String] Error] ExtensionsByType
  "ExtensionsByType returns the extensions known to be associated with the MIME
type typ. The returned extensions will each begin with a leading dot, as in
".html". When typ has no associated extensions, ExtensionsByType returns an
nil slice."
  {:added "1.0"
   :go "extensionsByType(typ)"}
  [^String typ])

JOKER FUNC mime.FormatMediaType has: 
;; (defn ^String FormatMediaType
;;   "FormatMediaType serializes mediatype t and the parameters
;; param as a media type conforming to RFC 2045 and RFC 2616.
;; The type and parameter names are written in lower-case.
;; When any of the arguments result in a standard violation then
;; FormatMediaType returns the empty string."
;;   {:added "1.0"
;;    :go "formatMediaType(t, param)"}
;;   [^String t, ^ABEND881(unrecognized Expr type *ast.MapType at: &{7320117 string string}) param])
;; 
JOKER FUNC mime.ParseMediaType has: 
(defn ^[mediatype params err] ParseMediaType
  "ParseMediaType parses a media type value and any optional
parameters, per RFC 1521.  Media types are the values in
Content-Type and Content-Disposition headers (RFC 2183).
On success, ParseMediaType returns the media type converted
to lowercase and trimmed of white space and a non-nil map.
If there is an error parsing the optional parameter,
the media type will be returned along with the error
ErrInvalidMediaParameter.
The returned map, params, maps from the lowercase
attribute to the attribute value with its case preserved."
  {:added "1.0"
   :go "parseMediaType(v)"}
  [^String v])

JOKER FUNC mime.TestCharsetDecoder has: 
;; (defn TestCharsetDecoder
;;   {:added "1.0"
;;    :go "testCharsetDecoder(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{7345161 0xc0036c8200}) t])
;; 
JOKER FUNC mime.TestCharsetDecoderError has: 
;; (defn TestCharsetDecoderError
;;   {:added "1.0"
;;    :go "testCharsetDecoderError(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{7346576 0xc0036c98e0}) t])
;; 
JOKER FUNC mime.TestConsumeMediaParam has: 
;; (defn TestConsumeMediaParam
;;   {:added "1.0"
;;    :go "testConsumeMediaParam(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{7348880 0xc0036cdc00}) t])
;; 
JOKER FUNC mime.TestConsumeToken has: 
;; (defn TestConsumeToken
;;   {:added "1.0"
;;    :go "testConsumeToken(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{7347529 0xc0036cc820}) t])
;; 
JOKER FUNC mime.TestConsumeValue has: 
;; (defn TestConsumeValue
;;   {:added "1.0"
;;    :go "testConsumeValue(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{7348113 0xc0036cd140}) t])
;; 
JOKER FUNC mime.TestDecodeHeader has: 
;; (defn TestDecodeHeader
;;   {:added "1.0"
;;    :go "testDecodeHeader(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{7343701 0xc0036c3080}) t])
;; 
JOKER FUNC mime.TestDecodeWord has: 
;; (defn TestDecodeWord
;;   {:added "1.0"
;;    :go "testDecodeWord(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{7342586 0xc0036bbfa0}) t])
;; 
JOKER FUNC mime.TestEncodeWord has: 
;; (defn TestEncodeWord
;;   {:added "1.0"
;;    :go "testEncodeWord(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{7340394 0xc0036b18c0}) t])
;; 
JOKER FUNC mime.TestEncodedWordLength has: 
;; (defn TestEncodedWordLength
;;   {:added "1.0"
;;    :go "testEncodedWordLength(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{7341864 0xc0036bb260}) t])
;; 
JOKER FUNC mime.TestExtensionsByType has: 
;; (defn TestExtensionsByType
;;   {:added "1.0"
;;    :go "testExtensionsByType(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{7317655 0xc0036509e0}) t])
;; 
JOKER FUNC mime.TestFormatMediaType has: 
;; (defn TestFormatMediaType
;;   {:added "1.0"
;;    :go "testFormatMediaType(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{7363417 0xc0036e8d40}) t])
;; 
JOKER FUNC mime.TestLookupMallocs has: 
;; (defn TestLookupMallocs
;;   {:added "1.0"
;;    :go "testLookupMallocs(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{7318712 0xc003651d20}) t])
;; 
JOKER FUNC mime.TestParseMediaType has: 
;; (defn TestParseMediaType
;;   {:added "1.0"
;;    :go "testParseMediaType(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{7350157 0xc0036d6ce0}) t])
;; 
JOKER FUNC mime.TestParseMediaTypeBogus has: 
;; (defn TestParseMediaTypeBogus
;;   {:added "1.0"
;;    :go "testParseMediaTypeBogus(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{7361467 0xc0036e52c0}) t])
;; 
JOKER FUNC mime.TestTypeByExtension has: 
;; (defn TestTypeByExtension
;;   {:added "1.0"
;;    :go "testTypeByExtension(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{7315854 0xc00364b4c0}) t])
;; 
JOKER FUNC mime.TestTypeByExtensionCase has: 
;; (defn TestTypeByExtensionCase
;;   {:added "1.0"
;;    :go "testTypeByExtensionCase(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{7317022 0xc0036501a0}) t])
;; 
JOKER FUNC mime.TestTypeByExtension_LocalData has: 
;; (defn TestTypeByExtension_LocalData
;;   {:added "1.0"
;;    :go "testTypeByExtension_LocalData(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{7316451 0xc00364b9e0}) t])
;; 
JOKER FUNC mime.TypeByExtension has: 
(defn ^String TypeByExtension
  "TypeByExtension returns the MIME type associated with the file extension ext.
The extension ext should begin with a leading dot, as in ".html".
When ext has no associated type, TypeByExtension returns "".

Extensions are looked up first case-sensitively, then case-insensitively.

The built-in table is small but on unix it is augmented by the local
system's mime.types file(s) if available under one or more of these
names:

  /etc/mime.types
  /etc/apache2/mime.types
  /etc/apache/mime.types

On Windows, MIME types are extracted from the registry.

Text types have the charset parameter set to "utf-8" by default."
  {:added "1.0"
   :go "typeByExtension(ext)"}
  [^String ext])

JOKER FUNC mime_test.ExampleWordDecoder_Decode has: 
;; (defn ExampleWordDecoder_Decode
;;   {:added "1.0"
;;    :go "exampleWordDecoder_Decode()"}
;;   [])
;; 
JOKER FUNC mime_test.ExampleWordDecoder_DecodeHeader has: 
;; (defn ExampleWordDecoder_DecodeHeader
;;   {:added "1.0"
;;    :go "exampleWordDecoder_DecodeHeader()"}
;;   [])
;; 
JOKER FUNC mime_test.ExampleWordEncoder_Encode has: 
;; (defn ExampleWordEncoder_Encode
;;   {:added "1.0"
;;    :go "exampleWordEncoder_Encode()"}
;;   [])
;; 
JOKER FUNC multipart.NewReader has: 
;; (defn ^{:bufreader ^ABEND881(unrecognized Expr type *ast.StarExpr at: &{7420495 0xc002691400}) bufReader, :currentpart ^ABEND881(unrecognized Expr type *ast.StarExpr at: &{7420523 Part}) currentPart, :partsread ^Int partsRead, :nl ^ABEND881(unrecognized Expr type *ast.ArrayType at: &{7420565 <nil> byte}) nl, :nldashboundary ^ABEND881(unrecognized Expr type *ast.ArrayType at: &{7420647 <nil> byte}) nlDashBoundary, :dashboundarydash ^ABEND881(unrecognized Expr type *ast.ArrayType at: &{7420693 <nil> byte}) dashBoundaryDash, :dashboundary ^ABEND881(unrecognized Expr type *ast.ArrayType at: &{7420736 <nil> byte}) dashBoundary} NewReader
;;   "NewReader creates a new multipart Reader reading from r using the
;; given MIME boundary.
;; 
;; The boundary is usually obtained from the "boundary" parameter of
;; the message's "Content-Type" header. Use mime.ParseMediaType to
;; parse such headers."
;;   {:added "1.0"
;;    :go "newReader(r, boundary)"}
;;   [^ABEND881(unrecognized Expr type *ast.SelectorExpr at: &{io Reader}) r, ^String boundary])
;; 
JOKER FUNC multipart.NewWriter has: 
;; (defn ^{:w ^ABEND881(unrecognized Expr type *ast.SelectorExpr at: &{io Writer}) w, :boundary ^String boundary, :lastpart ^ABEND881(unrecognized Expr type *ast.StarExpr at: &{7375423 part}) lastpart} NewWriter
;;   "NewWriter returns a new multipart Writer with a random boundary,
;; writing to w."
;;   {:added "1.0"
;;    :go "newWriter(w)"}
;;   [^ABEND881(unrecognized Expr type *ast.SelectorExpr at: &{io Writer}) w])
;; 
JOKER FUNC multipart.TestBoundaryLine has: 
;; (defn TestBoundaryLine
;;   {:added "1.0"
;;    :go "testBoundaryLine(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{7384269 0xc003748bc0}) t])
;; 
JOKER FUNC multipart.TestLineContinuation has: 
;; (defn TestLineContinuation
;;   {:added "1.0"
;;    :go "testLineContinuation(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{7393274 0xc003777a80}) t])
;; 
JOKER FUNC multipart.TestLineLimit has: 
;; (defn TestLineLimit
;;   {:added "1.0"
;;    :go "testLineLimit(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{7390692 0xc00376f260}) t])
;; 
JOKER FUNC multipart.TestMultipart has: 
;; (defn TestMultipart
;;   {:added "1.0"
;;    :go "testMultipart(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{7386572 0xc003760ba0}) t])
;; 
JOKER FUNC multipart.TestMultipartOnlyNewlines has: 
;; (defn TestMultipartOnlyNewlines
;;   {:added "1.0"
;;    :go "testMultipartOnlyNewlines(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{7386719 0xc003760e00}) t])
;; 
JOKER FUNC multipart.TestMultipartSlowInput has: 
;; (defn TestMultipartSlowInput
;;   {:added "1.0"
;;    :go "testMultipartSlowInput(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{7386860 0xc003761060}) t])
;; 
JOKER FUNC multipart.TestMultipartStreamReadahead has: 
;; (defn TestMultipartStreamReadahead
;;   "TestMultipartStreamReadahead tests that PartReader does not block
;; on reading past the end of a part, ensuring that it can be used on
;; a stream like multipart/x-mixed-replace. See golang.org/issue/15431"
;;   {:added "1.0"
;;    :go "testMultipartStreamReadahead(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{7392173 0xc0037769c0}) t])
;; 
JOKER FUNC multipart.TestMultipartTruncated has: 
;; (defn TestMultipartTruncated
;;   {:added "1.0"
;;    :go "testMultipartTruncated(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{7391048 0xc00376f880}) t])
;; 
JOKER FUNC multipart.TestNameAccessors has: 
;; (defn TestNameAccessors
;;   {:added "1.0"
;;    :go "testNameAccessors(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{7385171 0xc0037499e0}) t])
;; 
JOKER FUNC multipart.TestNested has: 
;; (defn TestNested
;;   "Test parsing an image attachment from gmail, which previously failed."
;;   {:added "1.0"
;;    :go "testNested(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{7396156 0xc00377ae60}) t])
;; 
JOKER FUNC multipart.TestNoBoundary has: 
;; (defn TestNoBoundary
;;   {:added "1.0"
;;    :go "testNoBoundary(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{7411839 0xc00379dee0}) t])
;; 
JOKER FUNC multipart.TestParse has: 
;; (defn TestParse
;;   {:added "1.0"
;;    :go "testParse(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{7409173 0xc003794760}) t])
;; 
JOKER FUNC multipart.TestParseAllSizes has: 
;; (defn TestParseAllSizes
;;   {:added "1.0"
;;    :go "testParseAllSizes(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{7410553 0xc00379c380}) t])
;; 
JOKER FUNC multipart.TestQuotedPrintableEncoding has: 
;; (defn TestQuotedPrintableEncoding
;;   {:added "1.0"
;;    :go "testQuotedPrintableEncoding(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{7394450 0xc00377a400}) t])
;; 
JOKER FUNC multipart.TestReadForm has: 
;; (defn TestReadForm
;;   {:added "1.0"
;;    :go "testReadForm(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{7366222 0xc0036f7400}) t])
;; 
JOKER FUNC multipart.TestReadFormWithNamelessFile has: 
;; (defn TestReadFormWithNamelessFile
;;   {:added "1.0"
;;    :go "testReadFormWithNamelessFile(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{7367005 0xc0037085c0}) t])
;; 
JOKER FUNC multipart.TestReadFormWithTextContentType has: 
;; (defn TestReadFormWithTextContentType
;;   {:added "1.0"
;;    :go "testReadFormWithTextContentType(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{7367389 0xc003708da0}) t])
;; 
JOKER FUNC multipart.TestReadForm_NoReadAfterEOF has: 
;; (defn TestReadForm_NoReadAfterEOF
;;   {:added "1.0"
;;    :go "testReadForm_NoReadAfterEOF(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{7369289 0xc00370e560}) t])
;; 
JOKER FUNC multipart.TestReadForm_NonFileMaxMemory has: 
;; (defn TestReadForm_NonFileMaxMemory
;;   "TestReadForm_NonFileMaxMemory asserts that the ReadForm maxMemory limit is applied
;; while processing non-file form data as well as file form data."
;;   {:added "1.0"
;;    :go "testReadForm_NonFileMaxMemory(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{7370366 0xc00370f320}) t])
;; 
JOKER FUNC multipart.TestSortedHeader has: 
;; (defn TestSortedHeader
;;   {:added "1.0"
;;    :go "testSortedHeader(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{7374407 0xc003725a80}) t])
;; 
JOKER FUNC multipart.TestVariousTextLineEndings has: 
;; (defn TestVariousTextLineEndings
;;   {:added "1.0"
;;    :go "testVariousTextLineEndings(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{7389277 0xc00376dbe0}) t])
;; 
JOKER FUNC multipart.TestWriter has: 
;; (defn TestWriter
;;   {:added "1.0"
;;    :go "testWriter(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{7371568 0xc003716520}) t])
;; 
JOKER FUNC multipart.TestWriterBoundaryGoroutines has: 
;; (defn TestWriterBoundaryGoroutines
;;   {:added "1.0"
;;    :go "testWriterBoundaryGoroutines(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{7373992 0xc003725620}) t])
;; 
JOKER FUNC multipart.TestWriterSetBoundary has: 
;; (defn TestWriterSetBoundary
;;   {:added "1.0"
;;    :go "testWriterSetBoundary(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{7373128 0xc003724400}) t])
;; 
JOKER FUNC multipart_test.ExampleNewReader has: 
;; (defn ExampleNewReader
;;   {:added "1.0"
;;    :go "exampleNewReader()"}
;;   [])
;; 
JOKER FUNC net.BenchmarkDNSName has: 
;; (defn BenchmarkDNSName
;;   {:added "1.0"
;;    :go "benchmarkDNSName(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{7646666 0xc001df2d00}) b])
;; 
JOKER FUNC net.BenchmarkGoLookupIP has: 
;; (defn BenchmarkGoLookupIP
;;   {:added "1.0"
;;    :go "benchmarkGoLookupIP(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{7613803 0xc001382f80}) b])
;; 
JOKER FUNC net.BenchmarkGoLookupIPNoSuchHost has: 
;; (defn BenchmarkGoLookupIPNoSuchHost
;;   {:added "1.0"
;;    :go "benchmarkGoLookupIPNoSuchHost(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{7614030 0xc0013833a0}) b])
;; 
JOKER FUNC net.BenchmarkGoLookupIPWithBrokenNameServer has: 
;; (defn BenchmarkGoLookupIPWithBrokenNameServer
;;   {:added "1.0"
;;    :go "benchmarkGoLookupIPWithBrokenNameServer(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{7614268 0xc001383820}) b])
;; 
JOKER FUNC net.BenchmarkIPEqual has: 
;; (defn BenchmarkIPEqual
;;   {:added "1.0"
;;    :go "benchmarkIPEqual(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{7904664 0xc001ae9560}) b])
;; 
JOKER FUNC net.BenchmarkIPMaskString has: 
;; (defn BenchmarkIPMaskString
;;   {:added "1.0"
;;    :go "benchmarkIPMaskString(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{7888568 0xc002779880}) b])
;; 
JOKER FUNC net.BenchmarkIPString has: 
;; (defn BenchmarkIPString
;;   {:added "1.0"
;;    :go "benchmarkIPString(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{7886789 0xc002775360}) b])
;; 
JOKER FUNC net.BenchmarkInterfaceAddrs has: 
;; (defn BenchmarkInterfaceAddrs
;;   {:added "1.0"
;;    :go "benchmarkInterfaceAddrs(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{7666019 0xc002117de0}) b])
;; 
JOKER FUNC net.BenchmarkInterfaceByIndex has: 
;; (defn BenchmarkInterfaceByIndex
;;   {:added "1.0"
;;    :go "benchmarkInterfaceByIndex(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{7665440 0xc002116f20}) b])
;; 
JOKER FUNC net.BenchmarkInterfaceByName has: 
;; (defn BenchmarkInterfaceByName
;;   {:added "1.0"
;;    :go "benchmarkInterfaceByName(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{7665731 0xc002117440}) b])
;; 
JOKER FUNC net.BenchmarkInterfaces has: 
;; (defn BenchmarkInterfaces
;;   {:added "1.0"
;;    :go "benchmarkInterfaces(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{7665252 0xc002116b60}) b])
;; 
JOKER FUNC net.BenchmarkInterfacesAndAddrs has: 
;; (defn BenchmarkInterfacesAndAddrs
;;   {:added "1.0"
;;    :go "benchmarkInterfacesAndAddrs(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{7666213 0xc0021201a0}) b])
;; 
JOKER FUNC net.BenchmarkInterfacesAndMulticastAddrs has: 
;; (defn BenchmarkInterfacesAndMulticastAddrs
;;   {:added "1.0"
;;    :go "benchmarkInterfacesAndMulticastAddrs(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{7666500 0xc002121d80}) b])
;; 
JOKER FUNC net.BenchmarkParseIP has: 
;; (defn BenchmarkParseIP
;;   {:added "1.0"
;;    :go "benchmarkParseIP(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{7883782 0xc002569640}) b])
;; 
JOKER FUNC net.BenchmarkTCP4ConcurrentReadWrite has: 
;; (defn BenchmarkTCP4ConcurrentReadWrite
;;   {:added "1.0"
;;    :go "benchmarkTCP4ConcurrentReadWrite(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{7866441 0xc003457240}) b])
;; 
JOKER FUNC net.BenchmarkTCP4OneShot has: 
;; (defn BenchmarkTCP4OneShot
;;   {:added "1.0"
;;    :go "benchmarkTCP4OneShot(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{7863555 0xc003366580}) b])
;; 
JOKER FUNC net.BenchmarkTCP4OneShotTimeout has: 
;; (defn BenchmarkTCP4OneShotTimeout
;;   {:added "1.0"
;;    :go "benchmarkTCP4OneShotTimeout(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{7863653 0xc003366780}) b])
;; 
JOKER FUNC net.BenchmarkTCP4Persistent has: 
;; (defn BenchmarkTCP4Persistent
;;   {:added "1.0"
;;    :go "benchmarkTCP4Persistent(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{7863746 0xc003366920}) b])
;; 
JOKER FUNC net.BenchmarkTCP4PersistentTimeout has: 
;; (defn BenchmarkTCP4PersistentTimeout
;;   {:added "1.0"
;;    :go "benchmarkTCP4PersistentTimeout(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{7863846 0xc003366ac0}) b])
;; 
JOKER FUNC net.BenchmarkTCP6ConcurrentReadWrite has: 
;; (defn BenchmarkTCP6ConcurrentReadWrite
;;   {:added "1.0"
;;    :go "benchmarkTCP6ConcurrentReadWrite(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{7866549 0xc0034573a0}) b])
;; 
JOKER FUNC net.BenchmarkTCP6OneShot has: 
;; (defn BenchmarkTCP6OneShot
;;   {:added "1.0"
;;    :go "benchmarkTCP6OneShot(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{7863935 0xc0033674a0}) b])
;; 
JOKER FUNC net.BenchmarkTCP6OneShotTimeout has: 
;; (defn BenchmarkTCP6OneShotTimeout
;;   {:added "1.0"
;;    :go "benchmarkTCP6OneShotTimeout(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{7864088 0xc003370f40}) b])
;; 
JOKER FUNC net.BenchmarkTCP6Persistent has: 
;; (defn BenchmarkTCP6Persistent
;;   {:added "1.0"
;;    :go "benchmarkTCP6Persistent(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{7864236 0xc003383980}) b])
;; 
JOKER FUNC net.BenchmarkTCP6PersistentTimeout has: 
;; (defn BenchmarkTCP6PersistentTimeout
;;   {:added "1.0"
;;    :go "benchmarkTCP6PersistentTimeout(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{7864391 0xc0033a6940}) b])
;; 
JOKER FUNC net.BenchmarkTCPReadFrom has: 
;; (defn BenchmarkTCPReadFrom
;;   {:added "1.0"
;;    :go "benchmarkTCPReadFrom(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{7769715 0xc00287a0e0}) b])
;; 
JOKER FUNC net.BenchmarkUDP6LinkLocalUnicast has: 
;; (defn BenchmarkUDP6LinkLocalUnicast
;;   {:added "1.0"
;;    :go "benchmarkUDP6LinkLocalUnicast(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{7547747 0xc000e05200}) b])
;; 
JOKER FUNC net.CIDRMask has: 
;; (defn ^[ABEND042(cannot find typename net.byte)] CIDRMask
;;   "CIDRMask returns an IPMask consisting of `ones' 1 bits
;; followed by 0s up to a total length of `bits' bits.
;; For a mask of this form, CIDRMask is the inverse of IPMask.Size."
;;   {:added "1.0"
;;    :go "cIDRMask(ones, bits)"}
;;   [^Int ones, ^Int bits])
;; 
JOKER FUNC net.Dial has: 
;; (defn ^[ABEND881(unrecognized Expr type *ast.InterfaceType at: &{7475776 0xc0028b8930 false}) Error] Dial
;;   "Dial connects to the address on the named network.
;; 
;; Known networks are "tcp", "tcp4" (IPv4-only), "tcp6" (IPv6-only),
;; "udp", "udp4" (IPv4-only), "udp6" (IPv6-only), "ip", "ip4"
;; (IPv4-only), "ip6" (IPv6-only), "unix", "unixgram" and
;; "unixpacket".
;; 
;; For TCP and UDP networks, the address has the form "host:port".
;; The host must be a literal IP address, or a host name that can be
;; resolved to IP addresses.
;; The port must be a literal port number or a service name.
;; If the host is a literal IPv6 address it must be enclosed in square
;; brackets, as in "[2001:db8::1]:80" or "[fe80::1%zone]:80".
;; The zone specifies the scope of the literal IPv6 address as defined
;; in RFC 4007.
;; The functions JoinHostPort and SplitHostPort manipulate a pair of
;; host and port in this form.
;; When using TCP, and the host resolves to multiple IP addresses,
;; Dial will try each IP address in order until one succeeds.
;; 
;; Examples:
;; 	Dial("tcp", "golang.org:http")
;; 	Dial("tcp", "192.0.2.1:http")
;; 	Dial("tcp", "198.51.100.1:80")
;; 	Dial("udp", "[2001:db8::1]:domain")
;; 	Dial("udp", "[fe80::1%lo0]:53")
;; 	Dial("tcp", ":80")
;; 
;; For IP networks, the network must be "ip", "ip4" or "ip6" followed
;; by a colon and a literal protocol number or a protocol name, and
;; the address has the form "host". The host must be a literal IP
;; address or a literal IPv6 address with zone.
;; It depends on each operating system how the operating system
;; behaves with a non-well known protocol number such as "0" or "255".
;; 
;; Examples:
;; 	Dial("ip4:1", "192.0.2.1")
;; 	Dial("ip6:ipv6-icmp", "2001:db8::1")
;; 	Dial("ip6:58", "fe80::1%lo0")
;; 
;; For TCP, UDP and IP networks, if the host is empty or a literal
;; unspecified IP address, as in ":80", "0.0.0.0:80" or "[::]:80" for
;; TCP and UDP, "", "0.0.0.0" or "::" for IP, the local system is
;; assumed.
;; 
;; For Unix networks, the address must be a file system path."
;;   {:added "1.0"
;;    :go "dial(network, address)"}
;;   [^String network, ^String address])
;; 
JOKER FUNC net.DialIP has: 
;; (defn ^[{} Error] DialIP
;;   "DialIP acts like Dial for IP networks.
;; 
;; The network must be an IP network name; see func Dial for details.
;; 
;; If laddr is nil, a local address is automatically chosen.
;; If the IP field of raddr is nil or an unspecified IP address, the
;; local system is assumed."
;;   {:added "1.0"
;;    :go "dialIP(network, laddr, raddr)"}
;;   [^String network, ^ABEND881(unrecognized Expr type *ast.StarExpr at: &{7463412 IPAddr}) laddr, ^ABEND881(unrecognized Expr type *ast.StarExpr at: &{7463412 IPAddr}) raddr])
;; 
JOKER FUNC net.DialTCP has: 
;; (defn ^[{} Error] DialTCP
;;   "DialTCP acts like Dial for TCP networks.
;; 
;; The network must be a TCP network name; see func Dial for details.
;; 
;; If laddr is nil, a local address is automatically chosen.
;; If the IP field of raddr is nil or an unspecified IP address, the
;; local system is assumed."
;;   {:added "1.0"
;;    :go "dialTCP(network, laddr, raddr)"}
;;   [^String network, ^ABEND881(unrecognized Expr type *ast.StarExpr at: &{7947651 TCPAddr}) laddr, ^ABEND881(unrecognized Expr type *ast.StarExpr at: &{7947651 TCPAddr}) raddr])
;; 
JOKER FUNC net.DialTimeout has: 
;; (defn ^[ABEND881(unrecognized Expr type *ast.InterfaceType at: &{7475776 0xc0028b8930 false}) Error] DialTimeout
;;   "DialTimeout acts like Dial but takes a timeout.
;; 
;; The timeout includes name resolution, if required.
;; When using TCP, and the host in the address parameter resolves to
;; multiple IP addresses, the timeout is spread over each consecutive
;; dial, such that each is given an appropriate fraction of the time
;; to connect.
;; 
;; See func Dial for a description of the network and address
;; parameters."
;;   {:added "1.0"
;;    :go "dialTimeout(network, address, timeout)"}
;;   [^String network, ^String address, ^ABEND881(unrecognized Expr type *ast.SelectorExpr at: &{time Duration}) timeout])
;; 
JOKER FUNC net.DialUDP has: 
;; (defn ^[{} Error] DialUDP
;;   "DialUDP acts like Dial for UDP networks.
;; 
;; The network must be a UDP network name; see func Dial for details.
;; 
;; If laddr is nil, a local address is automatically chosen.
;; If the IP field of raddr is nil or an unspecified IP address, the
;; local system is assumed."
;;   {:added "1.0"
;;    :go "dialUDP(network, laddr, raddr)"}
;;   [^String network, ^ABEND881(unrecognized Expr type *ast.StarExpr at: &{8063929 UDPAddr}) laddr, ^ABEND881(unrecognized Expr type *ast.StarExpr at: &{8063929 UDPAddr}) raddr])
;; 
JOKER FUNC net.DialUnix has: 
;; (defn ^[{} Error] DialUnix
;;   "DialUnix acts like Dial for Unix networks.
;; 
;; The network must be a Unix network name; see func Dial for details.
;; 
;; If laddr is non-nil, it is used as the local address for the
;; connection."
;;   {:added "1.0"
;;    :go "dialUnix(network, laddr, raddr)"}
;;   [^String network, ^ABEND881(unrecognized Expr type *ast.StarExpr at: &{7574517 UnixAddr}) laddr, ^ABEND881(unrecognized Expr type *ast.StarExpr at: &{7574517 UnixAddr}) raddr])
;; 
JOKER FUNC net.FileConn has: 
;; (defn ^[c err] FileConn
;;   "FileConn returns a copy of the network connection corresponding to
;; the open file f.
;; It is the caller's responsibility to close f when finished.
;; Closing c does not affect f, and closing f does not affect c."
;;   {:added "1.0"
;;    :go "fileConn(f)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{7737342 0xc002663d60}) f])
;; 
JOKER FUNC net.FileListener has: 
;; (defn ^[ln err] FileListener
;;   "FileListener returns a copy of the network listener corresponding
;; to the open file f.
;; It is the caller's responsibility to close ln when finished.
;; Closing ln does not affect f, and closing f does not affect ln."
;;   {:added "1.0"
;;    :go "fileListener(f)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{7737765 0xc0026fa760}) f])
;; 
JOKER FUNC net.FilePacketConn has: 
;; (defn ^[c err] FilePacketConn
;;   "FilePacketConn returns a copy of the packet network connection
;; corresponding to the open file f.
;; It is the caller's responsibility to close f when finished.
;; Closing c does not affect f, and closing f does not affect c."
;;   {:added "1.0"
;;    :go "filePacketConn(f)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{7738208 0xc0026fb9c0}) f])
;; 
JOKER FUNC net.IPv4 has: 
;; (defn ^[ABEND042(cannot find typename net.byte)] IPv4
;;   "IPv4 returns the IP address (in 16-byte form) of the
;; IPv4 address a.b.c.d."
;;   {:added "1.0"
;;    :go "iPv4(a, b, c, d)"}
;;   [a, b, c, d])
;; 
JOKER FUNC net.IPv4Mask has: 
;; (defn ^[ABEND042(cannot find typename net.byte)] IPv4Mask
;;   "IPv4Mask returns the IP mask (in 4-byte form) of the
;; IPv4 mask a.b.c.d."
;;   {:added "1.0"
;;    :go "iPv4Mask(a, b, c, d)"}
;;   [a, b, c, d])
;; 
JOKER FUNC net.InterfaceAddrs has: 
;; (defn ^[[ABEND881(unrecognized Expr type *ast.InterfaceType at: &{7475460 0xc0028b81b0 false})] Error] InterfaceAddrs
;;   "InterfaceAddrs returns a list of the system's unicast interface
;; addresses.
;; 
;; The returned list does not identify the associated interface; use
;; Interfaces and Interface.Addrs for more detail."
;;   {:added "1.0"
;;    :go "interfaceAddrs()"}
;;   [])
;; 
JOKER FUNC net.InterfaceByIndex has: 
(defn ^[{:index ^Int Index, :mtu ^Int MTU, :name ^String Name, :hardwareaddr HardwareAddr, :flags Flags} Error] InterfaceByIndex
  "InterfaceByIndex returns the interface specified by index.

On Solaris, it returns one of the logical network interfaces
sharing the logical data link; for more precision use
InterfaceByName."
  {:added "1.0"
   :go "interfaceByIndex(index)"}
  [^Int index])

JOKER FUNC net.InterfaceByName has: 
(defn ^[{:index ^Int Index, :mtu ^Int MTU, :name ^String Name, :hardwareaddr HardwareAddr, :flags Flags} Error] InterfaceByName
  "InterfaceByName returns the interface specified by name."
  {:added "1.0"
   :go "interfaceByName(name)"}
  [^String name])

JOKER FUNC net.Interfaces has: 
(defn ^[[{:index ^Int Index, :mtu ^Int MTU, :name ^String Name, :hardwareaddr HardwareAddr, :flags Flags}] Error] Interfaces
  "Interfaces returns a list of the system's network interfaces."
  {:added "1.0"
   :go "interfaces()"}
  [])

JOKER FUNC net.JoinHostPort has: 
(defn ^String JoinHostPort
  "JoinHostPort combines host and port into a network address of the
form "host:port". If host contains a colon, as found in literal
IPv6 addresses, then JoinHostPort returns "[host]:port".

See func Dial for a description of the host and port parameters."
  {:added "1.0"
   :go "joinHostPort(host, port)"}
  [^String host, ^String port])

JOKER FUNC net.Listen has: 
;; (defn ^[ABEND881(unrecognized Expr type *ast.InterfaceType at: &{7484082 0xc0028a5470 false}) Error] Listen
;;   "Listen announces on the local network address.
;; 
;; The network must be "tcp", "tcp4", "tcp6", "unix" or "unixpacket".
;; 
;; For TCP networks, if the host in the address parameter is empty or
;; a literal unspecified IP address, Listen listens on all available
;; unicast and anycast IP addresses of the local system.
;; To only use IPv4, use network "tcp4".
;; The address can use a host name, but this is not recommended,
;; because it will create a listener for at most one of the host's IP
;; addresses.
;; If the port in the address parameter is empty or "0", as in
;; "127.0.0.1:" or "[::1]:0", a port number is automatically chosen.
;; The Addr method of Listener can be used to discover the chosen
;; port.
;; 
;; See func Dial for a description of the network and address
;; parameters."
;;   {:added "1.0"
;;    :go "listen(network, address)"}
;;   [^String network, ^String address])
;; 
JOKER FUNC net.ListenIP has: 
;; (defn ^[{} Error] ListenIP
;;   "ListenIP acts like ListenPacket for IP networks.
;; 
;; The network must be an IP network name; see func Dial for details.
;; 
;; If the IP field of laddr is nil or an unspecified IP address,
;; ListenIP listens on all available IP addresses of the local system
;; except multicast IP addresses."
;;   {:added "1.0"
;;    :go "listenIP(network, laddr)"}
;;   [^String network, ^ABEND881(unrecognized Expr type *ast.StarExpr at: &{7464164 IPAddr}) laddr])
;; 
JOKER FUNC net.ListenMulticastUDP has: 
;; (defn ^[{} Error] ListenMulticastUDP
;;   "ListenMulticastUDP acts like ListenPacket for UDP networks but
;; takes a group address on a specific network interface.
;; 
;; The network must be a UDP network name; see func Dial for details.
;; 
;; ListenMulticastUDP listens on all available IP addresses of the
;; local system including the group, multicast IP address.
;; If ifi is nil, ListenMulticastUDP uses the system-assigned
;; multicast interface, although this is not recommended because the
;; assignment depends on platforms and sometimes it might require
;; routing configuration.
;; If the Port field of gaddr is 0, a port number is automatically
;; chosen.
;; 
;; ListenMulticastUDP is just for convenience of simple, small
;; applications. There are golang.org/x/net/ipv4 and
;; golang.org/x/net/ipv6 packages for general purpose uses."
;;   {:added "1.0"
;;    :go "listenMulticastUDP(network, ifi, gaddr)"}
;;   [^String network, ^ABEND881(unrecognized Expr type *ast.StarExpr at: &{8066310 Interface}) ifi, ^ABEND881(unrecognized Expr type *ast.StarExpr at: &{8066328 UDPAddr}) gaddr])
;; 
JOKER FUNC net.ListenPacket has: 
;; (defn ^[ABEND881(unrecognized Expr type *ast.InterfaceType at: &{7481507 0xc0028a52f0 false}) Error] ListenPacket
;;   "ListenPacket announces on the local network address.
;; 
;; The network must be "udp", "udp4", "udp6", "unixgram", or an IP
;; transport. The IP transports are "ip", "ip4", or "ip6" followed by
;; a colon and a literal protocol number or a protocol name, as in
;; "ip:1" or "ip:icmp".
;; 
;; For UDP and IP networks, if the host in the address parameter is
;; empty or a literal unspecified IP address, ListenPacket listens on
;; all available IP addresses of the local system except multicast IP
;; addresses.
;; To only use IPv4, use network "udp4" or "ip4:proto".
;; The address can use a host name, but this is not recommended,
;; because it will create a listener for at most one of the host's IP
;; addresses.
;; If the port in the address parameter is empty or "0", as in
;; "127.0.0.1:" or "[::1]:0", a port number is automatically chosen.
;; The LocalAddr method of PacketConn can be used to discover the
;; chosen port.
;; 
;; See func Dial for a description of the network and address
;; parameters."
;;   {:added "1.0"
;;    :go "listenPacket(network, address)"}
;;   [^String network, ^String address])
;; 
JOKER FUNC net.ListenTCP has: 
;; (defn ^[{:fd ^ABEND881(unrecognized Expr type *ast.StarExpr at: &{7948419 netFD}) fd} Error] ListenTCP
;;   "ListenTCP acts like Listen for TCP networks.
;; 
;; The network must be a TCP network name; see func Dial for details.
;; 
;; If the IP field of laddr is nil or an unspecified IP address,
;; ListenTCP listens on all available unicast and anycast IP addresses
;; of the local system.
;; If the Port field of laddr is 0, a port number is automatically
;; chosen."
;;   {:added "1.0"
;;    :go "listenTCP(network, laddr)"}
;;   [^String network, ^ABEND881(unrecognized Expr type *ast.StarExpr at: &{7951343 TCPAddr}) laddr])
;; 
JOKER FUNC net.ListenUDP has: 
;; (defn ^[{} Error] ListenUDP
;;   "ListenUDP acts like ListenPacket for UDP networks.
;; 
;; The network must be a UDP network name; see func Dial for details.
;; 
;; If the IP field of laddr is nil or an unspecified IP address,
;; ListenUDP listens on all available IP addresses of the local system
;; except multicast IP addresses.
;; If the Port field of laddr is 0, a port number is automatically
;; chosen."
;;   {:added "1.0"
;;    :go "listenUDP(network, laddr)"}
;;   [^String network, ^ABEND881(unrecognized Expr type *ast.StarExpr at: &{8064956 UDPAddr}) laddr])
;; 
JOKER FUNC net.ListenUnix has: 
;; (defn ^[{:fd ^ABEND881(unrecognized Expr type *ast.StarExpr at: &{7575205 netFD}) fd, :path ^String path, :unlink unlink, :unlinkonce ^ABEND881(unrecognized Expr type *ast.SelectorExpr at: &{sync Once}) unlinkOnce} Error] ListenUnix
;;   "ListenUnix acts like Listen for Unix networks.
;; 
;; The network must be "unix" or "unixpacket"."
;;   {:added "1.0"
;;    :go "listenUnix(network, laddr)"}
;;   [^String network, ^ABEND881(unrecognized Expr type *ast.StarExpr at: &{7577984 UnixAddr}) laddr])
;; 
JOKER FUNC net.ListenUnixgram has: 
;; (defn ^[{} Error] ListenUnixgram
;;   "ListenUnixgram acts like ListenPacket for Unix networks.
;; 
;; The network must be "unixgram"."
;;   {:added "1.0"
;;    :go "listenUnixgram(network, laddr)"}
;;   [^String network, ^ABEND881(unrecognized Expr type *ast.StarExpr at: &{7578725 UnixAddr}) laddr])
;; 
JOKER FUNC net.LookupAddr has: 
(defn ^[names err] LookupAddr
  "LookupAddr performs a reverse lookup for the given address, returning a list
of names mapping to that address.

When using the host C library resolver, at most one result will be
returned. To bypass the host resolver, use a custom Resolver."
  {:added "1.0"
   :go "lookupAddr(addr)"}
  [^String addr])

JOKER FUNC net.LookupCNAME has: 
(defn ^[cname err] LookupCNAME
  "LookupCNAME returns the canonical name for the given host.
Callers that do not care about the canonical name can call
LookupHost or LookupIP directly; both take care of resolving
the canonical name as part of the lookup.

A canonical name is the final name after following zero
or more CNAME records.
LookupCNAME does not return an error if host does not
contain DNS "CNAME" records, as long as host resolves to
address records."
  {:added "1.0"
   :go "lookupCNAME(host)"}
  [^String host])

JOKER FUNC net.LookupHost has: 
(defn ^[addrs err] LookupHost
  "LookupHost looks up the given host using the local resolver.
It returns a slice of that host's addresses."
  {:added "1.0"
   :go "lookupHost(host)"}
  [^String host])

JOKER FUNC net.LookupIP has: 
;; (defn ^[[[ABEND042(cannot find typename net.byte)]] Error] LookupIP
;;   "LookupIP looks up host using the local resolver.
;; It returns a slice of that host's IPv4 and IPv6 addresses."
;;   {:added "1.0"
;;    :go "lookupIP(host)"}
;;   [^String host])
;; 
JOKER FUNC net.LookupMX has: 
(defn ^[[{:host ^String Host, :pref ^Int Pref}] Error] LookupMX
  "LookupMX returns the DNS MX records for the given domain name sorted by preference."
  {:added "1.0"
   :go "lookupMX(name)"}
  [^String name])

JOKER FUNC net.LookupNS has: 
(defn ^[[{:host ^String Host}] Error] LookupNS
  "LookupNS returns the DNS NS records for the given domain name."
  {:added "1.0"
   :go "lookupNS(name)"}
  [^String name])

JOKER FUNC net.LookupPort has: 
(defn ^[port err] LookupPort
  "LookupPort looks up the port for the given network and service."
  {:added "1.0"
   :go "lookupPort(network, service)"}
  [^String network, ^String service])

JOKER FUNC net.LookupSRV has: 
(defn ^[cname addrs err] LookupSRV
  "LookupSRV tries to resolve an SRV query of the given service,
protocol, and domain name. The proto is "tcp" or "udp".
The returned records are sorted by priority and randomized
by weight within a priority.

LookupSRV constructs the DNS name to look up following RFC 2782.
That is, it looks up _service._proto.name. To accommodate services
publishing SRV records under non-standard names, if both service
and proto are empty strings, LookupSRV looks up name directly."
  {:added "1.0"
   :go "lookupSRV(service, proto, name)"}
  [^String service, ^String proto, ^String name])

JOKER FUNC net.LookupTXT has: 
(defn ^[[String] Error] LookupTXT
  "LookupTXT returns the DNS TXT records for the given domain name."
  {:added "1.0"
   :go "lookupTXT(name)"}
  [^String name])

JOKER FUNC net.ParseCIDR has: 
;; (defn ^[[ABEND042(cannot find typename net.byte)] {:ip IP, :mask Mask} Error] ParseCIDR
;;   "ParseCIDR parses s as a CIDR notation IP address and prefix length,
;; like "192.0.2.0/24" or "2001:db8::/32", as defined in
;; RFC 4632 and RFC 4291.
;; 
;; It returns the IP address and the network implied by the IP and
;; prefix length.
;; For example, ParseCIDR("192.0.2.1/24") returns the IP address
;; 192.0.2.1 and the network 192.0.2.0/24."
;;   {:added "1.0"
;;    :go "parseCIDR(s)"}
;;   [^String s])
;; 
JOKER FUNC net.ParseIP has: 
;; (defn ^[ABEND042(cannot find typename net.byte)] ParseIP
;;   "ParseIP parses s as an IP address, returning the result.
;; The string s can be in dotted decimal ("192.0.2.1")
;; or IPv6 ("2001:db8::68") form.
;; If s is not a valid textual representation of an IP address,
;; ParseIP returns nil."
;;   {:added "1.0"
;;    :go "parseIP(s)"}
;;   [^String s])
;; 
JOKER FUNC net.ParseMAC has: 
(defn ^[hw err] ParseMAC
  "ParseMAC parses s as an IEEE 802 MAC-48, EUI-48, EUI-64, or a 20-octet
IP over InfiniBand link-layer address using one of the following formats:
  01:23:45:67:89:ab
  01:23:45:67:89:ab:cd:ef
  01:23:45:67:89:ab:cd:ef:00:00:01:23:45:67:89:ab:cd:ef:00:00
  01-23-45-67-89-ab
  01-23-45-67-89-ab-cd-ef
  01-23-45-67-89-ab-cd-ef-00-00-01-23-45-67-89-ab-cd-ef-00-00
  0123.4567.89ab
  0123.4567.89ab.cdef
  0123.4567.89ab.cdef.0000.0123.4567.89ab.cdef.0000"
  {:added "1.0"
   :go "parseMAC(s)"}
  [^String s])

JOKER FUNC net.Pipe has: 
;; (defn ^[ABEND881(unrecognized Expr type *ast.InterfaceType at: &{7475776 0xc0028b8930 false}) ABEND881(unrecognized Expr type *ast.InterfaceType at: &{7475776 0xc0028b8930 false})] Pipe
;;   "Pipe creates a synchronous, in-memory, full duplex
;; network connection; both ends implement the Conn interface.
;; Reads on one end are matched with writes on the other,
;; copying data directly between the two; there is no internal
;; buffering."
;;   {:added "1.0"
;;    :go "pipe()"}
;;   [])
;; 
JOKER FUNC net.ResolveIPAddr has: 
(defn ^[{:ip IP, :zone ^String Zone} Error] ResolveIPAddr
  "ResolveIPAddr returns an address of IP end point.

The network must be an IP network name.

If the host in the address parameter is not a literal IP address,
ResolveIPAddr resolves the address to an address of IP end point.
Otherwise, it parses the address as a literal IP address.
The address parameter can use a host name, but this is not
recommended, because it will return at most one of the host name's
IP addresses.

See func Dial for a description of the network and address
parameters."
  {:added "1.0"
   :go "resolveIPAddr(network, address)"}
  [^String network, ^String address])

JOKER FUNC net.ResolveTCPAddr has: 
(defn ^[{:ip IP, :port ^Int Port, :zone ^String Zone} Error] ResolveTCPAddr
  "ResolveTCPAddr returns an address of TCP end point.

The network must be a TCP network name.

If the host in the address parameter is not a literal IP address or
the port is not a literal port number, ResolveTCPAddr resolves the
address to an address of TCP end point.
Otherwise, it parses the address as a pair of literal IP address
and port number.
The address parameter can use a host name, but this is not
recommended, because it will return at most one of the host name's
IP addresses.

See func Dial for a description of the network and address
parameters."
  {:added "1.0"
   :go "resolveTCPAddr(network, address)"}
  [^String network, ^String address])

JOKER FUNC net.ResolveUDPAddr has: 
(defn ^[{:ip IP, :port ^Int Port, :zone ^String Zone} Error] ResolveUDPAddr
  "ResolveUDPAddr returns an address of UDP end point.

The network must be a UDP network name.

If the host in the address parameter is not a literal IP address or
the port is not a literal port number, ResolveUDPAddr resolves the
address to an address of UDP end point.
Otherwise, it parses the address as a pair of literal IP address
and port number.
The address parameter can use a host name, but this is not
recommended, because it will return at most one of the host name's
IP addresses.

See func Dial for a description of the network and address
parameters."
  {:added "1.0"
   :go "resolveUDPAddr(network, address)"}
  [^String network, ^String address])

JOKER FUNC net.ResolveUnixAddr has: 
(defn ^[{:name ^String Name, :net ^String Net} Error] ResolveUnixAddr
  "ResolveUnixAddr returns an address of Unix domain socket end point.

The network must be a Unix network name.

See func Dial for a description of the network and address
parameters."
  {:added "1.0"
   :go "resolveUnixAddr(network, address)"}
  [^String network, ^String address])

JOKER FUNC net.SplitHostPort has: 
(defn ^[host port err] SplitHostPort
  "SplitHostPort splits a network address of the form "host:port",
"host%zone:port", "[host]:port" or "[host%zone]:port" into host or
host%zone and port.

A literal IPv6 address in hostport must be enclosed in square
brackets, as in "[::1]:80", "[::1%lo0]:80".

See func Dial for a description of the hostport parameter, and host
and port results."
  {:added "1.0"
   :go "splitHostPort(hostport)"}
  [^String hostport])

JOKER FUNC net.TestAcceptError has: 
;; (defn TestAcceptError
;;   {:added "1.0"
;;    :go "testAcceptError(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{8105739 0xc00262f360}) t])
;; 
JOKER FUNC net.TestAcceptIgnoreAbortedConnRequest has: 
;; (defn TestAcceptIgnoreAbortedConnRequest
;;   "See golang.org/issue/6163, golang.org/issue/6987."
;;   {:added "1.0"
;;    :go "testAcceptIgnoreAbortedConnRequest(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{7745140 0xc00138cd40}) t])
;; 
JOKER FUNC net.TestAcceptTimeout has: 
;; (defn TestAcceptTimeout
;;   {:added "1.0"
;;    :go "testAcceptTimeout(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{7527594 0xc0012e29c0}) t])
;; 
JOKER FUNC net.TestAcceptTimeoutMustNotReturn has: 
;; (defn TestAcceptTimeoutMustNotReturn
;;   {:added "1.0"
;;    :go "testAcceptTimeoutMustNotReturn(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{7529667 0xc001e5e9e0}) t])
;; 
JOKER FUNC net.TestAcceptTimeoutMustReturn has: 
;; (defn TestAcceptTimeoutMustReturn
;;   {:added "1.0"
;;    :go "testAcceptTimeoutMustReturn(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{7528744 0xc001fe37e0}) t])
;; 
JOKER FUNC net.TestAddrList has: 
;; (defn TestAddrList
;;   {:added "1.0"
;;    :go "testAddrList(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{7734602 0xc00268a100}) t])
;; 
JOKER FUNC net.TestAddrListPartition has: 
;; (defn TestAddrListPartition
;;   {:added "1.0"
;;    :go "testAddrListPartition(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{7735631 0xc00268bd20}) t])
;; 
JOKER FUNC net.TestAvoidDNSName has: 
;; (defn TestAvoidDNSName
;;   "Issue 13705: don't try to resolve onion addresses, etc"
;;   {:added "1.0"
;;    :go "testAvoidDNSName(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{7599290 0xc000f09420}) t])
;; 
JOKER FUNC net.TestBuffers_WriteTo has: 
;; (defn TestBuffers_WriteTo
;;   {:added "1.0"
;;    :go "testBuffers_WriteTo(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{8141596 0xc0030c3580}) t])
;; 
JOKER FUNC net.TestBuffers_consume has: 
;; (defn TestBuffers_consume
;;   {:added "1.0"
;;    :go "testBuffers_consume(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{8140503 0xc0030c21a0}) t])
;; 
JOKER FUNC net.TestBuffers_read has: 
;; (defn TestBuffers_read
;;   {:added "1.0"
;;    :go "testBuffers_read(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{8140036 0xc002ebf9e0}) t])
;; 
JOKER FUNC net.TestCIDRMask has: 
;; (defn TestCIDRMask
;;   {:added "1.0"
;;    :go "testCIDRMask(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{7894665 0xc002905900}) t])
;; 
JOKER FUNC net.TestCancelAfterDial has: 
;; (defn TestCancelAfterDial
;;   {:added "1.0"
;;    :go "testCancelAfterDial(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{7856542 0xc00327d9c0}) t])
;; 
JOKER FUNC net.TestCgoLookupIP has: 
;; (defn TestCgoLookupIP
;;   {:added "1.0"
;;    :go "testCgoLookupIP(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{8045483 0xc00333b6c0}) t])
;; 
JOKER FUNC net.TestCgoLookupIPWithCancel has: 
;; (defn TestCgoLookupIPWithCancel
;;   {:added "1.0"
;;    :go "testCgoLookupIPWithCancel(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{8045734 0xc00333bb80}) t])
;; 
JOKER FUNC net.TestCgoLookupPTR has: 
;; (defn TestCgoLookupPTR
;;   {:added "1.0"
;;    :go "testCgoLookupPTR(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{8046572 0xc00338ca60}) t])
;; 
JOKER FUNC net.TestCgoLookupPTRWithCancel has: 
;; (defn TestCgoLookupPTRWithCancel
;;   {:added "1.0"
;;    :go "testCgoLookupPTRWithCancel(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{8046826 0xc00338cec0}) t])
;; 
JOKER FUNC net.TestCgoLookupPort has: 
;; (defn TestCgoLookupPort
;;   {:added "1.0"
;;    :go "testCgoLookupPort(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{8046021 0xc00338c0a0}) t])
;; 
JOKER FUNC net.TestCgoLookupPortWithCancel has: 
;; (defn TestCgoLookupPortWithCancel
;;   {:added "1.0"
;;    :go "testCgoLookupPortWithCancel(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{8046280 0xc00338c520}) t])
;; 
JOKER FUNC net.TestCloseError has: 
;; (defn TestCloseError
;;   {:added "1.0"
;;    :go "testCloseError(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{8103733 0xc001bf6f40}) t])
;; 
JOKER FUNC net.TestCloseRead has: 
;; (defn TestCloseRead
;;   {:added "1.0"
;;    :go "testCloseRead(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{7738725 0xc002706120}) t])
;; 
JOKER FUNC net.TestCloseUnblocksRead has: 
;; (defn TestCloseUnblocksRead
;;   "Issue 17695: verify that a blocked Read is woken up by a Close."
;;   {:added "1.0"
;;    :go "testCloseUnblocksRead(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{7749574 0xc00139b700}) t])
;; 
JOKER FUNC net.TestCloseWrite has: 
;; (defn TestCloseWrite
;;   {:added "1.0"
;;    :go "testCloseWrite(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{7739761 0xc002707520}) t])
;; 
JOKER FUNC net.TestClosingListener has: 
;; (defn TestClosingListener
;;   "Issue 21856."
;;   {:added "1.0"
;;    :go "testClosingListener(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{7826768 0xc002ee5200}) t])
;; 
JOKER FUNC net.TestConcurrentPreferGoResolversDial has: 
;; (defn TestConcurrentPreferGoResolversDial
;;   "TestConcurrentPreferGoResolversDial tests that multiple resolvers with the
;; PreferGo option used concurrently are all dialed properly."
;;   {:added "1.0"
;;    :go "testConcurrentPreferGoResolversDial(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{7722046 0xc0017e9280}) t])
;; 
JOKER FUNC net.TestConfHostLookupOrder has: 
;; (defn TestConfHostLookupOrder
;;   {:added "1.0"
;;    :go "testConfHostLookupOrder(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{7647734 0xc001ef8000}) t])
;; 
JOKER FUNC net.TestConnAndListener has: 
;; (defn TestConnAndListener
;;   {:added "1.0"
;;    :go "testConnAndListener(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{8124076 0xc002c1f800}) t])
;; 
JOKER FUNC net.TestConnAndPacketConn has: 
;; (defn TestConnAndPacketConn
;;   {:added "1.0"
;;    :go "testConnAndPacketConn(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{7997308 0xc002da36e0}) t])
;; 
JOKER FUNC net.TestConnClose has: 
;; (defn TestConnClose
;;   {:added "1.0"
;;    :go "testConnClose(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{7741541 0xc001858f00}) t])
;; 
JOKER FUNC net.TestCopyPipeIntoTCP has: 
;; (defn TestCopyPipeIntoTCP
;;   {:added "1.0"
;;    :go "testCopyPipeIntoTCP(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{7879521 0xc0024a67a0}) t])
;; 
JOKER FUNC net.TestDNSDefaultSearch has: 
;; (defn TestDNSDefaultSearch
;;   {:added "1.0"
;;    :go "testDNSDefaultSearch(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{7782597 0xc0026c95c0}) t])
;; 
JOKER FUNC net.TestDNSDialTCP has: 
;; (defn TestDNSDialTCP
;;   "Issue 26573: verify that Conns that don't implement PacketConn are treated
;; as streams even when udp was requested."
;;   {:added "1.0"
;;    :go "testDNSDialTCP(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{7633909 0xc0019fb1a0}) t])
;; 
JOKER FUNC net.TestDNSFlood has: 
;; (defn TestDNSFlood
;;   {:added "1.0"
;;    :go "testDNSFlood(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{7709400 0xc002382a20}) t])
;; 
JOKER FUNC net.TestDNSGoroutineRace has: 
;; (defn TestDNSGoroutineRace
;;   "Test for a race between uninstalling the test hooks and closing a
;; socket connection. This used to fail when testing with -race."
;;   {:added "1.0"
;;    :go "testDNSGoroutineRace(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{7629807 0xc00198a4e0}) t])
;; 
JOKER FUNC net.TestDNSName has: 
;; (defn TestDNSName
;;   {:added "1.0"
;;    :go "testDNSName(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{7646422 0xc001ddf2e0}) t])
;; 
JOKER FUNC net.TestDNSNameLength has: 
;; (defn TestDNSNameLength
;;   {:added "1.0"
;;    :go "testDNSNameLength(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{7783017 0xc0026c9d00}) t])
;; 
JOKER FUNC net.TestDNSReadConfig has: 
;; (defn TestDNSReadConfig
;;   {:added "1.0"
;;    :go "testDNSReadConfig(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{7781049 0xc0026b5be0}) t])
;; 
JOKER FUNC net.TestDNSReadMissingFile has: 
;; (defn TestDNSReadMissingFile
;;   {:added "1.0"
;;    :go "testDNSReadMissingFile(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{7781514 0xc0026c84c0}) t])
;; 
JOKER FUNC net.TestDNSSRVUniformity has: 
;; (defn TestDNSSRVUniformity
;;   {:added "1.0"
;;    :go "testDNSSRVUniformity(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{7672030 0xc00132f5a0}) t])
;; 
JOKER FUNC net.TestDNSTransportFallback has: 
;; (defn TestDNSTransportFallback
;;   {:added "1.0"
;;    :go "testDNSTransportFallback(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{7596473 0xc000db05e0}) t])
;; 
JOKER FUNC net.TestDialAddrError has: 
;; (defn TestDialAddrError
;;   {:added "1.0"
;;    :go "testDialAddrError(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{8094934 0xc0014aa6a0}) t])
;; 
JOKER FUNC net.TestDialCancel has: 
;; (defn TestDialCancel
;;   {:added "1.0"
;;    :go "testDialCancel(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{7854980 0xc003270360}) t])
;; 
JOKER FUNC net.TestDialContextCancelRace has: 
;; (defn TestDialContextCancelRace
;;   "Issue 16523"
;;   {:added "1.0"
;;    :go "testDialContextCancelRace(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{8032720 0xc00320ec20}) t])
;; 
JOKER FUNC net.TestDialError has: 
;; (defn TestDialError
;;   {:added "1.0"
;;    :go "testDialError(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{8092718 0xc002637de0}) t])
;; 
JOKER FUNC net.TestDialGoogle has: 
;; (defn TestDialGoogle
;;   {:added "1.0"
;;    :go "testDialGoogle(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{8126870 0xc002c70920}) t])
;; 
JOKER FUNC net.TestDialListenIPArgs has: 
;; (defn TestDialListenIPArgs
;;   {:added "1.0"
;;    :go "testDialListenIPArgs(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{7497798 0xc00245fec0}) t])
;; 
JOKER FUNC net.TestDialListenerAddr has: 
;; (defn TestDialListenerAddr
;;   "Issue 18806: it should always be possible to net.Dial a
;; net.Listener().Addr().String when the listen address was ":n", even
;; if the machine has halfway configured IPv6 such that it can bind on
;; "::" not connect back to that same address."
;;   {:added "1.0"
;;    :go "testDialListenerAddr(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{7858470 0xc0032cc980}) t])
;; 
JOKER FUNC net.TestDialLocal has: 
;; (defn TestDialLocal
;;   {:added "1.0"
;;    :go "testDialLocal(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{7835051 0xc003014e40}) t])
;; 
JOKER FUNC net.TestDialParallel has: 
;; (defn TestDialParallel
;;   {:added "1.0"
;;    :go "testDialParallel(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{7838400 0xc003051bc0}) t])
;; 
JOKER FUNC net.TestDialParallelSpuriousConnection has: 
;; (defn TestDialParallelSpuriousConnection
;;   {:added "1.0"
;;    :go "testDialParallelSpuriousConnection(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{7845246 0xc003168880}) t])
;; 
JOKER FUNC net.TestDialTimeout has: 
;; (defn TestDialTimeout
;;   {:added "1.0"
;;    :go "testDialTimeout(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{7524796 0xc00192b2e0}) t])
;; 
JOKER FUNC net.TestDialTimeoutMaxDuration has: 
;; (defn TestDialTimeoutMaxDuration
;;   {:added "1.0"
;;    :go "testDialTimeoutMaxDuration(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{7526431 0xc000d826e0}) t])
;; 
JOKER FUNC net.TestDialerControl has: 
;; (defn TestDialerControl
;;   {:added "1.0"
;;    :go "testDialerControl(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{7858766 0xc0032ccfe0}) t])
;; 
JOKER FUNC net.TestDialerDualStack has: 
;; (defn TestDialerDualStack
;;   {:added "1.0"
;;    :go "testDialerDualStack(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{7852875 0xc00322ba00}) t])
;; 
JOKER FUNC net.TestDialerDualStackFDLeak has: 
;; (defn TestDialerDualStackFDLeak
;;   {:added "1.0"
;;    :go "testDialerDualStackFDLeak(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{7835369 0xc0030235c0}) t])
;; 
JOKER FUNC net.TestDialerFallbackDelay has: 
;; (defn TestDialerFallbackDelay
;;   {:added "1.0"
;;    :go "testDialerFallbackDelay(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{7843510 0xc003154580}) t])
;; 
JOKER FUNC net.TestDialerKeepAlive has: 
;; (defn TestDialerKeepAlive
;;   {:added "1.0"
;;    :go "testDialerKeepAlive(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{7854184 0xc0032574a0}) t])
;; 
JOKER FUNC net.TestDialerLocalAddr has: 
;; (defn TestDialerLocalAddr
;;   {:added "1.0"
;;    :go "testDialerLocalAddr(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{7848629 0xc0031b8cc0}) t])
;; 
JOKER FUNC net.TestDialerPartialDeadline has: 
;; (defn TestDialerPartialDeadline
;;   {:added "1.0"
;;    :go "testDialerPartialDeadline(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{7847257 0xc003194720}) t])
;; 
JOKER FUNC net.TestDtoi has: 
;; (defn TestDtoi
;;   {:added "1.0"
;;    :go "testDtoi(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{7697603 0xc002534cc0}) t])
;; 
JOKER FUNC net.TestDualStackTCPListener has: 
;; (defn TestDualStackTCPListener
;;   "TestDualStackTCPListener tests both single and double listen
;; to a test listener with various address families, different
;; listening address and same port.
;; 
;; On DragonFly BSD, we expect the kernel version of node under test
;; to be greater than or equal to 4.4."
;;   {:added "1.0"
;;    :go "testDualStackTCPListener(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{7813683 0xc002e32700}) t])
;; 
JOKER FUNC net.TestDualStackUDPListener has: 
;; (defn TestDualStackUDPListener
;;   "TestDualStackUDPListener tests both single and double listen
;; to a test listener with various address families, different
;; listening address and same port.
;; 
;; On DragonFly BSD, we expect the kernel version of node under test
;; to be greater than or equal to 4.4."
;;   {:added "1.0"
;;    :go "testDualStackUDPListener(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{7816334 0xc002e3f3c0}) t])
;; 
JOKER FUNC net.TestEndlessWrite has: 
;; (defn TestEndlessWrite
;;   "Test that a client can't trigger an endless loop of write system
;; calls on the server by shutting down the write side on the client.
;; Possibility raised in the discussion of https://golang.org/cl/71973."
;;   {:added "1.0"
;;    :go "testEndlessWrite(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{7801361 0xc002ceb180}) t])
;; 
JOKER FUNC net.TestErrorForOriginalNameWhenSearching has: 
;; (defn TestErrorForOriginalNameWhenSearching
;;   "Issue 12712.
;; When using search domains, return the error encountered
;; querying the original name instead of an error encountered
;; querying a generated name."
;;   {:added "1.0"
;;    :go "testErrorForOriginalNameWhenSearching(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{7610956 0xc000e8e880}) t])
;; 
JOKER FUNC net.TestFileCloseRace has: 
;; (defn TestFileCloseRace
;;   "Issue 24483."
;;   {:added "1.0"
;;    :go "testFileCloseRace(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{7989658 0xc002c537a0}) t])
;; 
JOKER FUNC net.TestFileConn has: 
;; (defn TestFileConn
;;   {:added "1.0"
;;    :go "testFileConn(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{7984361 0xc002bf10e0}) t])
;; 
JOKER FUNC net.TestFileError has: 
;; (defn TestFileError
;;   {:added "1.0"
;;    :go "testFileError(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{8107463 0xc002686f60}) t])
;; 
JOKER FUNC net.TestFileListener has: 
;; (defn TestFileListener
;;   {:added "1.0"
;;    :go "testFileListener(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{7986498 0xc002c15ac0}) t])
;; 
JOKER FUNC net.TestFilePacketConn has: 
;; (defn TestFilePacketConn
;;   {:added "1.0"
;;    :go "testFilePacketConn(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{7988278 0xc002c27cc0}) t])
;; 
JOKER FUNC net.TestGoDebugString has: 
;; (defn TestGoDebugString
;;   {:added "1.0"
;;    :go "testGoDebugString(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{7696912 0xc00250c660}) t])
;; 
JOKER FUNC net.TestGoLookupIPOrderFallbackToFile has: 
;; (defn TestGoLookupIPOrderFallbackToFile
;;   "Test that goLookupIPOrder falls back to the host file when no DNS servers are available."
;;   {:added "1.0"
;;    :go "testGoLookupIPOrderFallbackToFile(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{7609043 0xc000d61ec0}) t])
;; 
JOKER FUNC net.TestGoLookupIPWithResolverConfig has: 
;; (defn TestGoLookupIPWithResolverConfig
;;   {:added "1.0"
;;    :go "testGoLookupIPWithResolverConfig(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{7606373 0xc0015c7b20}) t])
;; 
JOKER FUNC net.TestHostCacheModification has: 
;; (defn TestHostCacheModification
;;   {:added "1.0"
;;    :go "testHostCacheModification(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{7568135 0xc0014db020}) t])
;; 
JOKER FUNC net.TestIPAddrFamily has: 
;; (defn TestIPAddrFamily
;;   {:added "1.0"
;;    :go "testIPAddrFamily(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{7901399 0xc002a62500}) t])
;; 
JOKER FUNC net.TestIPAddrScope has: 
;; (defn TestIPAddrScope
;;   {:added "1.0"
;;    :go "testIPAddrScope(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{7904302 0xc001ae8c60}) t])
;; 
JOKER FUNC net.TestIPConnLocalName has: 
;; (defn TestIPConnLocalName
;;   {:added "1.0"
;;    :go "testIPConnLocalName(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{7497074 0xc00245e600}) t])
;; 
JOKER FUNC net.TestIPConnRemoteName has: 
;; (defn TestIPConnRemoteName
;;   {:added "1.0"
;;    :go "testIPConnRemoteName(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{7497418 0xc00245f5e0}) t])
;; 
JOKER FUNC net.TestIPConnSpecificMethods has: 
;; (defn TestIPConnSpecificMethods
;;   {:added "1.0"
;;    :go "testIPConnSpecificMethods(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{8002955 0xc002e72e20}) t])
;; 
JOKER FUNC net.TestIPMask has: 
;; (defn TestIPMask
;;   {:added "1.0"
;;    :go "testIPMask(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{7887824 0xc002778a20}) t])
;; 
JOKER FUNC net.TestIPMaskString has: 
;; (defn TestIPMaskString
;;   {:added "1.0"
;;    :go "testIPMaskString(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{7888364 0xc002779440}) t])
;; 
JOKER FUNC net.TestIPNetContains has: 
;; (defn TestIPNetContains
;;   {:added "1.0"
;;    :go "testIPNetContains(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{7893186 0xc0028654a0}) t])
;; 
JOKER FUNC net.TestIPNetString has: 
;; (defn TestIPNetString
;;   {:added "1.0"
;;    :go "testIPNetString(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{7893847 0xc002904240}) t])
;; 
JOKER FUNC net.TestIPString has: 
;; (defn TestIPString
;;   {:added "1.0"
;;    :go "testIPString(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{7886382 0xc002774980}) t])
;; 
JOKER FUNC net.TestIPv4MulticastListener has: 
;; (defn TestIPv4MulticastListener
;;   "TestIPv4MulticastListener tests both single and double listen to a
;; test listener with same address family, same group address and same
;; port."
;;   {:added "1.0"
;;    :go "testIPv4MulticastListener(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{7822156 0xc002eb6ba0}) t])
;; 
JOKER FUNC net.TestIPv6LinkLocalUnicastTCP has: 
;; (defn TestIPv6LinkLocalUnicastTCP
;;   {:added "1.0"
;;    :go "testIPv6LinkLocalUnicastTCP(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{7872011 0xc001f159a0}) t])
;; 
JOKER FUNC net.TestIPv6LinkLocalUnicastUDP has: 
;; (defn TestIPv6LinkLocalUnicastUDP
;;   {:added "1.0"
;;    :go "testIPv6LinkLocalUnicastUDP(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{7554950 0xc00173a600}) t])
;; 
JOKER FUNC net.TestIPv6MulticastListener has: 
;; (defn TestIPv6MulticastListener
;;   "TestIPv6MulticastListener tests both single and double listen to a
;; test listener with same address family, same group address and same
;; port."
;;   {:added "1.0"
;;    :go "testIPv6MulticastListener(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{7824434 0xc002edc9c0}) t])
;; 
JOKER FUNC net.TestIgnoreDNSForgeries has: 
;; (defn TestIgnoreDNSForgeries
;;   "UDP round-tripper algorithm should ignore invalid DNS responses (issue 13281)."
;;   {:added "1.0"
;;    :go "testIgnoreDNSForgeries(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{7616677 0xc001485a60}) t])
;; 
JOKER FUNC net.TestIgnoreLameReferrals has: 
;; (defn TestIgnoreLameReferrals
;;   "Issue 15434. If a name server gives a lame referral, continue to the next."
;;   {:added "1.0"
;;    :go "testIgnoreLameReferrals(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{7612413 0xc000ea1640}) t])
;; 
JOKER FUNC net.TestInterfaceAddrs has: 
;; (defn TestInterfaceAddrs
;;   {:added "1.0"
;;    :go "testInterfaceAddrs(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{7658699 0xc001fea460}) t])
;; 
JOKER FUNC net.TestInterfaceArrivalAndDeparture has: 
;; (defn TestInterfaceArrivalAndDeparture
;;   {:added "1.0"
;;    :go "testInterfaceArrivalAndDeparture(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{8085566 0xc0027c3000}) t])
;; 
JOKER FUNC net.TestInterfaceMulticastAddrs has: 
;; (defn TestInterfaceMulticastAddrs
;;   {:added "1.0"
;;    :go "testInterfaceMulticastAddrs(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{7659618 0xc00200a2c0}) t])
;; 
JOKER FUNC net.TestInterfaceUnicastAddrs has: 
;; (defn TestInterfaceUnicastAddrs
;;   {:added "1.0"
;;    :go "testInterfaceUnicastAddrs(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{7659077 0xc001febf00}) t])
;; 
JOKER FUNC net.TestInterfaces has: 
;; (defn TestInterfaces
;;   {:added "1.0"
;;    :go "testInterfaces(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{7657987 0xc001fe7100}) t])
;; 
JOKER FUNC net.TestIssue8434 has: 
;; (defn TestIssue8434
;;   "Issue 8434: verify that Temporary returns true on an error when rcode
;; is SERVFAIL"
;;   {:added "1.0"
;;    :go "testIssue8434(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{7630991 0xc00198b860}) t])
;; 
JOKER FUNC net.TestJoinHostPort has: 
;; (defn TestJoinHostPort
;;   {:added "1.0"
;;    :go "testJoinHostPort(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{7899509 0xc002a3c8c0}) t])
;; 
JOKER FUNC net.TestListenCloseListen has: 
;; (defn TestListenCloseListen
;;   "nacl was previous failing to reuse an address."
;;   {:added "1.0"
;;    :go "testListenCloseListen(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{7744449 0xc00138c0a0}) t])
;; 
JOKER FUNC net.TestListenConfigControl has: 
;; (defn TestListenConfigControl
;;   {:added "1.0"
;;    :go "testListenConfigControl(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{7827300 0xc002ee5e60}) t])
;; 
JOKER FUNC net.TestListenError has: 
;; (defn TestListenError
;;   {:added "1.0"
;;    :go "testListenError(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{8096746 0xc001d6c800}) t])
;; 
JOKER FUNC net.TestListenPacketError has: 
;; (defn TestListenPacketError
;;   {:added "1.0"
;;    :go "testListenPacketError(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{8098436 0xc0021f05a0}) t])
;; 
JOKER FUNC net.TestListenerClose has: 
;; (defn TestListenerClose
;;   {:added "1.0"
;;    :go "testListenerClose(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{7742400 0xc0022d4180}) t])
;; 
JOKER FUNC net.TestLookupCNAME has: 
;; (defn TestLookupCNAME
;;   {:added "1.0"
;;    :go "testLookupCNAME(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{7705654 0xc002a5c300}) t])
;; 
JOKER FUNC net.TestLookupContextCancel has: 
;; (defn TestLookupContextCancel
;;   {:added "1.0"
;;    :go "testLookupContextCancel(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{7719386 0xc002a4ed20}) t])
;; 
JOKER FUNC net.TestLookupDotsWithLocalSource has: 
;; (defn TestLookupDotsWithLocalSource
;;   {:added "1.0"
;;    :go "testLookupDotsWithLocalSource(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{7711657 0xc002a807e0}) t])
;; 
JOKER FUNC net.TestLookupDotsWithRemoteSource has: 
;; (defn TestLookupDotsWithRemoteSource
;;   {:added "1.0"
;;    :go "testLookupDotsWithRemoteSource(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{7712780 0xc002a81820}) t])
;; 
JOKER FUNC net.TestLookupGmailMX has: 
;; (defn TestLookupGmailMX
;;   {:added "1.0"
;;    :go "testLookupGmailMX(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{7700674 0xc001453a20}) t])
;; 
JOKER FUNC net.TestLookupGmailNS has: 
;; (defn TestLookupGmailNS
;;   {:added "1.0"
;;    :go "testLookupGmailNS(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{7701663 0xc002181b00}) t])
;; 
JOKER FUNC net.TestLookupGmailTXT has: 
;; (defn TestLookupGmailTXT
;;   {:added "1.0"
;;    :go "testLookupGmailTXT(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{7702671 0xc002187300}) t])
;; 
JOKER FUNC net.TestLookupGoogleHost has: 
;; (defn TestLookupGoogleHost
;;   {:added "1.0"
;;    :go "testLookupGoogleHost(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{7706419 0xc001521c80}) t])
;; 
JOKER FUNC net.TestLookupGoogleIP has: 
;; (defn TestLookupGoogleIP
;;   {:added "1.0"
;;    :go "testLookupGoogleIP(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{7707438 0xc001e9ef40}) t])
;; 
JOKER FUNC net.TestLookupGooglePublicDNSAddr has: 
;; (defn TestLookupGooglePublicDNSAddr
;;   {:added "1.0"
;;    :go "testLookupGooglePublicDNSAddr(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{7703860 0xc0027dc7a0}) t])
;; 
JOKER FUNC net.TestLookupGoogleSRV has: 
;; (defn TestLookupGoogleSRV
;;   {:added "1.0"
;;    :go "testLookupGoogleSRV(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{7699544 0xc002a2e900}) t])
;; 
JOKER FUNC net.TestLookupHostCancel has: 
;; (defn TestLookupHostCancel
;;   "TestLookupHostCancel verifies that lookup works even after many
;; canceled lookups (see golang.org/issue/24178 for details)."
;;   {:added "1.0"
;;    :go "testLookupHostCancel(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{7720671 0xc00121bd60}) t])
;; 
JOKER FUNC net.TestLookupIPv6LinkLocalAddr has: 
;; (defn TestLookupIPv6LinkLocalAddr
;;   {:added "1.0"
;;    :go "testLookupIPv6LinkLocalAddr(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{7704420 0xc0027dd120}) t])
;; 
JOKER FUNC net.TestLookupIPv6LinkLocalAddrWithZone has: 
;; (defn TestLookupIPv6LinkLocalAddrWithZone
;;   {:added "1.0"
;;    :go "testLookupIPv6LinkLocalAddrWithZone(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{7704893 0xc002850360}) t])
;; 
JOKER FUNC net.TestLookupLongTXT has: 
;; (defn TestLookupLongTXT
;;   {:added "1.0"
;;    :go "testLookupLongTXT(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{7706888 0xc001e9e720}) t])
;; 
JOKER FUNC net.TestLookupNonLDH has: 
;; (defn TestLookupNonLDH
;;   {:added "1.0"
;;    :go "testLookupNonLDH(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{7718731 0xc0028fdd20}) t])
;; 
JOKER FUNC net.TestLookupPort has: 
;; (defn TestLookupPort
;;   {:added "1.0"
;;    :go "testLookupPort(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{7716116 0xc0021ebba0}) t])
;; 
JOKER FUNC net.TestLookupPort_Minimal has: 
;; (defn TestLookupPort_Minimal
;;   "Like TestLookupPort but with minimal tests that should always pass
;; because the answers are baked-in to the net package."
;;   {:added "1.0"
;;    :go "testLookupPort_Minimal(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{7717714 0xc0023f47a0}) t])
;; 
JOKER FUNC net.TestLookupProtocol_Minimal has: 
;; (defn TestLookupProtocol_Minimal
;;   {:added "1.0"
;;    :go "testLookupProtocol_Minimal(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{7718275 0xc0028fd040}) t])
;; 
JOKER FUNC net.TestLookupStaticAddr has: 
;; (defn TestLookupStaticAddr
;;   {:added "1.0"
;;    :go "testLookupStaticAddr(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{7567540 0xc0014e7b20}) t])
;; 
JOKER FUNC net.TestLookupStaticHost has: 
;; (defn TestLookupStaticHost
;;   {:added "1.0"
;;    :go "testLookupStaticHost(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{7565640 0xc0014e8a60}) t])
;; 
JOKER FUNC net.TestLookupTorOnion has: 
;; (defn TestLookupTorOnion
;;   "Issue 13705: don't try to resolve onion addresses, etc"
;;   {:added "1.0"
;;    :go "testLookupTorOnion(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{7600904 0xc00117cac0}) t])
;; 
JOKER FUNC net.TestLookupWithIP has: 
;; (defn TestLookupWithIP
;;   {:added "1.0"
;;    :go "testLookupWithIP(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{7882391 0xc002568120}) t])
;; 
JOKER FUNC net.TestMain has: 
;; (defn TestMain
;;   {:added "1.0"
;;    :go "testMain(m)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{7465774 0xc002731f20}) m])
;; 
JOKER FUNC net.TestMarshalEmptyIP has: 
;; (defn TestMarshalEmptyIP
;;   "Issue 6339"
;;   {:added "1.0"
;;    :go "testMarshalEmptyIP(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{7883973 0xc002569a20}) t])
;; 
JOKER FUNC net.TestNetworkNumberAndMask has: 
;; (defn TestNetworkNumberAndMask
;;   {:added "1.0"
;;    :go "testNetworkNumberAndMask(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{7896440 0xc0029c1fa0}) t])
;; 
JOKER FUNC net.TestNilResolverLookup has: 
;; (defn TestNilResolverLookup
;;   "Issue 24330: treat the nil *Resolver like a zero value. Verify nothing
;; crashes if nil is used."
;;   {:added "1.0"
;;    :go "testNilResolverLookup(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{7719995 0xc002a4fee0}) t])
;; 
JOKER FUNC net.TestNoSuchHost has: 
;; (defn TestNoSuchHost
;;   "TestNoSuchHost verifies that tryOneName works correctly when the domain does
;; not exist.
;; 
;; Issue 12778: verify that NXDOMAIN without RA bit errors as "no such host"
;; and not "server misbehaving"
;; 
;; Issue 25336: verify that NXDOMAIN errors fail fast.
;; 
;; Issue 27525: verify that empty answers fail fast."
;;   {:added "1.0"
;;    :go "testNoSuchHost(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{7632175 0xc0019c1fe0}) t])
;; 
JOKER FUNC net.TestNotTemporaryRead has: 
;; (defn TestNotTemporaryRead
;;   "Issue 24808: verify that ECONNRESET is not temporary for read."
;;   {:added "1.0"
;;    :go "testNotTemporaryRead(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{7750065 0xc001b71e60}) t])
;; 
JOKER FUNC net.TestPacketConn has: 
;; (defn TestPacketConn
;;   {:added "1.0"
;;    :go "testPacketConn(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{7995946 0xc002d79660}) t])
;; 
JOKER FUNC net.TestPacketConnClose has: 
;; (defn TestPacketConnClose
;;   {:added "1.0"
;;    :go "testPacketConnClose(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{7743751 0xc0022d5480}) t])
;; 
JOKER FUNC net.TestParseCIDR has: 
;; (defn TestParseCIDR
;;   {:added "1.0"
;;    :go "testParseCIDR(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{7891835 0xc00283d280}) t])
;; 
JOKER FUNC net.TestParseIP has: 
;; (defn TestParseIP
;;   {:added "1.0"
;;    :go "testParseIP(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{7881897 0xc0024c3640}) t])
;; 
JOKER FUNC net.TestParseMAC has: 
;; (defn TestParseMAC
;;   {:added "1.0"
;;    :go "testParseMAC(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{8051829 0xc00340a6c0}) t])
;; 
JOKER FUNC net.TestParseNSSConf has: 
;; (defn TestParseNSSConf
;;   {:added "1.0"
;;    :go "testParseNSSConf(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{8007670 0xc002f02680}) t])
;; 
JOKER FUNC net.TestParsePort has: 
;; (defn TestParsePort
;;   {:added "1.0"
;;    :go "testParsePort(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{8123201 0xc002c1eea0}) t])
;; 
JOKER FUNC net.TestParseProcNet has: 
;; (defn TestParseProcNet
;;   {:added "1.0"
;;    :go "testParseProcNet(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{7862607 0xc003347aa0}) t])
;; 
JOKER FUNC net.TestPointToPointInterface has: 
;; (defn TestPointToPointInterface
;;   {:added "1.0"
;;    :go "testPointToPointInterface(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{8084216 0xc002593740}) t])
;; 
JOKER FUNC net.TestProhibitionaryDialArg has: 
;; (defn TestProhibitionaryDialArg
;;   {:added "1.0"
;;    :go "testProhibitionaryDialArg(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{7834436 0xc0030034e0}) t])
;; 
JOKER FUNC net.TestProtocolDialError has: 
;; (defn TestProtocolDialError
;;   {:added "1.0"
;;    :go "testProtocolDialError(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{8094172 0xc00276b880}) t])
;; 
JOKER FUNC net.TestProtocolListenError has: 
;; (defn TestProtocolListenError
;;   {:added "1.0"
;;    :go "testProtocolListenError(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{8099353 0xc0021f14e0}) t])
;; 
JOKER FUNC net.TestRFC6724ClassifyScope has: 
;; (defn TestRFC6724ClassifyScope
;;   {:added "1.0"
;;    :go "testRFC6724ClassifyScope(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{7926012 0xc0015512a0}) t])
;; 
JOKER FUNC net.TestRFC6724CommonPrefixLength has: 
;; (defn TestRFC6724CommonPrefixLength
;;   {:added "1.0"
;;    :go "testRFC6724CommonPrefixLength(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{7927119 0xc002a543c0}) t])
;; 
JOKER FUNC net.TestRFC6724PolicyTableClassify has: 
;; (defn TestRFC6724PolicyTableClassify
;;   {:added "1.0"
;;    :go "testRFC6724PolicyTableClassify(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{7924963 0xc0015500e0}) t])
;; 
JOKER FUNC net.TestRawConnControl has: 
;; (defn TestRawConnControl
;;   {:added "1.0"
;;    :go "testRawConnControl(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{8013960 0xc003004e20}) t])
;; 
JOKER FUNC net.TestRawConnReadWrite has: 
;; (defn TestRawConnReadWrite
;;   {:added "1.0"
;;    :go "testRawConnReadWrite(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{8010509 0xc002fa87e0}) t])
;; 
JOKER FUNC net.TestReadFromTimeout has: 
;; (defn TestReadFromTimeout
;;   {:added "1.0"
;;    :go "testReadFromTimeout(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{7533555 0xc001b6b220}) t])
;; 
JOKER FUNC net.TestReadFromTimeoutFluctuation has: 
;; (defn TestReadFromTimeoutFluctuation
;;   {:added "1.0"
;;    :go "testReadFromTimeoutFluctuation(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{7539642 0xc0018fe300}) t])
;; 
JOKER FUNC net.TestReadLine has: 
;; (defn TestReadLine
;;   {:added "1.0"
;;    :go "testReadLine(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{7696067 0xc0024236e0}) t])
;; 
JOKER FUNC net.TestReadTimeout has: 
;; (defn TestReadTimeout
;;   {:added "1.0"
;;    :go "testReadTimeout(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{7530808 0xc001ccf360}) t])
;; 
JOKER FUNC net.TestReadTimeoutFluctuation has: 
;; (defn TestReadTimeoutFluctuation
;;   {:added "1.0"
;;    :go "testReadTimeoutFluctuation(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{7538965 0xc0019029a0}) t])
;; 
JOKER FUNC net.TestReadTimeoutMustNotReturn has: 
;; (defn TestReadTimeoutMustNotReturn
;;   {:added "1.0"
;;    :go "testReadTimeoutMustNotReturn(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{7531953 0xc001c91040}) t])
;; 
JOKER FUNC net.TestReadTimeoutUnblocksRead has: 
;; (defn TestReadTimeoutUnblocksRead
;;   "Tests that a blocked Read is interrupted by a concurrent SetReadDeadline
;; modifying that Conn's read deadline to the past.
;; See golang.org/cl/30164 which documented this. The net/http package
;; depends on this."
;;   {:added "1.0"
;;    :go "testReadTimeoutUnblocksRead(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{7748392 0xc00139a5c0}) t])
;; 
JOKER FUNC net.TestReadUnixgramWithUnnamedSocket has: 
;; (defn TestReadUnixgramWithUnnamedSocket
;;   {:added "1.0"
;;    :go "testReadUnixgramWithUnnamedSocket(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{7446749 0xc002957b20}) t])
;; 
JOKER FUNC net.TestReadWriteDeadlineRace has: 
;; (defn TestReadWriteDeadlineRace
;;   {:added "1.0"
;;    :go "testReadWriteDeadlineRace(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{7546240 0xc000f30b60}) t])
;; 
JOKER FUNC net.TestReadWriteProlongedTimeout has: 
;; (defn TestReadWriteProlongedTimeout
;;   "TestReadWriteProlongedTimeout tests concurrent deadline
;; modification. Known to cause data races in the past."
;;   {:added "1.0"
;;    :go "testReadWriteProlongedTimeout(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{7544734 0xc000d6c020}) t])
;; 
JOKER FUNC net.TestResolveGoogle has: 
;; (defn TestResolveGoogle
;;   {:added "1.0"
;;    :go "testResolveGoogle(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{8125622 0xc002c31580}) t])
;; 
JOKER FUNC net.TestResolveIPAddr has: 
;; (defn TestResolveIPAddr
;;   {:added "1.0"
;;    :go "testResolveIPAddr(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{7496032 0xc00246ad20}) t])
;; 
JOKER FUNC net.TestResolveTCPAddr has: 
;; (defn TestResolveTCPAddr
;;   {:added "1.0"
;;    :go "testResolveTCPAddr(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{7870656 0xc001ee9f80}) t])
;; 
JOKER FUNC net.TestResolveUDPAddr has: 
;; (defn TestResolveUDPAddr
;;   {:added "1.0"
;;    :go "testResolveUDPAddr(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{7550328 0xc00111f360}) t])
;; 
JOKER FUNC net.TestRetryTimeout has: 
;; (defn TestRetryTimeout
;;   "Issue 16865. If a name server times out, continue to the next."
;;   {:added "1.0"
;;    :go "testRetryTimeout(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{7618373 0xc0011ad9e0}) t])
;; 
JOKER FUNC net.TestReverseAddress has: 
;; (defn TestReverseAddress
;;   {:added "1.0"
;;    :go "testReverseAddress(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{7708770 0xc001e9fe60}) t])
;; 
JOKER FUNC net.TestRotate has: 
;; (defn TestRotate
;;   {:added "1.0"
;;    :go "testRotate(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{7619417 0xc00122e2a0}) t])
;; 
JOKER FUNC net.TestSendfile has: 
;; (defn TestSendfile
;;   {:added "1.0"
;;    :go "testSendfile(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{7667211 0xc001bdc120}) t])
;; 
JOKER FUNC net.TestSendfileParts has: 
;; (defn TestSendfileParts
;;   {:added "1.0"
;;    :go "testSendfileParts(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{7668482 0xc001d7dee0}) t])
;; 
JOKER FUNC net.TestSendfileSeeked has: 
;; (defn TestSendfileSeeked
;;   {:added "1.0"
;;    :go "testSendfileSeeked(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{7669475 0xc001de5800}) t])
;; 
JOKER FUNC net.TestSortByRFC6724 has: 
;; (defn TestSortByRFC6724
;;   {:added "1.0"
;;    :go "testSortByRFC6724(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{7921899 0xc00170b580}) t])
;; 
JOKER FUNC net.TestSpecialDomainName has: 
;; (defn TestSpecialDomainName
;;   {:added "1.0"
;;    :go "testSpecialDomainName(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{7598329 0xc0011bfe60}) t])
;; 
JOKER FUNC net.TestSplice has: 
;; (defn TestSplice
;;   {:added "1.0"
;;    :go "testSplice(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{7762334 0xc0025ce440}) t])
;; 
JOKER FUNC net.TestSplitHostPort has: 
;; (defn TestSplitHostPort
;;   {:added "1.0"
;;    :go "testSplitHostPort(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{7896725 0xc0029e0620}) t])
;; 
JOKER FUNC net.TestSpuriousENOTAVAIL has: 
;; (defn TestSpuriousENOTAVAIL
;;   {:added "1.0"
;;    :go "testSpuriousENOTAVAIL(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{7806030 0xc002d75320}) t])
;; 
JOKER FUNC net.TestStrictErrorsLookupIP has: 
;; (defn TestStrictErrorsLookupIP
;;   "Issue 17448. With StrictErrors enabled, temporary errors should make
;; LookupIP fail rather than return a partial result."
;;   {:added "1.0"
;;    :go "testStrictErrorsLookupIP(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{7621530 0xc0018c6220}) t])
;; 
JOKER FUNC net.TestStrictErrorsLookupTXT has: 
;; (defn TestStrictErrorsLookupTXT
;;   "Issue 17448. With StrictErrors enabled, temporary errors should make
;; LookupTXT stop walking the search list."
;;   {:added "1.0"
;;    :go "testStrictErrorsLookupTXT(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{7628123 0xc001986a00}) t])
;; 
JOKER FUNC net.TestSystemConf has: 
;; (defn TestSystemConf
;;   {:added "1.0"
;;    :go "testSystemConf(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{7656843 0xc001fe6140}) t])
;; 
JOKER FUNC net.TestTCPBig has: 
;; (defn TestTCPBig
;;   "Test that >32-bit reads work on 64-bit systems.
;; On 32-bit systems this tests that maxint reads work."
;;   {:added "1.0"
;;    :go "testTCPBig(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{7878371 0xc00245d0e0}) t])
;; 
JOKER FUNC net.TestTCPConcurrentAccept has: 
;; (defn TestTCPConcurrentAccept
;;   {:added "1.0"
;;    :go "testTCPConcurrentAccept(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{7873518 0xc001a79660}) t])
;; 
JOKER FUNC net.TestTCPConnSpecificMethods has: 
;; (defn TestTCPConnSpecificMethods
;;   {:added "1.0"
;;    :go "testTCPConnSpecificMethods(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{8000657 0xc002e319a0}) t])
;; 
JOKER FUNC net.TestTCPListener has: 
;; (defn TestTCPListener
;;   "TestTCPListener tests both single and double listen to a test
;; listener with same address family, same listening address and
;; same port."
;;   {:added "1.0"
;;    :go "testTCPListener(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{7807882 0xc002dd28c0}) t])
;; 
JOKER FUNC net.TestTCPListenerName has: 
;; (defn TestTCPListenerName
;;   {:added "1.0"
;;    :go "testTCPListenerName(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{7871627 0xc001f15220}) t])
;; 
JOKER FUNC net.TestTCPListenerSpecificMethods has: 
;; (defn TestTCPListenerSpecificMethods
;;   {:added "1.0"
;;    :go "testTCPListenerSpecificMethods(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{7999943 0xc002e30a20}) t])
;; 
JOKER FUNC net.TestTCPReadWriteAllocs has: 
;; (defn TestTCPReadWriteAllocs
;;   {:added "1.0"
;;    :go "testTCPReadWriteAllocs(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{7874294 0xc001a5e640}) t])
;; 
JOKER FUNC net.TestTCPSelfConnect has: 
;; (defn TestTCPSelfConnect
;;   {:added "1.0"
;;    :go "testTCPSelfConnect(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{7877119 0xc0021c3be0}) t])
;; 
JOKER FUNC net.TestTCPServer has: 
;; (defn TestTCPServer
;;   "TestTCPServer tests concurrent accept-read-write servers."
;;   {:added "1.0"
;;    :go "testTCPServer(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{7752961 0xc002302620}) t])
;; 
JOKER FUNC net.TestTCPSpuriousConnSetupCompletion has: 
;; (defn TestTCPSpuriousConnSetupCompletion
;;   "See golang.org/issue/14548."
;;   {:added "1.0"
;;    :go "testTCPSpuriousConnSetupCompletion(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{8136920 0xc002e42440}) t])
;; 
JOKER FUNC net.TestTCPSpuriousConnSetupCompletionWithCancel has: 
;; (defn TestTCPSpuriousConnSetupCompletionWithCancel
;;   "Issue 19289.
;; Test that a canceled Dial does not cause a subsequent Dial to succeed."
;;   {:added "1.0"
;;    :go "testTCPSpuriousConnSetupCompletionWithCancel(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{8138273 0xc002e43e40}) t])
;; 
JOKER FUNC net.TestTCPStress has: 
;; (defn TestTCPStress
;;   {:added "1.0"
;;    :go "testTCPStress(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{7875754 0xc0021c2120}) t])
;; 
JOKER FUNC net.TestTXTRecordTwoStrings has: 
;; (defn TestTXTRecordTwoStrings
;;   "Issue 27763: verify that two strings in one TXT record are concatenated."
;;   {:added "1.0"
;;    :go "testTXTRecordTwoStrings(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{7634634 0xc001a2e620}) t])
;; 
JOKER FUNC net.TestUDPConnLocalAndRemoteNames has: 
;; (defn TestUDPConnLocalAndRemoteNames
;;   {:added "1.0"
;;    :go "testUDPConnLocalAndRemoteNames(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{7554100 0xc001775820}) t])
;; 
JOKER FUNC net.TestUDPConnLocalName has: 
;; (defn TestUDPConnLocalName
;;   {:added "1.0"
;;    :go "testUDPConnLocalName(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{7553710 0xc00177fc40}) t])
;; 
JOKER FUNC net.TestUDPConnSpecificMethods has: 
;; (defn TestUDPConnSpecificMethods
;;   {:added "1.0"
;;    :go "testUDPConnSpecificMethods(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{8001811 0xc002e553c0}) t])
;; 
JOKER FUNC net.TestUDPListener has: 
;; (defn TestUDPListener
;;   "TestUDPListener tests both single and double listen to a test
;; listener with same address family, same listening address and
;; same port."
;;   {:added "1.0"
;;    :go "testUDPListener(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{7809188 0xc002dfa340}) t])
;; 
JOKER FUNC net.TestUDPReadSizeError has: 
;; (defn TestUDPReadSizeError
;;   {:added "1.0"
;;    :go "testUDPReadSizeError(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{7558161 0xc001576fa0}) t])
;; 
JOKER FUNC net.TestUDPServer has: 
;; (defn TestUDPServer
;;   {:added "1.0"
;;    :go "testUDPServer(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{7758519 0xc001c15e40}) t])
;; 
JOKER FUNC net.TestUDPZeroByteBuffer has: 
;; (defn TestUDPZeroByteBuffer
;;   {:added "1.0"
;;    :go "testUDPZeroByteBuffer(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{7557279 0xc001656840}) t])
;; 
JOKER FUNC net.TestUDPZeroBytePayload has: 
;; (defn TestUDPZeroBytePayload
;;   {:added "1.0"
;;    :go "testUDPZeroBytePayload(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{7556494 0xc00166f6c0}) t])
;; 
JOKER FUNC net.TestUnixAndUnixpacketServer has: 
;; (defn TestUnixAndUnixpacketServer
;;   "TestUnixAndUnixpacketServer tests concurrent accept-read-write
;; servers"
;;   {:added "1.0"
;;    :go "testUnixAndUnixpacketServer(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{7754860 0xc0024f93e0}) t])
;; 
JOKER FUNC net.TestUnixAutobindClose has: 
;; (defn TestUnixAutobindClose
;;   {:added "1.0"
;;    :go "testUnixAutobindClose(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{7804374 0xc002d33ec0}) t])
;; 
JOKER FUNC net.TestUnixConnLocalAndRemoteNames has: 
;; (defn TestUnixConnLocalAndRemoteNames
;;   {:added "1.0"
;;    :go "testUnixConnLocalAndRemoteNames(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{7451998 0xc002829500}) t])
;; 
JOKER FUNC net.TestUnixConnSpecificMethods has: 
;; (defn TestUnixConnSpecificMethods
;;   {:added "1.0"
;;    :go "testUnixConnSpecificMethods(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{8004422 0xc002ea4d60}) t])
;; 
JOKER FUNC net.TestUnixListenerSpecificMethods has: 
;; (defn TestUnixListenerSpecificMethods
;;   {:added "1.0"
;;    :go "testUnixListenerSpecificMethods(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{8003722 0xc002e73e60}) t])
;; 
JOKER FUNC net.TestUnixUnlink has: 
;; (defn TestUnixUnlink
;;   {:added "1.0"
;;    :go "testUnixUnlink(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{7454540 0xc0027f0dc0}) t])
;; 
JOKER FUNC net.TestUnixgramAutobind has: 
;; (defn TestUnixgramAutobind
;;   {:added "1.0"
;;    :go "testUnixgramAutobind(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{7803687 0xc002d0d5c0}) t])
;; 
JOKER FUNC net.TestUnixgramConnLocalAndRemoteNames has: 
;; (defn TestUnixgramConnLocalAndRemoteNames
;;   {:added "1.0"
;;    :go "testUnixgramConnLocalAndRemoteNames(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{7453368 0xc00281cf20}) t])
;; 
JOKER FUNC net.TestUnixgramLinuxAbstractLongName has: 
;; (defn TestUnixgramLinuxAbstractLongName
;;   {:added "1.0"
;;    :go "testUnixgramLinuxAbstractLongName(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{7804560 0xc002d3bb80}) t])
;; 
JOKER FUNC net.TestUnixgramServer has: 
;; (defn TestUnixgramServer
;;   {:added "1.0"
;;    :go "testUnixgramServer(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{7760489 0xc002599040}) t])
;; 
JOKER FUNC net.TestUnixgramWrite has: 
;; (defn TestUnixgramWrite
;;   {:added "1.0"
;;    :go "testUnixgramWrite(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{7450137 0xc00285d920}) t])
;; 
JOKER FUNC net.TestUnixgramZeroByteBuffer has: 
;; (defn TestUnixgramZeroByteBuffer
;;   {:added "1.0"
;;    :go "testUnixgramZeroByteBuffer(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{7448919 0xc00286bba0}) t])
;; 
JOKER FUNC net.TestUnixgramZeroBytePayload has: 
;; (defn TestUnixgramZeroBytePayload
;;   {:added "1.0"
;;    :go "testUnixgramZeroBytePayload(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{7447855 0xc00286a220}) t])
;; 
JOKER FUNC net.TestUpdateResolvConf has: 
;; (defn TestUpdateResolvConf
;;   {:added "1.0"
;;    :go "testUpdateResolvConf(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{7603208 0xc00100a5e0}) t])
;; 
JOKER FUNC net.TestVariousDeadlines has: 
;; (defn TestVariousDeadlines
;;   {:added "1.0"
;;    :go "testVariousDeadlines(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{7541275 0xc0018bf6c0}) t])
;; 
JOKER FUNC net.TestVariousDeadlines1Proc has: 
;; (defn TestVariousDeadlines1Proc
;;   {:added "1.0"
;;    :go "testVariousDeadlines1Proc(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{7541364 0xc0018bf860}) t])
;; 
JOKER FUNC net.TestVariousDeadlines4Proc has: 
;; (defn TestVariousDeadlines4Proc
;;   {:added "1.0"
;;    :go "testVariousDeadlines4Proc(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{7541604 0xc0018bfc80}) t])
;; 
JOKER FUNC net.TestWeighting has: 
;; (defn TestWeighting
;;   {:added "1.0"
;;    :go "testWeighting(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{7672388 0xc001a87c60}) t])
;; 
JOKER FUNC net.TestWildWildcardListener has: 
;; (defn TestWildWildcardListener
;;   {:added "1.0"
;;    :go "testWildWildcardListener(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{7821189 0xc002eaacc0}) t])
;; 
JOKER FUNC net.TestWriteTimeout has: 
;; (defn TestWriteTimeout
;;   {:added "1.0"
;;    :go "testWriteTimeout(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{7535334 0xc001ab8b00}) t])
;; 
JOKER FUNC net.TestWriteTimeoutFluctuation has: 
;; (defn TestWriteTimeoutFluctuation
;;   {:added "1.0"
;;    :go "testWriteTimeoutFluctuation(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{7540358 0xc0018ff180}) t])
;; 
JOKER FUNC net.TestWriteTimeoutMustNotReturn has: 
;; (defn TestWriteTimeoutMustNotReturn
;;   {:added "1.0"
;;    :go "testWriteTimeoutMustNotReturn(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{7536250 0xc001a3d760}) t])
;; 
JOKER FUNC net.TestWriteToTimeout has: 
;; (defn TestWriteToTimeout
;;   {:added "1.0"
;;    :go "testWriteToTimeout(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{7537822 0xc0019541c0}) t])
;; 
JOKER FUNC net.TestWriteToUDP has: 
;; (defn TestWriteToUDP
;;   {:added "1.0"
;;    :go "testWriteToUDP(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{7551136 0xc0011857a0}) t])
;; 
JOKER FUNC net.TestWritevError has: 
;; (defn TestWritevError
;;   {:added "1.0"
;;    :go "testWritevError(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{8143893 0xc003101ee0}) t])
;; 
JOKER FUNC net.TestZeroByteRead has: 
;; (defn TestZeroByteRead
;;   {:added "1.0"
;;    :go "testZeroByteRead(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{7746219 0xc0013962c0}) t])
;; 
JOKER FUNC net_test.ExampleCIDRMask has: 
;; (defn ExampleCIDRMask
;;   {:added "1.0"
;;    :go "exampleCIDRMask()"}
;;   [])
;; 
JOKER FUNC net_test.ExampleIP_DefaultMask has: 
;; (defn ExampleIP_DefaultMask
;;   {:added "1.0"
;;    :go "exampleIP_DefaultMask()"}
;;   [])
;; 
JOKER FUNC net_test.ExampleIP_Mask has: 
;; (defn ExampleIP_Mask
;;   {:added "1.0"
;;    :go "exampleIP_Mask()"}
;;   [])
;; 
JOKER FUNC net_test.ExampleIPv4 has: 
;; (defn ExampleIPv4
;;   {:added "1.0"
;;    :go "exampleIPv4()"}
;;   [])
;; 
JOKER FUNC net_test.ExampleIPv4Mask has: 
;; (defn ExampleIPv4Mask
;;   {:added "1.0"
;;    :go "exampleIPv4Mask()"}
;;   [])
;; 
JOKER FUNC net_test.ExampleListener has: 
;; (defn ExampleListener
;;   {:added "1.0"
;;    :go "exampleListener()"}
;;   [])
;; 
JOKER FUNC net_test.ExampleParseCIDR has: 
;; (defn ExampleParseCIDR
;;   {:added "1.0"
;;    :go "exampleParseCIDR()"}
;;   [])
;; 
JOKER FUNC net_test.ExampleParseIP has: 
;; (defn ExampleParseIP
;;   {:added "1.0"
;;    :go "exampleParseIP()"}
;;   [])
;; 
JOKER FUNC net_test.ExampleUDPConn_WriteTo has: 
;; (defn ExampleUDPConn_WriteTo
;;   {:added "1.0"
;;    :go "exampleUDPConn_WriteTo()"}
;;   [])
;; 
JOKER FUNC net_test.TestPipe has: 
;; (defn TestPipe
;;   {:added "1.0"
;;    :go "testPipe(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{8057000 0xc00202d540}) t])
;; 
JOKER FUNC net_test.TestPipeCloseError has: 
;; (defn TestPipeCloseError
;;   {:added "1.0"
;;    :go "testPipeCloseError(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{8057200 0xc00202dac0}) t])
;; 
JOKER FUNC nettest.TestConn has: 
;; (defn TestConn
;;   "TestConn tests that a net.Conn implementation properly satisfies the interface.
;; The tests should not produce any false positives, but may experience
;; false negatives. Thus, some issues may only be detected when the test is
;; run multiple times. For maximal effectiveness, run the tests under the
;; race detector."
;;   {:added "1.0"
;;    :go "testConn(t, mp)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{15461363 0xc006035c20}) t, mp])
;; 
JOKER FUNC nettest.TestTestConn has: 
;; (defn TestTestConn
;;   {:added "1.0"
;;    :go "testTestConn(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{15471985 0xc005139240}) t])
;; 
JOKER FUNC norm_test.EqualOpt has: 
;; (defn ^ABEND042(cannot find typename norm_test.bool) EqualOpt
;;   "EqualOpt is like EqualSimple, but optimizes the special
;; case for ASCII characters."
;;   {:added "1.0"
;;    :go "equalOpt(a, b)"}
;;   [^String a, ^String b])
;; 
JOKER FUNC norm_test.EqualSimple has: 
;; (defn ^ABEND042(cannot find typename norm_test.bool) EqualSimple
;;   "EqualSimple uses a norm.Iter to compare two non-normalized
;; strings for equivalence."
;;   {:added "1.0"
;;    :go "equalSimple(a, b)"}
;;   [^String a, ^String b])
;; 
JOKER FUNC norm_test.ExampleForm_NextBoundary has: 
;; (defn ExampleForm_NextBoundary
;;   {:added "1.0"
;;    :go "exampleForm_NextBoundary()"}
;;   [])
;; 
JOKER FUNC norm_test.ExampleIter has: 
;; (defn ExampleIter
;;   {:added "1.0"
;;    :go "exampleIter()"}
;;   [])
;; 
JOKER FUNC norm_test.FindPrefix has: 
(defn ^Int FindPrefix
  "FindPrefix finds the longest common prefix of ASCII characters
of a and b."
  {:added "1.0"
   :go "findPrefix(a, b)"}
  [^String a, ^String b])

JOKER FUNC os.Chdir has: 
(defn ^Error Chdir
  "Chdir changes the current working directory to the named directory.
If there is an error, it will be of type *PathError."
  {:added "1.0"
   :go "chdir(dir)"}
  [^String dir])

JOKER FUNC os.Chmod has: 
(defn ^Error Chmod
  "Chmod changes the mode of the named file to mode.
If the file is a symbolic link, it changes the mode of the link's target.
If there is an error, it will be of type *PathError.

A different subset of the mode bits are used, depending on the
operating system.

On Unix, the mode's permission bits, ModeSetuid, ModeSetgid, and
ModeSticky are used.

On Windows, the mode must be non-zero but otherwise only the 0200
bit (owner writable) of mode is used; it controls whether the
file's read-only attribute is set or cleared. attribute. The other
bits are currently unused. Use mode 0400 for a read-only file and
0600 for a readable+writable file.

On Plan 9, the mode's permission bits, ModeAppend, ModeExclusive,
and ModeTemporary are used."
  {:added "1.0"
   :go "chmod(name, mode)"}
  [^String name, mode])

JOKER FUNC os.Chown has: 
(defn ^Error Chown
  "Chown changes the numeric uid and gid of the named file.
If the file is a symbolic link, it changes the uid and gid of the link's target.
A uid or gid of -1 means to not change that value.
If there is an error, it will be of type *PathError.

On Windows or Plan 9, Chown always returns the syscall.EWINDOWS or
EPLAN9 error, wrapped in *PathError."
  {:added "1.0"
   :go "chown(name, uid, gid)"}
  [^String name, ^Int uid, ^Int gid])

JOKER FUNC os.Chtimes has: 
;; (defn ^Error Chtimes
;;   "Chtimes changes the access and modification times of the named
;; file, similar to the Unix utime() or utimes() functions.
;; 
;; The underlying filesystem may truncate or round the values to a
;; less precise time unit.
;; If there is an error, it will be of type *PathError."
;;   {:added "1.0"
;;    :go "chtimes(name, atime, mtime)"}
;;   [^String name, ^ABEND881(unrecognized Expr type *ast.SelectorExpr at: &{time Time}) atime, ^ABEND881(unrecognized Expr type *ast.SelectorExpr at: &{time Time}) mtime])
;; 
JOKER FUNC os.Clearenv has: 
;; (defn Clearenv
;;   "Clearenv deletes all environment variables."
;;   {:added "1.0"
;;    :go "clearenv()"}
;;   [])
;; 
JOKER FUNC os.Create has: 
(defn ^[{} Error] Create
  "Create creates the named file with mode 0666 (before umask), truncating
it if it already exists. If successful, methods on the returned
File can be used for I/O; the associated file descriptor has mode
O_RDWR.
If there is an error, it will be of type *PathError."
  {:added "1.0"
   :go "create(name)"}
  [^String name])

JOKER FUNC os.Environ has: 
(defn ^[String] Environ
  "Environ returns a copy of strings representing the environment,
in the form "key=value"."
  {:added "1.0"
   :go "environ()"}
  [])

JOKER FUNC os.Executable has: 
(defn ^[String Error] Executable
  "Executable returns the path name for the executable that started
the current process. There is no guarantee that the path is still
pointing to the correct executable. If a symlink was used to start
the process, depending on the operating system, the result might
be the symlink or the path it pointed to. If a stable result is
needed, path/filepath.EvalSymlinks might help.

Executable returns an absolute path unless an error occurred.

The main use case is finding resources located relative to an
executable.

Executable is not supported on nacl."
  {:added "1.0"
   :go "executable()"}
  [])

JOKER FUNC os.Exit has: 
;; (defn Exit
;;   "Exit causes the current program to exit with the given status code.
;; Conventionally, code zero indicates success, non-zero an error.
;; The program terminates immediately; deferred functions are not run."
;;   {:added "1.0"
;;    :go "exit(code)"}
;;   [^Int code])
;; 
JOKER FUNC os.Expand has: 
;; (defn ^String Expand
;;   "Expand replaces ${var} or $var in the string based on the mapping function.
;; For example, os.ExpandEnv(s) is equivalent to os.Expand(s, os.Getenv)."
;;   {:added "1.0"
;;    :go "expand(s, mapping)"}
;;   [^String s, ^ABEND881(unrecognized Expr type *ast.FuncType at: &{10123388 0xc0031bcc00 0xc0031bcc60}) mapping])
;; 
JOKER FUNC os.ExpandEnv has: 
(defn ^String ExpandEnv
  "ExpandEnv replaces ${var} or $var in the string according to the values
of the current environment variables. References to undefined
variables are replaced by the empty string."
  {:added "1.0"
   :go "expandEnv(s)"}
  [^String s])

JOKER FUNC os.FindProcess has: 
;; (defn ^[{:pid ^Int Pid, :handle handle, :isdone isdone, :sigmu ^ABEND881(unrecognized Expr type *ast.SelectorExpr at: &{sync RWMutex}) sigMu} Error] FindProcess
;;   "FindProcess looks for a running process by its pid.
;; 
;; The Process it returns can be used to obtain information
;; about the underlying operating system process.
;; 
;; On Unix systems, FindProcess always succeeds and returns a Process
;; for the given pid, regardless of whether the process exists."
;;   {:added "1.0"
;;    :go "findProcess(pid)"}
;;   [^Int pid])
;; 
JOKER FUNC os.Getegid has: 
(defn ^Int Getegid
  "Getegid returns the numeric effective group id of the caller.

On Windows, it returns -1."
  {:added "1.0"
   :go "getegid()"}
  [])

JOKER FUNC os.Getenv has: 
(defn ^String Getenv
  "Getenv retrieves the value of the environment variable named by the key.
It returns the value, which will be empty if the variable is not present.
To distinguish between an empty value and an unset value, use LookupEnv."
  {:added "1.0"
   :go "getenv(key)"}
  [^String key])

JOKER FUNC os.Geteuid has: 
(defn ^Int Geteuid
  "Geteuid returns the numeric effective user id of the caller.

On Windows, it returns -1."
  {:added "1.0"
   :go "geteuid()"}
  [])

JOKER FUNC os.Getgid has: 
(defn ^Int Getgid
  "Getgid returns the numeric group id of the caller.

On Windows, it returns -1."
  {:added "1.0"
   :go "getgid()"}
  [])

JOKER FUNC os.Getgroups has: 
(defn ^[[Int] Error] Getgroups
  "Getgroups returns a list of the numeric ids of groups that the caller belongs to.

On Windows, it returns syscall.EWINDOWS. See the os/user package
for a possible alternative."
  {:added "1.0"
   :go "getgroups()"}
  [])

JOKER FUNC os.Getpagesize has: 
(defn ^Int Getpagesize
  "Getpagesize returns the underlying system's memory page size."
  {:added "1.0"
   :go "getpagesize()"}
  [])

JOKER FUNC os.Getpid has: 
(defn ^Int Getpid
  "Getpid returns the process id of the caller."
  {:added "1.0"
   :go "getpid()"}
  [])

JOKER FUNC os.Getppid has: 
(defn ^Int Getppid
  "Getppid returns the process id of the caller's parent."
  {:added "1.0"
   :go "getppid()"}
  [])

JOKER FUNC os.Getuid has: 
(defn ^Int Getuid
  "Getuid returns the numeric user id of the caller.

On Windows, it returns -1."
  {:added "1.0"
   :go "getuid()"}
  [])

JOKER FUNC os.Getwd has: 
(defn ^[dir err] Getwd
  "Getwd returns a rooted path name corresponding to the
current directory. If the current directory can be
reached via multiple paths (due to symbolic links),
Getwd may return any one of them."
  {:added "1.0"
   :go "getwd()"}
  [])

JOKER FUNC os.Hostname has: 
(defn ^[name err] Hostname
  "Hostname returns the host name reported by the kernel."
  {:added "1.0"
   :go "hostname()"}
  [])

JOKER FUNC os.IsExist has: 
;; (defn ^ABEND042(cannot find typename os.bool) IsExist
;;   "IsExist returns a boolean indicating whether the error is known to report
;; that a file or directory already exists. It is satisfied by ErrExist as
;; well as some syscall errors."
;;   {:added "1.0"
;;    :go "isExist(err)"}
;;   [err])
;; 
JOKER FUNC os.IsNotExist has: 
;; (defn ^ABEND042(cannot find typename os.bool) IsNotExist
;;   "IsNotExist returns a boolean indicating whether the error is known to
;; report that a file or directory does not exist. It is satisfied by
;; ErrNotExist as well as some syscall errors."
;;   {:added "1.0"
;;    :go "isNotExist(err)"}
;;   [err])
;; 
JOKER FUNC os.IsPathSeparator has: 
;; (defn ^ABEND042(cannot find typename os.bool) IsPathSeparator
;;   "IsPathSeparator reports whether c is a directory separator character."
;;   {:added "1.0"
;;    :go "isPathSeparator(c)"}
;;   [c])
;; 
JOKER FUNC os.IsPermission has: 
;; (defn ^ABEND042(cannot find typename os.bool) IsPermission
;;   "IsPermission returns a boolean indicating whether the error is known to
;; report that permission is denied. It is satisfied by ErrPermission as well
;; as some syscall errors."
;;   {:added "1.0"
;;    :go "isPermission(err)"}
;;   [err])
;; 
JOKER FUNC os.IsTimeout has: 
;; (defn ^ABEND042(cannot find typename os.bool) IsTimeout
;;   "IsTimeout returns a boolean indicating whether the error is known
;; to report that a timeout occurred."
;;   {:added "1.0"
;;    :go "isTimeout(err)"}
;;   [err])
;; 
JOKER FUNC os.Lchown has: 
(defn ^Error Lchown
  "Lchown changes the numeric uid and gid of the named file.
If the file is a symbolic link, it changes the uid and gid of the link itself.
If there is an error, it will be of type *PathError.

On Windows, it always returns the syscall.EWINDOWS error, wrapped
in *PathError."
  {:added "1.0"
   :go "lchown(name, uid, gid)"}
  [^String name, ^Int uid, ^Int gid])

JOKER FUNC os.Link has: 
(defn ^Error Link
  "Link creates newname as a hard link to the oldname file.
If there is an error, it will be of type *LinkError."
  {:added "1.0"
   :go "link(oldname, newname)"}
  [^String oldname, ^String newname])

JOKER FUNC os.LookupEnv has: 
;; (defn ^[String ABEND042(cannot find typename os.bool)] LookupEnv
;;   "LookupEnv retrieves the value of the environment variable named
;; by the key. If the variable is present in the environment the
;; value (which may be empty) is returned and the boolean is true.
;; Otherwise the returned value will be empty and the boolean will
;; be false."
;;   {:added "1.0"
;;    :go "lookupEnv(key)"}
;;   [^String key])
;; 
JOKER FUNC os.Lstat has: 
;; (defn ^[ABEND881(unrecognized Expr type *ast.InterfaceType at: &{9993876 0xc003820630 false}) Error] Lstat
;;   "Lstat returns a FileInfo describing the named file.
;; If the file is a symbolic link, the returned FileInfo
;; describes the symbolic link. Lstat makes no attempt to follow the link.
;; If there is an error, it will be of type *PathError."
;;   {:added "1.0"
;;    :go "lstat(name)"}
;;   [^String name])
;; 
JOKER FUNC os.Mkdir has: 
(defn ^Error Mkdir
  "Mkdir creates a new directory with the specified name and permission
bits (before umask).
If there is an error, it will be of type *PathError."
  {:added "1.0"
   :go "mkdir(name, perm)"}
  [^String name, perm])

JOKER FUNC os.MkdirAll has: 
(defn ^Error MkdirAll
  "MkdirAll creates a directory named path,
along with any necessary parents, and returns nil,
or else returns an error.
The permission bits perm (before umask) are used for all
directories that MkdirAll creates.
If path is already a directory, MkdirAll does nothing
and returns nil."
  {:added "1.0"
   :go "mkdirAll(path, perm)"}
  [^String path, perm])

JOKER FUNC os.NewFile has: 
(defn ^{} NewFile
  "NewFile returns a new File with the given file descriptor and
name. The returned value will be nil if fd is not a valid file
descriptor. On Unix systems, if the file descriptor is in
non-blocking mode, NewFile will attempt to return a pollable File
(one for which the SetDeadline methods work)."
  {:added "1.0"
   :go "newFile(fd, name)"}
  [fd, ^String name])

JOKER FUNC os.NewSyscallError has: 
(defn ^Error NewSyscallError
  "NewSyscallError returns, as an error, a new SyscallError
with the given system call name and error details.
As a convenience, if err is nil, NewSyscallError returns nil."
  {:added "1.0"
   :go "newSyscallError(syscall, err)"}
  [^String syscall, err])

JOKER FUNC os.Open has: 
(defn ^[{} Error] Open
  "Open opens the named file for reading. If successful, methods on
the returned file can be used for reading; the associated file
descriptor has mode O_RDONLY.
If there is an error, it will be of type *PathError."
  {:added "1.0"
   :go "open(name)"}
  [^String name])

JOKER FUNC os.OpenFile has: 
(defn ^[{} Error] OpenFile
  "OpenFile is the generalized open call; most users will use Open
or Create instead. It opens the named file with specified flag
(O_RDONLY etc.) and perm (before umask), if applicable. If successful,
methods on the returned File can be used for I/O.
If there is an error, it will be of type *PathError."
  {:added "1.0"
   :go "openFile(name, flag, perm)"}
  [^String name, ^Int flag, perm])

JOKER FUNC os.Pipe has: 
(defn ^[r w err] Pipe
  "Pipe returns a connected pair of Files; reads from r return bytes written to w.
It returns the files and an error, if any."
  {:added "1.0"
   :go "pipe()"}
  [])

JOKER FUNC os.Readlink has: 
(defn ^[String Error] Readlink
  "Readlink returns the destination of the named symbolic link.
If there is an error, it will be of type *PathError."
  {:added "1.0"
   :go "readlink(name)"}
  [^String name])

JOKER FUNC os.Remove has: 
(defn ^Error Remove
  "Remove removes the named file or (empty) directory.
If there is an error, it will be of type *PathError."
  {:added "1.0"
   :go "remove(name)"}
  [^String name])

JOKER FUNC os.RemoveAll has: 
(defn ^Error RemoveAll
  "RemoveAll removes path and any children it contains.
It removes everything it can but returns the first error
it encounters. If the path does not exist, RemoveAll
returns nil (no error)."
  {:added "1.0"
   :go "removeAll(path)"}
  [^String path])

JOKER FUNC os.Rename has: 
(defn ^Error Rename
  "Rename renames (moves) oldpath to newpath.
If newpath already exists and is not a directory, Rename replaces it.
OS-specific restrictions may apply when oldpath and newpath are in different directories.
If there is an error, it will be of type *LinkError."
  {:added "1.0"
   :go "rename(oldpath, newpath)"}
  [^String oldpath, ^String newpath])

JOKER FUNC os.SameFile has: 
;; (defn ^ABEND042(cannot find typename os.bool) SameFile
;;   "SameFile reports whether fi1 and fi2 describe the same file.
;; For example, on Unix this means that the device and inode fields
;; of the two underlying structures are identical; on other systems
;; the decision may be based on the path names.
;; SameFile only applies to results returned by this package's Stat.
;; It returns false in other cases."
;;   {:added "1.0"
;;    :go "sameFile(fi1, fi2)"}
;;   [fi1, fi2])
;; 
JOKER FUNC os.Setenv has: 
(defn ^Error Setenv
  "Setenv sets the value of the environment variable named by the key.
It returns an error, if any."
  {:added "1.0"
   :go "setenv(key, value)"}
  [^String key, ^String value])

JOKER FUNC os.StartProcess has: 
;; (defn ^[{:pid ^Int Pid, :handle handle, :isdone isdone, :sigmu ^ABEND881(unrecognized Expr type *ast.SelectorExpr at: &{sync RWMutex}) sigMu} Error] StartProcess
;;   "StartProcess starts a new process with the program, arguments and attributes
;; specified by name, argv and attr. The argv slice will become os.Args in the
;; new process, so it normally starts with the program name.
;; 
;; If the calling goroutine has locked the operating system thread
;; with runtime.LockOSThread and modified any inheritable OS-level
;; thread state (for example, Linux or Plan 9 name spaces), the new
;; process will inherit the caller's thread state.
;; 
;; StartProcess is a low-level interface. The os/exec package provides
;; higher-level interfaces.
;; 
;; If there is an error, it will be of type *PathError."
;;   {:added "1.0"
;;    :go "startProcess(name, argv, attr)"}
;;   [^String name, ^ABEND881(unrecognized Expr type *ast.ArrayType at: &{9948316 <nil> string}) argv, ^ABEND881(unrecognized Expr type *ast.StarExpr at: &{9948331 ProcAttr}) attr])
;; 
JOKER FUNC os.Stat has: 
;; (defn ^[ABEND881(unrecognized Expr type *ast.InterfaceType at: &{9993876 0xc003820630 false}) Error] Stat
;;   "Stat returns a FileInfo describing the named file.
;; If there is an error, it will be of type *PathError."
;;   {:added "1.0"
;;    :go "stat(name)"}
;;   [^String name])
;; 
JOKER FUNC os.Symlink has: 
(defn ^Error Symlink
  "Symlink creates newname as a symbolic link to oldname.
If there is an error, it will be of type *LinkError."
  {:added "1.0"
   :go "symlink(oldname, newname)"}
  [^String oldname, ^String newname])

JOKER FUNC os.TempDir has: 
(defn ^String TempDir
  "TempDir returns the default directory to use for temporary files.

On Unix systems, it returns $TMPDIR if non-empty, else /tmp.
On Windows, it uses GetTempPath, returning the first non-empty
value from %TMP%, %TEMP%, %USERPROFILE%, or the Windows directory.
On Plan 9, it returns /tmp.

The directory is neither guaranteed to exist nor have accessible
permissions."
  {:added "1.0"
   :go "tempDir()"}
  [])

JOKER FUNC os.Truncate has: 
(defn ^Error Truncate
  "Truncate changes the size of the named file.
If the file is a symbolic link, it changes the size of the link's target.
If there is an error, it will be of type *PathError."
  {:added "1.0"
   :go "truncate(name, size)"}
  [^String name, size])

JOKER FUNC os.Unsetenv has: 
(defn ^Error Unsetenv
  "Unsetenv unsets a single environment variable."
  {:added "1.0"
   :go "unsetenv(key)"}
  [^String key])

JOKER FUNC os.UserCacheDir has: 
(defn ^[String Error] UserCacheDir
  "UserCacheDir returns the default root directory to use for user-specific
cached data. Users should create their own application-specific subdirectory
within this one and use that.

On Unix systems, it returns $XDG_CACHE_HOME as specified by
https://standards.freedesktop.org/basedir-spec/basedir-spec-latest.html if
non-empty, else $HOME/.cache.
On Darwin, it returns $HOME/Library/Caches.
On Windows, it returns %LocalAppData%.
On Plan 9, it returns $home/lib/cache.

If the location cannot be determined (for example, $HOME is not defined),
then it will return an error."
  {:added "1.0"
   :go "userCacheDir()"}
  [])

JOKER FUNC os_test.BenchmarkExpand has: 
;; (defn BenchmarkExpand
;;   {:added "1.0"
;;    :go "benchmarkExpand(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{10111977 0xc001c3c660}) b])
;; 
JOKER FUNC os_test.BenchmarkLstatDir has: 
;; (defn BenchmarkLstatDir
;;   {:added "1.0"
;;    :go "benchmarkLstatDir(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{10006785 0xc000dbd5c0}) b])
;; 
JOKER FUNC os_test.BenchmarkLstatDot has: 
;; (defn BenchmarkLstatDot
;;   {:added "1.0"
;;    :go "benchmarkLstatDot(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{10006603 0xc000db08a0}) b])
;; 
JOKER FUNC os_test.BenchmarkLstatFile has: 
;; (defn BenchmarkLstatFile
;;   {:added "1.0"
;;    :go "benchmarkLstatFile(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{10006670 0xc000dbd380}) b])
;; 
JOKER FUNC os_test.BenchmarkReaddir has: 
;; (defn BenchmarkReaddir
;;   {:added "1.0"
;;    :go "benchmarkReaddir(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{10005874 0xc000bbacc0}) b])
;; 
JOKER FUNC os_test.BenchmarkReaddirname has: 
;; (defn BenchmarkReaddirname
;;   {:added "1.0"
;;    :go "benchmarkReaddirname(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{10005803 0xc000bbaae0}) b])
;; 
JOKER FUNC os_test.BenchmarkStatDir has: 
;; (defn BenchmarkStatDir
;;   {:added "1.0"
;;    :go "benchmarkStatDir(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{10006500 0xc0011bf8e0}) b])
;; 
JOKER FUNC os_test.BenchmarkStatDot has: 
;; (defn BenchmarkStatDot
;;   {:added "1.0"
;;    :go "benchmarkStatDot(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{10006322 0xc000bd6140}) b])
;; 
JOKER FUNC os_test.BenchmarkStatFile has: 
;; (defn BenchmarkStatFile
;;   {:added "1.0"
;;    :go "benchmarkStatFile(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{10006387 0xc000f08860}) b])
;; 
JOKER FUNC os_test.ExampleChmod has: 
;; (defn ExampleChmod
;;   {:added "1.0"
;;    :go "exampleChmod()"}
;;   [])
;; 
JOKER FUNC os_test.ExampleChtimes has: 
;; (defn ExampleChtimes
;;   {:added "1.0"
;;    :go "exampleChtimes()"}
;;   [])
;; 
JOKER FUNC os_test.ExampleExpand has: 
;; (defn ExampleExpand
;;   {:added "1.0"
;;    :go "exampleExpand()"}
;;   [])
;; 
JOKER FUNC os_test.ExampleExpandEnv has: 
;; (defn ExampleExpandEnv
;;   {:added "1.0"
;;    :go "exampleExpandEnv()"}
;;   [])
;; 
JOKER FUNC os_test.ExampleFileMode has: 
;; (defn ExampleFileMode
;;   {:added "1.0"
;;    :go "exampleFileMode()"}
;;   [])
;; 
JOKER FUNC os_test.ExampleGetenv has: 
;; (defn ExampleGetenv
;;   {:added "1.0"
;;    :go "exampleGetenv()"}
;;   [])
;; 
JOKER FUNC os_test.ExampleIsNotExist has: 
;; (defn ExampleIsNotExist
;;   {:added "1.0"
;;    :go "exampleIsNotExist()"}
;;   [])
;; 
JOKER FUNC os_test.ExampleLookupEnv has: 
;; (defn ExampleLookupEnv
;;   {:added "1.0"
;;    :go "exampleLookupEnv()"}
;;   [])
;; 
JOKER FUNC os_test.ExampleOpenFile has: 
;; (defn ExampleOpenFile
;;   {:added "1.0"
;;    :go "exampleOpenFile()"}
;;   [])
;; 
JOKER FUNC os_test.ExampleOpenFile_append has: 
;; (defn ExampleOpenFile_append
;;   {:added "1.0"
;;    :go "exampleOpenFile_append()"}
;;   [])
;; 
JOKER FUNC os_test.ExampleUnsetenv has: 
;; (defn ExampleUnsetenv
;;   {:added "1.0"
;;    :go "exampleUnsetenv()"}
;;   [])
;; 
JOKER FUNC os_test.TestAppend has: 
;; (defn TestAppend
;;   {:added "1.0"
;;    :go "testAppend(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{10037957 0xc0035cc420}) t])
;; 
JOKER FUNC os_test.TestChdirAndGetwd has: 
;; (defn TestChdirAndGetwd
;;   {:added "1.0"
;;    :go "testChdirAndGetwd(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{10025826 0xc0036f6220}) t])
;; 
JOKER FUNC os_test.TestChmod has: 
;; (defn TestChmod
;;   {:added "1.0"
;;    :go "testChmod(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{10022146 0xc00373c360}) t])
;; 
JOKER FUNC os_test.TestChown has: 
;; (defn TestChown
;;   {:added "1.0"
;;    :go "testChown(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{9967058 0xc004ba3f80}) t])
;; 
JOKER FUNC os_test.TestChtimes has: 
;; (defn TestChtimes
;;   "Use TempDir (via newFile) to make sure we're on a local file system,
;; so that timings are not distorted by latency and caching.
;; On NFS, timings can be off due to caching of meta-data on
;; NFS servers (Issue 848)."
;;   {:added "1.0"
;;    :go "testChtimes(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{10023962 0xc00372b240}) t])
;; 
JOKER FUNC os_test.TestChtimesDir has: 
;; (defn TestChtimesDir
;;   "Use TempDir (via newDir) to make sure we're on a local file system,
;; so that timings are not distorted by latency and caching.
;; On NFS, timings can be off due to caching of meta-data on
;; NFS servers (Issue 848)."
;;   {:added "1.0"
;;    :go "testChtimesDir(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{10024352 0xc00372b6e0}) t])
;; 
JOKER FUNC os_test.TestClearenv has: 
;; (defn TestClearenv
;;   {:added "1.0"
;;    :go "testClearenv(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{10113099 0xc002a4e000}) t])
;; 
JOKER FUNC os_test.TestCloseWithBlockingReadByFd has: 
;; (defn TestCloseWithBlockingReadByFd
;;   {:added "1.0"
;;    :go "testCloseWithBlockingReadByFd(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{10105281 0xc0024d6340}) t])
;; 
JOKER FUNC os_test.TestCloseWithBlockingReadByNewFile has: 
;; (defn TestCloseWithBlockingReadByNewFile
;;   {:added "1.0"
;;    :go "testCloseWithBlockingReadByNewFile(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{10105002 0xc002797c80}) t])
;; 
JOKER FUNC os_test.TestClosedPipeRaceRead has: 
;; (defn TestClosedPipeRaceRead
;;   {:added "1.0"
;;    :go "testClosedPipeRaceRead(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{10103820 0xc002796760}) t])
;; 
JOKER FUNC os_test.TestClosedPipeRaceWrite has: 
;; (defn TestClosedPipeRaceWrite
;;   {:added "1.0"
;;    :go "testClosedPipeRaceWrite(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{10103897 0xc0027968c0}) t])
;; 
JOKER FUNC os_test.TestConsistentEnviron has: 
;; (defn TestConsistentEnviron
;;   {:added "1.0"
;;    :go "testConsistentEnviron(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{10112407 0xc0018169c0}) t])
;; 
JOKER FUNC os_test.TestDevNullFile has: 
;; (defn TestDevNullFile
;;   {:added "1.0"
;;    :go "testDevNullFile(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{10041669 0xc003598840}) t])
;; 
JOKER FUNC os_test.TestDoubleCloseError has: 
;; (defn TestDoubleCloseError
;;   {:added "1.0"
;;    :go "testDoubleCloseError(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{10053820 0xc003413800}) t])
;; 
JOKER FUNC os_test.TestEPIPE has: 
;; (defn TestEPIPE
;;   {:added "1.0"
;;    :go "testEPIPE(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{10099428 0xc0022515e0}) t])
;; 
JOKER FUNC os_test.TestErrIsExist has: 
;; (defn TestErrIsExist
;;   {:added "1.0"
;;    :go "testErrIsExist(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{10114691 0xc001e984a0}) t])
;; 
JOKER FUNC os_test.TestErrIsNotExist has: 
;; (defn TestErrIsNotExist
;;   {:added "1.0"
;;    :go "testErrIsNotExist(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{10115561 0xc001e99660}) t])
;; 
JOKER FUNC os_test.TestErrPathNUL has: 
;; (defn TestErrPathNUL
;;   {:added "1.0"
;;    :go "testErrPathNUL(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{10117703 0xc002396760}) t])
;; 
JOKER FUNC os_test.TestExecutable has: 
;; (defn TestExecutable
;;   {:added "1.0"
;;    :go "testExecutable(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{9974139 0xc004bbfb20}) t])
;; 
JOKER FUNC os_test.TestExpand has: 
;; (defn TestExpand
;;   {:added "1.0"
;;    :go "testExpand(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{10111735 0xc00183fb60}) t])
;; 
JOKER FUNC os_test.TestExpandEnvShellSpecialVar has: 
;; (defn TestExpandEnvShellSpecialVar
;;   {:added "1.0"
;;    :go "testExpandEnvShellSpecialVar(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{9992980 0xc003ea1440}) t])
;; 
JOKER FUNC os_test.TestFTruncate has: 
;; (defn TestFTruncate
;;   {:added "1.0"
;;    :go "testFTruncate(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{10022850 0xc00373d440}) t])
;; 
JOKER FUNC os_test.TestFdRace has: 
;; (defn TestFdRace
;;   "Issue 24481."
;;   {:added "1.0"
;;    :go "testFdRace(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{10107967 0xc002663cc0}) t])
;; 
JOKER FUNC os_test.TestFdReadRace has: 
;; (defn TestFdReadRace
;;   {:added "1.0"
;;    :go "testFdReadRace(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{10108259 0xc002629800}) t])
;; 
JOKER FUNC os_test.TestFifoEOF has: 
;; (defn TestFifoEOF
;;   "Issue 24164."
;;   {:added "1.0"
;;    :go "testFifoEOF(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{10071958 0xc002ea7b80}) t])
;; 
JOKER FUNC os_test.TestFileChown has: 
;; (defn TestFileChown
;;   {:added "1.0"
;;    :go "testFileChown(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{9968290 0xc004bab6c0}) t])
;; 
JOKER FUNC os_test.TestFstat has: 
;; (defn TestFstat
;;   {:added "1.0"
;;    :go "testFstat(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{10001978 0xc001808020}) t])
;; 
JOKER FUNC os_test.TestGetppid has: 
;; (defn TestGetppid
;;   {:added "1.0"
;;    :go "testGetppid(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{10048659 0xc0034cd4c0}) t])
;; 
JOKER FUNC os_test.TestHardLink has: 
;; (defn TestHardLink
;;   {:added "1.0"
;;    :go "testHardLink(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{10012542 0xc002e1b720}) t])
;; 
JOKER FUNC os_test.TestHostname has: 
;; (defn TestHostname
;;   {:added "1.0"
;;    :go "testHostname(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{10034009 0xc003682da0}) t])
;; 
JOKER FUNC os_test.TestIsExist has: 
;; (defn TestIsExist
;;   {:added "1.0"
;;    :go "testIsExist(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{10116929 0xc002422340}) t])
;; 
JOKER FUNC os_test.TestIsPermission has: 
;; (defn TestIsPermission
;;   {:added "1.0"
;;    :go "testIsPermission(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{10117491 0xc002423400}) t])
;; 
JOKER FUNC os_test.TestKillFindProcess has: 
;; (defn TestKillFindProcess
;;   {:added "1.0"
;;    :go "testKillFindProcess(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{10049439 0xc0034cdf40}) t])
;; 
JOKER FUNC os_test.TestKillStartProcess has: 
;; (defn TestKillStartProcess
;;   {:added "1.0"
;;    :go "testKillStartProcess(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{10048488 0xc0034cd160}) t])
;; 
JOKER FUNC os_test.TestLargeWriteToConsole has: 
;; (defn TestLargeWriteToConsole
;;   {:added "1.0"
;;    :go "testLargeWriteToConsole(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{10041875 0xc003598ac0}) t])
;; 
JOKER FUNC os_test.TestLchown has: 
;; (defn TestLchown
;;   {:added "1.0"
;;    :go "testLchown(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{9969509 0xc004bb4da0}) t])
;; 
JOKER FUNC os_test.TestLongPath has: 
;; (defn TestLongPath
;;   {:added "1.0"
;;    :go "testLongPath(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{10045416 0xc00353a800}) t])
;; 
JOKER FUNC os_test.TestLongSymlink has: 
;; (defn TestLongSymlink
;;   {:added "1.0"
;;    :go "testLongSymlink(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{10016617 0xc00369b580}) t])
;; 
JOKER FUNC os_test.TestLookupEnv has: 
;; (defn TestLookupEnv
;;   {:added "1.0"
;;    :go "testLookupEnv(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{10113981 0xc002382ba0}) t])
;; 
JOKER FUNC os_test.TestLstat has: 
;; (defn TestLstat
;;   {:added "1.0"
;;    :go "testLstat(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{10002431 0xc00171eec0}) t])
;; 
JOKER FUNC os_test.TestMkdirAll has: 
;; (defn TestMkdirAll
;;   {:added "1.0"
;;    :go "testMkdirAll(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{9960133 0xc004b892a0}) t])
;; 
JOKER FUNC os_test.TestMkdirAllAtSlash has: 
;; (defn TestMkdirAllAtSlash
;;   {:added "1.0"
;;    :go "testMkdirAllAtSlash(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{9965526 0xc004ba2760}) t])
;; 
JOKER FUNC os_test.TestMkdirAllWithSymlink has: 
;; (defn TestMkdirAllWithSymlink
;;   {:added "1.0"
;;    :go "testMkdirAllWithSymlink(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{9964996 0xc004b99d60}) t])
;; 
JOKER FUNC os_test.TestMkdirStickyUmask has: 
;; (defn TestMkdirStickyUmask
;;   "Issue 23120: respect umask when doing Mkdir with the sticky bit"
;;   {:added "1.0"
;;    :go "testMkdirStickyUmask(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{9972044 0xc004bbb740}) t])
;; 
JOKER FUNC os_test.TestNewFileBlock has: 
;; (defn TestNewFileBlock
;;   {:added "1.0"
;;    :go "testNewFileBlock(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{9973652 0xc004bbf460}) t])
;; 
JOKER FUNC os_test.TestNewFileNonBlock has: 
;; (defn TestNewFileNonBlock
;;   {:added "1.0"
;;    :go "testNewFileNonBlock(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{9973732 0xc004bbf640}) t])
;; 
JOKER FUNC os_test.TestNilFileMethods has: 
;; (defn TestNilFileMethods
;;   "Test that all File methods give ErrInvalid if the receiver is nil."
;;   {:added "1.0"
;;    :go "testNilFileMethods(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{10050942 0xc00344dc80}) t])
;; 
JOKER FUNC os_test.TestNilProcessStateString has: 
;; (defn TestNilProcessStateString
;;   {:added "1.0"
;;    :go "testNilProcessStateString(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{10039503 0xc0035c94a0}) t])
;; 
JOKER FUNC os_test.TestNonpollableDeadline has: 
;; (defn TestNonpollableDeadline
;;   {:added "1.0"
;;    :go "testNonpollableDeadline(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{9976244 0xc004bcbe60}) t])
;; 
JOKER FUNC os_test.TestOpenError has: 
;; (defn TestOpenError
;;   {:added "1.0"
;;    :go "testOpenError(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{10031370 0xc0036a20a0}) t])
;; 
JOKER FUNC os_test.TestOpenNoName has: 
;; (defn TestOpenNoName
;;   {:added "1.0"
;;    :go "testOpenNoName(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{10032673 0xc0036a3700}) t])
;; 
JOKER FUNC os_test.TestPipeEOF has: 
;; (defn TestPipeEOF
;;   "Issue 24164, for pipes."
;;   {:added "1.0"
;;    :go "testPipeEOF(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{10106859 0xc001b81a80}) t])
;; 
JOKER FUNC os_test.TestPipeThreads has: 
;; (defn TestPipeThreads
;;   "Test that reading from a pipe doesn't use up a thread."
;;   {:added "1.0"
;;    :go "testPipeThreads(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{10052351 0xc00342e240}) t])
;; 
JOKER FUNC os_test.TestProgWideChdir has: 
;; (defn TestProgWideChdir
;;   "Test that Chdir+Getwd is program-wide."
;;   {:added "1.0"
;;    :go "testProgWideChdir(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{10027652 0xc0036e0580}) t])
;; 
JOKER FUNC os_test.TestRacyRead has: 
;; (defn TestRacyRead
;;   "TestRacyRead tests that it is safe to mutate the input Read buffer
;; immediately after cancelation has occurred."
;;   {:added "1.0"
;;    :go "testRacyRead(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{9987119 0xc004c0d3e0}) t])
;; 
JOKER FUNC os_test.TestRacyWrite has: 
;; (defn TestRacyWrite
;;   "TestRacyWrite tests that it is safe to mutate the input Write buffer
;; immediately after cancelation has occurred."
;;   {:added "1.0"
;;    :go "testRacyWrite(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{9987916 0xc004c12460}) t])
;; 
JOKER FUNC os_test.TestRead0 has: 
;; (defn TestRead0
;;   "Read with length 0 should not return EOF."
;;   {:added "1.0"
;;    :go "testRead0(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{10002827 0xc001247860}) t])
;; 
JOKER FUNC os_test.TestReadAt has: 
;; (defn TestReadAt
;;   {:added "1.0"
;;    :go "testReadAt(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{10035011 0xc00364aae0}) t])
;; 
JOKER FUNC os_test.TestReadAtEOF has: 
;; (defn TestReadAtEOF
;;   {:added "1.0"
;;    :go "testReadAtEOF(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{10045128 0xc00354fea0}) t])
;; 
JOKER FUNC os_test.TestReadAtNegativeOffset has: 
;; (defn TestReadAtNegativeOffset
;;   "Verify that ReadAt doesn't allow negative offset."
;;   {:added "1.0"
;;    :go "testReadAtNegativeOffset(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{10036264 0xc0035dc8e0}) t])
;; 
JOKER FUNC os_test.TestReadAtOffset has: 
;; (defn TestReadAtOffset
;;   "Verify that ReadAt doesn't affect seek offset.
;; In the Plan 9 kernel, there used to be a bug in the implementation of
;; the pread syscall, where the channel offset was erroneously updated after
;; calling pread on a file."
;;   {:added "1.0"
;;    :go "testReadAtOffset(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{10035622 0xc00363d600}) t])
;; 
JOKER FUNC os_test.TestReadClosed has: 
;; (defn TestReadClosed
;;   "Reading a closed file should should return ErrClosed error"
;;   {:added "1.0"
;;    :go "testReadClosed(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{10003302 0xc00151cfa0}) t])
;; 
JOKER FUNC os_test.TestReadNonblockingFd has: 
;; (defn TestReadNonblockingFd
;;   "Issue 20915: Reading on nonblocking fd should not return "waiting
;; for unsupported file type." Currently it returns EAGAIN; it is
;; possible that in the future it will simply wait for data."
;;   {:added "1.0"
;;    :go "testReadNonblockingFd(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{10104169 0xc002796ac0}) t])
;; 
JOKER FUNC os_test.TestReadTimeout has: 
;; (defn TestReadTimeout
;;   {:added "1.0"
;;    :go "testReadTimeout(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{9977479 0xc004be52c0}) t])
;; 
JOKER FUNC os_test.TestReadTimeoutFluctuation has: 
;; (defn TestReadTimeoutFluctuation
;;   {:added "1.0"
;;    :go "testReadTimeoutFluctuation(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{9981526 0xc004bf8720}) t])
;; 
JOKER FUNC os_test.TestReadTimeoutMustNotReturn has: 
;; (defn TestReadTimeoutMustNotReturn
;;   {:added "1.0"
;;    :go "testReadTimeoutMustNotReturn(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{9978226 0xc004bea280}) t])
;; 
JOKER FUNC os_test.TestReadWriteDeadlineRace has: 
;; (defn TestReadWriteDeadlineRace
;;   {:added "1.0"
;;    :go "testReadWriteDeadlineRace(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{9985972 0xc004c07d20}) t])
;; 
JOKER FUNC os_test.TestReaddir has: 
;; (defn TestReaddir
;;   {:added "1.0"
;;    :go "testReaddir(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{10004907 0xc000c1ee00}) t])
;; 
JOKER FUNC os_test.TestReaddirNValues has: 
;; (defn TestReaddirNValues
;;   {:added "1.0"
;;    :go "testReaddirNValues(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{10008503 0xc000da5960}) t])
;; 
JOKER FUNC os_test.TestReaddirOfFile has: 
;; (defn TestReaddirOfFile
;;   "Readdir on a regular file should fail."
;;   {:added "1.0"
;;    :go "testReaddirOfFile(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{10012078 0xc0024dd280}) t])
;; 
JOKER FUNC os_test.TestReaddirRemoveRace has: 
;; (defn TestReaddirRemoveRace
;;   "Issue 16919: Readdir must return a non-empty slice or an error."
;;   {:added "1.0"
;;    :go "testReaddirRemoveRace(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{9971033 0xc004bba600}) t])
;; 
JOKER FUNC os_test.TestReaddirStatFailures has: 
;; (defn TestReaddirStatFailures
;;   {:added "1.0"
;;    :go "testReaddirStatFailures(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{10010210 0xc00121a1e0}) t])
;; 
JOKER FUNC os_test.TestReaddirnames has: 
;; (defn TestReaddirnames
;;   {:added "1.0"
;;    :go "testReaddirnames(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{10004792 0xc000ea9380}) t])
;; 
JOKER FUNC os_test.TestReaddirnamesOneAtATime has: 
;; (defn TestReaddirnamesOneAtATime
;;   "Check that reading a directory one entry at a time gives the same result
;; as reading it all at once."
;;   {:added "1.0"
;;    :go "testReaddirnamesOneAtATime(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{10007482 0xc000da4600}) t])
;; 
JOKER FUNC os_test.TestRemoveAll has: 
;; (defn TestRemoveAll
;;   {:added "1.0"
;;    :go "testRemoveAll(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{9961712 0xc004b94c60}) t])
;; 
JOKER FUNC os_test.TestRemoveAllLarge has: 
;; (defn TestRemoveAllLarge
;;   "Test RemoveAll on a large directory."
;;   {:added "1.0"
;;    :go "testRemoveAllLarge(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{9964302 0xc004b99180}) t])
;; 
JOKER FUNC os_test.TestRemoveAllRace has: 
;; (defn TestRemoveAllRace
;;   "Test that simultaneous RemoveAll do not report an error.
;; As long as it gets removed, we should be happy."
;;   {:added "1.0"
;;    :go "testRemoveAllRace(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{10051542 0xc003441f00}) t])
;; 
JOKER FUNC os_test.TestRename has: 
;; (defn TestRename
;;   {:added "1.0"
;;    :go "testRename(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{10017175 0xc0037a2500}) t])
;; 
JOKER FUNC os_test.TestRenameFailed has: 
;; (defn TestRenameFailed
;;   {:added "1.0"
;;    :go "testRenameFailed(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{10018654 0xc00377aea0}) t])
;; 
JOKER FUNC os_test.TestRenameNotExisting has: 
;; (defn TestRenameNotExisting
;;   {:added "1.0"
;;    :go "testRenameNotExisting(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{10019470 0xc00376eee0}) t])
;; 
JOKER FUNC os_test.TestRenameOverwriteDest has: 
;; (defn TestRenameOverwriteDest
;;   {:added "1.0"
;;    :go "testRenameOverwriteDest(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{10017737 0xc0037a3540}) t])
;; 
JOKER FUNC os_test.TestRenameToDirFailed has: 
;; (defn TestRenameToDirFailed
;;   {:added "1.0"
;;    :go "testRenameToDirFailed(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{10019736 0xc00376d600}) t])
;; 
JOKER FUNC os_test.TestSameFile has: 
;; (defn TestSameFile
;;   {:added "1.0"
;;    :go "testSameFile(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{10039672 0xc0035c9aa0}) t])
;; 
JOKER FUNC os_test.TestSeek has: 
;; (defn TestSeek
;;   {:added "1.0"
;;    :go "testSeek(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{10028989 0xc0036dba20}) t])
;; 
JOKER FUNC os_test.TestSeekError has: 
;; (defn TestSeekError
;;   {:added "1.0"
;;    :go "testSeekError(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{10030405 0xc0036b08c0}) t])
;; 
JOKER FUNC os_test.TestSetenvUnixEinval has: 
;; (defn TestSetenvUnixEinval
;;   {:added "1.0"
;;    :go "testSetenvUnixEinval(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{9992578 0xc003ea0c20}) t])
;; 
JOKER FUNC os_test.TestSleep has: 
;; (defn TestSleep
;;   "TestSleep emulates "sleep 1". It is a helper for testKillProcess, so we
;; don't have to rely on an external "sleep" command being available."
;;   {:added "1.0"
;;    :go "testSleep(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{10048358 0xc0034ccec0}) t])
;; 
JOKER FUNC os_test.TestStartProcess has: 
;; (defn TestStartProcess
;;   {:added "1.0"
;;    :go "testStartProcess(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{10021178 0xc003744ee0}) t])
;; 
JOKER FUNC os_test.TestStat has: 
;; (defn TestStat
;;   {:added "1.0"
;;    :go "testStat(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{10000925 0xc00256bee0}) t])
;; 
JOKER FUNC os_test.TestStatDirModeExec has: 
;; (defn TestStatDirModeExec
;;   {:added "1.0"
;;    :go "testStatDirModeExec(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{10042467 0xc003599ce0}) t])
;; 
JOKER FUNC os_test.TestStatDirWithTrailingSlash has: 
;; (defn TestStatDirWithTrailingSlash
;;   {:added "1.0"
;;    :go "testStatDirWithTrailingSlash(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{10038997 0xc0035c8500}) t])
;; 
JOKER FUNC os_test.TestStatError has: 
;; (defn TestStatError
;;   {:added "1.0"
;;    :go "testStatError(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{10001278 0xc00218d7e0}) t])
;; 
JOKER FUNC os_test.TestStatRelativeSymlink has: 
;; (defn TestStatRelativeSymlink
;;   {:added "1.0"
;;    :go "testStatRelativeSymlink(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{10044202 0xc003572ba0}) t])
;; 
JOKER FUNC os_test.TestStatStdin has: 
;; (defn TestStatStdin
;;   {:added "1.0"
;;    :go "testStatStdin(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{10042972 0xc003588d40}) t])
;; 
JOKER FUNC os_test.TestStdPipe has: 
;; (defn TestStdPipe
;;   {:added "1.0"
;;    :go "testStdPipe(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{10099996 0xc0026a4080}) t])
;; 
JOKER FUNC os_test.TestStdPipeHelper has: 
;; (defn TestStdPipeHelper
;;   "This is a helper for TestStdPipe. It's not a test in itself."
;;   {:added "1.0"
;;    :go "testStdPipeHelper(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{10101612 0xc00269ec80}) t])
;; 
JOKER FUNC os_test.TestSymlink has: 
;; (defn TestSymlink
;;   {:added "1.0"
;;    :go "testSymlink(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{10014912 0xc0034073e0}) t])
;; 
JOKER FUNC os_test.TestTTYClose has: 
;; (defn TestTTYClose
;;   "Closing a TTY while reading from it should not hang.  Issue 23943."
;;   {:added "1.0"
;;    :go "testTTYClose(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{9988653 0xc004c13440}) t])
;; 
JOKER FUNC os_test.TestTruncate has: 
;; (defn TestTruncate
;;   {:added "1.0"
;;    :go "testTruncate(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{10023284 0xc00373de60}) t])
;; 
JOKER FUNC os_test.TestUnsetenv has: 
;; (defn TestUnsetenv
;;   {:added "1.0"
;;    :go "testUnsetenv(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{10112582 0xc0018179c0}) t])
;; 
JOKER FUNC os_test.TestVariousDeadlines has: 
;; (defn TestVariousDeadlines
;;   {:added "1.0"
;;    :go "testVariousDeadlines(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{9983061 0xc004c007e0}) t])
;; 
JOKER FUNC os_test.TestVariousDeadlines1Proc has: 
;; (defn TestVariousDeadlines1Proc
;;   {:added "1.0"
;;    :go "testVariousDeadlines1Proc(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{9983150 0xc004c00980}) t])
;; 
JOKER FUNC os_test.TestVariousDeadlines4Proc has: 
;; (defn TestVariousDeadlines4Proc
;;   {:added "1.0"
;;    :go "testVariousDeadlines4Proc(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{9983390 0xc004c00cc0}) t])
;; 
JOKER FUNC os_test.TestWriteAt has: 
;; (defn TestWriteAt
;;   {:added "1.0"
;;    :go "testWriteAt(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{10036678 0xc0035d4040}) t])
;; 
JOKER FUNC os_test.TestWriteAtNegativeOffset has: 
;; (defn TestWriteAtNegativeOffset
;;   "Verify that WriteAt doesn't allow negative offset."
;;   {:added "1.0"
;;    :go "testWriteAtNegativeOffset(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{10037238 0xc0035d2420}) t])
;; 
JOKER FUNC os_test.TestWriteTimeout has: 
;; (defn TestWriteTimeout
;;   {:added "1.0"
;;    :go "testWriteTimeout(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{9979361 0xc004beb940}) t])
;; 
JOKER FUNC os_test.TestWriteTimeoutFluctuation has: 
;; (defn TestWriteTimeoutFluctuation
;;   {:added "1.0"
;;    :go "testWriteTimeoutFluctuation(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{9982587 0xc004bf9d60}) t])
;; 
JOKER FUNC os_test.TestWriteTimeoutMustNotReturn has: 
;; (defn TestWriteTimeoutMustNotReturn
;;   {:added "1.0"
;;    :go "testWriteTimeoutMustNotReturn(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{9980105 0xc004bf28a0}) t])
;; 
JOKER FUNC parse.BenchmarkParseLarge has: 
;; (defn BenchmarkParseLarge
;;   {:added "1.0"
;;    :go "benchmarkParseLarge(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{13822731 0xc003b24b00}) b])
;; 
JOKER FUNC parse.IsEmptyTree has: 
;; (defn ^ABEND042(cannot find typename parse.bool) IsEmptyTree
;;   "IsEmptyTree reports whether this tree (node) is empty of everything but space."
;;   {:added "1.0"
;;    :go "isEmptyTree(n)"}
;;   [n])
;; 
JOKER FUNC parse.New has: 
;; (defn ^{:name ^String Name, :parsename ^String ParseName, :root ^ABEND881(unrecognized Expr type *ast.StarExpr at: &{13786226 ListNode}) Root, :text ^String text, :funcs ^ABEND881(unrecognized Expr type *ast.ArrayType at: &{13786392 <nil> 0xc004134f90}) funcs, :lex ^ABEND881(unrecognized Expr type *ast.StarExpr at: &{13786428 lexer}) lex, :token ^ABEND881(unrecognized Expr type *ast.ArrayType at: &{13786446 0xc0040cd940 item}) token, :peekcount ^Int peekCount, :vars ^ABEND881(unrecognized Expr type *ast.ArrayType at: &{13786517 <nil> string}) vars, :treeset ^ABEND881(unrecognized Expr type *ast.MapType at: &{13786573 string 0xc0040cdae0}) treeSet} New
;;   "New allocates a new parse tree with the given name."
;;   {:added "1.0"
;;    :go "new(name, funcs)"}
;;   [^String name, ^ABEND881(unrecognized Expr type *ast.Ellipsis at: &{13788740 0xc00410a090}) funcs])
;; 
JOKER FUNC parse.NewIdentifier has: 
;; (defn ^{:tr ^ABEND881(unrecognized Expr type *ast.StarExpr at: &{13829795 Tree}) tr, :ident ^String Ident} NewIdentifier
;;   "NewIdentifier returns a new IdentifierNode with the given identifier name."
;;   {:added "1.0"
;;    :go "newIdentifier(ident)"}
;;   [^String ident])
;; 
JOKER FUNC parse.Parse has: 
;; (defn ^[ABEND881(unrecognized Expr type *ast.MapType at: &{13787207 string 0xc0043b02a0}) Error] Parse
;;   "Parse returns a map from template name to parse.Tree, created by parsing the
;; templates described in the argument string. The top-level template will be
;; given the specified name. If an error is encountered, parsing stops and an
;; empty map is returned with the error."
;;   {:added "1.0"
;;    :go "parse(name, text, leftDelim, rightDelim, funcs)"}
;;   [^String name, ^String text, ^String leftDelim, ^String rightDelim, ^ABEND881(unrecognized Expr type *ast.Ellipsis at: &{13787179 0xc004135950}) funcs])
;; 
JOKER FUNC parse.TestBlock has: 
;; (defn TestBlock
;;   {:added "1.0"
;;    :go "testBlock(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{13821449 0xc0037cd420}) t])
;; 
JOKER FUNC parse.TestDelims has: 
;; (defn TestDelims
;;   {:added "1.0"
;;    :go "testDelims(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{13871054 0xc004cbf660}) t])
;; 
JOKER FUNC parse.TestErrorContextWithTreeCopy has: 
;; (defn TestErrorContextWithTreeCopy
;;   {:added "1.0"
;;    :go "testErrorContextWithTreeCopy(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{13818717 0xc00453f8a0}) t])
;; 
JOKER FUNC parse.TestErrors has: 
;; (defn TestErrors
;;   {:added "1.0"
;;    :go "testErrors(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{13821089 0xc0037ccbc0}) t])
;; 
JOKER FUNC parse.TestIsEmpty has: 
;; (defn TestIsEmpty
;;   {:added "1.0"
;;    :go "testIsEmpty(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{13818257 0xc003e3fa80}) t])
;; 
JOKER FUNC parse.TestLex has: 
;; (defn TestLex
;;   {:added "1.0"
;;    :go "testLex(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{13870084 0xc004cbe640}) t])
;; 
JOKER FUNC parse.TestLineNum has: 
;; (defn TestLineNum
;;   {:added "1.0"
;;    :go "testLineNum(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{13822038 0xc0037cdee0}) t])
;; 
JOKER FUNC parse.TestNumberParse has: 
;; (defn TestNumberParse
;;   {:added "1.0"
;;    :go "testNumberParse(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{13807961 0xc003ef74a0}) t])
;; 
JOKER FUNC parse.TestParse has: 
;; (defn TestParse
;;   {:added "1.0"
;;    :go "testParse(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{13817538 0xc0026dfd80}) t])
;; 
JOKER FUNC parse.TestParseCopy has: 
;; (defn TestParseCopy
;;   "Same as TestParse, but we copy the node first"
;;   {:added "1.0"
;;    :go "testParseCopy(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{13817646 0xc0026dff20}) t])
;; 
JOKER FUNC parse.TestPos has: 
;; (defn TestPos
;;   "The other tests don't check position, to make the test cases easier to construct.
;; This one does."
;;   {:added "1.0"
;;    :go "testPos(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{13872437 0xc004cc5bc0}) t])
;; 
JOKER FUNC parse.TestShutdown has: 
;; (defn TestShutdown
;;   "Test that an error shuts down the lexing goroutine."
;;   {:added "1.0"
;;    :go "testShutdown(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{13873121 0xc004db8920}) t])
;; 
JOKER FUNC parser.BenchmarkParse has: 
;; (defn BenchmarkParse
;;   {:added "1.0"
;;    :go "benchmarkParse(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{4772483 0xc00219bce0}) b])
;; 
JOKER FUNC parser.ParseDir has: 
;; (defn ^[pkgs first] ParseDir
;;   "ParseDir calls ParseFile for all files with names ending in ".go" in the
;; directory specified by path and returns a map of package name -> package
;; AST with all the packages found.
;; 
;; If filter != nil, only the files with os.FileInfo entries passing through
;; the filter (and ending in ".go") are considered. The mode bits are passed
;; to ParseFile unchanged. Position information is recorded in fset, which
;; must not be nil.
;; 
;; If the directory couldn't be read, a nil map and the respective error are
;; returned. If a parse error occurred, a non-nil but incomplete map and the
;; first error encountered are returned."
;;   {:added "1.0"
;;    :go "parseDir(fset, path, filter, mode)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{4769561 0xc002194ea0}) fset, ^String path, ^ABEND881(unrecognized Expr type *ast.FuncType at: &{4769597 0xc00218f050 0xc00218f080}) filter, mode])
;; 
JOKER FUNC parser.ParseExpr has: 
;; (defn ^[ABEND881(unrecognized Expr type *ast.SelectorExpr at: &{ast Expr}) Error] ParseExpr
;;   "ParseExpr is a convenience function for obtaining the AST of an expression x.
;; The position information recorded in the AST is undefined. The filename used
;; in error messages is the empty string."
;;   {:added "1.0"
;;    :go "parseExpr(x)"}
;;   [^String x])
;; 
JOKER FUNC parser.ParseExprFrom has: 
;; (defn ^[ABEND881(unrecognized Expr type *ast.SelectorExpr at: &{ast Expr}) Error] ParseExprFrom
;;   "ParseExprFrom is a convenience function for parsing an expression.
;; The arguments have the same meaning as for ParseFile, but the source must
;; be a valid Go (type or value) expression. Specifically, fset must not
;; be nil."
;;   {:added "1.0"
;;    :go "parseExprFrom(fset, filename, src, mode)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{4770628 0xc00219a1c0}) fset, ^String filename, ^ABEND881(unrecognized Expr type *ast.InterfaceType at: &{4770665 0xc00218f890 false}) src, mode])
;; 
JOKER FUNC parser.ParseFile has: 
;; (defn ^[f err] ParseFile
;;   "ParseFile parses the source code of a single Go source file and returns
;; the corresponding ast.File node. The source code may be provided via
;; the filename of the source file, or via the src parameter.
;; 
;; If src != nil, ParseFile parses the source from src and the filename is
;; only used when recording position information. The type of the argument
;; for the src parameter must be string, []byte, or io.Reader.
;; If src == nil, ParseFile parses the file specified by filename.
;; 
;; The mode parameter controls the amount of source text parsed and other
;; optional parser functionality. Position information is recorded in the
;; file set fset, which must not be nil.
;; 
;; If the source couldn't be read, the returned AST is nil and the error
;; indicates the specific failure. If the source was read but syntax
;; errors were found, the result is a partial AST (with ast.Bad* nodes
;; representing the fragments of erroneous source code). Multiple errors
;; are returned via a scanner.ErrorList which is sorted by file position."
;;   {:added "1.0"
;;    :go "parseFile(fset, filename, src, mode)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{4768088 0xc00218dee0}) fset, ^String filename, ^ABEND881(unrecognized Expr type *ast.InterfaceType at: &{4768125 0xc00218e9c0 false}) src, mode])
;; 
JOKER FUNC parser.TestColonEqualsScope has: 
;; (defn TestColonEqualsScope
;;   {:added "1.0"
;;    :go "testColonEqualsScope(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{4783224 0xc0021b4400}) t])
;; 
JOKER FUNC parser.TestCommentGroups has: 
;; (defn TestCommentGroups
;;   {:added "1.0"
;;    :go "testCommentGroups(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{4787722 0xc0021bece0}) t])
;; 
JOKER FUNC parser.TestErrors has: 
;; (defn TestErrors
;;   {:added "1.0"
;;    :go "testErrors(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{4798849 0xc0021e26c0}) t])
;; 
JOKER FUNC parser.TestImports has: 
;; (defn TestImports
;;   {:added "1.0"
;;    :go "testImports(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{4787330 0xc0021be660}) t])
;; 
JOKER FUNC parser.TestIncompleteSelection has: 
;; (defn TestIncompleteSelection
;;   "TestIncompleteSelection ensures that an incomplete selector
;; expression is parsed as a (blank) *ast.SelectorExpr, not a
;; *ast.BadExpr."
;;   {:added "1.0"
;;    :go "testIncompleteSelection(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{4792372 0xc0021cb240}) t])
;; 
JOKER FUNC parser.TestInvalid has: 
;; (defn TestInvalid
;;   {:added "1.0"
;;    :go "testInvalid(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{4780145 0xc0021a74a0}) t])
;; 
JOKER FUNC parser.TestIssue9979 has: 
;; (defn TestIssue9979
;;   "TestIssue9979 verifies that empty statements are contained within their enclosing blocks."
;;   {:added "1.0"
;;    :go "testIssue9979(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{4790981 0xc0021c5ce0}) t])
;; 
JOKER FUNC parser.TestLastLineComment has: 
;; (defn TestLastLineComment
;;   {:added "1.0"
;;    :go "testLastLineComment(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{4793261 0xc0021d20a0}) t])
;; 
JOKER FUNC parser.TestLeadAndLineComments has: 
;; (defn TestLeadAndLineComments
;;   {:added "1.0"
;;    :go "testLeadAndLineComments(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{4790052 0xc0021c5380}) t])
;; 
JOKER FUNC parser.TestObjects has: 
;; (defn TestObjects
;;   {:added "1.0"
;;    :go "testObjects(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{4784351 0xc0021b5d00}) t])
;; 
JOKER FUNC parser.TestParse has: 
;; (defn TestParse
;;   {:added "1.0"
;;    :go "testParse(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{4780594 0xc0021a79e0}) t])
;; 
JOKER FUNC parser.TestParseDir has: 
;; (defn TestParseDir
;;   {:added "1.0"
;;    :go "testParseDir(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{4781115 0xc0021ac260}) t])
;; 
JOKER FUNC parser.TestParseExpr has: 
;; (defn TestParseExpr
;;   {:added "1.0"
;;    :go "testParseExpr(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{4781664 0xc0021acc40}) t])
;; 
JOKER FUNC parser.TestUnresolved has: 
;; (defn TestUnresolved
;;   {:added "1.0"
;;    :go "testUnresolved(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{4785333 0xc0021bb0a0}) t])
;; 
JOKER FUNC parser.TestValid has: 
;; (defn TestValid
;;   {:added "1.0"
;;    :go "testValid(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{4775029 0xc0021a6920}) t])
;; 
JOKER FUNC parser.TestVarScope has: 
;; (defn TestVarScope
;;   {:added "1.0"
;;    :go "testVarScope(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{4783773 0xc0021b5020}) t])
;; 
JOKER FUNC parser_test.ExampleParseFile has: 
;; (defn ExampleParseFile
;;   {:added "1.0"
;;    :go "exampleParseFile()"}
;;   [])
;; 
JOKER FUNC path.Base has: 
(defn ^String Base
  "Base returns the last element of path.
Trailing slashes are removed before extracting the last element.
If the path is empty, Base returns ".".
If the path consists entirely of slashes, Base returns "/"."
  {:added "1.0"
   :go "base(path)"}
  [^String path])

JOKER FUNC path.Clean has: 
(defn ^String Clean
  "Clean returns the shortest path name equivalent to path
by purely lexical processing. It applies the following rules
iteratively until no further processing can be done:

	1. Replace multiple slashes with a single slash.
	2. Eliminate each . path name element (the current directory).
	3. Eliminate each inner .. path name element (the parent directory)
	   along with the non-.. element that precedes it.
	4. Eliminate .. elements that begin a rooted path:
	   that is, replace "/.." by "/" at the beginning of a path.

The returned path ends in a slash only if it is the root "/".

If the result of this process is an empty string, Clean
returns the string ".".

See also Rob Pike, ``Lexical File Names in Plan 9 or
Getting Dot-Dot Right,''
https://9p.io/sys/doc/lexnames.html"
  {:added "1.0"
   :go "clean(path)"}
  [^String path])

JOKER FUNC path.Dir has: 
(defn ^String Dir
  "Dir returns all but the last element of path, typically the path's directory.
After dropping the final element using Split, the path is Cleaned and trailing
slashes are removed.
If the path is empty, Dir returns ".".
If the path consists entirely of slashes followed by non-slash bytes, Dir
returns a single slash. In any other case, the returned path does not end in a
slash."
  {:added "1.0"
   :go "dir(path)"}
  [^String path])

JOKER FUNC path.Ext has: 
(defn ^String Ext
  "Ext returns the file name extension used by path.
The extension is the suffix beginning at the final dot
in the final slash-separated element of path;
it is empty if there is no dot."
  {:added "1.0"
   :go "ext(path)"}
  [^String path])

JOKER FUNC path.IsAbs has: 
;; (defn ^ABEND042(cannot find typename path.bool) IsAbs
;;   "IsAbs reports whether the path is absolute."
;;   {:added "1.0"
;;    :go "isAbs(path)"}
;;   [^String path])
;; 
JOKER FUNC path.Join has: 
;; (defn ^String Join
;;   "Join joins any number of path elements into a single path, adding a
;; separating slash if necessary. The result is Cleaned; in particular,
;; all empty strings are ignored."
;;   {:added "1.0"
;;    :go "join(elem)"}
;;   [^ABEND881(unrecognized Expr type *ast.Ellipsis at: &{10253091 string}) elem])
;; 
JOKER FUNC path.Match has: 
(defn ^[matched err] Match
  "Match reports whether name matches the shell pattern.
The pattern syntax is:

	pattern:
		{ term }
	term:
		'*'         matches any sequence of non-/ characters
		'?'         matches any single non-/ character
		'[' [ '^' ] { character-range } ']'
		            character class (must be non-empty)
		c           matches character c (c != '*', '?', '\\', '[')
		'\\' c      matches character c

	character-range:
		c           matches character c (c != '\\', '-', ']')
		'\\' c      matches character c
		lo '-' hi   matches character c for lo <= c <= hi

Match requires pattern to match all of name, not just a substring.
The only possible returned error is ErrBadPattern, when pattern
is malformed."
  {:added "1.0"
   :go "match(pattern, name)"}
  [^String pattern, ^String name])

JOKER FUNC path.Split has: 
(defn ^[dir file] Split
  "Split splits path immediately following the final slash,
separating it into a directory and file name component.
If there is no slash in path, Split returns an empty dir and
file set to path.
The returned values have the property that path = dir+file."
  {:added "1.0"
   :go "split(path)"}
  [^String path])

JOKER FUNC path.TestBase has: 
;; (defn TestBase
;;   {:added "1.0"
;;    :go "testBase(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{10260319 0xc0017d53e0}) t])
;; 
JOKER FUNC path.TestClean has: 
;; (defn TestClean
;;   {:added "1.0"
;;    :go "testClean(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{10257999 0xc00170a7a0}) t])
;; 
JOKER FUNC path.TestCleanMallocs has: 
;; (defn TestCleanMallocs
;;   {:added "1.0"
;;    :go "testCleanMallocs(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{10258316 0xc00170aec0}) t])
;; 
JOKER FUNC path.TestDir has: 
;; (defn TestDir
;;   {:added "1.0"
;;    :go "testDir(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{10260752 0xc001c34440}) t])
;; 
JOKER FUNC path.TestExt has: 
;; (defn TestExt
;;   {:added "1.0"
;;    :go "testExt(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{10259915 0xc0017d4b00}) t])
;; 
JOKER FUNC path.TestIsAbs has: 
;; (defn TestIsAbs
;;   {:added "1.0"
;;    :go "testIsAbs(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{10261160 0xc001c34f00}) t])
;; 
JOKER FUNC path.TestJoin has: 
;; (defn TestJoin
;;   {:added "1.0"
;;    :go "testJoin(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{10259556 0xc0017d43e0}) t])
;; 
JOKER FUNC path.TestMatch has: 
;; (defn TestMatch
;;   {:added "1.0"
;;    :go "testMatch(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{10263487 0xc00123bdc0}) t])
;; 
JOKER FUNC path.TestSplit has: 
;; (defn TestSplit
;;   {:added "1.0"
;;    :go "testSplit(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{10258900 0xc001550d00}) t])
;; 
JOKER FUNC path_test.ExampleBase has: 
;; (defn ExampleBase
;;   {:added "1.0"
;;    :go "exampleBase()"}
;;   [])
;; 
JOKER FUNC path_test.ExampleClean has: 
;; (defn ExampleClean
;;   {:added "1.0"
;;    :go "exampleClean()"}
;;   [])
;; 
JOKER FUNC path_test.ExampleDir has: 
;; (defn ExampleDir
;;   {:added "1.0"
;;    :go "exampleDir()"}
;;   [])
;; 
JOKER FUNC path_test.ExampleExt has: 
;; (defn ExampleExt
;;   {:added "1.0"
;;    :go "exampleExt()"}
;;   [])
;; 
JOKER FUNC path_test.ExampleIsAbs has: 
;; (defn ExampleIsAbs
;;   {:added "1.0"
;;    :go "exampleIsAbs()"}
;;   [])
;; 
JOKER FUNC path_test.ExampleJoin has: 
;; (defn ExampleJoin
;;   {:added "1.0"
;;    :go "exampleJoin()"}
;;   [])
;; 
JOKER FUNC path_test.ExampleMatch has: 
;; (defn ExampleMatch
;;   {:added "1.0"
;;    :go "exampleMatch()"}
;;   [])
;; 
JOKER FUNC path_test.ExampleSplit has: 
;; (defn ExampleSplit
;;   {:added "1.0"
;;    :go "exampleSplit()"}
;;   [])
;; 
JOKER FUNC pe.NewFile has: 
;; (defn ^[{:optionalheader ^ABEND881(unrecognized Expr type *ast.InterfaceType at: &{3037381 0xc001086960 false}) OptionalHeader, :sections ^ABEND881(unrecognized Expr type *ast.ArrayType at: &{3037459 <nil> 0xc000ad43a0}) Sections, :symbols ^ABEND881(unrecognized Expr type *ast.ArrayType at: &{3037486 <nil> 0xc000ad49e0}) Symbols, :coffsymbols ^ABEND881(unrecognized Expr type *ast.ArrayType at: &{3037569 <nil> COFFSymbol}) COFFSymbols, :stringtable StringTable, :closer ^ABEND881(unrecognized Expr type *ast.SelectorExpr at: &{io Closer}) closer} Error] NewFile
;;   "NewFile creates a new File for accessing a PE binary in an underlying reader."
;;   {:added "1.0"
;;    :go "newFile(r)"}
;;   [^ABEND881(unrecognized Expr type *ast.SelectorExpr at: &{io ReaderAt}) r])
;; 
JOKER FUNC pe.Open has: 
;; (defn ^[{:optionalheader ^ABEND881(unrecognized Expr type *ast.InterfaceType at: &{3037381 0xc001086960 false}) OptionalHeader, :sections ^ABEND881(unrecognized Expr type *ast.ArrayType at: &{3037459 <nil> 0xc000ad43a0}) Sections, :symbols ^ABEND881(unrecognized Expr type *ast.ArrayType at: &{3037486 <nil> 0xc000ad49e0}) Symbols, :coffsymbols ^ABEND881(unrecognized Expr type *ast.ArrayType at: &{3037569 <nil> COFFSymbol}) COFFSymbols, :stringtable StringTable, :closer ^ABEND881(unrecognized Expr type *ast.SelectorExpr at: &{io Closer}) closer} Error] Open
;;   "Open opens the named file using os.Open and prepares it for use as a PE binary."
;;   {:added "1.0"
;;    :go "open(name)"}
;;   [^String name])
;; 
JOKER FUNC pe.TestBSSHasZeros has: 
;; (defn TestBSSHasZeros
;;   {:added "1.0"
;;    :go "testBSSHasZeros(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{3061845 0xc00092b0e0}) t])
;; 
JOKER FUNC pe.TestBuildingWindowsGUI has: 
;; (defn TestBuildingWindowsGUI
;;   {:added "1.0"
;;    :go "testBuildingWindowsGUI(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{3063347 0xc00092dc80}) t])
;; 
JOKER FUNC pe.TestDWARF has: 
;; (defn TestDWARF
;;   {:added "1.0"
;;    :go "testDWARF(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{3063151 0xc00092dae0}) t])
;; 
JOKER FUNC pe.TestDefaultLinkerDWARF has: 
;; (defn TestDefaultLinkerDWARF
;;   {:added "1.0"
;;    :go "testDefaultLinkerDWARF(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{3049138 0xc000c63360}) t])
;; 
JOKER FUNC pe.TestExternalLinkerDWARF has: 
;; (defn TestExternalLinkerDWARF
;;   {:added "1.0"
;;    :go "testExternalLinkerDWARF(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{3049301 0xc000a1d500}) t])
;; 
JOKER FUNC pe.TestImportTableInUnknownSection has: 
;; (defn TestImportTableInUnknownSection
;;   {:added "1.0"
;;    :go "testImportTableInUnknownSection(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{3064693 0xc000b5afe0}) t])
;; 
JOKER FUNC pe.TestInternalLinkerDWARF has: 
;; (defn TestInternalLinkerDWARF
;;   {:added "1.0"
;;    :go "testInternalLinkerDWARF(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{3049219 0xc000d32600}) t])
;; 
JOKER FUNC pe.TestOpen has: 
;; (defn TestOpen
;;   {:added "1.0"
;;    :go "testOpen(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{3057925 0xc0010b4c40}) t])
;; 
JOKER FUNC pe.TestOpenFailure has: 
;; (defn TestOpenFailure
;;   {:added "1.0"
;;    :go "testOpenFailure(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{3059181 0xc0010bfd80}) t])
;; 
JOKER FUNC pem.BenchmarkDecode has: 
;; (defn BenchmarkDecode
;;   {:added "1.0"
;;    :go "benchmarkDecode(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{3841405 0xc001eb4a00}) b])
;; 
JOKER FUNC pem.BenchmarkEncode has: 
;; (defn BenchmarkEncode
;;   {:added "1.0"
;;    :go "benchmarkEncode(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{3841223 0xc001eb4540}) b])
;; 
JOKER FUNC pem.Decode has: 
;; (defn ^[p rest] Decode
;;   "Decode will find the next PEM formatted block (certificate, private key
;; etc) in the input. It returns that block and the remainder of the input. If
;; no PEM data is found, p is nil and the whole of the input is returned in
;; rest."
;;   {:added "1.0"
;;    :go "decode(data)"}
;;   [^ABEND881(unrecognized Expr type *ast.ArrayType at: &{3862085 <nil> byte}) data])
;; 
JOKER FUNC pem.Encode has: 
;; (defn ^Error Encode
;;   "Encode writes the PEM encoding of b to out."
;;   {:added "1.0"
;;    :go "encode(out, b)"}
;;   [^ABEND881(unrecognized Expr type *ast.SelectorExpr at: &{io Writer}) out, ^ABEND881(unrecognized Expr type *ast.StarExpr at: &{3866557 Block}) b])
;; 
JOKER FUNC pem.EncodeToMemory has: 
;; (defn ^[ABEND042(cannot find typename pem.byte)] EncodeToMemory
;;   "EncodeToMemory returns the PEM encoding of b.
;; 
;; If b has invalid headers and cannot be encoded,
;; EncodeToMemory returns nil. If it is important to
;; report details about this error case, use Encode instead."
;;   {:added "1.0"
;;    :go "encodeToMemory(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{3868284 Block}) b])
;; 
JOKER FUNC pem.TestBadDecode has: 
;; (defn TestBadDecode
;;   {:added "1.0"
;;    :go "testBadDecode(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{3837787 0xc001ea8fa0}) t])
;; 
JOKER FUNC pem.TestBadEncode has: 
;; (defn TestBadEncode
;;   {:added "1.0"
;;    :go "testBadEncode(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{3857666 0xc001ede7e0}) t])
;; 
JOKER FUNC pem.TestDecode has: 
;; (defn TestDecode
;;   {:added "1.0"
;;    :go "testDecode(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{3835742 0xc001e77720}) t])
;; 
JOKER FUNC pem.TestEncode has: 
;; (defn TestEncode
;;   {:added "1.0"
;;    :go "testEncode(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{3837990 0xc001ea9380}) t])
;; 
JOKER FUNC pem.TestFuzz has: 
;; (defn TestFuzz
;;   {:added "1.0"
;;    :go "testFuzz(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{3839661 0xc001eb0f80}) t])
;; 
JOKER FUNC pem.TestGetLine has: 
;; (defn TestGetLine
;;   {:added "1.0"
;;    :go "testGetLine(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{3835499 0xc001e77140}) t])
;; 
JOKER FUNC pem.TestLineBreaker has: 
;; (defn TestLineBreaker
;;   {:added "1.0"
;;    :go "testLineBreaker(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{3838598 0xc001ea9aa0}) t])
;; 
JOKER FUNC pem_test.ExampleDecode has: 
;; (defn ExampleDecode
;;   {:added "1.0"
;;    :go "exampleDecode()"}
;;   [])
;; 
JOKER FUNC pem_test.ExampleEncode has: 
;; (defn ExampleEncode
;;   {:added "1.0"
;;    :go "exampleEncode()"}
;;   [])
;; 
JOKER FUNC plan9obj.NewFile has: 
;; (defn ^[{:sections ^ABEND881(unrecognized Expr type *ast.ArrayType at: &{3075270 <nil> 0xc000f084e0}) Sections, :closer ^ABEND881(unrecognized Expr type *ast.SelectorExpr at: &{io Closer}) closer} Error] NewFile
;;   "NewFile creates a new File for accessing a Plan 9 binary in an underlying reader.
;; The Plan 9 binary is expected to start at position 0 in the ReaderAt."
;;   {:added "1.0"
;;    :go "newFile(r)"}
;;   [^ABEND881(unrecognized Expr type *ast.SelectorExpr at: &{io ReaderAt}) r])
;; 
JOKER FUNC plan9obj.Open has: 
;; (defn ^[{:sections ^ABEND881(unrecognized Expr type *ast.ArrayType at: &{3075270 <nil> 0xc000f084e0}) Sections, :closer ^ABEND881(unrecognized Expr type *ast.SelectorExpr at: &{io Closer}) closer} Error] Open
;;   "Open opens the named file using os.Open and prepares it for use as a Plan 9 a.out binary."
;;   {:added "1.0"
;;    :go "open(name)"}
;;   [^String name])
;; 
JOKER FUNC plan9obj.TestOpen has: 
;; (defn TestOpen
;;   {:added "1.0"
;;    :go "testOpen(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{3082397 0xc000f24920}) t])
;; 
JOKER FUNC plan9obj.TestOpenFailure has: 
;; (defn TestOpenFailure
;;   {:added "1.0"
;;    :go "testOpenFailure(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{3083120 0xc000ff8360}) t])
;; 
JOKER FUNC plugin.Open has: 
;; (defn ^[{:pluginpath ^String pluginpath, :err ^String err, :loaded ^ABEND881(unrecognized Expr type *ast.ChanType at: &{10339819 0 3 0xc0030ca360}) loaded, :syms ^ABEND881(unrecognized Expr type *ast.MapType at: &{10339867 string 0xc0030ca440}) syms} Error] Open
;;   "Open opens a Go plugin.
;; If a path has already been opened, then the existing *Plugin is returned.
;; It is safe for concurrent use by multiple goroutines."
;;   {:added "1.0"
;;    :go "open(path)"}
;;   [^String path])
;; 
JOKER FUNC png.BenchmarkDecodeGray has: 
;; (defn BenchmarkDecodeGray
;;   {:added "1.0"
;;    :go "benchmarkDecodeGray(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{6290495 0xc0017c3f00}) b])
;; 
JOKER FUNC png.BenchmarkDecodeInterlacing has: 
;; (defn BenchmarkDecodeInterlacing
;;   {:added "1.0"
;;    :go "benchmarkDecodeInterlacing(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{6291007 0xc001708680}) b])
;; 
JOKER FUNC png.BenchmarkDecodeNRGBAGradient has: 
;; (defn BenchmarkDecodeNRGBAGradient
;;   {:added "1.0"
;;    :go "benchmarkDecodeNRGBAGradient(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{6290597 0xc001708080}) b])
;; 
JOKER FUNC png.BenchmarkDecodeNRGBAOpaque has: 
;; (defn BenchmarkDecodeNRGBAOpaque
;;   {:added "1.0"
;;    :go "benchmarkDecodeNRGBAOpaque(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{6290707 0xc001708200}) b])
;; 
JOKER FUNC png.BenchmarkDecodePaletted has: 
;; (defn BenchmarkDecodePaletted
;;   {:added "1.0"
;;    :go "benchmarkDecodePaletted(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{6290812 0xc001708380}) b])
;; 
JOKER FUNC png.BenchmarkDecodeRGB has: 
;; (defn BenchmarkDecodeRGB
;;   {:added "1.0"
;;    :go "benchmarkDecodeRGB(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{6290908 0xc001708500}) b])
;; 
JOKER FUNC png.BenchmarkEncodeGray has: 
;; (defn BenchmarkEncodeGray
;;   {:added "1.0"
;;    :go "benchmarkEncodeGray(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{6241499 0xc001b54ec0}) b])
;; 
JOKER FUNC png.BenchmarkEncodeGrayWithBufferPool has: 
;; (defn BenchmarkEncodeGrayWithBufferPool
;;   {:added "1.0"
;;    :go "benchmarkEncodeGrayWithBufferPool(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{6241873 0xc001b55800}) b])
;; 
JOKER FUNC png.BenchmarkEncodeNRGBA has: 
;; (defn BenchmarkEncodeNRGBA
;;   {:added "1.0"
;;    :go "benchmarkEncodeNRGBA(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{6242627 0xc00217eb60}) b])
;; 
JOKER FUNC png.BenchmarkEncodeNRGBOpaque has: 
;; (defn BenchmarkEncodeNRGBOpaque
;;   {:added "1.0"
;;    :go "benchmarkEncodeNRGBOpaque(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{6242138 0xc001b55ea0}) b])
;; 
JOKER FUNC png.BenchmarkEncodePaletted has: 
;; (defn BenchmarkEncodePaletted
;;   {:added "1.0"
;;    :go "benchmarkEncodePaletted(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{6242915 0xc00217f200}) b])
;; 
JOKER FUNC png.BenchmarkEncodeRGBA has: 
;; (defn BenchmarkEncodeRGBA
;;   {:added "1.0"
;;    :go "benchmarkEncodeRGBA(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{6243707 0xc002180720}) b])
;; 
JOKER FUNC png.BenchmarkEncodeRGBOpaque has: 
;; (defn BenchmarkEncodeRGBOpaque
;;   {:added "1.0"
;;    :go "benchmarkEncodeRGBOpaque(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{6243221 0xc00217fa60}) b])
;; 
JOKER FUNC png.BenchmarkPaeth has: 
;; (defn BenchmarkPaeth
;;   {:added "1.0"
;;    :go "benchmarkPaeth(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{6292455 0xc001709e20}) b])
;; 
JOKER FUNC png.Decode has: 
;; (defn ^[ABEND881(unrecognized Expr type *ast.SelectorExpr at: &{image Image}) Error] Decode
;;   "Decode reads a PNG image from r and returns it as an image.Image.
;; The type of Image returned depends on the PNG contents."
;;   {:added "1.0"
;;    :go "decode(r)"}
;;   [^ABEND881(unrecognized Expr type *ast.SelectorExpr at: &{io Reader}) r])
;; 
JOKER FUNC png.DecodeConfig has: 
;; (defn ^[ABEND881(unrecognized Expr type *ast.SelectorExpr at: &{image Config}) Error] DecodeConfig
;;   "DecodeConfig returns the color model and dimensions of a PNG image without
;; decoding the entire image."
;;   {:added "1.0"
;;    :go "decodeConfig(r)"}
;;   [^ABEND881(unrecognized Expr type *ast.SelectorExpr at: &{io Reader}) r])
;; 
JOKER FUNC png.Encode has: 
;; (defn ^Error Encode
;;   "Encode writes the Image m to w in PNG format. Any Image may be
;; encoded, but images that are not image.NRGBA might be encoded lossily."
;;   {:added "1.0"
;;    :go "encode(w, m)"}
;;   [^ABEND881(unrecognized Expr type *ast.SelectorExpr at: &{io Writer}) w, ^ABEND881(unrecognized Expr type *ast.SelectorExpr at: &{image Image}) m])
;; 
JOKER FUNC png.TestDimensionOverflow has: 
;; (defn TestDimensionOverflow
;;   {:added "1.0"
;;    :go "testDimensionOverflow(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{6289128 0xc0017c27c0}) t])
;; 
JOKER FUNC png.TestGray8Transparent has: 
;; (defn TestGray8Transparent
;;   {:added "1.0"
;;    :go "testGray8Transparent(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{6286583 0xc002a5de20}) t])
;; 
JOKER FUNC png.TestIncompleteIDATOnRowBoundary has: 
;; (defn TestIncompleteIDATOnRowBoundary
;;   {:added "1.0"
;;    :go "testIncompleteIDATOnRowBoundary(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{6282318 0xc002a43360}) t])
;; 
JOKER FUNC png.TestInterlaced has: 
;; (defn TestInterlaced
;;   {:added "1.0"
;;    :go "testInterlaced(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{6281971 0xc002a42de0}) t])
;; 
JOKER FUNC png.TestMultipletRNSChunks has: 
;; (defn TestMultipletRNSChunks
;;   {:added "1.0"
;;    :go "testMultipletRNSChunks(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{6284170 0xc002a5c200}) t])
;; 
JOKER FUNC png.TestPaeth has: 
;; (defn TestPaeth
;;   {:added "1.0"
;;    :go "testPaeth(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{6292104 0xc001709720}) t])
;; 
JOKER FUNC png.TestPaethDecode has: 
;; (defn TestPaethDecode
;;   {:added "1.0"
;;    :go "testPaethDecode(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{6292571 0xc001520140}) t])
;; 
JOKER FUNC png.TestPalettedDecodeConfig has: 
;; (defn TestPalettedDecodeConfig
;;   {:added "1.0"
;;    :go "testPalettedDecodeConfig(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{6281437 0xc002a423c0}) t])
;; 
JOKER FUNC png.TestReader has: 
;; (defn TestReader
;;   {:added "1.0"
;;    :go "testReader(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{6278876 0xc002931a20}) t])
;; 
JOKER FUNC png.TestReaderError has: 
;; (defn TestReaderError
;;   {:added "1.0"
;;    :go "testReaderError(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{6281030 0xc002959b80}) t])
;; 
JOKER FUNC png.TestSubImage has: 
;; (defn TestSubImage
;;   {:added "1.0"
;;    :go "testSubImage(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{6241087 0xc001b54380}) t])
;; 
JOKER FUNC png.TestTrailingIDATChunks has: 
;; (defn TestTrailingIDATChunks
;;   {:added "1.0"
;;    :go "testTrailingIDATChunks(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{6282978 0xc002a43800}) t])
;; 
JOKER FUNC png.TestUnknownChunkLengthUnderflow has: 
;; (defn TestUnknownChunkLengthUnderflow
;;   {:added "1.0"
;;    :go "testUnknownChunkLengthUnderflow(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{6286097 0xc002a5d520}) t])
;; 
JOKER FUNC png.TestWriter has: 
;; (defn TestWriter
;;   {:added "1.0"
;;    :go "testWriter(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{6239849 0xc001452c00}) t])
;; 
JOKER FUNC png.TestWriterLevels has: 
;; (defn TestWriterLevels
;;   {:added "1.0"
;;    :go "testWriterLevels(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{6240504 0xc0014537c0}) t])
;; 
JOKER FUNC png_test.ExampleDecode has: 
;; (defn ExampleDecode
;;   {:added "1.0"
;;    :go "exampleDecode()"}
;;   [])
;; 
JOKER FUNC png_test.ExampleEncode has: 
;; (defn ExampleEncode
;;   {:added "1.0"
;;    :go "exampleEncode()"}
;;   [])
;; 
JOKER FUNC poly1305.Benchmark1K has: 
;; (defn Benchmark1K
;;   {:added "1.0"
;;    :go "benchmark1K(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{14953814 0xc003705480}) b])
;; 
JOKER FUNC poly1305.Benchmark1KUnaligned has: 
;; (defn Benchmark1KUnaligned
;;   {:added "1.0"
;;    :go "benchmark1KUnaligned(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{14953960 0xc003705780}) b])
;; 
JOKER FUNC poly1305.Benchmark2M has: 
;; (defn Benchmark2M
;;   {:added "1.0"
;;    :go "benchmark2M(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{14954020 0xc003705900}) b])
;; 
JOKER FUNC poly1305.Benchmark64 has: 
;; (defn Benchmark64
;;   {:added "1.0"
;;    :go "benchmark64(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{14953746 0xc003705300}) b])
;; 
JOKER FUNC poly1305.Benchmark64Unaligned has: 
;; (defn Benchmark64Unaligned
;;   {:added "1.0"
;;    :go "benchmark64Unaligned(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{14953893 0xc003705600}) b])
;; 
JOKER FUNC poly1305.Sum has: 
;; (defn Sum
;;   "Sum generates an authenticator for m using a one-time key and puts the
;; 16-byte result into out. Authenticating two different messages with the same
;; key allows an attacker to forge messages at will."
;;   {:added "1.0"
;;    :go "sum(out, m, key)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{14954860 0xc003c679e0}) out, ^ABEND881(unrecognized Expr type *ast.ArrayType at: &{14954873 <nil> byte}) m, ^ABEND881(unrecognized Expr type *ast.StarExpr at: &{14954885 0xc003c67a40}) key])
;; 
JOKER FUNC poly1305.TestBurnin has: 
;; (defn TestBurnin
;;   {:added "1.0"
;;    :go "testBurnin(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{14952445 0xc0062f7b20}) t])
;; 
JOKER FUNC poly1305.TestSum has: 
;; (defn TestSum
;;   {:added "1.0"
;;    :go "testSum(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{14953187 0xc003704680}) t])
;; 
JOKER FUNC poly1305.TestSumGeneric has: 
;; (defn TestSumGeneric
;;   {:added "1.0"
;;    :go "testSumGeneric(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{14953333 0xc003704980}) t])
;; 
JOKER FUNC poly1305.TestSumGenericUnaligned has: 
;; (defn TestSumGenericUnaligned
;;   {:added "1.0"
;;    :go "testSumGenericUnaligned(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{14953419 0xc003704b00}) t])
;; 
JOKER FUNC poly1305.TestSumUnaligned has: 
;; (defn TestSumUnaligned
;;   {:added "1.0"
;;    :go "testSumUnaligned(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{14953266 0xc003704800}) t])
;; 
JOKER FUNC poly1305.Verify has: 
;; (defn ^ABEND042(cannot find typename poly1305.bool) Verify
;;   "Verify returns true if mac is a valid authenticator for m with the given
;; key."
;;   {:added "1.0"
;;    :go "verify(mac, m, key)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{14951141 0xc003c54ae0}) mac, ^ABEND881(unrecognized Expr type *ast.ArrayType at: &{14951154 <nil> byte}) m, ^ABEND881(unrecognized Expr type *ast.StarExpr at: &{14951166 0xc003c54b40}) key])
;; 
JOKER FUNC pprof.Cmdline has: 
;; (defn Cmdline
;;   "Cmdline responds with the running program's
;; command line, with arguments separated by NUL bytes.
;; The package initialization registers it as /debug/pprof/cmdline."
;;   {:added "1.0"
;;    :go "cmdline(w, r)"}
;;   [^ABEND881(unrecognized Expr type *ast.SelectorExpr at: &{http ResponseWriter}) w, ^ABEND881(unrecognized Expr type *ast.StarExpr at: &{9665849 0xc0047143a0}) r])
;; 
JOKER FUNC pprof.Do has: 
;; (defn Do
;;   "Do calls f with a copy of the parent context with the
;; given labels added to the parent's label map.
;; Each key/value pair in labels is inserted into the label map in the
;; order provided, overriding any previous value for the same key.
;; The augmented label map will be set for the duration of the call to f
;; and restored once f returns."
;;   {:added "1.0"
;;    :go "do(ctx, labels, f)"}
;;   [^ABEND881(unrecognized Expr type *ast.SelectorExpr at: &{context Context}) ctx, labels, ^ABEND881(unrecognized Expr type *ast.FuncType at: &{12632190 0xc005a515f0 <nil>}) f])
;; 
JOKER FUNC pprof.ForLabels has: 
;; (defn ForLabels
;;   "ForLabels invokes f with each label set on the context.
;; The function f should return true to continue iteration or false to stop iteration early."
;;   {:added "1.0"
;;    :go "forLabels(ctx, f)"}
;;   [^ABEND881(unrecognized Expr type *ast.SelectorExpr at: &{context Context}) ctx, ^ABEND881(unrecognized Expr type *ast.FuncType at: &{12616531 0xc005a19020 0xc005a19050}) f])
;; 
JOKER FUNC pprof.Handler has: 
;; (defn ^ABEND881(unrecognized Expr type *ast.SelectorExpr at: &{http Handler}) Handler
;;   "Handler returns an HTTP handler that serves the named profile."
;;   {:added "1.0"
;;    :go "handler(name)"}
;;   [^String name])
;; 
JOKER FUNC pprof.Index has: 
;; (defn Index
;;   "Index responds with the pprof-formatted profile named by the request.
;; For example, "/debug/pprof/heap" serves the "heap" profile.
;; Index responds to a request for "/debug/pprof/" with an HTML page
;; listing the available profiles."
;;   {:added "1.0"
;;    :go "index(w, r)"}
;;   [^ABEND881(unrecognized Expr type *ast.SelectorExpr at: &{http ResponseWriter}) w, ^ABEND881(unrecognized Expr type *ast.StarExpr at: &{9672341 0xc004721900}) r])
;; 
JOKER FUNC pprof.Label has: 
;; (defn ^[String ABEND042(cannot find typename pprof.bool)] Label
;;   "Label returns the value of the label with the given key on ctx, and a boolean indicating
;; whether that label exists."
;;   {:added "1.0"
;;    :go "label(ctx, key)"}
;;   [^ABEND881(unrecognized Expr type *ast.SelectorExpr at: &{context Context}) ctx, ^String key])
;; 
JOKER FUNC pprof.Labels has: 
;; (defn ^{:list ^ABEND881(unrecognized Expr type *ast.ArrayType at: &{12614480 <nil> label}) list} Labels
;;   "Labels takes an even number of strings representing key-value pairs
;; and makes a LabelSet containing them.
;; A label overwrites a prior label with the same key."
;;   {:added "1.0"
;;    :go "labels(args)"}
;;   [^ABEND881(unrecognized Expr type *ast.Ellipsis at: &{12615827 string}) args])
;; 
JOKER FUNC pprof.Lookup has: 
;; (defn ^{:name ^String name, :mu ^ABEND881(unrecognized Expr type *ast.SelectorExpr at: &{sync Mutex}) mu, :m ^ABEND881(unrecognized Expr type *ast.MapType at: &{12591349 0xc0059d4700 0xc0059d0270}) m, :count ^ABEND881(unrecognized Expr type *ast.FuncType at: &{12591382 0xc0059d0300 0xc0059d0330}) count, :write ^ABEND881(unrecognized Expr type *ast.FuncType at: &{12591400 0xc0059d0390 0xc0059d03c0}) write} Lookup
;;   "Lookup returns the profile with the given name, or nil if no such profile exists."
;;   {:added "1.0"
;;    :go "lookup(name)"}
;;   [^String name])
;; 
JOKER FUNC pprof.NewProfile has: 
;; (defn ^{:name ^String name, :mu ^ABEND881(unrecognized Expr type *ast.SelectorExpr at: &{sync Mutex}) mu, :m ^ABEND881(unrecognized Expr type *ast.MapType at: &{12591349 0xc0059d4700 0xc0059d0270}) m, :count ^ABEND881(unrecognized Expr type *ast.FuncType at: &{12591382 0xc0059d0300 0xc0059d0330}) count, :write ^ABEND881(unrecognized Expr type *ast.FuncType at: &{12591400 0xc0059d0390 0xc0059d03c0}) write} NewProfile
;;   "NewProfile creates a new profile with the given name.
;; If a profile with that name already exists, NewProfile panics.
;; The convention is to use a 'import/path.' prefix to create
;; separate name spaces for each package.
;; For compatibility with various tools that read pprof data,
;; profile names should not contain spaces."
;;   {:added "1.0"
;;    :go "newProfile(name)"}
;;   [^String name])
;; 
JOKER FUNC pprof.Profile has: 
;; (defn Profile
;;   "Profile responds with the pprof-formatted cpu profile.
;; Profiling lasts for duration specified in seconds GET parameter, or for 30 seconds if not specified.
;; The package initialization registers it as /debug/pprof/profile."
;;   {:added "1.0"
;;    :go "profile(w, r)"}
;;   [^ABEND881(unrecognized Expr type *ast.SelectorExpr at: &{http ResponseWriter}) w, ^ABEND881(unrecognized Expr type *ast.StarExpr at: &{9666986 0xc0047157c0}) r])
;; 
JOKER FUNC pprof.Profiles has: 
;; (defn ^[{:name ^String name, :mu ^ABEND881(unrecognized Expr type *ast.SelectorExpr at: &{sync Mutex}) mu, :m ^ABEND881(unrecognized Expr type *ast.MapType at: &{12591349 0xc0059d4700 0xc0059d0270}) m, :count ^ABEND881(unrecognized Expr type *ast.FuncType at: &{12591382 0xc0059d0300 0xc0059d0330}) count, :write ^ABEND881(unrecognized Expr type *ast.FuncType at: &{12591400 0xc0059d0390 0xc0059d03c0}) write}] Profiles
;;   "Profiles returns a slice of all the known profiles, sorted by name."
;;   {:added "1.0"
;;    :go "profiles()"}
;;   [])
;; 
JOKER FUNC pprof.SetGoroutineLabels has: 
;; (defn SetGoroutineLabels
;;   "SetGoroutineLabels sets the current goroutine's labels to match ctx.
;; This is a lower-level API than Do, which should be used instead when possible."
;;   {:added "1.0"
;;    :go "setGoroutineLabels(ctx)"}
;;   [^ABEND881(unrecognized Expr type *ast.SelectorExpr at: &{context Context}) ctx])
;; 
JOKER FUNC pprof.StartCPUProfile has: 
;; (defn ^Error StartCPUProfile
;;   "StartCPUProfile enables CPU profiling for the current process.
;; While profiling, the profile will be buffered and written to w.
;; StartCPUProfile returns an error if profiling is already enabled.
;; 
;; On Unix-like systems, StartCPUProfile does not work by default for
;; Go code built with -buildmode=c-archive or -buildmode=c-shared.
;; StartCPUProfile relies on the SIGPROF signal, but that signal will
;; be delivered to the main program's SIGPROF signal handler (if any)
;; not to the one used by Go. To make it work, call os/signal.Notify
;; for syscall.SIGPROF, but note that doing so may break any profiling
;; being done by the main program."
;;   {:added "1.0"
;;    :go "startCPUProfile(w)"}
;;   [^ABEND881(unrecognized Expr type *ast.SelectorExpr at: &{io Writer}) w])
;; 
JOKER FUNC pprof.StopCPUProfile has: 
;; (defn StopCPUProfile
;;   "StopCPUProfile stops the current CPU profile, if any.
;; StopCPUProfile only returns after all the writes for the
;; profile have completed."
;;   {:added "1.0"
;;    :go "stopCPUProfile()"}
;;   [])
;; 
JOKER FUNC pprof.Symbol has: 
;; (defn Symbol
;;   "Symbol looks up the program counters listed in the request,
;; responding with a table mapping program counters to function names.
;; The package initialization registers it as /debug/pprof/symbol."
;;   {:added "1.0"
;;    :go "symbol(w, r)"}
;;   [^ABEND881(unrecognized Expr type *ast.SelectorExpr at: &{http ResponseWriter}) w, ^ABEND881(unrecognized Expr type *ast.StarExpr at: &{9669138 0xc00471d3e0}) r])
;; 
JOKER FUNC pprof.TestAtomicLoadStore64 has: 
;; (defn TestAtomicLoadStore64
;;   "Check that there is no deadlock when the program receives SIGPROF while in
;; 64bit atomics' critical section. Used to happen on mips{,le}. See #20146."
;;   {:added "1.0"
;;    :go "testAtomicLoadStore64(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{12576484 0xc0059a1e80}) t])
;; 
JOKER FUNC pprof.TestBlockProfile has: 
;; (defn TestBlockProfile
;;   {:added "1.0"
;;    :go "testBlockProfile(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{12564545 0xc00597bc60}) t])
;; 
JOKER FUNC pprof.TestCPUProfile has: 
;; (defn TestCPUProfile
;;   {:added "1.0"
;;    :go "testCPUProfile(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{12555911 0xc005959de0}) t])
;; 
JOKER FUNC pprof.TestCPUProfileInlining has: 
;; (defn TestCPUProfileInlining
;;   {:added "1.0"
;;    :go "testCPUProfileInlining(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{12556413 0xc0059626e0}) t])
;; 
JOKER FUNC pprof.TestCPUProfileLabel has: 
;; (defn TestCPUProfileLabel
;;   {:added "1.0"
;;    :go "testCPUProfileLabel(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{12575461 0xc0059a0f20}) t])
;; 
JOKER FUNC pprof.TestCPUProfileMultithreaded has: 
;; (defn TestCPUProfileMultithreaded
;;   {:added "1.0"
;;    :go "testCPUProfileMultithreaded(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{12556081 0xc0059620c0}) t])
;; 
JOKER FUNC pprof.TestCPUProfileWithFork has: 
;; (defn TestCPUProfileWithFork
;;   "Fork can hang if preempted with signals frequently enough (see issue 5517).
;; Ensure that we do not do this."
;;   {:added "1.0"
;;    :go "testCPUProfileWithFork(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{12561607 0xc005977000}) t])
;; 
JOKER FUNC pprof.TestContextLabels has: 
;; (defn TestContextLabels
;;   {:added "1.0"
;;    :go "testContextLabels(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{12632843 0xc005a5d6e0}) t])
;; 
JOKER FUNC pprof.TestConvertCPUProfile has: 
;; (defn TestConvertCPUProfile
;;   {:added "1.0"
;;    :go "testConvertCPUProfile(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{12619794 0xc005a2d420}) t])
;; 
JOKER FUNC pprof.TestConvertCPUProfileEmpty has: 
;; (defn TestConvertCPUProfileEmpty
;;   {:added "1.0"
;;    :go "testConvertCPUProfileEmpty(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{12617771 0xc005a29200}) t])
;; 
JOKER FUNC pprof.TestConvertMemProfile has: 
;; (defn TestConvertMemProfile
;;   {:added "1.0"
;;    :go "testConvertMemProfile(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{12653122 0xc005aa6200}) t])
;; 
JOKER FUNC pprof.TestDescriptions has: 
;; (defn TestDescriptions
;;   "TestDescriptions checks that the profile names under runtime/pprof package
;; have a key in the description map."
;;   {:added "1.0"
;;    :go "testDescriptions(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{9661049 0xc0046f4d80}) t])
;; 
JOKER FUNC pprof.TestDo has: 
;; (defn TestDo
;;   {:added "1.0"
;;    :go "testDo(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{12581713 0xc0059ba3a0}) t])
;; 
JOKER FUNC pprof.TestEmptyCallStack has: 
;; (defn TestEmptyCallStack
;;   "Issue 18836."
;;   {:added "1.0"
;;    :go "testEmptyCallStack(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{12574907 0xc0059a0500}) t])
;; 
JOKER FUNC pprof.TestFakeMapping has: 
;; (defn TestFakeMapping
;;   "TestFakeMapping tests if at least one mapping exists
;; (including a fake mapping), and their HasFunctions bits
;; are set correctly."
;;   {:added "1.0"
;;    :go "testFakeMapping(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{12627488 0xc005a46c00}) t])
;; 
JOKER FUNC pprof.TestGoroutineCounts has: 
;; (defn TestGoroutineCounts
;;   {:added "1.0"
;;    :go "testGoroutineCounts(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{12573126 0xc005996560}) t])
;; 
JOKER FUNC pprof.TestGoroutineSwitch has: 
;; (defn TestGoroutineSwitch
;;   "Test that profiler does not observe runtime.gogo as "user" goroutine execution.
;; If it did, it would see inconsistent state and would either record an incorrect stack
;; or crash because the stack was malformed."
;;   {:added "1.0"
;;    :go "testGoroutineSwitch(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{12562490 0xc005977b60}) t])
;; 
JOKER FUNC pprof.TestHandlers has: 
;; (defn TestHandlers
;;   {:added "1.0"
;;    :go "testHandlers(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{9661262 0xc0046f51e0}) t])
;; 
JOKER FUNC pprof.TestLabelRace has: 
;; (defn TestLabelRace
;;   {:added "1.0"
;;    :go "testLabelRace(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{12575710 0xc0059a13a0}) t])
;; 
JOKER FUNC pprof.TestMapping has: 
;; (defn TestMapping
;;   "TestMapping checkes the mapping section of CPU profiles
;; has the HasFunctions field set correctly. If all PCs included
;; in the samples are successfully symbolized, the corresponding
;; mapping entry (in this test case, only one entry) should have
;; its HasFunctions field set true.
;; The test generates a CPU profile that includes PCs from C side
;; that the runtime can't symbolize. See ./testdata/mappingtest."
;;   {:added "1.0"
;;    :go "testMapping(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{12625534 0xc005a36e20}) t])
;; 
JOKER FUNC pprof.TestMathBigDivide has: 
;; (defn TestMathBigDivide
;;   "Test that profiling of division operations is okay, especially on ARM. See issue 6681."
;;   {:added "1.0"
;;    :go "testMathBigDivide(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{12564198 0xc00597b580}) t])
;; 
JOKER FUNC pprof.TestMemoryProfiler has: 
;; (defn TestMemoryProfiler
;;   {:added "1.0"
;;    :go "testMemoryProfiler(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{12584064 0xc0059c4360}) t])
;; 
JOKER FUNC pprof.TestMutexProfile has: 
;; (defn TestMutexProfile
;;   {:added "1.0"
;;    :go "testMutexProfile(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{12571270 0xc005992400}) t])
;; 
JOKER FUNC pprof.TestProcSelfMaps has: 
;; (defn TestProcSelfMaps
;;   {:added "1.0"
;;    :go "testProcSelfMaps(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{12624520 0xc005a360c0}) t])
;; 
JOKER FUNC pprof.TestSetGoroutineLabels has: 
;; (defn TestSetGoroutineLabels
;;   {:added "1.0"
;;    :go "testSetGoroutineLabels(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{12580211 0xc0059b1080}) t])
;; 
JOKER FUNC pprof.Trace has: 
;; (defn Trace
;;   "Trace responds with the execution trace in binary form.
;; Tracing lasts for duration specified in seconds GET parameter, or for 1 second if not specified.
;; The package initialization registers it as /debug/pprof/trace."
;;   {:added "1.0"
;;    :go "trace(w, r)"}
;;   [^ABEND881(unrecognized Expr type *ast.SelectorExpr at: &{http ResponseWriter}) w, ^ABEND881(unrecognized Expr type *ast.StarExpr at: &{9668093 0xc00471c5e0}) r])
;; 
JOKER FUNC pprof.WithLabels has: 
;; (defn ^ABEND881(unrecognized Expr type *ast.SelectorExpr at: &{context Context}) WithLabels
;;   "WithLabels returns a new context.Context with the given labels added.
;; A label overwrites a prior label with the same key."
;;   {:added "1.0"
;;    :go "withLabels(ctx, labels)"}
;;   [^ABEND881(unrecognized Expr type *ast.SelectorExpr at: &{context Context}) ctx, labels])
;; 
JOKER FUNC pprof.WriteHeapProfile has: 
;; (defn ^Error WriteHeapProfile
;;   "WriteHeapProfile is shorthand for Lookup("heap").WriteTo(w, 0).
;; It is preserved for backwards compatibility."
;;   {:added "1.0"
;;    :go "writeHeapProfile(w)"}
;;   [^ABEND881(unrecognized Expr type *ast.SelectorExpr at: &{io Writer}) w])
;; 
JOKER FUNC printer.BenchmarkPrint has: 
;; (defn BenchmarkPrint
;;   {:added "1.0"
;;    :go "benchmarkPrint(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{4866674 0xc0022c8b60}) b])
;; 
JOKER FUNC printer.Fprint has: 
;; (defn ^Error Fprint
;;   "Fprint "pretty-prints" an AST node to output.
;; It calls Config.Fprint with default settings.
;; Note that gofmt uses tabs for indentation but spaces for alignment;
;; use format.Node (package go/format) for output that matches gofmt."
;;   {:added "1.0"
;;    :go "fprint(output, fset, node)"}
;;   [^ABEND881(unrecognized Expr type *ast.SelectorExpr at: &{io Writer}) output, ^ABEND881(unrecognized Expr type *ast.StarExpr at: &{4906375 0xc002339b60}) fset, ^ABEND881(unrecognized Expr type *ast.InterfaceType at: &{4906396 0xc00233a420 false}) node])
;; 
JOKER FUNC printer.TestBadComments has: 
;; (defn TestBadComments
;;   "Verify that the printer produces a correct program
;; even if the position information of comments introducing newlines
;; is incorrect."
;;   {:added "1.0"
;;    :go "testBadComments(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{4808517 0xc002215940}) t])
;; 
JOKER FUNC printer.TestBadNodes has: 
;; (defn TestBadNodes
;;   "Verify that the printer doesn't crash if the AST contains BadXXX nodes."
;;   {:added "1.0"
;;    :go "testBadNodes(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{4807227 0xc0022145c0}) t])
;; 
JOKER FUNC printer.TestBaseIndent has: 
;; (defn TestBaseIndent
;;   {:added "1.0"
;;    :go "testBaseIndent(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{4813729 0xc0022247c0}) t])
;; 
JOKER FUNC printer.TestCommentedNode has: 
;; (defn TestCommentedNode
;;   {:added "1.0"
;;    :go "testCommentedNode(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{4816589 0xc00222f7e0}) t])
;; 
JOKER FUNC printer.TestDeclLists has: 
;; (defn TestDeclLists
;;   {:added "1.0"
;;    :go "testDeclLists(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{4812693 0xc00221f500}) t])
;; 
JOKER FUNC printer.TestFiles has: 
;; (defn TestFiles
;;   {:added "1.0"
;;    :go "testFiles(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{4805627 0xc00220acc0}) t])
;; 
JOKER FUNC printer.TestFuncType has: 
;; (defn TestFuncType
;;   "TestFuncType tests that an ast.FuncType with a nil Params field
;; can be printed (per go/ast specification). Test case for issue 3870."
;;   {:added "1.0"
;;    :go "testFuncType(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{4814999 0xc002225a20}) t])
;; 
JOKER FUNC printer.TestIssue11151 has: 
;; (defn TestIssue11151
;;   {:added "1.0"
;;    :go "testIssue11151(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{4817428 0xc0022326c0}) t])
;; 
JOKER FUNC printer.TestIssue5945 has: 
;; (defn TestIssue5945
;;   "Verify that the SourcePos mode doesn't emit unnecessary //line directives
;; before empty lines."
;;   {:added "1.0"
;;    :go "testIssue5945(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{4811883 0xc00221eae0}) t])
;; 
JOKER FUNC printer.TestLineComments has: 
;; (defn TestLineComments
;;   "TestLineComments, using a simple test case, checks that consecutive line
;; comments are properly terminated with a newline even if the AST position
;; information is incorrect."
;;   {:added "1.0"
;;    :go "testLineComments(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{4806182 0xc00220b5a0}) t])
;; 
JOKER FUNC printer.TestSourcePos has: 
;; (defn TestSourcePos
;;   "Verify that the SourcePos mode emits correct //line directives
;; by testing that position information for matching identifiers
;; is maintained."
;;   {:added "1.0"
;;    :go "testSourcePos(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{4810124 0xc002219340}) t])
;; 
JOKER FUNC printer.TestStmtLists has: 
;; (defn TestStmtLists
;;   {:added "1.0"
;;    :go "testStmtLists(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{4813245 0xc00221fe20}) t])
;; 
JOKER FUNC printer.TestWriteErrors has: 
;; (defn TestWriteErrors
;;   "Test whether the printer stops writing after the first error"
;;   {:added "1.0"
;;    :go "testWriteErrors(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{4815728 0xc00222e960}) t])
;; 
JOKER FUNC printer.TestX has: 
;; (defn TestX
;;   "TextX is a skeleton test that can be filled in for debugging one-off cases.
;; Do not remove."
;;   {:added "1.0"
;;    :go "testX(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{4816439 0xc00222f4e0}) t])
;; 
JOKER FUNC printer_test.ExampleFprint has: 
;; (defn ExampleFprint
;;   {:added "1.0"
;;    :go "exampleFprint()"}
;;   [])
;; 
JOKER FUNC printer_test.Test has: 
;; (defn Test
;;   "Dummy test function so that godoc does not use the entire file as example."
;;   {:added "1.0"
;;    :go "test()"}
;;   [])
;; 
JOKER FUNC quick.Check has: 
;; (defn ^Error Check
;;   "Check looks for an input to f, any function that returns bool,
;; such that f returns false. It calls f repeatedly, with arbitrary
;; values for each argument. If f returns false on a given input,
;; Check returns that input as a *CheckError.
;; For example:
;; 
;; 	func TestOddMultipleOfThree(t *testing.T) {
;; 		f := func(x int) bool {
;; 			y := OddMultipleOfThree(x)
;; 			return y%2 == 1 && y%3 == 0
;; 		}
;; 		if err := quick.Check(f, nil); err != nil {
;; 			t.Error(err)
;; 		}
;; 	}"
;;   {:added "1.0"
;;    :go "check(f, config)"}
;;   [^ABEND881(unrecognized Expr type *ast.InterfaceType at: &{13564759 0xc00489ccc0 false}) f, ^ABEND881(unrecognized Expr type *ast.StarExpr at: &{13564779 Config}) config])
;; 
JOKER FUNC quick.CheckEqual has: 
;; (defn ^Error CheckEqual
;;   "CheckEqual looks for an input on which f and g return different results.
;; It calls f and g repeatedly with arbitrary values for each argument.
;; If f and g return different answers, CheckEqual returns a *CheckEqualError
;; describing the input and the outputs."
;;   {:added "1.0"
;;    :go "checkEqual(f, g, config)"}
;;   [^ABEND881(unrecognized Expr type *ast.InterfaceType at: &{13565780 0xc00489df50 false}) f, ^ABEND881(unrecognized Expr type *ast.InterfaceType at: &{13565780 0xc00489df50 false}) g, ^ABEND881(unrecognized Expr type *ast.StarExpr at: &{13565800 Config}) config])
;; 
JOKER FUNC quick.TestCheckEqual has: 
;; (defn TestCheckEqual
;;   {:added "1.0"
;;    :go "testCheckEqual(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{13551542 0xc0044eab40}) t])
;; 
JOKER FUNC quick.TestCheckProperty has: 
;; (defn TestCheckProperty
;;   {:added "1.0"
;;    :go "testCheckProperty(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{13555033 0xc0044b3940}) t])
;; 
JOKER FUNC quick.TestEmptyStruct has: 
;; (defn TestEmptyStruct
;;   {:added "1.0"
;;    :go "testEmptyStruct(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{13556384 0xc00448ccc0}) t])
;; 
JOKER FUNC quick.TestFailure has: 
;; (defn TestFailure
;;   {:added "1.0"
;;    :go "testFailure(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{13555135 0xc0044b3b20}) t])
;; 
JOKER FUNC quick.TestInt64 has: 
;; (defn TestInt64
;;   {:added "1.0"
;;    :go "testInt64(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{13556991 0xc00447c300}) t])
;; 
JOKER FUNC quick.TestMutuallyRecursive has: 
;; (defn TestMutuallyRecursive
;;   {:added "1.0"
;;    :go "testMutuallyRecursive(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{13556533 0xc0044849c0}) t])
;; 
JOKER FUNC quick.TestNonZeroSliceAndMap has: 
;; (defn TestNonZeroSliceAndMap
;;   "Some serialization formats (e.g. encoding/pem) cannot distinguish
;; between a nil and an empty map or slice, so avoid generating the
;; zero value for these."
;;   {:added "1.0"
;;    :go "testNonZeroSliceAndMap(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{13556794 0xc004480b40}) t])
;; 
JOKER FUNC quick.TestRecursive has: 
;; (defn TestRecursive
;;   "Recursive data structures didn't terminate.
;; Issues 8818 and 11148."
;;   {:added "1.0"
;;    :go "testRecursive(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{13556139 0xc0044951c0}) t])
;; 
JOKER FUNC quick.Value has: 
;; (defn ^[value ok] Value
;;   "Value returns an arbitrary value of the given type.
;; If the type implements the Generator interface, that will be used.
;; Note: To create arbitrary values for structs, all the fields must be exported."
;;   {:added "1.0"
;;    :go "value(t, rand)"}
;;   [^ABEND881(unrecognized Expr type *ast.SelectorExpr at: &{reflect Type}) t, ^ABEND881(unrecognized Expr type *ast.StarExpr at: &{13558965 0xc004479320}) rand])
;; 
JOKER FUNC quotedprintable.BenchmarkWriter has: 
;; (defn BenchmarkWriter
;;   {:added "1.0"
;;    :go "benchmarkWriter(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{7429941 0xc002af35e0}) b])
;; 
JOKER FUNC quotedprintable.NewReader has: 
;; (defn ^{:br ^ABEND881(unrecognized Expr type *ast.StarExpr at: &{7430442 0xc002af3bc0}) br, :rerr rerr, :line ^ABEND881(unrecognized Expr type *ast.ArrayType at: &{7430494 <nil> byte}) line} NewReader
;;   "NewReader returns a quoted-printable reader, decoding from r."
;;   {:added "1.0"
;;    :go "newReader(r)"}
;;   [^ABEND881(unrecognized Expr type *ast.SelectorExpr at: &{io Reader}) r])
;; 
JOKER FUNC quotedprintable.NewWriter has: 
;; (defn ^{:binary Binary, :w ^ABEND881(unrecognized Expr type *ast.SelectorExpr at: &{io Writer}) w, :i ^Int i, :line ^ABEND881(unrecognized Expr type *ast.ArrayType at: &{7440093 0xc0029fa5e0 byte}) line, :cr cr} NewWriter
;;   "NewWriter returns a new Writer that writes to w."
;;   {:added "1.0"
;;    :go "newWriter(w)"}
;;   [^ABEND881(unrecognized Expr type *ast.SelectorExpr at: &{io Writer}) w])
;; 
JOKER FUNC quotedprintable.TestExhaustive has: 
;; (defn TestExhaustive
;;   {:added "1.0"
;;    :go "testExhaustive(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{7437045 0xc002a282c0}) t])
;; 
JOKER FUNC quotedprintable.TestReader has: 
;; (defn TestReader
;;   {:added "1.0"
;;    :go "testReader(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{7434029 0xc002a8cc80}) t])
;; 
JOKER FUNC quotedprintable.TestRoundTrip has: 
;; (defn TestRoundTrip
;;   {:added "1.0"
;;    :go "testRoundTrip(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{7427895 0xc002af2b20}) t])
;; 
JOKER FUNC quotedprintable.TestWriter has: 
;; (defn TestWriter
;;   {:added "1.0"
;;    :go "testWriter(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{7425105 0xc002ace760}) t])
;; 
JOKER FUNC quotedprintable.TestWriterBinary has: 
;; (defn TestWriterBinary
;;   {:added "1.0"
;;    :go "testWriterBinary(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{7425168 0xc002ace920}) t])
;; 
JOKER FUNC quotedprintable_test.ExampleNewReader has: 
;; (defn ExampleNewReader
;;   {:added "1.0"
;;    :go "exampleNewReader()"}
;;   [])
;; 
JOKER FUNC quotedprintable_test.ExampleNewWriter has: 
;; (defn ExampleNewWriter
;;   {:added "1.0"
;;    :go "exampleNewWriter()"}
;;   [])
;; 
JOKER FUNC rand.BenchmarkFloat32 has: 
;; (defn BenchmarkFloat32
;;   {:added "1.0"
;;    :go "benchmarkFloat32(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{7274726 0xc003567200}) b])
;; 
JOKER FUNC rand.BenchmarkFloat64 has: 
;; (defn BenchmarkFloat64
;;   {:added "1.0"
;;    :go "benchmarkFloat64(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{7274836 0xc0035674e0}) b])
;; 
JOKER FUNC rand.BenchmarkInt31n1000 has: 
;; (defn BenchmarkInt31n1000
;;   {:added "1.0"
;;    :go "benchmarkInt31n1000(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{7274613 0xc003566f00}) b])
;; 
JOKER FUNC rand.BenchmarkInt63Threadsafe has: 
;; (defn BenchmarkInt63Threadsafe
;;   {:added "1.0"
;;    :go "benchmarkInt63Threadsafe(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{7274182 0xc003566420}) b])
;; 
JOKER FUNC rand.BenchmarkInt63Unthreadsafe has: 
;; (defn BenchmarkInt63Unthreadsafe
;;   {:added "1.0"
;;    :go "benchmarkInt63Unthreadsafe(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{7274274 0xc003566620}) b])
;; 
JOKER FUNC rand.BenchmarkInt63n1000 has: 
;; (defn BenchmarkInt63n1000
;;   {:added "1.0"
;;    :go "benchmarkInt63n1000(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{7274497 0xc003566c00}) b])
;; 
JOKER FUNC rand.BenchmarkIntn1000 has: 
;; (defn BenchmarkIntn1000
;;   {:added "1.0"
;;    :go "benchmarkIntn1000(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{7274383 0xc003566900}) b])
;; 
JOKER FUNC rand.BenchmarkPerm3 has: 
;; (defn BenchmarkPerm3
;;   {:added "1.0"
;;    :go "benchmarkPerm3(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{7274944 0xc0035677c0}) b])
;; 
JOKER FUNC rand.BenchmarkPerm30 has: 
;; (defn BenchmarkPerm30
;;   {:added "1.0"
;;    :go "benchmarkPerm30(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{7275051 0xc003567ac0}) b])
;; 
JOKER FUNC rand.BenchmarkPerm30ViaShuffle has: 
;; (defn BenchmarkPerm30ViaShuffle
;;   {:added "1.0"
;;    :go "benchmarkPerm30ViaShuffle(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{7275169 0xc003567dc0}) b])
;; 
JOKER FUNC rand.BenchmarkRead1000 has: 
;; (defn BenchmarkRead1000
;;   {:added "1.0"
;;    :go "benchmarkRead1000(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{7276015 0xc003573240}) b])
;; 
JOKER FUNC rand.BenchmarkRead3 has: 
;; (defn BenchmarkRead3
;;   {:added "1.0"
;;    :go "benchmarkRead3(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{7275714 0xc003572a40}) b])
;; 
JOKER FUNC rand.BenchmarkRead64 has: 
;; (defn BenchmarkRead64
;;   {:added "1.0"
;;    :go "benchmarkRead64(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{7275863 0xc003572e40}) b])
;; 
JOKER FUNC rand.BenchmarkShuffleOverhead has: 
;; (defn BenchmarkShuffleOverhead
;;   "BenchmarkShuffleOverhead uses a minimal swap function
;; to measure just the shuffling overhead."
;;   {:added "1.0"
;;    :go "benchmarkShuffleOverhead(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{7275493 0xc0035724a0}) b])
;; 
JOKER FUNC rand.ExpFloat64 has: 
;; (defn ^ABEND042(cannot find typename rand.float64) ExpFloat64
;;   "ExpFloat64 returns an exponentially distributed float64 in the range
;; (0, +math.MaxFloat64] with an exponential distribution whose rate parameter
;; (lambda) is 1 and whose mean is 1/lambda (1) from the default Source.
;; To produce a distribution with a different rate parameter,
;; callers can adjust the output using:
;; 
;;  sample = ExpFloat64() / desiredRateParameter"
;;   {:added "1.0"
;;    :go "expFloat64()"}
;;   [])
;; 
JOKER FUNC rand.Float32 has: 
;; (defn ^ABEND042(cannot find typename rand.float32) Float32
;;   "Float32 returns, as a float32, a pseudo-random number in [0.0,1.0)
;; from the default Source."
;;   {:added "1.0"
;;    :go "float32()"}
;;   [])
;; 
JOKER FUNC rand.Float64 has: 
;; (defn ^ABEND042(cannot find typename rand.float64) Float64
;;   "Float64 returns, as a float64, a pseudo-random number in [0.0,1.0)
;; from the default Source."
;;   {:added "1.0"
;;    :go "float64()"}
;;   [])
;; 
JOKER FUNC rand.Int31 has: 
;; (defn ^ABEND042(cannot find typename rand.int32) Int31
;;   "Int31 returns a non-negative pseudo-random 31-bit integer as an int32
;; from the default Source."
;;   {:added "1.0"
;;    :go "int31()"}
;;   [])
;; 
JOKER FUNC rand.Int31n has: 
;; (defn ^ABEND042(cannot find typename rand.int32) Int31n
;;   "Int31n returns, as an int32, a non-negative pseudo-random number in [0,n)
;; from the default Source.
;; It panics if n <= 0."
;;   {:added "1.0"
;;    :go "int31n(n)"}
;;   [n])
;; 
JOKER FUNC rand.Int63 has: 
;; (defn ^ABEND042(cannot find typename rand.int64) Int63
;;   "Int63 returns a non-negative pseudo-random 63-bit integer as an int64
;; from the default Source."
;;   {:added "1.0"
;;    :go "int63()"}
;;   [])
;; 
JOKER FUNC rand.Int63n has: 
;; (defn ^ABEND042(cannot find typename rand.int64) Int63n
;;   "Int63n returns, as an int64, a non-negative pseudo-random number in [0,n)
;; from the default Source.
;; It panics if n <= 0."
;;   {:added "1.0"
;;    :go "int63n(n)"}
;;   [n])
;; 
JOKER FUNC rand.Intn has: 
(defn ^Int Intn
  "Intn returns, as an int, a non-negative pseudo-random number in [0,n)
from the default Source.
It panics if n <= 0."
  {:added "1.0"
   :go "intn(n)"}
  [^Int n])

JOKER FUNC rand.New has: 
(defn ^{:src src, :s64 s64, :readval readVal, :readpos readPos} New
  "New returns a new Rand that uses random values from src
to generate other random values."
  {:added "1.0"
   :go "new(src)"}
  [src])

JOKER FUNC rand.NewSource has: 
;; (defn ^ABEND881(unrecognized Expr type *ast.InterfaceType at: &{7277151 0xc003570ff0 false}) NewSource
;;   "NewSource returns a new pseudo-random Source seeded with the given value.
;; Unlike the default Source used by top-level functions, this source is not
;; safe for concurrent use by multiple goroutines."
;;   {:added "1.0"
;;    :go "newSource(seed)"}
;;   [seed])
;; 
JOKER FUNC rand.NewZipf has: 
;; (defn ^{:r ^ABEND881(unrecognized Expr type *ast.StarExpr at: &{7224094 Rand}) r, :imax imax, :v v, :q q, :s s, :oneminusq oneminusQ, :oneminusqinv oneminusQinv, :hxm hxm, :hx0minushxm hx0minusHxm} NewZipf
;;   "NewZipf returns a Zipf variate generator.
;; The generator generates values k ∈ [0, imax]
;; such that P(k) is proportional to (v + k) ** (-s).
;; Requirements: s > 1 and v >= 1."
;;   {:added "1.0"
;;    :go "newZipf(r, s, v, imax)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{7224689 Rand}) r, s, v, imax])
;; 
JOKER FUNC rand.NormFloat64 has: 
;; (defn ^ABEND042(cannot find typename rand.float64) NormFloat64
;;   "NormFloat64 returns a normally distributed float64 in the range
;; [-math.MaxFloat64, +math.MaxFloat64] with
;; standard normal distribution (mean = 0, stddev = 1)
;; from the default Source.
;; To produce a different normal distribution, callers can
;; adjust the output using:
;; 
;;  sample = NormFloat64() * desiredStdDev + desiredMean"
;;   {:added "1.0"
;;    :go "normFloat64()"}
;;   [])
;; 
JOKER FUNC rand.Perm has: 
(defn ^[Int] Perm
  "Perm returns, as a slice of n ints, a pseudo-random permutation of the integers [0,n)
from the default Source."
  {:added "1.0"
   :go "perm(n)"}
  [^Int n])

JOKER FUNC rand.Prime has: 
;; (defn ^[p err] Prime
;;   "Prime returns a number, p, of the given size, such that p is prime
;; with high probability.
;; Prime will return error for any error returned by rand.Read or if bits < 2."
;;   {:added "1.0"
;;    :go "prime(rand, bits)"}
;;   [^ABEND881(unrecognized Expr type *ast.SelectorExpr at: &{io Reader}) rand, ^Int bits])
;; 
JOKER FUNC rand.Seed has: 
;; (defn Seed
;;   "Seed uses the provided seed value to initialize the default Source to a
;; deterministic state. If Seed is not called, the generator behaves as
;; if seeded by Seed(1). Seed values that have the same remainder when
;; divided by 2^31-1 generate the same pseudo-random sequence.
;; Seed, unlike the Rand.Seed method, is safe for concurrent use."
;;   {:added "1.0"
;;    :go "seed(seed)"}
;;   [seed])
;; 
JOKER FUNC rand.Shuffle has: 
;; (defn Shuffle
;;   "Shuffle pseudo-randomizes the order of elements using the default Source.
;; n is the number of elements. Shuffle panics if n < 0.
;; swap swaps the elements with indexes i and j."
;;   {:added "1.0"
;;    :go "shuffle(n, swap)"}
;;   [^Int n, ^ABEND881(unrecognized Expr type *ast.FuncType at: &{7287454 0xc00359d110 <nil>}) swap])
;; 
JOKER FUNC rand.TestBatched has: 
;; (defn TestBatched
;;   {:added "1.0"
;;    :go "testBatched(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{1308249 0xc000bcb2c0}) t])
;; 
JOKER FUNC rand.TestBatchedEmpty has: 
;; (defn TestBatchedEmpty
;;   {:added "1.0"
;;    :go "testBatchedEmpty(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{1308837 0xc000bcbf00}) t])
;; 
JOKER FUNC rand.TestBatchedError has: 
;; (defn TestBatchedError
;;   {:added "1.0"
;;    :go "testBatchedError(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{1308655 0xc000bcbba0}) t])
;; 
JOKER FUNC rand.TestConcurrent has: 
;; (defn TestConcurrent
;;   "TestConcurrent exercises the rand API concurrently, triggering situations
;; where the race detector is likely to detect issues."
;;   {:added "1.0"
;;    :go "testConcurrent(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{7258621 0xc003514780}) t])
;; 
JOKER FUNC rand.TestExpTables has: 
;; (defn TestExpTables
;;   {:added "1.0"
;;    :go "testExpTables(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{7267541 0xc003549a40}) t])
;; 
JOKER FUNC rand.TestFloat32 has: 
;; (defn TestFloat32
;;   {:added "1.0"
;;    :go "testFloat32(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{7268316 0xc00354e640}) t])
;; 
JOKER FUNC rand.TestNonStandardExponentialValues has: 
;; (defn TestNonStandardExponentialValues
;;   {:added "1.0"
;;    :go "testNonStandardExponentialValues(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{7264683 0xc0035423c0}) t])
;; 
JOKER FUNC rand.TestNonStandardNormalValues has: 
;; (defn TestNonStandardNormalValues
;;   {:added "1.0"
;;    :go "testNonStandardNormalValues(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{7263079 0xc00353ae00}) t])
;; 
JOKER FUNC rand.TestNormTables has: 
;; (defn TestNormTables
;;   {:added "1.0"
;;    :go "testNormTables(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{7267079 0xc0035491e0}) t])
;; 
JOKER FUNC rand.TestRead has: 
;; (defn TestRead
;;   {:added "1.0"
;;    :go "testRead(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{1309235 0xc000bd0460}) t])
;; 
JOKER FUNC rand.TestReadByOneByte has: 
;; (defn TestReadByOneByte
;;   {:added "1.0"
;;    :go "testReadByOneByte(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{7270210 0xc0035582e0}) t])
;; 
JOKER FUNC rand.TestReadSeedReset has: 
;; (defn TestReadSeedReset
;;   {:added "1.0"
;;    :go "testReadSeedReset(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{7270623 0xc003558c40}) t])
;; 
JOKER FUNC rand.TestReadUniformity has: 
;; (defn TestReadUniformity
;;   {:added "1.0"
;;    :go "testReadUniformity(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{7269723 0xc00354f980}) t])
;; 
JOKER FUNC rand.TestShuffleSmall has: 
;; (defn TestShuffleSmall
;;   {:added "1.0"
;;    :go "testShuffleSmall(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{7270974 0xc003559500}) t])
;; 
JOKER FUNC rand.TestStandardExponentialValues has: 
;; (defn TestStandardExponentialValues
;;   {:added "1.0"
;;    :go "testStandardExponentialValues(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{7264531 0xc003542180}) t])
;; 
JOKER FUNC rand.TestStandardNormalValues has: 
;; (defn TestStandardNormalValues
;;   {:added "1.0"
;;    :go "testStandardNormalValues(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{7262934 0xc00353aba0}) t])
;; 
JOKER FUNC rand.TestUniformFactorial has: 
;; (defn TestUniformFactorial
;;   "TestUniformFactorial tests several ways of generating a uniform value in [0, n!)."
;;   {:added "1.0"
;;    :go "testUniformFactorial(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{7271819 0xc00355e140}) t])
;; 
JOKER FUNC rand.Uint32 has: 
;; (defn ^ABEND042(cannot find typename rand.uint32) Uint32
;;   "Uint32 returns a pseudo-random 32-bit value as a uint32
;; from the default Source."
;;   {:added "1.0"
;;    :go "uint32()"}
;;   [])
;; 
JOKER FUNC rand.Uint64 has: 
;; (defn ^ABEND042(cannot find typename rand.uint64) Uint64
;;   "Uint64 returns a pseudo-random 64-bit value as a uint64
;; from the default Source."
;;   {:added "1.0"
;;    :go "uint64()"}
;;   [])
;; 
JOKER FUNC rand_test.BenchmarkPrime has: 
;; (defn BenchmarkPrime
;;   {:added "1.0"
;;    :go "benchmarkPrime(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{1316045 0xc000bee520}) b])
;; 
JOKER FUNC rand_test.Example has: 
;; (defn Example
;;   {:added "1.0"
;;    :go "example()"}
;;   [])
;; 
JOKER FUNC rand_test.ExamplePerm has: 
;; (defn ExamplePerm
;;   {:added "1.0"
;;    :go "examplePerm()"}
;;   [])
;; 
JOKER FUNC rand_test.ExampleRead has: 
;; (defn ExampleRead
;;   "This example reads 10 cryptographically secure pseudorandom numbers from
;; rand.Reader and writes them to a byte slice."
;;   {:added "1.0"
;;    :go "exampleRead()"}
;;   [])
;; 
JOKER FUNC rand_test.ExampleShuffle has: 
;; (defn ExampleShuffle
;;   {:added "1.0"
;;    :go "exampleShuffle()"}
;;   [])
;; 
JOKER FUNC rand_test.ExampleShuffle_slicesInUnison has: 
;; (defn ExampleShuffle_slicesInUnison
;;   {:added "1.0"
;;    :go "exampleShuffle_slicesInUnison()"}
;;   [])
;; 
JOKER FUNC rand_test.Example_rand has: 
;; (defn Example_rand
;;   "This example shows the use of each of the methods on a *Rand.
;; The use of the global functions is the same, without the receiver."
;;   {:added "1.0"
;;    :go "example_rand()"}
;;   [])
;; 
JOKER FUNC rand_test.TestInt has: 
;; (defn TestInt
;;   {:added "1.0"
;;    :go "testInt(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{1313915 0xc000bddc60}) t])
;; 
JOKER FUNC rand_test.TestIntEmptyMaxPanics has: 
;; (defn TestIntEmptyMaxPanics
;;   "Test that passing a new big.Int as max causes Int to panic"
;;   {:added "1.0"
;;    :go "testIntEmptyMaxPanics(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{1315792 0xc000bee000}) t])
;; 
JOKER FUNC rand_test.TestIntMask has: 
;; (defn TestIntMask
;;   "Test that Int does not mask out valid return values"
;;   {:added "1.0"
;;    :go "testIntMask(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{1315024 0xc000be71a0}) t])
;; 
JOKER FUNC rand_test.TestIntNegativeMaxPanics has: 
;; (defn TestIntNegativeMaxPanics
;;   "Test that passing a negative value as max causes Int to panic"
;;   {:added "1.0"
;;    :go "testIntNegativeMaxPanics(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{1315946 0xc000bee260}) t])
;; 
JOKER FUNC rand_test.TestIntReads has: 
;; (defn TestIntReads
;;   "Test that Int reads only the necessary number of bytes from the reader for
;; max at each bit length"
;;   {:added "1.0"
;;    :go "testIntReads(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{1314475 0xc000be6700}) t])
;; 
JOKER FUNC rand_test.TestPrimeBitsLt2 has: 
;; (defn TestPrimeBitsLt2
;;   "Test that passing bits < 2 causes Prime to return nil, error"
;;   {:added "1.0"
;;    :go "testPrimeBitsLt2(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{1313742 0xc000bdd920}) t])
;; 
JOKER FUNC rand_test.TestPrimeSmall has: 
;; (defn TestPrimeSmall
;;   "https://golang.org/issue/6849."
;;   {:added "1.0"
;;    :go "testPrimeSmall(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{1313360 0xc000bdd160}) t])
;; 
JOKER FUNC rand_test.TestRegress has: 
;; (defn TestRegress
;;   {:added "1.0"
;;    :go "testRegress(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{7290044 0xc0035a49c0}) t])
;; 
JOKER FUNC rc4.BenchmarkRC4_128 has: 
;; (defn BenchmarkRC4_128
;;   {:added "1.0"
;;    :go "benchmarkRC4_128(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{1323476 0xc000c10e20}) b])
;; 
JOKER FUNC rc4.BenchmarkRC4_1K has: 
;; (defn BenchmarkRC4_1K
;;   {:added "1.0"
;;    :go "benchmarkRC4_1K(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{1323535 0xc000c10f80}) b])
;; 
JOKER FUNC rc4.BenchmarkRC4_8K has: 
;; (defn BenchmarkRC4_8K
;;   {:added "1.0"
;;    :go "benchmarkRC4_8K(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{1323595 0xc000c110e0}) b])
;; 
JOKER FUNC rc4.NewCipher has: 
;; (defn ^[{:s ^ABEND881(unrecognized Expr type *ast.ArrayType at: &{1316671 0xc000beebc0 uint32}) s, :i i, :j j} Error] NewCipher
;;   "NewCipher creates and returns a new Cipher. The key argument should be the
;; RC4 key, at least 1 byte and at most 256 bytes."
;;   {:added "1.0"
;;    :go "newCipher(key)"}
;;   [^ABEND881(unrecognized Expr type *ast.ArrayType at: &{1316974 <nil> byte}) key])
;; 
JOKER FUNC rc4.TestBlock has: 
;; (defn TestBlock
;;   {:added "1.0"
;;    :go "testBlock(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{1322461 0xc000c0d6c0}) t])
;; 
JOKER FUNC rc4.TestBlockGeneric has: 
;; (defn TestBlockGeneric
;;   "Test the pure Go version.
;; Because we have assembly for amd64, 386, and arm, this prevents
;; bitrot of the reference implementations."
;;   {:added "1.0"
;;    :go "testBlockGeneric(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{1322680 0xc000c0d940}) t])
;; 
JOKER FUNC rc4.TestGolden has: 
;; (defn TestGolden
;;   {:added "1.0"
;;    :go "testGolden(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{1321784 0xc000c0c840}) t])
;; 
JOKER FUNC reflect.Append has: 
;; (defn ^{:typ ^ABEND881(unrecognized Expr type *ast.StarExpr at: &{10447731 rtype}) typ, :ptr ^ABEND881(unrecognized Expr type *ast.SelectorExpr at: &{unsafe Pointer}) ptr} Append
;;   "Append appends the values x to a slice s and returns the resulting slice.
;; As in Go, each x's value must be assignable to the slice's element type."
;;   {:added "1.0"
;;    :go "append(s, x)"}
;;   [s, ^ABEND881(unrecognized Expr type *ast.Ellipsis at: &{10503133 Value}) x])
;; 
JOKER FUNC reflect.AppendSlice has: 
;; (defn ^{:typ ^ABEND881(unrecognized Expr type *ast.StarExpr at: &{10447731 rtype}) typ, :ptr ^ABEND881(unrecognized Expr type *ast.SelectorExpr at: &{unsafe Pointer}) ptr} AppendSlice
;;   "AppendSlice appends a slice t to a slice s and returns the resulting slice.
;; The slices s and t must have the same element type."
;;   {:added "1.0"
;;    :go "appendSlice(s, t)"}
;;   [s, t])
;; 
JOKER FUNC reflect.ArrayOf has: 
;; (defn ^ABEND881(unrecognized Expr type *ast.InterfaceType at: &{10346463 0xc00284e1b0 false}) ArrayOf
;;   "ArrayOf returns the array type with the given count and element type.
;; For example, if t represents int, ArrayOf(5, t) represents [5]int.
;; 
;; If the resulting type would be larger than the available address space,
;; ArrayOf panics."
;;   {:added "1.0"
;;    :go "arrayOf(count, elem)"}
;;   [^Int count, elem])
;; 
JOKER FUNC reflect.CachedBucketOf has: 
;; (defn ^ABEND881(unrecognized Expr type *ast.InterfaceType at: &{10346463 0xc00284e1b0 false}) CachedBucketOf
;;   {:added "1.0"
;;    :go "cachedBucketOf(m)"}
;;   [m])
;; 
JOKER FUNC reflect.ChanOf has: 
;; (defn ^ABEND881(unrecognized Expr type *ast.InterfaceType at: &{10346463 0xc00284e1b0 false}) ChanOf
;;   "ChanOf returns the channel type with the given direction and element type.
;; For example, if t represents int, ChanOf(RecvDir, t) represents <-chan int.
;; 
;; The gc runtime imposes a limit of 64 kB on channel element types.
;; If t's size is equal to or exceeds this limit, ChanOf panics."
;;   {:added "1.0"
;;    :go "chanOf(dir, t)"}
;;   [dir, t])
;; 
JOKER FUNC reflect.Copy has: 
(defn ^Int Copy
  "Copy copies the contents of src into dst until either
dst has been filled or src has been exhausted.
It returns the number of elements copied.
Dst and src each must have kind Slice or Array, and
dst and src must have the same element type.

As a special case, src can have kind String if the element type of dst is kind Uint8."
  {:added "1.0"
   :go "copy(dst, src)"}
  [dst, src])

JOKER FUNC reflect.DeepEqual has: 
;; (defn ^ABEND042(cannot find typename reflect.bool) DeepEqual
;;   "DeepEqual reports whether x and y are ``deeply equal,'' defined as follows.
;; Two values of identical type are deeply equal if one of the following cases applies.
;; Values of distinct types are never deeply equal.
;; 
;; Array values are deeply equal when their corresponding elements are deeply equal.
;; 
;; Struct values are deeply equal if their corresponding fields,
;; both exported and unexported, are deeply equal.
;; 
;; Func values are deeply equal if both are nil; otherwise they are not deeply equal.
;; 
;; Interface values are deeply equal if they hold deeply equal concrete values.
;; 
;; Map values are deeply equal when all of the following are true:
;; they are both nil or both non-nil, they have the same length,
;; and either they are the same map object or their corresponding keys
;; (matched using Go equality) map to deeply equal values.
;; 
;; Pointer values are deeply equal if they are equal using Go's == operator
;; or if they point to deeply equal values.
;; 
;; Slice values are deeply equal when all of the following are true:
;; they are both nil or both non-nil, they have the same length,
;; and either they point to the same initial entry of the same underlying array
;; (that is, &x[0] == &y[0]) or their corresponding elements (up to length) are deeply equal.
;; Note that a non-nil empty slice and a nil slice (for example, []byte{} and []byte(nil))
;; are not deeply equal.
;; 
;; Other values - numbers, bools, strings, and channels - are deeply equal
;; if they are equal using Go's == operator.
;; 
;; In general DeepEqual is a recursive relaxation of Go's == operator.
;; However, this idea is impossible to implement without some inconsistency.
;; Specifically, it is possible for a value to be unequal to itself,
;; either because it is of func type (uncomparable in general)
;; or because it is a floating-point NaN value (not equal to itself in floating-point comparison),
;; or because it is an array, struct, or interface containing
;; such a value.
;; On the other hand, pointer values are always equal to themselves,
;; even if they point at or contain such problematic values,
;; because they compare equal using Go's == operator, and that
;; is a sufficient condition to be deeply equal, regardless of content.
;; DeepEqual has been defined so that the same short-cut applies
;; to slices and maps: if x and y are the same slice or the same map,
;; they are deeply equal regardless of content.
;; 
;; As DeepEqual traverses the data values it may find a cycle. The
;; second and subsequent times that DeepEqual compares two pointer
;; values that have been compared before, it treats the values as
;; equal rather than examining the values to which they point.
;; This ensures that DeepEqual terminates."
;;   {:added "1.0"
;;    :go "deepEqual(x, y)"}
;;   [^ABEND881(unrecognized Expr type *ast.InterfaceType at: &{10530572 0xc00155ba10 false}) x, ^ABEND881(unrecognized Expr type *ast.InterfaceType at: &{10530572 0xc00155ba10 false}) y])
;; 
JOKER FUNC reflect.FirstMethodNameBytes has: 
;; (defn ^ABEND042(cannot find typename reflect.byte) FirstMethodNameBytes
;;   {:added "1.0"
;;    :go "firstMethodNameBytes(t)"}
;;   [t])
;; 
JOKER FUNC reflect.FuncLayout has: 
(defn ^[frametype argSize retOffset stack gc ptrs] FuncLayout
  {:added "1.0"
   :go "funcLayout(t, rcvr)"}
  [t, rcvr])

JOKER FUNC reflect.FuncOf has: 
;; (defn ^ABEND881(unrecognized Expr type *ast.InterfaceType at: &{10346463 0xc00284e1b0 false}) FuncOf
;;   "FuncOf returns the function type with the given argument and result types.
;; For example if k represents int and e represents string,
;; FuncOf([]Type{k}, []Type{e}, false) represents func(int) string.
;; 
;; The variadic argument controls whether the function is variadic. FuncOf
;; panics if the in[len(in)-1] does not represent a slice and variadic is
;; true."
;;   {:added "1.0"
;;    :go "funcOf(in, out, variadic)"}
;;   [^ABEND881(unrecognized Expr type *ast.ArrayType at: &{10398786 <nil> Type}) in, ^ABEND881(unrecognized Expr type *ast.ArrayType at: &{10398786 <nil> Type}) out, variadic])
;; 
JOKER FUNC reflect.Indirect has: 
;; (defn ^{:typ ^ABEND881(unrecognized Expr type *ast.StarExpr at: &{10447731 rtype}) typ, :ptr ^ABEND881(unrecognized Expr type *ast.SelectorExpr at: &{unsafe Pointer}) ptr} Indirect
;;   "Indirect returns the value that v points to.
;; If v is a nil pointer, Indirect returns a zero Value.
;; If v is not a pointer, Indirect returns v."
;;   {:added "1.0"
;;    :go "indirect(v)"}
;;   [v])
;; 
JOKER FUNC reflect.IsExported has: 
;; (defn ^ABEND042(cannot find typename reflect.bool) IsExported
;;   {:added "1.0"
;;    :go "isExported(t)"}
;;   [t])
;; 
JOKER FUNC reflect.IsRO has: 
;; (defn ^ABEND042(cannot find typename reflect.bool) IsRO
;;   "IsRO reports whether v's read-only flag is set."
;;   {:added "1.0"
;;    :go "isRO(v)"}
;;   [v])
;; 
JOKER FUNC reflect.MakeChan has: 
;; (defn ^{:typ ^ABEND881(unrecognized Expr type *ast.StarExpr at: &{10447731 rtype}) typ, :ptr ^ABEND881(unrecognized Expr type *ast.SelectorExpr at: &{unsafe Pointer}) ptr} MakeChan
;;   "MakeChan creates a new channel with the specified type and buffer size."
;;   {:added "1.0"
;;    :go "makeChan(typ, buffer)"}
;;   [typ, ^Int buffer])
;; 
JOKER FUNC reflect.MakeFunc has: 
;; (defn ^{:typ ^ABEND881(unrecognized Expr type *ast.StarExpr at: &{10447731 rtype}) typ, :ptr ^ABEND881(unrecognized Expr type *ast.SelectorExpr at: &{unsafe Pointer}) ptr} MakeFunc
;;   "MakeFunc returns a new function of the given Type
;; that wraps the function fn. When called, that new function
;; does the following:
;; 
;; 	- converts its arguments to a slice of Values.
;; 	- runs results := fn(args).
;; 	- returns the results as a slice of Values, one per formal result.
;; 
;; The implementation fn can assume that the argument Value slice
;; has the number and type of arguments given by typ.
;; If typ describes a variadic function, the final Value is itself
;; a slice representing the variadic arguments, as in the
;; body of a variadic function. The result Value slice returned by fn
;; must have the number and type of results given by typ.
;; 
;; The Value.Call method allows the caller to invoke a typed function
;; in terms of Values; in contrast, MakeFunc allows the caller to implement
;; a typed function in terms of Values.
;; 
;; The Examples section of the documentation includes an illustration
;; of how to use MakeFunc to build a swap function for different types."
;;   {:added "1.0"
;;    :go "makeFunc(typ, fn)"}
;;   [typ, ^ABEND881(unrecognized Expr type *ast.FuncType at: &{10442971 0xc000e71a40 0xc000e71b90}) fn])
;; 
JOKER FUNC reflect.MakeMap has: 
;; (defn ^{:typ ^ABEND881(unrecognized Expr type *ast.StarExpr at: &{10447731 rtype}) typ, :ptr ^ABEND881(unrecognized Expr type *ast.SelectorExpr at: &{unsafe Pointer}) ptr} MakeMap
;;   "MakeMap creates a new map with the specified type."
;;   {:added "1.0"
;;    :go "makeMap(typ)"}
;;   [typ])
;; 
JOKER FUNC reflect.MakeMapWithSize has: 
;; (defn ^{:typ ^ABEND881(unrecognized Expr type *ast.StarExpr at: &{10447731 rtype}) typ, :ptr ^ABEND881(unrecognized Expr type *ast.SelectorExpr at: &{unsafe Pointer}) ptr} MakeMapWithSize
;;   "MakeMapWithSize creates a new map with the specified type
;; and initial space for approximately n elements."
;;   {:added "1.0"
;;    :go "makeMapWithSize(typ, n)"}
;;   [typ, ^Int n])
;; 
JOKER FUNC reflect.MakeRO has: 
;; (defn ^{:typ ^ABEND881(unrecognized Expr type *ast.StarExpr at: &{10447731 rtype}) typ, :ptr ^ABEND881(unrecognized Expr type *ast.SelectorExpr at: &{unsafe Pointer}) ptr} MakeRO
;;   "MakeRO returns a copy of v with the read-only flag set."
;;   {:added "1.0"
;;    :go "makeRO(v)"}
;;   [v])
;; 
JOKER FUNC reflect.MakeSlice has: 
;; (defn ^{:typ ^ABEND881(unrecognized Expr type *ast.StarExpr at: &{10447731 rtype}) typ, :ptr ^ABEND881(unrecognized Expr type *ast.SelectorExpr at: &{unsafe Pointer}) ptr} MakeSlice
;;   "MakeSlice creates a new zero-initialized slice value
;; for the specified slice type, length, and capacity."
;;   {:added "1.0"
;;    :go "makeSlice(typ, len, cap)"}
;;   [typ, ^Int len, ^Int cap])
;; 
JOKER FUNC reflect.MapBucketOf has: 
;; (defn ^ABEND881(unrecognized Expr type *ast.InterfaceType at: &{10346463 0xc00284e1b0 false}) MapBucketOf
;;   {:added "1.0"
;;    :go "mapBucketOf(x, y)"}
;;   [x, y])
;; 
JOKER FUNC reflect.MapOf has: 
;; (defn ^ABEND881(unrecognized Expr type *ast.InterfaceType at: &{10346463 0xc00284e1b0 false}) MapOf
;;   "MapOf returns the map type with the given key and element types.
;; For example, if k represents int and e represents string,
;; MapOf(k, e) represents map[int]string.
;; 
;; If the key type is not a valid map key type (that is, if it does
;; not implement Go's == operator), MapOf panics."
;;   {:added "1.0"
;;    :go "mapOf(key, elem)"}
;;   [key, elem])
;; 
JOKER FUNC reflect.New has: 
;; (defn ^{:typ ^ABEND881(unrecognized Expr type *ast.StarExpr at: &{10447731 rtype}) typ, :ptr ^ABEND881(unrecognized Expr type *ast.SelectorExpr at: &{unsafe Pointer}) ptr} New
;;   "New returns a Value representing a pointer to a new zero value
;; for the specified type. That is, the returned Value's Type is PtrTo(typ)."
;;   {:added "1.0"
;;    :go "new(typ)"}
;;   [typ])
;; 
JOKER FUNC reflect.NewAt has: 
;; (defn ^{:typ ^ABEND881(unrecognized Expr type *ast.StarExpr at: &{10447731 rtype}) typ, :ptr ^ABEND881(unrecognized Expr type *ast.SelectorExpr at: &{unsafe Pointer}) ptr} NewAt
;;   "NewAt returns a Value representing a pointer to a value of the
;; specified type, using p as that pointer."
;;   {:added "1.0"
;;    :go "newAt(typ, p)"}
;;   [typ, ^ABEND881(unrecognized Expr type *ast.SelectorExpr at: &{unsafe Pointer}) p])
;; 
JOKER FUNC reflect.PtrTo has: 
;; (defn ^ABEND881(unrecognized Expr type *ast.InterfaceType at: &{10346463 0xc00284e1b0 false}) PtrTo
;;   "PtrTo returns the pointer type with element t.
;; For example, if t represents type Foo, PtrTo(t) represents *Foo."
;;   {:added "1.0"
;;    :go "ptrTo(t)"}
;;   [t])
;; 
JOKER FUNC reflect.ResolveReflectName has: 
;; (defn ResolveReflectName
;;   {:added "1.0"
;;    :go "resolveReflectName(s)"}
;;   [^String s])
;; 
JOKER FUNC reflect.Select has: 
;; (defn ^[chosen recv recvOK] Select
;;   "Select executes a select operation described by the list of cases.
;; Like the Go select statement, it blocks until at least one of the cases
;; can proceed, makes a uniform pseudo-random choice,
;; and then executes that case. It returns the index of the chosen case
;; and, if that case was a receive operation, the value received and a
;; boolean indicating whether the value corresponds to a send on the channel
;; (as opposed to a zero value received because the channel is closed)."
;;   {:added "1.0"
;;    :go "select(cases)"}
;;   [^ABEND881(unrecognized Expr type *ast.ArrayType at: &{10507505 <nil> SelectCase}) cases])
;; 
JOKER FUNC reflect.SliceOf has: 
;; (defn ^ABEND881(unrecognized Expr type *ast.InterfaceType at: &{10346463 0xc00284e1b0 false}) SliceOf
;;   "SliceOf returns the slice type with element type t.
;; For example, if t represents int, SliceOf(t) represents []int."
;;   {:added "1.0"
;;    :go "sliceOf(t)"}
;;   [t])
;; 
JOKER FUNC reflect.StructOf has: 
;; (defn ^ABEND881(unrecognized Expr type *ast.InterfaceType at: &{10346463 0xc00284e1b0 false}) StructOf
;;   "StructOf returns the struct type containing fields.
;; The Offset and Index fields are ignored and computed as they would be
;; by the compiler.
;; 
;; StructOf currently does not generate wrapper methods for embedded
;; fields and panics if passed unexported StructFields.
;; These limitations may be lifted in a future version."
;;   {:added "1.0"
;;    :go "structOf(fields)"}
;;   [^ABEND881(unrecognized Expr type *ast.ArrayType at: &{10410405 <nil> StructField}) fields])
;; 
JOKER FUNC reflect.Swapper has: 
;; (defn ^ABEND881(unrecognized Expr type *ast.FuncType at: &{10439669 0xc0010096e0 <nil>}) Swapper
;;   "Swapper returns a function that swaps the elements in the provided
;; slice.
;; 
;; Swapper panics if the provided interface is not a slice."
;;   {:added "1.0"
;;    :go "swapper(slice)"}
;;   [^ABEND881(unrecognized Expr type *ast.InterfaceType at: &{10439656 0xc001008ff0 false}) slice])
;; 
JOKER FUNC reflect.TypeLinks has: 
(defn ^[String] TypeLinks
  {:added "1.0"
   :go "typeLinks()"}
  [])

JOKER FUNC reflect.TypeOf has: 
;; (defn ^ABEND881(unrecognized Expr type *ast.InterfaceType at: &{10346463 0xc00284e1b0 false}) TypeOf
;;   "TypeOf returns the reflection Type that represents the dynamic type of i.
;; If i is a nil interface value, TypeOf returns nil."
;;   {:added "1.0"
;;    :go "typeOf(i)"}
;;   [^ABEND881(unrecognized Expr type *ast.InterfaceType at: &{10384115 0xc001d7fe60 false}) i])
;; 
JOKER FUNC reflect.ValueOf has: 
;; (defn ^{:typ ^ABEND881(unrecognized Expr type *ast.StarExpr at: &{10447731 rtype}) typ, :ptr ^ABEND881(unrecognized Expr type *ast.SelectorExpr at: &{unsafe Pointer}) ptr} ValueOf
;;   "ValueOf returns a new Value initialized to the concrete value
;; stored in the interface i. ValueOf(nil) returns the zero Value."
;;   {:added "1.0"
;;    :go "valueOf(i)"}
;;   [^ABEND881(unrecognized Expr type *ast.InterfaceType at: &{10511619 0xc001720c60 false}) i])
;; 
JOKER FUNC reflect.Zero has: 
;; (defn ^{:typ ^ABEND881(unrecognized Expr type *ast.StarExpr at: &{10447731 rtype}) typ, :ptr ^ABEND881(unrecognized Expr type *ast.SelectorExpr at: &{unsafe Pointer}) ptr} Zero
;;   "Zero returns a Value representing the zero value for the specified type.
;; The result is different from the zero value of the Value struct,
;; which represents no value at all.
;; For example, Zero(TypeOf(42)) returns a Value with Kind Int and value 0.
;; The returned value is neither addressable nor settable."
;;   {:added "1.0"
;;    :go "zero(typ)"}
;;   [typ])
;; 
JOKER FUNC reflect_test.BenchmarkCall has: 
;; (defn BenchmarkCall
;;   {:added "1.0"
;;    :go "benchmarkCall(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{10579033 0xc002aad4e0}) b])
;; 
JOKER FUNC reflect_test.BenchmarkCallArgCopy has: 
;; (defn BenchmarkCallArgCopy
;;   {:added "1.0"
;;    :go "benchmarkCallArgCopy(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{10579260 0xc002aada20}) b])
;; 
JOKER FUNC reflect_test.BenchmarkFieldByName1 has: 
;; (defn BenchmarkFieldByName1
;;   {:added "1.0"
;;    :go "benchmarkFieldByName1(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{10671558 0xc00308a280}) b])
;; 
JOKER FUNC reflect_test.BenchmarkFieldByName2 has: 
;; (defn BenchmarkFieldByName2
;;   {:added "1.0"
;;    :go "benchmarkFieldByName2(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{10671709 0xc00308a5e0}) b])
;; 
JOKER FUNC reflect_test.BenchmarkFieldByName3 has: 
;; (defn BenchmarkFieldByName3
;;   {:added "1.0"
;;    :go "benchmarkFieldByName3(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{10672533 0xc00308b9e0}) b])
;; 
JOKER FUNC reflect_test.BenchmarkInterfaceBig has: 
;; (defn BenchmarkInterfaceBig
;;   {:added "1.0"
;;    :go "benchmarkInterfaceBig(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{10672723 0xc00308be00}) b])
;; 
JOKER FUNC reflect_test.BenchmarkInterfaceSmall has: 
;; (defn BenchmarkInterfaceSmall
;;   {:added "1.0"
;;    :go "benchmarkInterfaceSmall(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{10673137 0xc002f48620}) b])
;; 
JOKER FUNC reflect_test.BenchmarkNew has: 
;; (defn BenchmarkNew
;;   {:added "1.0"
;;    :go "benchmarkNew(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{10702658 0xc003a06180}) b])
;; 
JOKER FUNC reflect_test.BenchmarkPtrTo has: 
;; (defn BenchmarkPtrTo
;;   {:added "1.0"
;;    :go "benchmarkPtrTo(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{10603058 0xc002d487a0}) b])
;; 
JOKER FUNC reflect_test.EmptyInterfaceV has: 
;; (defn ^ABEND042(cannot find typename reflect_test.Value) EmptyInterfaceV
;;   {:added "1.0"
;;    :go "emptyInterfaceV(x)"}
;;   [^ABEND881(unrecognized Expr type *ast.InterfaceType at: &{10620673 0xc002a66bd0 false}) x])
;; 
JOKER FUNC reflect_test.ExampleMakeFunc has: 
;; (defn ExampleMakeFunc
;;   {:added "1.0"
;;    :go "exampleMakeFunc()"}
;;   [])
;; 
JOKER FUNC reflect_test.ExampleStructOf has: 
;; (defn ExampleStructOf
;;   {:added "1.0"
;;    :go "exampleStructOf()"}
;;   [])
;; 
JOKER FUNC reflect_test.ExampleStructTag has: 
;; (defn ExampleStructTag
;;   {:added "1.0"
;;    :go "exampleStructTag()"}
;;   [])
;; 
JOKER FUNC reflect_test.ExampleStructTag_Lookup has: 
;; (defn ExampleStructTag_Lookup
;;   {:added "1.0"
;;    :go "exampleStructTag_Lookup()"}
;;   [])
;; 
JOKER FUNC reflect_test.ExampleTypeOf has: 
;; (defn ExampleTypeOf
;;   {:added "1.0"
;;    :go "exampleTypeOf()"}
;;   [])
;; 
JOKER FUNC reflect_test.GCFunc has: 
;; (defn ^[ABEND042(cannot find typename reflect_test.Value)] GCFunc
;;   {:added "1.0"
;;    :go "gCFunc(args)"}
;;   [^ABEND881(unrecognized Expr type *ast.ArrayType at: &{10675411 <nil> Value}) args])
;; 
JOKER FUNC reflect_test.Nil has: 
;; (defn Nil
;;   {:added "1.0"
;;    :go "nil(a, t)"}
;;   [^ABEND881(unrecognized Expr type *ast.InterfaceType at: &{10561455 0xc0024b0960 false}) a, ^ABEND881(unrecognized Expr type *ast.StarExpr at: &{10561470 0xc0014f6080}) t])
;; 
JOKER FUNC reflect_test.NotNil has: 
;; (defn NotNil
;;   {:added "1.0"
;;    :go "notNil(a, t)"}
;;   [^ABEND881(unrecognized Expr type *ast.InterfaceType at: &{10561581 0xc0024b14a0 false}) a, ^ABEND881(unrecognized Expr type *ast.StarExpr at: &{10561596 0xc0014f63c0}) t])
;; 
JOKER FUNC reflect_test.ReadWriterV has: 
;; (defn ^ABEND042(cannot find typename reflect_test.Value) ReadWriterV
;;   {:added "1.0"
;;    :go "readWriterV(x)"}
;;   [^ABEND881(unrecognized Expr type *ast.SelectorExpr at: &{io ReadWriter}) x])
;; 
JOKER FUNC reflect_test.ReaderV has: 
;; (defn ^ABEND042(cannot find typename reflect_test.Value) ReaderV
;;   {:added "1.0"
;;    :go "readerV(x)"}
;;   [^ABEND881(unrecognized Expr type *ast.SelectorExpr at: &{io Reader}) x])
;; 
JOKER FUNC reflect_test.TestAddr has: 
;; (defn TestAddr
;;   {:added "1.0"
;;    :go "testAddr(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{10603609 0xc002d48fc0}) t])
;; 
JOKER FUNC reflect_test.TestAlias has: 
;; (defn TestAlias
;;   {:added "1.0"
;;    :go "testAlias(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{10620363 0xc0032804a0}) t])
;; 
JOKER FUNC reflect_test.TestAliasNames has: 
;; (defn TestAliasNames
;;   {:added "1.0"
;;    :go "testAliasNames(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{10704819 0xc003a41000}) t])
;; 
JOKER FUNC reflect_test.TestAlignment has: 
;; (defn TestAlignment
;;   "Check that structure alignment & offsets viewed through reflect agree with those
;; from the compiler itself."
;;   {:added "1.0"
;;    :go "testAlignment(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{10561059 0xc00498f680}) t])
;; 
JOKER FUNC reflect_test.TestAll has: 
;; (defn TestAll
;;   {:added "1.0"
;;    :go "testAll(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{10548634 0xc00486eae0}) t])
;; 
JOKER FUNC reflect_test.TestAllocations has: 
;; (defn TestAllocations
;;   {:added "1.0"
;;    :go "testAllocations(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{10605222 0xc002e02e80}) t])
;; 
JOKER FUNC reflect_test.TestAllocsInterfaceBig has: 
;; (defn TestAllocsInterfaceBig
;;   {:added "1.0"
;;    :go "testAllocsInterfaceBig(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{10672885 0xc002f481a0}) t])
;; 
JOKER FUNC reflect_test.TestAllocsInterfaceSmall has: 
;; (defn TestAllocsInterfaceSmall
;;   {:added "1.0"
;;    :go "testAllocsInterfaceSmall(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{10673291 0xc002f48980}) t])
;; 
JOKER FUNC reflect_test.TestAnonymousFields has: 
;; (defn TestAnonymousFields
;;   {:added "1.0"
;;    :go "testAnonymousFields(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{10593308 0xc0025b1740}) t])
;; 
JOKER FUNC reflect_test.TestAppend has: 
;; (defn TestAppend
;;   {:added "1.0"
;;    :go "testAppend(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{10551033 0xc0048852e0}) t])
;; 
JOKER FUNC reflect_test.TestArrayElemSet has: 
;; (defn TestArrayElemSet
;;   {:added "1.0"
;;    :go "testArrayElemSet(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{10547431 0xc00483dda0}) t])
;; 
JOKER FUNC reflect_test.TestArrayOf has: 
;; (defn TestArrayOf
;;   {:added "1.0"
;;    :go "testArrayOf(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{10638192 0xc002cf7dc0}) t])
;; 
JOKER FUNC reflect_test.TestArrayOfAlg has: 
;; (defn TestArrayOfAlg
;;   {:added "1.0"
;;    :go "testArrayOfAlg(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{10642329 0xc0022dc280}) t])
;; 
JOKER FUNC reflect_test.TestArrayOfDirectIface has: 
;; (defn TestArrayOfDirectIface
;;   {:added "1.0"
;;    :go "testArrayOfDirectIface(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{10643821 0xc00259e3c0}) t])
;; 
JOKER FUNC reflect_test.TestArrayOfGC has: 
;; (defn TestArrayOfGC
;;   {:added "1.0"
;;    :go "testArrayOfGC(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{10641766 0xc0030ff400}) t])
;; 
JOKER FUNC reflect_test.TestArrayOfGenericAlg has: 
;; (defn TestArrayOfGenericAlg
;;   {:added "1.0"
;;    :go "testArrayOfGenericAlg(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{10642854 0xc0022dcd80}) t])
;; 
JOKER FUNC reflect_test.TestAssignableTo has: 
;; (defn TestAssignableTo
;;   {:added "1.0"
;;    :go "testAssignableTo(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{10538608 0xc0047caf00}) t])
;; 
JOKER FUNC reflect_test.TestBigStruct has: 
;; (defn TestBigStruct
;;   {:added "1.0"
;;    :go "testBigStruct(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{10555639 0xc004904a60}) t])
;; 
JOKER FUNC reflect_test.TestBigUnnamedStruct has: 
;; (defn TestBigUnnamedStruct
;;   {:added "1.0"
;;    :go "testBigUnnamedStruct(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{10555320 0xc0048d01a0}) t])
;; 
JOKER FUNC reflect_test.TestBigZero has: 
;; (defn TestBigZero
;;   {:added "1.0"
;;    :go "testBigZero(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{10675827 0xc002f8d240}) t])
;; 
JOKER FUNC reflect_test.TestBool has: 
;; (defn TestBool
;;   {:added "1.0"
;;    :go "testBool(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{10539324 0xc0047cc520}) t])
;; 
JOKER FUNC reflect_test.TestBytes has: 
;; (defn TestBytes
;;   {:added "1.0"
;;    :go "testBytes(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{10611553 0xc003081240}) t])
;; 
JOKER FUNC reflect_test.TestCallConvert has: 
;; (defn TestCallConvert
;;   {:added "1.0"
;;    :go "testCallConvert(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{10577035 0xc002717140}) t])
;; 
JOKER FUNC reflect_test.TestCallGC has: 
;; (defn TestCallGC
;;   "Issue 9179."
;;   {:added "1.0"
;;    :go "testCallGC(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{10682107 0xc002f57680}) t])
;; 
JOKER FUNC reflect_test.TestCallMethodJump has: 
;; (defn TestCallMethodJump
;;   {:added "1.0"
;;    :go "testCallMethodJump(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{10679499 0xc002f96aa0}) t])
;; 
JOKER FUNC reflect_test.TestCallPanic has: 
;; (defn TestCallPanic
;;   {:added "1.0"
;;    :go "testCallPanic(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{10617515 0xc00316be60}) t])
;; 
JOKER FUNC reflect_test.TestCallReturnsEmpty has: 
;; (defn TestCallReturnsEmpty
;;   {:added "1.0"
;;    :go "testCallReturnsEmpty(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{10578368 0xc002aaca20}) t])
;; 
JOKER FUNC reflect_test.TestCallWithStruct has: 
;; (defn TestCallWithStruct
;;   {:added "1.0"
;;    :go "testCallWithStruct(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{10577645 0xc002717cc0}) t])
;; 
JOKER FUNC reflect_test.TestCanSetField has: 
;; (defn TestCanSetField
;;   {:added "1.0"
;;    :go "testCanSetField(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{10545166 0xc004803ea0}) t])
;; 
JOKER FUNC reflect_test.TestChan has: 
;; (defn TestChan
;;   {:added "1.0"
;;    :go "testChan(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{10565110 0xc001bca800}) t])
;; 
JOKER FUNC reflect_test.TestChanAlloc has: 
;; (defn TestChanAlloc
;;   {:added "1.0"
;;    :go "testChanAlloc(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{10698751 0xc0039be4e0}) t])
;; 
JOKER FUNC reflect_test.TestChanOf has: 
;; (defn TestChanOf
;;   {:added "1.0"
;;    :go "testChanOf(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{10664880 0xc0030c83c0}) t])
;; 
JOKER FUNC reflect_test.TestChanOfDir has: 
;; (defn TestChanOfDir
;;   {:added "1.0"
;;    :go "testChanOfDir(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{10665477 0xc0030c8f80}) t])
;; 
JOKER FUNC reflect_test.TestChanOfGC has: 
;; (defn TestChanOfGC
;;   {:added "1.0"
;;    :go "testChanOfGC(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{10666129 0xc0030c9ac0}) t])
;; 
JOKER FUNC reflect_test.TestComparable has: 
;; (defn TestComparable
;;   {:added "1.0"
;;    :go "testComparable(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{10636516 0xc002c6ff00}) t])
;; 
JOKER FUNC reflect_test.TestConvert has: 
;; (defn TestConvert
;;   {:added "1.0"
;;    :go "testConvert(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{10633250 0xc0026beba0}) t])
;; 
JOKER FUNC reflect_test.TestCopy has: 
;; (defn TestCopy
;;   {:added "1.0"
;;    :go "testCopy(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{10552441 0xc0048a13a0}) t])
;; 
JOKER FUNC reflect_test.TestCopyArray has: 
;; (defn TestCopyArray
;;   {:added "1.0"
;;    :go "testCopyArray(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{10554824 0xc0048ba580}) t])
;; 
JOKER FUNC reflect_test.TestCopyString has: 
;; (defn TestCopyString
;;   {:added "1.0"
;;    :go "testCopyString(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{10553391 0xc0048ad480}) t])
;; 
JOKER FUNC reflect_test.TestDeepEqual has: 
;; (defn TestDeepEqual
;;   {:added "1.0"
;;    :go "testDeepEqual(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{10558608 0xc00493e0a0}) t])
;; 
JOKER FUNC reflect_test.TestDeepEqualComplexStruct has: 
;; (defn TestDeepEqualComplexStruct
;;   {:added "1.0"
;;    :go "testDeepEqualComplexStruct(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{10559637 0xc0049555a0}) t])
;; 
JOKER FUNC reflect_test.TestDeepEqualComplexStructInequality has: 
;; (defn TestDeepEqualComplexStructInequality
;;   {:added "1.0"
;;    :go "testDeepEqualComplexStructInequality(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{10559984 0xc00498e2a0}) t])
;; 
JOKER FUNC reflect_test.TestDeepEqualRecursiveStruct has: 
;; (defn TestDeepEqualRecursiveStruct
;;   {:added "1.0"
;;    :go "testDeepEqualRecursiveStruct(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{10559333 0xc00493efc0}) t])
;; 
JOKER FUNC reflect_test.TestDeepEqualUnexportedMap has: 
;; (defn TestDeepEqualUnexportedMap
;;   {:added "1.0"
;;    :go "testDeepEqualUnexportedMap(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{10560387 0xc00498eb80}) t])
;; 
JOKER FUNC reflect_test.TestEmbed has: 
;; (defn TestEmbed
;;   {:added "1.0"
;;    :go "testEmbed(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{10672358 0xc00308b680}) t])
;; 
JOKER FUNC reflect_test.TestEmbeddedMethods has: 
;; (defn TestEmbeddedMethods
;;   {:added "1.0"
;;    :go "testEmbeddedMethods(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{10601204 0xc002c07ec0}) t])
;; 
JOKER FUNC reflect_test.TestExported has: 
;; (defn TestExported
;;   {:added "1.0"
;;    :go "testExported(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{10700611 0xc0039bf9c0}) t])
;; 
JOKER FUNC reflect_test.TestFieldByIndex has: 
;; (defn TestFieldByIndex
;;   {:added "1.0"
;;    :go "testFieldByIndex(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{10595310 0xc0026ee3c0}) t])
;; 
JOKER FUNC reflect_test.TestFieldByIndexNil has: 
;; (defn TestFieldByIndexNil
;;   {:added "1.0"
;;    :go "testFieldByIndexNil(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{10676072 0xc002f8d720}) t])
;; 
JOKER FUNC reflect_test.TestFieldByName has: 
;; (defn TestFieldByName
;;   {:added "1.0"
;;    :go "testFieldByName(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{10596148 0xc0026ef620}) t])
;; 
JOKER FUNC reflect_test.TestFieldPkgPath has: 
;; (defn TestFieldPkgPath
;;   {:added "1.0"
;;    :go "testFieldPkgPath(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{10598406 0xc002bbe840}) t])
;; 
JOKER FUNC reflect_test.TestFunc has: 
;; (defn TestFunc
;;   {:added "1.0"
;;    :go "testFunc(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{10576233 0xc0027160a0}) t])
;; 
JOKER FUNC reflect_test.TestFuncArg has: 
;; (defn TestFuncArg
;;   {:added "1.0"
;;    :go "testFuncArg(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{10610203 0xc002fb5a20}) t])
;; 
JOKER FUNC reflect_test.TestFuncLayout has: 
;; (defn TestFuncLayout
;;   {:added "1.0"
;;    :go "testFuncLayout(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{10687074 0xc00382c740}) t])
;; 
JOKER FUNC reflect_test.TestFuncOf has: 
;; (defn TestFuncOf
;;   {:added "1.0"
;;    :go "testFuncOf(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{10669654 0xc003313e40}) t])
;; 
JOKER FUNC reflect_test.TestFunctionValue has: 
;; (defn TestFunctionValue
;;   {:added "1.0"
;;    :go "testFunctionValue(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{10550525 0xc004884780}) t])
;; 
JOKER FUNC reflect_test.TestGCBits has: 
;; (defn TestGCBits
;;   {:added "1.0"
;;    :go "testGCBits(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{10689007 0xc003848b40}) t])
;; 
JOKER FUNC reflect_test.TestImplements has: 
;; (defn TestImplements
;;   {:added "1.0"
;;    :go "testImplements(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{10537938 0xc0047ca160}) t])
;; 
JOKER FUNC reflect_test.TestImplicitAppendConversion has: 
;; (defn TestImplicitAppendConversion
;;   {:added "1.0"
;;    :go "testImplicitAppendConversion(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{10536932 0xc0047c2ae0}) t])
;; 
JOKER FUNC reflect_test.TestImplicitCallConversion has: 
;; (defn TestImplicitCallConversion
;;   {:added "1.0"
;;    :go "testImplicitCallConversion(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{10536609 0xc0047c25a0}) t])
;; 
JOKER FUNC reflect_test.TestImplicitMapConversion has: 
;; (defn TestImplicitMapConversion
;;   {:added "1.0"
;;    :go "testImplicitMapConversion(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{10533270 0xc00477fda0}) t])
;; 
JOKER FUNC reflect_test.TestImplicitSendConversion has: 
;; (defn TestImplicitSendConversion
;;   {:added "1.0"
;;    :go "testImplicitSendConversion(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{10536407 0xc0047b9a40}) t])
;; 
JOKER FUNC reflect_test.TestImplicitSetConversion has: 
;; (defn TestImplicitSetConversion
;;   {:added "1.0"
;;    :go "testImplicitSetConversion(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{10536099 0xc0047b9220}) t])
;; 
JOKER FUNC reflect_test.TestImportPath has: 
;; (defn TestImportPath
;;   {:added "1.0"
;;    :go "testImportPath(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{10597270 0xc002b5cde0}) t])
;; 
JOKER FUNC reflect_test.TestIndex has: 
;; (defn TestIndex
;;   {:added "1.0"
;;    :go "testIndex(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{10605882 0xc002e03840}) t])
;; 
JOKER FUNC reflect_test.TestInterfaceExtraction has: 
;; (defn TestInterfaceExtraction
;;   {:added "1.0"
;;    :go "testInterfaceExtraction(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{10562713 0xc0014f7c60}) t])
;; 
JOKER FUNC reflect_test.TestInterfaceGet has: 
;; (defn TestInterfaceGet
;;   {:added "1.0"
;;    :go "testInterfaceGet(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{10549862 0xc00487ef60}) t])
;; 
JOKER FUNC reflect_test.TestInterfaceSet has: 
;; (defn TestInterfaceSet
;;   {:added "1.0"
;;    :go "testInterfaceSet(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{10592764 0xc0025b0a40}) t])
;; 
JOKER FUNC reflect_test.TestInterfaceValue has: 
;; (defn TestInterfaceValue
;;   {:added "1.0"
;;    :go "testInterfaceValue(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{10550142 0xc00487f5e0}) t])
;; 
JOKER FUNC reflect_test.TestInvalid has: 
;; (defn TestInvalid
;;   {:added "1.0"
;;    :go "testInvalid(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{10680800 0xc002f97fa0}) t])
;; 
JOKER FUNC reflect_test.TestIsNil has: 
;; (defn TestIsNil
;;   {:added "1.0"
;;    :go "testIsNil(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{10561752 0xc0014f6740}) t])
;; 
JOKER FUNC reflect_test.TestIssue22031 has: 
;; (defn TestIssue22031
;;   {:added "1.0"
;;    :go "testIssue22031(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{10705302 0xc003a41800}) t])
;; 
JOKER FUNC reflect_test.TestIssue22073 has: 
;; (defn TestIssue22073
;;   {:added "1.0"
;;    :go "testIssue22073(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{10705782 0xc003a56120}) t])
;; 
JOKER FUNC reflect_test.TestKeepFuncLive has: 
;; (defn TestKeepFuncLive
;;   "Issue 18635 (function version)."
;;   {:added "1.0"
;;    :go "testKeepFuncLive(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{10682448 0xc002f57d80}) t])
;; 
JOKER FUNC reflect_test.TestKeepMethodLive has: 
;; (defn TestKeepMethodLive
;;   {:added "1.0"
;;    :go "testKeepMethodLive(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{10684119 0xc0037a7560}) t])
;; 
JOKER FUNC reflect_test.TestLargeGCProg has: 
;; (defn TestLargeGCProg
;;   "Issue 8917."
;;   {:added "1.0"
;;    :go "testLargeGCProg(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{10681285 0xc002f567a0}) t])
;; 
JOKER FUNC reflect_test.TestMakeFunc has: 
;; (defn TestMakeFunc
;;   {:added "1.0"
;;    :go "testMakeFunc(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{10580014 0xc002394b00}) t])
;; 
JOKER FUNC reflect_test.TestMakeFuncInterface has: 
;; (defn TestMakeFuncInterface
;;   {:added "1.0"
;;    :go "testMakeFuncInterface(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{10580671 0xc002395780}) t])
;; 
JOKER FUNC reflect_test.TestMakeFuncStackCopy has: 
;; (defn TestMakeFuncStackCopy
;;   {:added "1.0"
;;    :go "testMakeFuncStackCopy(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{10679903 0xc002f96fc0}) t])
;; 
JOKER FUNC reflect_test.TestMakeFuncVariadic has: 
;; (defn TestMakeFuncVariadic
;;   {:added "1.0"
;;    :go "testMakeFuncVariadic(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{10581178 0xc002420280}) t])
;; 
JOKER FUNC reflect_test.TestMap has: 
;; (defn TestMap
;;   {:added "1.0"
;;    :go "testMap(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{10563080 0xc001a1a4c0}) t])
;; 
JOKER FUNC reflect_test.TestMapAlloc has: 
;; (defn TestMapAlloc
;;   {:added "1.0"
;;    :go "testMapAlloc(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{10697711 0xc00398f840}) t])
;; 
JOKER FUNC reflect_test.TestMapOf has: 
;; (defn TestMapOf
;;   {:added "1.0"
;;    :go "testMapOf(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{10667127 0xc003052dc0}) t])
;; 
JOKER FUNC reflect_test.TestMapOfGCKeys has: 
;; (defn TestMapOfGCKeys
;;   {:added "1.0"
;;    :go "testMapOfGCKeys(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{10667727 0xc003053880}) t])
;; 
JOKER FUNC reflect_test.TestMapOfGCValues has: 
;; (defn TestMapOfGCValues
;;   {:added "1.0"
;;    :go "testMapOfGCValues(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{10668628 0xc003312a20}) t])
;; 
JOKER FUNC reflect_test.TestMapSetNil has: 
;; (defn TestMapSetNil
;;   {:added "1.0"
;;    :go "testMapSetNil(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{10548455 0xc00486e240}) t])
;; 
JOKER FUNC reflect_test.TestMethod has: 
;; (defn TestMethod
;;   {:added "1.0"
;;    :go "testMethod(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{10582989 0xc0024e89c0}) t])
;; 
JOKER FUNC reflect_test.TestMethod5 has: 
;; (defn TestMethod5
;;   {:added "1.0"
;;    :go "testMethod5(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{10591269 0xc0022fc540}) t])
;; 
JOKER FUNC reflect_test.TestMethodByNameUnExportedFirst has: 
;; (defn TestMethodByNameUnExportedFirst
;;   "Issue 21177"
;;   {:added "1.0"
;;    :go "testMethodByNameUnExportedFirst(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{10683515 0xc0037a6b00}) t])
;; 
JOKER FUNC reflect_test.TestMethodValue has: 
;; (defn TestMethodValue
;;   {:added "1.0"
;;    :go "testMethodValue(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{10586231 0xc001450680}) t])
;; 
JOKER FUNC reflect_test.TestNameBytesAreAligned has: 
;; (defn TestNameBytesAreAligned
;;   {:added "1.0"
;;    :go "testNameBytesAreAligned(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{10701359 0xc0039da8e0}) t])
;; 
JOKER FUNC reflect_test.TestNames has: 
;; (defn TestNames
;;   {:added "1.0"
;;    :go "testNames(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{10700401 0xc0039bf500}) t])
;; 
JOKER FUNC reflect_test.TestNestedMethods has: 
;; (defn TestNestedMethods
;;   {:added "1.0"
;;    :go "testNestedMethods(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{10600360 0xc002c06c00}) t])
;; 
JOKER FUNC reflect_test.TestNilMap has: 
;; (defn TestNilMap
;;   {:added "1.0"
;;    :go "testNilMap(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{10564456 0xc001a1be40}) t])
;; 
JOKER FUNC reflect_test.TestNilPtrValueSub has: 
;; (defn TestNilPtrValueSub
;;   {:added "1.0"
;;    :go "testNilPtrValueSub(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{10562936 0xc001a1a1e0}) t])
;; 
JOKER FUNC reflect_test.TestNumMethodOnDDD has: 
;; (defn TestNumMethodOnDDD
;;   {:added "1.0"
;;    :go "testNumMethodOnDDD(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{10601971 0xc002d2d180}) t])
;; 
JOKER FUNC reflect_test.TestOffsetLock has: 
;; (defn TestOffsetLock
;;   {:added "1.0"
;;    :go "testOffsetLock(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{10702404 0xc0039dbba0}) t])
;; 
JOKER FUNC reflect_test.TestOverflow has: 
;; (defn TestOverflow
;;   {:added "1.0"
;;    :go "testOverflow(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{10636716 0xc002cf6340}) t])
;; 
JOKER FUNC reflect_test.TestPtrPointTo has: 
;; (defn TestPtrPointTo
;;   {:added "1.0"
;;    :go "testPtrPointTo(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{10547928 0xc00486a7e0}) t])
;; 
JOKER FUNC reflect_test.TestPtrSetNil has: 
;; (defn TestPtrSetNil
;;   {:added "1.0"
;;    :go "testPtrSetNil(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{10548260 0xc00486bd80}) t])
;; 
JOKER FUNC reflect_test.TestPtrTo has: 
;; (defn TestPtrTo
;;   {:added "1.0"
;;    :go "testPtrTo(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{10602113 0xc002d2d4a0}) t])
;; 
JOKER FUNC reflect_test.TestPtrToGC has: 
;; (defn TestPtrToGC
;;   {:added "1.0"
;;    :go "testPtrToGC(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{10602573 0xc002d2dbe0}) t])
;; 
JOKER FUNC reflect_test.TestPtrToMethods has: 
;; (defn TestPtrToMethods
;;   {:added "1.0"
;;    :go "testPtrToMethods(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{10697526 0xc00398f480}) t])
;; 
JOKER FUNC reflect_test.TestReflectFuncTraceback has: 
;; (defn TestReflectFuncTraceback
;;   {:added "1.0"
;;    :go "testReflectFuncTraceback(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{10675497 0xc002f8cb00}) t])
;; 
JOKER FUNC reflect_test.TestReflectMethodTraceback has: 
;; (defn TestReflectMethodTraceback
;;   {:added "1.0"
;;    :go "testReflectMethodTraceback(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{10675609 0xc002f8cd40}) t])
;; 
JOKER FUNC reflect_test.TestSelect has: 
;; (defn TestSelect
;;   {:added "1.0"
;;    :go "testSelect(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{10567522 0xc001bd7540}) t])
;; 
JOKER FUNC reflect_test.TestSet has: 
;; (defn TestSet
;;   {:added "1.0"
;;    :go "testSet(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{10543421 0xc0047f1180}) t])
;; 
JOKER FUNC reflect_test.TestSetBytes has: 
;; (defn TestSetBytes
;;   {:added "1.0"
;;    :go "testSetBytes(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{10611800 0xc0030818e0}) t])
;; 
JOKER FUNC reflect_test.TestSetLenCap has: 
;; (defn TestSetLenCap
;;   {:added "1.0"
;;    :go "testSetLenCap(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{10608738 0xc002f13bc0}) t])
;; 
JOKER FUNC reflect_test.TestSetPanic has: 
;; (defn TestSetPanic
;;   {:added "1.0"
;;    :go "testSetPanic(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{10613651 0xc003138940}) t])
;; 
JOKER FUNC reflect_test.TestSetValue has: 
;; (defn TestSetValue
;;   {:added "1.0"
;;    :go "testSetValue(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{10544208 0xc0047fd600}) t])
;; 
JOKER FUNC reflect_test.TestSlice has: 
;; (defn TestSlice
;;   {:added "1.0"
;;    :go "testSlice(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{10606374 0xc002e3c3e0}) t])
;; 
JOKER FUNC reflect_test.TestSlice3 has: 
;; (defn TestSlice3
;;   {:added "1.0"
;;    :go "testSlice3(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{10607401 0xc002e3dbc0}) t])
;; 
JOKER FUNC reflect_test.TestSliceOf has: 
;; (defn TestSliceOf
;;   {:added "1.0"
;;    :go "testSliceOf(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{10644597 0xc00259f440}) t])
;; 
JOKER FUNC reflect_test.TestSliceOfGC has: 
;; (defn TestSliceOfGC
;;   {:added "1.0"
;;    :go "testSliceOfGC(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{10645656 0xc002c9e7a0}) t])
;; 
JOKER FUNC reflect_test.TestSliceOverflow has: 
;; (defn TestSliceOverflow
;;   {:added "1.0"
;;    :go "testSliceOverflow(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{10645234 0xc002c9e000}) t])
;; 
JOKER FUNC reflect_test.TestSmallNegativeInt has: 
;; (defn TestSmallNegativeInt
;;   {:added "1.0"
;;    :go "testSmallNegativeInt(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{10605741 0xc002e034c0}) t])
;; 
JOKER FUNC reflect_test.TestStructArg has: 
;; (defn TestStructArg
;;   {:added "1.0"
;;    :go "testStructArg(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{10610480 0xc0030800c0}) t])
;; 
JOKER FUNC reflect_test.TestStructOf has: 
;; (defn TestStructOf
;;   {:added "1.0"
;;    :go "testStructOf(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{10647291 0xc003140420}) t])
;; 
JOKER FUNC reflect_test.TestStructOfAlg has: 
;; (defn TestStructOfAlg
;;   {:added "1.0"
;;    :go "testStructOfAlg(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{10655490 0xc0020b4b00}) t])
;; 
JOKER FUNC reflect_test.TestStructOfDirectIface has: 
;; (defn TestStructOfDirectIface
;;   {:added "1.0"
;;    :go "testStructOfDirectIface(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{10659218 0xc002f273c0}) t])
;; 
JOKER FUNC reflect_test.TestStructOfExportRules has: 
;; (defn TestStructOfExportRules
;;   {:added "1.0"
;;    :go "testStructOfExportRules(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{10650529 0xc003173840}) t])
;; 
JOKER FUNC reflect_test.TestStructOfFieldName has: 
;; (defn TestStructOfFieldName
;;   {:added "1.0"
;;    :go "testStructOfFieldName(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{10646238 0xc002c9f640}) t])
;; 
JOKER FUNC reflect_test.TestStructOfGC has: 
;; (defn TestStructOfGC
;;   {:added "1.0"
;;    :go "testStructOfGC(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{10654817 0xc003187ac0}) t])
;; 
JOKER FUNC reflect_test.TestStructOfGenericAlg has: 
;; (defn TestStructOfGenericAlg
;;   {:added "1.0"
;;    :go "testStructOfGenericAlg(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{10656127 0xc0020b57e0}) t])
;; 
JOKER FUNC reflect_test.TestStructOfWithInterface has: 
;; (defn TestStructOfWithInterface
;;   {:added "1.0"
;;    :go "testStructOfWithInterface(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{10660576 0xc002102ee0}) t])
;; 
JOKER FUNC reflect_test.TestSwapper has: 
;; (defn TestSwapper
;;   {:added "1.0"
;;    :go "testSwapper(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{10702787 0xc003a064a0}) t])
;; 
JOKER FUNC reflect_test.TestTagGet has: 
;; (defn TestTagGet
;;   {:added "1.0"
;;    :go "testTagGet(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{10611348 0xc003080d40}) t])
;; 
JOKER FUNC reflect_test.TestTypeFieldOutOfRangePanic has: 
;; (defn TestTypeFieldOutOfRangePanic
;;   "Issue 15046."
;;   {:added "1.0"
;;    :go "testTypeFieldOutOfRangePanic(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{10681564 0xc002f56cc0}) t])
;; 
JOKER FUNC reflect_test.TestTypeOf has: 
;; (defn TestTypeOf
;;   {:added "1.0"
;;    :go "testTypeOf(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{10558865 0xc00493e740}) t])
;; 
JOKER FUNC reflect_test.TestTypeOfTypeOf has: 
;; (defn TestTypeOfTypeOf
;;   {:added "1.0"
;;    :go "testTypeOfTypeOf(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{10696636 0xc00398e820}) t])
;; 
JOKER FUNC reflect_test.TestTypeStrings has: 
;; (defn TestTypeStrings
;;   {:added "1.0"
;;    :go "testTypeStrings(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{10701596 0xc0039dad40}) t])
;; 
JOKER FUNC reflect_test.TestTypelinksSorted has: 
;; (defn TestTypelinksSorted
;;   {:added "1.0"
;;    :go "testTypelinksSorted(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{10669463 0xc003313a80}) t])
;; 
JOKER FUNC reflect_test.TestTypes has: 
;; (defn TestTypes
;;   {:added "1.0"
;;    :go "testTypes(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{10543300 0xc0047ea220}) t])
;; 
JOKER FUNC reflect_test.TestUnaddressableField has: 
;; (defn TestUnaddressableField
;;   "TestUnaddressableField tests that the reflect package will not allow
;; a type from another package to be used as a named type with an
;; unexported field.
;; 
;; This ensures that unexported fields cannot be modified by other packages."
;;   {:added "1.0"
;;    :go "testUnaddressableField(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{10704455 0xc003a40a20}) t])
;; 
JOKER FUNC reflect_test.TestUnexported has: 
;; (defn TestUnexported
;;   {:added "1.0"
;;    :go "testUnexported(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{10612323 0xc00310a660}) t])
;; 
JOKER FUNC reflect_test.TestUnexportedMethods has: 
;; (defn TestUnexportedMethods
;;   {:added "1.0"
;;    :go "testUnexportedMethods(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{10600916 0xc002c07980}) t])
;; 
JOKER FUNC reflect_test.TestValueString has: 
;; (defn TestValueString
;;   {:added "1.0"
;;    :go "testValueString(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{10680426 0xc002f97a60}) t])
;; 
JOKER FUNC reflect_test.TestValueToString has: 
;; (defn TestValueToString
;;   {:added "1.0"
;;    :go "testValueToString(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{10547230 0xc00483d980}) t])
;; 
JOKER FUNC reflect_test.TestVariadic has: 
;; (defn TestVariadic
;;   {:added "1.0"
;;    :go "testVariadic(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{10609709 0xc002fb5000}) t])
;; 
JOKER FUNC reflect_test.TestVariadicMethodValue has: 
;; (defn TestVariadicMethodValue
;;   {:added "1.0"
;;    :go "testVariadicMethodValue(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{10589192 0xc001525a20}) t])
;; 
JOKER FUNC reflect_test.TestVariadicType has: 
;; (defn TestVariadicType
;;   {:added "1.0"
;;    :go "testVariadicType(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{10599724 0xc002bbff00}) t])
;; 
JOKER FUNC regexp.BenchmarkAnchoredLiteralLongNonMatch has: 
;; (defn BenchmarkAnchoredLiteralLongNonMatch
;;   {:added "1.0"
;;    :go "benchmarkAnchoredLiteralLongNonMatch(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{10821205 0xc004977ce0}) b])
;; 
JOKER FUNC regexp.BenchmarkAnchoredLiteralShortNonMatch has: 
;; (defn BenchmarkAnchoredLiteralShortNonMatch
;;   {:added "1.0"
;;    :go "benchmarkAnchoredLiteralShortNonMatch(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{10820993 0xc0049778e0}) b])
;; 
JOKER FUNC regexp.BenchmarkAnchoredLongMatch has: 
;; (defn BenchmarkAnchoredLongMatch
;;   {:added "1.0"
;;    :go "benchmarkAnchoredLongMatch(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{10821662 0xc003480640}) b])
;; 
JOKER FUNC regexp.BenchmarkAnchoredShortMatch has: 
;; (defn BenchmarkAnchoredShortMatch
;;   {:added "1.0"
;;    :go "benchmarkAnchoredShortMatch(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{10821460 0xc003480240}) b])
;; 
JOKER FUNC regexp.BenchmarkCompileOnepass has: 
;; (defn BenchmarkCompileOnepass
;;   {:added "1.0"
;;    :go "benchmarkCompileOnepass(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{10850462 0xc001c18fe0}) b])
;; 
JOKER FUNC regexp.BenchmarkFind has: 
;; (defn BenchmarkFind
;;   {:added "1.0"
;;    :go "benchmarkFind(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{10817956 0xc004925c80}) b])
;; 
JOKER FUNC regexp.BenchmarkFindAllNoMatches has: 
;; (defn BenchmarkFindAllNoMatches
;;   {:added "1.0"
;;    :go "benchmarkFindAllNoMatches(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{10818287 0xc00493a300}) b])
;; 
JOKER FUNC regexp.BenchmarkFindString has: 
;; (defn BenchmarkFindString
;;   {:added "1.0"
;;    :go "benchmarkFindString(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{10818545 0xc00493a8c0}) b])
;; 
JOKER FUNC regexp.BenchmarkFindStringSubmatch has: 
;; (defn BenchmarkFindStringSubmatch
;;   {:added "1.0"
;;    :go "benchmarkFindStringSubmatch(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{10819334 0xc00493b760}) b])
;; 
JOKER FUNC regexp.BenchmarkFindSubmatch has: 
;; (defn BenchmarkFindSubmatch
;;   {:added "1.0"
;;    :go "benchmarkFindSubmatch(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{10818868 0xc00493af00}) b])
;; 
JOKER FUNC regexp.BenchmarkLiteral has: 
;; (defn BenchmarkLiteral
;;   {:added "1.0"
;;    :go "benchmarkLiteral(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{10819783 0xc00493bf60}) b])
;; 
JOKER FUNC regexp.BenchmarkMatch has: 
;; (defn BenchmarkMatch
;;   {:added "1.0"
;;    :go "benchmarkMatch(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{10842224 0xc002459260}) b])
;; 
JOKER FUNC regexp.BenchmarkMatchClass has: 
;; (defn BenchmarkMatchClass
;;   {:added "1.0"
;;    :go "benchmarkMatchClass(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{10820226 0xc0049769e0}) b])
;; 
JOKER FUNC regexp.BenchmarkMatchClass_InRange has: 
;; (defn BenchmarkMatchClass_InRange
;;   {:added "1.0"
;;    :go "benchmarkMatchClass_InRange(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{10820464 0xc004976f20}) b])
;; 
JOKER FUNC regexp.BenchmarkMatchParallelCopied has: 
;; (defn BenchmarkMatchParallelCopied
;;   {:added "1.0"
;;    :go "benchmarkMatchParallelCopied(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{10823387 0xc0034827e0}) b])
;; 
JOKER FUNC regexp.BenchmarkMatchParallelShared has: 
;; (defn BenchmarkMatchParallelShared
;;   {:added "1.0"
;;    :go "benchmarkMatchParallelShared(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{10823139 0xc0034823c0}) b])
;; 
JOKER FUNC regexp.BenchmarkMatch_onepass_regex has: 
;; (defn BenchmarkMatch_onepass_regex
;;   {:added "1.0"
;;    :go "benchmarkMatch_onepass_regex(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{10842710 0xc002459d40}) b])
;; 
JOKER FUNC regexp.BenchmarkNotLiteral has: 
;; (defn BenchmarkNotLiteral
;;   {:added "1.0"
;;    :go "benchmarkNotLiteral(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{10820004 0xc0049764a0}) b])
;; 
JOKER FUNC regexp.BenchmarkNotOnePassShortA has: 
;; (defn BenchmarkNotOnePassShortA
;;   {:added "1.0"
;;    :go "benchmarkNotOnePassShortA(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{10822106 0xc003480fa0}) b])
;; 
JOKER FUNC regexp.BenchmarkNotOnePassShortB has: 
;; (defn BenchmarkNotOnePassShortB
;;   {:added "1.0"
;;    :go "benchmarkNotOnePassShortB(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{10822492 0xc0034817a0}) b])
;; 
JOKER FUNC regexp.BenchmarkOnePassLongNotPrefix has: 
;; (defn BenchmarkOnePassLongNotPrefix
;;   {:added "1.0"
;;    :go "benchmarkOnePassLongNotPrefix(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{10822914 0xc003481fa0}) b])
;; 
JOKER FUNC regexp.BenchmarkOnePassLongPrefix has: 
;; (defn BenchmarkOnePassLongPrefix
;;   {:added "1.0"
;;    :go "benchmarkOnePassLongPrefix(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{10822688 0xc003481ba0}) b])
;; 
JOKER FUNC regexp.BenchmarkOnePassShortA has: 
;; (defn BenchmarkOnePassShortA
;;   {:added "1.0"
;;    :go "benchmarkOnePassShortA(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{10821912 0xc003480ba0}) b])
;; 
JOKER FUNC regexp.BenchmarkOnePassShortB has: 
;; (defn BenchmarkOnePassShortB
;;   {:added "1.0"
;;    :go "benchmarkOnePassShortB(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{10822296 0xc0034813a0}) b])
;; 
JOKER FUNC regexp.BenchmarkQuoteMetaAll has: 
;; (defn BenchmarkQuoteMetaAll
;;   {:added "1.0"
;;    :go "benchmarkQuoteMetaAll(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{10823663 0xc003482ce0}) b])
;; 
JOKER FUNC regexp.BenchmarkQuoteMetaNone has: 
;; (defn BenchmarkQuoteMetaNone
;;   {:added "1.0"
;;    :go "benchmarkQuoteMetaNone(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{10823961 0xc003483360}) b])
;; 
JOKER FUNC regexp.BenchmarkReplaceAll has: 
;; (defn BenchmarkReplaceAll
;;   {:added "1.0"
;;    :go "benchmarkReplaceAll(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{10820776 0xc0049774c0}) b])
;; 
JOKER FUNC regexp.Compile has: 
;; (defn ^[{:mu ^ABEND881(unrecognized Expr type *ast.SelectorExpr at: &{sync Mutex}) mu, :machine ^ABEND881(unrecognized Expr type *ast.ArrayType at: &{10729083 <nil> 0xc00406d0e0}) machine} Error] Compile
;;   "Compile parses a regular expression and returns, if successful,
;; a Regexp object that can be used to match against text.
;; 
;; When matching against text, the regexp returns a match that
;; begins as early as possible in the input (leftmost), and among those
;; it chooses the one that a backtracking search would have found first.
;; This so-called leftmost-first matching is the same semantics
;; that Perl, Python, and other implementations use, although this
;; package implements it without the expense of backtracking.
;; For POSIX leftmost-longest matching, see CompilePOSIX."
;;   {:added "1.0"
;;    :go "compile(expr)"}
;;   [^String expr])
;; 
JOKER FUNC regexp.CompilePOSIX has: 
;; (defn ^[{:mu ^ABEND881(unrecognized Expr type *ast.SelectorExpr at: &{sync Mutex}) mu, :machine ^ABEND881(unrecognized Expr type *ast.ArrayType at: &{10729083 <nil> 0xc00406d0e0}) machine} Error] CompilePOSIX
;;   "CompilePOSIX is like Compile but restricts the regular expression
;; to POSIX ERE (egrep) syntax and changes the match semantics to
;; leftmost-longest.
;; 
;; That is, when matching against text, the regexp returns a match that
;; begins as early as possible in the input (leftmost), and among those
;; it chooses a match that is as long as possible.
;; This so-called leftmost-longest matching is the same semantics
;; that early regular expression implementations used and that POSIX
;; specifies.
;; 
;; However, there can be multiple leftmost-longest matches, with different
;; submatch choices, and here this package diverges from POSIX.
;; Among the possible leftmost-longest matches, this package chooses
;; the one that a backtracking search would have found first, while POSIX
;; specifies that the match be chosen to maximize the length of the first
;; subexpression, then the second, and so on from left to right.
;; The POSIX rule is computationally prohibitive and not even well-defined.
;; See https://swtch.com/~rsc/regexp/regexp2.html#posix for details."
;;   {:added "1.0"
;;    :go "compilePOSIX(expr)"}
;;   [^String expr])
;; 
JOKER FUNC regexp.Match has: 
;; (defn ^[matched err] Match
;;   "MatchString reports whether the byte slice b
;; contains any match of the regular expression pattern.
;; More complicated queries need to use Compile and the full Regexp interface."
;;   {:added "1.0"
;;    :go "match(pattern, b)"}
;;   [^String pattern, ^ABEND881(unrecognized Expr type *ast.ArrayType at: &{10740492 <nil> byte}) b])
;; 
JOKER FUNC regexp.MatchReader has: 
;; (defn ^[matched err] MatchReader
;;   "MatchReader reports whether the text returned by the RuneReader
;; contains any match of the regular expression pattern.
;; More complicated queries need to use Compile and the full Regexp interface."
;;   {:added "1.0"
;;    :go "matchReader(pattern, r)"}
;;   [^String pattern, ^ABEND881(unrecognized Expr type *ast.SelectorExpr at: &{io RuneReader}) r])
;; 
JOKER FUNC regexp.MatchString has: 
(defn ^[matched err] MatchString
  "MatchString reports whether the string s
contains any match of the regular expression pattern.
More complicated queries need to use Compile and the full Regexp interface."
  {:added "1.0"
   :go "matchString(pattern, s)"}
  [^String pattern, ^String s])

JOKER FUNC regexp.MustCompile has: 
;; (defn ^{:mu ^ABEND881(unrecognized Expr type *ast.SelectorExpr at: &{sync Mutex}) mu, :machine ^ABEND881(unrecognized Expr type *ast.ArrayType at: &{10729083 <nil> 0xc00406d0e0}) machine} MustCompile
;;   "MustCompile is like Compile but panics if the expression cannot be parsed.
;; It simplifies safe initialization of global variables holding compiled regular
;; expressions."
;;   {:added "1.0"
;;    :go "mustCompile(str)"}
;;   [^String str])
;; 
JOKER FUNC regexp.MustCompilePOSIX has: 
;; (defn ^{:mu ^ABEND881(unrecognized Expr type *ast.SelectorExpr at: &{sync Mutex}) mu, :machine ^ABEND881(unrecognized Expr type *ast.ArrayType at: &{10729083 <nil> 0xc00406d0e0}) machine} MustCompilePOSIX
;;   "MustCompilePOSIX is like CompilePOSIX but panics if the expression cannot be parsed.
;; It simplifies safe initialization of global variables holding compiled regular
;; expressions."
;;   {:added "1.0"
;;    :go "mustCompilePOSIX(str)"}
;;   [^String str])
;; 
JOKER FUNC regexp.QuoteMeta has: 
(defn ^String QuoteMeta
  "QuoteMeta returns a string that escapes all regular expression metacharacters
inside the argument text; the returned string is a regular expression matching
the literal text."
  {:added "1.0"
   :go "quoteMeta(s)"}
  [^String s])

JOKER FUNC regexp.TestBadCompile has: 
;; (defn TestBadCompile
;;   {:added "1.0"
;;    :go "testBadCompile(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{10802423 0xc0047a8f00}) t])
;; 
JOKER FUNC regexp.TestCompileOnePass has: 
;; (defn TestCompileOnePass
;;   {:added "1.0"
;;    :go "testCompileOnePass(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{10849178 0xc0024f3960}) t])
;; 
JOKER FUNC regexp.TestCopyMatch has: 
;; (defn TestCopyMatch
;;   {:added "1.0"
;;    :go "testCopyMatch(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{10803785 0xc0047bac20}) t])
;; 
JOKER FUNC regexp.TestFind has: 
;; (defn TestFind
;;   {:added "1.0"
;;    :go "testFind(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{10789697 0xc0045e2e80}) t])
;; 
JOKER FUNC regexp.TestFindAll has: 
;; (defn TestFindAll
;;   {:added "1.0"
;;    :go "testFindAll(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{10792186 0xc004629ce0}) t])
;; 
JOKER FUNC regexp.TestFindAllIndex has: 
;; (defn TestFindAllIndex
;;   {:added "1.0"
;;    :go "testFindAllIndex(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{10794421 0xc00467a620}) t])
;; 
JOKER FUNC regexp.TestFindAllString has: 
;; (defn TestFindAllString
;;   {:added "1.0"
;;    :go "testFindAllString(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{10792978 0xc00463cb80}) t])
;; 
JOKER FUNC regexp.TestFindAllStringIndex has: 
;; (defn TestFindAllStringIndex
;;   {:added "1.0"
;;    :go "testFindAllStringIndex(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{10794593 0xc00467a9e0}) t])
;; 
JOKER FUNC regexp.TestFindAllStringSubmatch has: 
;; (defn TestFindAllStringSubmatch
;;   {:added "1.0"
;;    :go "testFindAllStringSubmatch(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{10799139 0xc0046e1b60}) t])
;; 
JOKER FUNC regexp.TestFindAllStringSubmatchIndex has: 
;; (defn TestFindAllStringSubmatchIndex
;;   {:added "1.0"
;;    :go "testFindAllStringSubmatchIndex(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{10800621 0xc004727620}) t])
;; 
JOKER FUNC regexp.TestFindAllSubmatch has: 
;; (defn TestFindAllSubmatch
;;   {:added "1.0"
;;    :go "testFindAllSubmatch(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{10798449 0xc0046e0ee0}) t])
;; 
JOKER FUNC regexp.TestFindAllSubmatchIndex has: 
;; (defn TestFindAllSubmatchIndex
;;   {:added "1.0"
;;    :go "testFindAllSubmatchIndex(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{10800425 0xc004727260}) t])
;; 
JOKER FUNC regexp.TestFindIndex has: 
;; (defn TestFindIndex
;;   {:added "1.0"
;;    :go "testFindIndex(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{10791667 0xc004629260}) t])
;; 
JOKER FUNC regexp.TestFindReaderIndex has: 
;; (defn TestFindReaderIndex
;;   {:added "1.0"
;;    :go "testFindReaderIndex(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{10791983 0xc004629900}) t])
;; 
JOKER FUNC regexp.TestFindReaderSubmatchIndex has: 
;; (defn TestFindReaderSubmatchIndex
;;   {:added "1.0"
;;    :go "testFindReaderSubmatchIndex(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{10798213 0xc0046e0b00}) t])
;; 
JOKER FUNC regexp.TestFindString has: 
;; (defn TestFindString
;;   {:added "1.0"
;;    :go "testFindString(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{10790420 0xc0045e3c40}) t])
;; 
JOKER FUNC regexp.TestFindStringIndex has: 
;; (defn TestFindStringIndex
;;   {:added "1.0"
;;    :go "testFindStringIndex(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{10791826 0xc0046295c0}) t])
;; 
JOKER FUNC regexp.TestFindStringSubmatch has: 
;; (defn TestFindStringSubmatch
;;   {:added "1.0"
;;    :go "testFindStringSubmatch(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{10796529 0xc004682ce0}) t])
;; 
JOKER FUNC regexp.TestFindStringSubmatchIndex has: 
;; (defn TestFindStringSubmatchIndex
;;   {:added "1.0"
;;    :go "testFindStringSubmatchIndex(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{10798032 0xc0046e07c0}) t])
;; 
JOKER FUNC regexp.TestFindSubmatch has: 
;; (defn TestFindSubmatch
;;   {:added "1.0"
;;    :go "testFindSubmatch(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{10795406 0xc00467b8c0}) t])
;; 
JOKER FUNC regexp.TestFindSubmatchIndex has: 
;; (defn TestFindSubmatchIndex
;;   {:added "1.0"
;;    :go "testFindSubmatchIndex(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{10797849 0xc0046e0460}) t])
;; 
JOKER FUNC regexp.TestFowler has: 
;; (defn TestFowler
;;   "TestFowler runs this package's regexp API against the
;; POSIX regular expression tests collected by Glenn Fowler
;; at http://www2.research.att.com/~astopen/testregex/testregex.html."
;;   {:added "1.0"
;;    :go "testFowler(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{10833052 0xc001d45100}) t])
;; 
JOKER FUNC regexp.TestGoodCompile has: 
;; (defn TestGoodCompile
;;   {:added "1.0"
;;    :go "testGoodCompile(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{10802313 0xc0047a8c80}) t])
;; 
JOKER FUNC regexp.TestLiteralPrefix has: 
;; (defn TestLiteralPrefix
;;   {:added "1.0"
;;    :go "testLiteralPrefix(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{10813113 0xc004879c00}) t])
;; 
JOKER FUNC regexp.TestLongest has: 
;; (defn TestLongest
;;   {:added "1.0"
;;    :go "testLongest(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{10843877 0xc00246f180}) t])
;; 
JOKER FUNC regexp.TestMatch has: 
;; (defn TestMatch
;;   {:added "1.0"
;;    :go "testMatch(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{10802984 0xc0047a9bc0}) t])
;; 
JOKER FUNC regexp.TestMatchFunction has: 
;; (defn TestMatchFunction
;;   {:added "1.0"
;;    :go "testMatchFunction(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{10803337 0xc0047ba360}) t])
;; 
JOKER FUNC regexp.TestMergeRuneSet has: 
;; (defn TestMergeRuneSet
;;   {:added "1.0"
;;    :go "testMergeRuneSet(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{10847514 0xc001b77f80}) t])
;; 
JOKER FUNC regexp.TestOnePassCutoff has: 
;; (defn TestOnePassCutoff
;;   "Check that one-pass cutoff does trigger."
;;   {:added "1.0"
;;    :go "testOnePassCutoff(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{10817211 0xc0049251c0}) t])
;; 
JOKER FUNC regexp.TestParseAndCompile has: 
;; (defn TestParseAndCompile
;;   "The following sequence of Match calls used to panic. See issue #12980."
;;   {:added "1.0"
;;    :go "testParseAndCompile(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{10816582 0xc004924540}) t])
;; 
JOKER FUNC regexp.TestProgramTooLongForBacktrack has: 
;; (defn TestProgramTooLongForBacktrack
;;   "TestProgramTooLongForBacktrack tests that a regex which is too long
;; for the backtracker still executes properly."
;;   {:added "1.0"
;;    :go "testProgramTooLongForBacktrack(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{10844328 0xc00246f920}) t])
;; 
JOKER FUNC regexp.TestQuoteMeta has: 
;; (defn TestQuoteMeta
;;   {:added "1.0"
;;    :go "testQuoteMeta(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{10812228 0xc004879020}) t])
;; 
JOKER FUNC regexp.TestRE2Exhaustive has: 
;; (defn TestRE2Exhaustive
;;   "This test is excluded when running under the race detector because
;; it is a very expensive test and takes too long."
;;   {:added "1.0"
;;    :go "testRE2Exhaustive(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{10706328 0xc003a57680}) t])
;; 
JOKER FUNC regexp.TestRE2Search has: 
;; (defn TestRE2Search
;;   "TestRE2 tests this package's regexp API against test cases
;; considered during RE2's exhaustive tests, which run all possible
;; regexps over a given set of atoms and operators, up to a given
;; complexity, over all possible strings over a given alphabet,
;; up to a given size. Rather than try to link with RE2, we read a
;; log file containing the test cases and the expected matches.
;; The log file, re2-exhaustive.txt, is generated by running 'make log'
;; in the open source RE2 distribution https://github.com/google/re2/.
;; 
;; The test file format is a sequence of stanzas like:
;; 
;; 	strings
;; 	"abc"
;; 	"123x"
;; 	regexps
;; 	"[a-z]+"
;; 	0-3;0-3
;; 	-;-
;; 	"([0-9])([0-9])([0-9])"
;; 	-;-
;; 	-;0-3 0-1 1-2 2-3
;; 
;; The stanza begins by defining a set of strings, quoted
;; using Go double-quote syntax, one per line. Then the
;; regexps section gives a sequence of regexps to run on
;; the strings. In the block that follows a regexp, each line
;; gives the semicolon-separated match results of running
;; the regexp on the corresponding string.
;; Each match result is either a single -, meaning no match, or a
;; space-separated sequence of pairs giving the match and
;; submatch indices. An unmatched subexpression formats
;; its pair as a single - (not illustrated above).  For now
;; each regexp run produces two match results, one for a
;; ``full match'' that restricts the regexp to matching the entire
;; string or nothing, and one for a ``partial match'' that gives
;; the leftmost first match found in the string.
;; 
;; Lines beginning with # are comments. Lines beginning with
;; a capital letter are test names printed during RE2's test suite
;; and are echoed into t but otherwise ignored.
;; 
;; At time of writing, re2-exhaustive.txt is 59 MB but compresses to 385 kB,
;; so we store re2-exhaustive.txt.bz2 in the repository and decompress it on the fly."
;;   {:added "1.0"
;;    :go "testRE2Search(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{10826351 0xc003483fa0}) t])
;; 
JOKER FUNC regexp.TestReplaceAll has: 
;; (defn TestReplaceAll
;;   {:added "1.0"
;;    :go "testReplaceAll(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{10808637 0xc004826f80}) t])
;; 
JOKER FUNC regexp.TestReplaceAllFunc has: 
;; (defn TestReplaceAllFunc
;;   {:added "1.0"
;;    :go "testReplaceAllFunc(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{10810778 0xc00482d760}) t])
;; 
JOKER FUNC regexp.TestReplaceAllLiteral has: 
;; (defn TestReplaceAllLiteral
;;   {:added "1.0"
;;    :go "testReplaceAllLiteral(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{10809296 0xc004827c80}) t])
;; 
JOKER FUNC regexp.TestRunOnePass has: 
;; (defn TestRunOnePass
;;   {:added "1.0"
;;    :go "testRunOnePass(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{10850037 0xc001c187c0}) t])
;; 
JOKER FUNC regexp.TestSplit has: 
;; (defn TestSplit
;;   {:added "1.0"
;;    :go "testSplit(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{10815868 0xc0048e36a0}) t])
;; 
JOKER FUNC regexp.TestSubexp has: 
;; (defn TestSubexp
;;   {:added "1.0"
;;    :go "testSubexp(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{10814123 0xc004880f40}) t])
;; 
JOKER FUNC regexp.TestSwitchBacktrack has: 
;; (defn TestSwitchBacktrack
;;   "Check that the same machine can be used with the standard matcher
;; and then the backtracker when there are no captures."
;;   {:added "1.0"
;;    :go "testSwitchBacktrack(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{10817679 0xc004925880}) t])
;; 
JOKER FUNC regexp_test.Example has: 
;; (defn Example
;;   {:added "1.0"
;;    :go "example()"}
;;   [])
;; 
JOKER FUNC regexp_test.ExampleMatchString has: 
;; (defn ExampleMatchString
;;   {:added "1.0"
;;    :go "exampleMatchString()"}
;;   [])
;; 
JOKER FUNC regexp_test.ExampleQuoteMeta has: 
;; (defn ExampleQuoteMeta
;;   {:added "1.0"
;;    :go "exampleQuoteMeta()"}
;;   [])
;; 
JOKER FUNC regexp_test.ExampleRegexp_Expand has: 
;; (defn ExampleRegexp_Expand
;;   {:added "1.0"
;;    :go "exampleRegexp_Expand()"}
;;   [])
;; 
JOKER FUNC regexp_test.ExampleRegexp_ExpandString has: 
;; (defn ExampleRegexp_ExpandString
;;   {:added "1.0"
;;    :go "exampleRegexp_ExpandString()"}
;;   [])
;; 
JOKER FUNC regexp_test.ExampleRegexp_FindAllString has: 
;; (defn ExampleRegexp_FindAllString
;;   {:added "1.0"
;;    :go "exampleRegexp_FindAllString()"}
;;   [])
;; 
JOKER FUNC regexp_test.ExampleRegexp_FindAllStringSubmatch has: 
;; (defn ExampleRegexp_FindAllStringSubmatch
;;   {:added "1.0"
;;    :go "exampleRegexp_FindAllStringSubmatch()"}
;;   [])
;; 
JOKER FUNC regexp_test.ExampleRegexp_FindAllStringSubmatchIndex has: 
;; (defn ExampleRegexp_FindAllStringSubmatchIndex
;;   {:added "1.0"
;;    :go "exampleRegexp_FindAllStringSubmatchIndex()"}
;;   [])
;; 
JOKER FUNC regexp_test.ExampleRegexp_FindAllSubmatchIndex has: 
;; (defn ExampleRegexp_FindAllSubmatchIndex
;;   {:added "1.0"
;;    :go "exampleRegexp_FindAllSubmatchIndex()"}
;;   [])
;; 
JOKER FUNC regexp_test.ExampleRegexp_FindIndex has: 
;; (defn ExampleRegexp_FindIndex
;;   {:added "1.0"
;;    :go "exampleRegexp_FindIndex()"}
;;   [])
;; 
JOKER FUNC regexp_test.ExampleRegexp_FindString has: 
;; (defn ExampleRegexp_FindString
;;   {:added "1.0"
;;    :go "exampleRegexp_FindString()"}
;;   [])
;; 
JOKER FUNC regexp_test.ExampleRegexp_FindStringIndex has: 
;; (defn ExampleRegexp_FindStringIndex
;;   {:added "1.0"
;;    :go "exampleRegexp_FindStringIndex()"}
;;   [])
;; 
JOKER FUNC regexp_test.ExampleRegexp_FindStringSubmatch has: 
;; (defn ExampleRegexp_FindStringSubmatch
;;   {:added "1.0"
;;    :go "exampleRegexp_FindStringSubmatch()"}
;;   [])
;; 
JOKER FUNC regexp_test.ExampleRegexp_MatchString has: 
;; (defn ExampleRegexp_MatchString
;;   {:added "1.0"
;;    :go "exampleRegexp_MatchString()"}
;;   [])
;; 
JOKER FUNC regexp_test.ExampleRegexp_ReplaceAllLiteralString has: 
;; (defn ExampleRegexp_ReplaceAllLiteralString
;;   {:added "1.0"
;;    :go "exampleRegexp_ReplaceAllLiteralString()"}
;;   [])
;; 
JOKER FUNC regexp_test.ExampleRegexp_ReplaceAllString has: 
;; (defn ExampleRegexp_ReplaceAllString
;;   {:added "1.0"
;;    :go "exampleRegexp_ReplaceAllString()"}
;;   [])
;; 
JOKER FUNC regexp_test.ExampleRegexp_Split has: 
;; (defn ExampleRegexp_Split
;;   {:added "1.0"
;;    :go "exampleRegexp_Split()"}
;;   [])
;; 
JOKER FUNC regexp_test.ExampleRegexp_SubexpNames has: 
;; (defn ExampleRegexp_SubexpNames
;;   {:added "1.0"
;;    :go "exampleRegexp_SubexpNames()"}
;;   [])
;; 
JOKER FUNC ring.New has: 
;; (defn ^{:next ^ABEND881(unrecognized Expr type *ast.StarExpr at: &{881786 Ring}) next, :prev ^ABEND881(unrecognized Expr type *ast.StarExpr at: &{881786 Ring}) prev, :value ^ABEND881(unrecognized Expr type *ast.InterfaceType at: &{881804 0xc000905da0 false}) Value} New
;;   "New creates a ring of n elements."
;;   {:added "1.0"
;;    :go "new(n)"}
;;   [^Int n])
;; 
JOKER FUNC ring.TestCornerCases has: 
;; (defn TestCornerCases
;;   {:added "1.0"
;;    :go "testCornerCases(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{876150 0xc0008fe920}) t])
;; 
JOKER FUNC ring.TestLink1 has: 
;; (defn TestLink1
;;   {:added "1.0"
;;    :go "testLink1(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{876779 0xc0008ffd20}) t])
;; 
JOKER FUNC ring.TestLink2 has: 
;; (defn TestLink2
;;   {:added "1.0"
;;    :go "testLink2(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{877133 0xc0009025c0}) t])
;; 
JOKER FUNC ring.TestLink3 has: 
;; (defn TestLink3
;;   {:added "1.0"
;;    :go "testLink3(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{877426 0xc000902e60}) t])
;; 
JOKER FUNC ring.TestLinkUnlink has: 
;; (defn TestLinkUnlink
;;   {:added "1.0"
;;    :go "testLinkUnlink(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{877899 0xc000903c40}) t])
;; 
JOKER FUNC ring.TestMoveEmptyRing has: 
;; (defn TestMoveEmptyRing
;;   "Test that calling Move() on an empty Ring initializes it."
;;   {:added "1.0"
;;    :go "testMoveEmptyRing(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{878188 0xc00090e360}) t])
;; 
JOKER FUNC ring.TestNew has: 
;; (defn TestNew
;;   {:added "1.0"
;;    :go "testNew(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{876606 0xc0008ff7e0}) t])
;; 
JOKER FUNC ring.TestUnlink has: 
;; (defn TestUnlink
;;   {:added "1.0"
;;    :go "testUnlink(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{877556 0xc000903260}) t])
;; 
JOKER FUNC ring_test.ExampleRing_Do has: 
;; (defn ExampleRing_Do
;;   {:added "1.0"
;;    :go "exampleRing_Do()"}
;;   [])
;; 
JOKER FUNC ring_test.ExampleRing_Len has: 
;; (defn ExampleRing_Len
;;   {:added "1.0"
;;    :go "exampleRing_Len()"}
;;   [])
;; 
JOKER FUNC ring_test.ExampleRing_Link has: 
;; (defn ExampleRing_Link
;;   {:added "1.0"
;;    :go "exampleRing_Link()"}
;;   [])
;; 
JOKER FUNC ring_test.ExampleRing_Move has: 
;; (defn ExampleRing_Move
;;   {:added "1.0"
;;    :go "exampleRing_Move()"}
;;   [])
;; 
JOKER FUNC ring_test.ExampleRing_Next has: 
;; (defn ExampleRing_Next
;;   {:added "1.0"
;;    :go "exampleRing_Next()"}
;;   [])
;; 
JOKER FUNC ring_test.ExampleRing_Prev has: 
;; (defn ExampleRing_Prev
;;   {:added "1.0"
;;    :go "exampleRing_Prev()"}
;;   [])
;; 
JOKER FUNC ring_test.ExampleRing_Unlink has: 
;; (defn ExampleRing_Unlink
;;   {:added "1.0"
;;    :go "exampleRing_Unlink()"}
;;   [])
;; 
JOKER FUNC rpc.Accept has: 
;; (defn Accept
;;   "Accept accepts connections on the listener and serves requests
;; to DefaultServer for each incoming connection.
;; Accept blocks; the caller typically invokes it in a go statement."
;;   {:added "1.0"
;;    :go "accept(lis)"}
;;   [^ABEND881(unrecognized Expr type *ast.SelectorExpr at: &{net Listener}) lis])
;; 
JOKER FUNC rpc.BenchmarkEndToEnd has: 
;; (defn BenchmarkEndToEnd
;;   {:added "1.0"
;;    :go "benchmarkEndToEnd(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{9745505 0xc00481f880}) b])
;; 
JOKER FUNC rpc.BenchmarkEndToEndAsync has: 
;; (defn BenchmarkEndToEndAsync
;;   {:added "1.0"
;;    :go "benchmarkEndToEndAsync(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{9745664 0xc00481fb40}) b])
;; 
JOKER FUNC rpc.BenchmarkEndToEndAsyncHTTP has: 
;; (defn BenchmarkEndToEndAsyncHTTP
;;   {:added "1.0"
;;    :go "benchmarkEndToEndAsyncHTTP(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{9745754 0xc00481fca0}) b])
;; 
JOKER FUNC rpc.BenchmarkEndToEndHTTP has: 
;; (defn BenchmarkEndToEndHTTP
;;   {:added "1.0"
;;    :go "benchmarkEndToEndHTTP(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{9745585 0xc00481f9e0}) b])
;; 
JOKER FUNC rpc.Dial has: 
;; (defn ^[{:codec codec, :reqmutex ^ABEND881(unrecognized Expr type *ast.SelectorExpr at: &{sync Mutex}) reqMutex, :request request, :mutex ^ABEND881(unrecognized Expr type *ast.SelectorExpr at: &{sync Mutex}) mutex, :seq seq, :pending ^ABEND881(unrecognized Expr type *ast.MapType at: &{9718385 uint64 0xc0047b9d40}) pending, :closing closing, :shutdown shutdown} Error] Dial
;;   "Dial connects to an RPC server at the specified network address."
;;   {:added "1.0"
;;    :go "dial(network, address)"}
;;   [^String network, ^String address])
;; 
JOKER FUNC rpc.DialHTTP has: 
;; (defn ^[{:codec codec, :reqmutex ^ABEND881(unrecognized Expr type *ast.SelectorExpr at: &{sync Mutex}) reqMutex, :request request, :mutex ^ABEND881(unrecognized Expr type *ast.SelectorExpr at: &{sync Mutex}) mutex, :seq seq, :pending ^ABEND881(unrecognized Expr type *ast.MapType at: &{9718385 uint64 0xc0047b9d40}) pending, :closing closing, :shutdown shutdown} Error] DialHTTP
;;   "DialHTTP connects to an HTTP RPC server at the specified network address
;; listening on the default HTTP RPC path."
;;   {:added "1.0"
;;    :go "dialHTTP(network, address)"}
;;   [^String network, ^String address])
;; 
JOKER FUNC rpc.DialHTTPPath has: 
;; (defn ^[{:codec codec, :reqmutex ^ABEND881(unrecognized Expr type *ast.SelectorExpr at: &{sync Mutex}) reqMutex, :request request, :mutex ^ABEND881(unrecognized Expr type *ast.SelectorExpr at: &{sync Mutex}) mutex, :seq seq, :pending ^ABEND881(unrecognized Expr type *ast.MapType at: &{9718385 uint64 0xc0047b9d40}) pending, :closing closing, :shutdown shutdown} Error] DialHTTPPath
;;   "DialHTTPPath connects to an HTTP RPC server
;; at the specified network address and path."
;;   {:added "1.0"
;;    :go "dialHTTPPath(network, address, path)"}
;;   [^String network, ^String address, ^String path])
;; 
JOKER FUNC rpc.HandleHTTP has: 
;; (defn HandleHTTP
;;   "HandleHTTP registers an HTTP handler for RPC messages to DefaultServer
;; on DefaultRPCPath and a debugging handler on DefaultDebugPath.
;; It is still necessary to invoke http.Serve(), typically in a go statement."
;;   {:added "1.0"
;;    :go "handleHTTP()"}
;;   [])
;; 
JOKER FUNC rpc.NewClient has: 
;; (defn ^{:codec codec, :reqmutex ^ABEND881(unrecognized Expr type *ast.SelectorExpr at: &{sync Mutex}) reqMutex, :request request, :mutex ^ABEND881(unrecognized Expr type *ast.SelectorExpr at: &{sync Mutex}) mutex, :seq seq, :pending ^ABEND881(unrecognized Expr type *ast.MapType at: &{9718385 uint64 0xc0047b9d40}) pending, :closing closing, :shutdown shutdown} NewClient
;;   "NewClient returns a new Client to handle requests to the
;; set of services at the other end of the connection.
;; It adds a buffer to the write side of the connection so
;; the header and payload are sent as a unit.
;; 
;; The read and write halves of the connection are serialized independently,
;; so no interlocking is required. However each half may be accessed
;; concurrently so the implementation of conn should protect against
;; concurrent reads or concurrent writes."
;;   {:added "1.0"
;;    :go "newClient(conn)"}
;;   [^ABEND881(unrecognized Expr type *ast.SelectorExpr at: &{io ReadWriteCloser}) conn])
;; 
JOKER FUNC rpc.NewClientWithCodec has: 
;; (defn ^{:codec codec, :reqmutex ^ABEND881(unrecognized Expr type *ast.SelectorExpr at: &{sync Mutex}) reqMutex, :request request, :mutex ^ABEND881(unrecognized Expr type *ast.SelectorExpr at: &{sync Mutex}) mutex, :seq seq, :pending ^ABEND881(unrecognized Expr type *ast.MapType at: &{9718385 uint64 0xc0047b9d40}) pending, :closing closing, :shutdown shutdown} NewClientWithCodec
;;   "NewClientWithCodec is like NewClient but uses the specified
;; codec to encode requests and decode responses."
;;   {:added "1.0"
;;    :go "newClientWithCodec(codec)"}
;;   [codec])
;; 
JOKER FUNC rpc.NewServer has: 
;; (defn ^{:servicemap ^ABEND881(unrecognized Expr type *ast.SelectorExpr at: &{sync Map}) serviceMap, :reqlock ^ABEND881(unrecognized Expr type *ast.SelectorExpr at: &{sync Mutex}) reqLock, :freereq ^ABEND881(unrecognized Expr type *ast.StarExpr at: &{9753448 Request}) freeReq, :resplock ^ABEND881(unrecognized Expr type *ast.SelectorExpr at: &{sync Mutex}) respLock, :freeresp ^ABEND881(unrecognized Expr type *ast.StarExpr at: &{9753513 Response}) freeResp} NewServer
;;   "NewServer returns a new Server."
;;   {:added "1.0"
;;    :go "newServer()"}
;;   [])
;; 
JOKER FUNC rpc.Register has: 
;; (defn ^Error Register
;;   "Register publishes the receiver's methods in the DefaultServer."
;;   {:added "1.0"
;;    :go "register(rcvr)"}
;;   [^ABEND881(unrecognized Expr type *ast.InterfaceType at: &{9766350 0xc004868900 false}) rcvr])
;; 
JOKER FUNC rpc.RegisterName has: 
;; (defn ^Error RegisterName
;;   "RegisterName is like Register but uses the provided name for the type
;; instead of the receiver's concrete type."
;;   {:added "1.0"
;;    :go "registerName(name, rcvr)"}
;;   [^String name, ^ABEND881(unrecognized Expr type *ast.InterfaceType at: &{9766563 0xc004868a50 false}) rcvr])
;; 
JOKER FUNC rpc.ServeCodec has: 
;; (defn ServeCodec
;;   "ServeCodec is like ServeConn but uses the specified codec to
;; decode requests and encode responses."
;;   {:added "1.0"
;;    :go "serveCodec(codec)"}
;;   [codec])
;; 
JOKER FUNC rpc.ServeConn has: 
;; (defn ServeConn
;;   "ServeConn runs the DefaultServer on a single connection.
;; ServeConn blocks, serving the connection until the client hangs up.
;; The caller typically invokes ServeConn in a go statement.
;; ServeConn uses the gob wire format (see package gob) on the
;; connection. To use an alternate codec, use ServeCodec.
;; See NewClient's comment for information about concurrent access."
;;   {:added "1.0"
;;    :go "serveConn(conn)"}
;;   [^ABEND881(unrecognized Expr type *ast.SelectorExpr at: &{io ReadWriteCloser}) conn])
;; 
JOKER FUNC rpc.ServeRequest has: 
(defn ^Error ServeRequest
  "ServeRequest is like ServeCodec but synchronously serves a single request.
It does not close the codec upon completion."
  {:added "1.0"
   :go "serveRequest(codec)"}
  [codec])

JOKER FUNC rpc.TestAcceptExitAfterListenerClose has: 
;; (defn TestAcceptExitAfterListenerClose
;;   "Tests the fix to issue 11221. Without the fix, this loops forever or crashes."
;;   {:added "1.0"
;;    :go "testAcceptExitAfterListenerClose(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{9742502 0xc004811ce0}) t])
;; 
JOKER FUNC rpc.TestBuiltinTypes has: 
;; (defn TestBuiltinTypes
;;   {:added "1.0"
;;    :go "testBuiltinTypes(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{9734712 0xc0047f5160}) t])
;; 
JOKER FUNC rpc.TestClientWriteError has: 
;; (defn TestClientWriteError
;;   {:added "1.0"
;;    :go "testClientWriteError(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{9741276 0xc004810460}) t])
;; 
JOKER FUNC rpc.TestCloseCodec has: 
;; (defn TestCloseCodec
;;   {:added "1.0"
;;    :go "testCloseCodec(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{9746499 0xc00482a7a0}) t])
;; 
JOKER FUNC rpc.TestCountMallocs has: 
;; (defn TestCountMallocs
;;   {:added "1.0"
;;    :go "testCountMallocs(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{9740460 0xc00480d660}) t])
;; 
JOKER FUNC rpc.TestCountMallocsOverHTTP has: 
;; (defn TestCountMallocsOverHTTP
;;   {:added "1.0"
;;    :go "testCountMallocsOverHTTP(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{9740729 0xc00480da80}) t])
;; 
JOKER FUNC rpc.TestErrorAfterClientClose has: 
;; (defn TestErrorAfterClientClose
;;   {:added "1.0"
;;    :go "testErrorAfterClientClose(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{9742049 0xc004811580}) t])
;; 
JOKER FUNC rpc.TestGobError has: 
;; (defn TestGobError
;;   {:added "1.0"
;;    :go "testGobError(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{9746981 0xc00482af80}) t])
;; 
JOKER FUNC rpc.TestHTTP has: 
;; (defn TestHTTP
;;   {:added "1.0"
;;    :go "testHTTP(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{9733990 0xc0047f4280}) t])
;; 
JOKER FUNC rpc.TestRPC has: 
;; (defn TestRPC
;;   {:added "1.0"
;;    :go "testRPC(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{9729452 0xc0047e6960}) t])
;; 
JOKER FUNC rpc.TestRegistrationError has: 
;; (defn TestRegistrationError
;;   "Check that registration handles lots of bad methods and a type with no suitable methods."
;;   {:added "1.0"
;;    :go "testRegistrationError(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{9738334 0xc004803400}) t])
;; 
JOKER FUNC rpc.TestSendDeadlock has: 
;; (defn TestSendDeadlock
;;   {:added "1.0"
;;    :go "testSendDeadlock(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{9739312 0xc004803fe0}) t])
;; 
JOKER FUNC rpc.TestServeRequest has: 
;; (defn TestServeRequest
;;   {:added "1.0"
;;    :go "testServeRequest(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{9737106 0xc0047fde60}) t])
;; 
JOKER FUNC rpc.TestShutdown has: 
;; (defn TestShutdown
;;   {:added "1.0"
;;    :go "testShutdown(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{9742778 0xc004816260}) t])
;; 
JOKER FUNC rpc.TestTCPClose has: 
;; (defn TestTCPClose
;;   {:added "1.0"
;;    :go "testTCPClose(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{9741592 0xc004810ac0}) t])
;; 
JOKER FUNC rsa.Benchmark3PrimeRSA2048Decrypt has: 
;; (defn Benchmark3PrimeRSA2048Decrypt
;;   {:added "1.0"
;;    :go "benchmark3PrimeRSA2048Decrypt(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{1384338 0xc000ce60c0}) b])
;; 
JOKER FUNC rsa.BenchmarkRSA2048Decrypt has: 
;; (defn BenchmarkRSA2048Decrypt
;;   {:added "1.0"
;;    :go "benchmarkRSA2048Decrypt(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{1383332 0xc000ce1840}) b])
;; 
JOKER FUNC rsa.BenchmarkRSA2048Sign has: 
;; (defn BenchmarkRSA2048Sign
;;   {:added "1.0"
;;    :go "benchmarkRSA2048Sign(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{1384110 0xc000ce1c00}) b])
;; 
JOKER FUNC rsa.DecryptOAEP has: 
;; (defn ^[[ABEND042(cannot find typename rsa.byte)] Error] DecryptOAEP
;;   "OAEP is parameterised by a hash function that is used as a random oracle.
;; Encryption and decryption of a given message must use the same hash function
;; and sha256.New() is a reasonable choice.
;; 
;; The random parameter, if not nil, is used to blind the private-key operation
;; and avoid timing side-channel attacks. Blinding is purely internal to this
;; function – the random data need not match that used when encrypting.
;; 
;; The label parameter must match the value given when encrypting. See
;; EncryptOAEP for details."
;;   {:added "1.0"
;;    :go "decryptOAEP(hash, random, priv, ciphertext, label)"}
;;   [^ABEND881(unrecognized Expr type *ast.SelectorExpr at: &{hash Hash}) hash, ^ABEND881(unrecognized Expr type *ast.SelectorExpr at: &{io Reader}) random, ^ABEND881(unrecognized Expr type *ast.StarExpr at: &{1347104 PrivateKey}) priv, ^ABEND881(unrecognized Expr type *ast.ArrayType at: &{1347128 <nil> byte}) ciphertext, ^ABEND881(unrecognized Expr type *ast.ArrayType at: &{1347142 <nil> byte}) label])
;; 
JOKER FUNC rsa.DecryptPKCS1v15 has: 
;; (defn ^[[ABEND042(cannot find typename rsa.byte)] Error] DecryptPKCS1v15
;;   "DecryptPKCS1v15 decrypts a plaintext using RSA and the padding scheme from PKCS#1 v1.5.
;; If rand != nil, it uses RSA blinding to avoid timing side-channel attacks.
;; 
;; Note that whether this function returns an error or not discloses secret
;; information. If an attacker can cause this function to run repeatedly and
;; learn whether each instance returned an error then they can decrypt and
;; forge signatures as if they had the private key. See
;; DecryptPKCS1v15SessionKey for a way of solving this problem."
;;   {:added "1.0"
;;    :go "decryptPKCS1v15(rand, priv, ciphertext)"}
;;   [^ABEND881(unrecognized Expr type *ast.SelectorExpr at: &{io Reader}) rand, ^ABEND881(unrecognized Expr type *ast.StarExpr at: &{1369161 PrivateKey}) priv, ^ABEND881(unrecognized Expr type *ast.ArrayType at: &{1369185 <nil> byte}) ciphertext])
;; 
JOKER FUNC rsa.DecryptPKCS1v15SessionKey has: 
;; (defn ^Error DecryptPKCS1v15SessionKey
;;   "DecryptPKCS1v15SessionKey decrypts a session key using RSA and the padding scheme from PKCS#1 v1.5.
;; If rand != nil, it uses RSA blinding to avoid timing side-channel attacks.
;; It returns an error if the ciphertext is the wrong length or if the
;; ciphertext is greater than the public modulus. Otherwise, no error is
;; returned. If the padding is valid, the resulting plaintext message is copied
;; into key. Otherwise, key is unchanged. These alternatives occur in constant
;; time. It is intended that the user of this function generate a random
;; session key beforehand and continue the protocol with the resulting value.
;; This will remove any possibility that an attacker can learn any information
;; about the plaintext.
;; See ``Chosen Ciphertext Attacks Against Protocols Based on the RSA
;; Encryption Standard PKCS #1'', Daniel Bleichenbacher, Advances in Cryptology
;; (Crypto '98).
;; 
;; Note that if the session key is too small then it may be possible for an
;; attacker to brute-force it. If they can do that then they can learn whether
;; a random value was used (because it'll be different for the same ciphertext)
;; and thus whether the padding was correct. This defeats the point of this
;; function. Using at least a 16-byte key will protect against this attack."
;;   {:added "1.0"
;;    :go "decryptPKCS1v15SessionKey(rand, priv, ciphertext, key)"}
;;   [^ABEND881(unrecognized Expr type *ast.SelectorExpr at: &{io Reader}) rand, ^ABEND881(unrecognized Expr type *ast.StarExpr at: &{1370811 PrivateKey}) priv, ^ABEND881(unrecognized Expr type *ast.ArrayType at: &{1370835 <nil> byte}) ciphertext, ^ABEND881(unrecognized Expr type *ast.ArrayType at: &{1370847 <nil> byte}) key])
;; 
JOKER FUNC rsa.EncryptOAEP has: 
;; (defn ^[[ABEND042(cannot find typename rsa.byte)] Error] EncryptOAEP
;;   "EncryptOAEP encrypts the given message with RSA-OAEP.
;; 
;; OAEP is parameterised by a hash function that is used as a random oracle.
;; Encryption and decryption of a given message must use the same hash function
;; and sha256.New() is a reasonable choice.
;; 
;; The random parameter is used as a source of entropy to ensure that
;; encrypting the same message twice doesn't result in the same ciphertext.
;; 
;; The label parameter may contain arbitrary data that will not be encrypted,
;; but which gives important context to the message. For example, if a given
;; public key is used to decrypt two types of messages then distinct label
;; values could be used to ensure that a ciphertext for one purpose cannot be
;; used for another by an attacker. If not required it can be empty.
;; 
;; The message must be no longer than the length of the public modulus minus
;; twice the hash length, minus a further 2."
;;   {:added "1.0"
;;    :go "encryptOAEP(hash, random, pub, msg, label)"}
;;   [^ABEND881(unrecognized Expr type *ast.SelectorExpr at: &{hash Hash}) hash, ^ABEND881(unrecognized Expr type *ast.SelectorExpr at: &{io Reader}) random, ^ABEND881(unrecognized Expr type *ast.StarExpr at: &{1341956 PublicKey}) pub, ^ABEND881(unrecognized Expr type *ast.ArrayType at: &{1341972 <nil> byte}) msg, ^ABEND881(unrecognized Expr type *ast.ArrayType at: &{1341986 <nil> byte}) label])
;; 
JOKER FUNC rsa.EncryptPKCS1v15 has: 
;; (defn ^[[ABEND042(cannot find typename rsa.byte)] Error] EncryptPKCS1v15
;;   "EncryptPKCS1v15 encrypts the given message with RSA and the padding
;; scheme from PKCS#1 v1.5.  The message must be no longer than the
;; length of the public modulus minus 11 bytes.
;; 
;; The rand parameter is used as a source of entropy to ensure that
;; encrypting the same message twice doesn't result in the same
;; ciphertext.
;; 
;; WARNING: use of this function to encrypt plaintexts other than
;; session keys is dangerous. Use RSA OAEP in new protocols."
;;   {:added "1.0"
;;    :go "encryptPKCS1v15(rand, pub, msg)"}
;;   [^ABEND881(unrecognized Expr type *ast.SelectorExpr at: &{io Reader}) rand, ^ABEND881(unrecognized Expr type *ast.StarExpr at: &{1368018 PublicKey}) pub, ^ABEND881(unrecognized Expr type *ast.ArrayType at: &{1368034 <nil> byte}) msg])
;; 
JOKER FUNC rsa.ExampleDecryptOAEP has: 
;; (defn ExampleDecryptOAEP
;;   {:added "1.0"
;;    :go "exampleDecryptOAEP()"}
;;   [])
;; 
JOKER FUNC rsa.ExampleDecryptPKCS1v15SessionKey has: 
;; (defn ExampleDecryptPKCS1v15SessionKey
;;   "RSA is able to encrypt only a very limited amount of data. In order
;; to encrypt reasonable amounts of data a hybrid scheme is commonly
;; used: RSA is used to encrypt a key for a symmetric primitive like
;; AES-GCM.
;; 
;; Before encrypting, data is “padded” by embedding it in a known
;; structure. This is done for a number of reasons, but the most
;; obvious is to ensure that the value is large enough that the
;; exponentiation is larger than the modulus. (Otherwise it could be
;; decrypted with a square-root.)
;; 
;; In these designs, when using PKCS#1 v1.5, it's vitally important to
;; avoid disclosing whether the received RSA message was well-formed
;; (that is, whether the result of decrypting is a correctly padded
;; message) because this leaks secret information.
;; DecryptPKCS1v15SessionKey is designed for this situation and copies
;; the decrypted, symmetric key (if well-formed) in constant-time over
;; a buffer that contains a random key. Thus, if the RSA result isn't
;; well-formed, the implementation uses a random key in constant time."
;;   {:added "1.0"
;;    :go "exampleDecryptPKCS1v15SessionKey()"}
;;   [])
;; 
JOKER FUNC rsa.ExampleEncryptOAEP has: 
;; (defn ExampleEncryptOAEP
;;   {:added "1.0"
;;    :go "exampleEncryptOAEP()"}
;;   [])
;; 
JOKER FUNC rsa.ExampleSignPKCS1v15 has: 
;; (defn ExampleSignPKCS1v15
;;   {:added "1.0"
;;    :go "exampleSignPKCS1v15()"}
;;   [])
;; 
JOKER FUNC rsa.ExampleVerifyPKCS1v15 has: 
;; (defn ExampleVerifyPKCS1v15
;;   {:added "1.0"
;;    :go "exampleVerifyPKCS1v15()"}
;;   [])
;; 
JOKER FUNC rsa.GenerateKey has: 
;; (defn ^[{:d ^ABEND881(unrecognized Expr type *ast.StarExpr at: &{1332775 0xc000c37900}) D, :primes ^ABEND881(unrecognized Expr type *ast.ArrayType at: &{1332817 <nil> 0xc000c37a00}) Primes, :precomputed Precomputed} Error] GenerateKey
;;   "GenerateKey generates an RSA keypair of the given bit size using the
;; random source random (for example, crypto/rand.Reader)."
;;   {:added "1.0"
;;    :go "generateKey(random, bits)"}
;;   [^ABEND881(unrecognized Expr type *ast.SelectorExpr at: &{io Reader}) random, ^Int bits])
;; 
JOKER FUNC rsa.GenerateMultiPrimeKey has: 
;; (defn ^[{:d ^ABEND881(unrecognized Expr type *ast.StarExpr at: &{1332775 0xc000c37900}) D, :primes ^ABEND881(unrecognized Expr type *ast.ArrayType at: &{1332817 <nil> 0xc000c37a00}) Primes, :precomputed Precomputed} Error] GenerateMultiPrimeKey
;;   "GenerateMultiPrimeKey generates a multi-prime RSA keypair of the given bit
;; size and the given random source, as suggested in [1]. Although the public
;; keys are compatible (actually, indistinguishable) from the 2-prime case,
;; the private keys are not. Thus it may not be possible to export multi-prime
;; private keys in certain formats or to subsequently import them into other
;; code.
;; 
;; Table 1 in [2] suggests maximum numbers of primes for a given size.
;; 
;; [1] US patent 4405829 (1972, expired)
;; [2] http://www.cacr.math.uwaterloo.ca/techreports/2006/cacr2006-16.pdf"
;;   {:added "1.0"
;;    :go "generateMultiPrimeKey(random, nprimes, bits)"}
;;   [^ABEND881(unrecognized Expr type *ast.SelectorExpr at: &{io Reader}) random, ^Int nprimes, ^Int bits])
;; 
JOKER FUNC rsa.SignPKCS1v15 has: 
;; (defn ^[[ABEND042(cannot find typename rsa.byte)] Error] SignPKCS1v15
;;   "SignPKCS1v15 calculates the signature of hashed using
;; RSASSA-PKCS1-V1_5-SIGN from RSA PKCS#1 v1.5.  Note that hashed must
;; be the result of hashing the input message using the given hash
;; function. If hash is zero, hashed is signed directly. This isn't
;; advisable except for interoperability.
;; 
;; If rand is not nil then RSA blinding will be used to avoid timing
;; side-channel attacks.
;; 
;; This function is deterministic. Thus, if the set of possible
;; messages is small, an attacker may be able to build a map from
;; messages to signatures and identify the signed messages. As ever,
;; signatures provide authenticity, not confidentiality."
;;   {:added "1.0"
;;    :go "signPKCS1v15(rand, priv, hash, hashed)"}
;;   [^ABEND881(unrecognized Expr type *ast.SelectorExpr at: &{io Reader}) rand, ^ABEND881(unrecognized Expr type *ast.StarExpr at: &{1375542 PrivateKey}) priv, ^ABEND881(unrecognized Expr type *ast.SelectorExpr at: &{crypto Hash}) hash, ^ABEND881(unrecognized Expr type *ast.ArrayType at: &{1375580 <nil> byte}) hashed])
;; 
JOKER FUNC rsa.SignPSS has: 
;; (defn ^[[ABEND042(cannot find typename rsa.byte)] Error] SignPSS
;;   "SignPSS calculates the signature of hashed using RSASSA-PSS [1].
;; Note that hashed must be the result of hashing the input message using the
;; given hash function. The opts argument may be nil, in which case sensible
;; defaults are used."
;;   {:added "1.0"
;;    :go "signPSS(rand, priv, hash, hashed, opts)"}
;;   [^ABEND881(unrecognized Expr type *ast.SelectorExpr at: &{io Reader}) rand, ^ABEND881(unrecognized Expr type *ast.StarExpr at: &{1365155 PrivateKey}) priv, ^ABEND881(unrecognized Expr type *ast.SelectorExpr at: &{crypto Hash}) hash, ^ABEND881(unrecognized Expr type *ast.ArrayType at: &{1365193 <nil> byte}) hashed, ^ABEND881(unrecognized Expr type *ast.StarExpr at: &{1365206 PSSOptions}) opts])
;; 
JOKER FUNC rsa.Test3PrimeKeyGeneration has: 
;; (defn Test3PrimeKeyGeneration
;;   {:added "1.0"
;;    :go "test3PrimeKeyGeneration(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{1378681 0xc000cda7a0}) t])
;; 
JOKER FUNC rsa.Test4PrimeKeyGeneration has: 
;; (defn Test4PrimeKeyGeneration
;;   {:added "1.0"
;;    :go "test4PrimeKeyGeneration(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{1378920 0xc000cdac00}) t])
;; 
JOKER FUNC rsa.TestDecryptOAEP has: 
;; (defn TestDecryptOAEP
;;   {:added "1.0"
;;    :go "testDecryptOAEP(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{1387902 0xc000ce76c0}) t])
;; 
JOKER FUNC rsa.TestDecryptPKCS1v15 has: 
;; (defn TestDecryptPKCS1v15
;;   {:added "1.0"
;;    :go "testDecryptPKCS1v15(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{1350723 0xc000c73800}) t])
;; 
JOKER FUNC rsa.TestEMSAPSS has: 
;; (defn TestEMSAPSS
;;   {:added "1.0"
;;    :go "testEMSAPSS(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{1396980 0xc000d0c0a0}) t])
;; 
JOKER FUNC rsa.TestEncryptOAEP has: 
;; (defn TestEncryptOAEP
;;   {:added "1.0"
;;    :go "testEncryptOAEP(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{1387362 0xc000ce6ac0}) t])
;; 
JOKER FUNC rsa.TestEncryptPKCS1v15 has: 
;; (defn TestEncryptPKCS1v15
;;   {:added "1.0"
;;    :go "testEncryptPKCS1v15(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{1351391 0xc000c78340}) t])
;; 
JOKER FUNC rsa.TestEncryptPKCS1v15DecrypterSessionKey has: 
;; (defn TestEncryptPKCS1v15DecrypterSessionKey
;;   {:added "1.0"
;;    :go "testEncryptPKCS1v15DecrypterSessionKey(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{1353227 0xc000c79c00}) t])
;; 
JOKER FUNC rsa.TestEncryptPKCS1v15SessionKey has: 
;; (defn TestEncryptPKCS1v15SessionKey
;;   {:added "1.0"
;;    :go "testEncryptPKCS1v15SessionKey(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{1352826 0xc000c79540}) t])
;; 
JOKER FUNC rsa.TestGnuTLSKey has: 
;; (defn TestGnuTLSKey
;;   {:added "1.0"
;;    :go "testGnuTLSKey(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{1379884 0xc000cdbca0}) t])
;; 
JOKER FUNC rsa.TestImpossibleKeyGeneration has: 
;; (defn TestImpossibleKeyGeneration
;;   {:added "1.0"
;;    :go "testImpossibleKeyGeneration(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{1379562 0xc000cdb700}) t])
;; 
JOKER FUNC rsa.TestKeyGeneration has: 
;; (defn TestKeyGeneration
;;   {:added "1.0"
;;    :go "testKeyGeneration(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{1378357 0xc000cda120}) t])
;; 
JOKER FUNC rsa.TestNPrimeKeyGeneration has: 
;; (defn TestNPrimeKeyGeneration
;;   {:added "1.0"
;;    :go "testNPrimeKeyGeneration(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{1379159 0xc000cdb060}) t])
;; 
JOKER FUNC rsa.TestNonZeroRandomBytes has: 
;; (defn TestNonZeroRandomBytes
;;   {:added "1.0"
;;    :go "testNonZeroRandomBytes(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{1353794 0xc000c80560}) t])
;; 
JOKER FUNC rsa.TestOverlongMessagePKCS1v15 has: 
;; (defn TestOverlongMessagePKCS1v15
;;   {:added "1.0"
;;    :go "testOverlongMessagePKCS1v15(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{1355157 0xc000c81d00}) t])
;; 
JOKER FUNC rsa.TestPSSGolden has: 
;; (defn TestPSSGolden
;;   "TestPSSGolden tests all the test vectors in pss-vect.txt from
;; ftp://ftp.rsasecurity.com/pub/pkcs/pkcs-1/pkcs-1v2-1-vec.zip"
;;   {:added "1.0"
;;    :go "testPSSGolden(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{1399368 0xc000d0ecc0}) t])
;; 
JOKER FUNC rsa.TestPSSNilOpts has: 
;; (defn TestPSSNilOpts
;;   {:added "1.0"
;;    :go "testPSSNilOpts(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{1402354 0xc000d17800}) t])
;; 
JOKER FUNC rsa.TestPSSOpenSSL has: 
;; (defn TestPSSOpenSSL
;;   "TestPSSOpenSSL ensures that we can verify a PSS signature from OpenSSL with
;; the default options. OpenSSL sets the salt length to be maximal."
;;   {:added "1.0"
;;    :go "testPSSOpenSSL(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{1401594 0xc000d16a00}) t])
;; 
JOKER FUNC rsa.TestPSSSigning has: 
;; (defn TestPSSSigning
;;   {:added "1.0"
;;    :go "testPSSSigning(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{1402540 0xc000d17c60}) t])
;; 
JOKER FUNC rsa.TestShortSessionKey has: 
;; (defn TestShortSessionKey
;;   {:added "1.0"
;;    :go "testShortSessionKey(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{1356316 0xc000c869c0}) t])
;; 
JOKER FUNC rsa.TestSignPKCS1v15 has: 
;; (defn TestSignPKCS1v15
;;   {:added "1.0"
;;    :go "testSignPKCS1v15(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{1354414 0xc000c80c80}) t])
;; 
JOKER FUNC rsa.TestUnpaddedSignature has: 
;; (defn TestUnpaddedSignature
;;   {:added "1.0"
;;    :go "testUnpaddedSignature(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{1355460 0xc000c86020}) t])
;; 
JOKER FUNC rsa.TestVerifyPKCS1v15 has: 
;; (defn TestVerifyPKCS1v15
;;   {:added "1.0"
;;    :go "testVerifyPKCS1v15(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{1354823 0xc000c815a0}) t])
;; 
JOKER FUNC rsa.VerifyPKCS1v15 has: 
;; (defn ^Error VerifyPKCS1v15
;;   "VerifyPKCS1v15 verifies an RSA PKCS#1 v1.5 signature.
;; hashed is the result of hashing the input message using the given hash
;; function and sig is the signature. A valid signature is indicated by
;; returning a nil error. If hash is zero then hashed is used directly. This
;; isn't advisable except for interoperability."
;;   {:added "1.0"
;;    :go "verifyPKCS1v15(pub, hash, hashed, sig)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{1376519 PublicKey}) pub, ^ABEND881(unrecognized Expr type *ast.SelectorExpr at: &{crypto Hash}) hash, ^ABEND881(unrecognized Expr type *ast.ArrayType at: &{1376556 <nil> byte}) hashed, ^ABEND881(unrecognized Expr type *ast.ArrayType at: &{1376568 <nil> byte}) sig])
;; 
JOKER FUNC rsa.VerifyPSS has: 
;; (defn ^Error VerifyPSS
;;   "VerifyPSS verifies a PSS signature.
;; hashed is the result of hashing the input message using the given hash
;; function and sig is the signature. A valid signature is indicated by
;; returning a nil error. The opts argument may be nil, in which case sensible
;; defaults are used."
;;   {:added "1.0"
;;    :go "verifyPSS(pub, hash, hashed, sig, opts)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{1365963 PublicKey}) pub, ^ABEND881(unrecognized Expr type *ast.SelectorExpr at: &{crypto Hash}) hash, ^ABEND881(unrecognized Expr type *ast.ArrayType at: &{1366000 <nil> byte}) hashed, ^ABEND881(unrecognized Expr type *ast.ArrayType at: &{1366012 <nil> byte}) sig, ^ABEND881(unrecognized Expr type *ast.StarExpr at: &{1366025 PSSOptions}) opts])
;; 
JOKER FUNC runtime.BenchSetType has: 
;; (defn BenchSetType
;;   {:added "1.0"
;;    :go "benchSetType(n, x)"}
;;   [^Int n, ^ABEND881(unrecognized Expr type *ast.InterfaceType at: &{11376595 0xc003bbe8d0 false}) x])
;; 
JOKER FUNC runtime.BlockOnSystemStack has: 
;; (defn BlockOnSystemStack
;;   "BlockOnSystemStack switches to the system stack, prints "x\n" to
;; stderr, and blocks in a stack containing
;; "runtime.blockOnSystemStackInternal"."
;;   {:added "1.0"
;;    :go "blockOnSystemStack()"}
;;   [])
;; 
JOKER FUNC runtime.BlockProfile has: 
;; (defn ^[n ok] BlockProfile
;;   "BlockProfile returns n, the number of records in the current blocking profile.
;; If len(p) >= n, BlockProfile copies the profile into p and returns n, true.
;; If len(p) < n, BlockProfile does not change p and returns n, false.
;; 
;; Most clients should use the runtime/pprof package or
;; the testing package's -test.blockprofile flag instead
;; of calling BlockProfile directly."
;;   {:added "1.0"
;;    :go "blockProfile(p)"}
;;   [^ABEND881(unrecognized Expr type *ast.ArrayType at: &{11721380 <nil> BlockProfileRecord}) p])
;; 
JOKER FUNC runtime.Breakpoint has: 
;; (defn Breakpoint
;;   "Breakpoint executes a breakpoint trap."
;;   {:added "1.0"
;;    :go "breakpoint()"}
;;   [])
;; 
JOKER FUNC runtime.CPUProfile has: 
;; (defn ^[ABEND042(cannot find typename runtime.byte)] CPUProfile
;;   "CPUProfile panics.
;; It formerly provided raw access to chunks of
;; a pprof-format profile generated by the runtime.
;; The details of generating that format have changed,
;; so this functionality has been removed.
;; 
;; Deprecated: use the runtime/pprof package,
;; or the handlers in the net/http/pprof package,
;; or the testing package's -test.cpuprofile flag instead."
;;   {:added "1.0"
;;    :go "cPUProfile()"}
;;   [])
;; 
JOKER FUNC runtime.Caller has: 
(defn ^[pc file line ok] Caller
  "Caller reports file and line number information about function invocations on
the calling goroutine's stack. The argument skip is the number of stack frames
to ascend, with 0 identifying the caller of Caller.  (For historical reasons the
meaning of skip differs between Caller and Callers.) The return values report the
program counter, file name, and line number within the file of the corresponding
call. The boolean ok is false if it was not possible to recover the information."
  {:added "1.0"
   :go "caller(skip)"}
  [^Int skip])

JOKER FUNC runtime.Callers has: 
;; (defn ^Int Callers
;;   "Callers fills the slice pc with the return program counters of function invocations
;; on the calling goroutine's stack. The argument skip is the number of stack frames
;; to skip before recording in pc, with 0 identifying the frame for Callers itself and
;; 1 identifying the caller of Callers.
;; It returns the number of entries written to pc.
;; 
;; To translate these PCs into symbolic information such as function
;; names and line numbers, use CallersFrames. CallersFrames accounts
;; for inlined functions and adjusts the return program counters into
;; call program counters. Iterating over the returned slice of PCs
;; directly is discouraged, as is using FuncForPC on any of the
;; returned PCs, since these cannot account for inlining or return
;; program counter adjustment."
;;   {:added "1.0"
;;    :go "callers(skip, pc)"}
;;   [^Int skip, ^ABEND881(unrecognized Expr type *ast.ArrayType at: &{11801311 <nil> uintptr}) pc])
;; 
JOKER FUNC runtime.CallersFrames has: 
;; (defn ^{:callers ^ABEND881(unrecognized Expr type *ast.ArrayType at: &{11675142 <nil> uintptr}) callers, :stackexpander stackExpander, :elidewrapper elideWrapper} CallersFrames
;;   "CallersFrames takes a slice of PC values returned by Callers and
;; prepares to return function/file/line information.
;; Do not change the slice until you are done with the Frames."
;;   {:added "1.0"
;;    :go "callersFrames(callers)"}
;;   [^ABEND881(unrecognized Expr type *ast.ArrayType at: &{11677867 <nil> uintptr}) callers])
;; 
JOKER FUNC runtime.CountPagesInUse has: 
(defn ^[pagesInUse counted] CountPagesInUse
  {:added "1.0"
   :go "countPagesInUse()"}
  [])

JOKER FUNC runtime.Envs has: 
(defn ^[String] Envs
  {:added "1.0"
   :go "envs()"}
  [])

JOKER FUNC runtime.Epollctl has: 
;; (defn ^ABEND042(cannot find typename runtime.int32) Epollctl
;;   {:added "1.0"
;;    :go "epollctl(epfd, op, fd, ev)"}
;;   [epfd, op, fd, ^ABEND881(unrecognized Expr type *ast.SelectorExpr at: &{unsafe Pointer}) ev])
;; 
JOKER FUNC runtime.Fastrand has: 
;; (defn ^ABEND042(cannot find typename runtime.uint32) Fastrand
;;   {:added "1.0"
;;    :go "fastrand()"}
;;   [])
;; 
JOKER FUNC runtime.Fastrandn has: 
;; (defn ^ABEND042(cannot find typename runtime.uint32) Fastrandn
;;   {:added "1.0"
;;    :go "fastrandn(n)"}
;;   [n])
;; 
JOKER FUNC runtime.FuncForPC has: 
;; (defn ^{:opaque ^ABEND881(unrecognized Expr type *ast.StructType at: &{11684338 0xc004dcfb30 false}) opaque} FuncForPC
;;   "FuncForPC returns a *Func describing the function that contains the
;; given program counter address, or else nil.
;; 
;; If pc represents multiple functions because of inlining, it returns
;; the *Func describing the outermost function."
;;   {:added "1.0"
;;    :go "funcForPC(pc)"}
;;   [pc])
;; 
JOKER FUNC runtime.G0StackOverflow has: 
;; (defn G0StackOverflow
;;   {:added "1.0"
;;    :go "g0StackOverflow()"}
;;   [])
;; 
JOKER FUNC runtime.GC has: 
;; (defn GC
;;   "GC runs a garbage collection and blocks the caller until the
;; garbage collection is complete. It may also block the entire
;; program."
;;   {:added "1.0"
;;    :go "gC()"}
;;   [])
;; 
JOKER FUNC runtime.GCMask has: 
;; (defn ^ret GCMask
;;   {:added "1.0"
;;    :go "gCMask(x)"}
;;   [^ABEND881(unrecognized Expr type *ast.InterfaceType at: &{11373685 0xc003bac990 false}) x])
;; 
JOKER FUNC runtime.GOMAXPROCS has: 
(defn ^Int GOMAXPROCS
  "GOMAXPROCS sets the maximum number of CPUs that can be executing
simultaneously and returns the previous setting. If n < 1, it does not
change the current setting.
The number of logical CPUs on the local machine can be queried with NumCPU.
This call will go away when the scheduler improves."
  {:added "1.0"
   :go "gOMAXPROCS(n)"}
  [^Int n])

JOKER FUNC runtime.GOROOT has: 
(defn ^String GOROOT
  "GOROOT returns the root of the Go tree. It uses the
GOROOT environment variable, if set at process start,
or else the root used during the Go build."
  {:added "1.0"
   :go "gOROOT()"}
  [])

JOKER FUNC runtime.GetNextArenaHint has: 
;; (defn ^ABEND042(cannot find typename runtime.uintptr) GetNextArenaHint
;;   {:added "1.0"
;;    :go "getNextArenaHint()"}
;;   [])
;; 
JOKER FUNC runtime.GetPhysPageSize has: 
;; (defn ^ABEND042(cannot find typename runtime.uintptr) GetPhysPageSize
;;   {:added "1.0"
;;    :go "getPhysPageSize()"}
;;   [])
;; 
JOKER FUNC runtime.Getg has: 
;; (defn ^ABEND042(cannot find typename runtime.g) Getg
;;   {:added "1.0"
;;    :go "getg()"}
;;   [])
;; 
JOKER FUNC runtime.Goexit has: 
;; (defn Goexit
;;   "Goexit terminates the goroutine that calls it. No other goroutine is affected.
;; Goexit runs all deferred calls before terminating the goroutine. Because Goexit
;; is not a panic, any recover calls in those deferred functions will return nil.
;; 
;; Calling Goexit from the main goroutine terminates that goroutine
;; without func main returning. Since func main has not returned,
;; the program continues execution of other goroutines.
;; If all other goroutines exit, the program crashes."
;;   {:added "1.0"
;;    :go "goexit()"}
;;   [])
;; 
JOKER FUNC runtime.GoroutineProfile has: 
;; (defn ^[n ok] GoroutineProfile
;;   "GoroutineProfile returns n, the number of records in the active goroutine stack profile.
;; If len(p) >= n, GoroutineProfile copies the profile into p and returns n, true.
;; If len(p) < n, GoroutineProfile does not change p and returns n, false.
;; 
;; Most clients should use the runtime/pprof package instead
;; of calling GoroutineProfile directly."
;;   {:added "1.0"
;;    :go "goroutineProfile(p)"}
;;   [^ABEND881(unrecognized Expr type *ast.ArrayType at: &{11723838 <nil> StackRecord}) p])
;; 
JOKER FUNC runtime.Gosched has: 
;; (defn Gosched
;;   "Gosched yields the processor, allowing other goroutines to run. It does not
;; suspend the current goroutine, so execution resumes automatically."
;;   {:added "1.0"
;;    :go "gosched()"}
;;   [])
;; 
JOKER FUNC runtime.GostringW has: 
;; (defn ^s GostringW
;;   "entry point for testing"
;;   {:added "1.0"
;;    :go "gostringW(w)"}
;;   [^ABEND881(unrecognized Expr type *ast.ArrayType at: &{11376255 <nil> uint16}) w])
;; 
JOKER FUNC runtime.InjectDebugCall has: 
;; (defn ^[ABEND881(unrecognized Expr type *ast.InterfaceType at: &{11015104 0xc0045c3080 false}) Error] InjectDebugCall
;;   "InjectDebugCall injects a debugger call to fn into g. args must be
;; a pointer to a valid call frame (including arguments and return
;; space) for fn, or nil. tkill must be a function that will send
;; SIGTRAP to thread ID tid. gp must be locked to its OS thread and
;; running.
;; 
;; On success, InjectDebugCall returns the panic value of fn or nil.
;; If fn did not panic, its results will be available in args."
;;   {:added "1.0"
;;    :go "injectDebugCall(gp, fn, args, tkill)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{11015050 g}) gp, ^ABEND881(unrecognized Expr type *ast.InterfaceType at: &{11015063 0xc0045c2f90 false}) fn, ^ABEND881(unrecognized Expr type *ast.InterfaceType at: &{11015063 0xc0045c2f90 false}) args, ^ABEND881(unrecognized Expr type *ast.FuncType at: &{11015082 0xc0045c2ff0 0xc0045c3020}) tkill])
;; 
JOKER FUNC runtime.KeepAlive has: 
;; (defn KeepAlive
;;   "KeepAlive marks its argument as currently reachable.
;; This ensures that the object is not freed, and its finalizer is not run,
;; before the point in the program where KeepAlive is called.
;; 
;; A very simplified example showing where KeepAlive is required:
;; 	type File struct { d int }
;; 	d, err := syscall.Open("/file/path", syscall.O_RDONLY, 0)
;; 	// ... do something if err != nil ...
;; 	p := &File{d}
;; 	runtime.SetFinalizer(p, func(p *File) { syscall.Close(p.d) })
;; 	var buf [10]byte
;; 	n, err := syscall.Read(p.d, buf[:])
;; 	// Ensure p is not finalized until Read returns.
;; 	runtime.KeepAlive(p)
;; 	// No more uses of p after this point.
;; 
;; Without the KeepAlive call, the finalizer could run at the start of
;; syscall.Read, closing the file descriptor before syscall.Read makes
;; the actual system call."
;;   {:added "1.0"
;;    :go "keepAlive(x)"}
;;   [^ABEND881(unrecognized Expr type *ast.InterfaceType at: &{12483455 0xc00580e360 false}) x])
;; 
JOKER FUNC runtime.KeepNArenaHints has: 
;; (defn KeepNArenaHints
;;   {:added "1.0"
;;    :go "keepNArenaHints(n)"}
;;   [^Int n])
;; 
JOKER FUNC runtime.LFStackPop has: 
;; (defn ^{:next Next, :pushcnt Pushcnt} LFStackPop
;;   {:added "1.0"
;;    :go "lFStackPop(head)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{11373591 uint64}) head])
;; 
JOKER FUNC runtime.LFStackPush has: 
;; (defn LFStackPush
;;   {:added "1.0"
;;    :go "lFStackPush(head, node)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{11373486 uint64}) head, ^ABEND881(unrecognized Expr type *ast.StarExpr at: &{11373500 LFNode}) node])
;; 
JOKER FUNC runtime.LockOSCounts has: 
(defn ^[external internal] LockOSCounts
  {:added "1.0"
   :go "lockOSCounts()"}
  [])

JOKER FUNC runtime.LockOSThread has: 
;; (defn LockOSThread
;;   "LockOSThread wires the calling goroutine to its current operating system thread.
;; The calling goroutine will always execute in that thread,
;; and no other goroutine will execute in it,
;; until the calling goroutine has made as many calls to
;; UnlockOSThread as to LockOSThread.
;; If the calling goroutine exits without unlocking the thread,
;; the thread will be terminated.
;; 
;; All init functions are run on the startup thread. Calling LockOSThread
;; from an init function will cause the main function to be invoked on
;; that thread.
;; 
;; A goroutine should call LockOSThread before calling OS services or
;; non-Go library functions that depend on per-thread state."
;;   {:added "1.0"
;;    :go "lockOSThread()"}
;;   [])
;; 
JOKER FUNC runtime.MapBucketsCount has: 
;; (defn ^Int MapBucketsCount
;;   {:added "1.0"
;;    :go "mapBucketsCount(m)"}
;;   [^ABEND881(unrecognized Expr type *ast.MapType at: &{11380788 int int}) m])
;; 
JOKER FUNC runtime.MapBucketsPointerIsNil has: 
;; (defn ^ABEND042(cannot find typename runtime.bool) MapBucketsPointerIsNil
;;   {:added "1.0"
;;    :go "mapBucketsPointerIsNil(m)"}
;;   [^ABEND881(unrecognized Expr type *ast.MapType at: &{11380893 int int}) m])
;; 
JOKER FUNC runtime.MapNextArenaHint has: 
(defn ^[start end] MapNextArenaHint
  "MapNextArenaHint reserves a page at the next arena growth hint,
preventing the arena from growing there, and returns the range of
addresses that are no longer viable."
  {:added "1.0"
   :go "mapNextArenaHint()"}
  [])

JOKER FUNC runtime.MemProfile has: 
;; (defn ^[n ok] MemProfile
;;   "MemProfile returns a profile of memory allocated and freed per allocation
;; site.
;; 
;; MemProfile returns n, the number of records in the current memory profile.
;; If len(p) >= n, MemProfile copies the profile into p and returns n, true.
;; If len(p) < n, MemProfile does not change p and returns n, false.
;; 
;; If inuseZero is true, the profile includes allocation records
;; where r.AllocBytes > 0 but r.AllocBytes == r.FreeBytes.
;; These are sites where memory was allocated, but it has all
;; been released back to the runtime.
;; 
;; The returned profile may be up to two garbage collection cycles old.
;; This is to avoid skewing the profile toward allocations; because
;; allocations happen in real time but frees are delayed until the garbage
;; collector performs sweeping, the profile only accounts for allocations
;; that have had a chance to be freed by the garbage collector.
;; 
;; Most clients should use the runtime/pprof package or
;; the testing package's -test.memprofile flag instead
;; of calling MemProfile directly."
;;   {:added "1.0"
;;    :go "memProfile(p, inuseZero)"}
;;   [^ABEND881(unrecognized Expr type *ast.ArrayType at: &{11718708 <nil> MemProfileRecord}) p, inuseZero])
;; 
JOKER FUNC runtime.MemclrBytes has: 
;; (defn MemclrBytes
;;   {:added "1.0"
;;    :go "memclrBytes(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.ArrayType at: &{11376090 <nil> byte}) b])
;; 
JOKER FUNC runtime.MutexProfile has: 
;; (defn ^[n ok] MutexProfile
;;   "MutexProfile returns n, the number of records in the current mutex profile.
;; If len(p) >= n, MutexProfile copies the profile into p and returns n, true.
;; Otherwise, MutexProfile does not change p, and returns n, false.
;; 
;; Most clients should use the runtime/pprof package
;; instead of calling MutexProfile directly."
;;   {:added "1.0"
;;    :go "mutexProfile(p)"}
;;   [^ABEND881(unrecognized Expr type *ast.ArrayType at: &{11722369 <nil> BlockProfileRecord}) p])
;; 
JOKER FUNC runtime.NewProfBuf has: 
;; (defn ^ABEND042(cannot find typename runtime.profBuf) NewProfBuf
;;   {:added "1.0"
;;    :go "newProfBuf(hdrsize, bufwords, tags)"}
;;   [^Int hdrsize, ^Int bufwords, ^Int tags])
;; 
JOKER FUNC runtime.NumCPU has: 
(defn ^Int NumCPU
  "NumCPU returns the number of logical CPUs usable by the current process.

The set of available CPUs is checked by querying the operating system
at process startup. Changes to operating system CPU allocation after
process startup are not reflected."
  {:added "1.0"
   :go "numCPU()"}
  [])

JOKER FUNC runtime.NumCgoCall has: 
;; (defn ^ABEND042(cannot find typename runtime.int64) NumCgoCall
;;   "NumCgoCall returns the number of cgo calls made by the current process."
;;   {:added "1.0"
;;    :go "numCgoCall()"}
;;   [])
;; 
JOKER FUNC runtime.NumGoroutine has: 
(defn ^Int NumGoroutine
  "NumGoroutine returns the number of goroutines that currently exist."
  {:added "1.0"
   :go "numGoroutine()"}
  [])

JOKER FUNC runtime.PanicForTesting has: 
;; (defn ^ABEND042(cannot find typename runtime.byte) PanicForTesting
;;   "go:noinline"
;;   {:added "1.0"
;;    :go "panicForTesting(b, i)"}
;;   [^ABEND881(unrecognized Expr type *ast.ArrayType at: &{11382343 <nil> byte}) b, ^Int i])
;; 
JOKER FUNC runtime.ReadMemStats has: 
;; (defn ReadMemStats
;;   "ReadMemStats populates m with memory allocator statistics.
;; 
;; The returned memory allocator statistics are up to date as of the
;; call to ReadMemStats. This is in contrast with a heap profile,
;; which is a snapshot as of the most recently completed garbage
;; collection cycle."
;;   {:added "1.0"
;;    :go "readMemStats(m)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{11041602 MemStats}) m])
;; 
JOKER FUNC runtime.ReadMemStatsSlow has: 
(defn ^[base slow] ReadMemStatsSlow
  "ReadMemStatsSlow returns both the runtime-computed MemStats and
MemStats accumulated by scanning the heap."
  {:added "1.0"
   :go "readMemStatsSlow()"}
  [])

JOKER FUNC runtime.ReadTrace has: 
;; (defn ^[ABEND042(cannot find typename runtime.byte)] ReadTrace
;;   "ReadTrace returns the next chunk of binary tracing data, blocking until data
;; is available. If tracing is turned off and all the data accumulated while it
;; was on has been returned, ReadTrace returns nil. The caller must copy the
;; returned data before calling ReadTrace again.
;; ReadTrace must be called from one goroutine at a time."
;;   {:added "1.0"
;;    :go "readTrace()"}
;;   [])
;; 
JOKER FUNC runtime.RunSchedLocalQueueEmptyTest has: 
;; (defn RunSchedLocalQueueEmptyTest
;;   {:added "1.0"
;;    :go "runSchedLocalQueueEmptyTest(iters)"}
;;   [^Int iters])
;; 
JOKER FUNC runtime.RunSchedLocalQueueStealTest has: 
;; (defn RunSchedLocalQueueStealTest
;;   {:added "1.0"
;;    :go "runSchedLocalQueueStealTest()"}
;;   [])
;; 
JOKER FUNC runtime.RunSchedLocalQueueTest has: 
;; (defn RunSchedLocalQueueTest
;;   {:added "1.0"
;;    :go "runSchedLocalQueueTest()"}
;;   [])
;; 
JOKER FUNC runtime.RunStealOrderTest has: 
;; (defn RunStealOrderTest
;;   {:added "1.0"
;;    :go "runStealOrderTest()"}
;;   [])
;; 
JOKER FUNC runtime.SetBlockProfileRate has: 
;; (defn SetBlockProfileRate
;;   "SetBlockProfileRate controls the fraction of goroutine blocking events
;; that are reported in the blocking profile. The profiler aims to sample
;; an average of one blocking event per rate nanoseconds spent blocked.
;; 
;; To include every blocking event in the profile, pass rate = 1.
;; To turn off profiling entirely, pass rate <= 0."
;;   {:added "1.0"
;;    :go "setBlockProfileRate(rate)"}
;;   [^Int rate])
;; 
JOKER FUNC runtime.SetCPUProfileRate has: 
;; (defn SetCPUProfileRate
;;   "SetCPUProfileRate sets the CPU profiling rate to hz samples per second.
;; If hz <= 0, SetCPUProfileRate turns off profiling.
;; If the profiler is on, the rate cannot be changed without first turning it off.
;; 
;; Most clients should use the runtime/pprof package or
;; the testing package's -test.cpuprofile flag instead of calling
;; SetCPUProfileRate directly."
;;   {:added "1.0"
;;    :go "setCPUProfileRate(hz)"}
;;   [^Int hz])
;; 
JOKER FUNC runtime.SetCgoTraceback has: 
;; (defn SetCgoTraceback
;;   "SetCgoTraceback records three C functions to use to gather
;; traceback information from C code and to convert that traceback
;; information into symbolic information. These are used when printing
;; stack traces for a program that uses cgo.
;; 
;; The traceback and context functions may be called from a signal
;; handler, and must therefore use only async-signal safe functions.
;; The symbolizer function may be called while the program is
;; crashing, and so must be cautious about using memory.  None of the
;; functions may call back into Go.
;; 
;; The context function will be called with a single argument, a
;; pointer to a struct:
;; 
;; 	struct {
;; 		Context uintptr
;; 	}
;; 
;; In C syntax, this struct will be
;; 
;; 	struct {
;; 		uintptr_t Context;
;; 	};
;; 
;; If the Context field is 0, the context function is being called to
;; record the current traceback context. It should record in the
;; Context field whatever information is needed about the current
;; point of execution to later produce a stack trace, probably the
;; stack pointer and PC. In this case the context function will be
;; called from C code.
;; 
;; If the Context field is not 0, then it is a value returned by a
;; previous call to the context function. This case is called when the
;; context is no longer needed; that is, when the Go code is returning
;; to its C code caller. This permits the context function to release
;; any associated resources.
;; 
;; While it would be correct for the context function to record a
;; complete a stack trace whenever it is called, and simply copy that
;; out in the traceback function, in a typical program the context
;; function will be called many times without ever recording a
;; traceback for that context. Recording a complete stack trace in a
;; call to the context function is likely to be inefficient.
;; 
;; The traceback function will be called with a single argument, a
;; pointer to a struct:
;; 
;; 	struct {
;; 		Context    uintptr
;; 		SigContext uintptr
;; 		Buf        *uintptr
;; 		Max        uintptr
;; 	}
;; 
;; In C syntax, this struct will be
;; 
;; 	struct {
;; 		uintptr_t  Context;
;; 		uintptr_t  SigContext;
;; 		uintptr_t* Buf;
;; 		uintptr_t  Max;
;; 	};
;; 
;; The Context field will be zero to gather a traceback from the
;; current program execution point. In this case, the traceback
;; function will be called from C code.
;; 
;; Otherwise Context will be a value previously returned by a call to
;; the context function. The traceback function should gather a stack
;; trace from that saved point in the program execution. The traceback
;; function may be called from an execution thread other than the one
;; that recorded the context, but only when the context is known to be
;; valid and unchanging. The traceback function may also be called
;; deeper in the call stack on the same thread that recorded the
;; context. The traceback function may be called multiple times with
;; the same Context value; it will usually be appropriate to cache the
;; result, if possible, the first time this is called for a specific
;; context value.
;; 
;; If the traceback function is called from a signal handler on a Unix
;; system, SigContext will be the signal context argument passed to
;; the signal handler (a C ucontext_t* cast to uintptr_t). This may be
;; used to start tracing at the point where the signal occurred. If
;; the traceback function is not called from a signal handler,
;; SigContext will be zero.
;; 
;; Buf is where the traceback information should be stored. It should
;; be PC values, such that Buf[0] is the PC of the caller, Buf[1] is
;; the PC of that function's caller, and so on.  Max is the maximum
;; number of entries to store.  The function should store a zero to
;; indicate the top of the stack, or that the caller is on a different
;; stack, presumably a Go stack.
;; 
;; Unlike runtime.Callers, the PC values returned should, when passed
;; to the symbolizer function, return the file/line of the call
;; instruction.  No additional subtraction is required or appropriate.
;; 
;; On all platforms, the traceback function is invoked when a call from
;; Go to C to Go requests a stack trace. On linux/amd64, linux/ppc64le,
;; and freebsd/amd64, the traceback function is also invoked when a
;; signal is received by a thread that is executing a cgo call. The
;; traceback function should not make assumptions about when it is
;; called, as future versions of Go may make additional calls.
;; 
;; The symbolizer function will be called with a single argument, a
;; pointer to a struct:
;; 
;; 	struct {
;; 		PC      uintptr // program counter to fetch information for
;; 		File    *byte   // file name (NUL terminated)
;; 		Lineno  uintptr // line number
;; 		Func    *byte   // function name (NUL terminated)
;; 		Entry   uintptr // function entry point
;; 		More    uintptr // set non-zero if more info for this PC
;; 		Data    uintptr // unused by runtime, available for function
;; 	}
;; 
;; In C syntax, this struct will be
;; 
;; 	struct {
;; 		uintptr_t PC;
;; 		char*     File;
;; 		uintptr_t Lineno;
;; 		char*     Func;
;; 		uintptr_t Entry;
;; 		uintptr_t More;
;; 		uintptr_t Data;
;; 	};
;; 
;; The PC field will be a value returned by a call to the traceback
;; function.
;; 
;; The first time the function is called for a particular traceback,
;; all the fields except PC will be 0. The function should fill in the
;; other fields if possible, setting them to 0/nil if the information
;; is not available. The Data field may be used to store any useful
;; information across calls. The More field should be set to non-zero
;; if there is more information for this PC, zero otherwise. If More
;; is set non-zero, the function will be called again with the same
;; PC, and may return different information (this is intended for use
;; with inlined functions). If More is zero, the function will be
;; called with the next PC value in the traceback. When the traceback
;; is complete, the function will be called once more with PC set to
;; zero; this may be used to free any information. Each call will
;; leave the fields of the struct set to the same values they had upon
;; return, except for the PC field when the More field is zero. The
;; function must not keep a copy of the struct pointer between calls.
;; 
;; When calling SetCgoTraceback, the version argument is the version
;; number of the structs that the functions expect to receive.
;; Currently this must be zero.
;; 
;; The symbolizer function may be nil, in which case the results of
;; the traceback function will be displayed as numbers. If the
;; traceback function is nil, the symbolizer function will never be
;; called. The context function may be nil, in which case the
;; traceback function will only be called with the context field set
;; to zero.  If the context function is nil, then calls from Go to C
;; to Go will not show a traceback for the C portion of the call stack.
;; 
;; SetCgoTraceback should be called only once, ideally from an init function."
;;   {:added "1.0"
;;    :go "setCgoTraceback(version, traceback, context, symbolizer)"}
;;   [^Int version, ^ABEND881(unrecognized Expr type *ast.SelectorExpr at: &{unsafe Pointer}) traceback, ^ABEND881(unrecognized Expr type *ast.SelectorExpr at: &{unsafe Pointer}) context, ^ABEND881(unrecognized Expr type *ast.SelectorExpr at: &{unsafe Pointer}) symbolizer])
;; 
JOKER FUNC runtime.SetEnvs has: 
;; (defn SetEnvs
;;   {:added "1.0"
;;    :go "setEnvs(e)"}
;;   [^ABEND881(unrecognized Expr type *ast.ArrayType at: &{11376491 <nil> string}) e])
;; 
JOKER FUNC runtime.SetFinalizer has: 
;; (defn SetFinalizer
;;   "SetFinalizer sets the finalizer associated with obj to the provided
;; finalizer function. When the garbage collector finds an unreachable block
;; with an associated finalizer, it clears the association and runs
;; finalizer(obj) in a separate goroutine. This makes obj reachable again,
;; but now without an associated finalizer. Assuming that SetFinalizer
;; is not called again, the next time the garbage collector sees
;; that obj is unreachable, it will free obj.
;; 
;; SetFinalizer(obj, nil) clears any finalizer associated with obj.
;; 
;; The argument obj must be a pointer to an object allocated by calling
;; new, by taking the address of a composite literal, or by taking the
;; address of a local variable.
;; The argument finalizer must be a function that takes a single argument
;; to which obj's type can be assigned, and can have arbitrary ignored return
;; values. If either of these is not true, SetFinalizer may abort the
;; program.
;; 
;; Finalizers are run in dependency order: if A points at B, both have
;; finalizers, and they are otherwise unreachable, only the finalizer
;; for A runs; once A is freed, the finalizer for B can run.
;; If a cyclic structure includes a block with a finalizer, that
;; cycle is not guaranteed to be garbage collected and the finalizer
;; is not guaranteed to run, because there is no ordering that
;; respects the dependencies.
;; 
;; The finalizer is scheduled to run at some arbitrary time after the
;; program can no longer reach the object to which obj points.
;; There is no guarantee that finalizers will run before a program exits,
;; so typically they are useful only for releasing non-memory resources
;; associated with an object during a long-running program.
;; For example, an os.File object could use a finalizer to close the
;; associated operating system file descriptor when a program discards
;; an os.File without calling Close, but it would be a mistake
;; to depend on a finalizer to flush an in-memory I/O buffer such as a
;; bufio.Writer, because the buffer would not be flushed at program exit.
;; 
;; It is not guaranteed that a finalizer will run if the size of *obj is
;; zero bytes.
;; 
;; It is not guaranteed that a finalizer will run for objects allocated
;; in initializers for package-level variables. Such objects may be
;; linker-allocated, not heap-allocated.
;; 
;; A finalizer may run as soon as an object becomes unreachable.
;; In order to use finalizers correctly, the program must ensure that
;; the object is reachable until it is no longer required.
;; Objects stored in global variables, or that can be found by tracing
;; pointers from a global variable, are reachable. For other objects,
;; pass the object to a call of the KeepAlive function to mark the
;; last point in the function where the object must be reachable.
;; 
;; For example, if p points to a struct that contains a file descriptor d,
;; and p has a finalizer that closes that file descriptor, and if the last
;; use of p in a function is a call to syscall.Write(p.d, buf, size), then
;; p may be unreachable as soon as the program enters syscall.Write. The
;; finalizer may run at that moment, closing p.d, causing syscall.Write
;; to fail because it is writing to a closed file descriptor (or, worse,
;; to an entirely different file descriptor opened by a different goroutine).
;; To avoid this problem, call runtime.KeepAlive(p) after the call to
;; syscall.Write.
;; 
;; A single goroutine runs all finalizers for a program, sequentially.
;; If a finalizer must run for a long time, it should do so by starting
;; a new goroutine."
;;   {:added "1.0"
;;    :go "setFinalizer(obj, finalizer)"}
;;   [^ABEND881(unrecognized Expr type *ast.InterfaceType at: &{12478954 0xc0057fc900 false}) obj, ^ABEND881(unrecognized Expr type *ast.InterfaceType at: &{12478977 0xc0057fc930 false}) finalizer])
;; 
JOKER FUNC runtime.SetMutexProfileFraction has: 
(defn ^Int SetMutexProfileFraction
  "SetMutexProfileFraction controls the fraction of mutex contention events
that are reported in the mutex profile. On average 1/rate events are
reported. The previous rate is returned.

To turn off profiling entirely, pass rate 0.
To just read the current rate, pass rate < 0.
(For n>1 the details of sampling may change.)"
  {:added "1.0"
   :go "setMutexProfileFraction(rate)"}
  [^Int rate])

JOKER FUNC runtime.SetTracebackEnv has: 
;; (defn SetTracebackEnv
;;   "SetTracebackEnv is like runtime/debug.SetTraceback, but it raises
;; the "environment" traceback level, so later calls to
;; debug.SetTraceback (e.g., from testing timeouts) can't lower it."
;;   {:added "1.0"
;;    :go "setTracebackEnv(level)"}
;;   [^String level])
;; 
JOKER FUNC runtime.Sigisblocked has: 
;; (defn ^ABEND042(cannot find typename runtime.bool) Sigisblocked
;;   {:added "1.0"
;;    :go "sigisblocked(i)"}
;;   [^Int i])
;; 
JOKER FUNC runtime.Stack has: 
;; (defn ^Int Stack
;;   "Stack formats a stack trace of the calling goroutine into buf
;; and returns the number of bytes written to buf.
;; If all is true, Stack formats stack traces of all other goroutines
;; into buf after the trace for the current goroutine."
;;   {:added "1.0"
;;    :go "stack(buf, all)"}
;;   [^ABEND881(unrecognized Expr type *ast.ArrayType at: &{11725154 <nil> byte}) buf, all])
;; 
JOKER FUNC runtime.StartTrace has: 
(defn ^Error StartTrace
  "StartTrace enables tracing for the current process.
While tracing, the data will be buffered and available via ReadTrace.
StartTrace returns an error if tracing is already enabled.
Most clients should use the runtime/trace package or the testing package's
-test.trace flag instead of calling StartTrace directly."
  {:added "1.0"
   :go "startTrace()"}
  [])

JOKER FUNC runtime.StopTrace has: 
;; (defn StopTrace
;;   "StopTrace stops tracing, if it was previously enabled.
;; StopTrace only returns after all the reads for the trace have completed."
;;   {:added "1.0"
;;    :go "stopTrace()"}
;;   [])
;; 
JOKER FUNC runtime.ThreadCreateProfile has: 
;; (defn ^[n ok] ThreadCreateProfile
;;   "ThreadCreateProfile returns n, the number of records in the thread creation profile.
;; If len(p) >= n, ThreadCreateProfile copies the profile into p and returns n, true.
;; If len(p) < n, ThreadCreateProfile does not change p and returns n, false.
;; 
;; Most clients should use the runtime/pprof package instead
;; of calling ThreadCreateProfile directly."
;;   {:added "1.0"
;;    :go "threadCreateProfile(p)"}
;;   [^ABEND881(unrecognized Expr type *ast.ArrayType at: &{11723173 <nil> StackRecord}) p])
;; 
JOKER FUNC runtime.TracebackSystemstack has: 
;; (defn ^Int TracebackSystemstack
;;   "go:noinline"
;;   {:added "1.0"
;;    :go "tracebackSystemstack(stk, i)"}
;;   [^ABEND881(unrecognized Expr type *ast.ArrayType at: &{11381316 <nil> uintptr}) stk, ^Int i])
;; 
JOKER FUNC runtime.UnlockOSThread has: 
;; (defn UnlockOSThread
;;   "UnlockOSThread undoes an earlier call to LockOSThread.
;; If this drops the number of active LockOSThread calls on the
;; calling goroutine to zero, it unwires the calling goroutine from
;; its fixed operating system thread.
;; If there are no active LockOSThread calls, this is a no-op.
;; 
;; Before calling UnlockOSThread, the caller must ensure that the OS
;; thread is suitable for running other goroutines. If the caller made
;; any permanent changes to the state of the thread that would affect
;; other goroutines, it should not call this function and thus leave
;; the goroutine locked to the OS thread until the goroutine (and
;; hence the thread) exits."
;;   {:added "1.0"
;;    :go "unlockOSThread()"}
;;   [])
;; 
JOKER FUNC runtime.Version has: 
(defn ^String Version
  "Version returns the Go tree's version string.
It is either the commit hash and date at the time of the build or,
when possible, a release tag like "go1.3"."
  {:added "1.0"
   :go "version()"}
  [])

JOKER FUNC runtime._ELF_ST_BIND has: 
;; (defn ^ABEND042(cannot find typename runtime.byte) _ELF_ST_BIND
;;   "How to extract and insert information held in the st_info field."
;;   {:added "1.0"
;;    :go "_ELF_ST_BIND(val)"}
;;   [val])
;; 
JOKER FUNC runtime._ELF_ST_TYPE has: 
;; (defn ^ABEND042(cannot find typename runtime.byte) _ELF_ST_TYPE
;;   {:added "1.0"
;;    :go "_ELF_ST_TYPE(val)"}
;;   [val])
;; 
JOKER FUNC runtime._ExternalCode has: 
;; (defn _ExternalCode
;;   {:added "1.0"
;;    :go "_ExternalCode()"}
;;   [])
;; 
JOKER FUNC runtime._GC has: 
;; (defn _GC
;;   {:added "1.0"
;;    :go "_GC()"}
;;   [])
;; 
JOKER FUNC runtime._LostExternalCode has: 
;; (defn _LostExternalCode
;;   {:added "1.0"
;;    :go "_LostExternalCode()"}
;;   [])
;; 
JOKER FUNC runtime._LostSIGPROFDuringAtomic64 has: 
;; (defn _LostSIGPROFDuringAtomic64
;;   {:added "1.0"
;;    :go "_LostSIGPROFDuringAtomic64()"}
;;   [])
;; 
JOKER FUNC runtime._System has: 
;; (defn _System
;;   {:added "1.0"
;;    :go "_System()"}
;;   [])
;; 
JOKER FUNC runtime._VDSO has: 
;; (defn _VDSO
;;   {:added "1.0"
;;    :go "_VDSO()"}
;;   [])
;; 
JOKER FUNC runtime._cgo_panic_internal has: 
;; (defn _cgo_panic_internal
;;   {:added "1.0"
;;    :go "_cgo_panic_internal(p)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{12424135 byte}) p])
;; 
JOKER FUNC runtime_test.BenchmarkAlignedLoad has: 
;; (defn BenchmarkAlignedLoad
;;   {:added "1.0"
;;    :go "benchmarkAlignedLoad(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{12460020 0xc0057ca140}) b])
;; 
JOKER FUNC runtime_test.BenchmarkAllocation has: 
;; (defn BenchmarkAllocation
;;   {:added "1.0"
;;    :go "benchmarkAllocation(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{11209756 0xc0026deba0}) b])
;; 
JOKER FUNC runtime_test.BenchmarkAppend has: 
;; (defn BenchmarkAppend
;;   {:added "1.0"
;;    :go "benchmarkAppend(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{11387019 0xc003bea740}) b])
;; 
JOKER FUNC runtime_test.BenchmarkAppendGrowByte has: 
;; (defn BenchmarkAppendGrowByte
;;   {:added "1.0"
;;    :go "benchmarkAppendGrowByte(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{11387217 0xc003beacc0}) b])
;; 
JOKER FUNC runtime_test.BenchmarkAppendGrowString has: 
;; (defn BenchmarkAppendGrowString
;;   {:added "1.0"
;;    :go "benchmarkAppendGrowString(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{11387374 0xc003beb0a0}) b])
;; 
JOKER FUNC runtime_test.BenchmarkAppendInPlace has: 
;; (defn BenchmarkAppendInPlace
;;   "BenchmarkAppendInPlace tests the performance of append
;; when the result is being written back to the same slice.
;; In order for the in-place optimization to occur,
;; the slice must be referred to by address;
;; using a global is an easy way to trigger that.
;; We test the "grow" and "no grow" paths separately,
;; but not the "normal" (occasionally grow) path,
;; because it is a blend of the other two.
;; We use small numbers and small sizes in an attempt
;; to avoid benchmarking memory allocation and copying.
;; We use scalars instead of pointers in an attempt
;; to avoid benchmarking the write barriers.
;; We benchmark four common sizes (byte, pointer, string/interface, slice),
;; and one larger size."
;;   {:added "1.0"
;;    :go "benchmarkAppendInPlace(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{11390582 0xc003bf9000}) b])
;; 
JOKER FUNC runtime_test.BenchmarkAppendSlice has: 
;; (defn BenchmarkAppendSlice
;;   {:added "1.0"
;;    :go "benchmarkAppendSlice(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{11387536 0xc003beb4c0}) b])
;; 
JOKER FUNC runtime_test.BenchmarkAppendSliceLarge has: 
;; (defn BenchmarkAppendSliceLarge
;;   {:added "1.0"
;;    :go "benchmarkAppendSliceLarge(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{11387865 0xc003bebd40}) b])
;; 
JOKER FUNC runtime_test.BenchmarkAppendSpecialCase has: 
;; (defn BenchmarkAppendSpecialCase
;;   {:added "1.0"
;;    :go "benchmarkAppendSpecialCase(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{11388539 0xc003bf4ca0}) b])
;; 
JOKER FUNC runtime_test.BenchmarkAppendStr has: 
;; (defn BenchmarkAppendStr
;;   {:added "1.0"
;;    :go "benchmarkAppendStr(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{11388190 0xc003bf4520}) b])
;; 
JOKER FUNC runtime_test.BenchmarkArrayEqual has: 
;; (defn BenchmarkArrayEqual
;;   {:added "1.0"
;;    :go "benchmarkArrayEqual(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{11086839 0xc003e70460}) b])
;; 
JOKER FUNC runtime_test.BenchmarkAssertE2E has: 
;; (defn BenchmarkAssertE2E
;;   {:added "1.0"
;;    :go "benchmarkAssertE2E(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{11367065 0xc003b91980}) b])
;; 
JOKER FUNC runtime_test.BenchmarkAssertE2E2 has: 
;; (defn BenchmarkAssertE2E2
;;   {:added "1.0"
;;    :go "benchmarkAssertE2E2(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{11367590 0xc003b94780}) b])
;; 
JOKER FUNC runtime_test.BenchmarkAssertE2E2Blank has: 
;; (defn BenchmarkAssertE2E2Blank
;;   {:added "1.0"
;;    :go "benchmarkAssertE2E2Blank(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{11367705 0xc003b94a60}) b])
;; 
JOKER FUNC runtime_test.BenchmarkAssertE2I has: 
;; (defn BenchmarkAssertE2I
;;   {:added "1.0"
;;    :go "benchmarkAssertE2I(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{11366667 0xc003b90f00}) b])
;; 
JOKER FUNC runtime_test.BenchmarkAssertE2T has: 
;; (defn BenchmarkAssertE2T
;;   {:added "1.0"
;;    :go "benchmarkAssertE2T(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{11366470 0xc003b909c0}) b])
;; 
JOKER FUNC runtime_test.BenchmarkAssertE2T2 has: 
;; (defn BenchmarkAssertE2T2
;;   {:added "1.0"
;;    :go "benchmarkAssertE2T2(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{11367157 0xc003b91c00}) b])
;; 
JOKER FUNC runtime_test.BenchmarkAssertE2T2Blank has: 
;; (defn BenchmarkAssertE2T2Blank
;;   {:added "1.0"
;;    :go "benchmarkAssertE2T2Blank(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{11367263 0xc003b91ee0}) b])
;; 
JOKER FUNC runtime_test.BenchmarkAssertE2TLarge has: 
;; (defn BenchmarkAssertE2TLarge
;;   {:added "1.0"
;;    :go "benchmarkAssertE2TLarge(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{11366571 0xc003b90c60}) b])
;; 
JOKER FUNC runtime_test.BenchmarkAssertI2E has: 
;; (defn BenchmarkAssertI2E
;;   {:added "1.0"
;;    :go "benchmarkAssertI2E(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{11366959 0xc003b916e0}) b])
;; 
JOKER FUNC runtime_test.BenchmarkAssertI2E2 has: 
;; (defn BenchmarkAssertI2E2
;;   {:added "1.0"
;;    :go "benchmarkAssertI2E2(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{11367363 0xc003b941c0}) b])
;; 
JOKER FUNC runtime_test.BenchmarkAssertI2E2Blank has: 
;; (defn BenchmarkAssertI2E2Blank
;;   {:added "1.0"
;;    :go "benchmarkAssertI2E2Blank(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{11367479 0xc003b944a0}) b])
;; 
JOKER FUNC runtime_test.BenchmarkAssertI2I has: 
;; (defn BenchmarkAssertI2I
;;   {:added "1.0"
;;    :go "benchmarkAssertI2I(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{11366861 0xc003b91440}) b])
;; 
JOKER FUNC runtime_test.BenchmarkAssertI2T has: 
;; (defn BenchmarkAssertI2T
;;   {:added "1.0"
;;    :go "benchmarkAssertI2T(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{11366763 0xc003b911a0}) b])
;; 
JOKER FUNC runtime_test.BenchmarkBigKeyMap has: 
;; (defn BenchmarkBigKeyMap
;;   {:added "1.0"
;;    :go "benchmarkBigKeyMap(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{11057452 0xc004737740}) b])
;; 
JOKER FUNC runtime_test.BenchmarkBigValMap has: 
;; (defn BenchmarkBigValMap
;;   {:added "1.0"
;;    :go "benchmarkBigValMap(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{11057622 0xc004737ba0}) b])
;; 
JOKER FUNC runtime_test.BenchmarkBulkWriteBarrier has: 
;; (defn BenchmarkBulkWriteBarrier
;;   {:added "1.0"
;;    :go "benchmarkBulkWriteBarrier(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{11215008 0xc003e60800}) b])
;; 
JOKER FUNC runtime_test.BenchmarkCallClosure has: 
;; (defn BenchmarkCallClosure
;;   {:added "1.0"
;;    :go "benchmarkCallClosure(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{11227788 0xc00453e3e0}) b])
;; 
JOKER FUNC runtime_test.BenchmarkCallClosure1 has: 
;; (defn BenchmarkCallClosure1
;;   {:added "1.0"
;;    :go "benchmarkCallClosure1(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{11227910 0xc00453e720}) b])
;; 
JOKER FUNC runtime_test.BenchmarkCallClosure2 has: 
;; (defn BenchmarkCallClosure2
;;   {:added "1.0"
;;    :go "benchmarkCallClosure2(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{11228056 0xc00453eb00}) b])
;; 
JOKER FUNC runtime_test.BenchmarkCallClosure3 has: 
;; (defn BenchmarkCallClosure3
;;   {:added "1.0"
;;    :go "benchmarkCallClosure3(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{11228255 0xc00453f000}) b])
;; 
JOKER FUNC runtime_test.BenchmarkCallClosure4 has: 
;; (defn BenchmarkCallClosure4
;;   {:added "1.0"
;;    :go "benchmarkCallClosure4(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{11228421 0xc00453f440}) b])
;; 
JOKER FUNC runtime_test.BenchmarkChanContended has: 
;; (defn BenchmarkChanContended
;;   {:added "1.0"
;;    :go "benchmarkChanContended(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{11010038 0xc0045ff060}) b])
;; 
JOKER FUNC runtime_test.BenchmarkChanCreation has: 
;; (defn BenchmarkChanCreation
;;   {:added "1.0"
;;    :go "benchmarkChanCreation(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{11013445 0xc004662f40}) b])
;; 
JOKER FUNC runtime_test.BenchmarkChanNonblocking has: 
;; (defn BenchmarkChanNonblocking
;;   {:added "1.0"
;;    :go "benchmarkChanNonblocking(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{11008222 0xc0045b6fc0}) b])
;; 
JOKER FUNC runtime_test.BenchmarkChanPopular has: 
;; (defn BenchmarkChanPopular
;;   {:added "1.0"
;;    :go "benchmarkChanPopular(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{11013804 0xc004663740}) b])
;; 
JOKER FUNC runtime_test.BenchmarkChanProdCons0 has: 
;; (defn BenchmarkChanProdCons0
;;   {:added "1.0"
;;    :go "benchmarkChanProdCons0(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{11011779 0xc00465f2c0}) b])
;; 
JOKER FUNC runtime_test.BenchmarkChanProdCons10 has: 
;; (defn BenchmarkChanProdCons10
;;   {:added "1.0"
;;    :go "benchmarkChanProdCons10(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{11011859 0xc00465f440}) b])
;; 
JOKER FUNC runtime_test.BenchmarkChanProdCons100 has: 
;; (defn BenchmarkChanProdCons100
;;   {:added "1.0"
;;    :go "benchmarkChanProdCons100(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{11011941 0xc00465f5c0}) b])
;; 
JOKER FUNC runtime_test.BenchmarkChanProdConsWork0 has: 
;; (defn BenchmarkChanProdConsWork0
;;   {:added "1.0"
;;    :go "benchmarkChanProdConsWork0(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{11012026 0xc00465f740}) b])
;; 
JOKER FUNC runtime_test.BenchmarkChanProdConsWork10 has: 
;; (defn BenchmarkChanProdConsWork10
;;   {:added "1.0"
;;    :go "benchmarkChanProdConsWork10(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{11012112 0xc00465f8c0}) b])
;; 
JOKER FUNC runtime_test.BenchmarkChanProdConsWork100 has: 
;; (defn BenchmarkChanProdConsWork100
;;   {:added "1.0"
;;    :go "benchmarkChanProdConsWork100(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{11012200 0xc00465fa40}) b])
;; 
JOKER FUNC runtime_test.BenchmarkChanSem has: 
;; (defn BenchmarkChanSem
;;   {:added "1.0"
;;    :go "benchmarkChanSem(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{11013599 0xc0046632e0}) b])
;; 
JOKER FUNC runtime_test.BenchmarkChanSync has: 
;; (defn BenchmarkChanSync
;;   {:added "1.0"
;;    :go "benchmarkChanSync(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{11010902 0xc00465e160}) b])
;; 
JOKER FUNC runtime_test.BenchmarkChanSyncWork has: 
;; (defn BenchmarkChanSyncWork
;;   {:added "1.0"
;;    :go "benchmarkChanSyncWork(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{11010973 0xc00465e2c0}) b])
;; 
JOKER FUNC runtime_test.BenchmarkChanUncontended has: 
;; (defn BenchmarkChanUncontended
;;   {:added "1.0"
;;    :go "benchmarkChanUncontended(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{11009796 0xc0045feac0}) b])
;; 
JOKER FUNC runtime_test.BenchmarkClearFat1024 has: 
;; (defn BenchmarkClearFat1024
;;   {:added "1.0"
;;    :go "benchmarkClearFat1024(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{12432026 0xc005730840}) b])
;; 
JOKER FUNC runtime_test.BenchmarkClearFat12 has: 
;; (defn BenchmarkClearFat12
;;   {:added "1.0"
;;    :go "benchmarkClearFat12(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{12430863 0xc005726a00}) b])
;; 
JOKER FUNC runtime_test.BenchmarkClearFat128 has: 
;; (defn BenchmarkClearFat128
;;   {:added "1.0"
;;    :go "benchmarkClearFat128(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{12431704 0xc005730000}) b])
;; 
JOKER FUNC runtime_test.BenchmarkClearFat16 has: 
;; (defn BenchmarkClearFat16
;;   {:added "1.0"
;;    :go "benchmarkClearFat16(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{12430968 0xc005726cc0}) b])
;; 
JOKER FUNC runtime_test.BenchmarkClearFat24 has: 
;; (defn BenchmarkClearFat24
;;   {:added "1.0"
;;    :go "benchmarkClearFat24(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{12431073 0xc005726f80}) b])
;; 
JOKER FUNC runtime_test.BenchmarkClearFat256 has: 
;; (defn BenchmarkClearFat256
;;   {:added "1.0"
;;    :go "benchmarkClearFat256(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{12431811 0xc0057302c0}) b])
;; 
JOKER FUNC runtime_test.BenchmarkClearFat32 has: 
;; (defn BenchmarkClearFat32
;;   {:added "1.0"
;;    :go "benchmarkClearFat32(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{12431178 0xc005727240}) b])
;; 
JOKER FUNC runtime_test.BenchmarkClearFat40 has: 
;; (defn BenchmarkClearFat40
;;   {:added "1.0"
;;    :go "benchmarkClearFat40(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{12431283 0xc005727500}) b])
;; 
JOKER FUNC runtime_test.BenchmarkClearFat48 has: 
;; (defn BenchmarkClearFat48
;;   {:added "1.0"
;;    :go "benchmarkClearFat48(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{12431388 0xc0057277c0}) b])
;; 
JOKER FUNC runtime_test.BenchmarkClearFat512 has: 
;; (defn BenchmarkClearFat512
;;   {:added "1.0"
;;    :go "benchmarkClearFat512(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{12431918 0xc005730580}) b])
;; 
JOKER FUNC runtime_test.BenchmarkClearFat56 has: 
;; (defn BenchmarkClearFat56
;;   {:added "1.0"
;;    :go "benchmarkClearFat56(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{12431493 0xc005727a80}) b])
;; 
JOKER FUNC runtime_test.BenchmarkClearFat64 has: 
;; (defn BenchmarkClearFat64
;;   {:added "1.0"
;;    :go "benchmarkClearFat64(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{12431598 0xc005727d40}) b])
;; 
JOKER FUNC runtime_test.BenchmarkClearFat8 has: 
;; (defn BenchmarkClearFat8
;;   {:added "1.0"
;;    :go "benchmarkClearFat8(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{12430759 0xc005726740}) b])
;; 
JOKER FUNC runtime_test.BenchmarkClockVDSOAndFallbackPaths has: 
;; (defn BenchmarkClockVDSOAndFallbackPaths
;;   {:added "1.0"
;;    :go "benchmarkClockVDSOAndFallbackPaths(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{12513667 0xc0058706a0}) b])
;; 
JOKER FUNC runtime_test.BenchmarkClosureCall has: 
;; (defn BenchmarkClosureCall
;;   {:added "1.0"
;;    :go "benchmarkClosureCall(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{11534763 0xc003db2500}) b])
;; 
JOKER FUNC runtime_test.BenchmarkCompareStringBig has: 
;; (defn BenchmarkCompareStringBig
;;   {:added "1.0"
;;    :go "benchmarkCompareStringBig(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{11084522 0xc0038c4fc0}) b])
;; 
JOKER FUNC runtime_test.BenchmarkCompareStringBigUnaligned has: 
;; (defn BenchmarkCompareStringBigUnaligned
;;   {:added "1.0"
;;    :go "benchmarkCompareStringBigUnaligned(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{11084200 0xc0038c48e0}) b])
;; 
JOKER FUNC runtime_test.BenchmarkCompareStringDifferentLength has: 
;; (defn BenchmarkCompareStringDifferentLength
;;   {:added "1.0"
;;    :go "benchmarkCompareStringDifferentLength(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{11084018 0xc0038c45a0}) b])
;; 
JOKER FUNC runtime_test.BenchmarkCompareStringEqual has: 
;; (defn BenchmarkCompareStringEqual
;;   {:added "1.0"
;;    :go "benchmarkCompareStringEqual(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{11083464 0xc002b8dac0}) b])
;; 
JOKER FUNC runtime_test.BenchmarkCompareStringIdentical has: 
;; (defn BenchmarkCompareStringIdentical
;;   {:added "1.0"
;;    :go "benchmarkCompareStringIdentical(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{11083669 0xc002b8df20}) b])
;; 
JOKER FUNC runtime_test.BenchmarkCompareStringSameLength has: 
;; (defn BenchmarkCompareStringSameLength
;;   {:added "1.0"
;;    :go "benchmarkCompareStringSameLength(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{11083834 0xc0038c4260}) b])
;; 
JOKER FUNC runtime_test.BenchmarkComplex128DivDisInf has: 
;; (defn BenchmarkComplex128DivDisInf
;;   {:added "1.0"
;;    :go "benchmarkComplex128DivDisInf(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{11760446 0xc004ee47c0}) b])
;; 
JOKER FUNC runtime_test.BenchmarkComplex128DivDisNaN has: 
;; (defn BenchmarkComplex128DivDisNaN
;;   {:added "1.0"
;;    :go "benchmarkComplex128DivDisNaN(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{11760110 0xc004ed9f80}) b])
;; 
JOKER FUNC runtime_test.BenchmarkComplex128DivNisInf has: 
;; (defn BenchmarkComplex128DivNisInf
;;   {:added "1.0"
;;    :go "benchmarkComplex128DivNisInf(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{11760278 0xc004ee43a0}) b])
;; 
JOKER FUNC runtime_test.BenchmarkComplex128DivNisNaN has: 
;; (defn BenchmarkComplex128DivNisNaN
;;   {:added "1.0"
;;    :go "benchmarkComplex128DivNisNaN(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{11759942 0xc004ed9b60}) b])
;; 
JOKER FUNC runtime_test.BenchmarkComplex128DivNormal has: 
;; (defn BenchmarkComplex128DivNormal
;;   {:added "1.0"
;;    :go "benchmarkComplex128DivNormal(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{11759778 0xc004ed9720}) b])
;; 
JOKER FUNC runtime_test.BenchmarkComplexAlgMap has: 
;; (defn BenchmarkComplexAlgMap
;;   {:added "1.0"
;;    :go "benchmarkComplexAlgMap(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{11058330 0xc004738d20}) b])
;; 
JOKER FUNC runtime_test.BenchmarkConcatStringAndBytes has: 
;; (defn BenchmarkConcatStringAndBytes
;;   {:added "1.0"
;;    :go "benchmarkConcatStringAndBytes(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{11084825 0xc0038c5640}) b])
;; 
JOKER FUNC runtime_test.BenchmarkConvI2E has: 
;; (defn BenchmarkConvI2E
;;   {:added "1.0"
;;    :go "benchmarkConvI2E(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{11366287 0xc003b904c0}) b])
;; 
JOKER FUNC runtime_test.BenchmarkConvI2I has: 
;; (defn BenchmarkConvI2I
;;   {:added "1.0"
;;    :go "benchmarkConvI2I(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{11366377 0xc003b90740}) b])
;; 
JOKER FUNC runtime_test.BenchmarkConvT2ELarge has: 
;; (defn BenchmarkConvT2ELarge
;;   {:added "1.0"
;;    :go "benchmarkConvT2ELarge(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{11365943 0xc003b87c40}) b])
;; 
JOKER FUNC runtime_test.BenchmarkConvT2ESmall has: 
;; (defn BenchmarkConvT2ESmall
;;   {:added "1.0"
;;    :go "benchmarkConvT2ESmall(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{11365769 0xc003b87800}) b])
;; 
JOKER FUNC runtime_test.BenchmarkConvT2EUintptr has: 
;; (defn BenchmarkConvT2EUintptr
;;   {:added "1.0"
;;    :go "benchmarkConvT2EUintptr(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{11365857 0xc003b87a20}) b])
;; 
JOKER FUNC runtime_test.BenchmarkConvT2Ezero has: 
;; (defn BenchmarkConvT2Ezero
;;   {:added "1.0"
;;    :go "benchmarkConvT2Ezero(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{11370031 0xc003b9b580}) b])
;; 
JOKER FUNC runtime_test.BenchmarkConvT2ILarge has: 
;; (defn BenchmarkConvT2ILarge
;;   {:added "1.0"
;;    :go "benchmarkConvT2ILarge(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{11366205 0xc003b902a0}) b])
;; 
JOKER FUNC runtime_test.BenchmarkConvT2ISmall has: 
;; (defn BenchmarkConvT2ISmall
;;   {:added "1.0"
;;    :go "benchmarkConvT2ISmall(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{11366029 0xc003b87e60}) b])
;; 
JOKER FUNC runtime_test.BenchmarkConvT2IUintptr has: 
;; (defn BenchmarkConvT2IUintptr
;;   {:added "1.0"
;;    :go "benchmarkConvT2IUintptr(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{11366118 0xc003b90080}) b])
;; 
JOKER FUNC runtime_test.BenchmarkCopy has: 
;; (defn BenchmarkCopy
;;   {:added "1.0"
;;    :go "benchmarkCopy(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{11389265 0xc003bf5e20}) b])
;; 
JOKER FUNC runtime_test.BenchmarkCopyFat1024 has: 
;; (defn BenchmarkCopyFat1024
;;   {:added "1.0"
;;    :go "benchmarkCopyFat1024(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{12433261 0xc00573aa40}) b])
;; 
JOKER FUNC runtime_test.BenchmarkCopyFat12 has: 
;; (defn BenchmarkCopyFat12
;;   {:added "1.0"
;;    :go "benchmarkCopyFat12(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{12432243 0xc005730e20}) b])
;; 
JOKER FUNC runtime_test.BenchmarkCopyFat128 has: 
;; (defn BenchmarkCopyFat128
;;   {:added "1.0"
;;    :go "benchmarkCopyFat128(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{12432804 0xc005731dc0}) b])
;; 
JOKER FUNC runtime_test.BenchmarkCopyFat16 has: 
;; (defn BenchmarkCopyFat16
;;   {:added "1.0"
;;    :go "benchmarkCopyFat16(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{12432355 0xc005731140}) b])
;; 
JOKER FUNC runtime_test.BenchmarkCopyFat24 has: 
;; (defn BenchmarkCopyFat24
;;   {:added "1.0"
;;    :go "benchmarkCopyFat24(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{12432467 0xc005731460}) b])
;; 
JOKER FUNC runtime_test.BenchmarkCopyFat256 has: 
;; (defn BenchmarkCopyFat256
;;   {:added "1.0"
;;    :go "benchmarkCopyFat256(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{12432918 0xc00573a0e0}) b])
;; 
JOKER FUNC runtime_test.BenchmarkCopyFat32 has: 
;; (defn BenchmarkCopyFat32
;;   {:added "1.0"
;;    :go "benchmarkCopyFat32(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{12432579 0xc005731780}) b])
;; 
JOKER FUNC runtime_test.BenchmarkCopyFat512 has: 
;; (defn BenchmarkCopyFat512
;;   {:added "1.0"
;;    :go "benchmarkCopyFat512(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{12433032 0xc00573a400}) b])
;; 
JOKER FUNC runtime_test.BenchmarkCopyFat520 has: 
;; (defn BenchmarkCopyFat520
;;   {:added "1.0"
;;    :go "benchmarkCopyFat520(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{12433146 0xc00573a720}) b])
;; 
JOKER FUNC runtime_test.BenchmarkCopyFat64 has: 
;; (defn BenchmarkCopyFat64
;;   {:added "1.0"
;;    :go "benchmarkCopyFat64(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{12432691 0xc005731aa0}) b])
;; 
JOKER FUNC runtime_test.BenchmarkCopyFat8 has: 
;; (defn BenchmarkCopyFat8
;;   {:added "1.0"
;;    :go "benchmarkCopyFat8(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{12432132 0xc005730b00}) b])
;; 
JOKER FUNC runtime_test.BenchmarkCreateGoroutines has: 
;; (defn BenchmarkCreateGoroutines
;;   {:added "1.0"
;;    :go "benchmarkCreateGoroutines(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{11533995 0xc003da54a0}) b])
;; 
JOKER FUNC runtime_test.BenchmarkCreateGoroutinesCapture has: 
;; (defn BenchmarkCreateGoroutinesCapture
;;   {:added "1.0"
;;    :go "benchmarkCreateGoroutinesCapture(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{11534468 0xc003da5e20}) b])
;; 
JOKER FUNC runtime_test.BenchmarkCreateGoroutinesParallel has: 
;; (defn BenchmarkCreateGoroutinesParallel
;;   {:added "1.0"
;;    :go "benchmarkCreateGoroutinesParallel(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{11534086 0xc003da5600}) b])
;; 
JOKER FUNC runtime_test.BenchmarkDefer has: 
;; (defn BenchmarkDefer
;;   {:added "1.0"
;;    :go "benchmarkDefer(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{11765457 0xc004ef2e40}) b])
;; 
JOKER FUNC runtime_test.BenchmarkDefer10 has: 
;; (defn BenchmarkDefer10
;;   {:added "1.0"
;;    :go "benchmarkDefer10(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{11765680 0xc004ef3320}) b])
;; 
JOKER FUNC runtime_test.BenchmarkDeferMany has: 
;; (defn BenchmarkDeferMany
;;   {:added "1.0"
;;    :go "benchmarkDeferMany(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{11765943 0xc004ef38e0}) b])
;; 
JOKER FUNC runtime_test.BenchmarkEfaceCmpDiff has: 
;; (defn BenchmarkEfaceCmpDiff
;;   {:added "1.0"
;;    :go "benchmarkEfaceCmpDiff(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{11765240 0xc004ef2980}) b])
;; 
JOKER FUNC runtime_test.BenchmarkEqEfaceConcrete has: 
;; (defn BenchmarkEqEfaceConcrete
;;   {:added "1.0"
;;    :go "benchmarkEqEfaceConcrete(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{11365394 0xc003b86f00}) b])
;; 
JOKER FUNC runtime_test.BenchmarkEqIfaceConcrete has: 
;; (defn BenchmarkEqIfaceConcrete
;;   {:added "1.0"
;;    :go "benchmarkEqIfaceConcrete(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{11365488 0xc003b87140}) b])
;; 
JOKER FUNC runtime_test.BenchmarkExtendSlice has: 
;; (defn BenchmarkExtendSlice
;;   {:added "1.0"
;;    :go "benchmarkExtendSlice(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{11386357 0xc003be5700}) b])
;; 
JOKER FUNC runtime_test.BenchmarkFastrand has: 
;; (defn BenchmarkFastrand
;;   {:added "1.0"
;;    :go "benchmarkFastrand(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{11774258 0xc004f16ee0}) b])
;; 
JOKER FUNC runtime_test.BenchmarkFastrandHashiter has: 
;; (defn BenchmarkFastrandHashiter
;;   {:added "1.0"
;;    :go "benchmarkFastrandHashiter(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{11774386 0xc004f171c0}) b])
;; 
JOKER FUNC runtime_test.BenchmarkFastrandn has: 
;; (defn BenchmarkFastrandn
;;   {:added "1.0"
;;    :go "benchmarkFastrandn(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{11774616 0xc004f176c0}) b])
;; 
JOKER FUNC runtime_test.BenchmarkFinalizer has: 
;; (defn BenchmarkFinalizer
;;   {:added "1.0"
;;    :go "benchmarkFinalizer(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{11493347 0xc003d082a0}) b])
;; 
JOKER FUNC runtime_test.BenchmarkFinalizerRun has: 
;; (defn BenchmarkFinalizerRun
;;   {:added "1.0"
;;    :go "benchmarkFinalizerRun(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{11493709 0xc003d08aa0}) b])
;; 
JOKER FUNC runtime_test.BenchmarkGoMapClear has: 
;; (defn BenchmarkGoMapClear
;;   {:added "1.0"
;;    :go "benchmarkGoMapClear(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{11058485 0xc0047390a0}) b])
;; 
JOKER FUNC runtime_test.BenchmarkGoMemclr has: 
;; (defn BenchmarkGoMemclr
;;   {:added "1.0"
;;    :go "benchmarkGoMemclr(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{12430546 0xc0057261c0}) b])
;; 
JOKER FUNC runtime_test.BenchmarkGoroutineBlocking has: 
;; (defn BenchmarkGoroutineBlocking
;;   {:added "1.0"
;;    :go "benchmarkGoroutineBlocking(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{12309895 0xc005574e20}) b])
;; 
JOKER FUNC runtime_test.BenchmarkGoroutineForRange has: 
;; (defn BenchmarkGoroutineForRange
;;   {:added "1.0"
;;    :go "benchmarkGoroutineForRange(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{12310064 0xc005575160}) b])
;; 
JOKER FUNC runtime_test.BenchmarkGoroutineIdle has: 
;; (defn BenchmarkGoroutineIdle
;;   {:added "1.0"
;;    :go "benchmarkGoroutineIdle(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{12310659 0xc005575e80}) b])
;; 
JOKER FUNC runtime_test.BenchmarkGoroutineSelect has: 
;; (defn BenchmarkGoroutineSelect
;;   {:added "1.0"
;;    :go "benchmarkGoroutineSelect(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{12309642 0xc005574a00}) b])
;; 
JOKER FUNC runtime_test.BenchmarkGrowSlice has: 
;; (defn BenchmarkGrowSlice
;;   {:added "1.0"
;;    :go "benchmarkGrowSlice(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{11385265 0xc003bdf860}) b])
;; 
JOKER FUNC runtime_test.BenchmarkHash1024 has: 
;; (defn BenchmarkHash1024
;;   {:added "1.0"
;;    :go "benchmarkHash1024(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{12457771 0xc0057b9ee0}) b])
;; 
JOKER FUNC runtime_test.BenchmarkHash16 has: 
;; (defn BenchmarkHash16
;;   {:added "1.0"
;;    :go "benchmarkHash16(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{12457643 0xc0057b9c20}) b])
;; 
JOKER FUNC runtime_test.BenchmarkHash5 has: 
;; (defn BenchmarkHash5
;;   {:added "1.0"
;;    :go "benchmarkHash5(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{12457580 0xc0057b9ac0}) b])
;; 
JOKER FUNC runtime_test.BenchmarkHash64 has: 
;; (defn BenchmarkHash64
;;   {:added "1.0"
;;    :go "benchmarkHash64(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{12457706 0xc0057b9d80}) b])
;; 
JOKER FUNC runtime_test.BenchmarkHash65536 has: 
;; (defn BenchmarkHash65536
;;   {:added "1.0"
;;    :go "benchmarkHash65536(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{12457837 0xc0057c4040}) b])
;; 
JOKER FUNC runtime_test.BenchmarkHashBytesSpeed has: 
;; (defn BenchmarkHashBytesSpeed
;;   {:added "1.0"
;;    :go "benchmarkHashBytesSpeed(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{11052360 0xc0044de640}) b])
;; 
JOKER FUNC runtime_test.BenchmarkHashInt32Speed has: 
;; (defn BenchmarkHashInt32Speed
;;   {:added "1.0"
;;    :go "benchmarkHashInt32Speed(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{11052855 0xc0044def20}) b])
;; 
JOKER FUNC runtime_test.BenchmarkHashInt64Speed has: 
;; (defn BenchmarkHashInt64Speed
;;   {:added "1.0"
;;    :go "benchmarkHashInt64Speed(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{11053197 0xc0044df740}) b])
;; 
JOKER FUNC runtime_test.BenchmarkHashStringArraySpeed has: 
;; (defn BenchmarkHashStringArraySpeed
;;   {:added "1.0"
;;    :go "benchmarkHashStringArraySpeed(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{11053544 0xc0044dff60}) b])
;; 
JOKER FUNC runtime_test.BenchmarkHashStringSpeed has: 
;; (defn BenchmarkHashStringSpeed
;;   {:added "1.0"
;;    :go "benchmarkHashStringSpeed(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{11051964 0xc0042c5d00}) b])
;; 
JOKER FUNC runtime_test.BenchmarkIfaceCmp100 has: 
;; (defn BenchmarkIfaceCmp100
;;   {:added "1.0"
;;    :go "benchmarkIfaceCmp100(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{11764845 0xc004ef2200}) b])
;; 
JOKER FUNC runtime_test.BenchmarkIfaceCmpNil100 has: 
;; (defn BenchmarkIfaceCmpNil100
;;   {:added "1.0"
;;    :go "benchmarkIfaceCmpNil100(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{11765018 0xc004ef25a0}) b])
;; 
JOKER FUNC runtime_test.BenchmarkIntMap has: 
;; (defn BenchmarkIntMap
;;   {:added "1.0"
;;    :go "benchmarkIntMap(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{11055733 0xc0044e71e0}) b])
;; 
JOKER FUNC runtime_test.BenchmarkIssue18740 has: 
;; (defn BenchmarkIssue18740
;;   {:added "1.0"
;;    :go "benchmarkIssue18740(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{12433377 0xc00573ad60}) b])
;; 
JOKER FUNC runtime_test.BenchmarkMakeChan has: 
;; (defn BenchmarkMakeChan
;;   {:added "1.0"
;;    :go "benchmarkMakeChan(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{11007329 0xc0045b3740}) b])
;; 
JOKER FUNC runtime_test.BenchmarkMakeSlice has: 
;; (defn BenchmarkMakeSlice
;;   {:added "1.0"
;;    :go "benchmarkMakeSlice(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{11385025 0xc003bdf180}) b])
;; 
JOKER FUNC runtime_test.BenchmarkMalloc16 has: 
;; (defn BenchmarkMalloc16
;;   {:added "1.0"
;;    :go "benchmarkMalloc16(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{12308775 0xc00556d680}) b])
;; 
JOKER FUNC runtime_test.BenchmarkMalloc8 has: 
;; (defn BenchmarkMalloc8
;;   {:added "1.0"
;;    :go "benchmarkMalloc8(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{12308619 0xc00556d2c0}) b])
;; 
JOKER FUNC runtime_test.BenchmarkMallocLargeStruct has: 
;; (defn BenchmarkMallocLargeStruct
;;   {:added "1.0"
;;    :go "benchmarkMallocLargeStruct(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{12309410 0xc0055744c0}) b])
;; 
JOKER FUNC runtime_test.BenchmarkMallocTypeInfo16 has: 
;; (defn BenchmarkMallocTypeInfo16
;;   {:added "1.0"
;;    :go "benchmarkMallocTypeInfo16(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{12309153 0xc00556df40}) b])
;; 
JOKER FUNC runtime_test.BenchmarkMallocTypeInfo8 has: 
;; (defn BenchmarkMallocTypeInfo8
;;   {:added "1.0"
;;    :go "benchmarkMallocTypeInfo8(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{12308941 0xc00556da60}) b])
;; 
JOKER FUNC runtime_test.BenchmarkMapAppendAssign has: 
;; (defn BenchmarkMapAppendAssign
;;   {:added "1.0"
;;    :go "benchmarkMapAppendAssign(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{11564746 0xc004c52500}) b])
;; 
JOKER FUNC runtime_test.BenchmarkMapAssign has: 
;; (defn BenchmarkMapAssign
;;   {:added "1.0"
;;    :go "benchmarkMapAssign(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{11564252 0xc004c4ba00}) b])
;; 
JOKER FUNC runtime_test.BenchmarkMapDelete has: 
;; (defn BenchmarkMapDelete
;;   {:added "1.0"
;;    :go "benchmarkMapDelete(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{11564992 0xc004c52a80}) b])
;; 
JOKER FUNC runtime_test.BenchmarkMapIter has: 
;; (defn BenchmarkMapIter
;;   {:added "1.0"
;;    :go "benchmarkMapIter(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{11056781 0xc0047368e0}) b])
;; 
JOKER FUNC runtime_test.BenchmarkMapIterEmpty has: 
;; (defn BenchmarkMapIterEmpty
;;   {:added "1.0"
;;    :go "benchmarkMapIterEmpty(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{11056962 0xc004736d20}) b])
;; 
JOKER FUNC runtime_test.BenchmarkMapOperatorAssign has: 
;; (defn BenchmarkMapOperatorAssign
;;   {:added "1.0"
;;    :go "benchmarkMapOperatorAssign(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{11564488 0xc004c4bf80}) b])
;; 
JOKER FUNC runtime_test.BenchmarkMapPop100 has: 
;; (defn BenchmarkMapPop100
;;   {:added "1.0"
;;    :go "benchmarkMapPop100(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{11560489 0xc004c37e40}) b])
;; 
JOKER FUNC runtime_test.BenchmarkMapPop1000 has: 
;; (defn BenchmarkMapPop1000
;;   {:added "1.0"
;;    :go "benchmarkMapPop1000(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{11560558 0xc004c37fa0}) b])
;; 
JOKER FUNC runtime_test.BenchmarkMapPop10000 has: 
;; (defn BenchmarkMapPop10000
;;   {:added "1.0"
;;    :go "benchmarkMapPop10000(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{11560628 0xc004c3a100}) b])
;; 
JOKER FUNC runtime_test.BenchmarkMapPopulate has: 
;; (defn BenchmarkMapPopulate
;;   {:added "1.0"
;;    :go "benchmarkMapPopulate(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{11057912 0xc004738360}) b])
;; 
JOKER FUNC runtime_test.BenchmarkMapStringKeysEight_16 has: 
;; (defn BenchmarkMapStringKeysEight_16
;;   {:added "1.0"
;;    :go "benchmarkMapStringKeysEight_16(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{11055132 0xc0044e6600}) b])
;; 
JOKER FUNC runtime_test.BenchmarkMapStringKeysEight_1M has: 
;; (defn BenchmarkMapStringKeysEight_1M
;;   {:added "1.0"
;;    :go "benchmarkMapStringKeysEight_1M(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{11055399 0xc0044e6a20}) b])
;; 
JOKER FUNC runtime_test.BenchmarkMapStringKeysEight_32 has: 
;; (defn BenchmarkMapStringKeysEight_32
;;   {:added "1.0"
;;    :go "benchmarkMapStringKeysEight_32(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{11055221 0xc0044e6760}) b])
;; 
JOKER FUNC runtime_test.BenchmarkMapStringKeysEight_64 has: 
;; (defn BenchmarkMapStringKeysEight_64
;;   {:added "1.0"
;;    :go "benchmarkMapStringKeysEight_64(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{11055310 0xc0044e68c0}) b])
;; 
JOKER FUNC runtime_test.BenchmarkMatmult has: 
;; (defn BenchmarkMatmult
;;   {:added "1.0"
;;    :go "benchmarkMatmult(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{11538084 0xc003db4a20}) b])
;; 
JOKER FUNC runtime_test.BenchmarkMegEmptyMap has: 
;; (defn BenchmarkMegEmptyMap
;;   {:added "1.0"
;;    :go "benchmarkMegEmptyMap(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{11054723 0xc0044e3c40}) b])
;; 
JOKER FUNC runtime_test.BenchmarkMegEqMap has: 
;; (defn BenchmarkMegEqMap
;;   {:added "1.0"
;;    :go "benchmarkMegEqMap(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{11054466 0xc0044e3620}) b])
;; 
JOKER FUNC runtime_test.BenchmarkMegMap has: 
;; (defn BenchmarkMegMap
;;   {:added "1.0"
;;    :go "benchmarkMegMap(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{11053974 0xc0044e2940}) b])
;; 
JOKER FUNC runtime_test.BenchmarkMegOneMap has: 
;; (defn BenchmarkMegOneMap
;;   {:added "1.0"
;;    :go "benchmarkMegOneMap(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{11054260 0xc0044e3080}) b])
;; 
JOKER FUNC runtime_test.BenchmarkMemclr has: 
;; (defn BenchmarkMemclr
;;   {:added "1.0"
;;    :go "benchmarkMemclr(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{12430083 0xc00571f460}) b])
;; 
JOKER FUNC runtime_test.BenchmarkMemmove has: 
;; (defn BenchmarkMemmove
;;   {:added "1.0"
;;    :go "benchmarkMemmove(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{12428799 0xc0057176a0}) b])
;; 
JOKER FUNC runtime_test.BenchmarkMemmoveUnalignedDst has: 
;; (defn BenchmarkMemmoveUnalignedDst
;;   {:added "1.0"
;;    :go "benchmarkMemmoveUnalignedDst(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{12429006 0xc005717be0}) b])
;; 
JOKER FUNC runtime_test.BenchmarkMemmoveUnalignedSrc has: 
;; (defn BenchmarkMemmoveUnalignedSrc
;;   {:added "1.0"
;;    :go "benchmarkMemmoveUnalignedSrc(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{12429219 0xc00571e160}) b])
;; 
JOKER FUNC runtime_test.BenchmarkNeEfaceConcrete has: 
;; (defn BenchmarkNeEfaceConcrete
;;   {:added "1.0"
;;    :go "benchmarkNeEfaceConcrete(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{11365583 0xc003b87380}) b])
;; 
JOKER FUNC runtime_test.BenchmarkNeIfaceConcrete has: 
;; (defn BenchmarkNeIfaceConcrete
;;   {:added "1.0"
;;    :go "benchmarkNeIfaceConcrete(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{11365677 0xc003b875c0}) b])
;; 
JOKER FUNC runtime_test.BenchmarkNewEmptyMap has: 
;; (defn BenchmarkNewEmptyMap
;;   {:added "1.0"
;;    :go "benchmarkNewEmptyMap(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{11056526 0xc004736240}) b])
;; 
JOKER FUNC runtime_test.BenchmarkNewSmallMap has: 
;; (defn BenchmarkNewSmallMap
;;   {:added "1.0"
;;    :go "benchmarkNewSmallMap(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{11056644 0xc004736520}) b])
;; 
JOKER FUNC runtime_test.BenchmarkPingPongHog has: 
;; (defn BenchmarkPingPongHog
;;   {:added "1.0"
;;    :go "benchmarkPingPongHog(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{11530927 0xc003d9c580}) b])
;; 
JOKER FUNC runtime_test.BenchmarkRWMutexUncontended has: 
;; (defn BenchmarkRWMutexUncontended
;;   {:added "1.0"
;;    :go "benchmarkRWMutexUncontended(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{11131378 0xc00357dfe0}) b])
;; 
JOKER FUNC runtime_test.BenchmarkRWMutexWorkWrite10 has: 
;; (defn BenchmarkRWMutexWorkWrite10
;;   {:added "1.0"
;;    :go "benchmarkRWMutexWorkWrite10(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{11132274 0xc003583200}) b])
;; 
JOKER FUNC runtime_test.BenchmarkRWMutexWorkWrite100 has: 
;; (defn BenchmarkRWMutexWorkWrite100
;;   {:added "1.0"
;;    :go "benchmarkRWMutexWorkWrite100(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{11132191 0xc003583080}) b])
;; 
JOKER FUNC runtime_test.BenchmarkRWMutexWrite10 has: 
;; (defn BenchmarkRWMutexWrite10
;;   {:added "1.0"
;;    :go "benchmarkRWMutexWrite10(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{11132110 0xc003582f00}) b])
;; 
JOKER FUNC runtime_test.BenchmarkRWMutexWrite100 has: 
;; (defn BenchmarkRWMutexWrite100
;;   {:added "1.0"
;;    :go "benchmarkRWMutexWrite100(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{11132033 0xc003582d80}) b])
;; 
JOKER FUNC runtime_test.BenchmarkReadMemStats has: 
;; (defn BenchmarkReadMemStats
;;   {:added "1.0"
;;    :go "benchmarkReadMemStats(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{11212463 0xc003e3be00}) b])
;; 
JOKER FUNC runtime_test.BenchmarkRepeatedLookupStrMapKey1M has: 
;; (defn BenchmarkRepeatedLookupStrMapKey1M
;;   {:added "1.0"
;;    :go "benchmarkRepeatedLookupStrMapKey1M(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{11056447 0xc0047360c0}) b])
;; 
JOKER FUNC runtime_test.BenchmarkRepeatedLookupStrMapKey32 has: 
;; (defn BenchmarkRepeatedLookupStrMapKey32
;;   {:added "1.0"
;;    :go "benchmarkRepeatedLookupStrMapKey32(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{11056358 0xc0044e7f60}) b])
;; 
JOKER FUNC runtime_test.BenchmarkRuneCount has: 
;; (defn BenchmarkRuneCount
;;   {:added "1.0"
;;    :go "benchmarkRuneCount(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{11085429 0xc0021621c0}) b])
;; 
JOKER FUNC runtime_test.BenchmarkRuneIterate has: 
;; (defn BenchmarkRuneIterate
;;   {:added "1.0"
;;    :go "benchmarkRuneIterate(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{11086214 0xc002163400}) b])
;; 
JOKER FUNC runtime_test.BenchmarkSameLengthMap has: 
;; (defn BenchmarkSameLengthMap
;;   {:added "1.0"
;;    :go "benchmarkSameLengthMap(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{11057101 0xc004737040}) b])
;; 
JOKER FUNC runtime_test.BenchmarkScanStackNoLocals has: 
;; (defn BenchmarkScanStackNoLocals
;;   {:added "1.0"
;;    :go "benchmarkScanStackNoLocals(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{11215751 0xc003e61440}) b])
;; 
JOKER FUNC runtime_test.BenchmarkSelectAsyncContended has: 
;; (defn BenchmarkSelectAsyncContended
;;   {:added "1.0"
;;    :go "benchmarkSelectAsyncContended(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{11009100 0xc0045b7ec0}) b])
;; 
JOKER FUNC runtime_test.BenchmarkSelectNonblock has: 
;; (defn BenchmarkSelectNonblock
;;   {:added "1.0"
;;    :go "benchmarkSelectNonblock(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{11009395 0xc0045fe4a0}) b])
;; 
JOKER FUNC runtime_test.BenchmarkSelectProdCons has: 
;; (defn BenchmarkSelectProdCons
;;   {:added "1.0"
;;    :go "benchmarkSelectProdCons(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{11012284 0xc00465fbc0}) b])
;; 
JOKER FUNC runtime_test.BenchmarkSelectSyncContended has: 
;; (defn BenchmarkSelectSyncContended
;;   {:added "1.0"
;;    :go "benchmarkSelectSyncContended(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{11008666 0xc0045b7820}) b])
;; 
JOKER FUNC runtime_test.BenchmarkSelectUncontended has: 
;; (defn BenchmarkSelectUncontended
;;   {:added "1.0"
;;    :go "benchmarkSelectUncontended(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{11008404 0xc0045b7300}) b])
;; 
JOKER FUNC runtime_test.BenchmarkSetTypeNode1 has: 
;; (defn BenchmarkSetTypeNode1
;;   {:added "1.0"
;;    :go "benchmarkSetTypeNode1(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{11207383 0xc0026d3ca0}) b])
;; 
JOKER FUNC runtime_test.BenchmarkSetTypeNode1024 has: 
;; (defn BenchmarkSetTypeNode1024
;;   {:added "1.0"
;;    :go "benchmarkSetTypeNode1024(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{11209296 0xc0026de0a0}) b])
;; 
JOKER FUNC runtime_test.BenchmarkSetTypeNode1024Slice has: 
;; (defn BenchmarkSetTypeNode1024Slice
;;   {:added "1.0"
;;    :go "benchmarkSetTypeNode1024Slice(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{11209382 0xc0026de220}) b])
;; 
JOKER FUNC runtime_test.BenchmarkSetTypeNode124 has: 
;; (defn BenchmarkSetTypeNode124
;;   {:added "1.0"
;;    :go "benchmarkSetTypeNode124(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{11208333 0xc0026d6ea0}) b])
;; 
JOKER FUNC runtime_test.BenchmarkSetTypeNode124Slice has: 
;; (defn BenchmarkSetTypeNode124Slice
;;   {:added "1.0"
;;    :go "benchmarkSetTypeNode124Slice(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{11208417 0xc0026d7020}) b])
;; 
JOKER FUNC runtime_test.BenchmarkSetTypeNode126 has: 
;; (defn BenchmarkSetTypeNode126
;;   {:added "1.0"
;;    :go "benchmarkSetTypeNode126(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{11208573 0xc0026d7320}) b])
;; 
JOKER FUNC runtime_test.BenchmarkSetTypeNode126Slice has: 
;; (defn BenchmarkSetTypeNode126Slice
;;   {:added "1.0"
;;    :go "benchmarkSetTypeNode126Slice(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{11208657 0xc0026d74a0}) b])
;; 
JOKER FUNC runtime_test.BenchmarkSetTypeNode128 has: 
;; (defn BenchmarkSetTypeNode128
;;   {:added "1.0"
;;    :go "benchmarkSetTypeNode128(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{11208813 0xc0026d77a0}) b])
;; 
JOKER FUNC runtime_test.BenchmarkSetTypeNode128Slice has: 
;; (defn BenchmarkSetTypeNode128Slice
;;   {:added "1.0"
;;    :go "benchmarkSetTypeNode128Slice(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{11208897 0xc0026d7920}) b])
;; 
JOKER FUNC runtime_test.BenchmarkSetTypeNode130 has: 
;; (defn BenchmarkSetTypeNode130
;;   {:added "1.0"
;;    :go "benchmarkSetTypeNode130(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{11209053 0xc0026d7c20}) b])
;; 
JOKER FUNC runtime_test.BenchmarkSetTypeNode130Slice has: 
;; (defn BenchmarkSetTypeNode130Slice
;;   {:added "1.0"
;;    :go "benchmarkSetTypeNode130Slice(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{11209137 0xc0026d7da0}) b])
;; 
JOKER FUNC runtime_test.BenchmarkSetTypeNode1Slice has: 
;; (defn BenchmarkSetTypeNode1Slice
;;   {:added "1.0"
;;    :go "benchmarkSetTypeNode1Slice(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{11207463 0xc0026d3e20}) b])
;; 
JOKER FUNC runtime_test.BenchmarkSetTypeNode64 has: 
;; (defn BenchmarkSetTypeNode64
;;   {:added "1.0"
;;    :go "benchmarkSetTypeNode64(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{11207842 0xc0026d65a0}) b])
;; 
JOKER FUNC runtime_test.BenchmarkSetTypeNode64Dead has: 
;; (defn BenchmarkSetTypeNode64Dead
;;   {:added "1.0"
;;    :go "benchmarkSetTypeNode64Dead(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{11208084 0xc0026d6a20}) b])
;; 
JOKER FUNC runtime_test.BenchmarkSetTypeNode64DeadSlice has: 
;; (defn BenchmarkSetTypeNode64DeadSlice
;;   {:added "1.0"
;;    :go "benchmarkSetTypeNode64DeadSlice(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{11208174 0xc0026d6ba0}) b])
;; 
JOKER FUNC runtime_test.BenchmarkSetTypeNode64Slice has: 
;; (defn BenchmarkSetTypeNode64Slice
;;   {:added "1.0"
;;    :go "benchmarkSetTypeNode64Slice(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{11207924 0xc0026d6720}) b])
;; 
JOKER FUNC runtime_test.BenchmarkSetTypeNode8 has: 
;; (defn BenchmarkSetTypeNode8
;;   {:added "1.0"
;;    :go "benchmarkSetTypeNode8(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{11207611 0xc0026d6120}) b])
;; 
JOKER FUNC runtime_test.BenchmarkSetTypeNode8Slice has: 
;; (defn BenchmarkSetTypeNode8Slice
;;   {:added "1.0"
;;    :go "benchmarkSetTypeNode8Slice(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{11207691 0xc0026d62a0}) b])
;; 
JOKER FUNC runtime_test.BenchmarkSetTypePtr has: 
;; (defn BenchmarkSetTypePtr
;;   {:added "1.0"
;;    :go "benchmarkSetTypePtr(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{11206678 0xc0026d2d40}) b])
;; 
JOKER FUNC runtime_test.BenchmarkSetTypePtr126 has: 
;; (defn BenchmarkSetTypePtr126
;;   {:added "1.0"
;;    :go "benchmarkSetTypePtr126(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{11207068 0xc0026d35e0}) b])
;; 
JOKER FUNC runtime_test.BenchmarkSetTypePtr128 has: 
;; (defn BenchmarkSetTypePtr128
;;   {:added "1.0"
;;    :go "benchmarkSetTypePtr128(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{11207149 0xc0026d37a0}) b])
;; 
JOKER FUNC runtime_test.BenchmarkSetTypePtr16 has: 
;; (defn BenchmarkSetTypePtr16
;;   {:added "1.0"
;;    :go "benchmarkSetTypePtr16(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{11206830 0xc0026d30a0}) b])
;; 
JOKER FUNC runtime_test.BenchmarkSetTypePtr32 has: 
;; (defn BenchmarkSetTypePtr32
;;   {:added "1.0"
;;    :go "benchmarkSetTypePtr32(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{11206909 0xc0026d3260}) b])
;; 
JOKER FUNC runtime_test.BenchmarkSetTypePtr64 has: 
;; (defn BenchmarkSetTypePtr64
;;   {:added "1.0"
;;    :go "benchmarkSetTypePtr64(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{11206988 0xc0026d3420}) b])
;; 
JOKER FUNC runtime_test.BenchmarkSetTypePtr8 has: 
;; (defn BenchmarkSetTypePtr8
;;   {:added "1.0"
;;    :go "benchmarkSetTypePtr8(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{11206752 0xc0026d2ee0}) b])
;; 
JOKER FUNC runtime_test.BenchmarkSetTypePtrSlice has: 
;; (defn BenchmarkSetTypePtrSlice
;;   {:added "1.0"
;;    :go "benchmarkSetTypePtrSlice(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{11207232 0xc0026d3960}) b])
;; 
JOKER FUNC runtime_test.BenchmarkSliceByteToString has: 
;; (defn BenchmarkSliceByteToString
;;   {:added "1.0"
;;    :go "benchmarkSliceByteToString(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{11084986 0xc0038c5960}) b])
;; 
JOKER FUNC runtime_test.BenchmarkSmallKeyMap has: 
;; (defn BenchmarkSmallKeyMap
;;   {:added "1.0"
;;    :go "benchmarkSmallKeyMap(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{11057785 0xc004738020}) b])
;; 
JOKER FUNC runtime_test.BenchmarkSmallStrMap has: 
;; (defn BenchmarkSmallStrMap
;;   {:added "1.0"
;;    :go "benchmarkSmallStrMap(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{11054894 0xc0044e60c0}) b])
;; 
JOKER FUNC runtime_test.BenchmarkStackCopy has: 
;; (defn BenchmarkStackCopy
;;   {:added "1.0"
;;    :go "benchmarkStackCopy(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{11350939 0xc003b49de0}) b])
;; 
JOKER FUNC runtime_test.BenchmarkStackCopyNoCache has: 
;; (defn BenchmarkStackCopyNoCache
;;   {:added "1.0"
;;    :go "benchmarkStackCopyNoCache(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{11351176 0xc003b52340}) b])
;; 
JOKER FUNC runtime_test.BenchmarkStackCopyPtr has: 
;; (defn BenchmarkStackCopyPtr
;;   {:added "1.0"
;;    :go "benchmarkStackCopyPtr(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{11350706 0xc003b49820}) b])
;; 
JOKER FUNC runtime_test.BenchmarkStackGrowth has: 
;; (defn BenchmarkStackGrowth
;;   {:added "1.0"
;;    :go "benchmarkStackGrowth(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{11533836 0xc003da51e0}) b])
;; 
JOKER FUNC runtime_test.BenchmarkStackGrowthDeep has: 
;; (defn BenchmarkStackGrowthDeep
;;   {:added "1.0"
;;    :go "benchmarkStackGrowthDeep(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{11533914 0xc003da5340}) b])
;; 
JOKER FUNC runtime_test.BenchmarkSyscall has: 
;; (defn BenchmarkSyscall
;;   "Syscall tests split stack between Entersyscall and Exitsyscall under race detector."
;;   {:added "1.0"
;;    :go "benchmarkSyscall(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{12237464 0xc005460220}) b])
;; 
JOKER FUNC runtime_test.BenchmarkSyscallExcess has: 
;; (defn BenchmarkSyscallExcess
;;   {:added "1.0"
;;    :go "benchmarkSyscallExcess(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{12237612 0xc005460580}) b])
;; 
JOKER FUNC runtime_test.BenchmarkSyscallExcessWork has: 
;; (defn BenchmarkSyscallExcessWork
;;   {:added "1.0"
;;    :go "benchmarkSyscallExcessWork(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{12237690 0xc005460700}) b])
;; 
JOKER FUNC runtime_test.BenchmarkSyscallWork has: 
;; (defn BenchmarkSyscallWork
;;   {:added "1.0"
;;    :go "benchmarkSyscallWork(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{12237536 0xc005460400}) b])
;; 
JOKER FUNC runtime_test.BenchmarkTimeNow has: 
;; (defn BenchmarkTimeNow
;;   {:added "1.0"
;;    :go "benchmarkTimeNow(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{12513969 0xc005870c60}) b])
;; 
JOKER FUNC runtime_test.BenchmarkUnalignedLoad has: 
;; (defn BenchmarkUnalignedLoad
;;   {:added "1.0"
;;    :go "benchmarkUnalignedLoad(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{12460196 0xc0057ca560}) b])
;; 
JOKER FUNC runtime_test.BenchmarkWakeupParallelSpinning has: 
;; (defn BenchmarkWakeupParallelSpinning
;;   {:added "1.0"
;;    :go "benchmarkWakeupParallelSpinning(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{11537339 0xc003db4100}) b])
;; 
JOKER FUNC runtime_test.BenchmarkWakeupParallelSyscall has: 
;; (defn BenchmarkWakeupParallelSyscall
;;   {:added "1.0"
;;    :go "benchmarkWakeupParallelSyscall(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{11537847 0xc003db4660}) b])
;; 
JOKER FUNC runtime_test.BenchmarkWriteBarrier has: 
;; (defn BenchmarkWriteBarrier
;;   {:added "1.0"
;;    :go "benchmarkWriteBarrier(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{11213707 0xc003e3f340}) b])
;; 
JOKER FUNC runtime_test.ExampleFrames has: 
;; (defn ExampleFrames
;;   {:added "1.0"
;;    :go "exampleFrames()"}
;;   [])
;; 
JOKER FUNC runtime_test.HammerRWMutex has: 
;; (defn HammerRWMutex
;;   {:added "1.0"
;;    :go "hammerRWMutex(gomaxprocs, numReaders, num_iterations)"}
;;   [^Int gomaxprocs, ^Int numReaders, ^Int num_iterations])
;; 
JOKER FUNC runtime_test.TestAbort has: 
;; (defn TestAbort
;;   "Test that runtime.abort does so."
;;   {:added "1.0"
;;    :go "testAbort(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{12254798 0xc0054ab1c0}) t])
;; 
JOKER FUNC runtime_test.TestAlias has: 
;; (defn TestAlias
;;   "Maps aren't actually copied on assignment."
;;   {:added "1.0"
;;    :go "testAlias(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{11544802 0xc003dcf980}) t])
;; 
JOKER FUNC runtime_test.TestAppendGrowth has: 
;; (defn TestAppendGrowth
;;   {:added "1.0"
;;    :go "testAppendGrowth(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{11770793 0xc004f07860}) t])
;; 
JOKER FUNC runtime_test.TestAppendOverlap has: 
;; (defn TestAppendOverlap
;;   {:added "1.0"
;;    :go "testAppendOverlap(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{11389033 0xc003bf59e0}) t])
;; 
JOKER FUNC runtime_test.TestAppendSliceGrowth has: 
;; (defn TestAppendSliceGrowth
;;   {:added "1.0"
;;    :go "testAppendSliceGrowth(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{11771124 0xc004f07f60}) t])
;; 
JOKER FUNC runtime_test.TestArenaCollision has: 
;; (defn TestArenaCollision
;;   {:added "1.0"
;;    :go "testArenaCollision(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{12306752 0xc005567c60}) t])
;; 
JOKER FUNC runtime_test.TestArrayHash has: 
;; (defn TestArrayHash
;;   {:added "1.0"
;;    :go "testArrayHash(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{12457899 0xc0057c41a0}) t])
;; 
JOKER FUNC runtime_test.TestAtoi has: 
;; (defn TestAtoi
;;   {:added "1.0"
;;    :go "testAtoi(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{11090832 0xc003e7b2c0}) t])
;; 
JOKER FUNC runtime_test.TestAtoi32 has: 
;; (defn TestAtoi32
;;   {:added "1.0"
;;    :go "testAtoi32(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{11091987 0xc003ef6b20}) t])
;; 
JOKER FUNC runtime_test.TestBadOpen has: 
;; (defn TestBadOpen
;;   {:added "1.0"
;;    :go "testBadOpen(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{11770031 0xc004f06b20}) t])
;; 
JOKER FUNC runtime_test.TestBadTraceback has: 
;; (defn TestBadTraceback
;;   {:added "1.0"
;;    :go "testBadTraceback(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{12253873 0xc0054aa220}) t])
;; 
JOKER FUNC runtime_test.TestBigItems has: 
;; (defn TestBigItems
;;   {:added "1.0"
;;    :go "testBigItems(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{11549063 0xc003de4480}) t])
;; 
JOKER FUNC runtime_test.TestBigStackCallbackCgo has: 
;; (defn TestBigStackCallbackCgo
;;   "Test that C code called via cgo can use large Windows thread stacks
;; and call back in to Go without crashing. See issue #20975.
;; 
;; See also TestBigStackCallbackSyscall."
;;   {:added "1.0"
;;    :go "testBigStackCallbackCgo(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{12413233 0xc0056d8700}) t])
;; 
JOKER FUNC runtime_test.TestBlockLocked has: 
;; (defn TestBlockLocked
;;   {:added "1.0"
;;    :go "testBlockLocked(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{11525951 0xc003d89a00}) t])
;; 
JOKER FUNC runtime_test.TestBreakpoint has: 
;; (defn TestBreakpoint
;;   {:added "1.0"
;;    :go "testBreakpoint(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{12245678 0xc005490780}) t])
;; 
JOKER FUNC runtime_test.TestCaller has: 
;; (defn TestCaller
;;   {:added "1.0"
;;    :go "testCaller(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{11400692 0xc003c11ee0}) t])
;; 
JOKER FUNC runtime_test.TestCallers has: 
;; (defn TestCallers
;;   {:added "1.0"
;;    :go "testCallers(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{12312118 0xc00557db80}) t])
;; 
JOKER FUNC runtime_test.TestCallersFromWrapper has: 
;; (defn TestCallersFromWrapper
;;   {:added "1.0"
;;    :go "testCallersFromWrapper(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{11355526 0xc003b67360}) t])
;; 
JOKER FUNC runtime_test.TestCallersPanic has: 
;; (defn TestCallersPanic
;;   {:added "1.0"
;;    :go "testCallersPanic(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{12312193 0xc00557dd20}) t])
;; 
JOKER FUNC runtime_test.TestCatchPanic has: 
;; (defn TestCatchPanic
;;   {:added "1.0"
;;    :go "testCatchPanic(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{12410547 0xc0056d0060}) t])
;; 
JOKER FUNC runtime_test.TestCgoCCodeSIGPROF has: 
;; (defn TestCgoCCodeSIGPROF
;;   {:added "1.0"
;;    :go "testCgoCCodeSIGPROF(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{12406134 0xc0056bf300}) t])
;; 
JOKER FUNC runtime_test.TestCgoCallbackGC has: 
;; (defn TestCgoCallbackGC
;;   {:added "1.0"
;;    :go "testCgoCallbackGC(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{12401518 0xc0056b0800}) t])
;; 
JOKER FUNC runtime_test.TestCgoCheckBytes has: 
;; (defn TestCgoCheckBytes
;;   "Test for issue 14387.
;; Test that the program that doesn't need any cgo pointer checking
;; takes about the same amount of time with it as without it."
;;   {:added "1.0"
;;    :go "testCgoCheckBytes(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{12404843 0xc0056b7d00}) t])
;; 
JOKER FUNC runtime_test.TestCgoCrashHandler has: 
;; (defn TestCgoCrashHandler
;;   {:added "1.0"
;;    :go "testCgoCrashHandler(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{12400777 0xc00569dcc0}) t])
;; 
JOKER FUNC runtime_test.TestCgoCrashTraceback has: 
;; (defn TestCgoCrashTraceback
;;   {:added "1.0"
;;    :go "testCgoCrashTraceback(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{12406332 0xc0056bf680}) t])
;; 
JOKER FUNC runtime_test.TestCgoDLLImports has: 
;; (defn TestCgoDLLImports
;;   {:added "1.0"
;;    :go "testCgoDLLImports(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{12403749 0xc0056b6d00}) t])
;; 
JOKER FUNC runtime_test.TestCgoExecSignalMask has: 
;; (defn TestCgoExecSignalMask
;;   {:added "1.0"
;;    :go "testCgoExecSignalMask(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{12404038 0xc0056b7160}) t])
;; 
JOKER FUNC runtime_test.TestCgoExternalThreadPanic has: 
;; (defn TestCgoExternalThreadPanic
;;   {:added "1.0"
;;    :go "testCgoExternalThreadPanic(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{12402176 0xc0056b1260}) t])
;; 
JOKER FUNC runtime_test.TestCgoExternalThreadSIGPROF has: 
;; (defn TestCgoExternalThreadSIGPROF
;;   {:added "1.0"
;;    :go "testCgoExternalThreadSIGPROF(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{12402513 0xc0056b1800}) t])
;; 
JOKER FUNC runtime_test.TestCgoExternalThreadSignal has: 
;; (defn TestCgoExternalThreadSignal
;;   {:added "1.0"
;;    :go "testCgoExternalThreadSignal(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{12403208 0xc0056b62e0}) t])
;; 
JOKER FUNC runtime_test.TestCgoLockOSThreadExit has: 
;; (defn TestCgoLockOSThreadExit
;;   {:added "1.0"
;;    :go "testCgoLockOSThreadExit(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{12411403 0xc0056d0e00}) t])
;; 
JOKER FUNC runtime_test.TestCgoNumGoroutine has: 
;; (defn TestCgoNumGoroutine
;;   {:added "1.0"
;;    :go "testCgoNumGoroutine(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{12410247 0xc0056cbb20}) t])
;; 
JOKER FUNC runtime_test.TestCgoPanicDeadlock has: 
;; (defn TestCgoPanicDeadlock
;;   {:added "1.0"
;;    :go "testCgoPanicDeadlock(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{12405866 0xc0056beea0}) t])
;; 
JOKER FUNC runtime_test.TestCgoPprof has: 
;; (defn TestCgoPprof
;;   {:added "1.0"
;;    :go "testCgoPprof(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{12408495 0xc0056c7ce0}) t])
;; 
JOKER FUNC runtime_test.TestCgoPprofPIE has: 
;; (defn TestCgoPprofPIE
;;   {:added "1.0"
;;    :go "testCgoPprofPIE(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{12408568 0xc0056c7e60}) t])
;; 
JOKER FUNC runtime_test.TestCgoPprofThread has: 
;; (defn TestCgoPprofThread
;;   {:added "1.0"
;;    :go "testCgoPprofThread(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{12408658 0xc0056c7fe0}) t])
;; 
JOKER FUNC runtime_test.TestCgoPprofThreadNoTraceback has: 
;; (defn TestCgoPprofThreadNoTraceback
;;   {:added "1.0"
;;    :go "testCgoPprofThreadNoTraceback(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{12408751 0xc0056ca160}) t])
;; 
JOKER FUNC runtime_test.TestCgoSignalDeadlock has: 
;; (defn TestCgoSignalDeadlock
;;   {:added "1.0"
;;    :go "testCgoSignalDeadlock(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{12400864 0xc00569df00}) t])
;; 
JOKER FUNC runtime_test.TestCgoTraceback has: 
;; (defn TestCgoTraceback
;;   {:added "1.0"
;;    :go "testCgoTraceback(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{12401320 0xc0056b0480}) t])
;; 
JOKER FUNC runtime_test.TestCgoTracebackContext has: 
;; (defn TestCgoTracebackContext
;;   {:added "1.0"
;;    :go "testCgoTracebackContext(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{12406789 0xc0056bfe00}) t])
;; 
JOKER FUNC runtime_test.TestCgoTracebackSigpanic has: 
;; (defn TestCgoTracebackSigpanic
;;   {:added "1.0"
;;    :go "testCgoTracebackSigpanic(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{12412347 0xc0056d1e40}) t])
;; 
JOKER FUNC runtime_test.TestChan has: 
;; (defn TestChan
;;   {:added "1.0"
;;    :go "testChan(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{10992888 0xc0032a5620}) t])
;; 
JOKER FUNC runtime_test.TestChanSendBarrier has: 
;; (defn TestChanSendBarrier
;;   {:added "1.0"
;;    :go "testChanSendBarrier(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{11133162 0xc003583fc0}) t])
;; 
JOKER FUNC runtime_test.TestChanSendInterface has: 
;; (defn TestChanSendInterface
;;   {:added "1.0"
;;    :go "testChanSendInterface(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{11002563 0xc0042bace0}) t])
;; 
JOKER FUNC runtime_test.TestChanSendSelectBarrier has: 
;; (defn TestChanSendSelectBarrier
;;   {:added "1.0"
;;    :go "testChanSendSelectBarrier(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{11133091 0xc003583ea0}) t])
;; 
JOKER FUNC runtime_test.TestClockVDSOAndFallbackPaths has: 
;; (defn TestClockVDSOAndFallbackPaths
;;   {:added "1.0"
;;    :go "testClockVDSOAndFallbackPaths(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{12512947 0xc0058701a0}) t])
;; 
JOKER FUNC runtime_test.TestCmpIfaceConcreteAlloc has: 
;; (defn TestCmpIfaceConcreteAlloc
;;   "Issue 9370"
;;   {:added "1.0"
;;    :go "testCmpIfaceConcreteAlloc(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{11365124 0xc003b869e0}) t])
;; 
JOKER FUNC runtime_test.TestCollisions has: 
;; (defn TestCollisions
;;   {:added "1.0"
;;    :go "testCollisions(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{12460364 0xc0057ca980}) t])
;; 
JOKER FUNC runtime_test.TestCompareTempString has: 
;; (defn TestCompareTempString
;;   {:added "1.0"
;;    :go "testCompareTempString(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{11087870 0xc003e71b60}) t])
;; 
JOKER FUNC runtime_test.TestConcurrentMapIterateWrite has: 
;; (defn TestConcurrentMapIterateWrite
;;   {:added "1.0"
;;    :go "testConcurrentMapIterateWrite(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{12251852 0xc0054a6300}) t])
;; 
JOKER FUNC runtime_test.TestConcurrentMapReadWrite has: 
;; (defn TestConcurrentMapReadWrite
;;   {:added "1.0"
;;    :go "testConcurrentMapReadWrite(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{12251462 0xc00549bde0}) t])
;; 
JOKER FUNC runtime_test.TestConcurrentMapWrites has: 
;; (defn TestConcurrentMapWrites
;;   {:added "1.0"
;;    :go "testConcurrentMapWrites(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{12251090 0xc00549b8c0}) t])
;; 
JOKER FUNC runtime_test.TestConcurrentReadsAfterGrowth has: 
;; (defn TestConcurrentReadsAfterGrowth
;;   {:added "1.0"
;;    :go "testConcurrentReadsAfterGrowth(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{11548881 0xc003de41c0}) t])
;; 
JOKER FUNC runtime_test.TestConcurrentReadsAfterGrowthReflect has: 
;; (defn TestConcurrentReadsAfterGrowthReflect
;;   {:added "1.0"
;;    :go "testConcurrentReadsAfterGrowthReflect(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{11548985 0xc003de4320}) t])
;; 
JOKER FUNC runtime_test.TestCrashDumpsAllThreads has: 
;; (defn TestCrashDumpsAllThreads
;;   {:added "1.0"
;;    :go "testCrashDumpsAllThreads(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{12499478 0xc005838ac0}) t])
;; 
JOKER FUNC runtime_test.TestCrashHandler has: 
;; (defn TestCrashHandler
;;   {:added "1.0"
;;    :go "testCrashHandler(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{12242565 0xc00547d9a0}) t])
;; 
JOKER FUNC runtime_test.TestDebugCall has: 
;; (defn TestDebugCall
;;   {:added "1.0"
;;    :go "testDebugCall(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{11021633 0xc0038f7e20}) t])
;; 
JOKER FUNC runtime_test.TestDebugCallGC has: 
;; (defn TestDebugCallGC
;;   {:added "1.0"
;;    :go "testDebugCallGC(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{11022653 0xc0038f9200}) t])
;; 
JOKER FUNC runtime_test.TestDebugCallGrowStack has: 
;; (defn TestDebugCallGrowStack
;;   {:added "1.0"
;;    :go "testDebugCallGrowStack(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{11022897 0xc0038f9660}) t])
;; 
JOKER FUNC runtime_test.TestDebugCallLarge has: 
;; (defn TestDebugCallLarge
;;   {:added "1.0"
;;    :go "testDebugCallLarge(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{11022103 0xc0038f8660}) t])
;; 
JOKER FUNC runtime_test.TestDebugCallPanic has: 
;; (defn TestDebugCallPanic
;;   {:added "1.0"
;;    :go "testDebugCallPanic(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{11024246 0xc003ebcaa0}) t])
;; 
JOKER FUNC runtime_test.TestDebugCallUnsafePoint has: 
;; (defn TestDebugCallUnsafePoint
;;   {:added "1.0"
;;    :go "testDebugCallUnsafePoint(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{11023539 0xc0038f9fe0}) t])
;; 
JOKER FUNC runtime_test.TestDeferDeleteSlow has: 
;; (defn TestDeferDeleteSlow
;;   {:added "1.0"
;;    :go "testDeferDeleteSlow(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{11565236 0xc004c52fa0}) t])
;; 
JOKER FUNC runtime_test.TestDeferKeepAlive has: 
;; (defn TestDeferKeepAlive
;;   {:added "1.0"
;;    :go "testDeferKeepAlive(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{11496201 0xc003d11300}) t])
;; 
JOKER FUNC runtime_test.TestDeferLeafSigpanic has: 
;; (defn TestDeferLeafSigpanic
;;   "TestDeferLeafSigpanic tests defer matching around leaf functions
;; that sigpanic. This is tricky because on LR machines the outer
;; function and the inner function have the same SP, but it's critical
;; that we match up the defer correctly to get the right liveness map.
;; See issue #25499."
;;   {:added "1.0"
;;    :go "testDeferLeafSigpanic(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{11346936 0xc003b42380}) t])
;; 
JOKER FUNC runtime_test.TestDeferPtrs has: 
;; (defn TestDeferPtrs
;;   {:added "1.0"
;;    :go "testDeferPtrs(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{11344558 0xc003b3ca20}) t])
;; 
JOKER FUNC runtime_test.TestDeferPtrsGoexit has: 
;; (defn TestDeferPtrsGoexit
;;   "TestDeferPtrsGoexit is like TestDeferPtrs but exercises the possibility that the
;; stack grows as part of starting the deferred function. It calls Goexit at various
;; stack depths, forcing the deferred function (with >4kB of args) to be run at
;; the bottom of the stack. The goal is to find a stack depth less than 4kB from
;; the end of the stack. Each trial runs in a different goroutine so that an earlier
;; stack growth does not invalidate a later attempt."
;;   {:added "1.0"
;;    :go "testDeferPtrsGoexit(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{11345257 0xc003b3cea0}) t])
;; 
JOKER FUNC runtime_test.TestDeferPtrsPanic has: 
;; (defn TestDeferPtrsPanic
;;   "TestDeferPtrsPanic is like TestDeferPtrsGoexit, but it's using panic instead
;; of Goexit to run the Defers. Those two are different execution paths
;; in the runtime."
;;   {:added "1.0"
;;    :go "testDeferPtrsPanic(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{11345877 0xc003b3d800}) t])
;; 
JOKER FUNC runtime_test.TestEmptyKeyAndValue has: 
;; (defn TestEmptyKeyAndValue
;;   {:added "1.0"
;;    :go "testEmptyKeyAndValue(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{11550000 0xc003de5880}) t])
;; 
JOKER FUNC runtime_test.TestEmptySlice has: 
;; (defn TestEmptySlice
;;   "Make sure an empty slice on the stack doesn't pin the next object in memory."
;;   {:added "1.0"
;;    :go "testEmptySlice(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{11494571 0xc003d097e0}) t])
;; 
JOKER FUNC runtime_test.TestEmptyString has: 
;; (defn TestEmptyString
;;   "Make sure an empty string on the stack doesn't pin the next object in memory."
;;   {:added "1.0"
;;    :go "testEmptyString(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{11495355 0xc003d104c0}) t])
;; 
JOKER FUNC runtime_test.TestEnsureDropM has: 
;; (defn TestEnsureDropM
;;   {:added "1.0"
;;    :go "testEnsureDropM(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{12404366 0xc0056b76e0}) t])
;; 
JOKER FUNC runtime_test.TestEpollctlErrorSign has: 
;; (defn TestEpollctlErrorSign
;;   {:added "1.0"
;;    :go "testEpollctlErrorSign(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{11372554 0xc003baa900}) t])
;; 
JOKER FUNC runtime_test.TestEqString has: 
;; (defn TestEqString
;;   {:added "1.0"
;;    :go "testEqString(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{11768549 0xc004efb380}) t])
;; 
JOKER FUNC runtime_test.TestFastLog2 has: 
;; (defn TestFastLog2
;;   {:added "1.0"
;;    :go "testFastLog2(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{11127174 0xc004789f00}) t])
;; 
JOKER FUNC runtime_test.TestFinalizerInterfaceBig has: 
;; (defn TestFinalizerInterfaceBig
;;   {:added "1.0"
;;    :go "testFinalizerInterfaceBig(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{11492443 0xc003d01320}) t])
;; 
JOKER FUNC runtime_test.TestFinalizerOnGlobal has: 
;; (defn TestFinalizerOnGlobal
;;   "Test for issue 7656."
;;   {:added "1.0"
;;    :go "testFinalizerOnGlobal(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{11495863 0xc003d10c60}) t])
;; 
JOKER FUNC runtime_test.TestFinalizerType has: 
;; (defn TestFinalizerType
;;   {:added "1.0"
;;    :go "testFinalizerType(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{11491024 0xc003cef7e0}) t])
;; 
JOKER FUNC runtime_test.TestFinalizerZeroSizedStruct has: 
;; (defn TestFinalizerZeroSizedStruct
;;   "Verify we don't crash at least. golang.org/issue/6857"
;;   {:added "1.0"
;;    :go "testFinalizerZeroSizedStruct(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{11493236 0xc003d08000}) t])
;; 
JOKER FUNC runtime_test.TestFixedGOROOT has: 
;; (defn TestFixedGOROOT
;;   {:added "1.0"
;;    :go "testFixedGOROOT(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{12420948 0xc0056ef200}) t])
;; 
JOKER FUNC runtime_test.TestFloat64 has: 
;; (defn TestFloat64
;;   {:added "1.0"
;;    :go "testFloat64(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{10953888 0xc0038aeb20}) t])
;; 
JOKER FUNC runtime_test.TestFutexsleep has: 
;; (defn TestFutexsleep
;;   {:added "1.0"
;;    :go "testFutexsleep(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{11443508 0xc003c82aa0}) t])
;; 
JOKER FUNC runtime_test.TestG0StackOverflow has: 
;; (defn TestG0StackOverflow
;;   "Test that g0 stack overflows are handled gracefully."
;;   {:added "1.0"
;;    :go "testG0StackOverflow(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{12256529 0xc0054b08e0}) t])
;; 
JOKER FUNC runtime_test.TestGCFairness has: 
;; (defn TestGCFairness
;;   {:added "1.0"
;;    :go "testGCFairness(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{11528214 0xc003d98200}) t])
;; 
JOKER FUNC runtime_test.TestGCFairness2 has: 
;; (defn TestGCFairness2
;;   {:added "1.0"
;;    :go "testGCFairness2(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{11528392 0xc003d98520}) t])
;; 
JOKER FUNC runtime_test.TestGCInfo has: 
;; (defn TestGCInfo
;;   "TestGCInfo tests that various objects in heap, data and bss receive correct GC pointer type info."
;;   {:added "1.0"
;;    :go "testGCInfo(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{12506355 0xc005854920}) t])
;; 
JOKER FUNC runtime_test.TestGcArraySlice has: 
;; (defn TestGcArraySlice
;;   {:added "1.0"
;;    :go "testGcArraySlice(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{11203895 0xc001873c20}) t])
;; 
JOKER FUNC runtime_test.TestGcDeepNesting has: 
;; (defn TestGcDeepNesting
;;   {:added "1.0"
;;    :go "testGcDeepNesting(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{11203271 0xc001872ce0}) t])
;; 
JOKER FUNC runtime_test.TestGcLastTime has: 
;; (defn TestGcLastTime
;;   {:added "1.0"
;;    :go "testGcLastTime(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{11204687 0xc0026cd000}) t])
;; 
JOKER FUNC runtime_test.TestGcMapIndirection has: 
;; (defn TestGcMapIndirection
;;   {:added "1.0"
;;    :go "testGcMapIndirection(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{11203670 0xc0018736a0}) t])
;; 
JOKER FUNC runtime_test.TestGcRescan has: 
;; (defn TestGcRescan
;;   {:added "1.0"
;;    :go "testGcRescan(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{11204260 0xc0026cc500}) t])
;; 
JOKER FUNC runtime_test.TestGcSys has: 
;; (defn TestGcSys
;;   {:added "1.0"
;;    :go "testGcSys(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{11203012 0xc001872840}) t])
;; 
JOKER FUNC runtime_test.TestGdbAutotmpTypes has: 
;; (defn TestGdbAutotmpTypes
;;   "TestGdbAutotmpTypes ensures that types of autotmp variables appear in .debug_info
;; See bug #17830."
;;   {:added "1.0"
;;    :go "testGdbAutotmpTypes(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{11122321 0xc0046178e0}) t])
;; 
JOKER FUNC runtime_test.TestGdbBacktrace has: 
;; (defn TestGdbBacktrace
;;   "TestGdbBacktrace tests that gdb can unwind the stack correctly
;; using only the DWARF debug info."
;;   {:added "1.0"
;;    :go "testGdbBacktrace(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{11120558 0xc004611ee0}) t])
;; 
JOKER FUNC runtime_test.TestGdbConst has: 
;; (defn TestGdbConst
;;   {:added "1.0"
;;    :go "testGdbConst(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{11124015 0xc004786fa0}) t])
;; 
JOKER FUNC runtime_test.TestGdbPanic has: 
;; (defn TestGdbPanic
;;   "TestGdbPanic tests that gdb can unwind the stack correctly
;; from SIGABRTs from Go panics."
;;   {:added "1.0"
;;    :go "testGdbPanic(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{11125648 0xc004788640}) t])
;; 
JOKER FUNC runtime_test.TestGdbPython has: 
;; (defn TestGdbPython
;;   {:added "1.0"
;;    :go "testGdbPython(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{11114235 0xc0043975c0}) t])
;; 
JOKER FUNC runtime_test.TestGdbPythonCgo has: 
;; (defn TestGdbPythonCgo
;;   {:added "1.0"
;;    :go "testGdbPythonCgo(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{11114301 0xc004397720}) t])
;; 
JOKER FUNC runtime_test.TestGoNil has: 
;; (defn TestGoNil
;;   {:added "1.0"
;;    :go "testGoNil(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{12244873 0xc005483b40}) t])
;; 
JOKER FUNC runtime_test.TestGoexitCrash has: 
;; (defn TestGoexitCrash
;;   {:added "1.0"
;;    :go "testGoexitCrash(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{12244309 0xc005483380}) t])
;; 
JOKER FUNC runtime_test.TestGoexitDeadlock has: 
;; (defn TestGoexitDeadlock
;;   {:added "1.0"
;;    :go "testGoexitDeadlock(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{12243209 0xc005482480}) t])
;; 
JOKER FUNC runtime_test.TestGoexitDefer has: 
;; (defn TestGoexitDefer
;;   {:added "1.0"
;;    :go "testGoexitDefer(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{12244578 0xc005483740}) t])
;; 
JOKER FUNC runtime_test.TestGoexitInPanic has: 
;; (defn TestGoexitInPanic
;;   {:added "1.0"
;;    :go "testGoexitInPanic(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{12246047 0xc005490ba0}) t])
;; 
JOKER FUNC runtime_test.TestGoroutineParallelism has: 
;; (defn TestGoroutineParallelism
;;   {:added "1.0"
;;    :go "testGoroutineParallelism(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{11522808 0xc003d7ef60}) t])
;; 
JOKER FUNC runtime_test.TestGoroutineParallelism2 has: 
;; (defn TestGoroutineParallelism2
;;   "Test that all runnable goroutines are scheduled at the same time."
;;   {:added "1.0"
;;    :go "testGoroutineParallelism2(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{11523797 0xc003d7fdc0}) t])
;; 
JOKER FUNC runtime_test.TestGoroutineProfile has: 
;; (defn TestGoroutineProfile
;;   {:added "1.0"
;;    :go "testGoroutineProfile(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{11930545 0xc0051010a0}) t])
;; 
JOKER FUNC runtime_test.TestGoroutineProfileTrivial has: 
;; (defn TestGoroutineProfileTrivial
;;   {:added "1.0"
;;    :go "testGoroutineProfileTrivial(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{11771444 0xc004f0c600}) t])
;; 
JOKER FUNC runtime_test.TestGrowWithNaN has: 
;; (defn TestGrowWithNaN
;;   {:added "1.0"
;;    :go "testGrowWithNaN(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{11544947 0xc003dcfd20}) t])
;; 
JOKER FUNC runtime_test.TestGrowWithNegativeZero has: 
;; (defn TestGrowWithNegativeZero
;;   {:added "1.0"
;;    :go "testGrowWithNegativeZero(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{11545614 0xc003dd48c0}) t])
;; 
JOKER FUNC runtime_test.TestHmapSize has: 
;; (defn TestHmapSize
;;   {:added "1.0"
;;    :go "testHmapSize(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{11541880 0xc003dc47e0}) t])
;; 
JOKER FUNC runtime_test.TestHugeGCInfo has: 
;; (defn TestHugeGCInfo
;;   {:added "1.0"
;;    :go "testHugeGCInfo(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{11205286 0xc0026cd9e0}) t])
;; 
JOKER FUNC runtime_test.TestIgnoreBogusMapHint has: 
;; (defn TestIgnoreBogusMapHint
;;   "Test that making a map with a large or invalid hint
;; doesn't panic. (Issue 19926)."
;;   {:added "1.0"
;;    :go "testIgnoreBogusMapHint(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{11555569 0xc004c26fe0}) t])
;; 
JOKER FUNC runtime_test.TestIncrementAfterBulkClearKeyStringValueInt has: 
;; (defn TestIncrementAfterBulkClearKeyStringValueInt
;;   "TestIncrementAfterBulkClearKeyStringValueInt tests that map bulk
;; deletion (mapclear) still works as expected. Note that it was not
;; affected by Issue 25936."
;;   {:added "1.0"
;;    :go "testIncrementAfterBulkClearKeyStringValueInt(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{11567150 0xc004c5af80}) t])
;; 
JOKER FUNC runtime_test.TestIncrementAfterDeleteKeyStringValueInt has: 
;; (defn TestIncrementAfterDeleteKeyStringValueInt
;;   {:added "1.0"
;;    :go "testIncrementAfterDeleteKeyStringValueInt(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{11566465 0xc004c5a5a0}) t])
;; 
JOKER FUNC runtime_test.TestIncrementAfterDeleteKeyValueString has: 
;; (defn TestIncrementAfterDeleteKeyValueString
;;   {:added "1.0"
;;    :go "testIncrementAfterDeleteKeyValueString(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{11566706 0xc004c5aa40}) t])
;; 
JOKER FUNC runtime_test.TestIncrementAfterDeleteValueInt has: 
;; (defn TestIncrementAfterDeleteValueInt
;;   "TestIncrementAfterDeleteValueInt and other test Issue 25936.
;; Value types int, int32, int64 are affected. Value type string
;; works as expected."
;;   {:added "1.0"
;;    :go "testIncrementAfterDeleteValueInt(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{11565764 0xc004c537c0}) t])
;; 
JOKER FUNC runtime_test.TestIncrementAfterDeleteValueInt32 has: 
;; (defn TestIncrementAfterDeleteValueInt32
;;   {:added "1.0"
;;    :go "testIncrementAfterDeleteValueInt32(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{11565994 0xc004c53c60}) t])
;; 
JOKER FUNC runtime_test.TestIncrementAfterDeleteValueInt64 has: 
;; (defn TestIncrementAfterDeleteValueInt64
;;   {:added "1.0"
;;    :go "testIncrementAfterDeleteValueInt64(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{11566226 0xc004c5a100}) t])
;; 
JOKER FUNC runtime_test.TestInitDeadlock has: 
;; (defn TestInitDeadlock
;;   {:added "1.0"
;;    :go "testInitDeadlock(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{12242975 0xc005482060}) t])
;; 
JOKER FUNC runtime_test.TestIntString has: 
;; (defn TestIntString
;;   {:added "1.0"
;;    :go "testIntString(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{11088466 0xc003e76680}) t])
;; 
JOKER FUNC runtime_test.TestIntStringAllocs has: 
;; (defn TestIntStringAllocs
;;   {:added "1.0"
;;    :go "testIntStringAllocs(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{11088922 0xc003e76fa0}) t])
;; 
JOKER FUNC runtime_test.TestIterGrowAndDelete has: 
;; (defn TestIterGrowAndDelete
;;   {:added "1.0"
;;    :go "testIterGrowAndDelete(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{11547011 0xc003dd5f80}) t])
;; 
JOKER FUNC runtime_test.TestIterGrowWithGC has: 
;; (defn TestIterGrowWithGC
;;   "make sure old bucket arrays don't get GCd while
;; an iterator is still using them."
;;   {:added "1.0"
;;    :go "testIterGrowWithGC(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{11547512 0xc003ddc7a0}) t])
;; 
JOKER FUNC runtime_test.TestLFStack has: 
;; (defn TestLFStack
;;   {:added "1.0"
;;    :go "testLFStack(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{12277989 0xc0054f93c0}) t])
;; 
JOKER FUNC runtime_test.TestLFStackStress has: 
;; (defn TestLFStackStress
;;   {:added "1.0"
;;    :go "testLFStackStress(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{12279025 0xc005504320}) t])
;; 
JOKER FUNC runtime_test.TestLargeStringConcat has: 
;; (defn TestLargeStringConcat
;;   {:added "1.0"
;;    :go "testLargeStringConcat(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{11087528 0xc003e71420}) t])
;; 
JOKER FUNC runtime_test.TestLineNumber has: 
;; (defn TestLineNumber
;;   {:added "1.0"
;;    :go "testLineNumber(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{11403064 0xc003c1c8c0}) t])
;; 
JOKER FUNC runtime_test.TestLldbPython has: 
;; (defn TestLldbPython
;;   {:added "1.0"
;;    :go "testLldbPython(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{11758184 0xc004ecdf40}) t])
;; 
JOKER FUNC runtime_test.TestLockOSThread has: 
;; (defn TestLockOSThread
;;   {:added "1.0"
;;    :go "testLockOSThread(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{11372148 0xc003baa260}) t])
;; 
JOKER FUNC runtime_test.TestLockOSThreadExit has: 
;; (defn TestLockOSThreadExit
;;   {:added "1.0"
;;    :go "testLockOSThreadExit(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{11540420 0xc003dbd8c0}) t])
;; 
JOKER FUNC runtime_test.TestLockOSThreadNesting has: 
;; (defn TestLockOSThreadNesting
;;   {:added "1.0"
;;    :go "testLockOSThreadNesting(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{11539801 0xc003dbcde0}) t])
;; 
JOKER FUNC runtime_test.TestLockedDeadlock has: 
;; (defn TestLockedDeadlock
;;   {:added "1.0"
;;    :go "testLockedDeadlock(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{12243051 0xc0054821c0}) t])
;; 
JOKER FUNC runtime_test.TestLockedDeadlock2 has: 
;; (defn TestLockedDeadlock2
;;   {:added "1.0"
;;    :go "testLockedDeadlock2(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{12243130 0xc005482320}) t])
;; 
JOKER FUNC runtime_test.TestMain has: 
;; (defn TestMain
;;   {:added "1.0"
;;    :go "testMain(m)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{12238414 0xc005461280}) m])
;; 
JOKER FUNC runtime_test.TestMainGoroutineID has: 
;; (defn TestMainGoroutineID
;;   {:added "1.0"
;;    :go "testMainGoroutineID(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{12245107 0xc005483f00}) t])
;; 
JOKER FUNC runtime_test.TestMapAppendAssignment has: 
;; (defn TestMapAppendAssignment
;;   {:added "1.0"
;;    :go "testMapAppendAssignment(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{11544372 0xc003dcee80}) t])
;; 
JOKER FUNC runtime_test.TestMapAssignmentNan has: 
;; (defn TestMapAssignmentNan
;;   "nan is a good test because nan != nan, and nan has
;; a randomized hash value."
;;   {:added "1.0"
;;    :go "testMapAssignmentNan(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{11543487 0xc003dc5f80}) t])
;; 
JOKER FUNC runtime_test.TestMapBuckets has: 
;; (defn TestMapBuckets
;;   {:added "1.0"
;;    :go "testMapBuckets(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{11556048 0xc004c27a40}) t])
;; 
JOKER FUNC runtime_test.TestMapHugeZero has: 
;; (defn TestMapHugeZero
;;   {:added "1.0"
;;    :go "testMapHugeZero(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{11549709 0xc003de5320}) t])
;; 
JOKER FUNC runtime_test.TestMapIterOrder has: 
;; (defn TestMapIterOrder
;;   {:added "1.0"
;;    :go "testMapIterOrder(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{11552214 0xc004c178e0}) t])
;; 
JOKER FUNC runtime_test.TestMapLargeKeyNoPointer has: 
;; (defn TestMapLargeKeyNoPointer
;;   {:added "1.0"
;;    :go "testMapLargeKeyNoPointer(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{11554648 0xc004c21ba0}) t])
;; 
JOKER FUNC runtime_test.TestMapLargeValNoPointer has: 
;; (defn TestMapLargeValNoPointer
;;   {:added "1.0"
;;    :go "testMapLargeValNoPointer(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{11555041 0xc004c26500}) t])
;; 
JOKER FUNC runtime_test.TestMapNanGrowIterator has: 
;; (defn TestMapNanGrowIterator
;;   "Tests whether the iterator returns the right elements when
;; started in the middle of a grow, when the keys are NaNs."
;;   {:added "1.0"
;;    :go "testMapNanGrowIterator(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{11551474 0xc004c16c40}) t])
;; 
JOKER FUNC runtime_test.TestMapOperatorAssignment has: 
;; (defn TestMapOperatorAssignment
;;   {:added "1.0"
;;    :go "testMapOperatorAssignment(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{11543938 0xc003dce820}) t])
;; 
JOKER FUNC runtime_test.TestMapOperatorAssignmentNan has: 
;; (defn TestMapOperatorAssignmentNan
;;   "nan is a good test because nan != nan, and nan has
;; a randomized hash value."
;;   {:added "1.0"
;;    :go "testMapOperatorAssignmentNan(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{11543748 0xc003dce400}) t])
;; 
JOKER FUNC runtime_test.TestMapSparseIterOrder has: 
;; (defn TestMapSparseIterOrder
;;   "Issue 8410"
;;   {:added "1.0"
;;    :go "testMapSparseIterOrder(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{11552939 0xc004c20460}) t])
;; 
JOKER FUNC runtime_test.TestMapStringBytesLookup has: 
;; (defn TestMapStringBytesLookup
;;   {:added "1.0"
;;    :go "testMapStringBytesLookup(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{11553700 0xc004c20f20}) t])
;; 
JOKER FUNC runtime_test.TestMemHash32Equality has: 
;; (defn TestMemHash32Equality
;;   {:added "1.0"
;;    :go "testMemHash32Equality(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{12444296 0xc0057669e0}) t])
;; 
JOKER FUNC runtime_test.TestMemHash64Equality has: 
;; (defn TestMemHash64Equality
;;   {:added "1.0"
;;    :go "testMemHash64Equality(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{12444737 0xc005767320}) t])
;; 
JOKER FUNC runtime_test.TestMemPprof has: 
;; (defn TestMemPprof
;;   {:added "1.0"
;;    :go "testMemPprof(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{12249855 0xc00549a1e0}) t])
;; 
JOKER FUNC runtime_test.TestMemStats has: 
;; (defn TestMemStats
;;   {:added "1.0"
;;    :go "testMemStats(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{12302404 0xc00554ce80}) t])
;; 
JOKER FUNC runtime_test.TestMemclr has: 
;; (defn TestMemclr
;;   {:added "1.0"
;;    :go "testMemclr(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{12429414 0xc00571e6e0}) t])
;; 
JOKER FUNC runtime_test.TestMemmove has: 
;; (defn TestMemmove
;;   {:added "1.0"
;;    :go "testMemmove(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{12424488 0xc0056f9580}) t])
;; 
JOKER FUNC runtime_test.TestMemmoveAlias has: 
;; (defn TestMemmoveAlias
;;   {:added "1.0"
;;    :go "testMemmoveAlias(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{12425382 0xc005708a00}) t])
;; 
JOKER FUNC runtime_test.TestMemmoveLarge0x180000 has: 
;; (defn TestMemmoveLarge0x180000
;;   {:added "1.0"
;;    :go "testMemmoveLarge0x180000(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{12426154 0xc005709ac0}) t])
;; 
JOKER FUNC runtime_test.TestMemmoveOverflow has: 
;; (defn TestMemmoveOverflow
;;   "TestMemmoveOverflow maps 3GB of memory and calls memmove on
;; the corresponding slice."
;;   {:added "1.0"
;;    :go "testMemmoveOverflow(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{11270043 0xc0049a4b00}) t])
;; 
JOKER FUNC runtime_test.TestMemmoveOverlapLarge0x120000 has: 
;; (defn TestMemmoveOverlapLarge0x120000
;;   {:added "1.0"
;;    :go "testMemmoveOverlapLarge0x120000(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{12426401 0xc005709ee0}) t])
;; 
JOKER FUNC runtime_test.TestMincoreErrorSign has: 
;; (defn TestMincoreErrorSign
;;   "Test that error values are negative. Use address 1 (a misaligned
;; pointer) to get -EINVAL."
;;   {:added "1.0"
;;    :go "testMincoreErrorSign(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{11372351 0xc003baa4c0}) t])
;; 
JOKER FUNC runtime_test.TestMmapErrorSign has: 
;; (defn TestMmapErrorSign
;;   "Test that the error value returned by mmap is positive, as that is
;; what the code in mem_bsd.go, mem_darwin.go, and mem_linux.go expects.
;; See the uses of ENOMEM in sysMap in those files."
;;   {:added "1.0"
;;    :go "testMmapErrorSign(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{11134272 0xc0034a8e00}) t])
;; 
JOKER FUNC runtime_test.TestMultiConsumer has: 
;; (defn TestMultiConsumer
;;   {:added "1.0"
;;    :go "testMultiConsumer(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{11003356 0xc0042bbd40}) t])
;; 
JOKER FUNC runtime_test.TestNegativeZero has: 
;; (defn TestNegativeZero
;;   "negative zero is a good test because:
;;  1) 0 and -0 are equal, yet have distinct representations.
;;  2) 0 is represented as all zeros, -0 isn't.
;; I'm not sure the language spec actually requires this behavior,
;; but it's what the current map implementation does."
;;   {:added "1.0"
;;    :go "testNegativeZero(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{11542573 0xc003dc4d60}) t])
;; 
JOKER FUNC runtime_test.TestNetpollDeadlock has: 
;; (defn TestNetpollDeadlock
;;   {:added "1.0"
;;    :go "testNetpollDeadlock(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{12248292 0xc0054988e0}) t])
;; 
JOKER FUNC runtime_test.TestNewOSProc0 has: 
;; (defn TestNewOSProc0
;;   "Can't be run with -race because it inserts calls into newOSProcCreated()
;; that require a valid G/M."
;;   {:added "1.0"
;;    :go "testNewOSProc0(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{11075307 0xc00216e760}) t])
;; 
JOKER FUNC runtime_test.TestNilName has: 
;; (defn TestNilName
;;   {:added "1.0"
;;    :go "testNilName(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{11404421 0xc003c220e0}) t])
;; 
JOKER FUNC runtime_test.TestNoHelperGoroutines has: 
;; (defn TestNoHelperGoroutines
;;   {:added "1.0"
;;    :go "testNoHelperGoroutines(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{12245367 0xc0054902c0}) t])
;; 
JOKER FUNC runtime_test.TestNonEscapingConvT2E has: 
;; (defn TestNonEscapingConvT2E
;;   {:added "1.0"
;;    :go "testNonEscapingConvT2E(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{11367817 0xc003b94d40}) t])
;; 
JOKER FUNC runtime_test.TestNonEscapingConvT2I has: 
;; (defn TestNonEscapingConvT2I
;;   {:added "1.0"
;;    :go "testNonEscapingConvT2I(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{11368179 0xc003b95360}) t])
;; 
JOKER FUNC runtime_test.TestNonEscapingMap has: 
;; (defn TestNonEscapingMap
;;   {:added "1.0"
;;    :go "testNonEscapingMap(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{11560737 0xc004c3a2c0}) t])
;; 
JOKER FUNC runtime_test.TestNonblockRecvRace has: 
;; (defn TestNonblockRecvRace
;;   {:added "1.0"
;;    :go "testNonblockRecvRace(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{10996939 0xc0041235a0}) t])
;; 
JOKER FUNC runtime_test.TestNonblockSelectRace has: 
;; (defn TestNonblockSelectRace
;;   "This test checks that select acts on the state of the channels at one
;; moment in the execution, not over a smeared time window.
;; In the test, one goroutine does:
;; 	create c1, c2
;; 	make c1 ready for receiving
;; 	create second goroutine
;; 	make c2 ready for receiving
;; 	make c1 no longer ready for receiving (if possible)
;; The second goroutine does a non-blocking select receiving from c1 and c2.
;; From the time the second goroutine is created, at least one of c1 and c2
;; is always ready for receiving, so the select in the second goroutine must
;; always receive from one or the other. It must never execute the default case."
;;   {:added "1.0"
;;    :go "testNonblockSelectRace(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{10997881 0xc004123d00}) t])
;; 
JOKER FUNC runtime_test.TestNonblockSelectRace2 has: 
;; (defn TestNonblockSelectRace2
;;   "Same as TestNonblockSelectRace, but close(c2) replaces c2 <- 1."
;;   {:added "1.0"
;;    :go "testNonblockSelectRace2(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{10998385 0xc00426c540}) t])
;; 
JOKER FUNC runtime_test.TestNumGoroutine has: 
;; (defn TestNumGoroutine
;;   {:added "1.0"
;;    :go "testNumGoroutine(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{11528572 0xc003d98840}) t])
;; 
JOKER FUNC runtime_test.TestPageAccounting has: 
;; (defn TestPageAccounting
;;   {:added "1.0"
;;    :go "testPageAccounting(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{11210985 0xc003e3a2e0}) t])
;; 
JOKER FUNC runtime_test.TestPanicAfterGoexit has: 
;; (defn TestPanicAfterGoexit
;;   {:added "1.0"
;;    :go "testPanicAfterGoexit(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{12247247 0xc005491d40}) t])
;; 
JOKER FUNC runtime_test.TestPanicDeadlockGosched has: 
;; (defn TestPanicDeadlockGosched
;;   {:added "1.0"
;;    :go "testPanicDeadlockGosched(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{12249402 0xc005499b20}) t])
;; 
JOKER FUNC runtime_test.TestPanicDeadlockSyscall has: 
;; (defn TestPanicDeadlockSyscall
;;   {:added "1.0"
;;    :go "testPanicDeadlockSyscall(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{12249522 0xc005499ca0}) t])
;; 
JOKER FUNC runtime_test.TestPanicFar has: 
;; (defn TestPanicFar
;;   {:added "1.0"
;;    :go "testPanicFar(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{11347988 0xc003b42ee0}) t])
;; 
JOKER FUNC runtime_test.TestPanicInlined has: 
;; (defn TestPanicInlined
;;   "Test for issue #10152."
;;   {:added "1.0"
;;    :go "testPanicInlined(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{12252364 0xc0054a6c80}) t])
;; 
JOKER FUNC runtime_test.TestPanicLoop has: 
;; (defn TestPanicLoop
;;   {:added "1.0"
;;    :go "testPanicLoop(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{12249622 0xc005499e20}) t])
;; 
JOKER FUNC runtime_test.TestPanicRace has: 
;; (defn TestPanicRace
;;   "Test for issues #3934 and #20018.
;; We want to delay exiting until a panic print is complete."
;;   {:added "1.0"
;;    :go "testPanicRace(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{12252831 0xc0054a7340}) t])
;; 
JOKER FUNC runtime_test.TestPanicSystemstack has: 
;; (defn TestPanicSystemstack
;;   {:added "1.0"
;;    :go "testPanicSystemstack(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{12502598 0xc0058452a0}) t])
;; 
JOKER FUNC runtime_test.TestPanicTraceback has: 
;; (defn TestPanicTraceback
;;   {:added "1.0"
;;    :go "testPanicTraceback(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{12248532 0xc005498d00}) t])
;; 
JOKER FUNC runtime_test.TestPanicUseStack has: 
;; (defn TestPanicUseStack
;;   "TestPanicUseStack checks that a chain of Panic structs on the stack are
;; updated correctly if the stack grows during the deferred execution that
;; happens as a result of the panic."
;;   {:added "1.0"
;;    :go "testPanicUseStack(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{11347573 0xc003b427e0}) t])
;; 
JOKER FUNC runtime_test.TestParallelRWMutexReaders has: 
;; (defn TestParallelRWMutexReaders
;;   {:added "1.0"
;;    :go "testParallelRWMutexReaders(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{11129266 0xc00478fa60}) t])
;; 
JOKER FUNC runtime_test.TestPeriodicGC has: 
;; (defn TestPeriodicGC
;;   {:added "1.0"
;;    :go "testPeriodicGC(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{11205782 0xc0026d2140}) t])
;; 
JOKER FUNC runtime_test.TestPhysPageSize has: 
;; (defn TestPhysPageSize
;;   {:added "1.0"
;;    :go "testPhysPageSize(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{11134544 0xc0034a94a0}) t])
;; 
JOKER FUNC runtime_test.TestPingPongHog has: 
;; (defn TestPingPongHog
;;   {:added "1.0"
;;    :go "testPingPongHog(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{11529449 0xc003d992a0}) t])
;; 
JOKER FUNC runtime_test.TestPreemptSplitBig has: 
;; (defn TestPreemptSplitBig
;;   {:added "1.0"
;;    :go "testPreemptSplitBig(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{11531752 0xc003d9d480}) t])
;; 
JOKER FUNC runtime_test.TestPreemption has: 
;; (defn TestPreemption
;;   {:added "1.0"
;;    :go "testPreemption(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{11527253 0xc003d8cfe0}) t])
;; 
JOKER FUNC runtime_test.TestPreemptionGC has: 
;; (defn TestPreemptionGC
;;   {:added "1.0"
;;    :go "testPreemptionGC(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{11527719 0xc003d8d8c0}) t])
;; 
JOKER FUNC runtime_test.TestPrintGC has: 
;; (defn TestPrintGC
;;   {:added "1.0"
;;    :go "testPrintGC(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{11210200 0xc0026df5e0}) t])
;; 
JOKER FUNC runtime_test.TestProfBuf has: 
;; (defn TestProfBuf
;;   {:added "1.0"
;;    :go "testProfBuf(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{11512248 0xc003d4c0c0}) t])
;; 
JOKER FUNC runtime_test.TestPseudoRandomSend has: 
;; (defn TestPseudoRandomSend
;;   {:added "1.0"
;;    :go "testPseudoRandomSend(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{11002770 0xc0042bb080}) t])
;; 
JOKER FUNC runtime_test.TestRWMutex has: 
;; (defn TestRWMutex
;;   {:added "1.0"
;;    :go "testRWMutex(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{11131001 0xc00357d740}) t])
;; 
JOKER FUNC runtime_test.TestRaceProf has: 
;; (defn TestRaceProf
;;   {:added "1.0"
;;    :go "testRaceProf(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{12408838 0xc0056ca2e0}) t])
;; 
JOKER FUNC runtime_test.TestRaceSignal has: 
;; (defn TestRaceSignal
;;   {:added "1.0"
;;    :go "testRaceSignal(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{12409521 0xc0056cae60}) t])
;; 
JOKER FUNC runtime_test.TestRangeStringCast has: 
;; (defn TestRangeStringCast
;;   {:added "1.0"
;;    :go "testRangeStringCast(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{11089174 0xc003e77480}) t])
;; 
JOKER FUNC runtime_test.TestReadMemStats has: 
;; (defn TestReadMemStats
;;   {:added "1.0"
;;    :go "testReadMemStats(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{11211549 0xc003e3a960}) t])
;; 
JOKER FUNC runtime_test.TestRecoverBeforePanicAfterGoexit has: 
;; (defn TestRecoverBeforePanicAfterGoexit
;;   {:added "1.0"
;;    :go "testRecoverBeforePanicAfterGoexit(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{12247850 0xc005498500}) t])
;; 
JOKER FUNC runtime_test.TestRecoveredPanicAfterGoexit has: 
;; (defn TestRecoveredPanicAfterGoexit
;;   {:added "1.0"
;;    :go "testRecoveredPanicAfterGoexit(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{12247541 0xc005498140}) t])
;; 
JOKER FUNC runtime_test.TestRecursivePanic has: 
;; (defn TestRecursivePanic
;;   {:added "1.0"
;;    :go "testRecursivePanic(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{12244071 0xc005482fc0}) t])
;; 
JOKER FUNC runtime_test.TestRuntimePanic has: 
;; (defn TestRuntimePanic
;;   {:added "1.0"
;;    :go "testRuntimePanic(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{12256019 0xc0054b0080}) t])
;; 
JOKER FUNC runtime_test.TestRuntimePanicWithRuntimeError has: 
;; (defn TestRuntimePanicWithRuntimeError
;;   "Issue 14965: Runtime panics should be of type runtime.Error"
;;   {:added "1.0"
;;    :go "testRuntimePanicWithRuntimeError(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{12246474 0xc005490fe0}) t])
;; 
JOKER FUNC runtime_test.TestSchedLocalQueue has: 
;; (defn TestSchedLocalQueue
;;   {:added "1.0"
;;    :go "testSchedLocalQueue(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{11533005 0xc003da4680}) t])
;; 
JOKER FUNC runtime_test.TestSchedLocalQueueEmpty has: 
;; (defn TestSchedLocalQueueEmpty
;;   {:added "1.0"
;;    :go "testSchedLocalQueueEmpty(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{11533176 0xc003da4900}) t])
;; 
JOKER FUNC runtime_test.TestSchedLocalQueueSteal has: 
;; (defn TestSchedLocalQueueSteal
;;   {:added "1.0"
;;    :go "testSchedLocalQueueSteal(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{11533088 0xc003da47c0}) t])
;; 
JOKER FUNC runtime_test.TestSelectDuplicateChannel has: 
;; (defn TestSelectDuplicateChannel
;;   {:added "1.0"
;;    :go "testSelectDuplicateChannel(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{11005049 0xc004433820}) t])
;; 
JOKER FUNC runtime_test.TestSelectFairness has: 
;; (defn TestSelectFairness
;;   {:added "1.0"
;;    :go "testSelectFairness(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{11001309 0xc0042b77c0}) t])
;; 
JOKER FUNC runtime_test.TestSelectStackAdjust has: 
;; (defn TestSelectStackAdjust
;;   {:added "1.0"
;;    :go "testSelectStackAdjust(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{11005832 0xc0045b20a0}) t])
;; 
JOKER FUNC runtime_test.TestSelectStress has: 
;; (defn TestSelectStress
;;   {:added "1.0"
;;    :go "testSelectStress(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{10999591 0xc00426d980}) t])
;; 
JOKER FUNC runtime_test.TestSelfSelect has: 
;; (defn TestSelfSelect
;;   {:added "1.0"
;;    :go "testSelfSelect(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{10998812 0xc00426cd00}) t])
;; 
JOKER FUNC runtime_test.TestSetPanicOnFault has: 
;; (defn TestSetPanicOnFault
;;   {:added "1.0"
;;    :go "testSetPanicOnFault(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{11767431 0xc004efa3e0}) t])
;; 
JOKER FUNC runtime_test.TestShrinkStackDuringBlockedSend has: 
;; (defn TestShrinkStackDuringBlockedSend
;;   {:added "1.0"
;;    :go "testShrinkStackDuringBlockedSend(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{11004262 0xc004432ec0}) t])
;; 
JOKER FUNC runtime_test.TestSideEffectOrder has: 
;; (defn TestSideEffectOrder
;;   {:added "1.0"
;;    :go "testSideEffectOrder(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{11388871 0xc003bf5580}) t])
;; 
JOKER FUNC runtime_test.TestSigStackSwapping has: 
;; (defn TestSigStackSwapping
;;   {:added "1.0"
;;    :go "testSigStackSwapping(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{12412053 0xc0056d1900}) t])
;; 
JOKER FUNC runtime_test.TestSignalDuringExec has: 
;; (defn TestSignalDuringExec
;;   {:added "1.0"
;;    :go "testSignalDuringExec(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{12505649 0xc005854100}) t])
;; 
JOKER FUNC runtime_test.TestSignalExitStatus has: 
;; (defn TestSignalExitStatus
;;   {:added "1.0"
;;    :go "testSignalExitStatus(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{12504785 0xc00584b1a0}) t])
;; 
JOKER FUNC runtime_test.TestSignalIgnoreSIGTRAP has: 
;; (defn TestSignalIgnoreSIGTRAP
;;   {:added "1.0"
;;    :go "testSignalIgnoreSIGTRAP(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{12505454 0xc00584bde0}) t])
;; 
JOKER FUNC runtime_test.TestSimpleDeadlock has: 
;; (defn TestSimpleDeadlock
;;   {:added "1.0"
;;    :go "testSimpleDeadlock(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{12242899 0xc00547df00}) t])
;; 
JOKER FUNC runtime_test.TestSingleBucketMapStringKeys_DupLen has: 
;; (defn TestSingleBucketMapStringKeys_DupLen
;;   "Tests a map with a single bucket, with same-lengthed short keys
;; ("quick keys") as well as long keys."
;;   {:added "1.0"
;;    :go "testSingleBucketMapStringKeys_DupLen(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{11550460 0xc003de5f60}) t])
;; 
JOKER FUNC runtime_test.TestSingleBucketMapStringKeys_NoDupLen has: 
;; (defn TestSingleBucketMapStringKeys_NoDupLen
;;   "Tests a map with a single bucket, with all keys having different lengths."
;;   {:added "1.0"
;;    :go "testSingleBucketMapStringKeys_NoDupLen(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{11550847 0xc004c16480}) t])
;; 
JOKER FUNC runtime_test.TestSizeof has: 
;; (defn TestSizeof
;;   {:added "1.0"
;;    :go "testSizeof(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{11019347 0xc0048c1be0}) t])
;; 
JOKER FUNC runtime_test.TestSmhasherAppendedZeros has: 
;; (defn TestSmhasherAppendedZeros
;;   "a string plus adding zeros must make distinct hashes"
;;   {:added "1.0"
;;    :go "testSmhasherAppendedZeros(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{12447126 0xc005785ca0}) t])
;; 
JOKER FUNC runtime_test.TestSmhasherAvalanche has: 
;; (defn TestSmhasherAvalanche
;;   "Flipping a single bit of a key should flip each output bit with 50% probability."
;;   {:added "1.0"
;;    :go "testSmhasherAvalanche(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{12453657 0xc0057aaf20}) t])
;; 
JOKER FUNC runtime_test.TestSmhasherCyclic has: 
;; (defn TestSmhasherCyclic
;;   "Test strings with repeats, like "abcdabcdabcdabcd...""
;;   {:added "1.0"
;;    :go "testSmhasherCyclic(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{12448756 0xc005791f60}) t])
;; 
JOKER FUNC runtime_test.TestSmhasherPermutation has: 
;; (defn TestSmhasherPermutation
;;   "Test all possible combinations of n blocks from the set s.
;; "permutation" is a bad name here, but it is what Smhasher uses."
;;   {:added "1.0"
;;    :go "testSmhasherPermutation(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{12450134 0xc005793f00}) t])
;; 
JOKER FUNC runtime_test.TestSmhasherSanity has: 
;; (defn TestSmhasherSanity
;;   "Sanity checks.
;; hash should not depend on values outside key.
;; hash should not depend on alignment."
;;   {:added "1.0"
;;    :go "testSmhasherSanity(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{12445614 0xc005767de0}) t])
;; 
JOKER FUNC runtime_test.TestSmhasherSeed has: 
;; (defn TestSmhasherSeed
;;   "Make sure different seed values generate different hashes."
;;   {:added "1.0"
;;    :go "testSmhasherSeed(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{12457090 0xc0057b8f20}) t])
;; 
JOKER FUNC runtime_test.TestSmhasherSmallKeys has: 
;; (defn TestSmhasherSmallKeys
;;   "All 0-3 byte strings have distinct hashes."
;;   {:added "1.0"
;;    :go "testSmhasherSmallKeys(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{12447344 0xc005790120}) t])
;; 
JOKER FUNC runtime_test.TestSmhasherSparse has: 
;; (defn TestSmhasherSparse
;;   "Test strings with only a few bits set"
;;   {:added "1.0"
;;    :go "testSmhasherSparse(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{12449311 0xc005792c00}) t])
;; 
JOKER FUNC runtime_test.TestSmhasherText has: 
;; (defn TestSmhasherText
;;   "All keys of the form prefix + [A-Za-z0-9]*N + suffix."
;;   {:added "1.0"
;;    :go "testSmhasherText(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{12456358 0xc0057b3f20}) t])
;; 
JOKER FUNC runtime_test.TestSmhasherTwoNonzero has: 
;; (defn TestSmhasherTwoNonzero
;;   "Strings with up to two nonzero bytes all have distinct hashes."
;;   {:added "1.0"
;;    :go "testSmhasherTwoNonzero(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{12447998 0xc005790f00}) t])
;; 
JOKER FUNC runtime_test.TestSmhasherWindowed has: 
;; (defn TestSmhasherWindowed
;;   "All bit rotations of a set of distinct keys"
;;   {:added "1.0"
;;    :go "testSmhasherWindowed(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{12455751 0xc0057b31e0}) t])
;; 
JOKER FUNC runtime_test.TestSmhasherZeros has: 
;; (defn TestSmhasherZeros
;;   "Different length strings of all zeros have distinct hashes."
;;   {:added "1.0"
;;    :go "testSmhasherZeros(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{12447733 0xc005790a00}) t])
;; 
JOKER FUNC runtime_test.TestStackAllOutput has: 
;; (defn TestStackAllOutput
;;   {:added "1.0"
;;    :go "testStackAllOutput(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{11349980 0xc003b48fa0}) t])
;; 
JOKER FUNC runtime_test.TestStackCache has: 
;; (defn TestStackCache
;;   {:added "1.0"
;;    :go "testStackCache(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{11349120 0xc003b43f60}) t])
;; 
JOKER FUNC runtime_test.TestStackGrowth has: 
;; (defn TestStackGrowth
;;   "Test stack growing in different contexts."
;;   {:added "1.0"
;;    :go "testStackGrowth(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{11341400 0xc003b2d5a0}) t])
;; 
JOKER FUNC runtime_test.TestStackGrowthCallback has: 
;; (defn TestStackGrowthCallback
;;   {:added "1.0"
;;    :go "testStackGrowthCallback(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{11343626 0xc003b35980}) t])
;; 
JOKER FUNC runtime_test.TestStackMem has: 
;; (defn TestStackMem
;;   "TestStackMem measures per-thread stack segment cache behavior.
;; The test consumed up to 500MB in the past."
;;   {:added "1.0"
;;    :go "testStackMem(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{11339808 0xc003b25f40}) t])
;; 
JOKER FUNC runtime_test.TestStackOutput has: 
;; (defn TestStackOutput
;;   {:added "1.0"
;;    :go "testStackOutput(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{11349720 0xc003b48aa0}) t])
;; 
JOKER FUNC runtime_test.TestStackOverflow has: 
;; (defn TestStackOverflow
;;   {:added "1.0"
;;    :go "testStackOverflow(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{12243484 0xc005482840}) t])
;; 
JOKER FUNC runtime_test.TestStackPanic has: 
;; (defn TestStackPanic
;;   {:added "1.0"
;;    :go "testStackPanic(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{11350235 0xc003b494a0}) t])
;; 
JOKER FUNC runtime_test.TestStackWrapperCaller has: 
;; (defn TestStackWrapperCaller
;;   {:added "1.0"
;;    :go "testStackWrapperCaller(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{11352996 0xc003b5aca0}) t])
;; 
JOKER FUNC runtime_test.TestStackWrapperCallers has: 
;; (defn TestStackWrapperCallers
;;   {:added "1.0"
;;    :go "testStackWrapperCallers(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{11353334 0xc003b5b180}) t])
;; 
JOKER FUNC runtime_test.TestStackWrapperStack has: 
;; (defn TestStackWrapperStack
;;   {:added "1.0"
;;    :go "testStackWrapperStack(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{11353727 0xc003b5b720}) t])
;; 
JOKER FUNC runtime_test.TestStackWrapperStackPanic has: 
;; (defn TestStackWrapperStackPanic
;;   {:added "1.0"
;;    :go "testStackWrapperStackPanic(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{11354066 0xc003b5bbe0}) t])
;; 
JOKER FUNC runtime_test.TestStealOrder has: 
;; (defn TestStealOrder
;;   {:added "1.0"
;;    :go "testStealOrder(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{11539724 0xc003dbcca0}) t])
;; 
JOKER FUNC runtime_test.TestStopCPUProfilingWithProfilerOff has: 
;; (defn TestStopCPUProfilingWithProfilerOff
;;   "golang.org/issue/7063"
;;   {:added "1.0"
;;    :go "testStopCPUProfilingWithProfilerOff(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{11766185 0xc004ef3dc0}) t])
;; 
JOKER FUNC runtime_test.TestStopTheWorldDeadlock has: 
;; (defn TestStopTheWorldDeadlock
;;   {:added "1.0"
;;    :go "testStopTheWorldDeadlock(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{11521567 0xc003d6fa80}) t])
;; 
JOKER FUNC runtime_test.TestString2Slice has: 
;; (defn TestString2Slice
;;   {:added "1.0"
;;    :go "testString2Slice(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{11089687 0xc003e77ec0}) t])
;; 
JOKER FUNC runtime_test.TestStringConcatenationAllocs has: 
;; (defn TestStringConcatenationAllocs
;;   {:added "1.0"
;;    :go "testStringConcatenationAllocs(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{12305980 0xc005566e20}) t])
;; 
JOKER FUNC runtime_test.TestStringOnStack has: 
;; (defn TestStringOnStack
;;   {:added "1.0"
;;    :go "testStringOnStack(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{11088263 0xc003e76260}) t])
;; 
JOKER FUNC runtime_test.TestStringW has: 
;; (defn TestStringW
;;   {:added "1.0"
;;    :go "testStringW(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{11087108 0xc003e70c80}) t])
;; 
JOKER FUNC runtime_test.TestStructHash has: 
;; (defn TestStructHash
;;   {:added "1.0"
;;    :go "testStructHash(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{12459081 0xc0057c4dc0}) t])
;; 
JOKER FUNC runtime_test.TestThreadExhaustion has: 
;; (defn TestThreadExhaustion
;;   {:added "1.0"
;;    :go "testThreadExhaustion(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{12243781 0xc005482c00}) t])
;; 
JOKER FUNC runtime_test.TestTimePprof has: 
;; (defn TestTimePprof
;;   {:added "1.0"
;;    :go "testTimePprof(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{12254275 0xc0054aa760}) t])
;; 
JOKER FUNC runtime_test.TestTimerFairness has: 
;; (defn TestTimerFairness
;;   {:added "1.0"
;;    :go "testTimerFairness(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{11526178 0xc003d89ea0}) t])
;; 
JOKER FUNC runtime_test.TestTimerFairness2 has: 
;; (defn TestTimerFairness2
;;   {:added "1.0"
;;    :go "testTimerFairness2(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{11526595 0xc003d8c520}) t])
;; 
JOKER FUNC runtime_test.TestTinyAlloc has: 
;; (defn TestTinyAlloc
;;   {:added "1.0"
;;    :go "testTinyAlloc(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{12306354 0xc005567540}) t])
;; 
JOKER FUNC runtime_test.TestTracebackAncestors has: 
;; (defn TestTracebackAncestors
;;   {:added "1.0"
;;    :go "testTracebackAncestors(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{11357105 0xc003b6a660}) t])
;; 
JOKER FUNC runtime_test.TestTracebackSystemstack has: 
;; (defn TestTracebackSystemstack
;;   {:added "1.0"
;;    :go "testTracebackSystemstack(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{11356129 0xc003b679e0}) t])
;; 
JOKER FUNC runtime_test.TestTrailingZero has: 
;; (defn TestTrailingZero
;;   {:added "1.0"
;;    :go "testTrailingZero(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{11769043 0xc004efba80}) t])
;; 
JOKER FUNC runtime_test.TestUserForcedGC has: 
;; (defn TestUserForcedGC
;;   {:added "1.0"
;;    :go "testUserForcedGC(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{11212753 0xc003e3e460}) t])
;; 
JOKER FUNC runtime_test.TestVersion has: 
;; (defn TestVersion
;;   {:added "1.0"
;;    :go "testVersion(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{11772178 0xc004f0cdc0}) t])
;; 
JOKER FUNC runtime_test.TestWindowsStackMemoryCgo has: 
;; (defn TestWindowsStackMemoryCgo
;;   {:added "1.0"
;;    :go "testWindowsStackMemoryCgo(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{12411604 0xc0056d11a0}) t])
;; 
JOKER FUNC runtime_test.TestYieldLocked has: 
;; (defn TestYieldLocked
;;   {:added "1.0"
;;    :go "testYieldLocked(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{11522525 0xc003d7ea60}) t])
;; 
JOKER FUNC runtime_test.TestYieldLockedProgress has: 
;; (defn TestYieldLockedProgress
;;   {:added "1.0"
;;    :go "testYieldLockedProgress(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{11522152 0xc003d7e480}) t])
;; 
JOKER FUNC runtime_test.TestYieldProgress has: 
;; (defn TestYieldProgress
;;   {:added "1.0"
;;    :go "testYieldProgress(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{11522078 0xc003d7e360}) t])
;; 
JOKER FUNC runtime_test.TestZeroConvT2x has: 
;; (defn TestZeroConvT2x
;;   {:added "1.0"
;;    :go "testZeroConvT2x(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{11368541 0xc003b95a00}) t])
;; 
JOKER FUNC scanner.BenchmarkScan has: 
;; (defn BenchmarkScan
;;   {:added "1.0"
;;    :go "benchmarkScan(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{4955406 0xc0023e8c80}) b])
;; 
JOKER FUNC scanner.BenchmarkScanFile has: 
;; (defn BenchmarkScanFile
;;   {:added "1.0"
;;    :go "benchmarkScanFile(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{4955724 0xc0023e9420}) b])
;; 
JOKER FUNC scanner.PrintError has: 
;; (defn PrintError
;;   "PrintError is a utility function that prints a list of errors to w,
;; one error per line, if the err parameter is an ErrorList. Otherwise
;; it prints the err string."
;;   {:added "1.0"
;;    :go "printError(w, err)"}
;;   [^ABEND881(unrecognized Expr type *ast.SelectorExpr at: &{io Writer}) w, err])
;; 
JOKER FUNC scanner.TestError has: 
;; (defn TestError
;;   {:added "1.0"
;;    :go "testError(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{13598878 0xc0037b01c0}) t])
;; 
JOKER FUNC scanner.TestIOError has: 
;; (defn TestIOError
;;   {:added "1.0"
;;    :go "testIOError(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{13600927 0xc0037b1ca0}) t])
;; 
JOKER FUNC scanner.TestInit has: 
;; (defn TestInit
;;   "Verify that initializing the same scanner more than once works correctly."
;;   {:added "1.0"
;;    :go "testInit(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{4947269 0xc0023d6800}) t])
;; 
JOKER FUNC scanner.TestInvalidLineDirectives has: 
;; (defn TestInvalidLineDirectives
;;   "Verify that invalid line directives get the correct error message."
;;   {:added "1.0"
;;    :go "testInvalidLineDirectives(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{4946425 0xc0023cf800}) t])
;; 
JOKER FUNC scanner.TestIssue10213 has: 
;; (defn TestIssue10213
;;   "Verify that no comments show up as literal values when skipping comments."
;;   {:added "1.0"
;;    :go "testIssue10213(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{4954875 0xc0023e8420}) t])
;; 
JOKER FUNC scanner.TestLineDirectives has: 
;; (defn TestLineDirectives
;;   "Verify that line directives are interpreted correctly."
;;   {:added "1.0"
;;    :go "testLineDirectives(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{4944754 0xc0023ce120}) t])
;; 
JOKER FUNC scanner.TestNext has: 
;; (defn TestNext
;;   {:added "1.0"
;;    :go "testNext(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{13589296 0xc0040c30a0}) t])
;; 
JOKER FUNC scanner.TestNextEOFHandling has: 
;; (defn TestNextEOFHandling
;;   {:added "1.0"
;;    :go "testNextEOFHandling(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{13604929 0xc002fa0460}) t])
;; 
JOKER FUNC scanner.TestPos has: 
;; (defn TestPos
;;   {:added "1.0"
;;    :go "testPos(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{13602335 0xc002f54540}) t])
;; 
JOKER FUNC scanner.TestPosition has: 
;; (defn TestPosition
;;   {:added "1.0"
;;    :go "testPosition(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{13593877 0xc0038c9a40}) t])
;; 
JOKER FUNC scanner.TestScanCustomIdent has: 
;; (defn TestScanCustomIdent
;;   {:added "1.0"
;;    :go "testScanCustomIdent(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{13596046 0xc003822f20}) t])
;; 
JOKER FUNC scanner.TestScanEOFHandling has: 
;; (defn TestScanEOFHandling
;;   {:added "1.0"
;;    :go "testScanEOFHandling(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{13605265 0xc002f942a0}) t])
;; 
JOKER FUNC scanner.TestScanErrors has: 
;; (defn TestScanErrors
;;   {:added "1.0"
;;    :go "testScanErrors(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{4954677 0xc0023e8020}) t])
;; 
JOKER FUNC scanner.TestScanNext has: 
;; (defn TestScanNext
;;   {:added "1.0"
;;    :go "testScanNext(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{13596854 0xc0037ec220}) t])
;; 
JOKER FUNC scanner.TestScanSelectedMask has: 
;; (defn TestScanSelectedMask
;;   {:added "1.0"
;;    :go "testScanSelectedMask(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{13595577 0xc00383c020}) t])
;; 
JOKER FUNC scanner.TestScanWhitespace has: 
;; (defn TestScanWhitespace
;;   {:added "1.0"
;;    :go "testScanWhitespace(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{13597772 0xc0037b4c20}) t])
;; 
JOKER FUNC scanner.TestScanZeroMode has: 
;; (defn TestScanZeroMode
;;   {:added "1.0"
;;    :go "testScanZeroMode(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{13594693 0xc003889ee0}) t])
;; 
JOKER FUNC scanner.TestSemis has: 
;; (defn TestSemis
;;   {:added "1.0"
;;    :go "testSemis(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{4941871 0xc0023c61e0}) t])
;; 
JOKER FUNC scanner.TestStdErrorHander has: 
;; (defn TestStdErrorHander
;;   {:added "1.0"
;;    :go "testStdErrorHander(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{4948173 0xc0023d7b40}) t])
;; 
JOKER FUNC scanner.TestStripCR has: 
;; (defn TestStripCR
;;   {:added "1.0"
;;    :go "testStripCR(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{4938780 0xc0023c19c0}) t])
;; 
JOKER FUNC scanner.TokenString has: 
(defn ^String TokenString
  "TokenString returns a printable string for a token or Unicode character."
  {:added "1.0"
   :go "tokenString(tok)"}
  [tok])

JOKER FUNC scanner_test.Example has: 
;; (defn Example
;;   {:added "1.0"
;;    :go "example()"}
;;   [])
;; 
JOKER FUNC scanner_test.ExampleScanner_Scan has: 
;; (defn ExampleScanner_Scan
;;   {:added "1.0"
;;    :go "exampleScanner_Scan()"}
;;   [])
;; 
JOKER FUNC scanner_test.Example_isIdentRune has: 
;; (defn Example_isIdentRune
;;   {:added "1.0"
;;    :go "example_isIdentRune()"}
;;   [])
;; 
JOKER FUNC scanner_test.Example_mode has: 
;; (defn Example_mode
;;   {:added "1.0"
;;    :go "example_mode()"}
;;   [])
;; 
JOKER FUNC scanner_test.Example_whitespace has: 
;; (defn Example_whitespace
;;   {:added "1.0"
;;    :go "example_whitespace()"}
;;   [])
;; 
JOKER FUNC sha1.BenchmarkHash1K has: 
;; (defn BenchmarkHash1K
;;   {:added "1.0"
;;    :go "benchmarkHash1K(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{1420892 0xc000d41840}) b])
;; 
JOKER FUNC sha1.BenchmarkHash320Bytes has: 
;; (defn BenchmarkHash320Bytes
;;   {:added "1.0"
;;    :go "benchmarkHash320Bytes(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{1420829 0xc000d416e0}) b])
;; 
JOKER FUNC sha1.BenchmarkHash8Bytes has: 
;; (defn BenchmarkHash8Bytes
;;   {:added "1.0"
;;    :go "benchmarkHash8Bytes(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{1420762 0xc000d41580}) b])
;; 
JOKER FUNC sha1.BenchmarkHash8K has: 
;; (defn BenchmarkHash8K
;;   {:added "1.0"
;;    :go "benchmarkHash8K(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{1420956 0xc000d419a0}) b])
;; 
JOKER FUNC sha1.New has: 
;; (defn ^ABEND881(unrecognized Expr type *ast.SelectorExpr at: &{hash Hash}) New
;;   "New returns a new hash.Hash computing the SHA1 checksum. The Hash also
;; implements encoding.BinaryMarshaler and encoding.BinaryUnmarshaler to
;; marshal and unmarshal the internal state of the hash."
;;   {:added "1.0"
;;    :go "new()"}
;;   [])
;; 
JOKER FUNC sha1.Sum has: 
;; (defn ^[ABEND042(cannot find typename sha1.byte)] Sum
;;   "Sum returns the SHA-1 checksum of the data."
;;   {:added "1.0"
;;    :go "sum(data)"}
;;   [^ABEND881(unrecognized Expr type *ast.ArrayType at: &{1429842 <nil> byte}) data])
;; 
JOKER FUNC sha1.TestBlockGeneric has: 
;; (defn TestBlockGeneric
;;   "Tests that blockGeneric (pure Go) and block (in assembly for some architectures) match."
;;   {:added "1.0"
;;    :go "testBlockGeneric(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{1420172 0xc000d408c0}) t])
;; 
JOKER FUNC sha1.TestBlockSize has: 
;; (defn TestBlockSize
;;   {:added "1.0"
;;    :go "testBlockSize(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{1419926 0xc000d405a0}) t])
;; 
JOKER FUNC sha1.TestGolden has: 
;; (defn TestGolden
;;   {:added "1.0"
;;    :go "testGolden(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{1418182 0xc000d33960}) t])
;; 
JOKER FUNC sha1.TestGoldenMarshal has: 
;; (defn TestGoldenMarshal
;;   {:added "1.0"
;;    :go "testGoldenMarshal(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{1418994 0xc000d3b040}) t])
;; 
JOKER FUNC sha1.TestSize has: 
;; (defn TestSize
;;   {:added "1.0"
;;    :go "testSize(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{1419794 0xc000d402c0}) t])
;; 
JOKER FUNC sha1_test.ExampleNew has: 
;; (defn ExampleNew
;;   {:added "1.0"
;;    :go "exampleNew()"}
;;   [])
;; 
JOKER FUNC sha1_test.ExampleNew_file has: 
;; (defn ExampleNew_file
;;   {:added "1.0"
;;    :go "exampleNew_file()"}
;;   [])
;; 
JOKER FUNC sha1_test.ExampleSum has: 
;; (defn ExampleSum
;;   {:added "1.0"
;;    :go "exampleSum()"}
;;   [])
;; 
JOKER FUNC sha1_test.TestOutOfBoundsRead has: 
;; (defn TestOutOfBoundsRead
;;   {:added "1.0"
;;    :go "testOutOfBoundsRead(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{1421292 0xc000d41d20}) t])
;; 
JOKER FUNC sha256.BenchmarkHash1K has: 
;; (defn BenchmarkHash1K
;;   {:added "1.0"
;;    :go "benchmarkHash1K(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{1472735 0xc0006d13c0}) b])
;; 
JOKER FUNC sha256.BenchmarkHash8Bytes has: 
;; (defn BenchmarkHash8Bytes
;;   {:added "1.0"
;;    :go "benchmarkHash8Bytes(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{1472674 0xc0006d1260}) b])
;; 
JOKER FUNC sha256.BenchmarkHash8K has: 
;; (defn BenchmarkHash8K
;;   {:added "1.0"
;;    :go "benchmarkHash8K(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{1472799 0xc0006d1560}) b])
;; 
JOKER FUNC sha256.New has: 
;; (defn ^ABEND881(unrecognized Expr type *ast.SelectorExpr at: &{hash Hash}) New
;;   "New returns a new hash.Hash computing the SHA256 checksum. The Hash
;; also implements encoding.BinaryMarshaler and
;; encoding.BinaryUnmarshaler to marshal and unmarshal the internal
;; state of the hash."
;;   {:added "1.0"
;;    :go "new()"}
;;   [])
;; 
JOKER FUNC sha256.New224 has: 
;; (defn ^ABEND881(unrecognized Expr type *ast.SelectorExpr at: &{hash Hash}) New224
;;   "New224 returns a new hash.Hash computing the SHA224 checksum."
;;   {:added "1.0"
;;    :go "new224()"}
;;   [])
;; 
JOKER FUNC sha256.Sum224 has: 
;; (defn ^sum224 Sum224
;;   "Sum224 returns the SHA224 checksum of the data."
;;   {:added "1.0"
;;    :go "sum224(data)"}
;;   [^ABEND881(unrecognized Expr type *ast.ArrayType at: &{1440880 <nil> byte}) data])
;; 
JOKER FUNC sha256.Sum256 has: 
;; (defn ^[ABEND042(cannot find typename sha256.byte)] Sum256
;;   "Sum256 returns the SHA256 checksum of the data."
;;   {:added "1.0"
;;    :go "sum256(data)"}
;;   [^ABEND881(unrecognized Expr type *ast.ArrayType at: &{1440727 <nil> byte}) data])
;; 
JOKER FUNC sha256.TestBlockGeneric has: 
;; (defn TestBlockGeneric
;;   "Tests that blockGeneric (pure Go) and block (in assembly for some architectures) match."
;;   {:added "1.0"
;;    :go "testBlockGeneric(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{1472135 0xc0006cb720}) t])
;; 
JOKER FUNC sha256.TestBlockSize has: 
;; (defn TestBlockSize
;;   {:added "1.0"
;;    :go "testBlockSize(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{1471890 0xc0006cb3e0}) t])
;; 
JOKER FUNC sha256.TestGolden has: 
;; (defn TestGolden
;;   {:added "1.0"
;;    :go "testGolden(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{1469111 0xc0006a0500}) t])
;; 
JOKER FUNC sha256.TestGoldenMarshal has: 
;; (defn TestGoldenMarshal
;;   {:added "1.0"
;;    :go "testGoldenMarshal(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{1470238 0xc0006c48a0}) t])
;; 
JOKER FUNC sha256.TestMarshalTypeMismatch has: 
;; (defn TestMarshalTypeMismatch
;;   {:added "1.0"
;;    :go "testMarshalTypeMismatch(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{1471333 0xc0006ca2a0}) t])
;; 
JOKER FUNC sha256.TestSize has: 
;; (defn TestSize
;;   {:added "1.0"
;;    :go "testSize(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{1471649 0xc0006caf00}) t])
;; 
JOKER FUNC sha256_test.ExampleNew has: 
;; (defn ExampleNew
;;   {:added "1.0"
;;    :go "exampleNew()"}
;;   [])
;; 
JOKER FUNC sha256_test.ExampleNew_file has: 
;; (defn ExampleNew_file
;;   {:added "1.0"
;;    :go "exampleNew_file()"}
;;   [])
;; 
JOKER FUNC sha256_test.ExampleSum256 has: 
;; (defn ExampleSum256
;;   {:added "1.0"
;;    :go "exampleSum256()"}
;;   [])
;; 
JOKER FUNC sha512.BenchmarkHash1K has: 
;; (defn BenchmarkHash1K
;;   {:added "1.0"
;;    :go "benchmarkHash1K(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{1587130 0xc00086e960}) b])
;; 
JOKER FUNC sha512.BenchmarkHash8Bytes has: 
;; (defn BenchmarkHash8Bytes
;;   {:added "1.0"
;;    :go "benchmarkHash8Bytes(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{1587069 0xc00086e800}) b])
;; 
JOKER FUNC sha512.BenchmarkHash8K has: 
;; (defn BenchmarkHash8K
;;   {:added "1.0"
;;    :go "benchmarkHash8K(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{1587194 0xc00086f3e0}) b])
;; 
JOKER FUNC sha512.New has: 
;; (defn ^ABEND881(unrecognized Expr type *ast.SelectorExpr at: &{hash Hash}) New
;;   "New returns a new hash.Hash computing the SHA-512 checksum."
;;   {:added "1.0"
;;    :go "new()"}
;;   [])
;; 
JOKER FUNC sha512.New384 has: 
;; (defn ^ABEND881(unrecognized Expr type *ast.SelectorExpr at: &{hash Hash}) New384
;;   "New384 returns a new hash.Hash computing the SHA-384 checksum."
;;   {:added "1.0"
;;    :go "new384()"}
;;   [])
;; 
JOKER FUNC sha512.New512_224 has: 
;; (defn ^ABEND881(unrecognized Expr type *ast.SelectorExpr at: &{hash Hash}) New512_224
;;   "New512_224 returns a new hash.Hash computing the SHA-512/224 checksum."
;;   {:added "1.0"
;;    :go "new512_224()"}
;;   [])
;; 
JOKER FUNC sha512.New512_256 has: 
;; (defn ^ABEND881(unrecognized Expr type *ast.SelectorExpr at: &{hash Hash}) New512_256
;;   "New512_256 returns a new hash.Hash computing the SHA-512/256 checksum."
;;   {:added "1.0"
;;    :go "new512_256()"}
;;   [])
;; 
JOKER FUNC sha512.Sum384 has: 
;; (defn ^sum384 Sum384
;;   "Sum384 returns the SHA384 checksum of the data."
;;   {:added "1.0"
;;    :go "sum384(data)"}
;;   [^ABEND881(unrecognized Expr type *ast.ArrayType at: &{1481785 <nil> byte}) data])
;; 
JOKER FUNC sha512.Sum512 has: 
;; (defn ^[ABEND042(cannot find typename sha512.byte)] Sum512
;;   "Sum512 returns the SHA512 checksum of the data."
;;   {:added "1.0"
;;    :go "sum512(data)"}
;;   [^ABEND881(unrecognized Expr type *ast.ArrayType at: &{1481608 <nil> byte}) data])
;; 
JOKER FUNC sha512.Sum512_224 has: 
;; (defn ^sum224 Sum512_224
;;   "Sum512_224 returns the Sum512/224 checksum of the data."
;;   {:added "1.0"
;;    :go "sum512_224(data)"}
;;   [^ABEND881(unrecognized Expr type *ast.ArrayType at: &{1482026 <nil> byte}) data])
;; 
JOKER FUNC sha512.Sum512_256 has: 
;; (defn ^sum256 Sum512_256
;;   "Sum512_256 returns the Sum512/256 checksum of the data."
;;   {:added "1.0"
;;    :go "sum512_256(data)"}
;;   [^ABEND881(unrecognized Expr type *ast.ArrayType at: &{1482271 <nil> byte}) data])
;; 
JOKER FUNC sha512.TestBlockGeneric has: 
;; (defn TestBlockGeneric
;;   "Tests that blockGeneric (pure Go) and block (in assembly for some architectures) match."
;;   {:added "1.0"
;;    :go "testBlockGeneric(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{1586530 0xc000aa1be0}) t])
;; 
JOKER FUNC sha512.TestBlockSize has: 
;; (defn TestBlockSize
;;   {:added "1.0"
;;    :go "testBlockSize(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{1586284 0xc000aa18c0}) t])
;; 
JOKER FUNC sha512.TestGolden has: 
;; (defn TestGolden
;;   {:added "1.0"
;;    :go "testGolden(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{1583263 0xc0009c7300}) t])
;; 
JOKER FUNC sha512.TestGoldenMarshal has: 
;; (defn TestGoldenMarshal
;;   {:added "1.0"
;;    :go "testGoldenMarshal(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{1584068 0xc0009f1ec0}) t])
;; 
JOKER FUNC sha512.TestMarshalMismatch has: 
;; (defn TestMarshalMismatch
;;   {:added "1.0"
;;    :go "testMarshalMismatch(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{1585269 0xc0009e6060}) t])
;; 
JOKER FUNC sha512.TestSize has: 
;; (defn TestSize
;;   {:added "1.0"
;;    :go "testSize(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{1585811 0xc000aa1040}) t])
;; 
JOKER FUNC signal.Ignore has: 
;; (defn Ignore
;;   "Ignore causes the provided signals to be ignored. If they are received by
;; the program, nothing will happen. Ignore undoes the effect of any prior
;; calls to Notify for the provided signals.
;; If no signals are provided, all incoming signals will be ignored."
;;   {:added "1.0"
;;    :go "ignore(sig)"}
;;   [^ABEND881(unrecognized Expr type *ast.Ellipsis at: &{10197709 0xc0022c0e20}) sig])
;; 
JOKER FUNC signal.Ignored has: 
;; (defn ^ABEND042(cannot find typename signal.bool) Ignored
;;   "Ignored reports whether sig is currently ignored."
;;   {:added "1.0"
;;    :go "ignored(sig)"}
;;   [^ABEND881(unrecognized Expr type *ast.SelectorExpr at: &{os Signal}) sig])
;; 
JOKER FUNC signal.Notify has: 
;; (defn Notify
;;   "Notify causes package signal to relay incoming signals to c.
;; If no signals are provided, all incoming signals will be relayed to c.
;; Otherwise, just the provided signals will.
;; 
;; Package signal will not block sending to c: the caller must ensure
;; that c has sufficient buffer space to keep up with the expected
;; signal rate. For a channel used for notification of just one signal value,
;; a buffer of size 1 is sufficient.
;; 
;; It is allowed to call Notify multiple times with the same channel:
;; each call expands the set of signals sent to that channel.
;; The only way to remove signals from the set is to call Stop.
;; 
;; It is allowed to call Notify multiple times with different channels
;; and the same signals: each channel receives copies of incoming
;; signals independently."
;;   {:added "1.0"
;;    :go "notify(c, sig)"}
;;   [^ABEND881(unrecognized Expr type *ast.ChanType at: &{10198720 10198724 1 0xc0022c99c0}) c, ^ABEND881(unrecognized Expr type *ast.Ellipsis at: &{10198742 0xc0022c9a40}) sig])
;; 
JOKER FUNC signal.Reset has: 
;; (defn Reset
;;   "Reset undoes the effect of any prior calls to Notify for the provided
;; signals.
;; If no signals are provided, all signal handlers will be reset."
;;   {:added "1.0"
;;    :go "reset(sig)"}
;;   [^ABEND881(unrecognized Expr type *ast.Ellipsis at: &{10199484 0xc002350820}) sig])
;; 
JOKER FUNC signal.Stop has: 
;; (defn Stop
;;   "Stop causes package signal to stop relaying incoming signals to c.
;; It undoes the effect of all prior calls to Notify using c.
;; When Stop returns, it is guaranteed that c will receive no more signals."
;;   {:added "1.0"
;;    :go "stop(c)"}
;;   [^ABEND881(unrecognized Expr type *ast.ChanType at: &{10199751 10199755 1 0xc002351bc0}) c])
;; 
JOKER FUNC signal.TestAtomicStop has: 
;; (defn TestAtomicStop
;;   "Test race between stopping and receiving a signal (issue 14571)."
;;   {:added "1.0"
;;    :go "testAtomicStop(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{10211973 0xc0024c5660}) t])
;; 
JOKER FUNC signal.TestDetectNohup has: 
;; (defn TestDetectNohup
;;   "Test that Ignored(SIGHUP) correctly detects whether it is being run under nohup."
;;   {:added "1.0"
;;    :go "testDetectNohup(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{10206987 0xc00246ad60}) t])
;; 
JOKER FUNC signal.TestIgnore has: 
;; (defn TestIgnore
;;   "Test that Ignore cancels registration for listed signals on all channels."
;;   {:added "1.0"
;;    :go "testIgnore(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{10206133 0xc00243ba40}) t])
;; 
JOKER FUNC signal.TestIgnored has: 
;; (defn TestIgnored
;;   "Test that Ignored correctly detects changes to the ignored status of a signal."
;;   {:added "1.0"
;;    :go "testIgnored(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{10206272 0xc00243bc40}) t])
;; 
JOKER FUNC signal.TestNohup has: 
;; (defn TestNohup
;;   "Test that when run under nohup, an uncaught SIGHUP does not kill the program,
;; but a"
;;   {:added "1.0"
;;    :go "testNohup(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{10209670 0xc0024bb940}) t])
;; 
JOKER FUNC signal.TestReset has: 
;; (defn TestReset
;;   "Test that Reset cancels registration for listed signals on all channels."
;;   {:added "1.0"
;;    :go "testReset(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{10205999 0xc00243b4c0}) t])
;; 
JOKER FUNC signal.TestSIGCONT has: 
;; (defn TestSIGCONT
;;   "Test that SIGCONT works (issue 8953)."
;;   {:added "1.0"
;;    :go "testSIGCONT(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{10211712 0xc0024c4da0}) t])
;; 
JOKER FUNC signal.TestSignal has: 
;; (defn TestSignal
;;   "Test that basic signal handling works."
;;   {:added "1.0"
;;    :go "testSignal(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{10202111 0xc002424f60}) t])
;; 
JOKER FUNC signal.TestStop has: 
;; (defn TestStop
;;   "Test that Stop cancels the channel's registrations."
;;   {:added "1.0"
;;    :go "testStop(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{10208402 0xc0024b71a0}) t])
;; 
JOKER FUNC signal.TestStress has: 
;; (defn TestStress
;;   {:added "1.0"
;;    :go "testStress(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{10203009 0xc00242a480}) t])
;; 
JOKER FUNC signal_test.ExampleNotify has: 
;; (defn ExampleNotify
;;   {:added "1.0"
;;    :go "exampleNotify()"}
;;   [])
;; 
JOKER FUNC signal_test.ExampleNotify_allSignals has: 
;; (defn ExampleNotify_allSignals
;;   {:added "1.0"
;;    :go "exampleNotify_allSignals()"}
;;   [])
;; 
JOKER FUNC signal_test.TestTerminalSignal has: 
;; (defn TestTerminalSignal
;;   {:added "1.0"
;;    :go "testTerminalSignal(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{10214865 0xc00251e000}) t])
;; 
JOKER FUNC smtp.CRAMMD5Auth has: 
;; (defn ^ABEND881(unrecognized Expr type *ast.InterfaceType at: &{9809705 0xc004901ec0 false}) CRAMMD5Auth
;;   "CRAMMD5Auth returns an Auth that implements the CRAM-MD5 authentication
;; mechanism as defined in RFC 2195.
;; The returned Auth uses the given username and secret to authenticate
;; to the server using the challenge-response mechanism."
;;   {:added "1.0"
;;    :go "cRAMMD5Auth(username, secret)"}
;;   [^String username, ^String secret])
;; 
JOKER FUNC smtp.Dial has: 
;; (defn ^[{:text ^ABEND881(unrecognized Expr type *ast.StarExpr at: &{9814135 0xc004911580}) Text, :conn ^ABEND881(unrecognized Expr type *ast.SelectorExpr at: &{net Conn}) conn, :tls tls, :servername ^String serverName, :ext ^ABEND881(unrecognized Expr type *ast.MapType at: &{9814369 string string}) ext, :auth ^ABEND881(unrecognized Expr type *ast.ArrayType at: &{9814429 <nil> string}) auth, :localname ^String localName, :didhello didHello, :helloerror helloError} Error] Dial
;;   "Dial returns a new Client connected to an SMTP server at addr.
;; The addr must include a port, as in "mail.example.com:smtp"."
;;   {:added "1.0"
;;    :go "dial(addr)"}
;;   [^String addr])
;; 
JOKER FUNC smtp.NewClient has: 
;; (defn ^[{:text ^ABEND881(unrecognized Expr type *ast.StarExpr at: &{9814135 0xc004911580}) Text, :conn ^ABEND881(unrecognized Expr type *ast.SelectorExpr at: &{net Conn}) conn, :tls tls, :servername ^String serverName, :ext ^ABEND881(unrecognized Expr type *ast.MapType at: &{9814369 string string}) ext, :auth ^ABEND881(unrecognized Expr type *ast.ArrayType at: &{9814429 <nil> string}) auth, :localname ^String localName, :didhello didHello, :helloerror helloError} Error] NewClient
;;   "NewClient returns a new Client using an existing connection and host as a
;; server name to be used when authenticating."
;;   {:added "1.0"
;;    :go "newClient(conn, host)"}
;;   [^ABEND881(unrecognized Expr type *ast.SelectorExpr at: &{net Conn}) conn, ^String host])
;; 
JOKER FUNC smtp.PlainAuth has: 
;; (defn ^ABEND881(unrecognized Expr type *ast.InterfaceType at: &{9809705 0xc004901ec0 false}) PlainAuth
;;   "PlainAuth returns an Auth that implements the PLAIN authentication
;; mechanism as defined in RFC 4616. The returned Auth uses the given
;; username and password to authenticate to host and act as identity.
;; Usually identity should be the empty string, to act as username.
;; 
;; PlainAuth will only send the credentials if the connection is using TLS
;; or is connected to localhost. Otherwise authentication will fail with an
;; error, without sending the credentials."
;;   {:added "1.0"
;;    :go "plainAuth(identity, username, password, host)"}
;;   [^String identity, ^String username, ^String password, ^String host])
;; 
JOKER FUNC smtp.SendMail has: 
;; (defn ^Error SendMail
;;   "SendMail connects to the server at addr, switches to TLS if
;; possible, authenticates with the optional mechanism a if possible,
;; and then sends an email from address from, to addresses to, with
;; message msg.
;; The addr must include a port, as in "mail.example.com:smtp".
;; 
;; The addresses in the to parameter are the SMTP RCPT addresses.
;; 
;; The msg parameter should be an RFC 822-style email with headers
;; first, a blank line, and then the message body. The lines of msg
;; should be CRLF terminated. The msg headers should usually include
;; fields such as "From", "To", "Subject", and "Cc".  Sending "Bcc"
;; messages is accomplished by including an email address in the to
;; parameter but not including it in the msg headers.
;; 
;; The SendMail function and the net/smtp package are low-level
;; mechanisms and provide no support for DKIM signing, MIME
;; attachments (see the mime/multipart package), or other mail
;; functionality. Higher-level packages exist outside of the standard
;; library."
;;   {:added "1.0"
;;    :go "sendMail(addr, a, from, to, msg)"}
;;   [^String addr, a, ^String from, ^ABEND881(unrecognized Expr type *ast.ArrayType at: &{9822528 <nil> string}) to, ^ABEND881(unrecognized Expr type *ast.ArrayType at: &{9822542 <nil> byte}) msg])
;; 
JOKER FUNC smtp.TestAuth has: 
;; (defn TestAuth
;;   {:added "1.0"
;;    :go "testAuth(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{9786887 0xc0048baca0}) t])
;; 
JOKER FUNC smtp.TestAuthFailed has: 
;; (defn TestAuthFailed
;;   {:added "1.0"
;;    :go "testAuthFailed(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{9802980 0xc0048f78a0}) t])
;; 
JOKER FUNC smtp.TestAuthPlain has: 
;; (defn TestAuthPlain
;;   {:added "1.0"
;;    :go "testAuthPlain(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{9787712 0xc0048bbda0}) t])
;; 
JOKER FUNC smtp.TestBasic has: 
;; (defn TestBasic
;;   {:added "1.0"
;;    :go "testBasic(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{9790462 0xc0048d0540}) t])
;; 
JOKER FUNC smtp.TestClientAuthTrimSpace has: 
;; (defn TestClientAuthTrimSpace
;;   "Issue 17794: don't send a trailing space on AUTH command when there's no password."
;;   {:added "1.0"
;;    :go "testClientAuthTrimSpace(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{9788971 0xc0048caec0}) t])
;; 
JOKER FUNC smtp.TestHello has: 
;; (defn TestHello
;;   {:added "1.0"
;;    :go "testHello(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{9796974 0xc0048ea4e0}) t])
;; 
JOKER FUNC smtp.TestNewClient has: 
;; (defn TestNewClient
;;   {:added "1.0"
;;    :go "testNewClient(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{9793900 0xc0048d8ee0}) t])
;; 
JOKER FUNC smtp.TestNewClient2 has: 
;; (defn TestNewClient2
;;   {:added "1.0"
;;    :go "testNewClient2(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{9794998 0xc0048de0c0}) t])
;; 
JOKER FUNC smtp.TestNewClientWithTLS has: 
;; (defn TestNewClientWithTLS
;;   {:added "1.0"
;;    :go "testNewClientWithTLS(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{9795958 0xc0048defe0}) t])
;; 
JOKER FUNC smtp.TestSendMail has: 
;; (defn TestSendMail
;;   {:added "1.0"
;;    :go "testSendMail(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{9799416 0xc0048f2780}) t])
;; 
JOKER FUNC smtp.TestSendMailWithAuth has: 
;; (defn TestSendMailWithAuth
;;   {:added "1.0"
;;    :go "testSendMailWithAuth(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{9801787 0xc0048f67a0}) t])
;; 
JOKER FUNC smtp.TestTLSClient has: 
;; (defn TestTLSClient
;;   {:added "1.0"
;;    :go "testTLSClient(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{9804183 0xc0048fc920}) t])
;; 
JOKER FUNC smtp.TestTLSConnState has: 
;; (defn TestTLSConnState
;;   {:added "1.0"
;;    :go "testTLSConnState(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{9804761 0xc0048fd3c0}) t])
;; 
JOKER FUNC smtp_test.Example has: 
;; (defn Example
;;   {:added "1.0"
;;    :go "example()"}
;;   [])
;; 
JOKER FUNC smtp_test.ExamplePlainAuth has: 
;; (defn ExamplePlainAuth
;;   {:added "1.0"
;;    :go "examplePlainAuth()"}
;;   [])
;; 
JOKER FUNC smtp_test.ExampleSendMail has: 
;; (defn ExampleSendMail
;;   {:added "1.0"
;;    :go "exampleSendMail()"}
;;   [])
;; 
JOKER FUNC sort.Float64s has: 
;; (defn Float64s
;;   "Float64s sorts a slice of float64s in increasing order
;; (not-a-number values are treated as less than other values)."
;;   {:added "1.0"
;;    :go "float64s(a)"}
;;   [^ABEND881(unrecognized Expr type *ast.ArrayType at: &{12719214 <nil> float64}) a])
;; 
JOKER FUNC sort.Float64sAreSorted has: 
;; (defn ^ABEND042(cannot find typename sort.bool) Float64sAreSorted
;;   "Float64sAreSorted tests whether a slice of float64s is sorted in increasing order
;; (not-a-number values are treated as less than other values)."
;;   {:added "1.0"
;;    :go "float64sAreSorted(a)"}
;;   [^ABEND881(unrecognized Expr type *ast.ArrayType at: &{12719679 <nil> float64}) a])
;; 
JOKER FUNC sort.Heapsort has: 
;; (defn Heapsort
;;   {:added "1.0"
;;    :go "heapsort(data)"}
;;   [data])
;; 
JOKER FUNC sort.Ints has: 
;; (defn Ints
;;   "Ints sorts a slice of ints in increasing order."
;;   {:added "1.0"
;;    :go "ints(a)"}
;;   [^ABEND881(unrecognized Expr type *ast.ArrayType at: &{12719046 <nil> int}) a])
;; 
JOKER FUNC sort.IntsAreSorted has: 
;; (defn ^ABEND042(cannot find typename sort.bool) IntsAreSorted
;;   "IntsAreSorted tests whether a slice of ints is sorted in increasing order."
;;   {:added "1.0"
;;    :go "intsAreSorted(a)"}
;;   [^ABEND881(unrecognized Expr type *ast.ArrayType at: &{12719459 <nil> int}) a])
;; 
JOKER FUNC sort.IsSorted has: 
;; (defn ^ABEND042(cannot find typename sort.bool) IsSorted
;;   "IsSorted reports whether data is sorted."
;;   {:added "1.0"
;;    :go "isSorted(data)"}
;;   [data])
;; 
JOKER FUNC sort.Reverse has: 
;; (defn ^ABEND881(unrecognized Expr type *ast.InterfaceType at: &{12711546 0xc005bcdad0 false}) Reverse
;;   "Reverse returns the reverse order for data."
;;   {:added "1.0"
;;    :go "reverse(data)"}
;;   [data])
;; 
JOKER FUNC sort.Search has: 
;; (defn ^Int Search
;;   "Search uses binary search to find and return the smallest index i
;; in [0, n) at which f(i) is true, assuming that on the range [0, n),
;; f(i) == true implies f(i+1) == true. That is, Search requires that
;; f is false for some (possibly empty) prefix of the input range [0, n)
;; and then true for the (possibly empty) remainder; Search returns
;; the first true index. If there is no such index, Search returns n.
;; (Note that the "not found" return value is not -1 as in, for instance,
;; strings.Index.)
;; Search calls f(i) only for i in the range [0, n).
;; 
;; A common use of Search is to find the index i for a value x in
;; a sorted, indexable data structure such as an array or slice.
;; In this case, the argument f, typically a closure, captures the value
;; to be searched for, and how the data structure is indexed and
;; ordered.
;; 
;; For instance, given a slice data sorted in ascending order,
;; the call Search(len(data), func(i int) bool { return data[i] >= 23 })
;; returns the smallest index i such that data[i] >= 23. If the caller
;; wants to find whether 23 is in the slice, it must test data[i] == 23
;; separately.
;; 
;; Searching data sorted in descending order would use the <=
;; operator instead of the >= operator.
;; 
;; To complete the example above, the following code tries to find the value
;; x in an integer slice data sorted in ascending order:
;; 
;; 	x := 23
;; 	i := sort.Search(len(data), func(i int) bool { return data[i] >= x })
;; 	if i < len(data) && data[i] == x {
;; 		// x is present at data[i]
;; 	} else {
;; 		// x is not present in data,
;; 		// but i is the index where it would be inserted.
;; 	}
;; 
;; As a more whimsical example, this program guesses your number:
;; 
;; 	func GuessingGame() {
;; 		var s string
;; 		fmt.Printf("Pick an integer from 0 to 100.\n")
;; 		answer := sort.Search(100, func(i int) bool {
;; 			fmt.Printf("Is your number <= %d? ", i)
;; 			fmt.Scanf("%s", &s)
;; 			return s != "" && s[0] == 'y'
;; 		})
;; 		fmt.Printf("Your number is %d.\n", answer)
;; 	}"
;;   {:added "1.0"
;;    :go "search(n, f)"}
;;   [^Int n, ^ABEND881(unrecognized Expr type *ast.FuncType at: &{12733642 0xc005c1c360 0xc005c1c390}) f])
;; 
JOKER FUNC sort.SearchFloat64s has: 
;; (defn ^Int SearchFloat64s
;;   "SearchFloat64s searches for x in a sorted slice of float64s and returns the index
;; as specified by Search. The return value is the index to insert x if x is not
;; present (it could be len(a)).
;; The slice must be sorted in ascending order."
;;   {:added "1.0"
;;    :go "searchFloat64s(a, x)"}
;;   [^ABEND881(unrecognized Expr type *ast.ArrayType at: &{12734714 <nil> float64}) a, x])
;; 
JOKER FUNC sort.SearchInts has: 
;; (defn ^Int SearchInts
;;   "SearchInts searches for x in a sorted slice of ints and returns the index
;; as specified by Search. The return value is the index to insert x if x is
;; not present (it could be len(a)).
;; The slice must be sorted in ascending order."
;;   {:added "1.0"
;;    :go "searchInts(a, x)"}
;;   [^ABEND881(unrecognized Expr type *ast.ArrayType at: &{12734357 <nil> int}) a, ^Int x])
;; 
JOKER FUNC sort.SearchStrings has: 
;; (defn ^Int SearchStrings
;;   "SearchStrings searches for x in a sorted slice of strings and returns the index
;; as specified by Search. The return value is the index to insert x if x is not
;; present (it could be len(a)).
;; The slice must be sorted in ascending order."
;;   {:added "1.0"
;;    :go "searchStrings(a, x)"}
;;   [^ABEND881(unrecognized Expr type *ast.ArrayType at: &{12735076 <nil> string}) a, ^String x])
;; 
JOKER FUNC sort.Slice has: 
;; (defn Slice
;;   "Slice sorts the provided slice given the provided less function.
;; 
;; The sort is not guaranteed to be stable. For a stable sort, use
;; SliceStable.
;; 
;; The function panics if the provided interface is not a slice."
;;   {:added "1.0"
;;    :go "slice(slice, less)"}
;;   [^ABEND881(unrecognized Expr type *ast.InterfaceType at: &{12740231 0xc005c30600 false}) slice, ^ABEND881(unrecognized Expr type *ast.FuncType at: &{12740249 0xc005c30660 0xc005c30690}) less])
;; 
JOKER FUNC sort.SliceIsSorted has: 
;; (defn ^ABEND042(cannot find typename sort.bool) SliceIsSorted
;;   "SliceIsSorted tests whether a slice is sorted.
;; 
;; The function panics if the provided interface is not a slice."
;;   {:added "1.0"
;;    :go "sliceIsSorted(slice, less)"}
;;   [^ABEND881(unrecognized Expr type *ast.InterfaceType at: &{12740937 0xc005c30960 false}) slice, ^ABEND881(unrecognized Expr type *ast.FuncType at: &{12740955 0xc005c309c0 0xc005c309f0}) less])
;; 
JOKER FUNC sort.SliceStable has: 
;; (defn SliceStable
;;   "SliceStable sorts the provided slice given the provided less
;; function while keeping the original order of equal elements.
;; 
;; The function panics if the provided interface is not a slice."
;;   {:added "1.0"
;;    :go "sliceStable(slice, less)"}
;;   [^ABEND881(unrecognized Expr type *ast.InterfaceType at: &{12740643 0xc005c307b0 false}) slice, ^ABEND881(unrecognized Expr type *ast.FuncType at: &{12740661 0xc005c30810 0xc005c30840}) less])
;; 
JOKER FUNC sort.Sort has: 
;; (defn Sort
;;   "Sort sorts data.
;; It makes one call to data.Len to determine n, and O(n*log(n)) calls to
;; data.Less and data.Swap. The sort is not guaranteed to be stable."
;;   {:added "1.0"
;;    :go "sort(data)"}
;;   [data])
;; 
JOKER FUNC sort.Stable has: 
;; (defn Stable
;;   "Stable sorts data while keeping the original order of equal elements.
;; 
;; It makes one call to data.Len to determine n, O(n*log(n)) calls to
;; data.Less and O(n*log(n)*log(n)) calls to data.Swap."
;;   {:added "1.0"
;;    :go "stable(data)"}
;;   [data])
;; 
JOKER FUNC sort.Strings has: 
;; (defn Strings
;;   "Strings sorts a slice of strings in increasing order."
;;   {:added "1.0"
;;    :go "strings(a)"}
;;   [^ABEND881(unrecognized Expr type *ast.ArrayType at: &{12719324 <nil> string}) a])
;; 
JOKER FUNC sort.StringsAreSorted has: 
;; (defn ^ABEND042(cannot find typename sort.bool) StringsAreSorted
;;   "StringsAreSorted tests whether a slice of strings is sorted in increasing order."
;;   {:added "1.0"
;;    :go "stringsAreSorted(a)"}
;;   [^ABEND881(unrecognized Expr type *ast.ArrayType at: &{12719841 <nil> string}) a])
;; 
JOKER FUNC sort_test.BenchmarkSearchWrappers has: 
;; (defn BenchmarkSearchWrappers
;;   {:added "1.0"
;;    :go "benchmarkSearchWrappers(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{12748160 0xc005c57f20}) b])
;; 
JOKER FUNC sort_test.BenchmarkSort1e2 has: 
;; (defn BenchmarkSort1e2
;;   {:added "1.0"
;;    :go "benchmarkSort1e2(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{12707702 0xc005bc98c0}) b])
;; 
JOKER FUNC sort_test.BenchmarkSort1e4 has: 
;; (defn BenchmarkSort1e4
;;   {:added "1.0"
;;    :go "benchmarkSort1e4(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{12707846 0xc005bc9c00}) b])
;; 
JOKER FUNC sort_test.BenchmarkSort1e6 has: 
;; (defn BenchmarkSort1e6
;;   {:added "1.0"
;;    :go "benchmarkSort1e6(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{12707990 0xc005bc9f40}) b])
;; 
JOKER FUNC sort_test.BenchmarkSortInt1K has: 
;; (defn BenchmarkSortInt1K
;;   {:added "1.0"
;;    :go "benchmarkSortInt1K(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{12697022 0xc005b969c0}) b])
;; 
JOKER FUNC sort_test.BenchmarkSortInt64K has: 
;; (defn BenchmarkSortInt64K
;;   {:added "1.0"
;;    :go "benchmarkSortInt64K(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{12697892 0xc005b97dc0}) b])
;; 
JOKER FUNC sort_test.BenchmarkSortInt64K_Slice has: 
;; (defn BenchmarkSortInt64K_Slice
;;   {:added "1.0"
;;    :go "benchmarkSortInt64K_Slice(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{12698126 0xc005b9c360}) b])
;; 
JOKER FUNC sort_test.BenchmarkSortString1K has: 
;; (defn BenchmarkSortString1K
;;   {:added "1.0"
;;    :go "benchmarkSortString1K(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{12696030 0xc005b933e0}) b])
;; 
JOKER FUNC sort_test.BenchmarkSortString1K_Slice has: 
;; (defn BenchmarkSortString1K_Slice
;;   {:added "1.0"
;;    :go "benchmarkSortString1K_Slice(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{12696345 0xc005b93aa0}) b])
;; 
JOKER FUNC sort_test.BenchmarkStable1e2 has: 
;; (defn BenchmarkStable1e2
;;   {:added "1.0"
;;    :go "benchmarkStable1e2(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{12707774 0xc005bc9a60}) b])
;; 
JOKER FUNC sort_test.BenchmarkStable1e4 has: 
;; (defn BenchmarkStable1e4
;;   {:added "1.0"
;;    :go "benchmarkStable1e4(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{12707918 0xc005bc9da0}) b])
;; 
JOKER FUNC sort_test.BenchmarkStable1e6 has: 
;; (defn BenchmarkStable1e6
;;   {:added "1.0"
;;    :go "benchmarkStable1e6(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{12708062 0xc005bd00e0}) b])
;; 
JOKER FUNC sort_test.BenchmarkStableInt1K has: 
;; (defn BenchmarkStableInt1K
;;   {:added "1.0"
;;    :go "benchmarkStableInt1K(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{12697250 0xc005b96f60}) b])
;; 
JOKER FUNC sort_test.BenchmarkStableInt1K_Slice has: 
;; (defn BenchmarkStableInt1K_Slice
;;   {:added "1.0"
;;    :go "benchmarkStableInt1K_Slice(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{12697552 0xc005b975e0}) b])
;; 
JOKER FUNC sort_test.BenchmarkStableInt64K has: 
;; (defn BenchmarkStableInt64K
;;   {:added "1.0"
;;    :go "benchmarkStableInt64K(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{12698407 0xc005b9ca80}) b])
;; 
JOKER FUNC sort_test.BenchmarkStableString1K has: 
;; (defn BenchmarkStableString1K
;;   {:added "1.0"
;;    :go "benchmarkStableString1K(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{12696704 0xc005b962e0}) b])
;; 
JOKER FUNC sort_test.Example has: 
;; (defn Example
;;   {:added "1.0"
;;    :go "example()"}
;;   [])
;; 
JOKER FUNC sort_test.ExampleFloat64s has: 
;; (defn ExampleFloat64s
;;   {:added "1.0"
;;    :go "exampleFloat64s()"}
;;   [])
;; 
JOKER FUNC sort_test.ExampleFloat64sAreSorted has: 
;; (defn ExampleFloat64sAreSorted
;;   {:added "1.0"
;;    :go "exampleFloat64sAreSorted()"}
;;   [])
;; 
JOKER FUNC sort_test.ExampleInts has: 
;; (defn ExampleInts
;;   {:added "1.0"
;;    :go "exampleInts()"}
;;   [])
;; 
JOKER FUNC sort_test.ExampleIntsAreSorted has: 
;; (defn ExampleIntsAreSorted
;;   {:added "1.0"
;;    :go "exampleIntsAreSorted()"}
;;   [])
;; 
JOKER FUNC sort_test.ExampleReverse has: 
;; (defn ExampleReverse
;;   {:added "1.0"
;;    :go "exampleReverse()"}
;;   [])
;; 
JOKER FUNC sort_test.ExampleSearch has: 
;; (defn ExampleSearch
;;   "This example demonstrates searching a list sorted in ascending order."
;;   {:added "1.0"
;;    :go "exampleSearch()"}
;;   [])
;; 
JOKER FUNC sort_test.ExampleSearch_descendingOrder has: 
;; (defn ExampleSearch_descendingOrder
;;   "This example demonstrates searching a list sorted in descending order.
;; The approach is the same as searching a list in ascending order,
;; but with the condition inverted."
;;   {:added "1.0"
;;    :go "exampleSearch_descendingOrder()"}
;;   [])
;; 
JOKER FUNC sort_test.ExampleSlice has: 
;; (defn ExampleSlice
;;   {:added "1.0"
;;    :go "exampleSlice()"}
;;   [])
;; 
JOKER FUNC sort_test.ExampleSliceStable has: 
;; (defn ExampleSliceStable
;;   {:added "1.0"
;;    :go "exampleSliceStable()"}
;;   [])
;; 
JOKER FUNC sort_test.ExampleStrings has: 
;; (defn ExampleStrings
;;   {:added "1.0"
;;    :go "exampleStrings()"}
;;   [])
;; 
JOKER FUNC sort_test.Example_sortKeys has: 
;; (defn Example_sortKeys
;;   "ExampleSortKeys demonstrates a technique for sorting a struct type using programmable sort criteria."
;;   {:added "1.0"
;;    :go "example_sortKeys()"}
;;   [])
;; 
JOKER FUNC sort_test.Example_sortMultiKeys has: 
;; (defn Example_sortMultiKeys
;;   "ExampleMultiKeys demonstrates a technique for sorting a struct type using different
;; sets of multiple fields in the comparison. We chain together "Less" functions, each of
;; which compares a single field."
;;   {:added "1.0"
;;    :go "example_sortMultiKeys()"}
;;   [])
;; 
JOKER FUNC sort_test.Example_sortWrapper has: 
;; (defn Example_sortWrapper
;;   {:added "1.0"
;;    :go "example_sortWrapper()"}
;;   [])
;; 
JOKER FUNC sort_test.OrderedBy has: 
;; (defn ^ABEND042(cannot find typename sort_test.multiSorter) OrderedBy
;;   "OrderedBy returns a Sorter that sorts using the less functions, in order.
;; Call its Sort method to sort the data."
;;   {:added "1.0"
;;    :go "orderedBy(less)"}
;;   [^ABEND881(unrecognized Expr type *ast.Ellipsis at: &{12736478 lessFunc}) less])
;; 
JOKER FUNC sort_test.TestAdversary has: 
;; (defn TestAdversary
;;   {:added "1.0"
;;    :go "testAdversary(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{12704055 0xc005bb9120}) t])
;; 
JOKER FUNC sort_test.TestCountSortOps has: 
;; (defn TestCountSortOps
;;   {:added "1.0"
;;    :go "testCountSortOps(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{12706906 0xc005bc8840}) t])
;; 
JOKER FUNC sort_test.TestCountStableOps has: 
;; (defn TestCountStableOps
;;   {:added "1.0"
;;    :go "testCountStableOps(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{12706836 0xc005bc86c0}) t])
;; 
JOKER FUNC sort_test.TestFloat64s has: 
;; (defn TestFloat64s
;;   {:added "1.0"
;;    :go "testFloat64s(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{12693921 0xc005b84c20}) t])
;; 
JOKER FUNC sort_test.TestHeapsortBM has: 
;; (defn TestHeapsortBM
;;   {:added "1.0"
;;    :go "testHeapsortBM(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{12702287 0xc005baef20}) t])
;; 
JOKER FUNC sort_test.TestInts has: 
;; (defn TestInts
;;   {:added "1.0"
;;    :go "testInts(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{12693760 0xc005b84860}) t])
;; 
JOKER FUNC sort_test.TestNonDeterministicComparison has: 
;; (defn TestNonDeterministicComparison
;;   {:added "1.0"
;;    :go "testNonDeterministicComparison(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{12695675 0xc005b92f00}) t])
;; 
JOKER FUNC sort_test.TestReverseSortIntSlice has: 
;; (defn TestReverseSortIntSlice
;;   {:added "1.0"
;;    :go "testReverseSortIntSlice(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{12694875 0xc005b92020}) t])
;; 
JOKER FUNC sort_test.TestSearch has: 
;; (defn TestSearch
;;   {:added "1.0"
;;    :go "testSearch(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{12745938 0xc005c4f6e0}) t])
;; 
JOKER FUNC sort_test.TestSearchEfficiency has: 
;; (defn TestSearchEfficiency
;;   {:added "1.0"
;;    :go "testSearchEfficiency(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{12746385 0xc005c4ff20}) t])
;; 
JOKER FUNC sort_test.TestSearchExhaustive has: 
;; (defn TestSearchExhaustive
;;   "Abstract exhaustive test: all sizes up to 100,
;; all possible return values. If there are any small
;; corner cases, this test exercises them."
;;   {:added "1.0"
;;    :go "testSearchExhaustive(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{12748405 0xc005c601c0}) t])
;; 
JOKER FUNC sort_test.TestSearchWrappers has: 
;; (defn TestSearchWrappers
;;   {:added "1.0"
;;    :go "testSearchWrappers(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{12747440 0xc005c57280}) t])
;; 
JOKER FUNC sort_test.TestSearchWrappersDontAlloc has: 
;; (defn TestSearchWrappersDontAlloc
;;   {:added "1.0"
;;    :go "testSearchWrappersDontAlloc(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{12747821 0xc005c57a40}) t])
;; 
JOKER FUNC sort_test.TestSlice has: 
;; (defn TestSlice
;;   {:added "1.0"
;;    :go "testSlice(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{12694267 0xc005b853a0}) t])
;; 
JOKER FUNC sort_test.TestSortBM has: 
;; (defn TestSortBM
;;   {:added "1.0"
;;    :go "testSortBM(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{12702171 0xc005baec80}) t])
;; 
JOKER FUNC sort_test.TestSortFloat64Slice has: 
;; (defn TestSortFloat64Slice
;;   {:added "1.0"
;;    :go "testSortFloat64Slice(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{12693402 0xc005b84060}) t])
;; 
JOKER FUNC sort_test.TestSortIntSlice has: 
;; (defn TestSortIntSlice
;;   {:added "1.0"
;;    :go "testSortIntSlice(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{12693227 0xc005b6fc40}) t])
;; 
JOKER FUNC sort_test.TestSortLarge_Random has: 
;; (defn TestSortLarge_Random
;;   {:added "1.0"
;;    :go "testSortLarge_Random(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{12694544 0xc005b85a20}) t])
;; 
JOKER FUNC sort_test.TestSortStringSlice has: 
;; (defn TestSortStringSlice
;;   {:added "1.0"
;;    :go "testSortStringSlice(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{12693588 0xc005b84460}) t])
;; 
JOKER FUNC sort_test.TestStability has: 
;; (defn TestStability
;;   {:added "1.0"
;;    :go "testStability(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{12705332 0xc005bc4940}) t])
;; 
JOKER FUNC sort_test.TestStableBM has: 
;; (defn TestStableBM
;;   {:added "1.0"
;;    :go "testStableBM(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{12702405 0xc005baf1c0}) t])
;; 
JOKER FUNC sort_test.TestStableInts has: 
;; (defn TestStableInts
;;   {:added "1.0"
;;    :go "testStableInts(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{12704515 0xc005bb9720}) t])
;; 
JOKER FUNC sort_test.TestStrings has: 
;; (defn TestStrings
;;   {:added "1.0"
;;    :go "testStrings(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{12694097 0xc005b84fe0}) t])
;; 
JOKER FUNC sql.BenchmarkConcurrentDBExec has: 
;; (defn BenchmarkConcurrentDBExec
;;   {:added "1.0"
;;    :go "benchmarkConcurrentDBExec(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{2570126 0xc000eeaec0}) b])
;; 
JOKER FUNC sql.BenchmarkConcurrentRandom has: 
;; (defn BenchmarkConcurrentRandom
;;   {:added "1.0"
;;    :go "benchmarkConcurrentRandom(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{2571262 0xc000ef0580}) b])
;; 
JOKER FUNC sql.BenchmarkConcurrentStmtExec has: 
;; (defn BenchmarkConcurrentStmtExec
;;   {:added "1.0"
;;    :go "benchmarkConcurrentStmtExec(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{2570450 0xc000eeb540}) b])
;; 
JOKER FUNC sql.BenchmarkConcurrentStmtQuery has: 
;; (defn BenchmarkConcurrentStmtQuery
;;   {:added "1.0"
;;    :go "benchmarkConcurrentStmtQuery(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{2570287 0xc000eeb200}) b])
;; 
JOKER FUNC sql.BenchmarkConcurrentTxExec has: 
;; (defn BenchmarkConcurrentTxExec
;;   {:added "1.0"
;;    :go "benchmarkConcurrentTxExec(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{2570770 0xc000eebbc0}) b])
;; 
JOKER FUNC sql.BenchmarkConcurrentTxQuery has: 
;; (defn BenchmarkConcurrentTxQuery
;;   {:added "1.0"
;;    :go "benchmarkConcurrentTxQuery(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{2570611 0xc000eeb880}) b])
;; 
JOKER FUNC sql.BenchmarkConcurrentTxStmtExec has: 
;; (defn BenchmarkConcurrentTxStmtExec
;;   {:added "1.0"
;;    :go "benchmarkConcurrentTxStmtExec(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{2571100 0xc000ef0240}) b])
;; 
JOKER FUNC sql.BenchmarkConcurrentTxStmtQuery has: 
;; (defn BenchmarkConcurrentTxStmtQuery
;;   {:added "1.0"
;;    :go "benchmarkConcurrentTxStmtQuery(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{2570933 0xc000eebf00}) b])
;; 
JOKER FUNC sql.BenchmarkManyConcurrentQueries has: 
;; (defn BenchmarkManyConcurrentQueries
;;   {:added "1.0"
;;    :go "benchmarkManyConcurrentQueries(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{2571425 0xc000ef08c0}) b])
;; 
JOKER FUNC sql.Drivers has: 
(defn ^[String] Drivers
  "Drivers returns a sorted list of the names of the registered drivers."
  {:added "1.0"
   :go "drivers()"}
  [])

JOKER FUNC sql.Named has: 
;; (defn ^{:_named_fields_required ^ABEND881(unrecognized Expr type *ast.StructType at: &{2383960 0xc000b205d0 false}) _Named_Fields_Required, :name ^String Name, :value ^ABEND881(unrecognized Expr type *ast.InterfaceType at: &{2384275 0xc000b20600 false}) Value} Named
;;   "Named provides a more concise way to create NamedArg values.
;; 
;; Example usage:
;; 
;;     db.ExecContext(ctx, `
;;         delete from Invoice
;;         where
;;             TimeCreated < @end
;;             and TimeCreated >= @start;`,
;;         sql.Named("start", startTime),
;;         sql.Named("end", endTime),
;;     )"
;;   {:added "1.0"
;;    :go "named(name, value)"}
;;   [^String name, ^ABEND881(unrecognized Expr type *ast.InterfaceType at: &{2384652 0xc000b206c0 false}) value])
;; 
JOKER FUNC sql.Open has: 
;; (defn ^[{:waitduration waitDuration, :connector ^ABEND881(unrecognized Expr type *ast.SelectorExpr at: &{driver Connector}) connector, :numclosed numClosed, :mu ^ABEND881(unrecognized Expr type *ast.SelectorExpr at: &{sync Mutex}) mu, :freeconn ^ABEND881(unrecognized Expr type *ast.ArrayType at: &{2391938 <nil> 0xc0010be940}) freeConn, :connrequests ^ABEND881(unrecognized Expr type *ast.MapType at: &{2391966 uint64 0xc000c23ec0}) connRequests, :nextrequest nextRequest, :numopen ^Int numOpen, :openerch ^ABEND881(unrecognized Expr type *ast.ChanType at: &{2392429 0 3 0xc0010bebc0}) openerCh, :resetterch ^ABEND881(unrecognized Expr type *ast.ChanType at: &{2392462 0 3 0xc0010bec20}) resetterCh, :closed closed, :dep ^ABEND881(unrecognized Expr type *ast.MapType at: &{2392522 finalCloser depSet}) dep, :lastput ^ABEND881(unrecognized Expr type *ast.MapType at: &{2392564 0xc0010bed20 string}) lastPut, :maxidle ^Int maxIdle, :maxopen ^Int maxOpen, :maxlifetime ^ABEND881(unrecognized Expr type *ast.SelectorExpr at: &{time Duration}) maxLifetime, :cleanerch ^ABEND881(unrecognized Expr type *ast.ChanType at: &{2392906 0 3 0xc0010bef80}) cleanerCh, :waitcount waitCount, :maxidleclosed maxIdleClosed, :maxlifetimeclosed maxLifetimeClosed, :stop ^ABEND881(unrecognized Expr type *ast.FuncType at: &{2393157 0xc000d743f0 <nil>}) stop} Error] Open
;;   "Open opens a database specified by its database driver name and a
;; driver-specific data source name, usually consisting of at least a
;; database name and connection information.
;; 
;; Most users will open a database via a driver-specific connection
;; helper function that returns a *DB. No database drivers are included
;; in the Go standard library. See https://golang.org/s/sqldrivers for
;; a list of third-party drivers.
;; 
;; Open may just validate its arguments without creating a connection
;; to the database. To verify that the data source name is valid, call
;; Ping.
;; 
;; The returned DB is safe for concurrent use by multiple goroutines
;; and maintains its own pool of idle connections. Thus, the Open
;; function should be called just once. It is rarely necessary to
;; close a DB."
;;   {:added "1.0"
;;    :go "open(driverName, dataSourceName)"}
;;   [^String driverName, ^String dataSourceName])
;; 
JOKER FUNC sql.OpenDB has: 
;; (defn ^{:waitduration waitDuration, :connector ^ABEND881(unrecognized Expr type *ast.SelectorExpr at: &{driver Connector}) connector, :numclosed numClosed, :mu ^ABEND881(unrecognized Expr type *ast.SelectorExpr at: &{sync Mutex}) mu, :freeconn ^ABEND881(unrecognized Expr type *ast.ArrayType at: &{2391938 <nil> 0xc0010be940}) freeConn, :connrequests ^ABEND881(unrecognized Expr type *ast.MapType at: &{2391966 uint64 0xc000c23ec0}) connRequests, :nextrequest nextRequest, :numopen ^Int numOpen, :openerch ^ABEND881(unrecognized Expr type *ast.ChanType at: &{2392429 0 3 0xc0010bebc0}) openerCh, :resetterch ^ABEND881(unrecognized Expr type *ast.ChanType at: &{2392462 0 3 0xc0010bec20}) resetterCh, :closed closed, :dep ^ABEND881(unrecognized Expr type *ast.MapType at: &{2392522 finalCloser depSet}) dep, :lastput ^ABEND881(unrecognized Expr type *ast.MapType at: &{2392564 0xc0010bed20 string}) lastPut, :maxidle ^Int maxIdle, :maxopen ^Int maxOpen, :maxlifetime ^ABEND881(unrecognized Expr type *ast.SelectorExpr at: &{time Duration}) maxLifetime, :cleanerch ^ABEND881(unrecognized Expr type *ast.ChanType at: &{2392906 0 3 0xc0010bef80}) cleanerCh, :waitcount waitCount, :maxidleclosed maxIdleClosed, :maxlifetimeclosed maxLifetimeClosed, :stop ^ABEND881(unrecognized Expr type *ast.FuncType at: &{2393157 0xc000d743f0 <nil>}) stop} OpenDB
;;   "OpenDB opens a database using a Connector, allowing drivers to
;; bypass a string based data source name.
;; 
;; Most users will open a database via a driver-specific connection
;; helper function that returns a *DB. No database drivers are included
;; in the Go standard library. See https://golang.org/s/sqldrivers for
;; a list of third-party drivers.
;; 
;; OpenDB may just validate its arguments without creating a connection
;; to the database. To verify that the data source name is valid, call
;; Ping.
;; 
;; The returned DB is safe for concurrent use by multiple goroutines
;; and maintains its own pool of idle connections. Thus, the OpenDB
;; function should be called just once. It is rarely necessary to
;; close a DB."
;;   {:added "1.0"
;;    :go "openDB(c)"}
;;   [^ABEND881(unrecognized Expr type *ast.SelectorExpr at: &{driver Connector}) c])
;; 
JOKER FUNC sql.Register has: 
;; (defn Register
;;   "Register makes a database driver available by the provided name.
;; If Register is called twice with the same name or if driver is nil,
;; it panics."
;;   {:added "1.0"
;;    :go "register(name, driver)"}
;;   [^String name, ^ABEND881(unrecognized Expr type *ast.SelectorExpr at: &{driver Driver}) driver])
;; 
JOKER FUNC sql.TestBadDriver has: 
;; (defn TestBadDriver
;;   "Issue 15901."
;;   {:added "1.0"
;;    :go "testBadDriver(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{2568622 0xc000ee7340}) t])
;; 
JOKER FUNC sql.TestBogusPreboundParameters has: 
;; (defn TestBogusPreboundParameters
;;   "just a test of fakedb itself"
;;   {:added "1.0"
;;    :go "testBogusPreboundParameters(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{2506068 0xc000f906a0}) t])
;; 
JOKER FUNC sql.TestCloseConnBeforeStmts has: 
;; (defn TestCloseConnBeforeStmts
;;   "golang.org/issue/5046"
;;   {:added "1.0"
;;    :go "testCloseConnBeforeStmts(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{2537818 0xc0010a6640}) t])
;; 
JOKER FUNC sql.TestCloseStmtBeforeRows has: 
;; (defn TestCloseStmtBeforeRows
;;   "From golang.org/issue/3865"
;;   {:added "1.0"
;;    :go "testCloseStmtBeforeRows(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{2518028 0xc000dd56e0}) t])
;; 
JOKER FUNC sql.TestConcurrency has: 
;; (defn TestConcurrency
;;   {:added "1.0"
;;    :go "testConcurrency(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{2559909 0xc000ec7b60}) t])
;; 
JOKER FUNC sql.TestConnMaxLifetime has: 
;; (defn TestConnMaxLifetime
;;   {:added "1.0"
;;    :go "testConnMaxLifetime(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{2533920 0xc000cd3be0}) t])
;; 
JOKER FUNC sql.TestConnQuery has: 
;; (defn TestConnQuery
;;   {:added "1.0"
;;    :go "testConnQuery(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{2514966 0xc000c40300}) t])
;; 
JOKER FUNC sql.TestConnTx has: 
;; (defn TestConnTx
;;   {:added "1.0"
;;    :go "testConnTx(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{2516850 0xc000dd4160}) t])
;; 
JOKER FUNC sql.TestConnectionLeak has: 
;; (defn TestConnectionLeak
;;   {:added "1.0"
;;    :go "testConnectionLeak(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{2560521 0xc000eca4c0}) t])
;; 
JOKER FUNC sql.TestConversions has: 
;; (defn TestConversions
;;   {:added "1.0"
;;    :go "testConversions(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{2579750 0xc0011f5ac0}) t])
;; 
JOKER FUNC sql.TestDriverArgs has: 
;; (defn TestDriverArgs
;;   {:added "1.0"
;;    :go "testDriverArgs(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{2585945 0xc00120cca0}) t])
;; 
JOKER FUNC sql.TestDriverPanic has: 
;; (defn TestDriverPanic
;;   {:added "1.0"
;;    :go "testDriverPanic(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{2485041 0xc000dba6c0}) t])
;; 
JOKER FUNC sql.TestDrivers has: 
;; (defn TestDrivers
;;   {:added "1.0"
;;    :go "testDrivers(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{2591704 0xc0012235e0}) t])
;; 
JOKER FUNC sql.TestErrBadConnReconnect has: 
;; (defn TestErrBadConnReconnect
;;   "golang.org/issue/5718"
;;   {:added "1.0"
;;    :go "testErrBadConnReconnect(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{2544389 0xc000d95d80}) t])
;; 
JOKER FUNC sql.TestExec has: 
;; (defn TestExec
;;   {:added "1.0"
;;    :go "testExec(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{2506444 0xc000f90c40}) t])
;; 
JOKER FUNC sql.TestInvalidNilValues has: 
;; (defn TestInvalidNilValues
;;   {:added "1.0"
;;    :go "testInvalidNilValues(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{2515543 0xc000c40e80}) t])
;; 
JOKER FUNC sql.TestIssue18429 has: 
;; (defn TestIssue18429
;;   "TestIssue18429 attempts to stress rolling back the transaction from a
;; context cancel while simultaneously calling Tx.Rollback. Rolling back from a
;; context happens concurrently so tx.rollback and tx.Commit must guard against
;; double entry.
;; 
;; In the test, a context is canceled while the query is in process so
;; the internal rollback will run concurrently with the explicitly called
;; Tx.Rollback.
;; 
;; The addition of calling rows.Next also tests
;; Issue 21117."
;;   {:added "1.0"
;;    :go "testIssue18429(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{2555988 0xc000ec00a0}) t])
;; 
JOKER FUNC sql.TestIssue18719 has: 
;; (defn TestIssue18719
;;   "TestIssue18719 closes the context right before use. The sql.driverConn
;; will nil out the ci on close in a lock, but if another process uses it right after
;; it will panic with on the nil ref.
;; 
;; See https://golang.org/cl/35550 ."
;;   {:added "1.0"
;;    :go "testIssue18719(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{2558305 0xc000ec61a0}) t])
;; 
JOKER FUNC sql.TestIssue20160 has: 
;; (defn TestIssue20160
;;   "TestIssue20160 attempts to test a short context life on a stmt Query."
;;   {:added "1.0"
;;    :go "testIssue20160(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{2557259 0xc000ec12e0}) t])
;; 
JOKER FUNC sql.TestIssue20575 has: 
;; (defn TestIssue20575
;;   "TestIssue20575 ensures the Rows from query does not block
;; closing a transaction. Ensure Rows is closed while closing a trasaction."
;;   {:added "1.0"
;;    :go "testIssue20575(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{2543113 0xc000d945e0}) t])
;; 
JOKER FUNC sql.TestIssue20622 has: 
;; (defn TestIssue20622
;;   "TestIssue20622 tests closing the transaction before rows is closed, requires
;; the race detector to fail."
;;   {:added "1.0"
;;    :go "testIssue20622(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{2543775 0xc000d950c0}) t])
;; 
JOKER FUNC sql.TestIssue20647 has: 
;; (defn TestIssue20647
;;   {:added "1.0"
;;    :go "testIssue20647(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{2559191 0xc000ec6cc0}) t])
;; 
JOKER FUNC sql.TestIssue2542Deadlock has: 
;; (defn TestIssue2542Deadlock
;;   "Tests fix for issue 2542, that we release a lock when querying on
;; a closed connection."
;;   {:added "1.0"
;;    :go "testIssue2542Deadlock(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{2517775 0xc000dd5200}) t])
;; 
JOKER FUNC sql.TestIssue4902 has: 
;; (defn TestIssue4902
;;   {:added "1.0"
;;    :go "testIssue4902(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{2525968 0xc000616980}) t])
;; 
JOKER FUNC sql.TestIssue6081 has: 
;; (defn TestIssue6081
;;   {:added "1.0"
;;    :go "testIssue6081(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{2554574 0xc000ebab80}) t])
;; 
JOKER FUNC sql.TestIssue6651 has: 
;; (defn TestIssue6651
;;   "Test issue 6651"
;;   {:added "1.0"
;;    :go "testIssue6651(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{2520731 0xc000dde820}) t])
;; 
JOKER FUNC sql.TestManyErrBadConn has: 
;; (defn TestManyErrBadConn
;;   "Test cases where there's more than maxBadConnRetries bad connections in the
;; pool (issue 8834)"
;;   {:added "1.0"
;;    :go "testManyErrBadConn(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{2540324 0xc000fc3120}) t])
;; 
JOKER FUNC sql.TestMaxIdleConns has: 
;; (defn TestMaxIdleConns
;;   {:added "1.0"
;;    :go "testMaxIdleConns(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{2526936 0xc000617da0}) t])
;; 
JOKER FUNC sql.TestMaxOpenConns has: 
;; (defn TestMaxOpenConns
;;   {:added "1.0"
;;    :go "testMaxOpenConns(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{2527470 0xc00061c8e0}) t])
;; 
JOKER FUNC sql.TestMaxOpenConnsOnBusy has: 
;; (defn TestMaxOpenConnsOnBusy
;;   "Issue 9453: tests that SetMaxOpenConns can be lowered at runtime
;; and affects the subsequent release of connections."
;;   {:added "1.0"
;;    :go "testMaxOpenConnsOnBusy(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{2530232 0xc000ccd9e0}) t])
;; 
JOKER FUNC sql.TestMultiResultSetQuery has: 
;; (defn TestMultiResultSetQuery
;;   {:added "1.0"
;;    :go "testMultiResultSetQuery(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{2495581 0xc000ff8d40}) t])
;; 
JOKER FUNC sql.TestNamedValueChecker has: 
;; (defn TestNamedValueChecker
;;   {:added "1.0"
;;    :go "testNamedValueChecker(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{2562941 0xc000ed0800}) t])
;; 
JOKER FUNC sql.TestNamedValueCheckerSkip has: 
;; (defn TestNamedValueCheckerSkip
;;   {:added "1.0"
;;    :go "testNamedValueCheckerSkip(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{2564169 0xc000ed6040}) t])
;; 
JOKER FUNC sql.TestNullBoolParam has: 
;; (defn TestNullBoolParam
;;   {:added "1.0"
;;    :go "testNullBoolParam(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{2522959 0xc000535340}) t])
;; 
JOKER FUNC sql.TestNullByteSlice has: 
;; (defn TestNullByteSlice
;;   "Tests fix for issue 2788, that we bind nil to a []byte if the
;; value in the column is sql null"
;;   {:added "1.0"
;;    :go "testNullByteSlice(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{2518437 0xc000dd5ea0}) t])
;; 
JOKER FUNC sql.TestNullFloat64Param has: 
;; (defn TestNullFloat64Param
;;   {:added "1.0"
;;    :go "testNullFloat64Param(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{2522521 0xc0005349c0}) t])
;; 
JOKER FUNC sql.TestNullInt64Param has: 
;; (defn TestNullInt64Param
;;   {:added "1.0"
;;    :go "testNullInt64Param(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{2522124 0xc000534060}) t])
;; 
JOKER FUNC sql.TestNullString has: 
;; (defn TestNullString
;;   {:added "1.0"
;;    :go "testNullString(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{2582373 0xc001200ee0}) t])
;; 
JOKER FUNC sql.TestNullStringParam has: 
;; (defn TestNullStringParam
;;   {:added "1.0"
;;    :go "testNullStringParam(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{2521653 0xc000ddf720}) t])
;; 
JOKER FUNC sql.TestOpenConnector has: 
;; (defn TestOpenConnector
;;   {:added "1.0"
;;    :go "testOpenConnector(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{2564806 0xc000ed6c60}) t])
;; 
JOKER FUNC sql.TestOpenDB has: 
;; (defn TestOpenDB
;;   {:added "1.0"
;;    :go "testOpenDB(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{2484844 0xc000dba3c0}) t])
;; 
JOKER FUNC sql.TestParentStmtOutlivesTxStmt has: 
;; (defn TestParentStmtOutlivesTxStmt
;;   {:added "1.0"
;;    :go "testParentStmtOutlivesTxStmt(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{2510816 0xc0010df9c0}) t])
;; 
JOKER FUNC sql.TestPendingConnsAfterErr has: 
;; (defn TestPendingConnsAfterErr
;;   "Issue 10886: tests that all connection attempts return when more than
;; DB.maxOpen connections are in flight and the first DB.maxOpen fail."
;;   {:added "1.0"
;;    :go "testPendingConnsAfterErr(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{2531451 0xc000cd1060}) t])
;; 
JOKER FUNC sql.TestPing has: 
;; (defn TestPing
;;   {:added "1.0"
;;    :go "testPing(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{2569381 0xc000eea100}) t])
;; 
JOKER FUNC sql.TestPointerParamsAndScans has: 
;; (defn TestPointerParamsAndScans
;;   {:added "1.0"
;;    :go "testPointerParamsAndScans(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{2519069 0xc000dda9a0}) t])
;; 
JOKER FUNC sql.TestPoolExhaustOnCancel has: 
;; (defn TestPoolExhaustOnCancel
;;   {:added "1.0"
;;    :go "testPoolExhaustOnCancel(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{2498289 0xc00105dcc0}) t])
;; 
JOKER FUNC sql.TestQuery has: 
;; (defn TestQuery
;;   {:added "1.0"
;;    :go "testQuery(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{2489367 0xc000f25320}) t])
;; 
JOKER FUNC sql.TestQueryContext has: 
;; (defn TestQueryContext
;;   "TestQueryContext tests canceling the context while scanning the rows."
;;   {:added "1.0"
;;    :go "testQueryContext(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{2490466 0xc000ff2620}) t])
;; 
JOKER FUNC sql.TestQueryContextWait has: 
;; (defn TestQueryContextWait
;;   "TestQueryContextWait ensures that rows and all internal statements are closed when
;; a query context is closed during execution."
;;   {:added "1.0"
;;    :go "testQueryContextWait(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{2492916 0xc000ff5020}) t])
;; 
JOKER FUNC sql.TestQueryExecContextOnly has: 
;; (defn TestQueryExecContextOnly
;;   "TestQueryExecContextOnly ensures drivers only need to implement QueryContext
;; and ExecContext methods."
;;   {:added "1.0"
;;    :go "testQueryExecContextOnly(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{2566465 0xc000edcc80}) t])
;; 
JOKER FUNC sql.TestQueryNamedArg has: 
;; (defn TestQueryNamedArg
;;   {:added "1.0"
;;    :go "testQueryNamedArg(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{2497156 0xc00105ca00}) t])
;; 
JOKER FUNC sql.TestQueryRow has: 
;; (defn TestQueryRow
;;   {:added "1.0"
;;    :go "testQueryRow(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{2501590 0xc000df1460}) t])
;; 
JOKER FUNC sql.TestQueryRowClosingStmt has: 
;; (defn TestQueryRowClosingStmt
;;   {:added "1.0"
;;    :go "testQueryRowClosingStmt(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{2519797 0xc000ddb700}) t])
;; 
JOKER FUNC sql.TestQueryRowNilScanDest has: 
;; (defn TestQueryRowNilScanDest
;;   "golang.org/issue/4859"
;;   {:added "1.0"
;;    :go "testQueryRowNilScanDest(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{2525609 0xc0006163a0}) t])
;; 
JOKER FUNC sql.TestRawBytesAllocs has: 
;; (defn TestRawBytesAllocs
;;   "Tests that assigning to RawBytes doesn't allocate (and also works)."
;;   {:added "1.0"
;;    :go "testRawBytesAllocs(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{2583637 0xc0012066a0}) t])
;; 
JOKER FUNC sql.TestRowsCloseOrder has: 
;; (defn TestRowsCloseOrder
;;   "golang.org/issue/5283: don't release the Rows' connection in Close
;; before calling Stmt.Close."
;;   {:added "1.0"
;;    :go "testRowsCloseOrder(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{2539058 0xc0010a7a80}) t])
;; 
JOKER FUNC sql.TestRowsColumnTypes has: 
;; (defn TestRowsColumnTypes
;;   {:added "1.0"
;;    :go "testRowsColumnTypes(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{2500514 0xc000debf40}) t])
;; 
JOKER FUNC sql.TestRowsColumns has: 
;; (defn TestRowsColumns
;;   {:added "1.0"
;;    :go "testRowsColumns(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{2500039 0xc000deb5a0}) t])
;; 
JOKER FUNC sql.TestRowsImplicitClose has: 
;; (defn TestRowsImplicitClose
;;   {:added "1.0"
;;    :go "testRowsImplicitClose(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{2539383 0xc000fc2080}) t])
;; 
JOKER FUNC sql.TestSimultaneousQueries has: 
;; (defn TestSimultaneousQueries
;;   "Issue 3857
;; This used to deadlock."
;;   {:added "1.0"
;;    :go "testSimultaneousQueries(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{2526567 0xc0006175a0}) t])
;; 
JOKER FUNC sql.TestSingleOpenConn has: 
;; (defn TestSingleOpenConn
;;   {:added "1.0"
;;    :go "testSingleOpenConn(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{2533107 0xc000cd2b40}) t])
;; 
JOKER FUNC sql.TestStatementClose has: 
;; (defn TestStatementClose
;;   "golang.org/issue/12798"
;;   {:added "1.0"
;;    :go "testStatementClose(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{2504967 0xc000f19240}) t])
;; 
JOKER FUNC sql.TestStatementErrorAfterClose has: 
;; (defn TestStatementErrorAfterClose
;;   {:added "1.0"
;;    :go "testStatementErrorAfterClose(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{2503632 0xc000f157e0}) t])
;; 
JOKER FUNC sql.TestStatementQueryRow has: 
;; (defn TestStatementQueryRow
;;   {:added "1.0"
;;    :go "testStatementQueryRow(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{2504045 0xc000f15f80}) t])
;; 
JOKER FUNC sql.TestStatementQueryRowConcurrent has: 
;; (defn TestStatementQueryRowConcurrent
;;   "golang.org/issue/3734"
;;   {:added "1.0"
;;    :go "testStatementQueryRowConcurrent(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{2505482 0xc000f19b40}) t])
;; 
JOKER FUNC sql.TestStats has: 
;; (defn TestStats
;;   {:added "1.0"
;;    :go "testStats(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{2533512 0xc000cd33e0}) t])
;; 
JOKER FUNC sql.TestStmtCloseDeps has: 
;; (defn TestStmtCloseDeps
;;   "golang.org/issue/5323"
;;   {:added "1.0"
;;    :go "testStmtCloseDeps(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{2535499 0xc000cd9c20}) t])
;; 
JOKER FUNC sql.TestStmtCloseOrder has: 
;; (defn TestStmtCloseOrder
;;   {:added "1.0"
;;    :go "testStmtCloseOrder(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{2539920 0xc000fc2c00}) t])
;; 
JOKER FUNC sql.TestTxContextWait has: 
;; (defn TestTxContextWait
;;   "TestTxContextWait tests the transaction behavior when the tx context is canceled
;; during execution of the query."
;;   {:added "1.0"
;;    :go "testTxContextWait(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{2494232 0xc000ff5c40}) t])
;; 
JOKER FUNC sql.TestTxEndBadConn has: 
;; (defn TestTxEndBadConn
;;   "golang.org/issue/11264"
;;   {:added "1.0"
;;    :go "testTxEndBadConn(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{2546937 0xc000d9c500}) t])
;; 
JOKER FUNC sql.TestTxErrBadConn has: 
;; (defn TestTxErrBadConn
;;   "Tests fix for issue 4433, that retries in Begin happen when
;; conn.Begin() returns ErrBadConn"
;;   {:added "1.0"
;;    :go "testTxErrBadConn(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{2514273 0xc000c3b440}) t])
;; 
JOKER FUNC sql.TestTxPrepare has: 
;; (defn TestTxPrepare
;;   {:added "1.0"
;;    :go "testTxPrepare(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{2507687 0xc000f91e40}) t])
;; 
JOKER FUNC sql.TestTxQuery has: 
;; (defn TestTxQuery
;;   "Issue: https://golang.org/issue/2784
;; This test didn't fail before because we got lucky with the fakedb driver.
;; It was failing, and now not, in github.com/bradfitz/go-sql-test"
;;   {:added "1.0"
;;    :go "testTxQuery(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{2513401 0xc000c3a2e0}) t])
;; 
JOKER FUNC sql.TestTxQueryInvalid has: 
;; (defn TestTxQueryInvalid
;;   {:added "1.0"
;;    :go "testTxQueryInvalid(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{2513921 0xc000c3ae40}) t])
;; 
JOKER FUNC sql.TestTxRollbackCommitErr has: 
;; (defn TestTxRollbackCommitErr
;;   {:added "1.0"
;;    :go "testTxRollbackCommitErr(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{2502994 0xc000f14c80}) t])
;; 
JOKER FUNC sql.TestTxStmt has: 
;; (defn TestTxStmt
;;   {:added "1.0"
;;    :go "testTxStmt(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{2508295 0xc000f94a00}) t])
;; 
JOKER FUNC sql.TestTxStmtClosedRePrepares has: 
;; (defn TestTxStmtClosedRePrepares
;;   {:added "1.0"
;;    :go "testTxStmtClosedRePrepares(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{2509821 0xc0010de800}) t])
;; 
JOKER FUNC sql.TestTxStmtFromTxStmtRePrepares has: 
;; (defn TestTxStmtFromTxStmtRePrepares
;;   "Test that tx.Stmt called with a statement already
;; associated with tx as argument re-prepares the same
;; statement again."
;;   {:added "1.0"
;;    :go "testTxStmtFromTxStmtRePrepares(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{2512085 0xc0010e0e80}) t])
;; 
JOKER FUNC sql.TestTxStmtPreparedOnce has: 
;; (defn TestTxStmtPreparedOnce
;;   {:added "1.0"
;;    :go "testTxStmtPreparedOnce(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{2508954 0xc000f956c0}) t])
;; 
JOKER FUNC sql.TestTypedString has: 
;; (defn TestTypedString
;;   "Issue 18101."
;;   {:added "1.0"
;;    :go "testTypedString(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{2569770 0xc000eea880}) t])
;; 
JOKER FUNC sql.TestUnsupportedOptions has: 
;; (defn TestUnsupportedOptions
;;   "TestUnsupportedOptions checks that the database fails when a driver that
;; doesn't implement ConnBeginTx is used with non-default options and an
;; un-cancellable context."
;;   {:added "1.0"
;;    :go "testUnsupportedOptions(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{2495285 0xc000ff8840}) t])
;; 
JOKER FUNC sql.TestUserDefinedBytes has: 
;; (defn TestUserDefinedBytes
;;   "https://golang.org/issues/13905"
;;   {:added "1.0"
;;    :go "testUserDefinedBytes(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{2585442 0xc00120c300}) t])
;; 
JOKER FUNC sql.TestValueConverters has: 
;; (defn TestValueConverters
;;   {:added "1.0"
;;    :go "testValueConverters(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{2583053 0xc001201ae0}) t])
;; 
JOKER FUNC sql_test.ExampleConn_BeginTx has: 
;; (defn ExampleConn_BeginTx
;;   {:added "1.0"
;;    :go "exampleConn_BeginTx()"}
;;   [])
;; 
JOKER FUNC sql_test.ExampleConn_ExecContext has: 
;; (defn ExampleConn_ExecContext
;;   {:added "1.0"
;;    :go "exampleConn_ExecContext()"}
;;   [])
;; 
JOKER FUNC sql_test.ExampleDB_ExecContext has: 
;; (defn ExampleDB_ExecContext
;;   {:added "1.0"
;;    :go "exampleDB_ExecContext()"}
;;   [])
;; 
JOKER FUNC sql_test.ExampleDB_PingContext has: 
;; (defn ExampleDB_PingContext
;;   {:added "1.0"
;;    :go "exampleDB_PingContext()"}
;;   [])
;; 
JOKER FUNC sql_test.ExampleDB_QueryContext has: 
;; (defn ExampleDB_QueryContext
;;   {:added "1.0"
;;    :go "exampleDB_QueryContext()"}
;;   [])
;; 
JOKER FUNC sql_test.ExampleDB_QueryRowContext has: 
;; (defn ExampleDB_QueryRowContext
;;   {:added "1.0"
;;    :go "exampleDB_QueryRowContext()"}
;;   [])
;; 
JOKER FUNC sql_test.ExampleDB_Query_multipleResultSets has: 
;; (defn ExampleDB_Query_multipleResultSets
;;   {:added "1.0"
;;    :go "exampleDB_Query_multipleResultSets()"}
;;   [])
;; 
JOKER FUNC sql_test.ExampleRows has: 
;; (defn ExampleRows
;;   {:added "1.0"
;;    :go "exampleRows()"}
;;   [])
;; 
JOKER FUNC sql_test.ExampleStmt has: 
;; (defn ExampleStmt
;;   {:added "1.0"
;;    :go "exampleStmt()"}
;;   [])
;; 
JOKER FUNC sql_test.ExampleStmt_QueryRowContext has: 
;; (defn ExampleStmt_QueryRowContext
;;   {:added "1.0"
;;    :go "exampleStmt_QueryRowContext()"}
;;   [])
;; 
JOKER FUNC sql_test.ExampleTx_ExecContext has: 
;; (defn ExampleTx_ExecContext
;;   {:added "1.0"
;;    :go "exampleTx_ExecContext()"}
;;   [])
;; 
JOKER FUNC sql_test.ExampleTx_Rollback has: 
;; (defn ExampleTx_Rollback
;;   {:added "1.0"
;;    :go "exampleTx_Rollback()"}
;;   [])
;; 
JOKER FUNC strconv.AppendBool has: 
;; (defn ^[ABEND042(cannot find typename strconv.byte)] AppendBool
;;   "AppendBool appends "true" or "false", according to the value of b,
;; to dst and returns the extended buffer."
;;   {:added "1.0"
;;    :go "appendBool(dst, b)"}
;;   [^ABEND881(unrecognized Expr type *ast.ArrayType at: &{12794602 <nil> byte}) dst, b])
;; 
JOKER FUNC strconv.AppendFloat has: 
;; (defn ^[ABEND042(cannot find typename strconv.byte)] AppendFloat
;;   "AppendFloat appends the string form of the floating-point number f,
;; as generated by FormatFloat, to dst and returns the extended buffer."
;;   {:added "1.0"
;;    :go "appendFloat(dst, f, fmt, prec, bitSize)"}
;;   [^ABEND881(unrecognized Expr type *ast.ArrayType at: &{12777405 <nil> byte}) dst, f, fmt, ^Int prec, ^Int bitSize])
;; 
JOKER FUNC strconv.AppendInt has: 
;; (defn ^[ABEND042(cannot find typename strconv.byte)] AppendInt
;;   "AppendInt appends the string form of the integer i,
;; as generated by FormatInt, to dst and returns the extended buffer."
;;   {:added "1.0"
;;    :go "appendInt(dst, i, base)"}
;;   [^ABEND881(unrecognized Expr type *ast.ArrayType at: &{12843870 <nil> byte}) dst, i, ^Int base])
;; 
JOKER FUNC strconv.AppendQuote has: 
;; (defn ^[ABEND042(cannot find typename strconv.byte)] AppendQuote
;;   "AppendQuote appends a double-quoted Go string literal representing s,
;; as generated by Quote, to dst and returns the extended buffer."
;;   {:added "1.0"
;;    :go "appendQuote(dst, s)"}
;;   [^ABEND881(unrecognized Expr type *ast.ArrayType at: &{12826787 <nil> byte}) dst, ^String s])
;; 
JOKER FUNC strconv.AppendQuoteRune has: 
;; (defn ^[ABEND042(cannot find typename strconv.byte)] AppendQuoteRune
;;   "AppendQuoteRune appends a single-quoted Go character literal representing the rune,
;; as generated by QuoteRune, to dst and returns the extended buffer."
;;   {:added "1.0"
;;    :go "appendQuoteRune(dst, r)"}
;;   [^ABEND881(unrecognized Expr type *ast.ArrayType at: &{12828505 <nil> byte}) dst, r])
;; 
JOKER FUNC strconv.AppendQuoteRuneToASCII has: 
;; (defn ^[ABEND042(cannot find typename strconv.byte)] AppendQuoteRuneToASCII
;;   "AppendQuoteRuneToASCII appends a single-quoted Go character literal representing the rune,
;; as generated by QuoteRuneToASCII, to dst and returns the extended buffer."
;;   {:added "1.0"
;;    :go "appendQuoteRuneToASCII(dst, r)"}
;;   [^ABEND881(unrecognized Expr type *ast.ArrayType at: &{12829121 <nil> byte}) dst, r])
;; 
JOKER FUNC strconv.AppendQuoteRuneToGraphic has: 
;; (defn ^[ABEND042(cannot find typename strconv.byte)] AppendQuoteRuneToGraphic
;;   "AppendQuoteRuneToGraphic appends a single-quoted Go character literal representing the rune,
;; as generated by QuoteRuneToGraphic, to dst and returns the extended buffer."
;;   {:added "1.0"
;;    :go "appendQuoteRuneToGraphic(dst, r)"}
;;   [^ABEND881(unrecognized Expr type *ast.ArrayType at: &{12829748 <nil> byte}) dst, r])
;; 
JOKER FUNC strconv.AppendQuoteToASCII has: 
;; (defn ^[ABEND042(cannot find typename strconv.byte)] AppendQuoteToASCII
;;   "AppendQuoteToASCII appends a double-quoted Go string literal representing s,
;; as generated by QuoteToASCII, to dst and returns the extended buffer."
;;   {:added "1.0"
;;    :go "appendQuoteToASCII(dst, s)"}
;;   [^ABEND881(unrecognized Expr type *ast.ArrayType at: &{12827354 <nil> byte}) dst, ^String s])
;; 
JOKER FUNC strconv.AppendQuoteToGraphic has: 
;; (defn ^[ABEND042(cannot find typename strconv.byte)] AppendQuoteToGraphic
;;   "AppendQuoteToGraphic appends a double-quoted Go string literal representing s,
;; as generated by QuoteToGraphic, to dst and returns the extended buffer."
;;   {:added "1.0"
;;    :go "appendQuoteToGraphic(dst, s)"}
;;   [^ABEND881(unrecognized Expr type *ast.ArrayType at: &{12827932 <nil> byte}) dst, ^String s])
;; 
JOKER FUNC strconv.AppendUint has: 
;; (defn ^[ABEND042(cannot find typename strconv.byte)] AppendUint
;;   "AppendUint appends the string form of the unsigned integer i,
;; as generated by FormatUint, to dst and returns the extended buffer."
;;   {:added "1.0"
;;    :go "appendUint(dst, i, base)"}
;;   [^ABEND881(unrecognized Expr type *ast.ArrayType at: &{12844231 <nil> byte}) dst, i, ^Int base])
;; 
JOKER FUNC strconv.Atoi has: 
(defn ^[Int Error] Atoi
  "Atoi returns the result of ParseInt(s, 10, 0) converted to type int."
  {:added "1.0"
   :go "atoi(s)"}
  [^String s])

JOKER FUNC strconv.CanBackquote has: 
;; (defn ^ABEND042(cannot find typename strconv.bool) CanBackquote
;;   "CanBackquote reports whether the string s can be represented
;; unchanged as a single-line backquoted string without control
;; characters other than tab."
;;   {:added "1.0"
;;    :go "canBackquote(s)"}
;;   [^String s])
;; 
JOKER FUNC strconv.FormatBool has: 
(defn ^String FormatBool
  "FormatBool returns "true" or "false" according to the value of b."
  {:added "1.0"
   :go "formatBool(b)"}
  [b])

JOKER FUNC strconv.FormatFloat has: 
(defn ^String FormatFloat
  "FormatFloat converts the floating-point number f to a string,
according to the format fmt and precision prec. It rounds the
result assuming that the original was obtained from a floating-point
value of bitSize bits (32 for float32, 64 for float64).

The format fmt is one of
'b' (-ddddp±ddd, a binary exponent),
'e' (-d.dddde±dd, a decimal exponent),
'E' (-d.ddddE±dd, a decimal exponent),
'f' (-ddd.dddd, no exponent),
'g' ('e' for large exponents, 'f' otherwise), or
'G' ('E' for large exponents, 'f' otherwise).

The precision prec controls the number of digits (excluding the exponent)
printed by the 'e', 'E', 'f', 'g', and 'G' formats.
For 'e', 'E', and 'f' it is the number of digits after the decimal point.
For 'g' and 'G' it is the maximum number of significant digits (trailing
zeros are removed).
The special precision -1 uses the smallest number of digits
necessary such that ParseFloat will return f exactly."
  {:added "1.0"
   :go "formatFloat(f, fmt, prec, bitSize)"}
  [f, fmt, ^Int prec, ^Int bitSize])

JOKER FUNC strconv.FormatInt has: 
(defn ^String FormatInt
  "FormatInt returns the string representation of i in the given base,
for 2 <= base <= 36. The result uses the lower-case letters 'a' to 'z'
for digit values >= 10."
  {:added "1.0"
   :go "formatInt(i, base)"}
  [i, ^Int base])

JOKER FUNC strconv.FormatUint has: 
(defn ^String FormatUint
  "FormatUint returns the string representation of i in the given base,
for 2 <= base <= 36. The result uses the lower-case letters 'a' to 'z'
for digit values >= 10."
  {:added "1.0"
   :go "formatUint(i, base)"}
  [i, ^Int base])

JOKER FUNC strconv.IsGraphic has: 
;; (defn ^ABEND042(cannot find typename strconv.bool) IsGraphic
;;   "IsGraphic reports whether the rune is defined as a Graphic by Unicode. Such
;; characters include letters, marks, numbers, punctuation, symbols, and
;; spaces, from categories L, M, N, P, S, and Zs."
;;   {:added "1.0"
;;    :go "isGraphic(r)"}
;;   [r])
;; 
JOKER FUNC strconv.IsPrint has: 
;; (defn ^ABEND042(cannot find typename strconv.bool) IsPrint
;;   "IsPrint reports whether the rune is defined as printable by Go, with
;; the same definition as unicode.IsPrint: letters, numbers, punctuation,
;; symbols and ASCII space."
;;   {:added "1.0"
;;    :go "isPrint(r)"}
;;   [r])
;; 
JOKER FUNC strconv.Itoa has: 
(defn ^String Itoa
  "Itoa is shorthand for FormatInt(int64(i), 10)."
  {:added "1.0"
   :go "itoa(i)"}
  [^Int i])

JOKER FUNC strconv.NewDecimal has: 
;; (defn ^ABEND042(cannot find typename strconv.decimal) NewDecimal
;;   {:added "1.0"
;;    :go "newDecimal(i)"}
;;   [i])
;; 
JOKER FUNC strconv.ParseBool has: 
;; (defn ^[ABEND042(cannot find typename strconv.bool) Error] ParseBool
;;   "ParseBool returns the boolean value represented by the string.
;; It accepts 1, t, T, TRUE, true, True, 0, f, F, FALSE, false, False.
;; Any other value returns an error."
;;   {:added "1.0"
;;    :go "parseBool(str)"}
;;   [^String str])
;; 
JOKER FUNC strconv.ParseFloat has: 
;; (defn ^[ABEND042(cannot find typename strconv.float64) Error] ParseFloat
;;   "ParseFloat converts the string s to a floating-point number
;; with the precision specified by bitSize: 32 for float32, or 64 for float64.
;; When bitSize=32, the result still has type float64, but it will be
;; convertible to float32 without changing its value.
;; 
;; If s is well-formed and near a valid floating point number,
;; ParseFloat returns the nearest floating point number rounded
;; using IEEE754 unbiased rounding.
;; 
;; The errors that ParseFloat returns have concrete type *NumError
;; and include err.Num = s.
;; 
;; If s is not syntactically well-formed, ParseFloat returns err.Err = ErrSyntax.
;; 
;; If s is syntactically well-formed but is more than 1/2 ULP
;; away from the largest floating point number of the given size,
;; ParseFloat returns f = ±Inf, err.Err = ErrRange."
;;   {:added "1.0"
;;    :go "parseFloat(s, bitSize)"}
;;   [^String s, ^Int bitSize])
;; 
JOKER FUNC strconv.ParseInt has: 
(defn ^[i err] ParseInt
  "ParseInt interprets a string s in the given base (0, 2 to 36) and
bit size (0 to 64) and returns the corresponding value i.

If base == 0, the base is implied by the string's prefix:
base 16 for "0x", base 8 for "0", and base 10 otherwise.
For bases 1, below 0 or above 36 an error is returned.

The bitSize argument specifies the integer type
that the result must fit into. Bit sizes 0, 8, 16, 32, and 64
correspond to int, int8, int16, int32, and int64.
For a bitSize below 0 or above 64 an error is returned.

The errors that ParseInt returns have concrete type *NumError
and include err.Num = s. If s is empty or contains invalid
digits, err.Err = ErrSyntax and the returned value is 0;
if the value corresponding to s cannot be represented by a
signed integer of the given size, err.Err = ErrRange and the
returned value is the maximum magnitude integer of the
appropriate bitSize and sign."
  {:added "1.0"
   :go "parseInt(s, base, bitSize)"}
  [^String s, ^Int base, ^Int bitSize])

JOKER FUNC strconv.ParseUint has: 
;; (defn ^[ABEND042(cannot find typename strconv.uint64) Error] ParseUint
;;   "ParseUint is like ParseInt but for unsigned numbers."
;;   {:added "1.0"
;;    :go "parseUint(s, base, bitSize)"}
;;   [^String s, ^Int base, ^Int bitSize])
;; 
JOKER FUNC strconv.Quote has: 
(defn ^String Quote
  "Quote returns a double-quoted Go string literal representing s. The
returned string uses Go escape sequences (\t, \n, \xFF, \u0100) for
control characters and non-printable characters as defined by
IsPrint."
  {:added "1.0"
   :go "quote(s)"}
  [^String s])

JOKER FUNC strconv.QuoteRune has: 
(defn ^String QuoteRune
  "QuoteRune returns a single-quoted Go character literal representing the
rune. The returned string uses Go escape sequences (\t, \n, \xFF, \u0100)
for control characters and non-printable characters as defined by IsPrint."
  {:added "1.0"
   :go "quoteRune(r)"}
  [r])

JOKER FUNC strconv.QuoteRuneToASCII has: 
(defn ^String QuoteRuneToASCII
  "QuoteRuneToASCII returns a single-quoted Go character literal representing
the rune. The returned string uses Go escape sequences (\t, \n, \xFF,
\u0100) for non-ASCII characters and non-printable characters as defined
by IsPrint."
  {:added "1.0"
   :go "quoteRuneToASCII(r)"}
  [r])

JOKER FUNC strconv.QuoteRuneToGraphic has: 
(defn ^String QuoteRuneToGraphic
  "QuoteRuneToGraphic returns a single-quoted Go character literal representing
the rune. The returned string uses Go escape sequences (\t, \n, \xFF,
\u0100) for non-ASCII characters and non-printable characters as defined
by IsGraphic."
  {:added "1.0"
   :go "quoteRuneToGraphic(r)"}
  [r])

JOKER FUNC strconv.QuoteToASCII has: 
(defn ^String QuoteToASCII
  "QuoteToASCII returns a double-quoted Go string literal representing s.
The returned string uses Go escape sequences (\t, \n, \xFF, \u0100) for
non-ASCII characters and non-printable characters as defined by IsPrint."
  {:added "1.0"
   :go "quoteToASCII(s)"}
  [^String s])

JOKER FUNC strconv.QuoteToGraphic has: 
(defn ^String QuoteToGraphic
  "QuoteToGraphic returns a double-quoted Go string literal representing s.
The returned string uses Go escape sequences (\t, \n, \xFF, \u0100) for
non-ASCII characters and non-printable characters as defined by IsGraphic."
  {:added "1.0"
   :go "quoteToGraphic(s)"}
  [^String s])

JOKER FUNC strconv.SetOptimize has: 
;; (defn ^ABEND042(cannot find typename strconv.bool) SetOptimize
;;   {:added "1.0"
;;    :go "setOptimize(b)"}
;;   [b])
;; 
JOKER FUNC strconv.Unquote has: 
(defn ^[String Error] Unquote
  "Unquote interprets s as a single-quoted, double-quoted,
or backquoted Go string literal, returning the string value
that s quotes.  (If s is single-quoted, it would be a Go
character literal; Unquote returns the corresponding
one-character string.)"
  {:added "1.0"
   :go "unquote(s)"}
  [^String s])

JOKER FUNC strconv.UnquoteChar has: 
(defn ^[value multibyte tail err] UnquoteChar
  "UnquoteChar decodes the first character or byte in the escaped string
or character literal represented by the string s.
It returns four values:

	1) value, the decoded Unicode code point or byte value;
	2) multibyte, a boolean indicating whether the decoded character requires a multibyte UTF-8 representation;
	3) tail, the remainder of the string after the character; and
	4) an error that will be nil if the character is syntactically valid.

The second argument, quote, specifies the type of literal being parsed
and therefore which escaped quote character is permitted.
If set to a single quote, it permits the sequence \' and disallows unescaped '.
If set to a double quote, it permits \" and disallows unescaped ".
If set to zero, it does not permit either escape and allows both quote characters to appear unescaped."
  {:added "1.0"
   :go "unquoteChar(s, quote)"}
  [^String s, quote])

JOKER FUNC strconv_test.BenchmarkAppendFloat has: 
;; (defn BenchmarkAppendFloat
;;   {:added "1.0"
;;    :go "benchmarkAppendFloat(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{12874118 0xc005e3f120}) b])
;; 
JOKER FUNC strconv_test.BenchmarkAppendInt has: 
;; (defn BenchmarkAppendInt
;;   {:added "1.0"
;;    :go "benchmarkAppendInt(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{12808330 0xc005d47540}) b])
;; 
JOKER FUNC strconv_test.BenchmarkAppendIntSmall has: 
;; (defn BenchmarkAppendIntSmall
;;   {:added "1.0"
;;    :go "benchmarkAppendIntSmall(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{12809214 0xc005d529e0}) b])
;; 
JOKER FUNC strconv_test.BenchmarkAppendQuote has: 
;; (defn BenchmarkAppendQuote
;;   {:added "1.0"
;;    :go "benchmarkAppendQuote(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{12797550 0xc005d20ec0}) b])
;; 
JOKER FUNC strconv_test.BenchmarkAppendQuoteRune has: 
;; (defn BenchmarkAppendQuoteRune
;;   {:added "1.0"
;;    :go "benchmarkAppendQuoteRune(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{12797755 0xc005d211a0}) b])
;; 
JOKER FUNC strconv_test.BenchmarkAppendUint has: 
;; (defn BenchmarkAppendUint
;;   {:added "1.0"
;;    :go "benchmarkAppendUint(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{12808726 0xc005d47ea0}) b])
;; 
JOKER FUNC strconv_test.BenchmarkAppendUintVarlen has: 
;; (defn BenchmarkAppendUintVarlen
;;   {:added "1.0"
;;    :go "benchmarkAppendUintVarlen(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{12809409 0xc005d52e40}) b])
;; 
JOKER FUNC strconv_test.BenchmarkAtof32Decimal has: 
;; (defn BenchmarkAtof32Decimal
;;   {:added "1.0"
;;    :go "benchmarkAtof32Decimal(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{12908653 0xc005eb2420}) b])
;; 
JOKER FUNC strconv_test.BenchmarkAtof32Float has: 
;; (defn BenchmarkAtof32Float
;;   {:added "1.0"
;;    :go "benchmarkAtof32Float(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{12908755 0xc005eb2680}) b])
;; 
JOKER FUNC strconv_test.BenchmarkAtof32FloatExp has: 
;; (defn BenchmarkAtof32FloatExp
;;   {:added "1.0"
;;    :go "benchmarkAtof32FloatExp(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{12908862 0xc005eb28e0}) b])
;; 
JOKER FUNC strconv_test.BenchmarkAtof32Random has: 
;; (defn BenchmarkAtof32Random
;;   {:added "1.0"
;;    :go "benchmarkAtof32Random(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{12909003 0xc005eb2ba0}) b])
;; 
JOKER FUNC strconv_test.BenchmarkAtof64Big has: 
;; (defn BenchmarkAtof64Big
;;   {:added "1.0"
;;    :go "benchmarkAtof64Big(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{12908267 0xc005eadc80}) b])
;; 
JOKER FUNC strconv_test.BenchmarkAtof64Decimal has: 
;; (defn BenchmarkAtof64Decimal
;;   {:added "1.0"
;;    :go "benchmarkAtof64Decimal(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{12907954 0xc005ead560}) b])
;; 
JOKER FUNC strconv_test.BenchmarkAtof64Float has: 
;; (defn BenchmarkAtof64Float
;;   {:added "1.0"
;;    :go "benchmarkAtof64Float(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{12908056 0xc005ead7c0}) b])
;; 
JOKER FUNC strconv_test.BenchmarkAtof64FloatExp has: 
;; (defn BenchmarkAtof64FloatExp
;;   {:added "1.0"
;;    :go "benchmarkAtof64FloatExp(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{12908164 0xc005eada20}) b])
;; 
JOKER FUNC strconv_test.BenchmarkAtof64RandomBits has: 
;; (defn BenchmarkAtof64RandomBits
;;   {:added "1.0"
;;    :go "benchmarkAtof64RandomBits(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{12908396 0xc005eadee0}) b])
;; 
JOKER FUNC strconv_test.BenchmarkAtof64RandomFloats has: 
;; (defn BenchmarkAtof64RandomFloats
;;   {:added "1.0"
;;    :go "benchmarkAtof64RandomFloats(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{12908526 0xc005eb2180}) b])
;; 
JOKER FUNC strconv_test.BenchmarkAtoi has: 
;; (defn BenchmarkAtoi
;;   {:added "1.0"
;;    :go "benchmarkAtoi(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{12822996 0xc005d8d9e0}) b])
;; 
JOKER FUNC strconv_test.BenchmarkFormatFloat has: 
;; (defn BenchmarkFormatFloat
;;   {:added "1.0"
;;    :go "benchmarkFormatFloat(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{12873909 0xc005e3eb40}) b])
;; 
JOKER FUNC strconv_test.BenchmarkFormatInt has: 
;; (defn BenchmarkFormatInt
;;   {:added "1.0"
;;    :go "benchmarkFormatInt(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{12808154 0xc005d47120}) b])
;; 
JOKER FUNC strconv_test.BenchmarkFormatIntSmall has: 
;; (defn BenchmarkFormatIntSmall
;;   {:added "1.0"
;;    :go "benchmarkFormatIntSmall(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{12808949 0xc005d523e0}) b])
;; 
JOKER FUNC strconv_test.BenchmarkFormatUint has: 
;; (defn BenchmarkFormatUint
;;   {:added "1.0"
;;    :go "benchmarkFormatUint(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{12808547 0xc005d47a80}) b])
;; 
JOKER FUNC strconv_test.BenchmarkParseInt has: 
;; (defn BenchmarkParseInt
;;   {:added "1.0"
;;    :go "benchmarkParseInt(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{12822366 0xc005d8c940}) b])
;; 
JOKER FUNC strconv_test.BenchmarkQuote has: 
;; (defn BenchmarkQuote
;;   {:added "1.0"
;;    :go "benchmarkQuote(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{12797302 0xc005d20a40}) b])
;; 
JOKER FUNC strconv_test.BenchmarkQuoteRune has: 
;; (defn BenchmarkQuoteRune
;;   {:added "1.0"
;;    :go "benchmarkQuoteRune(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{12797430 0xc005d20c60}) b])
;; 
JOKER FUNC strconv_test.BenchmarkUnquoteEasy has: 
;; (defn BenchmarkUnquoteEasy
;;   {:added "1.0"
;;    :go "benchmarkUnquoteEasy(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{12803621 0xc005d37ae0}) b])
;; 
JOKER FUNC strconv_test.BenchmarkUnquoteHard has: 
;; (defn BenchmarkUnquoteHard
;;   {:added "1.0"
;;    :go "benchmarkUnquoteHard(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{12803774 0xc005d37d00}) b])
;; 
JOKER FUNC strconv_test.ExampleAppendBool has: 
;; (defn ExampleAppendBool
;;   {:added "1.0"
;;    :go "exampleAppendBool()"}
;;   [])
;; 
JOKER FUNC strconv_test.ExampleAppendFloat has: 
;; (defn ExampleAppendFloat
;;   {:added "1.0"
;;    :go "exampleAppendFloat()"}
;;   [])
;; 
JOKER FUNC strconv_test.ExampleAppendInt has: 
;; (defn ExampleAppendInt
;;   {:added "1.0"
;;    :go "exampleAppendInt()"}
;;   [])
;; 
JOKER FUNC strconv_test.ExampleAppendQuote has: 
;; (defn ExampleAppendQuote
;;   {:added "1.0"
;;    :go "exampleAppendQuote()"}
;;   [])
;; 
JOKER FUNC strconv_test.ExampleAppendQuoteRune has: 
;; (defn ExampleAppendQuoteRune
;;   {:added "1.0"
;;    :go "exampleAppendQuoteRune()"}
;;   [])
;; 
JOKER FUNC strconv_test.ExampleAppendQuoteRuneToASCII has: 
;; (defn ExampleAppendQuoteRuneToASCII
;;   {:added "1.0"
;;    :go "exampleAppendQuoteRuneToASCII()"}
;;   [])
;; 
JOKER FUNC strconv_test.ExampleAppendQuoteToASCII has: 
;; (defn ExampleAppendQuoteToASCII
;;   {:added "1.0"
;;    :go "exampleAppendQuoteToASCII()"}
;;   [])
;; 
JOKER FUNC strconv_test.ExampleAppendUint has: 
;; (defn ExampleAppendUint
;;   {:added "1.0"
;;    :go "exampleAppendUint()"}
;;   [])
;; 
JOKER FUNC strconv_test.ExampleAtoi has: 
;; (defn ExampleAtoi
;;   {:added "1.0"
;;    :go "exampleAtoi()"}
;;   [])
;; 
JOKER FUNC strconv_test.ExampleCanBackquote has: 
;; (defn ExampleCanBackquote
;;   {:added "1.0"
;;    :go "exampleCanBackquote()"}
;;   [])
;; 
JOKER FUNC strconv_test.ExampleFormatBool has: 
;; (defn ExampleFormatBool
;;   {:added "1.0"
;;    :go "exampleFormatBool()"}
;;   [])
;; 
JOKER FUNC strconv_test.ExampleFormatFloat has: 
;; (defn ExampleFormatFloat
;;   {:added "1.0"
;;    :go "exampleFormatFloat()"}
;;   [])
;; 
JOKER FUNC strconv_test.ExampleFormatInt has: 
;; (defn ExampleFormatInt
;;   {:added "1.0"
;;    :go "exampleFormatInt()"}
;;   [])
;; 
JOKER FUNC strconv_test.ExampleFormatUint has: 
;; (defn ExampleFormatUint
;;   {:added "1.0"
;;    :go "exampleFormatUint()"}
;;   [])
;; 
JOKER FUNC strconv_test.ExampleIsPrint has: 
;; (defn ExampleIsPrint
;;   {:added "1.0"
;;    :go "exampleIsPrint()"}
;;   [])
;; 
JOKER FUNC strconv_test.ExampleItoa has: 
;; (defn ExampleItoa
;;   {:added "1.0"
;;    :go "exampleItoa()"}
;;   [])
;; 
JOKER FUNC strconv_test.ExampleNumError has: 
;; (defn ExampleNumError
;;   {:added "1.0"
;;    :go "exampleNumError()"}
;;   [])
;; 
JOKER FUNC strconv_test.ExampleParseBool has: 
;; (defn ExampleParseBool
;;   {:added "1.0"
;;    :go "exampleParseBool()"}
;;   [])
;; 
JOKER FUNC strconv_test.ExampleParseFloat has: 
;; (defn ExampleParseFloat
;;   {:added "1.0"
;;    :go "exampleParseFloat()"}
;;   [])
;; 
JOKER FUNC strconv_test.ExampleParseInt has: 
;; (defn ExampleParseInt
;;   {:added "1.0"
;;    :go "exampleParseInt()"}
;;   [])
;; 
JOKER FUNC strconv_test.ExampleParseUint has: 
;; (defn ExampleParseUint
;;   {:added "1.0"
;;    :go "exampleParseUint()"}
;;   [])
;; 
JOKER FUNC strconv_test.ExampleQuote has: 
;; (defn ExampleQuote
;;   {:added "1.0"
;;    :go "exampleQuote()"}
;;   [])
;; 
JOKER FUNC strconv_test.ExampleQuoteRune has: 
;; (defn ExampleQuoteRune
;;   {:added "1.0"
;;    :go "exampleQuoteRune()"}
;;   [])
;; 
JOKER FUNC strconv_test.ExampleQuoteRuneToASCII has: 
;; (defn ExampleQuoteRuneToASCII
;;   {:added "1.0"
;;    :go "exampleQuoteRuneToASCII()"}
;;   [])
;; 
JOKER FUNC strconv_test.ExampleQuoteToASCII has: 
;; (defn ExampleQuoteToASCII
;;   {:added "1.0"
;;    :go "exampleQuoteToASCII()"}
;;   [])
;; 
JOKER FUNC strconv_test.ExampleUnquote has: 
;; (defn ExampleUnquote
;;   {:added "1.0"
;;    :go "exampleUnquote()"}
;;   [])
;; 
JOKER FUNC strconv_test.ExampleUnquoteChar has: 
;; (defn ExampleUnquoteChar
;;   {:added "1.0"
;;    :go "exampleUnquoteChar()"}
;;   [])
;; 
JOKER FUNC strconv_test.TestAppendBool has: 
;; (defn TestAppendBool
;;   {:added "1.0"
;;    :go "testAppendBool(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{12839926 0xc005dce3e0}) t])
;; 
JOKER FUNC strconv_test.TestAtof has: 
;; (defn TestAtof
;;   {:added "1.0"
;;    :go "testAtof(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{12905577 0xc005ea8c00}) t])
;; 
JOKER FUNC strconv_test.TestAtofRandom has: 
;; (defn TestAtofRandom
;;   {:added "1.0"
;;    :go "testAtofRandom(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{12905690 0xc005ea8ec0}) t])
;; 
JOKER FUNC strconv_test.TestAtofSlow has: 
;; (defn TestAtofSlow
;;   {:added "1.0"
;;    :go "testAtofSlow(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{12905632 0xc005ea8d60}) t])
;; 
JOKER FUNC strconv_test.TestAtoi has: 
;; (defn TestAtoi
;;   {:added "1.0"
;;    :go "testAtoi(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{12819281 0xc005d7ee60}) t])
;; 
JOKER FUNC strconv_test.TestCanBackquote has: 
;; (defn TestCanBackquote
;;   {:added "1.0"
;;    :go "testCanBackquote(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{12800912 0xc005d30ac0}) t])
;; 
JOKER FUNC strconv_test.TestCountMallocs has: 
;; (defn TestCountMallocs
;;   {:added "1.0"
;;    :go "testCountMallocs(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{12841562 0xc005dcf940}) t])
;; 
JOKER FUNC strconv_test.TestDecimalRound has: 
;; (defn TestDecimalRound
;;   {:added "1.0"
;;    :go "testDecimalRound(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{12911165 0xc005ec0ea0}) t])
;; 
JOKER FUNC strconv_test.TestDecimalRoundedInteger has: 
;; (defn TestDecimalRoundedInteger
;;   {:added "1.0"
;;    :go "testDecimalRoundedInteger(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{12912074 0xc005eca560}) t])
;; 
JOKER FUNC strconv_test.TestDecimalShift has: 
;; (defn TestDecimalShift
;;   {:added "1.0"
;;    :go "testDecimalShift(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{12909949 0xc005eb3a40}) t])
;; 
JOKER FUNC strconv_test.TestErrorPrefixes has: 
;; (defn TestErrorPrefixes
;;   {:added "1.0"
;;    :go "testErrorPrefixes(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{12841940 0xc005dd8040}) t])
;; 
JOKER FUNC strconv_test.TestFormatBool has: 
;; (defn TestFormatBool
;;   {:added "1.0"
;;    :go "testFormatBool(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{12839550 0xc005dcbdc0}) t])
;; 
JOKER FUNC strconv_test.TestFormatUintVarlen has: 
;; (defn TestFormatUintVarlen
;;   {:added "1.0"
;;    :go "testFormatUintVarlen(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{12807947 0xc005d46ca0}) t])
;; 
JOKER FUNC strconv_test.TestFp has: 
;; (defn TestFp
;;   {:added "1.0"
;;    :go "testFp(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{12893265 0xc005e80c80}) t])
;; 
JOKER FUNC strconv_test.TestFtoa has: 
;; (defn TestFtoa
;;   {:added "1.0"
;;    :go "testFtoa(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{12871430 0xc005e35520}) t])
;; 
JOKER FUNC strconv_test.TestFtoaRandom has: 
;; (defn TestFtoaRandom
;;   {:added "1.0"
;;    :go "testFtoaRandom(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{12872362 0xc005e3ada0}) t])
;; 
JOKER FUNC strconv_test.TestIsGraphic has: 
;; (defn TestIsGraphic
;;   "Verify that our IsGraphic agrees with unicode.IsGraphic."
;;   {:added "1.0"
;;    :go "testIsGraphic(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{12795302 0xc005d167c0}) t])
;; 
JOKER FUNC strconv_test.TestIsPrint has: 
;; (defn TestIsPrint
;;   "Verify that our IsPrint agrees with unicode.IsPrint."
;;   {:added "1.0"
;;    :go "testIsPrint(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{12795009 0xc005d16220}) t])
;; 
JOKER FUNC strconv_test.TestItoa has: 
;; (defn TestItoa
;;   {:added "1.0"
;;    :go "testItoa(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{12805515 0xc005d3ff00}) t])
;; 
JOKER FUNC strconv_test.TestNumError has: 
;; (defn TestNumError
;;   {:added "1.0"
;;    :go "testNumError(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{12822035 0xc005d8c340}) t])
;; 
JOKER FUNC strconv_test.TestParseBool has: 
;; (defn TestParseBool
;;   {:added "1.0"
;;    :go "testParseBool(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{12838861 0xc005dcb160}) t])
;; 
JOKER FUNC strconv_test.TestParseInt has: 
;; (defn TestParseInt
;;   {:added "1.0"
;;    :go "testParseInt(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{12818646 0xc005d7e120}) t])
;; 
JOKER FUNC strconv_test.TestParseInt32 has: 
;; (defn TestParseInt32
;;   {:added "1.0"
;;    :go "testParseInt32(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{12817032 0xc005d77ee0}) t])
;; 
JOKER FUNC strconv_test.TestParseInt64 has: 
;; (defn TestParseInt64
;;   {:added "1.0"
;;    :go "testParseInt64(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{12817349 0xc005d7a5c0}) t])
;; 
JOKER FUNC strconv_test.TestParseInt64Base has: 
;; (defn TestParseInt64Base
;;   {:added "1.0"
;;    :go "testParseInt64Base(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{12817663 0xc005d7ac80}) t])
;; 
JOKER FUNC strconv_test.TestParseIntBase has: 
;; (defn TestParseIntBase
;;   {:added "1.0"
;;    :go "testParseIntBase(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{12821391 0xc005d87680}) t])
;; 
JOKER FUNC strconv_test.TestParseIntBitSize has: 
;; (defn TestParseIntBitSize
;;   {:added "1.0"
;;    :go "testParseIntBitSize(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{12820728 0xc005d869c0}) t])
;; 
JOKER FUNC strconv_test.TestParseUint has: 
;; (defn TestParseUint
;;   {:added "1.0"
;;    :go "testParseUint(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{12817998 0xc005d7b3e0}) t])
;; 
JOKER FUNC strconv_test.TestParseUint32 has: 
;; (defn TestParseUint32
;;   {:added "1.0"
;;    :go "testParseUint32(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{12816050 0xc005d769e0}) t])
;; 
JOKER FUNC strconv_test.TestParseUint64 has: 
;; (defn TestParseUint64
;;   {:added "1.0"
;;    :go "testParseUint64(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{12816373 0xc005d770c0}) t])
;; 
JOKER FUNC strconv_test.TestParseUint64Base has: 
;; (defn TestParseUint64Base
;;   {:added "1.0"
;;    :go "testParseUint64Base(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{12816692 0xc005d77780}) t])
;; 
JOKER FUNC strconv_test.TestParseUintBase has: 
;; (defn TestParseUintBase
;;   {:added "1.0"
;;    :go "testParseUintBase(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{12821714 0xc005d87ce0}) t])
;; 
JOKER FUNC strconv_test.TestParseUintBitSize has: 
;; (defn TestParseUintBitSize
;;   {:added "1.0"
;;    :go "testParseUintBitSize(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{12821060 0xc005d87020}) t])
;; 
JOKER FUNC strconv_test.TestQuote has: 
;; (defn TestQuote
;;   {:added "1.0"
;;    :go "testQuote(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{12796179 0xc005d17300}) t])
;; 
JOKER FUNC strconv_test.TestQuoteRune has: 
;; (defn TestQuoteRune
;;   {:added "1.0"
;;    :go "testQuoteRune(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{12798628 0xc005d21de0}) t])
;; 
JOKER FUNC strconv_test.TestQuoteRuneToASCII has: 
;; (defn TestQuoteRuneToASCII
;;   {:added "1.0"
;;    :go "testQuoteRuneToASCII(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{12798997 0xc005d285a0}) t])
;; 
JOKER FUNC strconv_test.TestQuoteRuneToGraphic has: 
;; (defn TestQuoteRuneToGraphic
;;   {:added "1.0"
;;    :go "testQuoteRuneToGraphic(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{12799404 0xc005d28d60}) t])
;; 
JOKER FUNC strconv_test.TestQuoteToASCII has: 
;; (defn TestQuoteToASCII
;;   {:added "1.0"
;;    :go "testQuoteToASCII(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{12796524 0xc005d17ac0}) t])
;; 
JOKER FUNC strconv_test.TestQuoteToGraphic has: 
;; (defn TestQuoteToGraphic
;;   {:added "1.0"
;;    :go "testQuoteToGraphic(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{12796907 0xc005d20280}) t])
;; 
JOKER FUNC strconv_test.TestRoundTrip has: 
;; (defn TestRoundTrip
;;   {:added "1.0"
;;    :go "testRoundTrip(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{12906485 0xc005ea98e0}) t])
;; 
JOKER FUNC strconv_test.TestRoundTrip32 has: 
;; (defn TestRoundTrip32
;;   "TestRoundTrip32 tries a fraction of all finite positive float32 values."
;;   {:added "1.0"
;;    :go "testRoundTrip32(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{12907245 0xc005eac920}) t])
;; 
JOKER FUNC strconv_test.TestUitoa has: 
;; (defn TestUitoa
;;   {:added "1.0"
;;    :go "testUitoa(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{12806868 0xc005d45b00}) t])
;; 
JOKER FUNC strconv_test.TestUnquote has: 
;; (defn TestUnquote
;;   {:added "1.0"
;;    :go "testUnquote(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{12802204 0xc005d360a0}) t])
;; 
JOKER FUNC strconv_test.TestUnquoteInvalidUTF8 has: 
;; (defn TestUnquoteInvalidUTF8
;;   "Issue 23685: invalid UTF-8 should not go through the fast path."
;;   {:added "1.0"
;;    :go "testUnquoteInvalidUTF8(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{12802876 0xc005d36ca0}) t])
;; 
JOKER FUNC strings.Compare has: 
(defn ^Int Compare
  "Compare returns an integer comparing two strings lexicographically.
The result will be 0 if a==b, -1 if a < b, and +1 if a > b.

Compare is included only for symmetry with package bytes.
It is usually clearer and always faster to use the built-in
string comparison operators ==, <, >, and so on."
  {:added "1.0"
   :go "compare(a, b)"}
  [^String a, ^String b])

JOKER FUNC strings.Contains has: 
;; (defn ^ABEND042(cannot find typename strings.bool) Contains
;;   "Contains reports whether substr is within s."
;;   {:added "1.0"
;;    :go "contains(s, substr)"}
;;   [^String s, ^String substr])
;; 
JOKER FUNC strings.ContainsAny has: 
;; (defn ^ABEND042(cannot find typename strings.bool) ContainsAny
;;   "ContainsAny reports whether any Unicode code points in chars are within s."
;;   {:added "1.0"
;;    :go "containsAny(s, chars)"}
;;   [^String s, ^String chars])
;; 
JOKER FUNC strings.ContainsRune has: 
;; (defn ^ABEND042(cannot find typename strings.bool) ContainsRune
;;   "ContainsRune reports whether the Unicode code point r is within s."
;;   {:added "1.0"
;;    :go "containsRune(s, r)"}
;;   [^String s, r])
;; 
JOKER FUNC strings.Count has: 
(defn ^Int Count
  "Count counts the number of non-overlapping instances of substr in s.
If substr is an empty string, Count returns 1 + the number of Unicode code points in s."
  {:added "1.0"
   :go "count(s, substr)"}
  [^String s, ^String substr])

JOKER FUNC strings.DumpTables has: 
(defn ^[[Int] [Int]] DumpTables
  {:added "1.0"
   :go "dumpTables(pattern)"}
  [^String pattern])

JOKER FUNC strings.EqualFold has: 
;; (defn ^ABEND042(cannot find typename strings.bool) EqualFold
;;   "EqualFold reports whether s and t, interpreted as UTF-8 strings,
;; are equal under Unicode case-folding."
;;   {:added "1.0"
;;    :go "equalFold(s, t)"}
;;   [^String s, ^String t])
;; 
JOKER FUNC strings.Fields has: 
(defn ^[String] Fields
  "Fields splits the string s around each instance of one or more consecutive white space
characters, as defined by unicode.IsSpace, returning a slice of substrings of s or an
empty slice if s contains only white space."
  {:added "1.0"
   :go "fields(s)"}
  [^String s])

JOKER FUNC strings.FieldsFunc has: 
;; (defn ^[String] FieldsFunc
;;   "FieldsFunc splits the string s at each run of Unicode code points c satisfying f(c)
;; and returns an array of slices of s. If all code points in s satisfy f(c) or the
;; string is empty, an empty slice is returned.
;; FieldsFunc makes no guarantees about the order in which it calls f(c).
;; If f does not return consistent results for a given c, FieldsFunc may crash."
;;   {:added "1.0"
;;    :go "fieldsFunc(s, f)"}
;;   [^String s, ^ABEND881(unrecognized Expr type *ast.FuncType at: &{13027591 0xc0060aa9c0 0xc0060aa9f0}) f])
;; 
JOKER FUNC strings.HasPrefix has: 
;; (defn ^ABEND042(cannot find typename strings.bool) HasPrefix
;;   "HasPrefix tests whether the string s begins with prefix."
;;   {:added "1.0"
;;    :go "hasPrefix(s, prefix)"}
;;   [^String s, ^String prefix])
;; 
JOKER FUNC strings.HasSuffix has: 
;; (defn ^ABEND042(cannot find typename strings.bool) HasSuffix
;;   "HasSuffix tests whether the string s ends with suffix."
;;   {:added "1.0"
;;    :go "hasSuffix(s, suffix)"}
;;   [^String s, ^String suffix])
;; 
JOKER FUNC strings.Index has: 
(defn ^Int Index
  "Index returns the index of the first instance of substr in s, or -1 if substr is not present in s."
  {:added "1.0"
   :go "index(s, substr)"}
  [^String s, ^String substr])

JOKER FUNC strings.IndexAny has: 
(defn ^Int IndexAny
  "IndexAny returns the index of the first instance of any Unicode code point
from chars in s, or -1 if no Unicode code point from chars is present in s."
  {:added "1.0"
   :go "indexAny(s, chars)"}
  [^String s, ^String chars])

JOKER FUNC strings.IndexByte has: 
(defn ^Int IndexByte
  "IndexByte returns the index of the first instance of c in s, or -1 if c is not present in s."
  {:added "1.0"
   :go "indexByte(s, c)"}
  [^String s, c])

JOKER FUNC strings.IndexFunc has: 
;; (defn ^Int IndexFunc
;;   "IndexFunc returns the index into s of the first Unicode
;; code point satisfying f(c), or -1 if none do."
;;   {:added "1.0"
;;    :go "indexFunc(s, f)"}
;;   [^String s, ^ABEND881(unrecognized Expr type *ast.FuncType at: &{13036102 0xc0060c3200 0xc0060c3230}) f])
;; 
JOKER FUNC strings.IndexRune has: 
(defn ^Int IndexRune
  "IndexRune returns the index of the first instance of the Unicode code point
r, or -1 if rune is not present in s.
If r is utf8.RuneError, it returns the first instance of any
invalid UTF-8 byte sequence."
  {:added "1.0"
   :go "indexRune(s, r)"}
  [^String s, r])

JOKER FUNC strings.Join has: 
;; (defn ^String Join
;;   "Join concatenates the elements of a to create a single string. The separator string
;; sep is placed between elements in the resulting string."
;;   {:added "1.0"
;;    :go "join(a, sep)"}
;;   [^ABEND881(unrecognized Expr type *ast.ArrayType at: &{13028548 <nil> string}) a, ^String sep])
;; 
JOKER FUNC strings.LastIndex has: 
(defn ^Int LastIndex
  "LastIndex returns the index of the last instance of substr in s, or -1 if substr is not present in s."
  {:added "1.0"
   :go "lastIndex(s, substr)"}
  [^String s, ^String substr])

JOKER FUNC strings.LastIndexAny has: 
(defn ^Int LastIndexAny
  "LastIndexAny returns the index of the last instance of any Unicode code
point from chars in s, or -1 if no Unicode code point from chars is
present in s."
  {:added "1.0"
   :go "lastIndexAny(s, chars)"}
  [^String s, ^String chars])

JOKER FUNC strings.LastIndexByte has: 
(defn ^Int LastIndexByte
  "LastIndexByte returns the index of the last instance of c in s, or -1 if c is not present in s."
  {:added "1.0"
   :go "lastIndexByte(s, c)"}
  [^String s, c])

JOKER FUNC strings.LastIndexFunc has: 
;; (defn ^Int LastIndexFunc
;;   "LastIndexFunc returns the index into s of the last
;; Unicode code point satisfying f(c), or -1 if none do."
;;   {:added "1.0"
;;    :go "lastIndexFunc(s, f)"}
;;   [^String s, ^ABEND881(unrecognized Expr type *ast.FuncType at: &{13036300 0xc0060c33b0 0xc0060c33e0}) f])
;; 
JOKER FUNC strings.Map has: 
;; (defn ^String Map
;;   "Map returns a copy of the string s with all its characters modified
;; according to the mapping function. If mapping returns a negative value, the character is
;; dropped from the string with no replacement."
;;   {:added "1.0"
;;    :go "map(mapping, s)"}
;;   [^ABEND881(unrecognized Expr type *ast.FuncType at: &{13029690 0xc0060abb60 0xc0060abb90}) mapping, ^String s])
;; 
JOKER FUNC strings.NewReader has: 
(defn ^{:s ^String s, :i i, :prevrune ^Int prevRune} NewReader
  "NewReader returns a new Reader reading from s.
It is similar to bytes.NewBufferString but more efficient and read-only."
  {:added "1.0"
   :go "newReader(s)"}
  [^String s])

JOKER FUNC strings.NewReplacer has: 
;; (defn ^{:r r} NewReplacer
;;   "NewReplacer returns a new Replacer from a list of old, new string
;; pairs. Replacements are performed in the order they appear in the
;; target string, without overlapping matches."
;;   {:added "1.0"
;;    :go "newReplacer(oldnew)"}
;;   [^ABEND881(unrecognized Expr type *ast.Ellipsis at: &{12933356 string}) oldnew])
;; 
JOKER FUNC strings.Repeat has: 
(defn ^String Repeat
  "Repeat returns a new string consisting of count copies of the string s.

It panics if count is negative or if
the result of (len(s) * count) overflows."
  {:added "1.0"
   :go "repeat(s, count)"}
  [^String s, ^Int count])

JOKER FUNC strings.Replace has: 
(defn ^String Replace
  "Replace returns a copy of the string s with the first n
non-overlapping instances of old replaced by new.
If old is empty, it matches at the beginning of the string
and after each UTF-8 sequence, yielding up to k+1 replacements
for a k-rune string.
If n < 0, there is no limit on the number of replacements."
  {:added "1.0"
   :go "replace(s, old, new, n)"}
  [^String s, ^String old, ^String new, ^Int n])

JOKER FUNC strings.Split has: 
(defn ^[String] Split
  "Split slices s into all substrings separated by sep and returns a slice of
the substrings between those separators.

If s does not contain sep and sep is not empty, Split returns a
slice of length 1 whose only element is s.

If sep is empty, Split splits after each UTF-8 sequence. If both s
and sep are empty, Split returns an empty slice.

It is equivalent to SplitN with a count of -1."
  {:added "1.0"
   :go "split(s, sep)"}
  [^String s, ^String sep])

JOKER FUNC strings.SplitAfter has: 
(defn ^[String] SplitAfter
  "SplitAfter slices s into all substrings after each instance of sep and
returns a slice of those substrings.

If s does not contain sep and sep is not empty, SplitAfter returns
a slice of length 1 whose only element is s.

If sep is empty, SplitAfter splits after each UTF-8 sequence. If
both s and sep are empty, SplitAfter returns an empty slice.

It is equivalent to SplitAfterN with a count of -1."
  {:added "1.0"
   :go "splitAfter(s, sep)"}
  [^String s, ^String sep])

JOKER FUNC strings.SplitAfterN has: 
(defn ^[String] SplitAfterN
  "SplitAfterN slices s into substrings after each instance of sep and
returns a slice of those substrings.

The count determines the number of substrings to return:
  n > 0: at most n substrings; the last substring will be the unsplit remainder.
  n == 0: the result is nil (zero substrings)
  n < 0: all substrings

Edge cases for s and sep (for example, empty strings) are handled
as described in the documentation for SplitAfter."
  {:added "1.0"
   :go "splitAfterN(s, sep, n)"}
  [^String s, ^String sep, ^Int n])

JOKER FUNC strings.SplitN has: 
(defn ^[String] SplitN
  "SplitN slices s into substrings separated by sep and returns a slice of
the substrings between those separators.

The count determines the number of substrings to return:
  n > 0: at most n substrings; the last substring will be the unsplit remainder.
  n == 0: the result is nil (zero substrings)
  n < 0: all substrings

Edge cases for s and sep (for example, empty strings) are handled
as described in the documentation for Split."
  {:added "1.0"
   :go "splitN(s, sep, n)"}
  [^String s, ^String sep, ^Int n])

JOKER FUNC strings.StringFind has: 
(defn ^Int StringFind
  {:added "1.0"
   :go "stringFind(pattern, text)"}
  [^String pattern, ^String text])

JOKER FUNC strings.Title has: 
(defn ^String Title
  "Title returns a copy of the string s with all Unicode letters that begin words
mapped to their title case.

BUG(rsc): The rule Title uses for word boundaries does not handle Unicode punctuation properly."
  {:added "1.0"
   :go "title(s)"}
  [^String s])

JOKER FUNC strings.ToLower has: 
(defn ^String ToLower
  "ToLower returns a copy of the string s with all Unicode letters mapped to their lower case."
  {:added "1.0"
   :go "toLower(s)"}
  [^String s])

JOKER FUNC strings.ToLowerSpecial has: 
;; (defn ^String ToLowerSpecial
;;   "ToLowerSpecial returns a copy of the string s with all Unicode letters mapped to their
;; lower case, giving priority to the special casing rules."
;;   {:added "1.0"
;;    :go "toLowerSpecial(c, s)"}
;;   [^ABEND881(unrecognized Expr type *ast.SelectorExpr at: &{unicode SpecialCase}) c, ^String s])
;; 
JOKER FUNC strings.ToTitle has: 
(defn ^String ToTitle
  "ToTitle returns a copy of the string s with all Unicode letters mapped to their title case."
  {:added "1.0"
   :go "toTitle(s)"}
  [^String s])

JOKER FUNC strings.ToTitleSpecial has: 
;; (defn ^String ToTitleSpecial
;;   "ToTitleSpecial returns a copy of the string s with all Unicode letters mapped to their
;; title case, giving priority to the special casing rules."
;;   {:added "1.0"
;;    :go "toTitleSpecial(c, s)"}
;;   [^ABEND881(unrecognized Expr type *ast.SelectorExpr at: &{unicode SpecialCase}) c, ^String s])
;; 
JOKER FUNC strings.ToUpper has: 
(defn ^String ToUpper
  "ToUpper returns a copy of the string s with all Unicode letters mapped to their upper case."
  {:added "1.0"
   :go "toUpper(s)"}
  [^String s])

JOKER FUNC strings.ToUpperSpecial has: 
;; (defn ^String ToUpperSpecial
;;   "ToUpperSpecial returns a copy of the string s with all Unicode letters mapped to their
;; upper case, giving priority to the special casing rules."
;;   {:added "1.0"
;;    :go "toUpperSpecial(c, s)"}
;;   [^ABEND881(unrecognized Expr type *ast.SelectorExpr at: &{unicode SpecialCase}) c, ^String s])
;; 
JOKER FUNC strings.Trim has: 
(defn ^String Trim
  "Trim returns a slice of the string s with all leading and
trailing Unicode code points contained in cutset removed."
  {:added "1.0"
   :go "trim(s, cutset)"}
  [^String s, ^String cutset])

JOKER FUNC strings.TrimFunc has: 
;; (defn ^String TrimFunc
;;   "TrimFunc returns a slice of the string s with all leading
;; and trailing Unicode code points c satisfying f(c) removed."
;;   {:added "1.0"
;;    :go "trimFunc(s, f)"}
;;   [^String s, ^ABEND881(unrecognized Expr type *ast.FuncType at: &{13035893 0xc0060c3050 0xc0060c3080}) f])
;; 
JOKER FUNC strings.TrimLeft has: 
(defn ^String TrimLeft
  "TrimLeft returns a slice of the string s with all leading
Unicode code points contained in cutset removed.

To remove a prefix, use TrimPrefix instead."
  {:added "1.0"
   :go "trimLeft(s, cutset)"}
  [^String s, ^String cutset])

JOKER FUNC strings.TrimLeftFunc has: 
;; (defn ^String TrimLeftFunc
;;   "TrimLeftFunc returns a slice of the string s with all leading
;; Unicode code points c satisfying f(c) removed."
;;   {:added "1.0"
;;    :go "trimLeftFunc(s, f)"}
;;   [^String s, ^ABEND881(unrecognized Expr type *ast.FuncType at: &{13035306 0xc0060c2a80 0xc0060c2ab0}) f])
;; 
JOKER FUNC strings.TrimPrefix has: 
(defn ^String TrimPrefix
  "TrimPrefix returns s without the provided leading prefix string.
If s doesn't start with prefix, s is returned unchanged."
  {:added "1.0"
   :go "trimPrefix(s, prefix)"}
  [^String s, ^String prefix])

JOKER FUNC strings.TrimRight has: 
(defn ^String TrimRight
  "TrimRight returns a slice of the string s, with all trailing
Unicode code points contained in cutset removed.

To remove a suffix, use TrimSuffix instead."
  {:added "1.0"
   :go "trimRight(s, cutset)"}
  [^String s, ^String cutset])

JOKER FUNC strings.TrimRightFunc has: 
;; (defn ^String TrimRightFunc
;;   "TrimRightFunc returns a slice of the string s with all trailing
;; Unicode code points c satisfying f(c) removed."
;;   {:added "1.0"
;;    :go "trimRightFunc(s, f)"}
;;   [^String s, ^ABEND881(unrecognized Expr type *ast.FuncType at: &{13035555 0xc0060c2cf0 0xc0060c2d20}) f])
;; 
JOKER FUNC strings.TrimSpace has: 
(defn ^String TrimSpace
  "TrimSpace returns a slice of the string s, with all leading
and trailing white space removed, as defined by Unicode."
  {:added "1.0"
   :go "trimSpace(s)"}
  [^String s])

JOKER FUNC strings.TrimSuffix has: 
(defn ^String TrimSuffix
  "TrimSuffix returns s without the provided trailing suffix string.
If s doesn't end with suffix, s is returned unchanged."
  {:added "1.0"
   :go "trimSuffix(s, suffix)"}
  [^String s, ^String suffix])

JOKER FUNC strings_test.BenchmarkBuildString_Builder has: 
;; (defn BenchmarkBuildString_Builder
;;   {:added "1.0"
;;    :go "benchmarkBuildString_Builder(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{13017305 0xc006085140}) b])
;; 
JOKER FUNC strings_test.BenchmarkBuildString_ByteBuffer has: 
;; (defn BenchmarkBuildString_ByteBuffer
;;   {:added "1.0"
;;    :go "benchmarkBuildString_ByteBuffer(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{13017631 0xc0060857e0}) b])
;; 
JOKER FUNC strings_test.BenchmarkByteByteMap has: 
;; (defn BenchmarkByteByteMap
;;   "BenchmarkByteByteMap compares byteByteImpl against Map."
;;   {:added "1.0"
;;    :go "benchmarkByteByteMap(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{13009312 0xc00605da00}) b])
;; 
JOKER FUNC strings_test.BenchmarkByteByteMatch has: 
;; (defn BenchmarkByteByteMatch
;;   {:added "1.0"
;;    :go "benchmarkByteByteMatch(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{13007939 0xc006053f00}) b])
;; 
JOKER FUNC strings_test.BenchmarkByteByteNoMatch has: 
;; (defn BenchmarkByteByteNoMatch
;;   {:added "1.0"
;;    :go "benchmarkByteByteNoMatch(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{13007787 0xc006053b60}) b])
;; 
JOKER FUNC strings_test.BenchmarkByteByteReplaces has: 
;; (defn BenchmarkByteByteReplaces
;;   "BenchmarkByteByteReplaces compares byteByteImpl against multiple Replaces."
;;   {:added "1.0"
;;    :go "benchmarkByteByteReplaces(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{13009081 0xc00605d500}) b])
;; 
JOKER FUNC strings_test.BenchmarkByteReplacerWriteString has: 
;; (defn BenchmarkByteReplacerWriteString
;;   {:added "1.0"
;;    :go "benchmarkByteReplacerWriteString(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{13008793 0xc00605d040}) b])
;; 
JOKER FUNC strings_test.BenchmarkByteStringMatch has: 
;; (defn BenchmarkByteStringMatch
;;   {:added "1.0"
;;    :go "benchmarkByteStringMatch(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{13008093 0xc00605c2a0}) b])
;; 
JOKER FUNC strings_test.BenchmarkByteStringReplacerWriteString has: 
;; (defn BenchmarkByteStringReplacerWriteString
;;   {:added "1.0"
;;    :go "benchmarkByteStringReplacerWriteString(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{13008568 0xc00605cbc0}) b])
;; 
JOKER FUNC strings_test.BenchmarkCountByte has: 
;; (defn BenchmarkCountByte
;;   {:added "1.0"
;;    :go "benchmarkCountByte(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{12992424 0xc006013c20}) b])
;; 
JOKER FUNC strings_test.BenchmarkCountHard1 has: 
;; (defn BenchmarkCountHard1
;;   {:added "1.0"
;;    :go "benchmarkCountHard1(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{12991662 0xc006012ce0}) b])
;; 
JOKER FUNC strings_test.BenchmarkCountHard2 has: 
;; (defn BenchmarkCountHard2
;;   {:added "1.0"
;;    :go "benchmarkCountHard2(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{12991733 0xc006012e40}) b])
;; 
JOKER FUNC strings_test.BenchmarkCountHard3 has: 
;; (defn BenchmarkCountHard3
;;   {:added "1.0"
;;    :go "benchmarkCountHard3(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{12991808 0xc006012fa0}) b])
;; 
JOKER FUNC strings_test.BenchmarkCountTorture has: 
;; (defn BenchmarkCountTorture
;;   {:added "1.0"
;;    :go "benchmarkCountTorture(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{12992147 0xc0060135c0}) b])
;; 
JOKER FUNC strings_test.BenchmarkCountTortureOverlapping has: 
;; (defn BenchmarkCountTortureOverlapping
;;   {:added "1.0"
;;    :go "benchmarkCountTortureOverlapping(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{12992282 0xc006013820}) b])
;; 
JOKER FUNC strings_test.BenchmarkEqualFold has: 
;; (defn BenchmarkEqualFold
;;   {:added "1.0"
;;    :go "benchmarkEqualFold(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{12989616 0xc00600a540}) b])
;; 
JOKER FUNC strings_test.BenchmarkFields has: 
;; (defn BenchmarkFields
;;   {:added "1.0"
;;    :go "benchmarkFields(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{12993609 0xc00601d220}) b])
;; 
JOKER FUNC strings_test.BenchmarkFieldsFunc has: 
;; (defn BenchmarkFieldsFunc
;;   {:added "1.0"
;;    :go "benchmarkFieldsFunc(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{12993970 0xc00601db40}) b])
;; 
JOKER FUNC strings_test.BenchmarkGenericMatch1 has: 
;; (defn BenchmarkGenericMatch1
;;   {:added "1.0"
;;    :go "benchmarkGenericMatch1(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{13006868 0xc006052860}) b])
;; 
JOKER FUNC strings_test.BenchmarkGenericMatch2 has: 
;; (defn BenchmarkGenericMatch2
;;   {:added "1.0"
;;    :go "benchmarkGenericMatch2(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{13007070 0xc006052d20}) b])
;; 
JOKER FUNC strings_test.BenchmarkGenericNoMatch has: 
;; (defn BenchmarkGenericNoMatch
;;   {:added "1.0"
;;    :go "benchmarkGenericNoMatch(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{13006632 0xc006052360}) b])
;; 
JOKER FUNC strings_test.BenchmarkHTMLEscapeNew has: 
;; (defn BenchmarkHTMLEscapeNew
;;   {:added "1.0"
;;    :go "benchmarkHTMLEscapeNew(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{13008252 0xc00605c680}) b])
;; 
JOKER FUNC strings_test.BenchmarkHTMLEscapeOld has: 
;; (defn BenchmarkHTMLEscapeOld
;;   {:added "1.0"
;;    :go "benchmarkHTMLEscapeOld(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{13008405 0xc00605c940}) b])
;; 
JOKER FUNC strings_test.BenchmarkIndex has: 
;; (defn BenchmarkIndex
;;   {:added "1.0"
;;    :go "benchmarkIndex(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{12961429 0xc005fa2380}) b])
;; 
JOKER FUNC strings_test.BenchmarkIndexAnyASCII has: 
;; (defn BenchmarkIndexAnyASCII
;;   {:added "1.0"
;;    :go "benchmarkIndexAnyASCII(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{12995046 0xc006025360}) b])
;; 
JOKER FUNC strings_test.BenchmarkIndexByte has: 
;; (defn BenchmarkIndexByte
;;   {:added "1.0"
;;    :go "benchmarkIndexByte(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{12961855 0xc005fa2bc0}) b])
;; 
JOKER FUNC strings_test.BenchmarkIndexHard1 has: 
;; (defn BenchmarkIndexHard1
;;   {:added "1.0"
;;    :go "benchmarkIndexHard1(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{12991055 0xc006012340}) b])
;; 
JOKER FUNC strings_test.BenchmarkIndexHard2 has: 
;; (defn BenchmarkIndexHard2
;;   {:added "1.0"
;;    :go "benchmarkIndexHard2(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{12991126 0xc0060124a0}) b])
;; 
JOKER FUNC strings_test.BenchmarkIndexHard3 has: 
;; (defn BenchmarkIndexHard3
;;   {:added "1.0"
;;    :go "benchmarkIndexHard3(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{12991201 0xc006012600}) b])
;; 
JOKER FUNC strings_test.BenchmarkIndexHard4 has: 
;; (defn BenchmarkIndexHard4
;;   {:added "1.0"
;;    :go "benchmarkIndexHard4(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{12991288 0xc006012760}) b])
;; 
JOKER FUNC strings_test.BenchmarkIndexPeriodic has: 
;; (defn BenchmarkIndexPeriodic
;;   {:added "1.0"
;;    :go "benchmarkIndexPeriodic(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{12995686 0xc0060282a0}) b])
;; 
JOKER FUNC strings_test.BenchmarkIndexRune has: 
;; (defn BenchmarkIndexRune
;;   {:added "1.0"
;;    :go "benchmarkIndexRune(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{12960678 0xc005f9f660}) b])
;; 
JOKER FUNC strings_test.BenchmarkIndexRuneFastPath has: 
;; (defn BenchmarkIndexRuneFastPath
;;   {:added "1.0"
;;    :go "benchmarkIndexRuneFastPath(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{12961214 0xc005f9ff60}) b])
;; 
JOKER FUNC strings_test.BenchmarkIndexRuneLongString has: 
;; (defn BenchmarkIndexRuneLongString
;;   {:added "1.0"
;;    :go "benchmarkIndexRuneLongString(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{12960973 0xc005f9fb40}) b])
;; 
JOKER FUNC strings_test.BenchmarkIndexTorture has: 
;; (defn BenchmarkIndexTorture
;;   {:added "1.0"
;;    :go "benchmarkIndexTorture(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{12992023 0xc006013360}) b])
;; 
JOKER FUNC strings_test.BenchmarkLastIndex has: 
;; (defn BenchmarkLastIndex
;;   {:added "1.0"
;;    :go "benchmarkLastIndex(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{12961640 0xc005fa27a0}) b])
;; 
JOKER FUNC strings_test.BenchmarkLastIndexHard1 has: 
;; (defn BenchmarkLastIndexHard1
;;   {:added "1.0"
;;    :go "benchmarkLastIndexHard1(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{12991408 0xc0060128c0}) b])
;; 
JOKER FUNC strings_test.BenchmarkLastIndexHard2 has: 
;; (defn BenchmarkLastIndexHard2
;;   {:added "1.0"
;;    :go "benchmarkLastIndexHard2(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{12991487 0xc006012a20}) b])
;; 
JOKER FUNC strings_test.BenchmarkLastIndexHard3 has: 
;; (defn BenchmarkLastIndexHard3
;;   {:added "1.0"
;;    :go "benchmarkLastIndexHard3(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{12991570 0xc006012b80}) b])
;; 
JOKER FUNC strings_test.BenchmarkMap has: 
;; (defn BenchmarkMap
;;   {:added "1.0"
;;    :go "benchmarkMap(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{13009754 0xc006064140}) b])
;; 
JOKER FUNC strings_test.BenchmarkMapNoChanges has: 
;; (defn BenchmarkMapNoChanges
;;   {:added "1.0"
;;    :go "benchmarkMapNoChanges(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{12971480 0xc005fc81c0}) b])
;; 
JOKER FUNC strings_test.BenchmarkRepeat has: 
;; (defn BenchmarkRepeat
;;   {:added "1.0"
;;    :go "benchmarkRepeat(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{12994950 0xc006025100}) b])
;; 
JOKER FUNC strings_test.BenchmarkSingleLongSuffixFail has: 
;; (defn BenchmarkSingleLongSuffixFail
;;   {:added "1.0"
;;    :go "benchmarkSingleLongSuffixFail(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{13007557 0xc006053720}) b])
;; 
JOKER FUNC strings_test.BenchmarkSingleMatch has: 
;; (defn BenchmarkSingleMatch
;;   {:added "1.0"
;;    :go "benchmarkSingleMatch(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{13007669 0xc006053980}) b])
;; 
JOKER FUNC strings_test.BenchmarkSingleMaxSkipping has: 
;; (defn BenchmarkSingleMaxSkipping
;;   {:added "1.0"
;;    :go "benchmarkSingleMaxSkipping(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{13007440 0xc0060534e0}) b])
;; 
JOKER FUNC strings_test.BenchmarkSplitEmptySeparator has: 
;; (defn BenchmarkSplitEmptySeparator
;;   {:added "1.0"
;;    :go "benchmarkSplitEmptySeparator(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{12994361 0xc0060244e0}) b])
;; 
JOKER FUNC strings_test.BenchmarkSplitMultiByteSeparator has: 
;; (defn BenchmarkSplitMultiByteSeparator
;;   {:added "1.0"
;;    :go "benchmarkSplitMultiByteSeparator(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{12994595 0xc0060249a0}) b])
;; 
JOKER FUNC strings_test.BenchmarkSplitNMultiByteSeparator has: 
;; (defn BenchmarkSplitNMultiByteSeparator
;;   {:added "1.0"
;;    :go "benchmarkSplitNMultiByteSeparator(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{12994841 0xc006024e80}) b])
;; 
JOKER FUNC strings_test.BenchmarkSplitNSingleByteSeparator has: 
;; (defn BenchmarkSplitNSingleByteSeparator
;;   {:added "1.0"
;;    :go "benchmarkSplitNSingleByteSeparator(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{12994718 0xc006024c00}) b])
;; 
JOKER FUNC strings_test.BenchmarkSplitSingleByteSeparator has: 
;; (defn BenchmarkSplitSingleByteSeparator
;;   {:added "1.0"
;;    :go "benchmarkSplitSingleByteSeparator(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{12994478 0xc006024740}) b])
;; 
JOKER FUNC strings_test.BenchmarkToLower has: 
;; (defn BenchmarkToLower
;;   {:added "1.0"
;;    :go "benchmarkToLower(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{12971195 0xc005fc1ae0}) b])
;; 
JOKER FUNC strings_test.BenchmarkToUpper has: 
;; (defn BenchmarkToUpper
;;   {:added "1.0"
;;    :go "benchmarkToUpper(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{12970915 0xc005fc1400}) b])
;; 
JOKER FUNC strings_test.BenchmarkTrim has: 
;; (defn BenchmarkTrim
;;   {:added "1.0"
;;    :go "benchmarkTrim(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{12973919 0xc005fd0c40}) b])
;; 
JOKER FUNC strings_test.BenchmarkTrimASCII has: 
;; (defn BenchmarkTrimASCII
;;   {:added "1.0"
;;    :go "benchmarkTrimASCII(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{12995364 0xc006025ae0}) b])
;; 
JOKER FUNC strings_test.ExampleBuilder has: 
;; (defn ExampleBuilder
;;   {:added "1.0"
;;    :go "exampleBuilder()"}
;;   [])
;; 
JOKER FUNC strings_test.ExampleCompare has: 
;; (defn ExampleCompare
;;   {:added "1.0"
;;    :go "exampleCompare()"}
;;   [])
;; 
JOKER FUNC strings_test.ExampleContains has: 
;; (defn ExampleContains
;;   {:added "1.0"
;;    :go "exampleContains()"}
;;   [])
;; 
JOKER FUNC strings_test.ExampleContainsAny has: 
;; (defn ExampleContainsAny
;;   {:added "1.0"
;;    :go "exampleContainsAny()"}
;;   [])
;; 
JOKER FUNC strings_test.ExampleContainsRune has: 
;; (defn ExampleContainsRune
;;   {:added "1.0"
;;    :go "exampleContainsRune()"}
;;   [])
;; 
JOKER FUNC strings_test.ExampleCount has: 
;; (defn ExampleCount
;;   {:added "1.0"
;;    :go "exampleCount()"}
;;   [])
;; 
JOKER FUNC strings_test.ExampleEqualFold has: 
;; (defn ExampleEqualFold
;;   {:added "1.0"
;;    :go "exampleEqualFold()"}
;;   [])
;; 
JOKER FUNC strings_test.ExampleFields has: 
;; (defn ExampleFields
;;   {:added "1.0"
;;    :go "exampleFields()"}
;;   [])
;; 
JOKER FUNC strings_test.ExampleFieldsFunc has: 
;; (defn ExampleFieldsFunc
;;   {:added "1.0"
;;    :go "exampleFieldsFunc()"}
;;   [])
;; 
JOKER FUNC strings_test.ExampleHasPrefix has: 
;; (defn ExampleHasPrefix
;;   {:added "1.0"
;;    :go "exampleHasPrefix()"}
;;   [])
;; 
JOKER FUNC strings_test.ExampleHasSuffix has: 
;; (defn ExampleHasSuffix
;;   {:added "1.0"
;;    :go "exampleHasSuffix()"}
;;   [])
;; 
JOKER FUNC strings_test.ExampleIndex has: 
;; (defn ExampleIndex
;;   {:added "1.0"
;;    :go "exampleIndex()"}
;;   [])
;; 
JOKER FUNC strings_test.ExampleIndexAny has: 
;; (defn ExampleIndexAny
;;   {:added "1.0"
;;    :go "exampleIndexAny()"}
;;   [])
;; 
JOKER FUNC strings_test.ExampleIndexByte has: 
;; (defn ExampleIndexByte
;;   {:added "1.0"
;;    :go "exampleIndexByte()"}
;;   [])
;; 
JOKER FUNC strings_test.ExampleIndexFunc has: 
;; (defn ExampleIndexFunc
;;   {:added "1.0"
;;    :go "exampleIndexFunc()"}
;;   [])
;; 
JOKER FUNC strings_test.ExampleIndexRune has: 
;; (defn ExampleIndexRune
;;   {:added "1.0"
;;    :go "exampleIndexRune()"}
;;   [])
;; 
JOKER FUNC strings_test.ExampleJoin has: 
;; (defn ExampleJoin
;;   {:added "1.0"
;;    :go "exampleJoin()"}
;;   [])
;; 
JOKER FUNC strings_test.ExampleLastIndex has: 
;; (defn ExampleLastIndex
;;   {:added "1.0"
;;    :go "exampleLastIndex()"}
;;   [])
;; 
JOKER FUNC strings_test.ExampleLastIndexAny has: 
;; (defn ExampleLastIndexAny
;;   {:added "1.0"
;;    :go "exampleLastIndexAny()"}
;;   [])
;; 
JOKER FUNC strings_test.ExampleLastIndexByte has: 
;; (defn ExampleLastIndexByte
;;   {:added "1.0"
;;    :go "exampleLastIndexByte()"}
;;   [])
;; 
JOKER FUNC strings_test.ExampleLastIndexFunc has: 
;; (defn ExampleLastIndexFunc
;;   {:added "1.0"
;;    :go "exampleLastIndexFunc()"}
;;   [])
;; 
JOKER FUNC strings_test.ExampleMap has: 
;; (defn ExampleMap
;;   {:added "1.0"
;;    :go "exampleMap()"}
;;   [])
;; 
JOKER FUNC strings_test.ExampleNewReplacer has: 
;; (defn ExampleNewReplacer
;;   {:added "1.0"
;;    :go "exampleNewReplacer()"}
;;   [])
;; 
JOKER FUNC strings_test.ExampleRepeat has: 
;; (defn ExampleRepeat
;;   {:added "1.0"
;;    :go "exampleRepeat()"}
;;   [])
;; 
JOKER FUNC strings_test.ExampleReplace has: 
;; (defn ExampleReplace
;;   {:added "1.0"
;;    :go "exampleReplace()"}
;;   [])
;; 
JOKER FUNC strings_test.ExampleSplit has: 
;; (defn ExampleSplit
;;   {:added "1.0"
;;    :go "exampleSplit()"}
;;   [])
;; 
JOKER FUNC strings_test.ExampleSplitAfter has: 
;; (defn ExampleSplitAfter
;;   {:added "1.0"
;;    :go "exampleSplitAfter()"}
;;   [])
;; 
JOKER FUNC strings_test.ExampleSplitAfterN has: 
;; (defn ExampleSplitAfterN
;;   {:added "1.0"
;;    :go "exampleSplitAfterN()"}
;;   [])
;; 
JOKER FUNC strings_test.ExampleSplitN has: 
;; (defn ExampleSplitN
;;   {:added "1.0"
;;    :go "exampleSplitN()"}
;;   [])
;; 
JOKER FUNC strings_test.ExampleTitle has: 
;; (defn ExampleTitle
;;   {:added "1.0"
;;    :go "exampleTitle()"}
;;   [])
;; 
JOKER FUNC strings_test.ExampleToLower has: 
;; (defn ExampleToLower
;;   {:added "1.0"
;;    :go "exampleToLower()"}
;;   [])
;; 
JOKER FUNC strings_test.ExampleToLowerSpecial has: 
;; (defn ExampleToLowerSpecial
;;   {:added "1.0"
;;    :go "exampleToLowerSpecial()"}
;;   [])
;; 
JOKER FUNC strings_test.ExampleToTitle has: 
;; (defn ExampleToTitle
;;   {:added "1.0"
;;    :go "exampleToTitle()"}
;;   [])
;; 
JOKER FUNC strings_test.ExampleToTitleSpecial has: 
;; (defn ExampleToTitleSpecial
;;   {:added "1.0"
;;    :go "exampleToTitleSpecial()"}
;;   [])
;; 
JOKER FUNC strings_test.ExampleToUpper has: 
;; (defn ExampleToUpper
;;   {:added "1.0"
;;    :go "exampleToUpper()"}
;;   [])
;; 
JOKER FUNC strings_test.ExampleToUpperSpecial has: 
;; (defn ExampleToUpperSpecial
;;   {:added "1.0"
;;    :go "exampleToUpperSpecial()"}
;;   [])
;; 
JOKER FUNC strings_test.ExampleTrim has: 
;; (defn ExampleTrim
;;   {:added "1.0"
;;    :go "exampleTrim()"}
;;   [])
;; 
JOKER FUNC strings_test.ExampleTrimFunc has: 
;; (defn ExampleTrimFunc
;;   {:added "1.0"
;;    :go "exampleTrimFunc()"}
;;   [])
;; 
JOKER FUNC strings_test.ExampleTrimLeft has: 
;; (defn ExampleTrimLeft
;;   {:added "1.0"
;;    :go "exampleTrimLeft()"}
;;   [])
;; 
JOKER FUNC strings_test.ExampleTrimLeftFunc has: 
;; (defn ExampleTrimLeftFunc
;;   {:added "1.0"
;;    :go "exampleTrimLeftFunc()"}
;;   [])
;; 
JOKER FUNC strings_test.ExampleTrimPrefix has: 
;; (defn ExampleTrimPrefix
;;   {:added "1.0"
;;    :go "exampleTrimPrefix()"}
;;   [])
;; 
JOKER FUNC strings_test.ExampleTrimRight has: 
;; (defn ExampleTrimRight
;;   {:added "1.0"
;;    :go "exampleTrimRight()"}
;;   [])
;; 
JOKER FUNC strings_test.ExampleTrimRightFunc has: 
;; (defn ExampleTrimRightFunc
;;   {:added "1.0"
;;    :go "exampleTrimRightFunc()"}
;;   [])
;; 
JOKER FUNC strings_test.ExampleTrimSpace has: 
;; (defn ExampleTrimSpace
;;   {:added "1.0"
;;    :go "exampleTrimSpace()"}
;;   [])
;; 
JOKER FUNC strings_test.ExampleTrimSuffix has: 
;; (defn ExampleTrimSuffix
;;   {:added "1.0"
;;    :go "exampleTrimSuffix()"}
;;   [])
;; 
JOKER FUNC strings_test.TestBuilder has: 
;; (defn TestBuilder
;;   {:added "1.0"
;;    :go "testBuilder(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{13011216 0xc006065b80}) t])
;; 
JOKER FUNC strings_test.TestBuilderAllocs has: 
;; (defn TestBuilderAllocs
;;   {:added "1.0"
;;    :go "testBuilderAllocs(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{13014589 0xc006079f80}) t])
;; 
JOKER FUNC strings_test.TestBuilderCopyPanic has: 
;; (defn TestBuilderCopyPanic
;;   {:added "1.0"
;;    :go "testBuilderCopyPanic(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{13015293 0xc00607eb00}) t])
;; 
JOKER FUNC strings_test.TestBuilderGrow has: 
;; (defn TestBuilderGrow
;;   {:added "1.0"
;;    :go "testBuilderGrow(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{13012742 0xc0060718c0}) t])
;; 
JOKER FUNC strings_test.TestBuilderReset has: 
;; (defn TestBuilderReset
;;   {:added "1.0"
;;    :go "testBuilderReset(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{13012336 0xc0060710c0}) t])
;; 
JOKER FUNC strings_test.TestBuilderString has: 
;; (defn TestBuilderString
;;   {:added "1.0"
;;    :go "testBuilderString(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{13011685 0xc0060705e0}) t])
;; 
JOKER FUNC strings_test.TestBuilderWrite2 has: 
;; (defn TestBuilderWrite2
;;   {:added "1.0"
;;    :go "testBuilderWrite2(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{13013326 0xc0060782e0}) t])
;; 
JOKER FUNC strings_test.TestBuilderWriteByte has: 
;; (defn TestBuilderWriteByte
;;   {:added "1.0"
;;    :go "testBuilderWriteByte(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{13014391 0xc006079ac0}) t])
;; 
JOKER FUNC strings_test.TestCaseConsistency has: 
;; (defn TestCaseConsistency
;;   {:added "1.0"
;;    :go "testCaseConsistency(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{12977265 0xc005fdeac0}) t])
;; 
JOKER FUNC strings_test.TestCompare has: 
;; (defn TestCompare
;;   {:added "1.0"
;;    :go "testCompare(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{12929747 0xc005f173a0}) t])
;; 
JOKER FUNC strings_test.TestCompareIdenticalString has: 
;; (defn TestCompareIdenticalString
;;   {:added "1.0"
;;    :go "testCompareIdenticalString(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{12929941 0xc005f17880}) t])
;; 
JOKER FUNC strings_test.TestCompareStrings has: 
;; (defn TestCompareStrings
;;   {:added "1.0"
;;    :go "testCompareStrings(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{12930120 0xc005f17c20}) t])
;; 
JOKER FUNC strings_test.TestContains has: 
;; (defn TestContains
;;   {:added "1.0"
;;    :go "testContains(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{12987456 0xc006001980}) t])
;; 
JOKER FUNC strings_test.TestContainsAny has: 
;; (defn TestContainsAny
;;   {:added "1.0"
;;    :go "testContainsAny(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{12988037 0xc006006580}) t])
;; 
JOKER FUNC strings_test.TestContainsRune has: 
;; (defn TestContainsRune
;;   {:added "1.0"
;;    :go "testContainsRune(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{12988557 0xc006006fe0}) t])
;; 
JOKER FUNC strings_test.TestCount has: 
;; (defn TestCount
;;   {:added "1.0"
;;    :go "testCount(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{12990121 0xc00600b000}) t])
;; 
JOKER FUNC strings_test.TestEmptyReaderConcurrent has: 
;; (defn TestEmptyReaderConcurrent
;;   {:added "1.0"
;;    :go "testEmptyReaderConcurrent(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{12927255 0xc005f147c0}) t])
;; 
JOKER FUNC strings_test.TestEqualFold has: 
;; (defn TestEqualFold
;;   {:added "1.0"
;;    :go "testEqualFold(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{12989275 0xc006007ca0}) t])
;; 
JOKER FUNC strings_test.TestFields has: 
;; (defn TestFields
;;   {:added "1.0"
;;    :go "testFields(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{12965356 0xc005fafc80}) t])
;; 
JOKER FUNC strings_test.TestFieldsFunc has: 
;; (defn TestFieldsFunc
;;   {:added "1.0"
;;    :go "testFieldsFunc(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{12965693 0xc005fb43e0}) t])
;; 
JOKER FUNC strings_test.TestFinderCreation has: 
;; (defn TestFinderCreation
;;   {:added "1.0"
;;    :go "testFinderCreation(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{13048197 0xc0060efe00}) t])
;; 
JOKER FUNC strings_test.TestFinderNext has: 
;; (defn TestFinderNext
;;   {:added "1.0"
;;    :go "testFinderNext(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{13047520 0xc0060eef00}) t])
;; 
JOKER FUNC strings_test.TestGenericTrieBuilding has: 
;; (defn TestGenericTrieBuilding
;;   "TestGenericTrieBuilding verifies the structure of the generated trie. There
;; is one node per line, and the key ending with the current line is in the
;; trie if it ends with a "+"."
;;   {:added "1.0"
;;    :go "testGenericTrieBuilding(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{13005555 0xc00604f5c0}) t])
;; 
JOKER FUNC strings_test.TestIndex has: 
;; (defn TestIndex
;;   {:added "1.0"
;;    :go "testIndex(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{12957413 0xc005f91b00}) t])
;; 
JOKER FUNC strings_test.TestIndexAny has: 
;; (defn TestIndexAny
;;   {:added "1.0"
;;    :go "testIndexAny(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{12957598 0xc005f91e40}) t])
;; 
JOKER FUNC strings_test.TestIndexFunc has: 
;; (defn TestIndexFunc
;;   {:added "1.0"
;;    :go "testIndexFunc(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{12976516 0xc005fd78c0}) t])
;; 
JOKER FUNC strings_test.TestIndexRandom has: 
;; (defn TestIndexRandom
;;   {:added "1.0"
;;    :go "testIndexRandom(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{12958517 0xc005f9afa0}) t])
;; 
JOKER FUNC strings_test.TestIndexRune has: 
;; (defn TestIndexRune
;;   {:added "1.0"
;;    :go "testIndexRune(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{12959233 0xc005f9bdc0}) t])
;; 
JOKER FUNC strings_test.TestLastIndex has: 
;; (defn TestLastIndex
;;   {:added "1.0"
;;    :go "testLastIndex(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{12957502 0xc005f91ca0}) t])
;; 
JOKER FUNC strings_test.TestLastIndexAny has: 
;; (defn TestLastIndexAny
;;   {:added "1.0"
;;    :go "testLastIndexAny(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{12957696 0xc005f91fe0}) t])
;; 
JOKER FUNC strings_test.TestLastIndexByte has: 
;; (defn TestLastIndexByte
;;   {:added "1.0"
;;    :go "testLastIndexByte(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{12957804 0xc005f9a180}) t])
;; 
JOKER FUNC strings_test.TestMap has: 
;; (defn TestMap
;;   {:added "1.0"
;;    :go "testMap(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{12968511 0xc005fbcb60}) t])
;; 
JOKER FUNC strings_test.TestPickAlgorithm has: 
;; (defn TestPickAlgorithm
;;   "TestPickAlgorithm tests that NewReplacer picks the correct algorithm."
;;   {:added "1.0"
;;    :go "testPickAlgorithm(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{13004645 0xc00604e8c0}) t])
;; 
JOKER FUNC strings_test.TestReadAfterBigSeek has: 
;; (defn TestReadAfterBigSeek
;;   {:added "1.0"
;;    :go "testReadAfterBigSeek(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{12925956 0xc005f0eaa0}) t])
;; 
JOKER FUNC strings_test.TestReadByte has: 
;; (defn TestReadByte
;;   {:added "1.0"
;;    :go "testReadByte(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{12980756 0xc005fec820}) t])
;; 
JOKER FUNC strings_test.TestReadRune has: 
;; (defn TestReadRune
;;   {:added "1.0"
;;    :go "testReadRune(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{12981640 0xc005fed7e0}) t])
;; 
JOKER FUNC strings_test.TestReader has: 
;; (defn TestReader
;;   {:added "1.0"
;;    :go "testReader(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{12924512 0xc005f06980}) t])
;; 
JOKER FUNC strings_test.TestReaderAt has: 
;; (defn TestReaderAt
;;   {:added "1.0"
;;    :go "testReaderAt(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{12926225 0xc005f0f180}) t])
;; 
JOKER FUNC strings_test.TestReaderAtConcurrent has: 
;; (defn TestReaderAtConcurrent
;;   {:added "1.0"
;;    :go "testReaderAtConcurrent(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{12926919 0xc005f14140}) t])
;; 
JOKER FUNC strings_test.TestReaderLenSize has: 
;; (defn TestReaderLenSize
;;   "tests that Len is affected by reads, but Size is not."
;;   {:added "1.0"
;;    :go "testReaderLenSize(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{12928302 0xc005f15a00}) t])
;; 
JOKER FUNC strings_test.TestReaderReset has: 
;; (defn TestReaderReset
;;   {:added "1.0"
;;    :go "testReaderReset(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{12928532 0xc005f15fc0}) t])
;; 
JOKER FUNC strings_test.TestRepeat has: 
;; (defn TestRepeat
;;   {:added "1.0"
;;    :go "testRepeat(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{12978697 0xc005fdfba0}) t])
;; 
JOKER FUNC strings_test.TestRepeatCatchesOverflow has: 
;; (defn TestRepeatCatchesOverflow
;;   "See Issue golang.org/issue/16237"
;;   {:added "1.0"
;;    :go "testRepeatCatchesOverflow(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{12979215 0xc005fe45e0}) t])
;; 
JOKER FUNC strings_test.TestReplace has: 
;; (defn TestReplace
;;   {:added "1.0"
;;    :go "testReplace(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{12984157 0xc005ff8820}) t])
;; 
JOKER FUNC strings_test.TestReplacer has: 
;; (defn TestReplacer
;;   "TestReplacer tests the replacer implementations."
;;   {:added "1.0"
;;    :go "testReplacer(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{12996801 0xc0060297a0}) t])
;; 
JOKER FUNC strings_test.TestRunes has: 
;; (defn TestRunes
;;   {:added "1.0"
;;    :go "testRunes(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{12980368 0xc005fec000}) t])
;; 
JOKER FUNC strings_test.TestSpecialCase has: 
;; (defn TestSpecialCase
;;   {:added "1.0"
;;    :go "testSpecialCase(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{12971653 0xc005fc8520}) t])
;; 
JOKER FUNC strings_test.TestSplit has: 
;; (defn TestSplit
;;   {:added "1.0"
;;    :go "testSplit(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{12962899 0xc005fa8440}) t])
;; 
JOKER FUNC strings_test.TestSplitAfter has: 
;; (defn TestSplitAfter
;;   {:added "1.0"
;;    :go "testSplitAfter(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{12964085 0xc005fae2c0}) t])
;; 
JOKER FUNC strings_test.TestTitle has: 
;; (defn TestTitle
;;   {:added "1.0"
;;    :go "testTitle(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{12984741 0xc005ff92e0}) t])
;; 
JOKER FUNC strings_test.TestToLower has: 
;; (defn TestToLower
;;   {:added "1.0"
;;    :go "testToLower(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{12970824 0xc005fc1260}) t])
;; 
JOKER FUNC strings_test.TestToUpper has: 
;; (defn TestToUpper
;;   {:added "1.0"
;;    :go "testToUpper(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{12970738 0xc005fc10c0}) t])
;; 
JOKER FUNC strings_test.TestTrim has: 
;; (defn TestTrim
;;   {:added "1.0"
;;    :go "testTrim(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{12973405 0xc005fd02e0}) t])
;; 
JOKER FUNC strings_test.TestTrimFunc has: 
;; (defn TestTrimFunc
;;   {:added "1.0"
;;    :go "testTrimFunc(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{12975437 0xc005fd64a0}) t])
;; 
JOKER FUNC strings_test.TestTrimSpace has: 
;; (defn TestTrimSpace
;;   {:added "1.0"
;;    :go "testTrimSpace(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{12972261 0xc005fc8ea0}) t])
;; 
JOKER FUNC strings_test.TestUnreadRuneError has: 
;; (defn TestUnreadRuneError
;;   {:added "1.0"
;;    :go "testUnreadRuneError(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{12982964 0xc005ff50a0}) t])
;; 
JOKER FUNC strings_test.TestWriteStringError has: 
;; (defn TestWriteStringError
;;   "TestWriteStringError tests that WriteString returns an error
;; received from the underlying io.Writer."
;;   {:added "1.0"
;;    :go "testWriteStringError(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{13005089 0xc00604f020}) t])
;; 
JOKER FUNC strings_test.TestWriteTo has: 
;; (defn TestWriteTo
;;   {:added "1.0"
;;    :go "testWriteTo(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{12927709 0xc005f14f00}) t])
;; 
JOKER FUNC subtle.BenchmarkConstantTimeByteEq has: 
;; (defn BenchmarkConstantTimeByteEq
;;   {:added "1.0"
;;    :go "benchmarkConstantTimeByteEq(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{1594823 0xc000b51f20}) b])
;; 
JOKER FUNC subtle.BenchmarkConstantTimeEq has: 
;; (defn BenchmarkConstantTimeEq
;;   {:added "1.0"
;;    :go "benchmarkConstantTimeEq(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{1594985 0xc000b70300}) b])
;; 
JOKER FUNC subtle.BenchmarkConstantTimeLessOrEq has: 
;; (defn BenchmarkConstantTimeLessOrEq
;;   {:added "1.0"
;;    :go "benchmarkConstantTimeLessOrEq(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{1595161 0xc000b70720}) b])
;; 
JOKER FUNC subtle.ConstantTimeByteEq has: 
(defn ^Int ConstantTimeByteEq
  "ConstantTimeByteEq returns 1 if x == y and 0 otherwise."
  {:added "1.0"
   :go "constantTimeByteEq(x, y)"}
  [x, y])

JOKER FUNC subtle.ConstantTimeCompare has: 
;; (defn ^Int ConstantTimeCompare
;;   "ConstantTimeCompare returns 1 if and only if the two slices, x
;; and y, have equal contents. The time taken is a function of the length of
;; the slices and is independent of the contents."
;;   {:added "1.0"
;;    :go "constantTimeCompare(x, y)"}
;;   [^ABEND881(unrecognized Expr type *ast.ArrayType at: &{1591036 <nil> byte}) x, ^ABEND881(unrecognized Expr type *ast.ArrayType at: &{1591036 <nil> byte}) y])
;; 
JOKER FUNC subtle.ConstantTimeCopy has: 
;; (defn ConstantTimeCopy
;;   "ConstantTimeCopy copies the contents of y into x (a slice of equal length)
;; if v == 1. If v == 0, x is left unchanged. Its behavior is undefined if v
;; takes any other value."
;;   {:added "1.0"
;;    :go "constantTimeCopy(v, x, y)"}
;;   [^Int v, ^ABEND881(unrecognized Expr type *ast.ArrayType at: &{1591876 <nil> byte}) x, ^ABEND881(unrecognized Expr type *ast.ArrayType at: &{1591876 <nil> byte}) y])
;; 
JOKER FUNC subtle.ConstantTimeEq has: 
(defn ^Int ConstantTimeEq
  "ConstantTimeEq returns 1 if x == y and 0 otherwise."
  {:added "1.0"
   :go "constantTimeEq(x, y)"}
  [x, y])

JOKER FUNC subtle.ConstantTimeLessOrEq has: 
(defn ^Int ConstantTimeLessOrEq
  "ConstantTimeLessOrEq returns 1 if x <= y and 0 otherwise.
Its behavior is undefined if x or y are negative or > 2**31 - 1."
  {:added "1.0"
   :go "constantTimeLessOrEq(x, y)"}
  [^Int x, ^Int y])

JOKER FUNC subtle.ConstantTimeSelect has: 
(defn ^Int ConstantTimeSelect
  "ConstantTimeSelect returns x if v is 1 and y if v is 0.
Its behavior is undefined if v takes any other value."
  {:added "1.0"
   :go "constantTimeSelect(v, x, y)"}
  [^Int v, ^Int x, ^Int y])

JOKER FUNC subtle.TestConstantTimeByteEq has: 
;; (defn TestConstantTimeByteEq
;;   {:added "1.0"
;;    :go "testConstantTimeByteEq(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{1593400 0xc000a60ba0}) t])
;; 
JOKER FUNC subtle.TestConstantTimeCompare has: 
;; (defn TestConstantTimeCompare
;;   {:added "1.0"
;;    :go "testConstantTimeCompare(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{1592889 0xc000a60180}) t])
;; 
JOKER FUNC subtle.TestConstantTimeCopy has: 
;; (defn TestConstantTimeCopy
;;   {:added "1.0"
;;    :go "testConstantTimeCopy(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{1594249 0xc000b512c0}) t])
;; 
JOKER FUNC subtle.TestConstantTimeEq has: 
;; (defn TestConstantTimeEq
;;   {:added "1.0"
;;    :go "testConstantTimeEq(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{1593786 0xc000a6f8e0}) t])
;; 
JOKER FUNC subtle.TestConstantTimeLessOrEq has: 
;; (defn TestConstantTimeLessOrEq
;;   {:added "1.0"
;;    :go "testConstantTimeLessOrEq(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{1594531 0xc000b519a0}) t])
;; 
JOKER FUNC suffixarray.BenchmarkNewIndexRandom has: 
;; (defn BenchmarkNewIndexRandom
;;   {:added "1.0"
;;    :go "benchmarkNewIndexRandom(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{6320872 0xc001552e40}) b])
;; 
JOKER FUNC suffixarray.BenchmarkNewIndexRepeat has: 
;; (defn BenchmarkNewIndexRepeat
;;   {:added "1.0"
;;    :go "benchmarkNewIndexRepeat(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{6320942 0xc001552fa0}) b])
;; 
JOKER FUNC suffixarray.BenchmarkSaveRestore has: 
;; (defn BenchmarkSaveRestore
;;   {:added "1.0"
;;    :go "benchmarkSaveRestore(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{6321011 0xc001553100}) b])
;; 
JOKER FUNC suffixarray.New has: 
;; (defn ^{:data ^ABEND881(unrecognized Expr type *ast.ArrayType at: &{6322234 <nil> byte}) data, :sa ^ABEND881(unrecognized Expr type *ast.ArrayType at: &{6322247 <nil> int}) sa} New
;;   "New creates a new Index for data.
;; Index creation time is O(N*log(N)) for N = len(data)."
;;   {:added "1.0"
;;    :go "new(data)"}
;;   [^ABEND881(unrecognized Expr type *ast.ArrayType at: &{6322411 <nil> byte}) data])
;; 
JOKER FUNC suffixarray.TestIndex has: 
;; (defn TestIndex
;;   {:added "1.0"
;;    :go "testIndex(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{6320112 0xc001552000}) t])
;; 
JOKER FUNC suffixarray_test.ExampleIndex_Lookup has: 
;; (defn ExampleIndex_Lookup
;;   {:added "1.0"
;;    :go "exampleIndex_Lookup()"}
;;   [])
;; 
JOKER FUNC sync.NewCond has: 
(defn ^{:nocopy noCopy, :l L, :notify notify, :checker checker} NewCond
  "NewCond returns a new Cond with Locker l."
  {:added "1.0"
   :go "newCond(l)"}
  [l])

JOKER FUNC sync_test.BenchmarkAdversarialAlloc has: 
;; (defn BenchmarkAdversarialAlloc
;;   "BenchmarkAdversarialAlloc tests performance when we store a new value
;; immediately whenever the map is promoted to clean and otherwise load a
;; unique, missing key.
;; 
;; This forces the Load calls to always acquire the map's mutex."
;;   {:added "1.0"
;;    :go "benchmarkAdversarialAlloc(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{13087436 0xc0061a1640}) b])
;; 
JOKER FUNC sync_test.BenchmarkAdversarialDelete has: 
;; (defn BenchmarkAdversarialDelete
;;   "BenchmarkAdversarialDelete tests performance when we periodically delete
;; one key and add a different one in a large map.
;; 
;; This forces the Load calls to always acquire the map's mutex and periodically
;; makes a full copy of the map despite changing only one entry."
;;   {:added "1.0"
;;    :go "benchmarkAdversarialDelete(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{13088070 0xc0061a1e40}) b])
;; 
JOKER FUNC sync_test.BenchmarkCond1 has: 
;; (defn BenchmarkCond1
;;   {:added "1.0"
;;    :go "benchmarkCond1(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{13092810 0xc0061bf740}) b])
;; 
JOKER FUNC sync_test.BenchmarkCond16 has: 
;; (defn BenchmarkCond16
;;   {:added "1.0"
;;    :go "benchmarkCond16(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{13093051 0xc0061bfcc0}) b])
;; 
JOKER FUNC sync_test.BenchmarkCond2 has: 
;; (defn BenchmarkCond2
;;   {:added "1.0"
;;    :go "benchmarkCond2(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{13092870 0xc0061bf8a0}) b])
;; 
JOKER FUNC sync_test.BenchmarkCond32 has: 
;; (defn BenchmarkCond32
;;   {:added "1.0"
;;    :go "benchmarkCond32(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{13093113 0xc0061bfe20}) b])
;; 
JOKER FUNC sync_test.BenchmarkCond4 has: 
;; (defn BenchmarkCond4
;;   {:added "1.0"
;;    :go "benchmarkCond4(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{13092930 0xc0061bfa00}) b])
;; 
JOKER FUNC sync_test.BenchmarkCond8 has: 
;; (defn BenchmarkCond8
;;   {:added "1.0"
;;    :go "benchmarkCond8(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{13092990 0xc0061bfb60}) b])
;; 
JOKER FUNC sync_test.BenchmarkContendedSemaphore has: 
;; (defn BenchmarkContendedSemaphore
;;   {:added "1.0"
;;    :go "benchmarkContendedSemaphore(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{13064501 0xc006143be0}) b])
;; 
JOKER FUNC sync_test.BenchmarkLoadMostlyHits has: 
;; (defn BenchmarkLoadMostlyHits
;;   {:added "1.0"
;;    :go "benchmarkLoadMostlyHits(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{13084466 0xc006195940}) b])
;; 
JOKER FUNC sync_test.BenchmarkLoadMostlyMisses has: 
;; (defn BenchmarkLoadMostlyMisses
;;   {:added "1.0"
;;    :go "benchmarkLoadMostlyMisses(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{13084929 0xc00619c3a0}) b])
;; 
JOKER FUNC sync_test.BenchmarkLoadOrStoreBalanced has: 
;; (defn BenchmarkLoadOrStoreBalanced
;;   {:added "1.0"
;;    :go "benchmarkLoadOrStoreBalanced(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{13085395 0xc00619ce20}) b])
;; 
JOKER FUNC sync_test.BenchmarkLoadOrStoreCollision has: 
;; (defn BenchmarkLoadOrStoreCollision
;;   {:added "1.0"
;;    :go "benchmarkLoadOrStoreCollision(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{13086561 0xc0061a05c0}) b])
;; 
JOKER FUNC sync_test.BenchmarkLoadOrStoreUnique has: 
;; (defn BenchmarkLoadOrStoreUnique
;;   {:added "1.0"
;;    :go "benchmarkLoadOrStoreUnique(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{13086206 0xc00619de40}) b])
;; 
JOKER FUNC sync_test.BenchmarkMutex has: 
;; (defn BenchmarkMutex
;;   {:added "1.0"
;;    :go "benchmarkMutex(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{13067688 0xc00615da40}) b])
;; 
JOKER FUNC sync_test.BenchmarkMutexNoSpin has: 
;; (defn BenchmarkMutexNoSpin
;;   {:added "1.0"
;;    :go "benchmarkMutexNoSpin(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{13067996 0xc006160040}) b])
;; 
JOKER FUNC sync_test.BenchmarkMutexSlack has: 
;; (defn BenchmarkMutexSlack
;;   {:added "1.0"
;;    :go "benchmarkMutexSlack(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{13067765 0xc00615dbc0}) b])
;; 
JOKER FUNC sync_test.BenchmarkMutexSpin has: 
;; (defn BenchmarkMutexSpin
;;   {:added "1.0"
;;    :go "benchmarkMutexSpin(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{13068966 0xc006160aa0}) b])
;; 
JOKER FUNC sync_test.BenchmarkMutexUncontended has: 
;; (defn BenchmarkMutexUncontended
;;   {:added "1.0"
;;    :go "benchmarkMutexUncontended(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{13067176 0xc00615cf00}) b])
;; 
JOKER FUNC sync_test.BenchmarkMutexWork has: 
;; (defn BenchmarkMutexWork
;;   {:added "1.0"
;;    :go "benchmarkMutexWork(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{13067840 0xc00615dd40}) b])
;; 
JOKER FUNC sync_test.BenchmarkMutexWorkSlack has: 
;; (defn BenchmarkMutexWorkSlack
;;   {:added "1.0"
;;    :go "benchmarkMutexWorkSlack(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{13067920 0xc00615dec0}) b])
;; 
JOKER FUNC sync_test.BenchmarkOnce has: 
;; (defn BenchmarkOnce
;;   {:added "1.0"
;;    :go "benchmarkOnce(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{13100827 0xc0061e38e0}) b])
;; 
JOKER FUNC sync_test.BenchmarkPool has: 
;; (defn BenchmarkPool
;;   {:added "1.0"
;;    :go "benchmarkPool(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{13054480 0xc006119e80}) b])
;; 
JOKER FUNC sync_test.BenchmarkPoolOverflow has: 
;; (defn BenchmarkPoolOverflow
;;   {:added "1.0"
;;    :go "benchmarkPoolOverflow(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{13054625 0xc006120240}) b])
;; 
JOKER FUNC sync_test.BenchmarkRWMutexUncontended has: 
;; (defn BenchmarkRWMutexUncontended
;;   {:added "1.0"
;;    :go "benchmarkRWMutexUncontended(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{13062733 0xc00613fa60}) b])
;; 
JOKER FUNC sync_test.BenchmarkRWMutexWorkWrite10 has: 
;; (defn BenchmarkRWMutexWorkWrite10
;;   {:added "1.0"
;;    :go "benchmarkRWMutexWorkWrite10(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{13063629 0xc006142c80}) b])
;; 
JOKER FUNC sync_test.BenchmarkRWMutexWorkWrite100 has: 
;; (defn BenchmarkRWMutexWorkWrite100
;;   {:added "1.0"
;;    :go "benchmarkRWMutexWorkWrite100(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{13063546 0xc006142b00}) b])
;; 
JOKER FUNC sync_test.BenchmarkRWMutexWrite10 has: 
;; (defn BenchmarkRWMutexWrite10
;;   {:added "1.0"
;;    :go "benchmarkRWMutexWrite10(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{13063465 0xc006142980}) b])
;; 
JOKER FUNC sync_test.BenchmarkRWMutexWrite100 has: 
;; (defn BenchmarkRWMutexWrite100
;;   {:added "1.0"
;;    :go "benchmarkRWMutexWrite100(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{13063388 0xc006142800}) b])
;; 
JOKER FUNC sync_test.BenchmarkRange has: 
;; (defn BenchmarkRange
;;   {:added "1.0"
;;    :go "benchmarkRange(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{13086827 0xc0061a0ca0}) b])
;; 
JOKER FUNC sync_test.BenchmarkSemaSyntBlock has: 
;; (defn BenchmarkSemaSyntBlock
;;   {:added "1.0"
;;    :go "benchmarkSemaSyntBlock(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{13081998 0xc00618f140}) b])
;; 
JOKER FUNC sync_test.BenchmarkSemaSyntNonblock has: 
;; (defn BenchmarkSemaSyntNonblock
;;   {:added "1.0"
;;    :go "benchmarkSemaSyntNonblock(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{13081919 0xc00618efc0}) b])
;; 
JOKER FUNC sync_test.BenchmarkSemaUncontended has: 
;; (defn BenchmarkSemaUncontended
;;   {:added "1.0"
;;    :go "benchmarkSemaUncontended(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{13081092 0xc006183f00}) b])
;; 
JOKER FUNC sync_test.BenchmarkSemaWorkBlock has: 
;; (defn BenchmarkSemaWorkBlock
;;   {:added "1.0"
;;    :go "benchmarkSemaWorkBlock(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{13082157 0xc00618f440}) b])
;; 
JOKER FUNC sync_test.BenchmarkSemaWorkNonblock has: 
;; (defn BenchmarkSemaWorkNonblock
;;   {:added "1.0"
;;    :go "benchmarkSemaWorkNonblock(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{13082079 0xc00618f2c0}) b])
;; 
JOKER FUNC sync_test.BenchmarkUncontendedSemaphore has: 
;; (defn BenchmarkUncontendedSemaphore
;;   {:added "1.0"
;;    :go "benchmarkUncontendedSemaphore(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{13064378 0xc0061438e0}) b])
;; 
JOKER FUNC sync_test.BenchmarkWaitGroupActuallyWait has: 
;; (defn BenchmarkWaitGroupActuallyWait
;;   {:added "1.0"
;;    :go "benchmarkWaitGroupActuallyWait(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{13110089 0xc006217c60}) b])
;; 
JOKER FUNC sync_test.BenchmarkWaitGroupAddDone has: 
;; (defn BenchmarkWaitGroupAddDone
;;   {:added "1.0"
;;    :go "benchmarkWaitGroupAddDone(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{13109507 0xc006217160}) b])
;; 
JOKER FUNC sync_test.BenchmarkWaitGroupAddDoneWork has: 
;; (defn BenchmarkWaitGroupAddDoneWork
;;   {:added "1.0"
;;    :go "benchmarkWaitGroupAddDoneWork(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{13109594 0xc0062172c0}) b])
;; 
JOKER FUNC sync_test.BenchmarkWaitGroupUncontended has: 
;; (defn BenchmarkWaitGroupUncontended
;;   {:added "1.0"
;;    :go "benchmarkWaitGroupUncontended(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{13109005 0xc006216660}) b])
;; 
JOKER FUNC sync_test.BenchmarkWaitGroupWait has: 
;; (defn BenchmarkWaitGroupWait
;;   {:added "1.0"
;;    :go "benchmarkWaitGroupWait(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{13109921 0xc0062179a0}) b])
;; 
JOKER FUNC sync_test.BenchmarkWaitGroupWaitWork has: 
;; (defn BenchmarkWaitGroupWaitWork
;;   {:added "1.0"
;;    :go "benchmarkWaitGroupWaitWork(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{13110002 0xc006217b00}) b])
;; 
JOKER FUNC sync_test.ExampleOnce has: 
;; (defn ExampleOnce
;;   {:added "1.0"
;;    :go "exampleOnce()"}
;;   [])
;; 
JOKER FUNC sync_test.ExamplePool has: 
;; (defn ExamplePool
;;   {:added "1.0"
;;    :go "examplePool()"}
;;   [])
;; 
JOKER FUNC sync_test.ExampleWaitGroup has: 
;; (defn ExampleWaitGroup
;;   "This example fetches several URLs concurrently,
;; using a WaitGroup to block until all the fetches are complete."
;;   {:added "1.0"
;;    :go "exampleWaitGroup()"}
;;   [])
;; 
JOKER FUNC sync_test.HammerMutex has: 
;; (defn HammerMutex
;;   {:added "1.0"
;;    :go "hammerMutex(m, loops, cdone)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{13064742 Mutex}) m, ^Int loops, ^ABEND881(unrecognized Expr type *ast.ChanType at: &{13064767 0 3 bool}) cdone])
;; 
JOKER FUNC sync_test.HammerRWMutex has: 
;; (defn HammerRWMutex
;;   {:added "1.0"
;;    :go "hammerRWMutex(gomaxprocs, numReaders, num_iterations)"}
;;   [^Int gomaxprocs, ^Int numReaders, ^Int num_iterations])
;; 
JOKER FUNC sync_test.HammerSemaphore has: 
;; (defn HammerSemaphore
;;   {:added "1.0"
;;    :go "hammerSemaphore(s, loops, cdone)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{13064011 uint32}) s, ^Int loops, ^ABEND881(unrecognized Expr type *ast.ChanType at: &{13064037 0 3 bool}) cdone])
;; 
JOKER FUNC sync_test.Log has: 
;; (defn Log
;;   {:added "1.0"
;;    :go "log(w, key, val)"}
;;   [^ABEND881(unrecognized Expr type *ast.SelectorExpr at: &{io Writer}) w, ^String key, ^String val])
;; 
JOKER FUNC sync_test.TestConcurrentRange has: 
;; (defn TestConcurrentRange
;;   {:added "1.0"
;;    :go "testConcurrentRange(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{13098692 0xc0061d8fe0}) t])
;; 
JOKER FUNC sync_test.TestCondBroadcast has: 
;; (defn TestCondBroadcast
;;   {:added "1.0"
;;    :go "testCondBroadcast(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{13089826 0xc0061b8160}) t])
;; 
JOKER FUNC sync_test.TestCondCopy has: 
;; (defn TestCondCopy
;;   {:added "1.0"
;;    :go "testCondCopy(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{13092462 0xc0061bf080}) t])
;; 
JOKER FUNC sync_test.TestCondSignal has: 
;; (defn TestCondSignal
;;   {:added "1.0"
;;    :go "testCondSignal(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{13088765 0xc0061aab80}) t])
;; 
JOKER FUNC sync_test.TestCondSignalGenerations has: 
;; (defn TestCondSignalGenerations
;;   {:added "1.0"
;;    :go "testCondSignalGenerations(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{13089389 0xc0061ab780}) t])
;; 
JOKER FUNC sync_test.TestCondSignalStealing has: 
;; (defn TestCondSignalStealing
;;   {:added "1.0"
;;    :go "testCondSignalStealing(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{13091340 0xc0061be2e0}) t])
;; 
JOKER FUNC sync_test.TestMapMatchesDeepCopy has: 
;; (defn TestMapMatchesDeepCopy
;;   {:added "1.0"
;;    :go "testMapMatchesDeepCopy(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{13098555 0xc0061d8d40}) t])
;; 
JOKER FUNC sync_test.TestMapMatchesRWMutex has: 
;; (defn TestMapMatchesRWMutex
;;   {:added "1.0"
;;    :go "testMapMatchesRWMutex(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{13098416 0xc0061d8aa0}) t])
;; 
JOKER FUNC sync_test.TestMutex has: 
;; (defn TestMutex
;;   {:added "1.0"
;;    :go "testMutex(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{13064872 0xc00614c560}) t])
;; 
JOKER FUNC sync_test.TestMutexFairness has: 
;; (defn TestMutexFairness
;;   {:added "1.0"
;;    :go "testMutexFairness(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{13066647 0xc00615c580}) t])
;; 
JOKER FUNC sync_test.TestMutexMisuse has: 
;; (defn TestMutexMisuse
;;   {:added "1.0"
;;    :go "testMutexMisuse(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{13066288 0xc00614dea0}) t])
;; 
JOKER FUNC sync_test.TestOnce has: 
;; (defn TestOnce
;;   {:added "1.0"
;;    :go "testOnce(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{13100291 0xc0061e2e60}) t])
;; 
JOKER FUNC sync_test.TestOncePanic has: 
;; (defn TestOncePanic
;;   {:added "1.0"
;;    :go "testOncePanic(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{13100559 0xc0061e3480}) t])
;; 
JOKER FUNC sync_test.TestParallelReaders has: 
;; (defn TestParallelReaders
;;   {:added "1.0"
;;    :go "testParallelReaders(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{13060298 0xc006138ae0}) t])
;; 
JOKER FUNC sync_test.TestPool has: 
;; (defn TestPool
;;   {:added "1.0"
;;    :go "testPool(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{13051809 0xc006110c00}) t])
;; 
JOKER FUNC sync_test.TestPoolGC has: 
;; (defn TestPoolGC
;;   "Test that Pool does not hold pointers to previously cached resources."
;;   {:added "1.0"
;;    :go "testPoolGC(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{13053213 0xc006118460}) t])
;; 
JOKER FUNC sync_test.TestPoolNew has: 
;; (defn TestPoolNew
;;   {:added "1.0"
;;    :go "testPoolNew(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{13052533 0xc006111940}) t])
;; 
JOKER FUNC sync_test.TestPoolRelease has: 
;; (defn TestPoolRelease
;;   "Test that Pool releases resources on GC."
;;   {:added "1.0"
;;    :go "testPoolRelease(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{13053316 0xc006118600}) t])
;; 
JOKER FUNC sync_test.TestPoolStress has: 
;; (defn TestPoolStress
;;   {:added "1.0"
;;    :go "testPoolStress(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{13054027 0xc006119500}) t])
;; 
JOKER FUNC sync_test.TestRLocker has: 
;; (defn TestRLocker
;;   {:added "1.0"
;;    :go "testRLocker(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{13062153 0xc00613f000}) t])
;; 
JOKER FUNC sync_test.TestRWMutex has: 
;; (defn TestRWMutex
;;   {:added "1.0"
;;    :go "testRWMutex(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{13061776 0xc00613e6e0}) t])
;; 
JOKER FUNC sync_test.TestRace has: 
;; (defn TestRace
;;   {:added "1.0"
;;    :go "testRace(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{13090651 0xc0061b9220}) t])
;; 
JOKER FUNC sync_test.TestSemaphore has: 
;; (defn TestSemaphore
;;   {:added "1.0"
;;    :go "testSemaphore(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{13064177 0xc006143460}) t])
;; 
JOKER FUNC sync_test.TestWaitGroup has: 
;; (defn TestWaitGroup
;;   {:added "1.0"
;;    :go "testWaitGroup(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{13105164 0xc006208bc0}) t])
;; 
JOKER FUNC sync_test.TestWaitGroupAlign has: 
;; (defn TestWaitGroupAlign
;;   {:added "1.0"
;;    :go "testWaitGroupAlign(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{13108833 0xc0062161a0}) t])
;; 
JOKER FUNC sync_test.TestWaitGroupMisuse has: 
;; (defn TestWaitGroupMisuse
;;   {:added "1.0"
;;    :go "testWaitGroupMisuse(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{13105501 0xc006209100}) t])
;; 
JOKER FUNC sync_test.TestWaitGroupMisuse2 has: 
;; (defn TestWaitGroupMisuse2
;;   {:added "1.0"
;;    :go "testWaitGroupMisuse2(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{13106086 0xc006209940}) t])
;; 
JOKER FUNC sync_test.TestWaitGroupMisuse3 has: 
;; (defn TestWaitGroupMisuse3
;;   {:added "1.0"
;;    :go "testWaitGroupMisuse3(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{13107279 0xc006210b00}) t])
;; 
JOKER FUNC sync_test.TestWaitGroupRace has: 
;; (defn TestWaitGroupRace
;;   {:added "1.0"
;;    :go "testWaitGroupRace(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{13108380 0xc0062118e0}) t])
;; 
JOKER FUNC syntax.BenchmarkEmptyOpContext has: 
;; (defn BenchmarkEmptyOpContext
;;   {:added "1.0"
;;    :go "benchmarkEmptyOpContext(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{10932721 0xc0049477a0}) b])
;; 
JOKER FUNC syntax.Compile has: 
;; (defn ^[{:inst ^ABEND881(unrecognized Expr type *ast.ArrayType at: &{10937594 <nil> Inst}) Inst, :start ^Int Start, :numcap ^Int NumCap} Error] Compile
;;   "Compile compiles the regexp into a program to be executed.
;; The regexp should have been simplified already (returned from re.Simplify)."
;;   {:added "1.0"
;;    :go "compile(re)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{10856783 Regexp}) re])
;; 
JOKER FUNC syntax.EmptyOpContext has: 
;; (defn ^ABEND042(cannot find typename syntax.uint8) EmptyOpContext
;;   "EmptyOpContext returns the zero-width assertions
;; satisfied at the position between the runes r1 and r2.
;; Passing r1 == -1 indicates that the position is
;; at the beginning of the text.
;; Passing r2 == -1 indicates that the position is
;; at the end of the text."
;;   {:added "1.0"
;;    :go "emptyOpContext(r1, r2)"}
;;   [r1, r2])
;; 
JOKER FUNC syntax.IsWordChar has: 
;; (defn ^ABEND042(cannot find typename syntax.bool) IsWordChar
;;   "IsWordChar reports whether r is consider a ``word character''
;; during the evaluation of the \b and \B zero-width assertions.
;; These assertions are ASCII-only: the word characters are [A-Za-z0-9_]."
;;   {:added "1.0"
;;    :go "isWordChar(r)"}
;;   [r])
;; 
JOKER FUNC syntax.Parse has: 
;; (defn ^[{:op Op, :flags Flags, :sub ^ABEND881(unrecognized Expr type *ast.ArrayType at: &{10861630 <nil> 0xc00325fb00}) Sub, :sub0 ^ABEND881(unrecognized Expr type *ast.ArrayType at: &{10861677 0xc00325fba0 0xc00325fbe0}) Sub0, :rune ^ABEND881(unrecognized Expr type *ast.ArrayType at: &{10861723 <nil> rune}) Rune, :rune0 ^ABEND881(unrecognized Expr type *ast.ArrayType at: &{10861789 0xc00325fd00 rune}) Rune0, :min ^Int Min, :max ^Int Max, :cap ^Int Cap, :name ^String Name} Error] Parse
;;   "Parse parses a regular expression string s, controlled by the specified
;; Flags, and returns a regular expression parse tree. The syntax is
;; described in the top-level comment."
;;   {:added "1.0"
;;    :go "parse(s, flags)"}
;;   [^String s, flags])
;; 
JOKER FUNC syntax.TestAppendRangeCollapse has: 
;; (defn TestAppendRangeCollapse
;;   {:added "1.0"
;;    :go "testAppendRangeCollapse(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{10927922 0xc004771c20}) t])
;; 
JOKER FUNC syntax.TestCompile has: 
;; (defn TestCompile
;;   {:added "1.0"
;;    :go "testCompile(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{10932451 0xc0049471a0}) t])
;; 
JOKER FUNC syntax.TestFoldConstants has: 
;; (defn TestFoldConstants
;;   {:added "1.0"
;;    :go "testFoldConstants(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{10927574 0xc0047715c0}) t])
;; 
JOKER FUNC syntax.TestParseFoldCase has: 
;; (defn TestParseFoldCase
;;   {:added "1.0"
;;    :go "testParseFoldCase(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{10923550 0xc004710de0}) t])
;; 
JOKER FUNC syntax.TestParseInvalidRegexps has: 
;; (defn TestParseInvalidRegexps
;;   {:added "1.0"
;;    :go "testParseInvalidRegexps(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{10929103 0xc0047989e0}) t])
;; 
JOKER FUNC syntax.TestParseLiteral has: 
;; (defn TestParseLiteral
;;   {:added "1.0"
;;    :go "testParseLiteral(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{10923725 0xc004711000}) t])
;; 
JOKER FUNC syntax.TestParseMatchNL has: 
;; (defn TestParseMatchNL
;;   {:added "1.0"
;;    :go "testParseMatchNL(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{10923948 0xc004711360}) t])
;; 
JOKER FUNC syntax.TestParseNoMatchNL has: 
;; (defn TestParseNoMatchNL
;;   {:added "1.0"
;;    :go "testParseNoMatchNL(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{10924183 0xc0047116c0}) t])
;; 
JOKER FUNC syntax.TestParseSimple has: 
;; (defn TestParseSimple
;;   {:added "1.0"
;;    :go "testParseSimple(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{10923046 0xc004710900}) t])
;; 
JOKER FUNC syntax.TestSimplify has: 
;; (defn TestSimplify
;;   {:added "1.0"
;;    :go "testSimplify(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{10854592 0xc0028804e0}) t])
;; 
JOKER FUNC syntax.TestToStringEquivalentParse has: 
;; (defn TestToStringEquivalentParse
;;   {:added "1.0"
;;    :go "testToStringEquivalentParse(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{10930002 0xc0047999a0}) t])
;; 
JOKER FUNC syscall.Accept has: 
(defn ^[nfd sa err] Accept
  {:added "1.0"
   :go "accept(fd)"}
  [^Int fd])

JOKER FUNC syscall.Accept4 has: 
(defn ^[nfd sa err] Accept4
  {:added "1.0"
   :go "accept4(fd, flags)"}
  [^Int fd, ^Int flags])

JOKER FUNC syscall.Access has: 
(defn ^err Access
  {:added "1.0"
   :go "access(path, mode)"}
  [^String path, mode])

JOKER FUNC syscall.Acct has: 
(defn ^err Acct
  {:added "1.0"
   :go "acct(path)"}
  [^String path])

JOKER FUNC syscall.Adjtimex has: 
;; (defn ^[state err] Adjtimex
;;   {:added "1.0"
;;    :go "adjtimex(buf)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{13305977 Timex}) buf])
;; 
JOKER FUNC syscall.AttachLsf has: 
;; (defn ^Error AttachLsf
;;   "Deprecated: Use golang.org/x/net/bpf instead."
;;   {:added "1.0"
;;    :go "attachLsf(fd, i)"}
;;   [^Int fd, ^ABEND881(unrecognized Expr type *ast.ArrayType at: &{13197081 <nil> SockFilter}) i])
;; 
JOKER FUNC syscall.Bind has: 
(defn ^err Bind
  {:added "1.0"
   :go "bind(fd, sa)"}
  [^Int fd, sa])

JOKER FUNC syscall.BindToDevice has: 
(defn ^err BindToDevice
  "BindToDevice binds the socket associated with fd to device."
  {:added "1.0"
   :go "bindToDevice(fd, device)"}
  [^Int fd, ^String device])

JOKER FUNC syscall.BytePtrFromString has: 
;; (defn ^[ABEND042(cannot find typename syscall.byte) Error] BytePtrFromString
;;   "BytePtrFromString returns a pointer to a NUL-terminated array of
;; bytes containing the text of s. If s contains a NUL byte at any
;; location, it returns (nil, EINVAL)."
;;   {:added "1.0"
;;    :go "bytePtrFromString(s)"}
;;   [^String s])
;; 
JOKER FUNC syscall.ByteSliceFromString has: 
;; (defn ^[[ABEND042(cannot find typename syscall.byte)] Error] ByteSliceFromString
;;   "ByteSliceFromString returns a NUL-terminated slice of bytes
;; containing the text of s. If s contains a NUL byte at any
;; location, it returns (nil, EINVAL)."
;;   {:added "1.0"
;;    :go "byteSliceFromString(s)"}
;;   [^String s])
;; 
JOKER FUNC syscall.Chdir has: 
(defn ^err Chdir
  {:added "1.0"
   :go "chdir(path)"}
  [^String path])

JOKER FUNC syscall.Chmod has: 
(defn ^err Chmod
  {:added "1.0"
   :go "chmod(path, mode)"}
  [^String path, mode])

JOKER FUNC syscall.Chown has: 
(defn ^err Chown
  {:added "1.0"
   :go "chown(path, uid, gid)"}
  [^String path, ^Int uid, ^Int gid])

JOKER FUNC syscall.Chroot has: 
(defn ^err Chroot
  {:added "1.0"
   :go "chroot(path)"}
  [^String path])

JOKER FUNC syscall.Clearenv has: 
;; (defn Clearenv
;;   {:added "1.0"
;;    :go "clearenv()"}
;;   [])
;; 
JOKER FUNC syscall.Close has: 
(defn ^err Close
  {:added "1.0"
   :go "close(fd)"}
  [^Int fd])

JOKER FUNC syscall.CloseOnExec has: 
;; (defn CloseOnExec
;;   {:added "1.0"
;;    :go "closeOnExec(fd)"}
;;   [^Int fd])
;; 
JOKER FUNC syscall.CmsgLen has: 
(defn ^Int CmsgLen
  "CmsgLen returns the value to store in the Len field of the Cmsghdr
structure, taking into account any necessary alignment."
  {:added "1.0"
   :go "cmsgLen(datalen)"}
  [^Int datalen])

JOKER FUNC syscall.CmsgSpace has: 
(defn ^Int CmsgSpace
  "CmsgSpace returns the number of bytes an ancillary element with
payload of the passed data length occupies."
  {:added "1.0"
   :go "cmsgSpace(datalen)"}
  [^Int datalen])

JOKER FUNC syscall.Connect has: 
(defn ^err Connect
  {:added "1.0"
   :go "connect(fd, sa)"}
  [^Int fd, sa])

JOKER FUNC syscall.Creat has: 
(defn ^[fd err] Creat
  {:added "1.0"
   :go "creat(path, mode)"}
  [^String path, mode])

JOKER FUNC syscall.DetachLsf has: 
(defn ^Error DetachLsf
  "Deprecated: Use golang.org/x/net/bpf instead."
  {:added "1.0"
   :go "detachLsf(fd)"}
  [^Int fd])

JOKER FUNC syscall.Dup has: 
(defn ^[fd err] Dup
  {:added "1.0"
   :go "dup(oldfd)"}
  [^Int oldfd])

JOKER FUNC syscall.Dup2 has: 
(defn ^err Dup2
  {:added "1.0"
   :go "dup2(oldfd, newfd)"}
  [^Int oldfd, ^Int newfd])

JOKER FUNC syscall.Dup3 has: 
(defn ^err Dup3
  {:added "1.0"
   :go "dup3(oldfd, newfd, flags)"}
  [^Int oldfd, ^Int newfd, ^Int flags])

JOKER FUNC syscall.Environ has: 
(defn ^[String] Environ
  {:added "1.0"
   :go "environ()"}
  [])

JOKER FUNC syscall.EpollCreate has: 
(defn ^[fd err] EpollCreate
  {:added "1.0"
   :go "epollCreate(size)"}
  [^Int size])

JOKER FUNC syscall.EpollCreate1 has: 
(defn ^[fd err] EpollCreate1
  {:added "1.0"
   :go "epollCreate1(flag)"}
  [^Int flag])

JOKER FUNC syscall.EpollCtl has: 
;; (defn ^err EpollCtl
;;   {:added "1.0"
;;    :go "epollCtl(epfd, op, fd, event)"}
;;   [^Int epfd, ^Int op, ^Int fd, ^ABEND881(unrecognized Expr type *ast.StarExpr at: &{13308024 EpollEvent}) event])
;; 
JOKER FUNC syscall.EpollWait has: 
;; (defn ^[n err] EpollWait
;;   {:added "1.0"
;;    :go "epollWait(epfd, events, msec)"}
;;   [^Int epfd, ^ABEND881(unrecognized Expr type *ast.ArrayType at: &{13340745 <nil> EpollEvent}) events, ^Int msec])
;; 
JOKER FUNC syscall.Exec has: 
;; (defn ^err Exec
;;   "Exec invokes the execve(2) system call."
;;   {:added "1.0"
;;    :go "exec(argv0, argv, envv)"}
;;   [^String argv0, ^ABEND881(unrecognized Expr type *ast.ArrayType at: &{13429508 <nil> string}) argv, ^ABEND881(unrecognized Expr type *ast.ArrayType at: &{13429523 <nil> string}) envv])
;; 
JOKER FUNC syscall.Exit has: 
;; (defn Exit
;;   {:added "1.0"
;;    :go "exit(code)"}
;;   [^Int code])
;; 
JOKER FUNC syscall.Faccessat has: 
(defn ^err Faccessat
  {:added "1.0"
   :go "faccessat(dirfd, path, mode, flags)"}
  [^Int dirfd, ^String path, mode, ^Int flags])

JOKER FUNC syscall.Fallocate has: 
(defn ^err Fallocate
  {:added "1.0"
   :go "fallocate(fd, mode, off, len)"}
  [^Int fd, mode, off, len])

JOKER FUNC syscall.Fchdir has: 
(defn ^err Fchdir
  {:added "1.0"
   :go "fchdir(fd)"}
  [^Int fd])

JOKER FUNC syscall.Fchmod has: 
(defn ^err Fchmod
  {:added "1.0"
   :go "fchmod(fd, mode)"}
  [^Int fd, mode])

JOKER FUNC syscall.Fchmodat has: 
(defn ^err Fchmodat
  {:added "1.0"
   :go "fchmodat(dirfd, path, mode, flags)"}
  [^Int dirfd, ^String path, mode, ^Int flags])

JOKER FUNC syscall.Fchown has: 
(defn ^err Fchown
  {:added "1.0"
   :go "fchown(fd, uid, gid)"}
  [^Int fd, ^Int uid, ^Int gid])

JOKER FUNC syscall.Fchownat has: 
(defn ^err Fchownat
  {:added "1.0"
   :go "fchownat(dirfd, path, uid, gid, flags)"}
  [^Int dirfd, ^String path, ^Int uid, ^Int gid, ^Int flags])

JOKER FUNC syscall.FcntlFlock has: 
;; (defn ^Error FcntlFlock
;;   "FcntlFlock performs a fcntl syscall for the F_GETLK, F_SETLK or F_SETLKW command."
;;   {:added "1.0"
;;    :go "fcntlFlock(fd, cmd, lk)"}
;;   [fd, ^Int cmd, ^ABEND881(unrecognized Expr type *ast.StarExpr at: &{13406571 Flock_t}) lk])
;; 
JOKER FUNC syscall.Fdatasync has: 
(defn ^err Fdatasync
  {:added "1.0"
   :go "fdatasync(fd)"}
  [^Int fd])

JOKER FUNC syscall.Flock has: 
(defn ^err Flock
  {:added "1.0"
   :go "flock(fd, how)"}
  [^Int fd, ^Int how])

JOKER FUNC syscall.ForkExec has: 
;; (defn ^[pid err] ForkExec
;;   "Combination of fork and exec, careful to be thread safe."
;;   {:added "1.0"
;;    :go "forkExec(argv0, argv, attr)"}
;;   [^String argv0, ^ABEND881(unrecognized Expr type *ast.ArrayType at: &{13428842 <nil> string}) argv, ^ABEND881(unrecognized Expr type *ast.StarExpr at: &{13428857 ProcAttr}) attr])
;; 
JOKER FUNC syscall.Fstat has: 
;; (defn ^err Fstat
;;   {:added "1.0"
;;    :go "fstat(fd, stat)"}
;;   [^Int fd, ^ABEND881(unrecognized Expr type *ast.StarExpr at: &{13326508 Stat_t}) stat])
;; 
JOKER FUNC syscall.Fstatfs has: 
;; (defn ^err Fstatfs
;;   {:added "1.0"
;;    :go "fstatfs(fd, buf)"}
;;   [^Int fd, ^ABEND881(unrecognized Expr type *ast.StarExpr at: &{13326750 Statfs_t}) buf])
;; 
JOKER FUNC syscall.Fsync has: 
(defn ^err Fsync
  {:added "1.0"
   :go "fsync(fd)"}
  [^Int fd])

JOKER FUNC syscall.Ftruncate has: 
(defn ^err Ftruncate
  {:added "1.0"
   :go "ftruncate(fd, length)"}
  [^Int fd, length])

JOKER FUNC syscall.Futimes has: 
;; (defn ^err Futimes
;;   {:added "1.0"
;;    :go "futimes(fd, tv)"}
;;   [^Int fd, ^ABEND881(unrecognized Expr type *ast.ArrayType at: &{13213192 <nil> Timeval}) tv])
;; 
JOKER FUNC syscall.Futimesat has: 
;; (defn ^err Futimesat
;;   {:added "1.0"
;;    :go "futimesat(dirfd, path, tv)"}
;;   [^Int dirfd, ^String path, ^ABEND881(unrecognized Expr type *ast.ArrayType at: &{13212959 <nil> Timeval}) tv])
;; 
JOKER FUNC syscall.Getcwd has: 
;; (defn ^[n err] Getcwd
;;   {:added "1.0"
;;    :go "getcwd(buf)"}
;;   [^ABEND881(unrecognized Expr type *ast.ArrayType at: &{13303645 <nil> byte}) buf])
;; 
JOKER FUNC syscall.Getdents has: 
;; (defn ^[n err] Getdents
;;   {:added "1.0"
;;    :go "getdents(fd, buf)"}
;;   [^Int fd, ^ABEND881(unrecognized Expr type *ast.ArrayType at: &{13310318 <nil> byte}) buf])
;; 
JOKER FUNC syscall.Getegid has: 
(defn ^egid Getegid
  {:added "1.0"
   :go "getegid()"}
  [])

JOKER FUNC syscall.Getenv has: 
(defn ^[value found] Getenv
  {:added "1.0"
   :go "getenv(key)"}
  [^String key])

JOKER FUNC syscall.Geteuid has: 
(defn ^euid Geteuid
  {:added "1.0"
   :go "geteuid()"}
  [])

JOKER FUNC syscall.Getgid has: 
(defn ^gid Getgid
  {:added "1.0"
   :go "getgid()"}
  [])

JOKER FUNC syscall.Getgroups has: 
(defn ^[gids err] Getgroups
  {:added "1.0"
   :go "getgroups()"}
  [])

JOKER FUNC syscall.Getpagesize has: 
(defn ^Int Getpagesize
  {:added "1.0"
   :go "getpagesize()"}
  [])

JOKER FUNC syscall.Getpeername has: 
(defn ^[sa err] Getpeername
  {:added "1.0"
   :go "getpeername(fd)"}
  [^Int fd])

JOKER FUNC syscall.Getpgid has: 
(defn ^[pgid err] Getpgid
  {:added "1.0"
   :go "getpgid(pid)"}
  [^Int pid])

JOKER FUNC syscall.Getpgrp has: 
(defn ^pid Getpgrp
  {:added "1.0"
   :go "getpgrp()"}
  [])

JOKER FUNC syscall.Getpid has: 
(defn ^pid Getpid
  {:added "1.0"
   :go "getpid()"}
  [])

JOKER FUNC syscall.Getppid has: 
(defn ^ppid Getppid
  {:added "1.0"
   :go "getppid()"}
  [])

JOKER FUNC syscall.Getpriority has: 
(defn ^[prio err] Getpriority
  {:added "1.0"
   :go "getpriority(which, who)"}
  [^Int which, ^Int who])

JOKER FUNC syscall.Getrlimit has: 
;; (defn ^err Getrlimit
;;   {:added "1.0"
;;    :go "getrlimit(resource, rlim)"}
;;   [^Int resource, ^ABEND881(unrecognized Expr type *ast.StarExpr at: &{13327748 Rlimit}) rlim])
;; 
JOKER FUNC syscall.Getrusage has: 
;; (defn ^err Getrusage
;;   {:added "1.0"
;;    :go "getrusage(who, rusage)"}
;;   [^Int who, ^ABEND881(unrecognized Expr type *ast.StarExpr at: &{13311546 Rusage}) rusage])
;; 
JOKER FUNC syscall.Getsockname has: 
(defn ^[sa err] Getsockname
  {:added "1.0"
   :go "getsockname(fd)"}
  [^Int fd])

JOKER FUNC syscall.GetsockoptICMPv6Filter has: 
;; (defn ^[{:data ^ABEND881(unrecognized Expr type *ast.ArrayType at: &{13270859 0xc0064dea60 uint32}) Data} Error] GetsockoptICMPv6Filter
;;   {:added "1.0"
;;    :go "getsockoptICMPv6Filter(fd, level, opt)"}
;;   [^Int fd, ^Int level, ^Int opt])
;; 
JOKER FUNC syscall.GetsockoptIPMreq has: 
;; (defn ^[{:multiaddr ^ABEND881(unrecognized Expr type *ast.ArrayType at: &{13270068 0xc0064d7dc0 byte}) Multiaddr, :interface ^ABEND881(unrecognized Expr type *ast.ArrayType at: &{13270101 0xc0064d7e60 byte}) Interface} Error] GetsockoptIPMreq
;;   {:added "1.0"
;;    :go "getsockoptIPMreq(fd, level, opt)"}
;;   [^Int fd, ^Int level, ^Int opt])
;; 
JOKER FUNC syscall.GetsockoptIPMreqn has: 
;; (defn ^[{:multiaddr ^ABEND881(unrecognized Expr type *ast.ArrayType at: &{13270159 0xc0064d7f40 byte}) Multiaddr, :address ^ABEND881(unrecognized Expr type *ast.ArrayType at: &{13270192 0xc0064d7fe0 byte}) Address, :ifindex Ifindex} Error] GetsockoptIPMreqn
;;   {:added "1.0"
;;    :go "getsockoptIPMreqn(fd, level, opt)"}
;;   [^Int fd, ^Int level, ^Int opt])
;; 
JOKER FUNC syscall.GetsockoptIPv6MTUInfo has: 
(defn ^[{:addr Addr, :mtu Mtu} Error] GetsockoptIPv6MTUInfo
  {:added "1.0"
   :go "getsockoptIPv6MTUInfo(fd, level, opt)"}
  [^Int fd, ^Int level, ^Int opt])

JOKER FUNC syscall.GetsockoptIPv6Mreq has: 
;; (defn ^[{:multiaddr ^ABEND881(unrecognized Expr type *ast.ArrayType at: &{13270268 0xc0064de120 byte}) Multiaddr, :interface Interface} Error] GetsockoptIPv6Mreq
;;   {:added "1.0"
;;    :go "getsockoptIPv6Mreq(fd, level, opt)"}
;;   [^Int fd, ^Int level, ^Int opt])
;; 
JOKER FUNC syscall.GetsockoptInet4Addr has: 
(defn ^[value err] GetsockoptInet4Addr
  {:added "1.0"
   :go "getsockoptInet4Addr(fd, level, opt)"}
  [^Int fd, ^Int level, ^Int opt])

JOKER FUNC syscall.GetsockoptInt has: 
(defn ^[value err] GetsockoptInt
  {:added "1.0"
   :go "getsockoptInt(fd, level, opt)"}
  [^Int fd, ^Int level, ^Int opt])

JOKER FUNC syscall.GetsockoptUcred has: 
(defn ^[{:pid Pid, :uid Uid, :gid Gid} Error] GetsockoptUcred
  {:added "1.0"
   :go "getsockoptUcred(fd, level, opt)"}
  [^Int fd, ^Int level, ^Int opt])

JOKER FUNC syscall.Gettid has: 
(defn ^tid Gettid
  {:added "1.0"
   :go "gettid()"}
  [])

JOKER FUNC syscall.Gettimeofday has: 
;; (defn ^err Gettimeofday
;;   {:added "1.0"
;;    :go "gettimeofday(tv)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{13202402 Timeval}) tv])
;; 
JOKER FUNC syscall.Getuid has: 
(defn ^uid Getuid
  {:added "1.0"
   :go "getuid()"}
  [])

JOKER FUNC syscall.Getwd has: 
(defn ^[wd err] Getwd
  {:added "1.0"
   :go "getwd()"}
  [])

JOKER FUNC syscall.Getxattr has: 
;; (defn ^[sz err] Getxattr
;;   {:added "1.0"
;;    :go "getxattr(path, attr, dest)"}
;;   [^String path, ^String attr, ^ABEND881(unrecognized Expr type *ast.ArrayType at: &{13311985 <nil> byte}) dest])
;; 
JOKER FUNC syscall.InotifyAddWatch has: 
(defn ^[watchdesc err] InotifyAddWatch
  {:added "1.0"
   :go "inotifyAddWatch(fd, pathname, mask)"}
  [^Int fd, ^String pathname, mask])

JOKER FUNC syscall.InotifyInit has: 
(defn ^[fd err] InotifyInit
  {:added "1.0"
   :go "inotifyInit()"}
  [])

JOKER FUNC syscall.InotifyInit1 has: 
(defn ^[fd err] InotifyInit1
  {:added "1.0"
   :go "inotifyInit1(flags)"}
  [^Int flags])

JOKER FUNC syscall.InotifyRmWatch has: 
(defn ^[success err] InotifyRmWatch
  {:added "1.0"
   :go "inotifyRmWatch(fd, watchdesc)"}
  [^Int fd, watchdesc])

JOKER FUNC syscall.Ioctl has: 
(defn ^err Ioctl
  {:added "1.0"
   :go "ioctl(fd, req, arg)"}
  [fd, req, arg])

JOKER FUNC syscall.Ioperm has: 
(defn ^err Ioperm
  {:added "1.0"
   :go "ioperm(from, num, on)"}
  [^Int from, ^Int num, ^Int on])

JOKER FUNC syscall.Iopl has: 
(defn ^err Iopl
  {:added "1.0"
   :go "iopl(level)"}
  [^Int level])

JOKER FUNC syscall.Kill has: 
(defn ^err Kill
  {:added "1.0"
   :go "kill(pid, sig)"}
  [^Int pid, sig])

JOKER FUNC syscall.Klogctl has: 
;; (defn ^[n err] Klogctl
;;   {:added "1.0"
;;    :go "klogctl(typ, buf)"}
;;   [^Int typ, ^ABEND881(unrecognized Expr type *ast.ArrayType at: &{13313760 <nil> byte}) buf])
;; 
JOKER FUNC syscall.Lchown has: 
(defn ^err Lchown
  {:added "1.0"
   :go "lchown(path, uid, gid)"}
  [^String path, ^Int uid, ^Int gid])

JOKER FUNC syscall.Link has: 
(defn ^err Link
  {:added "1.0"
   :go "link(oldpath, newpath)"}
  [^String oldpath, ^String newpath])

JOKER FUNC syscall.Listen has: 
(defn ^err Listen
  {:added "1.0"
   :go "listen(s, n)"}
  [^Int s, ^Int n])

JOKER FUNC syscall.Listxattr has: 
;; (defn ^[sz err] Listxattr
;;   {:added "1.0"
;;    :go "listxattr(path, dest)"}
;;   [^String path, ^ABEND881(unrecognized Expr type *ast.ArrayType at: &{13314150 <nil> byte}) dest])
;; 
JOKER FUNC syscall.LsfJump has: 
(defn ^{:code ^Int Code, :jt Jt, :jf Jf, :k K} LsfJump
  "Deprecated: Use golang.org/x/net/bpf instead."
  {:added "1.0"
   :go "lsfJump(code, k, jt, jf)"}
  [^Int code, ^Int k, ^Int jt, ^Int jf])

JOKER FUNC syscall.LsfSocket has: 
(defn ^[Int Error] LsfSocket
  "Deprecated: Use golang.org/x/net/bpf instead."
  {:added "1.0"
   :go "lsfSocket(ifindex, proto)"}
  [^Int ifindex, ^Int proto])

JOKER FUNC syscall.LsfStmt has: 
(defn ^{:code ^Int Code, :jt Jt, :jf Jf, :k K} LsfStmt
  "Deprecated: Use golang.org/x/net/bpf instead."
  {:added "1.0"
   :go "lsfStmt(code, k)"}
  [^Int code, ^Int k])

JOKER FUNC syscall.Lstat has: 
;; (defn ^err Lstat
;;   {:added "1.0"
;;    :go "lstat(path, stat)"}
;;   [^String path, ^ABEND881(unrecognized Expr type *ast.StarExpr at: &{13329400 Stat_t}) stat])
;; 
JOKER FUNC syscall.Madvise has: 
;; (defn ^err Madvise
;;   {:added "1.0"
;;    :go "madvise(b, advice)"}
;;   [^ABEND881(unrecognized Expr type *ast.ArrayType at: &{13324241 <nil> byte}) b, ^Int advice])
;; 
JOKER FUNC syscall.Mkdir has: 
(defn ^err Mkdir
  {:added "1.0"
   :go "mkdir(path, mode)"}
  [^String path, mode])

JOKER FUNC syscall.Mkdirat has: 
(defn ^err Mkdirat
  {:added "1.0"
   :go "mkdirat(dirfd, path, mode)"}
  [^Int dirfd, ^String path, mode])

JOKER FUNC syscall.Mkfifo has: 
(defn ^err Mkfifo
  {:added "1.0"
   :go "mkfifo(path, mode)"}
  [^String path, mode])

JOKER FUNC syscall.Mknod has: 
(defn ^err Mknod
  {:added "1.0"
   :go "mknod(path, mode, dev)"}
  [^String path, mode, ^Int dev])

JOKER FUNC syscall.Mknodat has: 
(defn ^err Mknodat
  {:added "1.0"
   :go "mknodat(dirfd, path, mode, dev)"}
  [^Int dirfd, ^String path, mode, ^Int dev])

JOKER FUNC syscall.Mlock has: 
;; (defn ^err Mlock
;;   {:added "1.0"
;;    :go "mlock(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.ArrayType at: &{13324959 <nil> byte}) b])
;; 
JOKER FUNC syscall.Mlockall has: 
(defn ^err Mlockall
  {:added "1.0"
   :go "mlockall(flags)"}
  [^Int flags])

JOKER FUNC syscall.Mmap has: 
(defn ^[data err] Mmap
  {:added "1.0"
   :go "mmap(fd, offset, length, prot, flags)"}
  [^Int fd, offset, ^Int length, ^Int prot, ^Int flags])

JOKER FUNC syscall.Mount has: 
(defn ^err Mount
  {:added "1.0"
   :go "mount(source, target, fstype, flags, data)"}
  [^String source, ^String target, ^String fstype, flags, ^String data])

JOKER FUNC syscall.Mprotect has: 
;; (defn ^err Mprotect
;;   {:added "1.0"
;;    :go "mprotect(b, prot)"}
;;   [^ABEND881(unrecognized Expr type *ast.ArrayType at: &{13324603 <nil> byte}) b, ^Int prot])
;; 
JOKER FUNC syscall.Munlock has: 
;; (defn ^err Munlock
;;   {:added "1.0"
;;    :go "munlock(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.ArrayType at: &{13325292 <nil> byte}) b])
;; 
JOKER FUNC syscall.Munlockall has: 
(defn ^err Munlockall
  {:added "1.0"
   :go "munlockall()"}
  [])

JOKER FUNC syscall.Munmap has: 
;; (defn ^err Munmap
;;   {:added "1.0"
;;    :go "munmap(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.ArrayType at: &{13234465 <nil> byte}) b])
;; 
JOKER FUNC syscall.Nanosleep has: 
;; (defn ^err Nanosleep
;;   {:added "1.0"
;;    :go "nanosleep(time, leftover)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{13315369 Timespec}) time, ^ABEND881(unrecognized Expr type *ast.StarExpr at: &{13315389 Timespec}) leftover])
;; 
JOKER FUNC syscall.NetlinkRIB has: 
;; (defn ^[[ABEND042(cannot find typename syscall.byte)] Error] NetlinkRIB
;;   "NetlinkRIB returns routing information base, as known as RIB, which
;; consists of network facility information, states and parameters."
;;   {:added "1.0"
;;    :go "netlinkRIB(proto, family)"}
;;   [^Int proto, ^Int family])
;; 
JOKER FUNC syscall.NsecToTimespec has: 
(defn ^{:sec Sec, :nsec Nsec} NsecToTimespec
  "NsecToTimespec takes a number of nanoseconds since the Unix epoch
and returns the corresponding Timespec value."
  {:added "1.0"
   :go "nsecToTimespec(nsec)"}
  [nsec])

JOKER FUNC syscall.NsecToTimeval has: 
(defn ^{:sec Sec, :usec Usec} NsecToTimeval
  "NsecToTimeval takes a number of nanoseconds since the Unix epoch
and returns the corresponding Timeval value."
  {:added "1.0"
   :go "nsecToTimeval(nsec)"}
  [nsec])

JOKER FUNC syscall.Open has: 
(defn ^[fd err] Open
  {:added "1.0"
   :go "open(path, mode, perm)"}
  [^String path, ^Int mode, perm])

JOKER FUNC syscall.Openat has: 
(defn ^[fd err] Openat
  {:added "1.0"
   :go "openat(dirfd, path, flags, mode)"}
  [^Int dirfd, ^String path, ^Int flags, mode])

JOKER FUNC syscall.ParseDirent has: 
;; (defn ^[consumed count newnames] ParseDirent
;;   "ParseDirent parses up to max directory entries in buf,
;; appending the names to names. It returns the number of
;; bytes consumed from buf, the number of entries added
;; to names, and the new names slice."
;;   {:added "1.0"
;;    :go "parseDirent(buf, max, names)"}
;;   [^ABEND881(unrecognized Expr type *ast.ArrayType at: &{13206404 <nil> byte}) buf, ^Int max, ^ABEND881(unrecognized Expr type *ast.ArrayType at: &{13206427 <nil> string}) names])
;; 
JOKER FUNC syscall.ParseNetlinkMessage has: 
;; (defn ^[[{:header Header, :data ^ABEND881(unrecognized Expr type *ast.ArrayType at: &{13247505 <nil> byte}) Data}] Error] ParseNetlinkMessage
;;   "ParseNetlinkMessage parses b as an array of netlink messages and
;; returns the slice containing the NetlinkMessage structures."
;;   {:added "1.0"
;;    :go "parseNetlinkMessage(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.ArrayType at: &{13247673 <nil> byte}) b])
;; 
JOKER FUNC syscall.ParseNetlinkRouteAttr has: 
;; (defn ^[[{:attr Attr, :value ^ABEND881(unrecognized Expr type *ast.ArrayType at: &{13248372 <nil> byte}) Value}] Error] ParseNetlinkRouteAttr
;;   "ParseNetlinkRouteAttr parses m's payload as an array of netlink
;; route attributes and returns the slice containing the
;; NetlinkRouteAttr structures."
;;   {:added "1.0"
;;    :go "parseNetlinkRouteAttr(m)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{13248567 NetlinkMessage}) m])
;; 
JOKER FUNC syscall.ParseSocketControlMessage has: 
;; (defn ^[[{:header Header, :data ^ABEND881(unrecognized Expr type *ast.ArrayType at: &{13297635 <nil> byte}) Data}] Error] ParseSocketControlMessage
;;   "ParseSocketControlMessage parses b as an array of socket control
;; messages."
;;   {:added "1.0"
;;    :go "parseSocketControlMessage(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.ArrayType at: &{13297759 <nil> byte}) b])
;; 
JOKER FUNC syscall.ParseUnixCredentials has: 
;; (defn ^[{:pid Pid, :uid Uid, :gid Gid} Error] ParseUnixCredentials
;;   "ParseUnixCredentials decodes a socket control message that contains
;; credentials in a Ucred structure. To receive such a message, the
;; SO_PASSCRED option must be enabled on the socket."
;;   {:added "1.0"
;;    :go "parseUnixCredentials(m)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{13405717 SocketControlMessage}) m])
;; 
JOKER FUNC syscall.ParseUnixRights has: 
;; (defn ^[[Int] Error] ParseUnixRights
;;   "ParseUnixRights decodes a socket control message that contains an
;; integer array of open file descriptors from another process."
;;   {:added "1.0"
;;    :go "parseUnixRights(m)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{13298989 SocketControlMessage}) m])
;; 
JOKER FUNC syscall.Pause has: 
(defn ^err Pause
  {:added "1.0"
   :go "pause()"}
  [])

JOKER FUNC syscall.Pipe has: 
;; (defn ^err Pipe
;;   {:added "1.0"
;;    :go "pipe(p)"}
;;   [^ABEND881(unrecognized Expr type *ast.ArrayType at: &{13202925 <nil> int}) p])
;; 
JOKER FUNC syscall.Pipe2 has: 
;; (defn ^err Pipe2
;;   {:added "1.0"
;;    :go "pipe2(p, flags)"}
;;   [^ABEND881(unrecognized Expr type *ast.ArrayType at: &{13203132 <nil> int}) p, ^Int flags])
;; 
JOKER FUNC syscall.PivotRoot has: 
(defn ^err PivotRoot
  {:added "1.0"
   :go "pivotRoot(newroot, putold)"}
  [^String newroot, ^String putold])

JOKER FUNC syscall.Pread has: 
;; (defn ^[n err] Pread
;;   {:added "1.0"
;;    :go "pread(fd, p, offset)"}
;;   [^Int fd, ^ABEND881(unrecognized Expr type *ast.ArrayType at: &{13329735 <nil> byte}) p, offset])
;; 
JOKER FUNC syscall.PtraceAttach has: 
(defn ^err PtraceAttach
  {:added "1.0"
   :go "ptraceAttach(pid)"}
  [^Int pid])

JOKER FUNC syscall.PtraceCont has: 
(defn ^err PtraceCont
  {:added "1.0"
   :go "ptraceCont(pid, signal)"}
  [^Int pid, ^Int signal])

JOKER FUNC syscall.PtraceDetach has: 
(defn ^err PtraceDetach
  {:added "1.0"
   :go "ptraceDetach(pid)"}
  [^Int pid])

JOKER FUNC syscall.PtraceGetEventMsg has: 
(defn ^[msg err] PtraceGetEventMsg
  {:added "1.0"
   :go "ptraceGetEventMsg(pid)"}
  [^Int pid])

JOKER FUNC syscall.PtraceGetRegs has: 
;; (defn ^err PtraceGetRegs
;;   {:added "1.0"
;;    :go "ptraceGetRegs(pid, regsout)"}
;;   [^Int pid, ^ABEND881(unrecognized Expr type *ast.StarExpr at: &{13228058 PtraceRegs}) regsout])
;; 
JOKER FUNC syscall.PtracePeekData has: 
;; (defn ^[count err] PtracePeekData
;;   {:added "1.0"
;;    :go "ptracePeekData(pid, addr, out)"}
;;   [^Int pid, addr, ^ABEND881(unrecognized Expr type *ast.ArrayType at: &{13226382 <nil> byte}) out])
;; 
JOKER FUNC syscall.PtracePeekText has: 
;; (defn ^[count err] PtracePeekText
;;   {:added "1.0"
;;    :go "ptracePeekText(pid, addr, out)"}
;;   [^Int pid, addr, ^ABEND881(unrecognized Expr type *ast.ArrayType at: &{13226247 <nil> byte}) out])
;; 
JOKER FUNC syscall.PtracePokeData has: 
;; (defn ^[count err] PtracePokeData
;;   {:added "1.0"
;;    :go "ptracePokeData(pid, addr, data)"}
;;   [^Int pid, addr, ^ABEND881(unrecognized Expr type *ast.ArrayType at: &{13227916 <nil> byte}) data])
;; 
JOKER FUNC syscall.PtracePokeText has: 
;; (defn ^[count err] PtracePokeText
;;   {:added "1.0"
;;    :go "ptracePokeText(pid, addr, data)"}
;;   [^Int pid, addr, ^ABEND881(unrecognized Expr type *ast.ArrayType at: &{13227762 <nil> byte}) data])
;; 
JOKER FUNC syscall.PtraceSetOptions has: 
(defn ^err PtraceSetOptions
  {:added "1.0"
   :go "ptraceSetOptions(pid, options)"}
  [^Int pid, ^Int options])

JOKER FUNC syscall.PtraceSetRegs has: 
;; (defn ^err PtraceSetRegs
;;   {:added "1.0"
;;    :go "ptraceSetRegs(pid, regs)"}
;;   [^Int pid, ^ABEND881(unrecognized Expr type *ast.StarExpr at: &{13228194 PtraceRegs}) regs])
;; 
JOKER FUNC syscall.PtraceSingleStep has: 
(defn ^err PtraceSingleStep
  {:added "1.0"
   :go "ptraceSingleStep(pid)"}
  [^Int pid])

JOKER FUNC syscall.PtraceSyscall has: 
(defn ^err PtraceSyscall
  {:added "1.0"
   :go "ptraceSyscall(pid, signal)"}
  [^Int pid, ^Int signal])

JOKER FUNC syscall.Pwrite has: 
;; (defn ^[n err] Pwrite
;;   {:added "1.0"
;;    :go "pwrite(fd, p, offset)"}
;;   [^Int fd, ^ABEND881(unrecognized Expr type *ast.ArrayType at: &{13330146 <nil> byte}) p, offset])
;; 
JOKER FUNC syscall.RawSyscall has: 
(defn ^[r1 r2 err] RawSyscall
  {:added "1.0"
   :go "rawSyscall(trap, a1, a2, a3)"}
  [trap, a1, a2, a3])

JOKER FUNC syscall.RawSyscall6 has: 
(defn ^[r1 r2 err] RawSyscall6
  {:added "1.0"
   :go "rawSyscall6(trap, a1, a2, a3, a4, a5, a6)"}
  [trap, a1, a2, a3, a4, a5, a6])

JOKER FUNC syscall.Read has: 
;; (defn ^[n err] Read
;;   {:added "1.0"
;;    :go "read(fd, p)"}
;;   [^Int fd, ^ABEND881(unrecognized Expr type *ast.ArrayType at: &{13434072 <nil> byte}) p])
;; 
JOKER FUNC syscall.ReadDirent has: 
;; (defn ^[n err] ReadDirent
;;   {:added "1.0"
;;    :go "readDirent(fd, buf)"}
;;   [^Int fd, ^ABEND881(unrecognized Expr type *ast.ArrayType at: &{13229277 <nil> byte}) buf])
;; 
JOKER FUNC syscall.Readlink has: 
;; (defn ^[n err] Readlink
;;   {:added "1.0"
;;    :go "readlink(path, buf)"}
;;   [^String path, ^ABEND881(unrecognized Expr type *ast.ArrayType at: &{13211359 <nil> byte}) buf])
;; 
JOKER FUNC syscall.Reboot has: 
(defn ^err Reboot
  {:added "1.0"
   :go "reboot(cmd)"}
  [^Int cmd])

JOKER FUNC syscall.Recvfrom has: 
;; (defn ^[n from err] Recvfrom
;;   {:added "1.0"
;;    :go "recvfrom(fd, p, flags)"}
;;   [^Int fd, ^ABEND881(unrecognized Expr type *ast.ArrayType at: &{13435842 <nil> byte}) p, ^Int flags])
;; 
JOKER FUNC syscall.Recvmsg has: 
;; (defn ^[n oobn recvflags from err] Recvmsg
;;   {:added "1.0"
;;    :go "recvmsg(fd, p, oob, flags)"}
;;   [^Int fd, ^ABEND881(unrecognized Expr type *ast.ArrayType at: &{13222854 <nil> byte}) p, ^ABEND881(unrecognized Expr type *ast.ArrayType at: &{13222854 <nil> byte}) oob, ^Int flags])
;; 
JOKER FUNC syscall.Removexattr has: 
(defn ^err Removexattr
  {:added "1.0"
   :go "removexattr(path, attr)"}
  [^String path, ^String attr])

JOKER FUNC syscall.Rename has: 
(defn ^err Rename
  {:added "1.0"
   :go "rename(oldpath, newpath)"}
  [^String oldpath, ^String newpath])

JOKER FUNC syscall.Renameat has: 
(defn ^err Renameat
  {:added "1.0"
   :go "renameat(olddirfd, oldpath, newdirfd, newpath)"}
  [^Int olddirfd, ^String oldpath, ^Int newdirfd, ^String newpath])

JOKER FUNC syscall.Rmdir has: 
(defn ^Error Rmdir
  {:added "1.0"
   :go "rmdir(path)"}
  [^String path])

JOKER FUNC syscall.Seek has: 
(defn ^[off err] Seek
  {:added "1.0"
   :go "seek(fd, offset, whence)"}
  [^Int fd, offset, ^Int whence])

JOKER FUNC syscall.Select has: 
;; (defn ^[n err] Select
;;   {:added "1.0"
;;    :go "select(nfd, r, w, e, timeout)"}
;;   [^Int nfd, ^ABEND881(unrecognized Expr type *ast.StarExpr at: &{13330840 FdSet}) r, ^ABEND881(unrecognized Expr type *ast.StarExpr at: &{13330850 FdSet}) w, ^ABEND881(unrecognized Expr type *ast.StarExpr at: &{13330860 FdSet}) e, ^ABEND881(unrecognized Expr type *ast.StarExpr at: &{13330876 Timeval}) timeout])
;; 
JOKER FUNC syscall.Sendfile has: 
;; (defn ^[written err] Sendfile
;;   {:added "1.0"
;;    :go "sendfile(outfd, infd, offset, count)"}
;;   [^Int outfd, ^Int infd, ^ABEND881(unrecognized Expr type *ast.StarExpr at: &{13438025 int64}) offset, ^Int count])
;; 
JOKER FUNC syscall.Sendmsg has: 
;; (defn ^err Sendmsg
;;   {:added "1.0"
;;    :go "sendmsg(fd, p, oob, to, flags)"}
;;   [^Int fd, ^ABEND881(unrecognized Expr type *ast.ArrayType at: &{13223800 <nil> byte}) p, ^ABEND881(unrecognized Expr type *ast.ArrayType at: &{13223800 <nil> byte}) oob, to, ^Int flags])
;; 
JOKER FUNC syscall.SendmsgN has: 
;; (defn ^[n err] SendmsgN
;;   {:added "1.0"
;;    :go "sendmsgN(fd, p, oob, to, flags)"}
;;   [^Int fd, ^ABEND881(unrecognized Expr type *ast.ArrayType at: &{13223928 <nil> byte}) p, ^ABEND881(unrecognized Expr type *ast.ArrayType at: &{13223928 <nil> byte}) oob, to, ^Int flags])
;; 
JOKER FUNC syscall.Sendto has: 
;; (defn ^err Sendto
;;   {:added "1.0"
;;    :go "sendto(fd, p, flags, to)"}
;;   [^Int fd, ^ABEND881(unrecognized Expr type *ast.ArrayType at: &{13436138 <nil> byte}) p, ^Int flags, to])
;; 
JOKER FUNC syscall.SetLsfPromisc has: 
(defn ^Error SetLsfPromisc
  "Deprecated: Use golang.org/x/net/bpf instead."
  {:added "1.0"
   :go "setLsfPromisc(name, m)"}
  [^String name, m])

JOKER FUNC syscall.SetNonblock has: 
(defn ^err SetNonblock
  {:added "1.0"
   :go "setNonblock(fd, nonblocking)"}
  [^Int fd, nonblocking])

JOKER FUNC syscall.Setdomainname has: 
;; (defn ^err Setdomainname
;;   {:added "1.0"
;;    :go "setdomainname(p)"}
;;   [^ABEND881(unrecognized Expr type *ast.ArrayType at: &{13317928 <nil> byte}) p])
;; 
JOKER FUNC syscall.Setenv has: 
(defn ^Error Setenv
  {:added "1.0"
   :go "setenv(key, value)"}
  [^String key, ^String value])

JOKER FUNC syscall.Setfsgid has: 
(defn ^err Setfsgid
  {:added "1.0"
   :go "setfsgid(gid)"}
  [^Int gid])

JOKER FUNC syscall.Setfsuid has: 
(defn ^err Setfsuid
  {:added "1.0"
   :go "setfsuid(uid)"}
  [^Int uid])

JOKER FUNC syscall.Setgid has: 
(defn ^err Setgid
  {:added "1.0"
   :go "setgid(gid)"}
  [^Int gid])

JOKER FUNC syscall.Setgroups has: 
;; (defn ^err Setgroups
;;   {:added "1.0"
;;    :go "setgroups(gids)"}
;;   [^ABEND881(unrecognized Expr type *ast.ArrayType at: &{13214178 <nil> int}) gids])
;; 
JOKER FUNC syscall.Sethostname has: 
;; (defn ^err Sethostname
;;   {:added "1.0"
;;    :go "sethostname(p)"}
;;   [^ABEND881(unrecognized Expr type *ast.ArrayType at: &{13318273 <nil> byte}) p])
;; 
JOKER FUNC syscall.Setpgid has: 
(defn ^err Setpgid
  {:added "1.0"
   :go "setpgid(pid, pgid)"}
  [^Int pid, ^Int pgid])

JOKER FUNC syscall.Setpriority has: 
(defn ^err Setpriority
  {:added "1.0"
   :go "setpriority(which, who, prio)"}
  [^Int which, ^Int who, ^Int prio])

JOKER FUNC syscall.Setregid has: 
(defn ^err Setregid
  {:added "1.0"
   :go "setregid(rgid, egid)"}
  [^Int rgid, ^Int egid])

JOKER FUNC syscall.Setresgid has: 
(defn ^err Setresgid
  {:added "1.0"
   :go "setresgid(rgid, egid, sgid)"}
  [^Int rgid, ^Int egid, ^Int sgid])

JOKER FUNC syscall.Setresuid has: 
(defn ^err Setresuid
  {:added "1.0"
   :go "setresuid(ruid, euid, suid)"}
  [^Int ruid, ^Int euid, ^Int suid])

JOKER FUNC syscall.Setreuid has: 
(defn ^err Setreuid
  {:added "1.0"
   :go "setreuid(ruid, euid)"}
  [^Int ruid, ^Int euid])

JOKER FUNC syscall.Setrlimit has: 
;; (defn ^err Setrlimit
;;   {:added "1.0"
;;    :go "setrlimit(resource, rlim)"}
;;   [^Int resource, ^ABEND881(unrecognized Expr type *ast.StarExpr at: &{13332748 Rlimit}) rlim])
;; 
JOKER FUNC syscall.Setsid has: 
(defn ^[pid err] Setsid
  {:added "1.0"
   :go "setsid()"}
  [])

JOKER FUNC syscall.SetsockoptByte has: 
(defn ^err SetsockoptByte
  {:added "1.0"
   :go "setsockoptByte(fd, level, opt, value)"}
  [^Int fd, ^Int level, ^Int opt, value])

JOKER FUNC syscall.SetsockoptICMPv6Filter has: 
;; (defn ^Error SetsockoptICMPv6Filter
;;   {:added "1.0"
;;    :go "setsockoptICMPv6Filter(fd, level, opt, filter)"}
;;   [^Int fd, ^Int level, ^Int opt, ^ABEND881(unrecognized Expr type *ast.StarExpr at: &{13437056 ICMPv6Filter}) filter])
;; 
JOKER FUNC syscall.SetsockoptIPMreq has: 
;; (defn ^err SetsockoptIPMreq
;;   {:added "1.0"
;;    :go "setsockoptIPMreq(fd, level, opt, mreq)"}
;;   [^Int fd, ^Int level, ^Int opt, ^ABEND881(unrecognized Expr type *ast.StarExpr at: &{13436754 IPMreq}) mreq])
;; 
JOKER FUNC syscall.SetsockoptIPMreqn has: 
;; (defn ^err SetsockoptIPMreqn
;;   {:added "1.0"
;;    :go "setsockoptIPMreqn(fd, level, opt, mreq)"}
;;   [^Int fd, ^Int level, ^Int opt, ^ABEND881(unrecognized Expr type *ast.StarExpr at: &{13222720 IPMreqn}) mreq])
;; 
JOKER FUNC syscall.SetsockoptIPv6Mreq has: 
;; (defn ^err SetsockoptIPv6Mreq
;;   {:added "1.0"
;;    :go "setsockoptIPv6Mreq(fd, level, opt, mreq)"}
;;   [^Int fd, ^Int level, ^Int opt, ^ABEND881(unrecognized Expr type *ast.StarExpr at: &{13436900 IPv6Mreq}) mreq])
;; 
JOKER FUNC syscall.SetsockoptInet4Addr has: 
;; (defn ^err SetsockoptInet4Addr
;;   {:added "1.0"
;;    :go "setsockoptInet4Addr(fd, level, opt, value)"}
;;   [^Int fd, ^Int level, ^Int opt, ^ABEND881(unrecognized Expr type *ast.ArrayType at: &{13436616 0xc0067e9200 byte}) value])
;; 
JOKER FUNC syscall.SetsockoptInt has: 
(defn ^err SetsockoptInt
  {:added "1.0"
   :go "setsockoptInt(fd, level, opt, value)"}
  [^Int fd, ^Int level, ^Int opt, ^Int value])

JOKER FUNC syscall.SetsockoptLinger has: 
;; (defn ^err SetsockoptLinger
;;   {:added "1.0"
;;    :go "setsockoptLinger(fd, level, opt, l)"}
;;   [^Int fd, ^Int level, ^Int opt, ^ABEND881(unrecognized Expr type *ast.StarExpr at: &{13437205 Linger}) l])
;; 
JOKER FUNC syscall.SetsockoptString has: 
(defn ^err SetsockoptString
  {:added "1.0"
   :go "setsockoptString(fd, level, opt, s)"}
  [^Int fd, ^Int level, ^Int opt, ^String s])

JOKER FUNC syscall.SetsockoptTimeval has: 
;; (defn ^err SetsockoptTimeval
;;   {:added "1.0"
;;    :go "setsockoptTimeval(fd, level, opt, tv)"}
;;   [^Int fd, ^Int level, ^Int opt, ^ABEND881(unrecognized Expr type *ast.StarExpr at: &{13437497 Timeval}) tv])
;; 
JOKER FUNC syscall.Settimeofday has: 
;; (defn ^err Settimeofday
;;   {:added "1.0"
;;    :go "settimeofday(tv)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{13319061 Timeval}) tv])
;; 
JOKER FUNC syscall.Setuid has: 
(defn ^err Setuid
  {:added "1.0"
   :go "setuid(uid)"}
  [^Int uid])

JOKER FUNC syscall.Setxattr has: 
;; (defn ^err Setxattr
;;   {:added "1.0"
;;    :go "setxattr(path, attr, data, flags)"}
;;   [^String path, ^String attr, ^ABEND881(unrecognized Expr type *ast.ArrayType at: &{13319581 <nil> byte}) data, ^Int flags])
;; 
JOKER FUNC syscall.Shutdown has: 
(defn ^err Shutdown
  {:added "1.0"
   :go "shutdown(fd, how)"}
  [^Int fd, ^Int how])

JOKER FUNC syscall.SlicePtrFromStrings has: 
;; (defn ^[[ABEND042(cannot find typename syscall.byte)] Error] SlicePtrFromStrings
;;   "SlicePtrFromStrings converts a slice of strings to a slice of
;; pointers to NUL-terminated byte arrays. If any string contains
;; a NUL byte, it returns (nil, EINVAL)."
;;   {:added "1.0"
;;    :go "slicePtrFromStrings(ss)"}
;;   [^ABEND881(unrecognized Expr type *ast.ArrayType at: &{13425579 <nil> string}) ss])
;; 
JOKER FUNC syscall.Socket has: 
(defn ^[fd err] Socket
  {:added "1.0"
   :go "socket(domain, typ, proto)"}
  [^Int domain, ^Int typ, ^Int proto])

JOKER FUNC syscall.Socketpair has: 
(defn ^[fd err] Socketpair
  {:added "1.0"
   :go "socketpair(domain, typ, proto)"}
  [^Int domain, ^Int typ, ^Int proto])

JOKER FUNC syscall.Splice has: 
;; (defn ^[n err] Splice
;;   {:added "1.0"
;;    :go "splice(rfd, roff, wfd, woff, len, flags)"}
;;   [^Int rfd, ^ABEND881(unrecognized Expr type *ast.StarExpr at: &{13333463 int64}) roff, ^Int wfd, ^ABEND881(unrecognized Expr type *ast.StarExpr at: &{13333485 int64}) woff, ^Int len, ^Int flags])
;; 
JOKER FUNC syscall.StartProcess has: 
;; (defn ^[pid handle err] StartProcess
;;   "StartProcess wraps ForkExec for package os."
;;   {:added "1.0"
;;    :go "startProcess(argv0, argv, attr)"}
;;   [^String argv0, ^ABEND881(unrecognized Expr type *ast.ArrayType at: &{13429014 <nil> string}) argv, ^ABEND881(unrecognized Expr type *ast.StarExpr at: &{13429029 ProcAttr}) attr])
;; 
JOKER FUNC syscall.Stat has: 
;; (defn ^err Stat
;;   {:added "1.0"
;;    :go "stat(path, stat)"}
;;   [^String path, ^ABEND881(unrecognized Expr type *ast.StarExpr at: &{13202255 Stat_t}) stat])
;; 
JOKER FUNC syscall.Statfs has: 
;; (defn ^err Statfs
;;   {:added "1.0"
;;    :go "statfs(path, buf)"}
;;   [^String path, ^ABEND881(unrecognized Expr type *ast.StarExpr at: &{13333850 Statfs_t}) buf])
;; 
JOKER FUNC syscall.StringBytePtr has: 
;; (defn ^ABEND042(cannot find typename syscall.byte) StringBytePtr
;;   "StringBytePtr returns a pointer to a NUL-terminated array of bytes.
;; If s contains a NUL byte this function panics instead of returning
;; an error.
;; 
;; Deprecated: Use BytePtrFromString instead."
;;   {:added "1.0"
;;    :go "stringBytePtr(s)"}
;;   [^String s])
;; 
JOKER FUNC syscall.StringByteSlice has: 
;; (defn ^[ABEND042(cannot find typename syscall.byte)] StringByteSlice
;;   "StringByteSlice converts a string to a NUL-terminated []byte,
;; If s contains a NUL byte this function panics instead of
;; returning an error.
;; 
;; Deprecated: Use ByteSliceFromString instead."
;;   {:added "1.0"
;;    :go "stringByteSlice(s)"}
;;   [^String s])
;; 
JOKER FUNC syscall.StringSlicePtr has: 
;; (defn ^[ABEND042(cannot find typename syscall.byte)] StringSlicePtr
;;   "StringSlicePtr converts a slice of strings to a slice of pointers
;; to NUL-terminated byte arrays. If any string contains a NUL byte
;; this function panics instead of returning an error.
;; 
;; Deprecated: Use SlicePtrFromStrings instead."
;;   {:added "1.0"
;;    :go "stringSlicePtr(ss)"}
;;   [^ABEND881(unrecognized Expr type *ast.ArrayType at: &{13425228 <nil> string}) ss])
;; 
JOKER FUNC syscall.Symlink has: 
(defn ^err Symlink
  {:added "1.0"
   :go "symlink(oldpath, newpath)"}
  [^String oldpath, ^String newpath])

JOKER FUNC syscall.Sync has: 
;; (defn Sync
;;   {:added "1.0"
;;    :go "sync()"}
;;   [])
;; 
JOKER FUNC syscall.SyncFileRange has: 
(defn ^err SyncFileRange
  {:added "1.0"
   :go "syncFileRange(fd, off, n, flags)"}
  [^Int fd, off, n, ^Int flags])

JOKER FUNC syscall.Syscall has: 
(defn ^[r1 r2 err] Syscall
  {:added "1.0"
   :go "syscall(trap, a1, a2, a3)"}
  [trap, a1, a2, a3])

JOKER FUNC syscall.Syscall6 has: 
(defn ^[r1 r2 err] Syscall6
  {:added "1.0"
   :go "syscall6(trap, a1, a2, a3, a4, a5, a6)"}
  [trap, a1, a2, a3, a4, a5, a6])

JOKER FUNC syscall.Sysinfo has: 
;; (defn ^err Sysinfo
;;   {:added "1.0"
;;    :go "sysinfo(info)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{13320296 Sysinfo_t}) info])
;; 
JOKER FUNC syscall.Tee has: 
(defn ^[n err] Tee
  {:added "1.0"
   :go "tee(rfd, wfd, len, flags)"}
  [^Int rfd, ^Int wfd, ^Int len, ^Int flags])

JOKER FUNC syscall.Tgkill has: 
(defn ^err Tgkill
  {:added "1.0"
   :go "tgkill(tgid, tid, sig)"}
  [^Int tgid, ^Int tid, sig])

JOKER FUNC syscall.Time has: 
;; (defn ^[tt err] Time
;;   {:added "1.0"
;;    :go "time(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{13202515 Time_t}) t])
;; 
JOKER FUNC syscall.Times has: 
;; (defn ^[ticks err] Times
;;   {:added "1.0"
;;    :go "times(tms)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{13321073 Tms}) tms])
;; 
JOKER FUNC syscall.TimespecToNsec has: 
;; (defn ^ABEND042(cannot find typename syscall.int64) TimespecToNsec
;;   "TimespecToNsec converts a Timespec value into a number of
;; nanoseconds since the Unix epoch."
;;   {:added "1.0"
;;    :go "timespecToNsec(ts)"}
;;   [ts])
;; 
JOKER FUNC syscall.TimevalToNsec has: 
;; (defn ^ABEND042(cannot find typename syscall.int64) TimevalToNsec
;;   "TimevalToNsec converts a Timeval value into a number of nanoseconds
;; since the Unix epoch."
;;   {:added "1.0"
;;    :go "timevalToNsec(tv)"}
;;   [tv])
;; 
JOKER FUNC syscall.Truncate has: 
(defn ^err Truncate
  {:added "1.0"
   :go "truncate(path, length)"}
  [^String path, length])

JOKER FUNC syscall.Umask has: 
(defn ^oldmask Umask
  {:added "1.0"
   :go "umask(mask)"}
  [^Int mask])

JOKER FUNC syscall.Uname has: 
;; (defn ^err Uname
;;   {:added "1.0"
;;    :go "uname(buf)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{13321524 Utsname}) buf])
;; 
JOKER FUNC syscall.UnixCredentials has: 
;; (defn ^[ABEND042(cannot find typename syscall.byte)] UnixCredentials
;;   "UnixCredentials encodes credentials into a socket control message
;; for sending to another process. This can be used for
;; authentication."
;;   {:added "1.0"
;;    :go "unixCredentials(ucred)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{13405269 Ucred}) ucred])
;; 
JOKER FUNC syscall.UnixRights has: 
;; (defn ^[ABEND042(cannot find typename syscall.byte)] UnixRights
;;   "UnixRights encodes a set of open file descriptors into a socket
;; control message for sending to another process."
;;   {:added "1.0"
;;    :go "unixRights(fds)"}
;;   [^ABEND881(unrecognized Expr type *ast.Ellipsis at: &{13298505 int}) fds])
;; 
JOKER FUNC syscall.Unlink has: 
(defn ^Error Unlink
  {:added "1.0"
   :go "unlink(path)"}
  [^String path])

JOKER FUNC syscall.Unlinkat has: 
(defn ^Error Unlinkat
  {:added "1.0"
   :go "unlinkat(dirfd, path)"}
  [^Int dirfd, ^String path])

JOKER FUNC syscall.Unmount has: 
(defn ^err Unmount
  {:added "1.0"
   :go "unmount(target, flags)"}
  [^String target, ^Int flags])

JOKER FUNC syscall.Unsetenv has: 
(defn ^Error Unsetenv
  {:added "1.0"
   :go "unsetenv(key)"}
  [^String key])

JOKER FUNC syscall.Unshare has: 
(defn ^err Unshare
  {:added "1.0"
   :go "unshare(flags)"}
  [^Int flags])

JOKER FUNC syscall.Ustat has: 
;; (defn ^err Ustat
;;   {:added "1.0"
;;    :go "ustat(dev, ubuf)"}
;;   [^Int dev, ^ABEND881(unrecognized Expr type *ast.StarExpr at: &{13322301 Ustat_t}) ubuf])
;; 
JOKER FUNC syscall.Utime has: 
;; (defn ^err Utime
;;   {:added "1.0"
;;    :go "utime(path, buf)"}
;;   [^String path, ^ABEND881(unrecognized Expr type *ast.StarExpr at: &{13322548 Utimbuf}) buf])
;; 
JOKER FUNC syscall.Utimes has: 
;; (defn ^err Utimes
;;   {:added "1.0"
;;    :go "utimes(path, tv)"}
;;   [^String path, ^ABEND881(unrecognized Expr type *ast.ArrayType at: &{13212122 <nil> Timeval}) tv])
;; 
JOKER FUNC syscall.UtimesNano has: 
;; (defn ^err UtimesNano
;;   {:added "1.0"
;;    :go "utimesNano(path, ts)"}
;;   [^String path, ^ABEND881(unrecognized Expr type *ast.ArrayType at: &{13212363 <nil> Timespec}) ts])
;; 
JOKER FUNC syscall.Wait4 has: 
;; (defn ^[wpid err] Wait4
;;   {:added "1.0"
;;    :go "wait4(pid, wstatus, options, rusage)"}
;;   [^Int pid, ^ABEND881(unrecognized Expr type *ast.StarExpr at: &{13215796 WaitStatus}) wstatus, ^Int options, ^ABEND881(unrecognized Expr type *ast.StarExpr at: &{13215829 Rusage}) rusage])
;; 
JOKER FUNC syscall.Write has: 
;; (defn ^[n err] Write
;;   {:added "1.0"
;;    :go "write(fd, p)"}
;;   [^Int fd, ^ABEND881(unrecognized Expr type *ast.ArrayType at: &{13434370 <nil> byte}) p])
;; 
JOKER FUNC syscall_test.TestAmbientCaps has: 
;; (defn TestAmbientCaps
;;   {:added "1.0"
;;    :go "testAmbientCaps(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{13264779 0xc0064c2b00}) t])
;; 
JOKER FUNC syscall_test.TestAmbientCapsHelper has: 
;; (defn TestAmbientCapsHelper
;;   "TestAmbientCapsHelper isn't a real test. It's used as a helper process for
;; TestAmbientCaps."
;;   {:added "1.0"
;;    :go "testAmbientCapsHelper()"}
;;   [])
;; 
JOKER FUNC syscall_test.TestCloneNEWUSERAndRemapNoRootDisableSetgroups has: 
;; (defn TestCloneNEWUSERAndRemapNoRootDisableSetgroups
;;   {:added "1.0"
;;    :go "testCloneNEWUSERAndRemapNoRootDisableSetgroups(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{13253526 0xc0064a2ee0}) t])
;; 
JOKER FUNC syscall_test.TestCloneNEWUSERAndRemapNoRootSetgroupsEnableSetgroups has: 
;; (defn TestCloneNEWUSERAndRemapNoRootSetgroupsEnableSetgroups
;;   {:added "1.0"
;;    :go "testCloneNEWUSERAndRemapNoRootSetgroupsEnableSetgroups(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{13253734 0xc0064a3220}) t])
;; 
JOKER FUNC syscall_test.TestCloneNEWUSERAndRemapRootDisableSetgroups has: 
;; (defn TestCloneNEWUSERAndRemapRootDisableSetgroups
;;   {:added "1.0"
;;    :go "testCloneNEWUSERAndRemapRootDisableSetgroups(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{13253196 0xc0064a2960}) t])
;; 
JOKER FUNC syscall_test.TestCloneNEWUSERAndRemapRootEnableSetgroups has: 
;; (defn TestCloneNEWUSERAndRemapRootEnableSetgroups
;;   {:added "1.0"
;;    :go "testCloneNEWUSERAndRemapRootEnableSetgroups(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{13253360 0xc0064a2c20}) t])
;; 
JOKER FUNC syscall_test.TestEmptyCredGroupsDisableSetgroups has: 
;; (defn TestEmptyCredGroupsDisableSetgroups
;;   {:added "1.0"
;;    :go "testEmptyCredGroupsDisableSetgroups(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{13254131 0xc0064a37e0}) t])
;; 
JOKER FUNC syscall_test.TestEnv has: 
;; (defn TestEnv
;;   {:added "1.0"
;;    :go "testEnv(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{13342470 0xc00668eba0}) t])
;; 
JOKER FUNC syscall_test.TestExecErrPermutedFds has: 
;; (defn TestExecErrPermutedFds
;;   "Check that permuting child process fds doesn't interfere with
;; reporting of fork/exec status. See Issue 14979."
;;   {:added "1.0"
;;    :go "testExecErrPermutedFds(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{13343010 0xc00668f400}) t])
;; 
JOKER FUNC syscall_test.TestFaccessat has: 
;; (defn TestFaccessat
;;   {:added "1.0"
;;    :go "testFaccessat(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{13186022 0xc00638fda0}) t])
;; 
JOKER FUNC syscall_test.TestFchmodat has: 
;; (defn TestFchmodat
;;   {:added "1.0"
;;    :go "testFchmodat(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{13187440 0xc00639f1c0}) t])
;; 
JOKER FUNC syscall_test.TestFcntlFlock has: 
;; (defn TestFcntlFlock
;;   "TestFcntlFlock tests whether the file locking structure matches
;; the calling convention of each kernel.
;; On some Linux systems, glibc uses another set of values for the
;; commands and translates them to the correct value that the kernel
;; expects just before the actual fcntl syscall. As Go uses raw
;; syscalls directly, it must use the real value, not the glibc value.
;; Thus this test also verifies that the Flock_t structure can be
;; roundtripped with F_SETLK and F_GETLK."
;;   {:added "1.0"
;;    :go "testFcntlFlock(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{13236622 0xc00645fd00}) t])
;; 
JOKER FUNC syscall_test.TestForeground has: 
;; (defn TestForeground
;;   {:added "1.0"
;;    :go "testForeground(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{13284869 0xc00652ace0}) t])
;; 
JOKER FUNC syscall_test.TestGettimeofday has: 
;; (defn TestGettimeofday
;;   {:added "1.0"
;;    :go "testGettimeofday(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{13343288 0xc00668fa20}) t])
;; 
JOKER FUNC syscall_test.TestGroupCleanup has: 
;; (defn TestGroupCleanup
;;   {:added "1.0"
;;    :go "testGroupCleanup(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{13256359 0xc0064ad700}) t])
;; 
JOKER FUNC syscall_test.TestGroupCleanupUserNamespace has: 
;; (defn TestGroupCleanupUserNamespace
;;   {:added "1.0"
;;    :go "testGroupCleanupUserNamespace(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{13257120 0xc0064b0100}) t])
;; 
JOKER FUNC syscall_test.TestItoa has: 
;; (defn TestItoa
;;   {:added "1.0"
;;    :go "testItoa(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{13342625 0xc00668ee20}) t])
;; 
JOKER FUNC syscall_test.TestLinuxDeathSignal has: 
;; (defn TestLinuxDeathSignal
;;   {:added "1.0"
;;    :go "testLinuxDeathSignal(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{13188311 0xc0063a0000}) t])
;; 
JOKER FUNC syscall_test.TestMain has: 
;; (defn TestMain
;;   {:added "1.0"
;;    :go "testMain(m)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{13188034 0xc00639fc00}) m])
;; 
JOKER FUNC syscall_test.TestMmap has: 
;; (defn TestMmap
;;   {:added "1.0"
;;    :go "testMmap(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{13195149 0xc0063b4780}) t])
;; 
JOKER FUNC syscall_test.TestParseNetlinkMessage has: 
;; (defn TestParseNetlinkMessage
;;   {:added "1.0"
;;    :go "testParseNetlinkMessage(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{13191021 0xc0063ab260}) t])
;; 
JOKER FUNC syscall_test.TestPassFD has: 
;; (defn TestPassFD
;;   "TestPassFD tests passing a file descriptor over a Unix socket.
;; 
;; This test involved both a parent and child process. The parent
;; process is invoked as a normal test, with "go test", which then
;; runs the child process by running the current test binary with args
;; "-test.run=^TestPassFD$" and an environment variable used to signal
;; that the test should become the child process instead."
;;   {:added "1.0"
;;    :go "testPassFD(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{13238854 0xc00646a140}) t])
;; 
JOKER FUNC syscall_test.TestPgid has: 
;; (defn TestPgid
;;   {:added "1.0"
;;    :go "testPgid(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{13283811 0xc006525e80}) t])
;; 
JOKER FUNC syscall_test.TestRlimit has: 
;; (defn TestRlimit
;;   {:added "1.0"
;;    :go "testRlimit(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{13243323 0xc00647ce80}) t])
;; 
JOKER FUNC syscall_test.TestSCMCredentials has: 
;; (defn TestSCMCredentials
;;   "TestSCMCredentials tests the sending and receiving of credentials
;; (PID, UID, GID) in an ancillary message between two UNIX
;; sockets. The SO_PASSCRED socket option is enabled on the sending
;; socket for this to work."
;;   {:added "1.0"
;;    :go "testSCMCredentials(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{13438710 0xc006535d80}) t])
;; 
JOKER FUNC syscall_test.TestSeekFailure has: 
;; (defn TestSeekFailure
;;   {:added "1.0"
;;    :go "testSeekFailure(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{13244380 0xc00647df80}) t])
;; 
JOKER FUNC syscall_test.TestSetpgid has: 
;; (defn TestSetpgid
;;   {:added "1.0"
;;    :go "testSetpgid(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{13283359 0xc006525780}) t])
;; 
JOKER FUNC syscall_test.TestSyscallNoError has: 
;; (defn TestSyscallNoError
;;   {:added "1.0"
;;    :go "testSyscallNoError(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{13192481 0xc0063adec0}) t])
;; 
JOKER FUNC syscall_test.TestUnixRightsRoundtrip has: 
;; (defn TestUnixRightsRoundtrip
;;   "TestUnixRightsRoundtrip tests that UnixRights, ParseSocketControlMessage,
;; and ParseUnixRights are able to successfully round-trip lists of file descriptors."
;;   {:added "1.0"
;;    :go "testUnixRightsRoundtrip(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{13242274 0xc006471be0}) t])
;; 
JOKER FUNC syscall_test.TestUnshare has: 
;; (defn TestUnshare
;;   {:added "1.0"
;;    :go "testUnshare(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{13254326 0xc0064a3ca0}) t])
;; 
JOKER FUNC syscall_test.TestUnshareMountNameSpace has: 
;; (defn TestUnshareMountNameSpace
;;   "Test for Issue 38471: unshare fails because systemd has forced / to be shared"
;;   {:added "1.0"
;;    :go "testUnshareMountNameSpace(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{13258942 0xc0064b17a0}) t])
;; 
JOKER FUNC syscall_test.TestUnshareMountNameSpaceChroot has: 
;; (defn TestUnshareMountNameSpaceChroot
;;   "Test for Issue 20103: unshare fails when chroot is used"
;;   {:added "1.0"
;;    :go "testUnshareMountNameSpaceChroot(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{13260797 0xc0064b2d00}) t])
;; 
JOKER FUNC syscall_test.TestUnshareMountNameSpaceHelper has: 
;; (defn TestUnshareMountNameSpaceHelper
;;   "TestUnshareHelperProcess isn't a real test. It's used as a helper process
;; for TestUnshareMountNameSpace."
;;   {:added "1.0"
;;    :go "testUnshareMountNameSpaceHelper()"}
;;   [])
;; 
JOKER FUNC syscall_test.TestZeroSysProcAttr has: 
;; (defn TestZeroSysProcAttr
;;   {:added "1.0"
;;    :go "testZeroSysProcAttr(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{13283062 0xc0065252a0}) t])
;; 
JOKER FUNC syscall_test._ has: 
;; (defn _
;;   "Tests that below functions, structures and constants are consistent
;; on all Unix-like systems."
;;   {:added "1.0"
;;    :go "_()"}
;;   [])
;; 
JOKER FUNC syslog.Dial has: 
;; (defn ^[{:priority priority, :tag ^String tag, :hostname ^String hostname, :network ^String network, :raddr ^String raddr, :mu ^ABEND881(unrecognized Expr type *ast.SelectorExpr at: &{sync Mutex}) mu, :conn conn} Error] Dial
;;   "Dial establishes a connection to a log daemon by connecting to
;; address raddr on the specified network. Each write to the returned
;; writer sends a log message with the facility and severity
;; (from priority) and tag. If tag is empty, the os.Args[0] is used.
;; If network is empty, Dial will connect to the local syslog server.
;; Otherwise, see the documentation for net.Dial for valid values
;; of network and raddr."
;;   {:added "1.0"
;;    :go "dial(network, raddr, priority, tag)"}
;;   [^String network, ^String raddr, priority, ^String tag])
;; 
JOKER FUNC syslog.New has: 
;; (defn ^[{:priority priority, :tag ^String tag, :hostname ^String hostname, :network ^String network, :raddr ^String raddr, :mu ^ABEND881(unrecognized Expr type *ast.SelectorExpr at: &{sync Mutex}) mu, :conn conn} Error] New
;;   "New establishes a new connection to the system log daemon. Each
;; write to the returned writer sends a log message with the given
;; priority (a combination of the syslog facility and severity) and
;; prefix tag. If tag is empty, the os.Args[0] is used."
;;   {:added "1.0"
;;    :go "new(priority, tag)"}
;;   [priority, ^String tag])
;; 
JOKER FUNC syslog.NewLogger has: 
;; (defn ^[ABEND881(unrecognized Expr type *ast.SelectorExpr at: &{log Logger}) Error] NewLogger
;;   "NewLogger creates a log.Logger whose output is written to the
;; system log service with the specified priority, a combination of
;; the syslog facility and severity. The logFlag argument is the flag
;; set passed through to log.New to create the Logger."
;;   {:added "1.0"
;;    :go "newLogger(p, logFlag)"}
;;   [p, ^Int logFlag])
;; 
JOKER FUNC syslog.TestConcurrentReconnect has: 
;; (defn TestConcurrentReconnect
;;   {:added "1.0"
;;    :go "testConcurrentReconnect(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{6436838 0xc001850aa0}) t])
;; 
JOKER FUNC syslog.TestConcurrentWrite has: 
;; (defn TestConcurrentWrite
;;   {:added "1.0"
;;    :go "testConcurrentWrite(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{6436339 0xc001850060}) t])
;; 
JOKER FUNC syslog.TestDial has: 
;; (defn TestDial
;;   {:added "1.0"
;;    :go "testDial(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{6433967 0xc0028e57c0}) t])
;; 
JOKER FUNC syslog.TestFlap has: 
;; (defn TestFlap
;;   {:added "1.0"
;;    :go "testFlap(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{6432403 0xc0028e1c40}) t])
;; 
JOKER FUNC syslog.TestNew has: 
;; (defn TestNew
;;   {:added "1.0"
;;    :go "testNew(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{6433205 0xc0028e4c40}) t])
;; 
JOKER FUNC syslog.TestNewLogger has: 
;; (defn TestNewLogger
;;   {:added "1.0"
;;    :go "testNewLogger(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{6433688 0xc0028e5300}) t])
;; 
JOKER FUNC syslog.TestWithSimulated has: 
;; (defn TestWithSimulated
;;   {:added "1.0"
;;    :go "testWithSimulated(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{6431722 0xc0028e0f40}) t])
;; 
JOKER FUNC syslog.TestWrite has: 
;; (defn TestWrite
;;   {:added "1.0"
;;    :go "testWrite(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{6435022 0xc0028eaa20}) t])
;; 
JOKER FUNC syslog_test.ExampleDial has: 
;; (defn ExampleDial
;;   {:added "1.0"
;;    :go "exampleDial()"}
;;   [])
;; 
JOKER FUNC tabwriter.NewWriter has: 
;; (defn ^{:output ^ABEND881(unrecognized Expr type *ast.SelectorExpr at: &{io Writer}) output, :minwidth ^Int minwidth, :tabwidth ^Int tabwidth, :padding ^Int padding, :padbytes ^ABEND881(unrecognized Expr type *ast.ArrayType at: &{13625194 0xc0030cbba0 byte}) padbytes, :flags ^Int flags, :buf ^ABEND881(unrecognized Expr type *ast.ArrayType at: &{13625245 <nil> byte}) buf, :pos ^Int pos, :cell cell, :endchar endChar, :lines ^ABEND881(unrecognized Expr type *ast.ArrayType at: &{13625628 <nil> 0xc0046c4db0}) lines, :widths ^ABEND881(unrecognized Expr type *ast.ArrayType at: &{13625693 <nil> int}) widths} NewWriter
;;   "NewWriter allocates and initializes a new tabwriter.Writer.
;; The parameters are the same as for the Init function."
;;   {:added "1.0"
;;    :go "newWriter(output, minwidth, tabwidth, padding, padchar, flags)"}
;;   [^ABEND881(unrecognized Expr type *ast.SelectorExpr at: &{io Writer}) output, ^Int minwidth, ^Int tabwidth, ^Int padding, padchar, ^Int flags])
;; 
JOKER FUNC tabwriter_test.BenchmarkPyramid has: 
;; (defn BenchmarkPyramid
;;   {:added "1.0"
;;    :go "benchmarkPyramid(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{13620179 0xc002d1f640}) b])
;; 
JOKER FUNC tabwriter_test.BenchmarkRagged has: 
;; (defn BenchmarkRagged
;;   {:added "1.0"
;;    :go "benchmarkRagged(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{13620694 0xc00319ae80}) b])
;; 
JOKER FUNC tabwriter_test.BenchmarkTable has: 
;; (defn BenchmarkTable
;;   {:added "1.0"
;;    :go "benchmarkTable(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{13619249 0xc003054440}) b])
;; 
JOKER FUNC tabwriter_test.ExampleWriter_Init has: 
;; (defn ExampleWriter_Init
;;   {:added "1.0"
;;    :go "exampleWriter_Init()"}
;;   [])
;; 
JOKER FUNC tabwriter_test.Example_elastic has: 
;; (defn Example_elastic
;;   {:added "1.0"
;;    :go "example_elastic()"}
;;   [])
;; 
JOKER FUNC tabwriter_test.Example_trailingTab has: 
;; (defn Example_trailingTab
;;   {:added "1.0"
;;    :go "example_trailingTab()"}
;;   [])
;; 
JOKER FUNC tabwriter_test.Test has: 
;; (defn Test
;;   {:added "1.0"
;;    :go "test(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{13618163 0xc001264320}) t])
;; 
JOKER FUNC tabwriter_test.TestPanicDuringFlush has: 
;; (defn TestPanicDuringFlush
;;   {:added "1.0"
;;    :go "testPanicDuringFlush(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{13618709 0xc00307caa0}) t])
;; 
JOKER FUNC tabwriter_test.TestPanicDuringWrite has: 
;; (defn TestPanicDuringWrite
;;   {:added "1.0"
;;    :go "testPanicDuringWrite(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{13618955 0xc00307cfe0}) t])
;; 
JOKER FUNC tar.Benchmark has: 
;; (defn Benchmark
;;   {:added "1.0"
;;    :go "benchmark(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{200162 0xc0003ae700}) b])
;; 
JOKER FUNC tar.FileInfoHeader has: 
;; (defn ^[{:typeflag Typeflag, :name ^String Name, :linkname ^String Linkname, :size Size, :mode Mode, :uid ^Int Uid, :gid ^Int Gid, :uname ^String Uname, :gname ^String Gname, :modtime ^ABEND881(unrecognized Expr type *ast.SelectorExpr at: &{time Time}) ModTime, :accesstime ^ABEND881(unrecognized Expr type *ast.SelectorExpr at: &{time Time}) AccessTime, :changetime ^ABEND881(unrecognized Expr type *ast.SelectorExpr at: &{time Time}) ChangeTime, :devmajor Devmajor, :devminor Devminor, :xattrs ^ABEND881(unrecognized Expr type *ast.MapType at: &{118380 string string}) Xattrs, :paxrecords ^ABEND881(unrecognized Expr type *ast.MapType at: &{118877 string string}) PAXRecords, :format Format} Error] FileInfoHeader
;;   "FileInfoHeader creates a partially-populated Header from fi.
;; If fi describes a symlink, FileInfoHeader records link as the link target.
;; If fi describes a directory, a slash is appended to the name.
;; 
;; Since os.FileInfo's Name method only returns the base name of
;; the file it describes, it may be necessary to modify Header.Name
;; to provide the full path name of the file."
;;   {:added "1.0"
;;    :go "fileInfoHeader(fi, link)"}
;;   [^ABEND881(unrecognized Expr type *ast.SelectorExpr at: &{os FileInfo}) fi, ^String link])
;; 
JOKER FUNC tar.NewReader has: 
;; (defn ^{:r ^ABEND881(unrecognized Expr type *ast.SelectorExpr at: &{io Reader}) r, :pad pad, :curr curr, :blk blk, :err err} NewReader
;;   "NewReader creates a new Reader reading from r."
;;   {:added "1.0"
;;    :go "newReader(r)"}
;;   [^ABEND881(unrecognized Expr type *ast.SelectorExpr at: &{io Reader}) r])
;; 
JOKER FUNC tar.NewWriter has: 
;; (defn ^{:w ^ABEND881(unrecognized Expr type *ast.SelectorExpr at: &{io Writer}) w, :pad pad, :curr curr, :hdr hdr, :blk blk, :err err} NewWriter
;;   "NewWriter creates a new Writer writing to w."
;;   {:added "1.0"
;;    :go "newWriter(w)"}
;;   [^ABEND881(unrecognized Expr type *ast.SelectorExpr at: &{io Writer}) w])
;; 
JOKER FUNC tar.TestFileInfoHeader has: 
;; (defn TestFileInfoHeader
;;   {:added "1.0"
;;    :go "testFileInfoHeader(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{184144 0xc0003765c0}) t])
;; 
JOKER FUNC tar.TestFileInfoHeaderDir has: 
;; (defn TestFileInfoHeaderDir
;;   {:added "1.0"
;;    :go "testFileInfoHeaderDir(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{184895 0xc000377600}) t])
;; 
JOKER FUNC tar.TestFileInfoHeaderSymlink has: 
;; (defn TestFileInfoHeaderSymlink
;;   {:added "1.0"
;;    :go "testFileInfoHeaderSymlink(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{185519 0xc00037e4c0}) t])
;; 
JOKER FUNC tar.TestFileReader has: 
;; (defn TestFileReader
;;   {:added "1.0"
;;    :go "testFileReader(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{104451 0xc000256da0}) t])
;; 
JOKER FUNC tar.TestFileWriter has: 
;; (defn TestFileWriter
;;   {:added "1.0"
;;    :go "testFileWriter(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{30766 0xc000158920}) t])
;; 
JOKER FUNC tar.TestFitsInBase256 has: 
;; (defn TestFitsInBase256
;;   {:added "1.0"
;;    :go "testFitsInBase256(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{136634 0xc0002acda0}) t])
;; 
JOKER FUNC tar.TestFitsInOctal has: 
;; (defn TestFitsInOctal
;;   {:added "1.0"
;;    :go "testFitsInOctal(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{141645 0xc0002ca540}) t])
;; 
JOKER FUNC tar.TestFormatNumeric has: 
;; (defn TestFormatNumeric
;;   {:added "1.0"
;;    :go "testFormatNumeric(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{139273 0xc0002c3e00}) t])
;; 
JOKER FUNC tar.TestFormatPAXRecord has: 
;; (defn TestFormatPAXRecord
;;   {:added "1.0"
;;    :go "testFormatPAXRecord(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{148825 0xc0002e4300}) t])
;; 
JOKER FUNC tar.TestFormatPAXTime has: 
;; (defn TestFormatPAXTime
;;   {:added "1.0"
;;    :go "testFormatPAXTime(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{145670 0xc0002dc9a0}) t])
;; 
JOKER FUNC tar.TestHeaderAllowedFormats has: 
;; (defn TestHeaderAllowedFormats
;;   {:added "1.0"
;;    :go "testHeaderAllowedFormats(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{191666 0xc000396000}) t])
;; 
JOKER FUNC tar.TestHeaderRoundTrip has: 
;; (defn TestHeaderRoundTrip
;;   {:added "1.0"
;;    :go "testHeaderRoundTrip(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{187333 0xc0003849e0}) t])
;; 
JOKER FUNC tar.TestIssue12594 has: 
;; (defn TestIssue12594
;;   "TestIssue12594 tests that the Writer does not attempt to populate the prefix
;; field when encoding a header in the GNU format. The prefix field is valid
;; in USTAR and PAX, but not GNU."
;;   {:added "1.0"
;;    :go "testIssue12594(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{28699 0xc00014f1e0}) t])
;; 
JOKER FUNC tar.TestMergePAX has: 
;; (defn TestMergePAX
;;   {:added "1.0"
;;    :go "testMergePAX(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{91796 0xc0002342c0}) t])
;; 
JOKER FUNC tar.TestParseNumeric has: 
;; (defn TestParseNumeric
;;   {:added "1.0"
;;    :go "testParseNumeric(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{137260 0xc0002adea0}) t])
;; 
JOKER FUNC tar.TestParsePAX has: 
;; (defn TestParsePAX
;;   {:added "1.0"
;;    :go "testParsePAX(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{92957 0xc0002355e0}) t])
;; 
JOKER FUNC tar.TestParsePAXRecord has: 
;; (defn TestParsePAXRecord
;;   {:added "1.0"
;;    :go "testParsePAXRecord(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{146973 0xc0002e05c0}) t])
;; 
JOKER FUNC tar.TestParsePAXTime has: 
;; (defn TestParsePAXTime
;;   {:added "1.0"
;;    :go "testParsePAXTime(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{142439 0xc0002cb8e0}) t])
;; 
JOKER FUNC tar.TestPartialRead has: 
;; (defn TestPartialRead
;;   {:added "1.0"
;;    :go "testPartialRead(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{85110 0xc00021a500}) t])
;; 
JOKER FUNC tar.TestPax has: 
;; (defn TestPax
;;   {:added "1.0"
;;    :go "testPax(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{16848 0xc000128700}) t])
;; 
JOKER FUNC tar.TestPaxHeadersSorted has: 
;; (defn TestPaxHeadersSorted
;;   {:added "1.0"
;;    :go "testPaxHeadersSorted(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{21245 0xc000134ec0}) t])
;; 
JOKER FUNC tar.TestPaxNonAscii has: 
;; (defn TestPaxNonAscii
;;   {:added "1.0"
;;    :go "testPaxNonAscii(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{18933 0xc00012e980}) t])
;; 
JOKER FUNC tar.TestPaxSymlink has: 
;; (defn TestPaxSymlink
;;   {:added "1.0"
;;    :go "testPaxSymlink(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{17907 0xc000129940}) t])
;; 
JOKER FUNC tar.TestPaxXattrs has: 
;; (defn TestPaxXattrs
;;   {:added "1.0"
;;    :go "testPaxXattrs(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{20352 0xc00012fec0}) t])
;; 
JOKER FUNC tar.TestReadGNUSparsePAXHeaders has: 
;; (defn TestReadGNUSparsePAXHeaders
;;   {:added "1.0"
;;    :go "testReadGNUSparsePAXHeaders(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{98076 0xc000247440}) t])
;; 
JOKER FUNC tar.TestReadHeaderOnly has: 
;; (defn TestReadHeaderOnly
;;   "TestReadHeaderOnly tests that Reader does not attempt to read special
;; header-only files."
;;   {:added "1.0"
;;    :go "testReadHeaderOnly(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{90823 0xc00022f0e0}) t])
;; 
JOKER FUNC tar.TestReadOldGNUSparseMap has: 
;; (defn TestReadOldGNUSparseMap
;;   {:added "1.0"
;;    :go "testReadOldGNUSparseMap(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{94556 0xc00023ab00}) t])
;; 
JOKER FUNC tar.TestReadTruncation has: 
;; (defn TestReadTruncation
;;   "TestReadTruncation test the ending condition on various truncated files and
;; that truncated files are still detected even if the underlying io.Reader
;; satisfies io.Seeker."
;;   {:added "1.0"
;;    :go "testReadTruncation(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{87076 0xc000222780}) t])
;; 
JOKER FUNC tar.TestReader has: 
;; (defn TestReader
;;   {:added "1.0"
;;    :go "testReader(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{65671 0xc0001e5140}) t])
;; 
JOKER FUNC tar.TestRoundTrip has: 
;; (defn TestRoundTrip
;;   {:added "1.0"
;;    :go "testRoundTrip(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{186241 0xc00037f560}) t])
;; 
JOKER FUNC tar.TestSparseEntries has: 
;; (defn TestSparseEntries
;;   {:added "1.0"
;;    :go "testSparseEntries(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{180705 0xc00036a6e0}) t])
;; 
JOKER FUNC tar.TestSplitUSTARPath has: 
;; (defn TestSplitUSTARPath
;;   {:added "1.0"
;;    :go "testSplitUSTARPath(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{27328 0xc0001496c0}) t])
;; 
JOKER FUNC tar.TestUSTARLongName has: 
;; (defn TestUSTARLongName
;;   {:added "1.0"
;;    :go "testUSTARLongName(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{22382 0xc00013a3e0}) t])
;; 
JOKER FUNC tar.TestUninitializedRead has: 
;; (defn TestUninitializedRead
;;   {:added "1.0"
;;    :go "testUninitializedRead(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{86376 0xc00021bc60}) t])
;; 
JOKER FUNC tar.TestValidTypeflagWithPAXHeader has: 
;; (defn TestValidTypeflagWithPAXHeader
;;   {:added "1.0"
;;    :go "testValidTypeflagWithPAXHeader(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{23601 0xc00013b1a0}) t])
;; 
JOKER FUNC tar.TestWriter has: 
;; (defn TestWriter
;;   {:added "1.0"
;;    :go "testWriter(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{2431 0xc00010ab80}) t])
;; 
JOKER FUNC tar.TestWriterErrors has: 
;; (defn TestWriterErrors
;;   {:added "1.0"
;;    :go "testWriterErrors(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{24534 0xc000144260}) t])
;; 
JOKER FUNC tar_test.Example_minimal has: 
;; (defn Example_minimal
;;   {:added "1.0"
;;    :go "example_minimal()"}
;;   [])
;; 
JOKER FUNC template.BenchmarkCSSEscaper has: 
;; (defn BenchmarkCSSEscaper
;;   {:added "1.0"
;;    :go "benchmarkCSSEscaper(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{5841718 0xc00144a000}) b])
;; 
JOKER FUNC template.BenchmarkCSSEscaperNoSpecials has: 
;; (defn BenchmarkCSSEscaperNoSpecials
;;   {:added "1.0"
;;    :go "benchmarkCSSEscaperNoSpecials(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{5841939 0xc00144b3c0}) b])
;; 
JOKER FUNC template.BenchmarkCSSValueFilter has: 
;; (defn BenchmarkCSSValueFilter
;;   {:added "1.0"
;;    :go "benchmarkCSSValueFilter(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{5842532 0xc00113f7e0}) b])
;; 
JOKER FUNC template.BenchmarkCSSValueFilterOk has: 
;; (defn BenchmarkCSSValueFilterOk
;;   {:added "1.0"
;;    :go "benchmarkCSSValueFilterOk(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{5842667 0xc00113fb60}) b])
;; 
JOKER FUNC template.BenchmarkDecodeCSS has: 
;; (defn BenchmarkDecodeCSS
;;   {:added "1.0"
;;    :go "benchmarkDecodeCSS(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{5842075 0xc00144bbe0}) b])
;; 
JOKER FUNC template.BenchmarkDecodeCSSNoSpecials has: 
;; (defn BenchmarkDecodeCSSNoSpecials
;;   {:added "1.0"
;;    :go "benchmarkDecodeCSSNoSpecials(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{5842360 0xc00113ebc0}) b])
;; 
JOKER FUNC template.BenchmarkEscapedExecute has: 
;; (defn BenchmarkEscapedExecute
;;   {:added "1.0"
;;    :go "benchmarkEscapedExecute(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{5807782 0xc00171fa60}) b])
;; 
JOKER FUNC template.BenchmarkHTMLNospaceEscaper has: 
;; (defn BenchmarkHTMLNospaceEscaper
;;   {:added "1.0"
;;    :go "benchmarkHTMLNospaceEscaper(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{5812200 0xc00175e100}) b])
;; 
JOKER FUNC template.BenchmarkHTMLNospaceEscaperNoSpecials has: 
;; (defn BenchmarkHTMLNospaceEscaperNoSpecials
;;   {:added "1.0"
;;    :go "benchmarkHTMLNospaceEscaperNoSpecials(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{5812437 0xc00175e320}) b])
;; 
JOKER FUNC template.BenchmarkJSRegexpEscaper has: 
;; (defn BenchmarkJSRegexpEscaper
;;   {:added "1.0"
;;    :go "benchmarkJSRegexpEscaper(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{5686074 0xc000b0b5a0}) b])
;; 
JOKER FUNC template.BenchmarkJSRegexpEscaperNoSpecials has: 
;; (defn BenchmarkJSRegexpEscaperNoSpecials
;;   {:added "1.0"
;;    :go "benchmarkJSRegexpEscaperNoSpecials(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{5685928 0xc000c36460}) b])
;; 
JOKER FUNC template.BenchmarkJSStrEscaper has: 
;; (defn BenchmarkJSStrEscaper
;;   {:added "1.0"
;;    :go "benchmarkJSStrEscaper(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{5685700 0xc000bd1a20}) b])
;; 
JOKER FUNC template.BenchmarkJSStrEscaperNoSpecials has: 
;; (defn BenchmarkJSStrEscaperNoSpecials
;;   {:added "1.0"
;;    :go "benchmarkJSStrEscaperNoSpecials(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{5685559 0xc000bafcc0}) b])
;; 
JOKER FUNC template.BenchmarkJSValEscaperWithNum has: 
;; (defn BenchmarkJSValEscaperWithNum
;;   {:added "1.0"
;;    :go "benchmarkJSValEscaperWithNum(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{5684576 0xc0007b1840}) b])
;; 
JOKER FUNC template.BenchmarkJSValEscaperWithObj has: 
;; (defn BenchmarkJSValEscaperWithObj
;;   {:added "1.0"
;;    :go "benchmarkJSValEscaperWithObj(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{5685067 0xc0007e80c0}) b])
;; 
JOKER FUNC template.BenchmarkJSValEscaperWithObjNoSpecials has: 
;; (defn BenchmarkJSValEscaperWithObjNoSpecials
;;   {:added "1.0"
;;    :go "benchmarkJSValEscaperWithObjNoSpecials(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{5685357 0xc0007e8a40}) b])
;; 
JOKER FUNC template.BenchmarkJSValEscaperWithStr has: 
;; (defn BenchmarkJSValEscaperWithStr
;;   {:added "1.0"
;;    :go "benchmarkJSValEscaperWithStr(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{5684688 0xc0007b9300}) b])
;; 
JOKER FUNC template.BenchmarkJSValEscaperWithStrNoSpecials has: 
;; (defn BenchmarkJSValEscaperWithStrNoSpecials
;;   {:added "1.0"
;;    :go "benchmarkJSValEscaperWithStrNoSpecials(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{5684920 0xc0007de720}) b])
;; 
JOKER FUNC template.BenchmarkSrcsetFilter has: 
;; (defn BenchmarkSrcsetFilter
;;   {:added "1.0"
;;    :go "benchmarkSrcsetFilter(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{5669620 0xc000bb6d00}) b])
;; 
JOKER FUNC template.BenchmarkSrcsetFilterNoSpecials has: 
;; (defn BenchmarkSrcsetFilterNoSpecials
;;   {:added "1.0"
;;    :go "benchmarkSrcsetFilterNoSpecials(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{5669771 0xc000bb7900}) b])
;; 
JOKER FUNC template.BenchmarkStripTags has: 
;; (defn BenchmarkStripTags
;;   {:added "1.0"
;;    :go "benchmarkStripTags(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{5812581 0xc00175e540}) b])
;; 
JOKER FUNC template.BenchmarkStripTagsNoSpecials has: 
;; (defn BenchmarkStripTagsNoSpecials
;;   {:added "1.0"
;;    :go "benchmarkStripTagsNoSpecials(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{5812800 0xc00175e760}) b])
;; 
JOKER FUNC template.BenchmarkTemplateSpecialTags has: 
;; (defn BenchmarkTemplateSpecialTags
;;   {:added "1.0"
;;    :go "benchmarkTemplateSpecialTags(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{5757641 0xc00152a660}) b])
;; 
JOKER FUNC template.BenchmarkURLEscaper has: 
;; (defn BenchmarkURLEscaper
;;   {:added "1.0"
;;    :go "benchmarkURLEscaper(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{5669042 0xc000803000}) b])
;; 
JOKER FUNC template.BenchmarkURLEscaperNoSpecials has: 
;; (defn BenchmarkURLEscaperNoSpecials
;;   {:added "1.0"
;;    :go "benchmarkURLEscaperNoSpecials(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{5669191 0xc000803960}) b])
;; 
JOKER FUNC template.BenchmarkURLNormalizer has: 
;; (defn BenchmarkURLNormalizer
;;   {:added "1.0"
;;    :go "benchmarkURLNormalizer(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{5669322 0xc000bb6800}) b])
;; 
JOKER FUNC template.BenchmarkURLNormalizerNoSpecials has: 
;; (defn BenchmarkURLNormalizerNoSpecials
;;   {:added "1.0"
;;    :go "benchmarkURLNormalizerNoSpecials(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{5669476 0xc000bb6a20}) b])
;; 
JOKER FUNC template.TestAddParseTreeToUnparsedTemplate has: 
;; (defn TestAddParseTreeToUnparsedTemplate
;;   "Issue 7032"
;;   {:added "1.0"
;;    :go "testAddParseTreeToUnparsedTemplate(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{13704377 0xc0026fed60}) t])
;; 
JOKER FUNC template.TestAddrOfIndex has: 
;; (defn TestAddrOfIndex
;;   {:added "1.0"
;;    :go "testAddrOfIndex(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{13752037 0xc002794fc0}) t])
;; 
JOKER FUNC template.TestAliasedParseTreeDoesNotOverescape has: 
;; (defn TestAliasedParseTreeDoesNotOverescape
;;   "Covers issue 21844."
;;   {:added "1.0"
;;    :go "testAliasedParseTreeDoesNotOverescape(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{5808778 0xc00173ab60}) t])
;; 
JOKER FUNC template.TestBadFuncNames has: 
;; (defn TestBadFuncNames
;;   {:added "1.0"
;;    :go "testBadFuncNames(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{13750014 0xc0023066e0}) t])
;; 
JOKER FUNC template.TestBlock has: 
;; (defn TestBlock
;;   {:added "1.0"
;;    :go "testBlock(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{13750456 0xc002306d40}) t])
;; 
JOKER FUNC template.TestCSSEscaper has: 
;; (defn TestCSSEscaper
;;   {:added "1.0"
;;    :go "testCSSEscaper(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{5839120 0xc000539260}) t])
;; 
JOKER FUNC template.TestCSSValueFilter has: 
;; (defn TestCSSValueFilter
;;   {:added "1.0"
;;    :go "testCSSValueFilter(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{5840107 0xc0012a1de0}) t])
;; 
JOKER FUNC template.TestCloneCrash has: 
;; (defn TestCloneCrash
;;   "This used to crash; https://golang.org/issue/3281"
;;   {:added "1.0"
;;    :go "testCloneCrash(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{5909296 0xc001f197e0}) t])
;; 
JOKER FUNC template.TestCloneGrowth has: 
;; (defn TestCloneGrowth
;;   {:added "1.0"
;;    :go "testCloneGrowth(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{5911700 0xc001f23a40}) t])
;; 
JOKER FUNC template.TestClonePipe has: 
;; (defn TestClonePipe
;;   "Issue 24791."
;;   {:added "1.0"
;;    :go "testClonePipe(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{5912532 0xc001457ca0}) t])
;; 
JOKER FUNC template.TestCloneRedefinedName has: 
;; (defn TestCloneRedefinedName
;;   "https://golang.org/issue/17735"
;;   {:added "1.0"
;;    :go "testCloneRedefinedName(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{5912109 0xc00153ec20}) t])
;; 
JOKER FUNC template.TestCloneThenParse has: 
;; (defn TestCloneThenParse
;;   "Ensure that this guarantee from the docs is upheld:
;; "Further calls to Parse in the copy will add templates
;; to the copy but not to the original.""
;;   {:added "1.0"
;;    :go "testCloneThenParse(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{5909579 0xc001f19b40}) t])
;; 
JOKER FUNC template.TestComparison has: 
;; (defn TestComparison
;;   {:added "1.0"
;;    :go "testComparison(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{13746290 0xc002ce5fa0}) t])
;; 
JOKER FUNC template.TestDecodeCSS has: 
;; (defn TestDecodeCSS
;;   {:added "1.0"
;;    :go "testDecodeCSS(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{5837073 0xc000fff600}) t])
;; 
JOKER FUNC template.TestDelims has: 
;; (defn TestDelims
;;   {:added "1.0"
;;    :go "testDelims(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{13736818 0xc0046e0a20}) t])
;; 
JOKER FUNC template.TestEmptyTemplateCloneCrash has: 
;; (defn TestEmptyTemplateCloneCrash
;;   "Issue 10879"
;;   {:added "1.0"
;;    :go "testEmptyTemplateCloneCrash(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{13705157 0xc0026ffdc0}) t])
;; 
JOKER FUNC template.TestEndsWithCSSKeyword has: 
;; (defn TestEndsWithCSSKeyword
;;   {:added "1.0"
;;    :go "testEndsWithCSSKeyword(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{5835932 0xc000f31b20}) t])
;; 
JOKER FUNC template.TestEnsurePipelineContains has: 
;; (defn TestEnsurePipelineContains
;;   {:added "1.0"
;;    :go "testEnsurePipelineContains(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{5799785 0xc00167ee80}) t])
;; 
JOKER FUNC template.TestErrorOnUndefined has: 
;; (defn TestErrorOnUndefined
;;   "Unlike text/template, html/template crashed if given an incomplete
;; template, that is, a template that had been named but not given any content.
;; This is issue #10204."
;;   {:added "1.0"
;;    :go "testErrorOnUndefined(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{5806248 0xc00171e540}) t])
;; 
JOKER FUNC template.TestErrors has: 
;; (defn TestErrors
;;   {:added "1.0"
;;    :go "testErrors(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{5782337 0xc0015b1520}) t])
;; 
JOKER FUNC template.TestEscape has: 
;; (defn TestEscape
;;   {:added "1.0"
;;    :go "testEscape(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{5758809 0xc00152be80}) t])
;; 
JOKER FUNC template.TestEscapeErrorsNotIgnorable has: 
;; (defn TestEscapeErrorsNotIgnorable
;;   {:added "1.0"
;;    :go "testEscapeErrorsNotIgnorable(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{5802772 0xc0016ddc00}) t])
;; 
JOKER FUNC template.TestEscapeMalformedPipelines has: 
;; (defn TestEscapeMalformedPipelines
;;   {:added "1.0"
;;    :go "testEscapeMalformedPipelines(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{5802348 0xc0016d2ae0}) t])
;; 
JOKER FUNC template.TestEscapeMap has: 
;; (defn TestEscapeMap
;;   {:added "1.0"
;;    :go "testEscapeMap(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{5777498 0xc0015a2060}) t])
;; 
JOKER FUNC template.TestEscapeSet has: 
;; (defn TestEscapeSet
;;   {:added "1.0"
;;    :go "testEscapeSet(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{5778351 0xc0015a2e60}) t])
;; 
JOKER FUNC template.TestEscapeSetErrorsNotIgnorable has: 
;; (defn TestEscapeSetErrorsNotIgnorable
;;   {:added "1.0"
;;    :go "testEscapeSetErrorsNotIgnorable(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{5803048 0xc0016e7880}) t])
;; 
JOKER FUNC template.TestEscapeText has: 
;; (defn TestEscapeText
;;   {:added "1.0"
;;    :go "testEscapeText(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{5787553 0xc0015f3e00}) t])
;; 
JOKER FUNC template.TestEscapersOnLower7AndSelectHighCodepoints has: 
;; (defn TestEscapersOnLower7AndSelectHighCodepoints
;;   {:added "1.0"
;;    :go "testEscapersOnLower7AndSelectHighCodepoints(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{5682244 0xc0008bd200}) t])
;; 
JOKER FUNC template.TestEscapingNilNonemptyInterfaces has: 
;; (defn TestEscapingNilNonemptyInterfaces
;;   "https://golang.org/issue/5982"
;;   {:added "1.0"
;;    :go "testEscapingNilNonemptyInterfaces(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{5736429 0xc0014c95e0}) t])
;; 
JOKER FUNC template.TestExecError has: 
;; (defn TestExecError
;;   "Check that an error from a nested template contains all the relevant information."
;;   {:added "1.0"
;;    :go "testExecError(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{13738637 0xc0048786c0}) t])
;; 
JOKER FUNC template.TestExecute has: 
;; (defn TestExecute
;;   {:added "1.0"
;;    :go "testExecute(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{13736594 0xc00463d840}) t])
;; 
JOKER FUNC template.TestExecuteError has: 
;; (defn TestExecuteError
;;   "Check that an error from a method flows back to the top."
;;   {:added "1.0"
;;    :go "testExecuteError(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{13737913 0xc0047fb440}) t])
;; 
JOKER FUNC template.TestExecuteGivesExecError has: 
;; (defn TestExecuteGivesExecError
;;   {:added "1.0"
;;    :go "testExecuteGivesExecError(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{13748890 0xc0032b53a0}) t])
;; 
JOKER FUNC template.TestExecuteOnNewTemplate has: 
;; (defn TestExecuteOnNewTemplate
;;   {:added "1.0"
;;    :go "testExecuteOnNewTemplate(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{13741005 0xc001b9a760}) t])
;; 
JOKER FUNC template.TestFinalForPrintf has: 
;; (defn TestFinalForPrintf
;;   {:added "1.0"
;;    :go "testFinalForPrintf(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{13742395 0xc001b770c0}) t])
;; 
JOKER FUNC template.TestFindEndTag has: 
;; (defn TestFindEndTag
;;   {:added "1.0"
;;    :go "testFindEndTag(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{5756649 0xc00151d680}) t])
;; 
JOKER FUNC template.TestFuncMapWorksAfterClone has: 
;; (defn TestFuncMapWorksAfterClone
;;   "https://golang.org/issue/5980"
;;   {:added "1.0"
;;    :go "testFuncMapWorksAfterClone(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{5910131 0xc001f22280}) t])
;; 
JOKER FUNC template.TestGoodFuncNames has: 
;; (defn TestGoodFuncNames
;;   {:added "1.0"
;;    :go "testGoodFuncNames(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{13749741 0xc002306220}) t])
;; 
JOKER FUNC template.TestHTMLNospaceEscaper has: 
;; (defn TestHTMLNospaceEscaper
;;   {:added "1.0"
;;    :go "testHTMLNospaceEscaper(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{5810285 0xc001747920}) t])
;; 
JOKER FUNC template.TestHexDecode has: 
;; (defn TestHexDecode
;;   {:added "1.0"
;;    :go "testHexDecode(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{5838314 0xc0011267e0}) t])
;; 
JOKER FUNC template.TestIdempotentExecute has: 
;; (defn TestIdempotentExecute
;;   "This covers issue #20842."
;;   {:added "1.0"
;;    :go "testIdempotentExecute(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{5806551 0xc00171ed00}) t])
;; 
JOKER FUNC template.TestIndirectPrint has: 
;; (defn TestIndirectPrint
;;   {:added "1.0"
;;    :go "testIndirectPrint(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{5804433 0xc001712920}) t])
;; 
JOKER FUNC template.TestInterfaceValues has: 
;; (defn TestInterfaceValues
;;   {:added "1.0"
;;    :go "testInterfaceValues(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{13752761 0xc0027958a0}) t])
;; 
JOKER FUNC template.TestIsCSSNmchar has: 
;; (defn TestIsCSSNmchar
;;   {:added "1.0"
;;    :go "testIsCSSNmchar(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{5836487 0xc000f426c0}) t])
;; 
JOKER FUNC template.TestIsJsMimeType has: 
;; (defn TestIsJsMimeType
;;   {:added "1.0"
;;    :go "testIsJsMimeType(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{5684112 0xc0006f29e0}) t])
;; 
JOKER FUNC template.TestIssue19294 has: 
;; (defn TestIssue19294
;;   "Issue 19249 was a regression in 1.8 caused by the handling of empty
;; templates added in that release, which got different answers depending
;; on the order templates appeared in the internal map."
;;   {:added "1.0"
;;    :go "testIssue19294(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{13707856 0xc003139260}) t])
;; 
JOKER FUNC template.TestJSEscaping has: 
;; (defn TestJSEscaping
;;   {:added "1.0"
;;    :go "testJSEscaping(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{13739107 0xc004881cc0}) t])
;; 
JOKER FUNC template.TestJSRegexpEscaper has: 
;; (defn TestJSRegexpEscaper
;;   {:added "1.0"
;;    :go "testJSRegexpEscaper(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{5681241 0xc0009b6f60}) t])
;; 
JOKER FUNC template.TestJSStrEscaper has: 
;; (defn TestJSStrEscaper
;;   {:added "1.0"
;;    :go "testJSStrEscaper(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{5679495 0xc0009bd0a0}) t])
;; 
JOKER FUNC template.TestJSValEscaper has: 
;; (defn TestJSValEscaper
;;   {:added "1.0"
;;    :go "testJSValEscaper(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{5677569 0xc0009e5700}) t])
;; 
JOKER FUNC template.TestMaxExecDepth has: 
;; (defn TestMaxExecDepth
;;   {:added "1.0"
;;    :go "testMaxExecDepth(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{13751708 0xc002794480}) t])
;; 
JOKER FUNC template.TestMessageForExecuteEmpty has: 
;; (defn TestMessageForExecuteEmpty
;;   {:added "1.0"
;;    :go "testMessageForExecuteEmpty(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{13741474 0xc001b9bb80}) t])
;; 
JOKER FUNC template.TestMissingFieldOnNil has: 
;; (defn TestMissingFieldOnNil
;;   "Check that calling an invalid field on nil pointer prints
;; a field error instead of a distracting nil pointer error.
;; https://golang.org/issue/15125"
;;   {:added "1.0"
;;    :go "testMissingFieldOnNil(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{13751356 0xc002307c20}) t])
;; 
JOKER FUNC template.TestMissingMapKey has: 
;; (defn TestMissingMapKey
;;   {:added "1.0"
;;    :go "testMissingMapKey(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{13746991 0xc00325ef60}) t])
;; 
JOKER FUNC template.TestMultiExecute has: 
;; (defn TestMultiExecute
;;   {:added "1.0"
;;    :go "testMultiExecute(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{13700582 0xc0036d7aa0}) t])
;; 
JOKER FUNC template.TestMultiParse has: 
;; (defn TestMultiParse
;;   {:added "1.0"
;;    :go "testMultiParse(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{13698500 0xc00338ae00}) t])
;; 
JOKER FUNC template.TestNew has: 
;; (defn TestNew
;;   {:added "1.0"
;;    :go "testNew(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{13705675 0xc0025b02c0}) t])
;; 
JOKER FUNC template.TestNextJsCtx has: 
;; (defn TestNextJsCtx
;;   {:added "1.0"
;;    :go "testNextJsCtx(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{5674639 0xc000e66580}) t])
;; 
JOKER FUNC template.TestOrphanedTemplate has: 
;; (defn TestOrphanedTemplate
;;   "Covers issue 22780."
;;   {:added "1.0"
;;    :go "testOrphanedTemplate(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{5808046 0xc00171ffc0}) t])
;; 
JOKER FUNC template.TestParse has: 
;; (defn TestParse
;;   {:added "1.0"
;;    :go "testParse(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{13706348 0xc002bbf720}) t])
;; 
JOKER FUNC template.TestParseFiles has: 
;; (defn TestParseFiles
;;   {:added "1.0"
;;    :go "testParseFiles(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{13700911 0xc003708840}) t])
;; 
JOKER FUNC template.TestParseFilesWithData has: 
;; (defn TestParseFilesWithData
;;   {:added "1.0"
;;    :go "testParseFilesWithData(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{13701985 0xc0014f67c0}) t])
;; 
JOKER FUNC template.TestParseGlob has: 
;; (defn TestParseGlob
;;   {:added "1.0"
;;    :go "testParseGlob(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{13701275 0xc00373da00}) t])
;; 
JOKER FUNC template.TestParseGlobWithData has: 
;; (defn TestParseGlobWithData
;;   {:added "1.0"
;;    :go "testParseGlobWithData(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{13702230 0xc001bcaf40}) t])
;; 
JOKER FUNC template.TestPipeToMethodIsEscaped has: 
;; (defn TestPipeToMethodIsEscaped
;;   "This is a test for issue 7379: type assertion error caused panic, and then
;; the code to handle the panic breaks escaping. It's hard to see the second
;; problem once the first is fixed, but its fix is trivial so we let that go. See
;; the discussion for issue 7379."
;;   {:added "1.0"
;;    :go "testPipeToMethodIsEscaped(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{5805567 0xc001713b80}) t])
;; 
JOKER FUNC template.TestRedefinition has: 
;; (defn TestRedefinition
;;   {:added "1.0"
;;    :go "testRedefinition(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{13704692 0xc0026ff4c0}) t])
;; 
JOKER FUNC template.TestRedundantFuncs has: 
;; (defn TestRedundantFuncs
;;   {:added "1.0"
;;    :go "testRedundantFuncs(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{5803404 0xc0016f2920}) t])
;; 
JOKER FUNC template.TestSkipCSSSpace has: 
;; (defn TestSkipCSSSpace
;;   {:added "1.0"
;;    :go "testSkipCSSSpace(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{5838688 0xc001126f40}) t])
;; 
JOKER FUNC template.TestSrcsetFilter has: 
;; (defn TestSrcsetFilter
;;   {:added "1.0"
;;    :go "testSrcsetFilter(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{5668247 0xc00130a880}) t])
;; 
JOKER FUNC template.TestStringer has: 
;; (defn TestStringer
;;   {:added "1.0"
;;    :go "testStringer(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{5735892 0xc0014c80e0}) t])
;; 
JOKER FUNC template.TestStripTags has: 
;; (defn TestStripTags
;;   {:added "1.0"
;;    :go "testStripTags(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{5811468 0xc001753760}) t])
;; 
JOKER FUNC template.TestTemplateCloneExecuteRace has: 
;; (defn TestTemplateCloneExecuteRace
;;   "https://golang.org/issue/16101"
;;   {:added "1.0"
;;    :go "testTemplateCloneExecuteRace(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{5910866 0xc001f22d20}) t])
;; 
JOKER FUNC template.TestTemplateCloneLookup has: 
;; (defn TestTemplateCloneLookup
;;   {:added "1.0"
;;    :go "testTemplateCloneLookup(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{5911381 0xc001f23600}) t])
;; 
JOKER FUNC template.TestTemplateLookUp has: 
;; (defn TestTemplateLookUp
;;   "Issue 10910, 10926"
;;   {:added "1.0"
;;    :go "testTemplateLookUp(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{13705270 0xc0022fc000}) t])
;; 
JOKER FUNC template.TestTemplates has: 
;; (defn TestTemplates
;;   {:added "1.0"
;;    :go "testTemplates(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{5908562 0xc0010542a0}) t])
;; 
JOKER FUNC template.TestTree has: 
;; (defn TestTree
;;   {:added "1.0"
;;    :go "testTree(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{13739967 0xc003480340}) t])
;; 
JOKER FUNC template.TestTypedContent has: 
;; (defn TestTypedContent
;;   {:added "1.0"
;;    :go "testTypedContent(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{5723563 0xc0014909e0}) t])
;; 
JOKER FUNC template.TestURLFilters has: 
;; (defn TestURLFilters
;;   {:added "1.0"
;;    :go "testURLFilters(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{5666781 0xc000d2c9a0}) t])
;; 
JOKER FUNC template.TestURLNormalizer has: 
;; (defn TestURLNormalizer
;;   {:added "1.0"
;;    :go "testURLNormalizer(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{5666143 0xc000b77340}) t])
;; 
JOKER FUNC template.TestUnterminatedStringError has: 
;; (defn TestUnterminatedStringError
;;   "Test that the error message for multiline unterminated string
;; refers to the line number of the opening quote."
;;   {:added "1.0"
;;    :go "testUnterminatedStringError(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{13748378 0xc0032b4be0}) t])
;; 
JOKER FUNC template_test.Example has: 
;; (defn Example
;;   {:added "1.0"
;;    :go "example()"}
;;   [])
;; 
JOKER FUNC template_test.ExampleTemplate has: 
;; (defn ExampleTemplate
;;   {:added "1.0"
;;    :go "exampleTemplate()"}
;;   [])
;; 
JOKER FUNC template_test.ExampleTemplate_func has: 
;; (defn ExampleTemplate_func
;;   "This example demonstrates a custom function to process template text.
;; It installs the strings.Title function and uses it to
;; Make Title Text Look Good In Our Template's Output."
;;   {:added "1.0"
;;    :go "exampleTemplate_func()"}
;;   [])
;; 
JOKER FUNC template_test.ExampleTemplate_parsefiles has: 
;; (defn ExampleTemplate_parsefiles
;;   "Here we demonstrate loading a set of templates from files in different directories"
;;   {:added "1.0"
;;    :go "exampleTemplate_parsefiles()"}
;;   [])
;; 
JOKER FUNC template_test.Example_autoescaping has: 
;; (defn Example_autoescaping
;;   {:added "1.0"
;;    :go "example_autoescaping()"}
;;   [])
;; 
JOKER FUNC template_test.Example_escape has: 
;; (defn Example_escape
;;   {:added "1.0"
;;    :go "example_escape()"}
;;   [])
;; 
JOKER FUNC template_test.TestRedefineAfterNamedExecution has: 
;; (defn TestRedefineAfterNamedExecution
;;   {:added "1.0"
;;    :go "testRedefineAfterNamedExecution(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{5671330 0xc001183cc0}) t])
;; 
JOKER FUNC template_test.TestRedefineAfterNonExecution has: 
;; (defn TestRedefineAfterNonExecution
;;   {:added "1.0"
;;    :go "testRedefineAfterNonExecution(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{5671051 0xc001183720}) t])
;; 
JOKER FUNC template_test.TestRedefineEmptyAfterExecution has: 
;; (defn TestRedefineEmptyAfterExecution
;;   {:added "1.0"
;;    :go "testRedefineEmptyAfterExecution(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{5670856 0xc000f35000}) t])
;; 
JOKER FUNC template_test.TestRedefineNestedByNameAfterExecution has: 
;; (defn TestRedefineNestedByNameAfterExecution
;;   {:added "1.0"
;;    :go "testRedefineNestedByNameAfterExecution(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{5671615 0xc00114d740}) t])
;; 
JOKER FUNC template_test.TestRedefineNestedByTemplateAfterExecution has: 
;; (defn TestRedefineNestedByTemplateAfterExecution
;;   {:added "1.0"
;;    :go "testRedefineNestedByTemplateAfterExecution(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{5671888 0xc0010d0420}) t])
;; 
JOKER FUNC template_test.TestRedefineNonEmptyAfterExecution has: 
;; (defn TestRedefineNonEmptyAfterExecution
;;   {:added "1.0"
;;    :go "testRedefineNonEmptyAfterExecution(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{5670685 0xc000b94fa0}) t])
;; 
JOKER FUNC template_test.TestRedefineOtherParsers has: 
;; (defn TestRedefineOtherParsers
;;   {:added "1.0"
;;    :go "testRedefineOtherParsers(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{5672917 0xc00108cc60}) t])
;; 
JOKER FUNC template_test.TestRedefineSafety has: 
;; (defn TestRedefineSafety
;;   {:added "1.0"
;;    :go "testRedefineSafety(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{5672123 0xc00109a640}) t])
;; 
JOKER FUNC template_test.TestRedefineTopUse has: 
;; (defn TestRedefineTopUse
;;   {:added "1.0"
;;    :go "testRedefineTopUse(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{5672657 0xc00108c6c0}) t])
;; 
JOKER FUNC template_test.TestTemplateClone has: 
;; (defn TestTemplateClone
;;   {:added "1.0"
;;    :go "testTemplateClone(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{5670165 0xc00162ab80}) t])
;; 
JOKER FUNC testing.AllocsPerRun has: 
;; (defn ^avg AllocsPerRun
;;   "AllocsPerRun returns the average number of allocations during calls to f.
;; Although the return value has type float64, it will always be an integral value.
;; 
;; To compute the number of allocations, the function will first be run once as
;; a warm-up. The average number of allocations over the specified number of
;; runs will then be measured and returned.
;; 
;; AllocsPerRun sets GOMAXPROCS to 1 during its measurement and will restore
;; it before returning."
;;   {:added "1.0"
;;    :go "allocsPerRun(runs, f)"}
;;   [^Int runs, ^ABEND881(unrecognized Expr type *ast.FuncType at: &{13442243 0xc0053ff7a0 <nil>}) f])
;; 
JOKER FUNC testing.Benchmark has: 
;; (defn ^{:n ^Int N, :t ^ABEND881(unrecognized Expr type *ast.SelectorExpr at: &{time Duration}) T, :bytes Bytes, :memallocs MemAllocs, :membytes MemBytes} Benchmark
;;   "Benchmark benchmarks a single function. Useful for creating
;; custom benchmarks that do not use the "go test" command.
;; 
;; If f calls Run, the result will be an estimate of running all its
;; subbenchmarks that don't call Run in sequence in a single benchmark."
;;   {:added "1.0"
;;    :go "benchmark(f)"}
;;   [^ABEND881(unrecognized Expr type *ast.FuncType at: &{13461466 0xc002579200 <nil>}) f])
;; 
JOKER FUNC testing.CoverMode has: 
(defn ^String CoverMode
  "CoverMode reports what the test coverage mode is set to. The
values are "set", "count", or "atomic". The return value will be
empty if test coverage is not enabled."
  {:added "1.0"
   :go "coverMode()"}
  [])

JOKER FUNC testing.Coverage has: 
;; (defn ^ABEND042(cannot find typename testing.float64) Coverage
;;   "Coverage reports the current code coverage as a fraction in the range [0, 1].
;; If coverage is not enabled, Coverage returns 0.
;; 
;; When running a large set of sequential test cases, checking Coverage after each one
;; can be useful for identifying which test cases exercise new code paths.
;; It is not a replacement for the reports generated by 'go test -cover' and
;; 'go tool cover'."
;;   {:added "1.0"
;;    :go "coverage()"}
;;   [])
;; 
JOKER FUNC testing.Main has: 
;; (defn Main
;;   "Main is an internal function, part of the implementation of the "go test" command.
;; It was exported because it is cross-package and predates "internal" packages.
;; It is no longer used by "go test" but preserved, as much as possible, for other
;; systems that simulate "go test" using Main, but Main sometimes cannot be updated as
;; new functionality is added to the testing package.
;; Systems simulating "go test" should be updated to use MainStart."
;;   {:added "1.0"
;;    :go "main(matchString, tests, benchmarks, examples)"}
;;   [^ABEND881(unrecognized Expr type *ast.FuncType at: &{13512370 0xc004b57050 0xc004b57080}) matchString, ^ABEND881(unrecognized Expr type *ast.ArrayType at: &{13512413 <nil> InternalTest}) tests, ^ABEND881(unrecognized Expr type *ast.ArrayType at: &{13512440 <nil> InternalBenchmark}) benchmarks, ^ABEND881(unrecognized Expr type *ast.ArrayType at: &{13512470 <nil> InternalExample}) examples])
;; 
JOKER FUNC testing.MainStart has: 
;; (defn ^{:deps deps, :tests ^ABEND881(unrecognized Expr type *ast.ArrayType at: &{13512698 <nil> InternalTest}) tests, :benchmarks ^ABEND881(unrecognized Expr type *ast.ArrayType at: &{13512725 <nil> InternalBenchmark}) benchmarks, :examples ^ABEND881(unrecognized Expr type *ast.ArrayType at: &{13512757 <nil> InternalExample}) examples, :timer ^ABEND881(unrecognized Expr type *ast.StarExpr at: &{13512787 0xc004a15840}) timer, :afteronce ^ABEND881(unrecognized Expr type *ast.SelectorExpr at: &{sync Once}) afterOnce, :numrun ^Int numRun} MainStart
;;   "MainStart is meant for use by tests generated by 'go test'.
;; It is not meant to be called directly and is not subject to the Go 1 compatibility document.
;; It may change signature from release to release."
;;   {:added "1.0"
;;    :go "mainStart(deps, tests, benchmarks, examples)"}
;;   [deps, ^ABEND881(unrecognized Expr type *ast.ArrayType at: &{13513541 <nil> InternalTest}) tests, ^ABEND881(unrecognized Expr type *ast.ArrayType at: &{13513568 <nil> InternalBenchmark}) benchmarks, ^ABEND881(unrecognized Expr type *ast.ArrayType at: &{13513598 <nil> InternalExample}) examples])
;; 
JOKER FUNC testing.RegisterCover has: 
;; (defn RegisterCover
;;   "RegisterCover records the coverage data accumulators for the tests.
;; NOTE: This function is internal to the testing infrastructure and may change.
;; It is not covered (yet) by the Go 1 compatibility guidelines."
;;   {:added "1.0"
;;    :go "registerCover(c)"}
;;   [c])
;; 
JOKER FUNC testing.RunBenchmarks has: 
;; (defn RunBenchmarks
;;   "An internal function but exported because it is cross-package; part of the implementation
;; of the "go test" command."
;;   {:added "1.0"
;;    :go "runBenchmarks(matchString, benchmarks)"}
;;   [^ABEND881(unrecognized Expr type *ast.FuncType at: &{13453282 0xc000aed1a0 0xc000aed470}) matchString, ^ABEND881(unrecognized Expr type *ast.ArrayType at: &{13453330 <nil> InternalBenchmark}) benchmarks])
;; 
JOKER FUNC testing.RunExamples has: 
;; (defn ^ok RunExamples
;;   "An internal function but exported because it is cross-package; part of the implementation
;; of the "go test" command."
;;   {:added "1.0"
;;    :go "runExamples(matchString, examples)"}
;;   [^ABEND881(unrecognized Expr type *ast.FuncType at: &{13469934 0xc004a6b2c0 0xc004a6b320}) matchString, ^ABEND881(unrecognized Expr type *ast.ArrayType at: &{13469980 <nil> InternalExample}) examples])
;; 
JOKER FUNC testing.RunTests has: 
;; (defn ^ok RunTests
;;   "An internal function but exported because it is cross-package; part of the implementation
;; of the "go test" command."
;;   {:added "1.0"
;;    :go "runTests(matchString, tests)"}
;;   [^ABEND881(unrecognized Expr type *ast.FuncType at: &{13516122 0xc004b38900 0xc004b38930}) matchString, ^ABEND881(unrecognized Expr type *ast.ArrayType at: &{13516165 <nil> InternalTest}) tests])
;; 
JOKER FUNC testing.Short has: 
;; (defn ^ABEND042(cannot find typename testing.bool) Short
;;   "Short reports whether the -test.short flag is set."
;;   {:added "1.0"
;;    :go "short()"}
;;   [])
;; 
JOKER FUNC testing.TestBRun has: 
;; (defn TestBRun
;;   {:added "1.0"
;;    :go "testBRun(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{13537555 T}) t])
;; 
JOKER FUNC testing.TestBenchmark has: 
;; (defn TestBenchmark
;;   {:added "1.0"
;;    :go "testBenchmark(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{13543571 T}) t])
;; 
JOKER FUNC testing.TestBenchmarkOutput has: 
;; (defn TestBenchmarkOutput
;;   {:added "1.0"
;;    :go "testBenchmarkOutput(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{13541639 T}) t])
;; 
JOKER FUNC testing.TestBenchmarkReadMemStatsBeforeFirstRun has: 
;; (defn TestBenchmarkReadMemStatsBeforeFirstRun
;;   {:added "1.0"
;;    :go "testBenchmarkReadMemStatsBeforeFirstRun(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{13542069 T}) t])
;; 
JOKER FUNC testing.TestBenchmarkStartsFrom1 has: 
;; (defn TestBenchmarkStartsFrom1
;;   {:added "1.0"
;;    :go "testBenchmarkStartsFrom1(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{13541861 T}) t])
;; 
JOKER FUNC testing.TestIsSpace has: 
;; (defn TestIsSpace
;;   "Verify that our IsSpace agrees with unicode.IsSpace."
;;   {:added "1.0"
;;    :go "testIsSpace(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{13462890 T}) t])
;; 
JOKER FUNC testing.TestMatcher has: 
;; (defn TestMatcher
;;   {:added "1.0"
;;    :go "testMatcher(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{13464693 T}) t])
;; 
JOKER FUNC testing.TestNaming has: 
;; (defn TestNaming
;;   {:added "1.0"
;;    :go "testNaming(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{13466812 T}) t])
;; 
JOKER FUNC testing.TestParallelSub has: 
;; (defn TestParallelSub
;;   {:added "1.0"
;;    :go "testParallelSub(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{13542291 T}) t])
;; 
JOKER FUNC testing.TestRacyOutput has: 
;; (defn TestRacyOutput
;;   {:added "1.0"
;;    :go "testRacyOutput(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{13542645 T}) t])
;; 
JOKER FUNC testing.TestSplitRegexp has: 
;; (defn TestSplitRegexp
;;   {:added "1.0"
;;    :go "testSplitRegexp(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{13463117 T}) t])
;; 
JOKER FUNC testing.TestTBHelper has: 
;; (defn TestTBHelper
;;   {:added "1.0"
;;    :go "testTBHelper(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{13472274 T}) t])
;; 
JOKER FUNC testing.TestTBHelperParallel has: 
;; (defn TestTBHelperParallel
;;   {:added "1.0"
;;    :go "testTBHelperParallel(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{13473151 T}) t])
;; 
JOKER FUNC testing.TestTRun has: 
;; (defn TestTRun
;;   {:added "1.0"
;;    :go "testTRun(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{13529607 T}) t])
;; 
JOKER FUNC testing.TestTestContext has: 
;; (defn TestTestContext
;;   {:added "1.0"
;;    :go "testTestContext(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{13527021 T}) t])
;; 
JOKER FUNC testing.Verbose has: 
;; (defn ^ABEND042(cannot find typename testing.bool) Verbose
;;   "Verbose reports whether the -test.v flag is set."
;;   {:added "1.0"
;;    :go "verbose()"}
;;   [])
;; 
JOKER FUNC testing_test.ExampleB_RunParallel has: 
;; (defn ExampleB_RunParallel
;;   {:added "1.0"
;;    :go "exampleB_RunParallel()"}
;;   [])
;; 
JOKER FUNC testing_test.TestAllocsPerRun has: 
;; (defn TestAllocsPerRun
;;   {:added "1.0"
;;    :go "testAllocsPerRun(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{13462380 0xc00170a5c0}) t])
;; 
JOKER FUNC testing_test.TestMain has: 
;; (defn TestMain
;;   {:added "1.0"
;;    :go "testMain(m)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{13526600 0xc0047c3de0}) m])
;; 
JOKER FUNC testing_test.TestRoundDown10 has: 
;; (defn TestRoundDown10
;;   {:added "1.0"
;;    :go "testRoundDown10(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{13474146 0xc004b989e0}) t])
;; 
JOKER FUNC testing_test.TestRoundUp has: 
;; (defn TestRoundUp
;;   {:added "1.0"
;;    :go "testRoundUp(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{13474603 0xc004b89a00}) t])
;; 
JOKER FUNC testing_test.TestRunParallel has: 
;; (defn TestRunParallel
;;   {:added "1.0"
;;    :go "testRunParallel(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{13474826 0xc004b85ec0}) t])
;; 
JOKER FUNC testing_test.TestRunParallelFail has: 
;; (defn TestRunParallelFail
;;   {:added "1.0"
;;    :go "testRunParallelFail(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{13475308 0xc004b681c0}) t])
;; 
JOKER FUNC textproto.BenchmarkReadMIMEHeader has: 
;; (defn BenchmarkReadMIMEHeader
;;   {:added "1.0"
;;    :go "benchmarkReadMIMEHeader(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{9857265 0xc004a09940}) b])
;; 
JOKER FUNC textproto.BenchmarkUncommon has: 
;; (defn BenchmarkUncommon
;;   {:added "1.0"
;;    :go "benchmarkUncommon(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{9857862 0xc004a10520}) b])
;; 
JOKER FUNC textproto.CanonicalMIMEHeaderKey has: 
(defn ^String CanonicalMIMEHeaderKey
  "CanonicalMIMEHeaderKey returns the canonical format of the
MIME header key s. The canonicalization converts the first
letter and any letter following a hyphen to upper case;
the rest are converted to lowercase. For example, the
canonical key for "accept-encoding" is "Accept-Encoding".
MIME header keys are assumed to be ASCII only.
If s contains a space or invalid header field bytes, it is
returned without modifications."
  {:added "1.0"
   :go "canonicalMIMEHeaderKey(s)"}
  [^String s])

JOKER FUNC textproto.Dial has: 
;; (defn ^[{:conn ^ABEND881(unrecognized Expr type *ast.SelectorExpr at: &{io ReadWriteCloser}) conn} Error] Dial
;;   "Dial connects to the given address on the given network using net.Dial
;; and then returns a new Conn for the connection."
;;   {:added "1.0"
;;    :go "dial(network, addr)"}
;;   [^String network, ^String addr])
;; 
JOKER FUNC textproto.NewConn has: 
;; (defn ^{:conn ^ABEND881(unrecognized Expr type *ast.SelectorExpr at: &{io ReadWriteCloser}) conn} NewConn
;;   "NewConn returns a new Conn using conn for I/O."
;;   {:added "1.0"
;;    :go "newConn(conn)"}
;;   [^ABEND881(unrecognized Expr type *ast.SelectorExpr at: &{io ReadWriteCloser}) conn])
;; 
JOKER FUNC textproto.NewReader has: 
;; (defn ^{:r ^ABEND881(unrecognized Expr type *ast.StarExpr at: &{9827564 0xc004955460}) R, :dot ^ABEND881(unrecognized Expr type *ast.StarExpr at: &{9827583 dotReader}) dot, :buf ^ABEND881(unrecognized Expr type *ast.ArrayType at: &{9827599 <nil> byte}) buf} NewReader
;;   "NewReader returns a new Reader reading from r.
;; 
;; To avoid denial of service attacks, the provided bufio.Reader
;; should be reading from an io.LimitReader or similar Reader to bound
;; the size of responses."
;;   {:added "1.0"
;;    :go "newReader(r)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{9827890 0xc004955780}) r])
;; 
JOKER FUNC textproto.NewWriter has: 
;; (defn ^{:w ^ABEND881(unrecognized Expr type *ast.StarExpr at: &{9861588 0xc004a15060}) W, :dot ^ABEND881(unrecognized Expr type *ast.StarExpr at: &{9861607 dotWriter}) dot} NewWriter
;;   "NewWriter returns a new Writer writing to w."
;;   {:added "1.0"
;;    :go "newWriter(w)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{9861686 0xc004a15240}) w])
;; 
JOKER FUNC textproto.TestCanonicalMIMEHeaderKey has: 
;; (defn TestCanonicalMIMEHeaderKey
;;   {:added "1.0"
;;    :go "testCanonicalMIMEHeaderKey(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{9847269 0xc0049d5740}) t])
;; 
JOKER FUNC textproto.TestCommonHeaders has: 
;; (defn TestCommonHeaders
;;   {:added "1.0"
;;    :go "testCommonHeaders(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{9855742 0xc004a09020}) t])
;; 
JOKER FUNC textproto.TestDotWriter has: 
;; (defn TestDotWriter
;;   {:added "1.0"
;;    :go "testDotWriter(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{9826813 0xc004954ac0}) t])
;; 
JOKER FUNC textproto.TestLargeReadMIMEHeader has: 
;; (defn TestLargeReadMIMEHeader
;;   {:added "1.0"
;;    :go "testLargeReadMIMEHeader(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{9851029 0xc0049f9e60}) t])
;; 
JOKER FUNC textproto.TestPrintfLine has: 
;; (defn TestPrintfLine
;;   {:added "1.0"
;;    :go "testPrintfLine(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{9826582 0xc004954540}) t])
;; 
JOKER FUNC textproto.TestRFC959Lines has: 
;; (defn TestRFC959Lines
;;   "See https://www.ietf.org/rfc/rfc959.txt page 36."
;;   {:added "1.0"
;;    :go "testRFC959Lines(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{9854123 0xc0049ffee0}) t])
;; 
JOKER FUNC textproto.TestReadCodeLine has: 
;; (defn TestReadCodeLine
;;   {:added "1.0"
;;    :go "testReadCodeLine(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{9848440 0xc0049f2fa0}) t])
;; 
JOKER FUNC textproto.TestReadContinuedLine has: 
;; (defn TestReadContinuedLine
;;   {:added "1.0"
;;    :go "testReadContinuedLine(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{9847941 0xc0049f2580}) t])
;; 
JOKER FUNC textproto.TestReadDotBytes has: 
;; (defn TestReadDotBytes
;;   {:added "1.0"
;;    :go "testReadDotBytes(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{9849660 0xc0049f87a0}) t])
;; 
JOKER FUNC textproto.TestReadDotLines has: 
;; (defn TestReadDotLines
;;   {:added "1.0"
;;    :go "testReadDotLines(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{9849186 0xc0049f3f00}) t])
;; 
JOKER FUNC textproto.TestReadLine has: 
;; (defn TestReadLine
;;   {:added "1.0"
;;    :go "testReadLine(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{9847580 0xc0049d5d80}) t])
;; 
JOKER FUNC textproto.TestReadMIMEHeader has: 
;; (defn TestReadMIMEHeader
;;   {:added "1.0"
;;    :go "testReadMIMEHeader(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{9850130 0xc0049f8f80}) t])
;; 
JOKER FUNC textproto.TestReadMIMEHeaderMalformed has: 
;; (defn TestReadMIMEHeaderMalformed
;;   {:added "1.0"
;;    :go "testReadMIMEHeaderMalformed(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{9852207 0xc0049fed40}) t])
;; 
JOKER FUNC textproto.TestReadMIMEHeaderNoKey has: 
;; (defn TestReadMIMEHeaderNoKey
;;   {:added "1.0"
;;    :go "testReadMIMEHeaderNoKey(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{9850766 0xc0049f99a0}) t])
;; 
JOKER FUNC textproto.TestReadMIMEHeaderNonCompliant has: 
;; (defn TestReadMIMEHeaderNonCompliant
;;   "Test that we read slightly-bogus MIME headers seen in the wild,
;; with spaces before colons, and spaces in keys."
;;   {:added "1.0"
;;    :go "testReadMIMEHeaderNonCompliant(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{9851571 0xc0049fe680}) t])
;; 
JOKER FUNC textproto.TestReadMIMEHeaderSingle has: 
;; (defn TestReadMIMEHeaderSingle
;;   {:added "1.0"
;;    :go "testReadMIMEHeaderSingle(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{9850512 0xc0049f94e0}) t])
;; 
JOKER FUNC textproto.TestReadMIMEHeaderTrimContinued has: 
;; (defn TestReadMIMEHeaderTrimContinued
;;   "Test that continued lines are properly trimmed. Issue 11204."
;;   {:added "1.0"
;;    :go "testReadMIMEHeaderTrimContinued(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{9852866 0xc0049ff2c0}) t])
;; 
JOKER FUNC textproto.TestReadMultiLineError has: 
;; (defn TestReadMultiLineError
;;   "Test that multi-line errors are appropriately and fully read. Issue 10230."
;;   {:added "1.0"
;;    :go "testReadMultiLineError(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{9854633 0xc004a087a0}) t])
;; 
JOKER FUNC textproto.TrimBytes has: 
;; (defn ^[ABEND042(cannot find typename textproto.byte)] TrimBytes
;;   "TrimBytes returns b without leading and trailing ASCII space."
;;   {:added "1.0"
;;    :go "trimBytes(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.ArrayType at: &{9867152 <nil> byte}) b])
;; 
JOKER FUNC textproto.TrimString has: 
(defn ^String TrimString
  "TrimString returns s without leading and trailing ASCII space."
  {:added "1.0"
   :go "trimString(s)"}
  [^String s])

JOKER FUNC time.After has: 
;; (defn ^ABEND881(unrecognized Expr type *ast.ChanType at: &{14001074 14001074 2 Time}) After
;;   "After waits for the duration to elapse and then sends the current time
;; on the returned channel.
;; It is equivalent to NewTimer(d).C.
;; The underlying Timer is not recovered by the garbage collector
;; until the timer fires. If efficiency is a concern, use NewTimer
;; instead and call Timer.Stop if the timer is no longer needed."
;;   {:added "1.0"
;;    :go "after(d)"}
;;   [d])
;; 
JOKER FUNC time.AfterFunc has: 
;; (defn ^{:c ^ABEND881(unrecognized Expr type *ast.ChanType at: &{13997749 13997749 2 Time}) C, :r r} AfterFunc
;;   "AfterFunc waits for the duration to elapse and then calls f
;; in its own goroutine. It returns a Timer that can
;; be used to cancel the call using its Stop method."
;;   {:added "1.0"
;;    :go "afterFunc(d, f)"}
;;   [d, ^ABEND881(unrecognized Expr type *ast.FuncType at: &{14001311 0xc002a22000 <nil>}) f])
;; 
JOKER FUNC time.CheckRuntimeTimerOverflow has: 
;; (defn CheckRuntimeTimerOverflow
;;   "Test that a runtimeTimer with a duration so large it overflows
;; does not cause other timers to hang.
;; 
;; This test has to be in internal_test.go since it fiddles with
;; unexported data structures."
;;   {:added "1.0"
;;    :go "checkRuntimeTimerOverflow()"}
;;   [])
;; 
JOKER FUNC time.Date has: 
;; (defn ^{:wall wall, :ext ext, :loc ^ABEND881(unrecognized Expr type *ast.StarExpr at: &{13924526 Location}) loc} Date
;;   "Date returns the Time corresponding to
;; 	yyyy-mm-dd hh:mm:ss + nsec nanoseconds
;; in the appropriate zone for that time in the given location.
;; 
;; The month, day, hour, min, sec, and nsec values may be outside
;; their usual ranges and will be normalized during the conversion.
;; For example, October 32 converts to November 1.
;; 
;; A daylight savings time transition skips or repeats times.
;; For example, in the United States, March 13, 2011 2:15am never occurred,
;; while November 6, 2011 1:15am occurred twice. In such cases, the
;; choice of time zone, and therefore the time, is not well-defined.
;; Date returns a time that is correct in one of the two zones involved
;; in the transition, but it does not guarantee which.
;; 
;; Date panics if loc is nil."
;;   {:added "1.0"
;;    :go "date(year, month, day, hour, min, sec, nsec, loc)"}
;;   [^Int year, month, ^Int day, ^Int hour, ^Int min, ^Int sec, ^Int nsec, ^ABEND881(unrecognized Expr type *ast.StarExpr at: &{13957525 Location}) loc])
;; 
JOKER FUNC time.FixedZone has: 
;; (defn ^{:name ^String name, :zone ^ABEND881(unrecognized Expr type *ast.ArrayType at: &{13874519 <nil> zone}) zone, :tx ^ABEND881(unrecognized Expr type *ast.ArrayType at: &{13874532 <nil> zoneTrans}) tx, :cachestart cacheStart, :cacheend cacheEnd, :cachezone ^ABEND881(unrecognized Expr type *ast.StarExpr at: &{13874985 zone}) cacheZone} FixedZone
;;   "FixedZone returns a Location that always uses
;; the given zone name and offset (seconds east of UTC)."
;;   {:added "1.0"
;;    :go "fixedZone(name, offset)"}
;;   [^String name, ^Int offset])
;; 
JOKER FUNC time.ForceUSPacificForTesting has: 
;; (defn ForceUSPacificForTesting
;;   {:added "1.0"
;;    :go "forceUSPacificForTesting()"}
;;   [])
;; 
JOKER FUNC time.LoadLocation has: 
;; (defn ^[{:name ^String name, :zone ^ABEND881(unrecognized Expr type *ast.ArrayType at: &{13874519 <nil> zone}) zone, :tx ^ABEND881(unrecognized Expr type *ast.ArrayType at: &{13874532 <nil> zoneTrans}) tx, :cachestart cacheStart, :cacheend cacheEnd, :cachezone ^ABEND881(unrecognized Expr type *ast.StarExpr at: &{13874985 zone}) cacheZone} Error] LoadLocation
;;   "LoadLocation returns the Location with the given name.
;; 
;; If the name is "" or "UTC", LoadLocation returns UTC.
;; If the name is "Local", LoadLocation returns Local.
;; 
;; Otherwise, the name is taken to be a location name corresponding to a file
;; in the IANA Time Zone database, such as "America/New_York".
;; 
;; The time zone database needed by LoadLocation may not be
;; present on all systems, especially non-Unix systems.
;; LoadLocation looks in the directory or uncompressed zip file
;; named by the ZONEINFO environment variable, if any, then looks in
;; known installation locations on Unix systems,
;; and finally looks in $GOROOT/lib/time/zoneinfo.zip."
;;   {:added "1.0"
;;    :go "loadLocation(name)"}
;;   [^String name])
;; 
JOKER FUNC time.LoadLocationFromTZData has: 
;; (defn ^[{:name ^String name, :zone ^ABEND881(unrecognized Expr type *ast.ArrayType at: &{13874519 <nil> zone}) zone, :tx ^ABEND881(unrecognized Expr type *ast.ArrayType at: &{13874532 <nil> zoneTrans}) tx, :cachestart cacheStart, :cacheend cacheEnd, :cachezone ^ABEND881(unrecognized Expr type *ast.StarExpr at: &{13874985 zone}) cacheZone} Error] LoadLocationFromTZData
;;   "LoadLocationFromTZData returns a Location with the given name
;; initialized from the IANA Time Zone database-formatted data.
;; The data should be in the format of a standard IANA time zone file
;; (for example, the content of /etc/localtime on Unix systems)."
;;   {:added "1.0"
;;    :go "loadLocationFromTZData(name, data)"}
;;   [^String name, ^ABEND881(unrecognized Expr type *ast.ArrayType at: &{14044091 <nil> byte}) data])
;; 
JOKER FUNC time.NewTicker has: 
;; (defn ^{:c ^ABEND881(unrecognized Expr type *ast.ChanType at: &{13972584 13972584 2 Time}) C, :r r} NewTicker
;;   "NewTicker returns a new Ticker containing a channel that will send the
;; time with a period specified by the duration argument.
;; It adjusts the intervals or drops ticks to make up for slow receivers.
;; The duration d must be greater than zero; if not, NewTicker will panic.
;; Stop the ticker to release associated resources."
;;   {:added "1.0"
;;    :go "newTicker(d)"}
;;   [d])
;; 
JOKER FUNC time.NewTimer has: 
;; (defn ^{:c ^ABEND881(unrecognized Expr type *ast.ChanType at: &{13997749 13997749 2 Time}) C, :r r} NewTimer
;;   "NewTimer creates a new Timer that will send
;; the current time on its channel after at least duration d."
;;   {:added "1.0"
;;    :go "newTimer(d)"}
;;   [d])
;; 
JOKER FUNC time.Now has: 
;; (defn ^{:wall wall, :ext ext, :loc ^ABEND881(unrecognized Expr type *ast.StarExpr at: &{13924526 Location}) loc} Now
;;   "Now returns the current local time."
;;   {:added "1.0"
;;    :go "now()"}
;;   [])
;; 
JOKER FUNC time.Parse has: 
;; (defn ^[{:wall wall, :ext ext, :loc ^ABEND881(unrecognized Expr type *ast.StarExpr at: &{13924526 Location}) loc} Error] Parse
;;   "Parse parses a formatted string and returns the time value it represents.
;; The layout defines the format by showing how the reference time,
;; defined to be
;; 	Mon Jan 2 15:04:05 -0700 MST 2006
;; would be interpreted if it were the value; it serves as an example of
;; the input format. The same interpretation will then be made to the
;; input string.
;; 
;; Predefined layouts ANSIC, UnixDate, RFC3339 and others describe standard
;; and convenient representations of the reference time. For more information
;; about the formats and the definition of the reference time, see the
;; documentation for ANSIC and the other constants defined by this package.
;; Also, the executable example for Time.Format demonstrates the working
;; of the layout string in detail and is a good reference.
;; 
;; Elements omitted from the value are assumed to be zero or, when
;; zero is impossible, one, so parsing "3:04pm" returns the time
;; corresponding to Jan 1, year 0, 15:04:00 UTC (note that because the year is
;; 0, this time is before the zero Time).
;; Years must be in the range 0000..9999. The day of the week is checked
;; for syntax but it is otherwise ignored.
;; 
;; In the absence of a time zone indicator, Parse returns a time in UTC.
;; 
;; When parsing a time with a zone offset like -0700, if the offset corresponds
;; to a time zone used by the current location (Local), then Parse uses that
;; location and zone in the returned time. Otherwise it records the time as
;; being in a fabricated location with time fixed at the given zone offset.
;; 
;; When parsing a time with a zone abbreviation like MST, if the zone abbreviation
;; has a defined offset in the current location, then that offset is used.
;; The zone abbreviation "UTC" is recognized as UTC regardless of location.
;; If the zone abbreviation is unknown, Parse records the time as being
;; in a fabricated location with the given zone abbreviation and a zero offset.
;; This choice means that such a time can be parsed and reformatted with the
;; same layout losslessly, but the exact instant used in the representation will
;; differ by the actual zone offset. To avoid such problems, prefer time layouts
;; that use a numeric zone offset, or use ParseInLocation."
;;   {:added "1.0"
;;    :go "parse(layout, value)"}
;;   [^String layout, ^String value])
;; 
JOKER FUNC time.ParseDuration has: 
;; (defn ^[ABEND042(cannot find typename time.int64) Error] ParseDuration
;;   "ParseDuration parses a duration string.
;; A duration string is a possibly signed sequence of
;; decimal numbers, each with optional fraction and a unit suffix,
;; such as "300ms", "-1.5h" or "2h45m".
;; Valid time units are "ns", "us" (or "µs"), "ms", "s", "m", "h"."
;;   {:added "1.0"
;;    :go "parseDuration(s)"}
;;   [^String s])
;; 
JOKER FUNC time.ParseInLocation has: 
;; (defn ^[{:wall wall, :ext ext, :loc ^ABEND881(unrecognized Expr type *ast.StarExpr at: &{13924526 Location}) loc} Error] ParseInLocation
;;   "ParseInLocation is like Parse but differs in two important ways.
;; First, in the absence of time zone information, Parse interprets a time as UTC;
;; ParseInLocation interprets the time as in the given location.
;; Second, when given a zone offset or abbreviation, Parse tries to match it
;; against the Local location; ParseInLocation uses the given location."
;;   {:added "1.0"
;;    :go "parseInLocation(layout, value, loc)"}
;;   [^String layout, ^String value, ^ABEND881(unrecognized Expr type *ast.StarExpr at: &{14077220 Location}) loc])
;; 
JOKER FUNC time.ResetLocalOnceForTest has: 
;; (defn ResetLocalOnceForTest
;;   {:added "1.0"
;;    :go "resetLocalOnceForTest()"}
;;   [])
;; 
JOKER FUNC time.ResetZoneinfoForTesting has: 
;; (defn ResetZoneinfoForTesting
;;   {:added "1.0"
;;    :go "resetZoneinfoForTesting()"}
;;   [])
;; 
JOKER FUNC time.Since has: 
;; (defn ^ABEND042(cannot find typename time.int64) Since
;;   "Since returns the time elapsed since t.
;; It is shorthand for time.Now().Sub(t)."
;;   {:added "1.0"
;;    :go "since(t)"}
;;   [t])
;; 
JOKER FUNC time.Sleep has: 
;; (defn Sleep
;;   "Sleep pauses the current goroutine for at least the duration d.
;; A negative or zero duration causes Sleep to return immediately."
;;   {:added "1.0"
;;    :go "sleep(d)"}
;;   [d])
;; 
JOKER FUNC time.Tick has: 
;; (defn ^ABEND881(unrecognized Expr type *ast.ChanType at: &{13974065 13974065 2 Time}) Tick
;;   "Tick is a convenience wrapper for NewTicker providing access to the ticking
;; channel only. While Tick is useful for clients that have no need to shut down
;; the Ticker, be aware that without a way to shut it down the underlying
;; Ticker cannot be recovered by the garbage collector; it "leaks".
;; Unlike NewTicker, Tick will return nil if d <= 0."
;;   {:added "1.0"
;;    :go "tick(d)"}
;;   [d])
;; 
JOKER FUNC time.Unix has: 
;; (defn ^{:wall wall, :ext ext, :loc ^ABEND881(unrecognized Expr type *ast.StarExpr at: &{13924526 Location}) loc} Unix
;;   "Unix returns the local Time corresponding to the given Unix time,
;; sec seconds and nsec nanoseconds since January 1, 1970 UTC.
;; It is valid to pass nsec outside the range [0, 999999999].
;; Not all sec values have a corresponding time value. One such
;; value is 1<<63-1 (the largest int64 value)."
;;   {:added "1.0"
;;    :go "unix(sec, nsec)"}
;;   [sec, nsec])
;; 
JOKER FUNC time.Until has: 
;; (defn ^ABEND042(cannot find typename time.int64) Until
;;   "Until returns the duration until t.
;; It is shorthand for t.Sub(time.Now())."
;;   {:added "1.0"
;;    :go "until(t)"}
;;   [t])
;; 
JOKER FUNC time.ZoneinfoForTesting has: 
(defn ^String ZoneinfoForTesting
  {:added "1.0"
   :go "zoneinfoForTesting()"}
  [])

JOKER FUNC time_test.BenchmarkAfter has: 
;; (defn BenchmarkAfter
;;   {:added "1.0"
;;    :go "benchmarkAfter(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{13906487 0xc004eeb040}) b])
;; 
JOKER FUNC time_test.BenchmarkAfterFunc has: 
;; (defn BenchmarkAfterFunc
;;   {:added "1.0"
;;    :go "benchmarkAfterFunc(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{13906261 0xc004eeab80}) b])
;; 
JOKER FUNC time_test.BenchmarkDay has: 
;; (defn BenchmarkDay
;;   {:added "1.0"
;;    :go "benchmarkDay(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{14039959 0xc005b2dca0}) b])
;; 
JOKER FUNC time_test.BenchmarkFormat has: 
;; (defn BenchmarkFormat
;;   {:added "1.0"
;;    :go "benchmarkFormat(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{14038822 0xc005afb360}) b])
;; 
JOKER FUNC time_test.BenchmarkFormatNow has: 
;; (defn BenchmarkFormatNow
;;   {:added "1.0"
;;    :go "benchmarkFormatNow(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{14038961 0xc005afbaa0}) b])
;; 
JOKER FUNC time_test.BenchmarkHour has: 
;; (defn BenchmarkHour
;;   {:added "1.0"
;;    :go "benchmarkHour(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{14039668 0xc005b27ce0}) b])
;; 
JOKER FUNC time_test.BenchmarkMarshalJSON has: 
;; (defn BenchmarkMarshalJSON
;;   {:added "1.0"
;;    :go "benchmarkMarshalJSON(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{14039195 0xc005b0c400}) b])
;; 
JOKER FUNC time_test.BenchmarkMarshalText has: 
;; (defn BenchmarkMarshalText
;;   {:added "1.0"
;;    :go "benchmarkMarshalText(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{14039301 0xc005b0cc80}) b])
;; 
JOKER FUNC time_test.BenchmarkNow has: 
;; (defn BenchmarkNow
;;   {:added "1.0"
;;    :go "benchmarkNow(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{14038640 0xc005afaee0}) b])
;; 
JOKER FUNC time_test.BenchmarkNowUnixNano has: 
;; (defn BenchmarkNowUnixNano
;;   {:added "1.0"
;;    :go "benchmarkNowUnixNano(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{14038728 0xc005afb100}) b])
;; 
JOKER FUNC time_test.BenchmarkParse has: 
;; (defn BenchmarkParse
;;   {:added "1.0"
;;    :go "benchmarkParse(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{14039401 0xc005b1aea0}) b])
;; 
JOKER FUNC time_test.BenchmarkParseDuration has: 
;; (defn BenchmarkParseDuration
;;   {:added "1.0"
;;    :go "benchmarkParseDuration(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{14039522 0xc005b26600}) b])
;; 
JOKER FUNC time_test.BenchmarkReset has: 
;; (defn BenchmarkReset
;;   {:added "1.0"
;;    :go "benchmarkReset(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{13907150 0xc004ef3020}) b])
;; 
JOKER FUNC time_test.BenchmarkSecond has: 
;; (defn BenchmarkSecond
;;   {:added "1.0"
;;    :go "benchmarkSecond(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{14039766 0xc005b2c6e0}) b])
;; 
JOKER FUNC time_test.BenchmarkSimultaneousAfterFunc has: 
;; (defn BenchmarkSimultaneousAfterFunc
;;   {:added "1.0"
;;    :go "benchmarkSimultaneousAfterFunc(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{13906751 0xc004eeb600}) b])
;; 
JOKER FUNC time_test.BenchmarkSleep has: 
;; (defn BenchmarkSleep
;;   {:added "1.0"
;;    :go "benchmarkSleep(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{13907302 0xc004efac20}) b])
;; 
JOKER FUNC time_test.BenchmarkStartStop has: 
;; (defn BenchmarkStartStop
;;   {:added "1.0"
;;    :go "benchmarkStartStop(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{13906930 0xc004eebaa0}) b])
;; 
JOKER FUNC time_test.BenchmarkStop has: 
;; (defn BenchmarkStop
;;   {:added "1.0"
;;    :go "benchmarkStop(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{13906602 0xc004eeb300}) b])
;; 
JOKER FUNC time_test.BenchmarkTicker has: 
;; (defn BenchmarkTicker
;;   {:added "1.0"
;;    :go "benchmarkTicker(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{14095521 0xc005f0ea00}) b])
;; 
JOKER FUNC time_test.BenchmarkYear has: 
;; (defn BenchmarkYear
;;   {:added "1.0"
;;    :go "benchmarkYear(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{14039864 0xc005b2ce40}) b])
;; 
JOKER FUNC time_test.ExampleAfter has: 
;; (defn ExampleAfter
;;   {:added "1.0"
;;    :go "exampleAfter()"}
;;   [])
;; 
JOKER FUNC time_test.ExampleDate has: 
;; (defn ExampleDate
;;   {:added "1.0"
;;    :go "exampleDate()"}
;;   [])
;; 
JOKER FUNC time_test.ExampleDuration has: 
;; (defn ExampleDuration
;;   {:added "1.0"
;;    :go "exampleDuration()"}
;;   [])
;; 
JOKER FUNC time_test.ExampleDuration_Hours has: 
;; (defn ExampleDuration_Hours
;;   {:added "1.0"
;;    :go "exampleDuration_Hours()"}
;;   [])
;; 
JOKER FUNC time_test.ExampleDuration_Minutes has: 
;; (defn ExampleDuration_Minutes
;;   {:added "1.0"
;;    :go "exampleDuration_Minutes()"}
;;   [])
;; 
JOKER FUNC time_test.ExampleDuration_Nanoseconds has: 
;; (defn ExampleDuration_Nanoseconds
;;   {:added "1.0"
;;    :go "exampleDuration_Nanoseconds()"}
;;   [])
;; 
JOKER FUNC time_test.ExampleDuration_Round has: 
;; (defn ExampleDuration_Round
;;   {:added "1.0"
;;    :go "exampleDuration_Round()"}
;;   [])
;; 
JOKER FUNC time_test.ExampleDuration_Seconds has: 
;; (defn ExampleDuration_Seconds
;;   {:added "1.0"
;;    :go "exampleDuration_Seconds()"}
;;   [])
;; 
JOKER FUNC time_test.ExampleDuration_String has: 
;; (defn ExampleDuration_String
;;   {:added "1.0"
;;    :go "exampleDuration_String()"}
;;   [])
;; 
JOKER FUNC time_test.ExampleDuration_Truncate has: 
;; (defn ExampleDuration_Truncate
;;   {:added "1.0"
;;    :go "exampleDuration_Truncate()"}
;;   [])
;; 
JOKER FUNC time_test.ExampleFixedZone has: 
;; (defn ExampleFixedZone
;;   {:added "1.0"
;;    :go "exampleFixedZone()"}
;;   [])
;; 
JOKER FUNC time_test.ExampleLocation has: 
;; (defn ExampleLocation
;;   {:added "1.0"
;;    :go "exampleLocation()"}
;;   [])
;; 
JOKER FUNC time_test.ExampleMonth has: 
;; (defn ExampleMonth
;;   {:added "1.0"
;;    :go "exampleMonth()"}
;;   [])
;; 
JOKER FUNC time_test.ExampleNewTicker has: 
;; (defn ExampleNewTicker
;;   {:added "1.0"
;;    :go "exampleNewTicker()"}
;;   [])
;; 
JOKER FUNC time_test.ExampleParse has: 
;; (defn ExampleParse
;;   {:added "1.0"
;;    :go "exampleParse()"}
;;   [])
;; 
JOKER FUNC time_test.ExampleParseDuration has: 
;; (defn ExampleParseDuration
;;   {:added "1.0"
;;    :go "exampleParseDuration()"}
;;   [])
;; 
JOKER FUNC time_test.ExampleParseInLocation has: 
;; (defn ExampleParseInLocation
;;   {:added "1.0"
;;    :go "exampleParseInLocation()"}
;;   [])
;; 
JOKER FUNC time_test.ExampleSleep has: 
;; (defn ExampleSleep
;;   {:added "1.0"
;;    :go "exampleSleep()"}
;;   [])
;; 
JOKER FUNC time_test.ExampleTick has: 
;; (defn ExampleTick
;;   {:added "1.0"
;;    :go "exampleTick()"}
;;   [])
;; 
JOKER FUNC time_test.ExampleTime_Add has: 
;; (defn ExampleTime_Add
;;   {:added "1.0"
;;    :go "exampleTime_Add()"}
;;   [])
;; 
JOKER FUNC time_test.ExampleTime_AddDate has: 
;; (defn ExampleTime_AddDate
;;   {:added "1.0"
;;    :go "exampleTime_AddDate()"}
;;   [])
;; 
JOKER FUNC time_test.ExampleTime_After has: 
;; (defn ExampleTime_After
;;   {:added "1.0"
;;    :go "exampleTime_After()"}
;;   [])
;; 
JOKER FUNC time_test.ExampleTime_AppendFormat has: 
;; (defn ExampleTime_AppendFormat
;;   {:added "1.0"
;;    :go "exampleTime_AppendFormat()"}
;;   [])
;; 
JOKER FUNC time_test.ExampleTime_Before has: 
;; (defn ExampleTime_Before
;;   {:added "1.0"
;;    :go "exampleTime_Before()"}
;;   [])
;; 
JOKER FUNC time_test.ExampleTime_Date has: 
;; (defn ExampleTime_Date
;;   {:added "1.0"
;;    :go "exampleTime_Date()"}
;;   [])
;; 
JOKER FUNC time_test.ExampleTime_Day has: 
;; (defn ExampleTime_Day
;;   {:added "1.0"
;;    :go "exampleTime_Day()"}
;;   [])
;; 
JOKER FUNC time_test.ExampleTime_Equal has: 
;; (defn ExampleTime_Equal
;;   {:added "1.0"
;;    :go "exampleTime_Equal()"}
;;   [])
;; 
JOKER FUNC time_test.ExampleTime_Format has: 
;; (defn ExampleTime_Format
;;   {:added "1.0"
;;    :go "exampleTime_Format()"}
;;   [])
;; 
JOKER FUNC time_test.ExampleTime_Round has: 
;; (defn ExampleTime_Round
;;   {:added "1.0"
;;    :go "exampleTime_Round()"}
;;   [])
;; 
JOKER FUNC time_test.ExampleTime_String has: 
;; (defn ExampleTime_String
;;   {:added "1.0"
;;    :go "exampleTime_String()"}
;;   [])
;; 
JOKER FUNC time_test.ExampleTime_Sub has: 
;; (defn ExampleTime_Sub
;;   {:added "1.0"
;;    :go "exampleTime_Sub()"}
;;   [])
;; 
JOKER FUNC time_test.ExampleTime_Truncate has: 
;; (defn ExampleTime_Truncate
;;   {:added "1.0"
;;    :go "exampleTime_Truncate()"}
;;   [])
;; 
JOKER FUNC time_test.ExampleTime_Unix has: 
;; (defn ExampleTime_Unix
;;   {:added "1.0"
;;    :go "exampleTime_Unix()"}
;;   [])
;; 
JOKER FUNC time_test.Test12AMIsMidnight has: 
;; (defn Test12AMIsMidnight
;;   {:added "1.0"
;;    :go "test12AMIsMidnight(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{13993017 0xc00556c260}) t])
;; 
JOKER FUNC time_test.Test12PMIsNoon has: 
;; (defn Test12PMIsNoon
;;   {:added "1.0"
;;    :go "test12PMIsNoon(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{13992632 0xc00554cb00}) t])
;; 
JOKER FUNC time_test.TestAddDate has: 
;; (defn TestAddDate
;;   {:added "1.0"
;;    :go "testAddDate(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{14019905 0xc0058843c0}) t])
;; 
JOKER FUNC time_test.TestAddToExactSecond has: 
;; (defn TestAddToExactSecond
;;   {:added "1.0"
;;    :go "testAddToExactSecond(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{14020905 0xc005885760}) t])
;; 
JOKER FUNC time_test.TestAfter has: 
;; (defn TestAfter
;;   {:added "1.0"
;;    :go "testAfter(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{13907505 0xc004f07d40}) t])
;; 
JOKER FUNC time_test.TestAfterFunc has: 
;; (defn TestAfterFunc
;;   "Test the basic function calling behavior. Correct queueing
;; behavior is tested elsewhere, since After and AfterFunc share
;; the same code."
;;   {:added "1.0"
;;    :go "testAfterFunc(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{13904950 0xc004ee53e0}) t])
;; 
JOKER FUNC time_test.TestAfterQueuing has: 
;; (defn TestAfterQueuing
;;   {:added "1.0"
;;    :go "testAfterQueuing(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{13908964 0xc004f167e0}) t])
;; 
JOKER FUNC time_test.TestAfterStop has: 
;; (defn TestAfterStop
;;   {:added "1.0"
;;    :go "testAfterStop(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{13908432 0xc004f0dea0}) t])
;; 
JOKER FUNC time_test.TestAfterStress has: 
;; (defn TestAfterStress
;;   {:added "1.0"
;;    :go "testAfterStress(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{13905163 0xc004ee58a0}) t])
;; 
JOKER FUNC time_test.TestAfterTick has: 
;; (defn TestAfterTick
;;   {:added "1.0"
;;    :go "testAfterTick(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{13907937 0xc004f0d5e0}) t])
;; 
JOKER FUNC time_test.TestConcurrentTimerReset has: 
;; (defn TestConcurrentTimerReset
;;   "Issue 25686: hard crash on concurrent timer access.
;; This test deliberately invokes a race condition.
;; We are testing that we don't crash with "fatal error: panic holding locks"."
;;   {:added "1.0"
;;    :go "testConcurrentTimerReset(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{14041453 0xc005b6f260}) t])
;; 
JOKER FUNC time_test.TestCountMallocs has: 
;; (defn TestCountMallocs
;;   {:added "1.0"
;;    :go "testCountMallocs(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{14029519 0xc0059925a0}) t])
;; 
JOKER FUNC time_test.TestDate has: 
;; (defn TestDate
;;   {:added "1.0"
;;    :go "testDate(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{14019311 0xc0058714e0}) t])
;; 
JOKER FUNC time_test.TestDaysIn has: 
;; (defn TestDaysIn
;;   {:added "1.0"
;;    :go "testDaysIn(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{14020534 0xc005885180}) t])
;; 
JOKER FUNC time_test.TestDefaultLoc has: 
;; (defn TestDefaultLoc
;;   {:added "1.0"
;;    :go "testDefaultLoc(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{14038337 0xc005afaa40}) t])
;; 
JOKER FUNC time_test.TestDurationHours has: 
;; (defn TestDurationHours
;;   {:added "1.0"
;;    :go "testDurationHours(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{14033317 0xc0059d9140}) t])
;; 
JOKER FUNC time_test.TestDurationMinutes has: 
;; (defn TestDurationMinutes
;;   {:added "1.0"
;;    :go "testDurationMinutes(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{14032912 0xc0059d8940}) t])
;; 
JOKER FUNC time_test.TestDurationNanoseconds has: 
;; (defn TestDurationNanoseconds
;;   {:added "1.0"
;;    :go "testDurationNanoseconds(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{14032217 0xc0059c5f60}) t])
;; 
JOKER FUNC time_test.TestDurationRound has: 
;; (defn TestDurationRound
;;   {:added "1.0"
;;    :go "testDurationRound(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{14034925 0xc0059f03a0}) t])
;; 
JOKER FUNC time_test.TestDurationSeconds has: 
;; (defn TestDurationSeconds
;;   {:added "1.0"
;;    :go "testDurationSeconds(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{14032513 0xc0059d4480}) t])
;; 
JOKER FUNC time_test.TestDurationString has: 
;; (defn TestDurationString
;;   {:added "1.0"
;;    :go "testDurationString(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{14017247 0xc005838620}) t])
;; 
JOKER FUNC time_test.TestDurationTruncate has: 
;; (defn TestDurationTruncate
;;   {:added "1.0"
;;    :go "testDurationTruncate(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{14034019 0xc0059e0060}) t])
;; 
JOKER FUNC time_test.TestEnvVarUsage has: 
;; (defn TestEnvVarUsage
;;   {:added "1.0"
;;    :go "testEnvVarUsage(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{13914443 0xc0050337c0}) t])
;; 
JOKER FUNC time_test.TestFirstZone has: 
;; (defn TestFirstZone
;;   "Test that we get the correct results for times before the first
;; transition time. To do this we explicitly check early dates in a
;; couple of specific timezones."
;;   {:added "1.0"
;;    :go "testFirstZone(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{13915726 0xc005100a40}) t])
;; 
JOKER FUNC time_test.TestFormat has: 
;; (defn TestFormat
;;   {:added "1.0"
;;    :go "testFormat(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{13976164 0xc0053e5880}) t])
;; 
JOKER FUNC time_test.TestFormatAndParse has: 
;; (defn TestFormatAndParse
;;   {:added "1.0"
;;    :go "testFormatAndParse(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{13988007 0xc005491a80}) t])
;; 
JOKER FUNC time_test.TestFormatSecondsInTimeZone has: 
;; (defn TestFormatSecondsInTimeZone
;;   {:added "1.0"
;;    :go "testFormatSecondsInTimeZone(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{13995542 0xc005589de0}) t])
;; 
JOKER FUNC time_test.TestFormatShortYear has: 
;; (defn TestFormatShortYear
;;   {:added "1.0"
;;    :go "testFormatShortYear(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{13976805 0xc0053f6440}) t])
;; 
JOKER FUNC time_test.TestFormatSingleDigits has: 
;; (defn TestFormatSingleDigits
;;   "issue 12440."
;;   {:added "1.0"
;;    :go "testFormatSingleDigits(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{13976514 0xc0053e5e40}) t])
;; 
JOKER FUNC time_test.TestHasMonotonicClock has: 
;; (defn TestHasMonotonicClock
;;   {:added "1.0"
;;    :go "testHasMonotonicClock(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{13963501 0xc0052fb360}) t])
;; 
JOKER FUNC time_test.TestISOWeek has: 
;; (defn TestISOWeek
;;   {:added "1.0"
;;    :go "testISOWeek(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{14014246 0xc0057cbfc0}) t])
;; 
JOKER FUNC time_test.TestInvalidTimeGob has: 
;; (defn TestInvalidTimeGob
;;   {:added "1.0"
;;    :go "testInvalidTimeGob(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{14022578 0xc0058945e0}) t])
;; 
JOKER FUNC time_test.TestInvalidTimeJSON has: 
;; (defn TestInvalidTimeJSON
;;   {:added "1.0"
;;    :go "testInvalidTimeJSON(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{14024793 0xc00589bb20}) t])
;; 
JOKER FUNC time_test.TestIssue5745 has: 
;; (defn TestIssue5745
;;   "Test that a panic while deleting a timer does not leave
;; the timers mutex held, deadlocking a ticker.Stop in a defer."
;;   {:added "1.0"
;;    :go "testIssue5745(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{13912859 0xc005032020}) t])
;; 
JOKER FUNC time_test.TestLoadFixed has: 
;; (defn TestLoadFixed
;;   {:added "1.0"
;;    :go "testLoadFixed(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{14029880 0xc0059a4840}) t])
;; 
JOKER FUNC time_test.TestLoadLocationFromTZData has: 
;; (defn TestLoadLocationFromTZData
;;   {:added "1.0"
;;    :go "testLoadLocationFromTZData(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{13916950 0xc0051b6b60}) t])
;; 
JOKER FUNC time_test.TestLoadLocationValidatesNames has: 
;; (defn TestLoadLocationValidatesNames
;;   {:added "1.0"
;;    :go "testLoadLocationValidatesNames(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{13914973 0xc005033e80}) t])
;; 
JOKER FUNC time_test.TestLoadLocationZipFile has: 
;; (defn TestLoadLocationZipFile
;;   {:added "1.0"
;;    :go "testLoadLocationZipFile(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{13985789 0xc00544d620}) t])
;; 
JOKER FUNC time_test.TestLocationNames has: 
;; (defn TestLocationNames
;;   {:added "1.0"
;;    :go "testLocationNames(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{13916679 0xc0051b66e0}) t])
;; 
JOKER FUNC time_test.TestLocationRace has: 
;; (defn TestLocationRace
;;   "golang.org/issue/4622"
;;   {:added "1.0"
;;    :go "testLocationRace(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{14029016 0xc005977be0}) t])
;; 
JOKER FUNC time_test.TestMarshalBinaryZeroTime has: 
;; (defn TestMarshalBinaryZeroTime
;;   {:added "1.0"
;;    :go "testMarshalBinaryZeroTime(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{14040066 0xc005b34740}) t])
;; 
JOKER FUNC time_test.TestMidnightIs12AM has: 
;; (defn TestMidnightIs12AM
;;   {:added "1.0"
;;    :go "testMidnightIs12AM(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{13992318 0xc00554c4e0}) t])
;; 
JOKER FUNC time_test.TestMinutesInTimeZone has: 
;; (defn TestMinutesInTimeZone
;;   {:added "1.0"
;;    :go "testMinutesInTimeZone(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{13993910 0xc005588880}) t])
;; 
JOKER FUNC time_test.TestMissingZone has: 
;; (defn TestMissingZone
;;   "Check that a time without a Zone still produces a (numeric) time zone
;; when formatted with MST as a requested zone."
;;   {:added "1.0"
;;    :go "testMissingZone(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{13993540 0xc00557c8c0}) t])
;; 
JOKER FUNC time_test.TestMonotonicAdd has: 
;; (defn TestMonotonicAdd
;;   {:added "1.0"
;;    :go "testMonotonicAdd(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{13964816 0xc0053247c0}) t])
;; 
JOKER FUNC time_test.TestMonotonicOverflow has: 
;; (defn TestMonotonicOverflow
;;   {:added "1.0"
;;    :go "testMonotonicOverflow(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{13968965 0xc005376700}) t])
;; 
JOKER FUNC time_test.TestMonotonicString has: 
;; (defn TestMonotonicString
;;   {:added "1.0"
;;    :go "testMonotonicString(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{13970642 0xc0053c0220}) t])
;; 
JOKER FUNC time_test.TestMonotonicSub has: 
;; (defn TestMonotonicSub
;;   {:added "1.0"
;;    :go "testMonotonicSub(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{13966233 0xc00533efa0}) t])
;; 
JOKER FUNC time_test.TestNanosecondsToLocalTime has: 
;; (defn TestNanosecondsToLocalTime
;;   {:added "1.0"
;;    :go "testNanosecondsToLocalTime(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{14005981 0xc0056d8e60}) t])
;; 
JOKER FUNC time_test.TestNanosecondsToUTC has: 
;; (defn TestNanosecondsToUTC
;;   {:added "1.0"
;;    :go "testNanosecondsToUTC(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{14005047 0xc0056b0720}) t])
;; 
JOKER FUNC time_test.TestNanosecondsToUTCAndBack has: 
;; (defn TestNanosecondsToUTCAndBack
;;   {:added "1.0"
;;    :go "testNanosecondsToUTCAndBack(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{14006887 0xc0056ee0a0}) t])
;; 
JOKER FUNC time_test.TestNewTickerLtZeroDuration has: 
;; (defn TestNewTickerLtZeroDuration
;;   "Test that NewTicker panics when given a duration less than zero."
;;   {:added "1.0"
;;    :go "testNewTickerLtZeroDuration(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{14095355 0xc005f069c0}) t])
;; 
JOKER FUNC time_test.TestNoonIs12PM has: 
;; (defn TestNoonIs12PM
;;   {:added "1.0"
;;    :go "testNoonIs12PM(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{13992006 0xc005505ec0}) t])
;; 
JOKER FUNC time_test.TestNotGobEncodableTime has: 
;; (defn TestNotGobEncodableTime
;;   {:added "1.0"
;;    :go "testNotGobEncodableTime(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{14023501 0xc005895960}) t])
;; 
JOKER FUNC time_test.TestNotJSONEncodableTime has: 
;; (defn TestNotJSONEncodableTime
;;   {:added "1.0"
;;    :go "testNotJSONEncodableTime(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{14025298 0xc0058d0840}) t])
;; 
JOKER FUNC time_test.TestOverflowRuntimeTimer has: 
;; (defn TestOverflowRuntimeTimer
;;   {:added "1.0"
;;    :go "testOverflowRuntimeTimer(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{13913386 0xc005032760}) t])
;; 
JOKER FUNC time_test.TestOverflowSleep has: 
;; (defn TestOverflowSleep
;;   "Test that sleeping for an interval so large it overflows does not
;; result in a short sleep duration."
;;   {:added "1.0"
;;    :go "testOverflowSleep(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{13912409 0xc004f699e0}) t])
;; 
JOKER FUNC time_test.TestParse has: 
;; (defn TestParse
;;   {:added "1.0"
;;    :go "testParse(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{13981803 0xc005428260}) t])
;; 
JOKER FUNC time_test.TestParseDayOutOfRange has: 
;; (defn TestParseDayOutOfRange
;;   {:added "1.0"
;;    :go "testParseDayOutOfRange(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{13983145 0xc00542d840}) t])
;; 
JOKER FUNC time_test.TestParseDuration has: 
;; (defn TestParseDuration
;;   {:added "1.0"
;;    :go "testParseDuration(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{14028280 0xc005917c60}) t])
;; 
JOKER FUNC time_test.TestParseDurationRoundTrip has: 
;; (defn TestParseDurationRoundTrip
;;   {:added "1.0"
;;    :go "testParseDurationRoundTrip(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{14028638 0xc00596e460}) t])
;; 
JOKER FUNC time_test.TestParseErrors has: 
;; (defn TestParseErrors
;;   {:added "1.0"
;;    :go "testParseErrors(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{13991637 0xc005504040}) t])
;; 
JOKER FUNC time_test.TestParseInLocation has: 
;; (defn TestParseInLocation
;;   "TestParseInLocation checks that the Parse and ParseInLocation
;; functions do not get confused by the fact that AST (Arabia Standard
;; Time) and AST (Atlantic Standard Time) are different time zones,
;; even though they have the same abbreviation.
;; 
;; ICANN has been slowly phasing out invented abbreviation in favor of
;; numeric time zones (for example, the Asia/Baghdad time zone
;; abbreviation got changed from AST to +03 in the 2017a tzdata
;; release); but we still want to make sure that the time package does
;; not get confused on systems with slightly older tzdata packages."
;;   {:added "1.0"
;;    :go "testParseInLocation(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{13984255 0xc005437ba0}) t])
;; 
JOKER FUNC time_test.TestParseSecondsInTimeZone has: 
;; (defn TestParseSecondsInTimeZone
;;   {:added "1.0"
;;    :go "testParseSecondsInTimeZone(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{13995069 0xc005589740}) t])
;; 
JOKER FUNC time_test.TestParseTimeZone has: 
;; (defn TestParseTimeZone
;;   {:added "1.0"
;;    :go "testParseTimeZone(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{13989570 0xc0054b1e80}) t])
;; 
JOKER FUNC time_test.TestRFC3339Conversion has: 
;; (defn TestRFC3339Conversion
;;   {:added "1.0"
;;    :go "testRFC3339Conversion(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{13974785 0xc0053e1720}) t])
;; 
JOKER FUNC time_test.TestReadFileLimit has: 
;; (defn TestReadFileLimit
;;   {:added "1.0"
;;    :go "testReadFileLimit(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{14040918 0xc005b57880}) t])
;; 
JOKER FUNC time_test.TestReset has: 
;; (defn TestReset
;;   {:added "1.0"
;;    :go "testReset(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{13911821 0xc004f69300}) t])
;; 
JOKER FUNC time_test.TestRubyParse has: 
;; (defn TestRubyParse
;;   "Problematic time zone format needs special tests."
;;   {:added "1.0"
;;    :go "testRubyParse(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{13986435 0xc005455d60}) t])
;; 
JOKER FUNC time_test.TestSecondsToLocalTime has: 
;; (defn TestSecondsToLocalTime
;;   {:added "1.0"
;;    :go "testSecondsToLocalTime(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{14005550 0xc0056ca700}) t])
;; 
JOKER FUNC time_test.TestSecondsToUTC has: 
;; (defn TestSecondsToUTC
;;   {:added "1.0"
;;    :go "testSecondsToUTC(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{14004619 0xc00569d4a0}) t])
;; 
JOKER FUNC time_test.TestSecondsToUTCAndBack has: 
;; (defn TestSecondsToUTCAndBack
;;   {:added "1.0"
;;    :go "testSecondsToUTCAndBack(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{14006489 0xc0056d9840}) t])
;; 
JOKER FUNC time_test.TestSleep has: 
;; (defn TestSleep
;;   {:added "1.0"
;;    :go "testSleep(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{13904449 0xc004ee4d80}) t])
;; 
JOKER FUNC time_test.TestSleepZeroDeadlock has: 
;; (defn TestSleepZeroDeadlock
;;   {:added "1.0"
;;    :go "testSleepZeroDeadlock(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{13910763 0xc004f572c0}) t])
;; 
JOKER FUNC time_test.TestSub has: 
;; (defn TestSub
;;   {:added "1.0"
;;    :go "testSub(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{14031855 0xc0059c56c0}) t])
;; 
JOKER FUNC time_test.TestTeardown has: 
;; (defn TestTeardown
;;   "Test that a bug tearing down a ticker has been fixed. This routine should not deadlock."
;;   {:added "1.0"
;;    :go "testTeardown(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{14094863 0xc005ef3fa0}) t])
;; 
JOKER FUNC time_test.TestTick has: 
;; (defn TestTick
;;   "Test the Tick convenience wrapper."
;;   {:added "1.0"
;;    :go "testTick(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{14095101 0xc005f06420}) t])
;; 
JOKER FUNC time_test.TestTicker has: 
;; (defn TestTicker
;;   {:added "1.0"
;;    :go "testTicker(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{14094068 0xc005ef31c0}) t])
;; 
JOKER FUNC time_test.TestTickerStopWithDirectInitialization has: 
;; (defn TestTickerStopWithDirectInitialization
;;   "Issue 21874"
;;   {:added "1.0"
;;    :go "testTickerStopWithDirectInitialization(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{14094681 0xc005ef3d00}) t])
;; 
JOKER FUNC time_test.TestTimeGob has: 
;; (defn TestTimeGob
;;   {:added "1.0"
;;    :go "testTimeGob(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{14021843 0xc00588f940}) t])
;; 
JOKER FUNC time_test.TestTimeJSON has: 
;; (defn TestTimeJSON
;;   {:added "1.0"
;;    :go "testTimeJSON(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{14024192 0xc00589b020}) t])
;; 
JOKER FUNC time_test.TestTimerStopStress has: 
;; (defn TestTimerStopStress
;;   {:added "1.0"
;;    :go "testTimerStopStress(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{13910479 0xc004f56d40}) t])
;; 
JOKER FUNC time_test.TestTruncateRound has: 
;; (defn TestTruncateRound
;;   {:added "1.0"
;;    :go "testTruncateRound(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{14008700 0xc0056f8be0}) t])
;; 
JOKER FUNC time_test.TestUnderscoreTwoThousand has: 
;; (defn TestUnderscoreTwoThousand
;;   "Issue 11334."
;;   {:added "1.0"
;;    :go "testUnderscoreTwoThousand(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{13995863 0xc005630440}) t])
;; 
JOKER FUNC time_test.TestVersion3 has: 
;; (defn TestVersion3
;;   {:added "1.0"
;;    :go "testVersion3(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{13915361 0xc0051005e0}) t])
;; 
JOKER FUNC time_test.TestWeekdayString has: 
;; (defn TestWeekdayString
;;   "Issue 24692: Out of range weekday panics"
;;   {:added "1.0"
;;    :go "testWeekdayString(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{14040624 0xc005b4e360}) t])
;; 
JOKER FUNC time_test.TestYearDay has: 
;; (defn TestYearDay
;;   {:added "1.0"
;;    :go "testYearDay(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{14016426 0xc0057fac80}) t])
;; 
JOKER FUNC time_test.TestZeroMonthString has: 
;; (defn TestZeroMonthString
;;   "Issue 17720: Zero value of time.Month fails to print"
;;   {:added "1.0"
;;    :go "testZeroMonthString(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{14040421 0xc005b354c0}) t])
;; 
JOKER FUNC time_test.TestZeroTimerResetPanics has: 
;; (defn TestZeroTimerResetPanics
;;   {:added "1.0"
;;    :go "testZeroTimerResetPanics(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{13913878 0xc005032da0}) t])
;; 
JOKER FUNC time_test.TestZeroTimerStopPanics has: 
;; (defn TestZeroTimerStopPanics
;;   {:added "1.0"
;;    :go "testZeroTimerStopPanics(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{13913984 0xc005032fa0}) t])
;; 
JOKER FUNC time_test.TestZoneData has: 
;; (defn TestZoneData
;;   "We should be in PST/PDT, but if the time zone files are missing we
;; won't be. The purpose of this test is to at least explain why some of
;; the subsequent tests fail."
;;   {:added "1.0"
;;    :go "testZoneData(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{14002062 0xc00564ba00}) t])
;; 
JOKER FUNC tls.BenchmarkHandshakeServer has: 
;; (defn BenchmarkHandshakeServer
;;   {:added "1.0"
;;    :go "benchmarkHandshakeServer(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{1957717 0xc00101ece0}) b])
;; 
JOKER FUNC tls.BenchmarkLatency has: 
;; (defn BenchmarkLatency
;;   {:added "1.0"
;;    :go "benchmarkLatency(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{1908197 0xc000f83cc0}) b])
;; 
JOKER FUNC tls.BenchmarkThroughput has: 
;; (defn BenchmarkThroughput
;;   {:added "1.0"
;;    :go "benchmarkThroughput(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{1906107 0xc000f79400}) b])
;; 
JOKER FUNC tls.Client has: 
;; (defn ^{:conn ^ABEND881(unrecognized Expr type *ast.SelectorExpr at: &{net Conn}) conn, :isclient isClient, :handshakestatus handshakeStatus, :handshakemutex ^ABEND881(unrecognized Expr type *ast.SelectorExpr at: &{sync Mutex}) handshakeMutex, :handshakeerr handshakeErr, :vers ^Int vers, :havevers haveVers, :config ^ABEND881(unrecognized Expr type *ast.StarExpr at: &{1623437 Config}) config, :handshakes ^Int handshakes, :didresume didResume, :ciphersuite ^Int cipherSuite, :ocspresponse ^ABEND881(unrecognized Expr type *ast.ArrayType at: &{1623777 <nil> byte}) ocspResponse, :scts ^ABEND881(unrecognized Expr type *ast.ArrayType at: &{1623829 <nil> 0xc0003cd920}) scts, :peercertificates ^ABEND881(unrecognized Expr type *ast.ArrayType at: &{1623901 <nil> 0xc000ce1660}) peerCertificates, :verifiedchains ^ABEND881(unrecognized Expr type *ast.ArrayType at: &{1624055 <nil> 0xc0003cdd40}) verifiedChains, :servername ^String serverName, :securerenegotiation secureRenegotiation, :ekm ^ABEND881(unrecognized Expr type *ast.FuncType at: &{1624436 0xc000199170 0xc0001994d0}) ekm, :clientfinishedisfirst clientFinishedIsFirst, :closenotifyerr closeNotifyErr, :closenotifysent closeNotifySent, :clientfinished ^ABEND881(unrecognized Expr type *ast.ArrayType at: &{1625211 0xc000d00460 byte}) clientFinished, :serverfinished ^ABEND881(unrecognized Expr type *ast.ArrayType at: &{1625236 0xc000d014e0 byte}) serverFinished, :clientprotocol ^String clientProtocol, :clientprotocolfallback clientProtocolFallback, :in in, :out out, :rawinput ^ABEND881(unrecognized Expr type *ast.StarExpr at: &{1625355 block}) rawInput, :input ^ABEND881(unrecognized Expr type *ast.StarExpr at: &{1625412 block}) input, :hand ^ABEND881(unrecognized Expr type *ast.SelectorExpr at: &{bytes Buffer}) hand, :buffering buffering, :sendbuf ^ABEND881(unrecognized Expr type *ast.ArrayType at: &{1625603 <nil> byte}) sendBuf, :bytessent bytesSent, :packetssent packetsSent, :warncount ^Int warnCount, :activecall activeCall, :tmp ^ABEND881(unrecognized Expr type *ast.ArrayType at: &{1626099 0xc000d16420 byte}) tmp} Client
;;   "Client returns a new TLS client side connection
;; using conn as the underlying transport.
;; The config cannot be nil: users must set either ServerName or
;; InsecureSkipVerify in the config."
;;   {:added "1.0"
;;    :go "client(conn, config)"}
;;   [^ABEND881(unrecognized Expr type *ast.SelectorExpr at: &{net Conn}) conn, ^ABEND881(unrecognized Expr type *ast.StarExpr at: &{1747114 Config}) config])
;; 
JOKER FUNC tls.Dial has: 
;; (defn ^[{:conn ^ABEND881(unrecognized Expr type *ast.SelectorExpr at: &{net Conn}) conn, :isclient isClient, :handshakestatus handshakeStatus, :handshakemutex ^ABEND881(unrecognized Expr type *ast.SelectorExpr at: &{sync Mutex}) handshakeMutex, :handshakeerr handshakeErr, :vers ^Int vers, :havevers haveVers, :config ^ABEND881(unrecognized Expr type *ast.StarExpr at: &{1623437 Config}) config, :handshakes ^Int handshakes, :didresume didResume, :ciphersuite ^Int cipherSuite, :ocspresponse ^ABEND881(unrecognized Expr type *ast.ArrayType at: &{1623777 <nil> byte}) ocspResponse, :scts ^ABEND881(unrecognized Expr type *ast.ArrayType at: &{1623829 <nil> 0xc0003cd920}) scts, :peercertificates ^ABEND881(unrecognized Expr type *ast.ArrayType at: &{1623901 <nil> 0xc000ce1660}) peerCertificates, :verifiedchains ^ABEND881(unrecognized Expr type *ast.ArrayType at: &{1624055 <nil> 0xc0003cdd40}) verifiedChains, :servername ^String serverName, :securerenegotiation secureRenegotiation, :ekm ^ABEND881(unrecognized Expr type *ast.FuncType at: &{1624436 0xc000199170 0xc0001994d0}) ekm, :clientfinishedisfirst clientFinishedIsFirst, :closenotifyerr closeNotifyErr, :closenotifysent closeNotifySent, :clientfinished ^ABEND881(unrecognized Expr type *ast.ArrayType at: &{1625211 0xc000d00460 byte}) clientFinished, :serverfinished ^ABEND881(unrecognized Expr type *ast.ArrayType at: &{1625236 0xc000d014e0 byte}) serverFinished, :clientprotocol ^String clientProtocol, :clientprotocolfallback clientProtocolFallback, :in in, :out out, :rawinput ^ABEND881(unrecognized Expr type *ast.StarExpr at: &{1625355 block}) rawInput, :input ^ABEND881(unrecognized Expr type *ast.StarExpr at: &{1625412 block}) input, :hand ^ABEND881(unrecognized Expr type *ast.SelectorExpr at: &{bytes Buffer}) hand, :buffering buffering, :sendbuf ^ABEND881(unrecognized Expr type *ast.ArrayType at: &{1625603 <nil> byte}) sendBuf, :bytessent bytesSent, :packetssent packetsSent, :warncount ^Int warnCount, :activecall activeCall, :tmp ^ABEND881(unrecognized Expr type *ast.ArrayType at: &{1626099 0xc000d16420 byte}) tmp} Error] Dial
;;   "Dial connects to the given network address using net.Dial
;; and then initiates a TLS handshake, returning the resulting
;; TLS connection.
;; Dial interprets a nil configuration as equivalent to
;; the zero configuration; see the documentation of Config
;; for the defaults."
;;   {:added "1.0"
;;    :go "dial(network, addr, config)"}
;;   [^String network, ^String addr, ^ABEND881(unrecognized Expr type *ast.StarExpr at: &{1750870 Config}) config])
;; 
JOKER FUNC tls.DialWithDialer has: 
;; (defn ^[{:conn ^ABEND881(unrecognized Expr type *ast.SelectorExpr at: &{net Conn}) conn, :isclient isClient, :handshakestatus handshakeStatus, :handshakemutex ^ABEND881(unrecognized Expr type *ast.SelectorExpr at: &{sync Mutex}) handshakeMutex, :handshakeerr handshakeErr, :vers ^Int vers, :havevers haveVers, :config ^ABEND881(unrecognized Expr type *ast.StarExpr at: &{1623437 Config}) config, :handshakes ^Int handshakes, :didresume didResume, :ciphersuite ^Int cipherSuite, :ocspresponse ^ABEND881(unrecognized Expr type *ast.ArrayType at: &{1623777 <nil> byte}) ocspResponse, :scts ^ABEND881(unrecognized Expr type *ast.ArrayType at: &{1623829 <nil> 0xc0003cd920}) scts, :peercertificates ^ABEND881(unrecognized Expr type *ast.ArrayType at: &{1623901 <nil> 0xc000ce1660}) peerCertificates, :verifiedchains ^ABEND881(unrecognized Expr type *ast.ArrayType at: &{1624055 <nil> 0xc0003cdd40}) verifiedChains, :servername ^String serverName, :securerenegotiation secureRenegotiation, :ekm ^ABEND881(unrecognized Expr type *ast.FuncType at: &{1624436 0xc000199170 0xc0001994d0}) ekm, :clientfinishedisfirst clientFinishedIsFirst, :closenotifyerr closeNotifyErr, :closenotifysent closeNotifySent, :clientfinished ^ABEND881(unrecognized Expr type *ast.ArrayType at: &{1625211 0xc000d00460 byte}) clientFinished, :serverfinished ^ABEND881(unrecognized Expr type *ast.ArrayType at: &{1625236 0xc000d014e0 byte}) serverFinished, :clientprotocol ^String clientProtocol, :clientprotocolfallback clientProtocolFallback, :in in, :out out, :rawinput ^ABEND881(unrecognized Expr type *ast.StarExpr at: &{1625355 block}) rawInput, :input ^ABEND881(unrecognized Expr type *ast.StarExpr at: &{1625412 block}) input, :hand ^ABEND881(unrecognized Expr type *ast.SelectorExpr at: &{bytes Buffer}) hand, :buffering buffering, :sendbuf ^ABEND881(unrecognized Expr type *ast.ArrayType at: &{1625603 <nil> byte}) sendBuf, :bytessent bytesSent, :packetssent packetsSent, :warncount ^Int warnCount, :activecall activeCall, :tmp ^ABEND881(unrecognized Expr type *ast.ArrayType at: &{1626099 0xc000d16420 byte}) tmp} Error] DialWithDialer
;;   "DialWithDialer connects to the given network address using dialer.Dial and
;; then initiates a TLS handshake, returning the resulting TLS connection. Any
;; timeout or deadline given in the dialer apply to connection and TLS
;; handshake as a whole.
;; 
;; DialWithDialer interprets a nil configuration as equivalent to the zero
;; configuration; see the documentation of Config for the defaults."
;;   {:added "1.0"
;;    :go "dialWithDialer(dialer, network, addr, config)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{1749204 0xc000c216a0}) dialer, ^String network, ^String addr, ^ABEND881(unrecognized Expr type *ast.StarExpr at: &{1749246 Config}) config])
;; 
JOKER FUNC tls.Listen has: 
;; (defn ^[ABEND881(unrecognized Expr type *ast.SelectorExpr at: &{net Listener}) Error] Listen
;;   "Listen creates a TLS listener accepting connections on the
;; given network address using net.Listen.
;; The configuration config must be non-nil and must include
;; at least one certificate or else set GetCertificate."
;;   {:added "1.0"
;;    :go "listen(network, laddr, config)"}
;;   [^String network, ^String laddr, ^ABEND881(unrecognized Expr type *ast.StarExpr at: &{1748238 Config}) config])
;; 
JOKER FUNC tls.LoadX509KeyPair has: 
;; (defn ^[{:certificate ^ABEND881(unrecognized Expr type *ast.ArrayType at: &{1717367 <nil> 0xc000c46360}) Certificate, :privatekey ^ABEND881(unrecognized Expr type *ast.SelectorExpr at: &{crypto PrivateKey}) PrivateKey, :ocspstaple ^ABEND881(unrecognized Expr type *ast.ArrayType at: &{1717833 <nil> byte}) OCSPStaple, :signedcertificatetimestamps ^ABEND881(unrecognized Expr type *ast.ArrayType at: &{1718013 <nil> 0xc000c463f0}) SignedCertificateTimestamps, :leaf ^ABEND881(unrecognized Expr type *ast.StarExpr at: &{1718281 0xc000a5bce0}) Leaf} Error] LoadX509KeyPair
;;   "LoadX509KeyPair reads and parses a public/private key pair from a pair
;; of files. The files must contain PEM encoded data. The certificate file
;; may contain intermediate certificates following the leaf certificate to
;; form a certificate chain. On successful return, Certificate.Leaf will
;; be nil because the parsed form of the certificate is not retained."
;;   {:added "1.0"
;;    :go "loadX509KeyPair(certFile, keyFile)"}
;;   [^String certFile, ^String keyFile])
;; 
JOKER FUNC tls.NewLRUClientSessionCache has: 
;; (defn ^ABEND881(unrecognized Expr type *ast.InterfaceType at: &{1695494 0xc000bd4f00 false}) NewLRUClientSessionCache
;;   "NewLRUClientSessionCache returns a ClientSessionCache with the given
;; capacity that uses an LRU strategy. If capacity is < 1, a default capacity
;; is used instead."
;;   {:added "1.0"
;;    :go "newLRUClientSessionCache(capacity)"}
;;   [^Int capacity])
;; 
JOKER FUNC tls.NewListener has: 
;; (defn ^ABEND881(unrecognized Expr type *ast.SelectorExpr at: &{net Listener}) NewListener
;;   "NewListener creates a Listener which accepts connections from an inner
;; Listener and wraps each connection with Server.
;; The configuration config must be non-nil and must include
;; at least one certificate or else set GetCertificate."
;;   {:added "1.0"
;;    :go "newListener(inner, config)"}
;;   [^ABEND881(unrecognized Expr type *ast.SelectorExpr at: &{net Listener}) inner, ^ABEND881(unrecognized Expr type *ast.StarExpr at: &{1747878 Config}) config])
;; 
JOKER FUNC tls.Server has: 
;; (defn ^{:conn ^ABEND881(unrecognized Expr type *ast.SelectorExpr at: &{net Conn}) conn, :isclient isClient, :handshakestatus handshakeStatus, :handshakemutex ^ABEND881(unrecognized Expr type *ast.SelectorExpr at: &{sync Mutex}) handshakeMutex, :handshakeerr handshakeErr, :vers ^Int vers, :havevers haveVers, :config ^ABEND881(unrecognized Expr type *ast.StarExpr at: &{1623437 Config}) config, :handshakes ^Int handshakes, :didresume didResume, :ciphersuite ^Int cipherSuite, :ocspresponse ^ABEND881(unrecognized Expr type *ast.ArrayType at: &{1623777 <nil> byte}) ocspResponse, :scts ^ABEND881(unrecognized Expr type *ast.ArrayType at: &{1623829 <nil> 0xc0003cd920}) scts, :peercertificates ^ABEND881(unrecognized Expr type *ast.ArrayType at: &{1623901 <nil> 0xc000ce1660}) peerCertificates, :verifiedchains ^ABEND881(unrecognized Expr type *ast.ArrayType at: &{1624055 <nil> 0xc0003cdd40}) verifiedChains, :servername ^String serverName, :securerenegotiation secureRenegotiation, :ekm ^ABEND881(unrecognized Expr type *ast.FuncType at: &{1624436 0xc000199170 0xc0001994d0}) ekm, :clientfinishedisfirst clientFinishedIsFirst, :closenotifyerr closeNotifyErr, :closenotifysent closeNotifySent, :clientfinished ^ABEND881(unrecognized Expr type *ast.ArrayType at: &{1625211 0xc000d00460 byte}) clientFinished, :serverfinished ^ABEND881(unrecognized Expr type *ast.ArrayType at: &{1625236 0xc000d014e0 byte}) serverFinished, :clientprotocol ^String clientProtocol, :clientprotocolfallback clientProtocolFallback, :in in, :out out, :rawinput ^ABEND881(unrecognized Expr type *ast.StarExpr at: &{1625355 block}) rawInput, :input ^ABEND881(unrecognized Expr type *ast.StarExpr at: &{1625412 block}) input, :hand ^ABEND881(unrecognized Expr type *ast.SelectorExpr at: &{bytes Buffer}) hand, :buffering buffering, :sendbuf ^ABEND881(unrecognized Expr type *ast.ArrayType at: &{1625603 <nil> byte}) sendBuf, :bytessent bytesSent, :packetssent packetsSent, :warncount ^Int warnCount, :activecall activeCall, :tmp ^ABEND881(unrecognized Expr type *ast.ArrayType at: &{1626099 0xc000d16420 byte}) tmp} Server
;;   "Server returns a new TLS server side connection
;; using conn as the underlying transport.
;; The configuration config must be non-nil and must include
;; at least one certificate or else set GetCertificate."
;;   {:added "1.0"
;;    :go "server(conn, config)"}
;;   [^ABEND881(unrecognized Expr type *ast.SelectorExpr at: &{net Conn}) conn, ^ABEND881(unrecognized Expr type *ast.StarExpr at: &{1746822 Config}) config])
;; 
JOKER FUNC tls.TestAlertFlushing has: 
;; (defn TestAlertFlushing
;;   {:added "1.0"
;;    :go "testAlertFlushing(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{1823612 0xc000e54540}) t])
;; 
JOKER FUNC tls.TestAlertForwarding has: 
;; (defn TestAlertForwarding
;;   {:added "1.0"
;;    :go "testAlertForwarding(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{1934377 0xc000fe0ac0}) t])
;; 
JOKER FUNC tls.TestBuffering has: 
;; (defn TestBuffering
;;   {:added "1.0"
;;    :go "testBuffering(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{1822967 0xc000e43b00}) t])
;; 
JOKER FUNC tls.TestCertificateSelection has: 
;; (defn TestCertificateSelection
;;   {:added "1.0"
;;    :go "testCertificateSelection(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{1919328 0xc000fa9560}) t])
;; 
JOKER FUNC tls.TestCipherSuiteCertPreferenceECDSA has: 
;; (defn TestCipherSuiteCertPreferenceECDSA
;;   "TestCipherSuiteCertPreferance ensures that we select an RSA ciphersuite with
;; an RSA certificate and an ECDSA ciphersuite with an ECDSA certificate."
;;   {:added "1.0"
;;    :go "testCipherSuiteCertPreferenceECDSA(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{1953218 0xc001014c80}) t])
;; 
JOKER FUNC tls.TestCipherSuitePreference has: 
;; (defn TestCipherSuitePreference
;;   {:added "1.0"
;;    :go "testCipherSuitePreference(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{1935799 0xc000fe4580}) t])
;; 
JOKER FUNC tls.TestClientAuth has: 
;; (defn TestClientAuth
;;   {:added "1.0"
;;    :go "testClientAuth(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{1961847 0xc00101fc80}) t])
;; 
JOKER FUNC tls.TestClientResumption has: 
;; (defn TestClientResumption
;;   {:added "1.0"
;;    :go "testClientResumption(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{1803558 0xc000e0e9a0}) t])
;; 
JOKER FUNC tls.TestCloneFuncFields has: 
;; (defn TestCloneFuncFields
;;   {:added "1.0"
;;    :go "testCloneFuncFields(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{1900923 0xc000f6c1c0}) t])
;; 
JOKER FUNC tls.TestCloneNonFuncFields has: 
;; (defn TestCloneNonFuncFields
;;   {:added "1.0"
;;    :go "testCloneNonFuncFields(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{1901836 0xc000f6d1e0}) t])
;; 
JOKER FUNC tls.TestClose has: 
;; (defn TestClose
;;   {:added "1.0"
;;    :go "testClose(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{1934711 0xc000fe1220}) t])
;; 
JOKER FUNC tls.TestCloseClientConnectionOnIdleServer has: 
;; (defn TestCloseClientConnectionOnIdleServer
;;   {:added "1.0"
;;    :go "testCloseClientConnectionOnIdleServer(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{1832216 0xc000e66c00}) t])
;; 
JOKER FUNC tls.TestCloseServerConnectionOnIdleClient has: 
;; (defn TestCloseServerConnectionOnIdleClient
;;   {:added "1.0"
;;    :go "testCloseServerConnectionOnIdleClient(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{1975442 0xc001039b80}) t])
;; 
JOKER FUNC tls.TestConnCloseBreakingWrite has: 
;; (defn TestConnCloseBreakingWrite
;;   {:added "1.0"
;;    :go "testConnCloseBreakingWrite(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{1895865 0xc000f54e60}) t])
;; 
JOKER FUNC tls.TestConnCloseWrite has: 
;; (defn TestConnCloseWrite
;;   {:added "1.0"
;;    :go "testConnCloseWrite(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{1897409 0xc000f5c9a0}) t])
;; 
JOKER FUNC tls.TestConnReadNonzeroAndEOF has: 
;; (defn TestConnReadNonzeroAndEOF
;;   "tests that Conn.Read returns (non-zero, io.EOF) instead of
;; (non-zero, nil) when a Close (alertCloseNotify) is sitting right
;; behind the application data in the buffer."
;;   {:added "1.0"
;;    :go "testConnReadNonzeroAndEOF(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{1891437 0xc000f46860}) t])
;; 
JOKER FUNC tls.TestConnectionStateMarshal has: 
;; (defn TestConnectionStateMarshal
;;   {:added "1.0"
;;    :go "testConnectionStateMarshal(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{1908502 0xc000f88360}) t])
;; 
JOKER FUNC tls.TestCrossVersionResume has: 
;; (defn TestCrossVersionResume
;;   {:added "1.0"
;;    :go "testCrossVersionResume(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{1937612 0xc000fe5ca0}) t])
;; 
JOKER FUNC tls.TestDialTimeout has: 
;; (defn TestDialTimeout
;;   {:added "1.0"
;;    :go "testDialTimeout(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{1890453 0xc000f3f9e0}) t])
;; 
JOKER FUNC tls.TestDontSelectECDSAWithRSAKey has: 
;; (defn TestDontSelectECDSAWithRSAKey
;;   {:added "1.0"
;;    :go "testDontSelectECDSAWithRSAKey(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{1929245 0xc000fd3320}) t])
;; 
JOKER FUNC tls.TestDontSelectRSAWithECDSAKey has: 
;; (defn TestDontSelectRSAWithECDSAKey
;;   {:added "1.0"
;;    :go "testDontSelectRSAWithECDSAKey(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{1930450 0xc000fd3de0}) t])
;; 
JOKER FUNC tls.TestDynamicRecordSizingWithAEAD has: 
;; (defn TestDynamicRecordSizingWithAEAD
;;   {:added "1.0"
;;    :go "testDynamicRecordSizingWithAEAD(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{1924239 0xc000fb5140}) t])
;; 
JOKER FUNC tls.TestDynamicRecordSizingWithCBC has: 
;; (defn TestDynamicRecordSizingWithCBC
;;   {:added "1.0"
;;    :go "testDynamicRecordSizingWithCBC(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{1924052 0xc000fb4ea0}) t])
;; 
JOKER FUNC tls.TestDynamicRecordSizingWithStreamCipher has: 
;; (defn TestDynamicRecordSizingWithStreamCipher
;;   {:added "1.0"
;;    :go "testDynamicRecordSizingWithStreamCipher(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{1923870 0xc000fb4c00}) t])
;; 
JOKER FUNC tls.TestFailedWrite has: 
;; (defn TestFailedWrite
;;   {:added "1.0"
;;    :go "testFailedWrite(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{1822132 0xc000e42e40}) t])
;; 
JOKER FUNC tls.TestFallbackSCSV has: 
;; (defn TestFallbackSCSV
;;   {:added "1.0"
;;    :go "testFallbackSCSV(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{1955204 0xc00101a500}) t])
;; 
JOKER FUNC tls.TestFuzz has: 
;; (defn TestFuzz
;;   {:added "1.0"
;;    :go "testFuzz(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{1615438 0xc000c368a0}) t])
;; 
JOKER FUNC tls.TestGetClientCertificate has: 
;; (defn TestGetClientCertificate
;;   {:added "1.0"
;;    :go "testGetClientCertificate(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{1828629 0xc000e60b00}) t])
;; 
JOKER FUNC tls.TestGetConfigForClient has: 
;; (defn TestGetConfigForClient
;;   {:added "1.0"
;;    :go "testGetConfigForClient(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{1966398 0xc00102f900}) t])
;; 
JOKER FUNC tls.TestHairpinInClose has: 
;; (defn TestHairpinInClose
;;   {:added "1.0"
;;    :go "testHairpinInClose(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{1924685 0xc000fb5700}) t])
;; 
JOKER FUNC tls.TestHandshakClientSCTs has: 
;; (defn TestHandshakClientSCTs
;;   {:added "1.0"
;;    :go "testHandshakClientSCTs(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{1810149 0xc000e202a0}) t])
;; 
JOKER FUNC tls.TestHandshakeClientAES128CBCSHA256 has: 
;; (defn TestHandshakeClientAES128CBCSHA256
;;   {:added "1.0"
;;    :go "testHandshakeClientAES128CBCSHA256(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{1799946 0xc000e01aa0}) t])
;; 
JOKER FUNC tls.TestHandshakeClientAES256GCMSHA384 has: 
;; (defn TestHandshakeClientAES256GCMSHA384
;;   {:added "1.0"
;;    :go "testHandshakeClientAES256GCMSHA384(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{1799636 0xc000e01700}) t])
;; 
JOKER FUNC tls.TestHandshakeClientALPNMatch has: 
;; (defn TestHandshakeClientALPNMatch
;;   {:added "1.0"
;;    :go "testHandshakeClientALPNMatch(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{1808894 0xc000e1da20}) t])
;; 
JOKER FUNC tls.TestHandshakeClientCertECDSA has: 
;; (defn TestHandshakeClientCertECDSA
;;   {:added "1.0"
;;    :go "testHandshakeClientCertECDSA(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{1802832 0xc000e07fa0}) t])
;; 
JOKER FUNC tls.TestHandshakeClientCertRSA has: 
;; (defn TestHandshakeClientCertRSA
;;   {:added "1.0"
;;    :go "testHandshakeClientCertRSA(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{1801828 0xc000e07280}) t])
;; 
JOKER FUNC tls.TestHandshakeClientECDHEECDSAAES has: 
;; (defn TestHandshakeClientECDHEECDSAAES
;;   {:added "1.0"
;;    :go "testHandshakeClientECDHEECDSAAES(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{1798988 0xc000e00ec0}) t])
;; 
JOKER FUNC tls.TestHandshakeClientECDHEECDSAAES128CBCSHA256 has: 
;; (defn TestHandshakeClientECDHEECDSAAES128CBCSHA256
;;   {:added "1.0"
;;    :go "testHandshakeClientECDHEECDSAAES128CBCSHA256(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{1800410 0xc000e060e0}) t])
;; 
JOKER FUNC tls.TestHandshakeClientECDHEECDSAAESGCM has: 
;; (defn TestHandshakeClientECDHEECDSAAESGCM
;;   {:added "1.0"
;;    :go "testHandshakeClientECDHEECDSAAESGCM(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{1799336 0xc000e01360}) t])
;; 
JOKER FUNC tls.TestHandshakeClientECDHEECDSAChaCha20 has: 
;; (defn TestHandshakeClientECDHEECDSAChaCha20
;;   {:added "1.0"
;;    :go "testHandshakeClientECDHEECDSAChaCha20(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{1801403 0xc000e06d80}) t])
;; 
JOKER FUNC tls.TestHandshakeClientECDHERSAAES has: 
;; (defn TestHandshakeClientECDHERSAAES
;;   {:added "1.0"
;;    :go "testHandshakeClientECDHERSAAES(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{1798712 0xc000e00aa0}) t])
;; 
JOKER FUNC tls.TestHandshakeClientECDHERSAAES128CBCSHA256 has: 
;; (defn TestHandshakeClientECDHERSAAES128CBCSHA256
;;   {:added "1.0"
;;    :go "testHandshakeClientECDHERSAAES128CBCSHA256(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{1800167 0xc000e01dc0}) t])
;; 
JOKER FUNC tls.TestHandshakeClientECDHERSAChaCha20 has: 
;; (defn TestHandshakeClientECDHERSAChaCha20
;;   {:added "1.0"
;;    :go "testHandshakeClientECDHERSAChaCha20(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{1801038 0xc000e06900}) t])
;; 
JOKER FUNC tls.TestHandshakeClientExportKeyingMaterial has: 
;; (defn TestHandshakeClientExportKeyingMaterial
;;   {:added "1.0"
;;    :go "testHandshakeClientExportKeyingMaterial(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{1813323 0xc000e26b60}) t])
;; 
JOKER FUNC tls.TestHandshakeClientRSAAES128GCM has: 
;; (defn TestHandshakeClientRSAAES128GCM
;;   {:added "1.0"
;;    :go "testHandshakeClientRSAAES128GCM(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{1798277 0xc000e00460}) t])
;; 
JOKER FUNC tls.TestHandshakeClientRSAAES256GCM has: 
;; (defn TestHandshakeClientRSAAES256GCM
;;   {:added "1.0"
;;    :go "testHandshakeClientRSAAES256GCM(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{1798495 0xc000e00780}) t])
;; 
JOKER FUNC tls.TestHandshakeClientRSARC4 has: 
;; (defn TestHandshakeClientRSARC4
;;   {:added "1.0"
;;    :go "testHandshakeClientRSARC4(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{1798021 0xc000e00040}) t])
;; 
JOKER FUNC tls.TestHandshakeClientX25519 has: 
;; (defn TestHandshakeClientX25519
;;   {:added "1.0"
;;    :go "testHandshakeClientX25519(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{1800703 0xc000e06480}) t])
;; 
JOKER FUNC tls.TestHandshakeRace has: 
;; (defn TestHandshakeRace
;;   {:added "1.0"
;;    :go "testHandshakeRace(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{1824778 0xc000e55620}) t])
;; 
JOKER FUNC tls.TestHandshakeServerAES256GCMSHA384 has: 
;; (defn TestHandshakeServerAES256GCMSHA384
;;   {:added "1.0"
;;    :go "testHandshakeServerAES256GCMSHA384(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{1946972 0xc00100a7e0}) t])
;; 
JOKER FUNC tls.TestHandshakeServerAESGCM has: 
;; (defn TestHandshakeServerAESGCM
;;   {:added "1.0"
;;    :go "testHandshakeServerAESGCM(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{1946733 0xc00100a4a0}) t])
;; 
JOKER FUNC tls.TestHandshakeServerALPN has: 
;; (defn TestHandshakeServerALPN
;;   {:added "1.0"
;;    :go "testHandshakeServerALPN(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{1948068 0xc00100b760}) t])
;; 
JOKER FUNC tls.TestHandshakeServerALPNNoMatch has: 
;; (defn TestHandshakeServerALPNNoMatch
;;   {:added "1.0"
;;    :go "testHandshakeServerALPNNoMatch(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{1948730 0xc00100bf60}) t])
;; 
JOKER FUNC tls.TestHandshakeServerECDHEECDSAAES has: 
;; (defn TestHandshakeServerECDHEECDSAAES
;;   {:added "1.0"
;;    :go "testHandshakeServerECDHEECDSAAES(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{1947219 0xc00100ab20}) t])
;; 
JOKER FUNC tls.TestHandshakeServerEmptyCertificates has: 
;; (defn TestHandshakeServerEmptyCertificates
;;   "TestHandshakeServerEmptyCertificates tests that GetCertificates is called in
;; the case that Certificates is empty, even without SNI."
;;   {:added "1.0"
;;    :go "testHandshakeServerEmptyCertificates(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{1952096 0xc001014240}) t])
;; 
JOKER FUNC tls.TestHandshakeServerExportKeyingMaterial has: 
;; (defn TestHandshakeServerExportKeyingMaterial
;;   {:added "1.0"
;;    :go "testHandshakeServerExportKeyingMaterial(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{1955655 0xc00101a9a0}) t])
;; 
JOKER FUNC tls.TestHandshakeServerRSA3DES has: 
;; (defn TestHandshakeServerRSA3DES
;;   {:added "1.0"
;;    :go "testHandshakeServerRSA3DES(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{1946196 0xc001005c20}) t])
;; 
JOKER FUNC tls.TestHandshakeServerRSAAES has: 
;; (defn TestHandshakeServerRSAAES
;;   {:added "1.0"
;;    :go "testHandshakeServerRSAAES(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{1946466 0xc00100a060}) t])
;; 
JOKER FUNC tls.TestHandshakeServerRSARC4 has: 
;; (defn TestHandshakeServerRSARC4
;;   {:added "1.0"
;;    :go "testHandshakeServerRSARC4(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{1945902 0xc001005760}) t])
;; 
JOKER FUNC tls.TestHandshakeServerSNI has: 
;; (defn TestHandshakeServerSNI
;;   "TestHandshakeServerSNI involves a client sending an SNI extension of
;; "snitest.com", which happens to match the CN of testSNICertificate. The test
;; verifies that the server correctly selects that certificate."
;;   {:added "1.0"
;;    :go "testHandshakeServerSNI(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{1949631 0xc0010107e0}) t])
;; 
JOKER FUNC tls.TestHandshakeServerSNIGetCertificate has: 
;; (defn TestHandshakeServerSNIGetCertificate
;;   "TestHandshakeServerSNICertForName is similar to TestHandshakeServerSNI, but
;; tests the dynamic GetCertificate method"
;;   {:added "1.0"
;;    :go "testHandshakeServerSNIGetCertificate(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{1949999 0xc001010bc0}) t])
;; 
JOKER FUNC tls.TestHandshakeServerSNIGetCertificateError has: 
;; (defn TestHandshakeServerSNIGetCertificateError
;;   "TestHandshakeServerSNICertForNameError tests to make sure that errors in
;; GetCertificate result in a tls alert."
;;   {:added "1.0"
;;    :go "testHandshakeServerSNIGetCertificateError(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{1951397 0xc001011b60}) t])
;; 
JOKER FUNC tls.TestHandshakeServerSNIGetCertificateNotFound has: 
;; (defn TestHandshakeServerSNIGetCertificateNotFound
;;   "TestHandshakeServerSNICertForNameNotFound is similar to
;; TestHandshakeServerSNICertForName, but tests to make sure that when the
;; GetCertificate method doesn't return a cert, we fall back to what's in
;; the NameToCertificate map."
;;   {:added "1.0"
;;    :go "testHandshakeServerSNIGetCertificateNotFound(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{1950851 0xc0010114e0}) t])
;; 
JOKER FUNC tls.TestHandshakeServerX25519 has: 
;; (defn TestHandshakeServerX25519
;;   {:added "1.0"
;;    :go "testHandshakeServerX25519(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{1947732 0xc00100b2c0}) t])
;; 
JOKER FUNC tls.TestHostnameInSNI has: 
;; (defn TestHostnameInSNI
;;   {:added "1.0"
;;    :go "testHostnameInSNI(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{1814355 0xc000e27a40}) t])
;; 
JOKER FUNC tls.TestKeyLog has: 
;; (defn TestKeyLog
;;   {:added "1.0"
;;    :go "testKeyLog(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{1807566 0xc000e1c500}) t])
;; 
JOKER FUNC tls.TestKeysFromPreMasterSecret has: 
;; (defn TestKeysFromPreMasterSecret
;;   {:added "1.0"
;;    :go "testKeysFromPreMasterSecret(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{1840657 0xc000e847e0}) t])
;; 
JOKER FUNC tls.TestLRUClientSessionCache has: 
;; (defn TestLRUClientSessionCache
;;   {:added "1.0"
;;    :go "testLRUClientSessionCache(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{1806301 0xc000e14c40}) t])
;; 
JOKER FUNC tls.TestMarshalUnmarshal has: 
;; (defn TestMarshalUnmarshal
;;   {:added "1.0"
;;    :go "testMarshalUnmarshal(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{1614302 0xc000c06380}) t])
;; 
JOKER FUNC tls.TestNoCompressionOverlap has: 
;; (defn TestNoCompressionOverlap
;;   {:added "1.0"
;;    :go "testNoCompressionOverlap(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{1928268 0xc000fd28e0}) t])
;; 
JOKER FUNC tls.TestNoRC4ByDefault has: 
;; (defn TestNoRC4ByDefault
;;   {:added "1.0"
;;    :go "testNoRC4ByDefault(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{1928582 0xc000fd2c20}) t])
;; 
JOKER FUNC tls.TestNoSuiteOverlap has: 
;; (defn TestNoSuiteOverlap
;;   {:added "1.0"
;;    :go "testNoSuiteOverlap(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{1927952 0xc000fd25a0}) t])
;; 
JOKER FUNC tls.TestRSAPSSKeyError has: 
;; (defn TestRSAPSSKeyError
;;   {:added "1.0"
;;    :go "testRSAPSSKeyError(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{1830245 0xc000e66520}) t])
;; 
JOKER FUNC tls.TestRejectBadProtocolVersion has: 
;; (defn TestRejectBadProtocolVersion
;;   {:added "1.0"
;;    :go "testRejectBadProtocolVersion(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{1927758 0xc000fd2300}) t])
;; 
JOKER FUNC tls.TestRejectEmptySCT has: 
;; (defn TestRejectEmptySCT
;;   {:added "1.0"
;;    :go "testRejectEmptySCT(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{1622035 0xc000cb8ec0}) t])
;; 
JOKER FUNC tls.TestRejectEmptySCTList has: 
;; (defn TestRejectEmptySCTList
;;   {:added "1.0"
;;    :go "testRejectEmptySCTList(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{1620525 0xc000c91080}) t])
;; 
JOKER FUNC tls.TestRejectSNIWithTrailingDot has: 
;; (defn TestRejectSNIWithTrailingDot
;;   {:added "1.0"
;;    :go "testRejectSNIWithTrailingDot(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{1929069 0xc000fd30c0}) t])
;; 
JOKER FUNC tls.TestRemovePadding has: 
;; (defn TestRemovePadding
;;   {:added "1.0"
;;    :go "testRemovePadding(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{1915637 0xc000fa8aa0}) t])
;; 
JOKER FUNC tls.TestRenegotiateOnce has: 
;; (defn TestRenegotiateOnce
;;   {:added "1.0"
;;    :go "testRenegotiateOnce(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{1811821 0xc000e21900}) t])
;; 
JOKER FUNC tls.TestRenegotiateTwice has: 
;; (defn TestRenegotiateTwice
;;   {:added "1.0"
;;    :go "testRenegotiateTwice(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{1812157 0xc000e21d80}) t])
;; 
JOKER FUNC tls.TestRenegotiateTwiceRejected has: 
;; (defn TestRenegotiateTwiceRejected
;;   {:added "1.0"
;;    :go "testRenegotiateTwiceRejected(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{1812504 0xc000e26200}) t])
;; 
JOKER FUNC tls.TestRenegotiationExtension has: 
;; (defn TestRenegotiationExtension
;;   {:added "1.0"
;;    :go "testRenegotiationExtension(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{1931595 0xc000fd87e0}) t])
;; 
JOKER FUNC tls.TestRenegotiationRejected has: 
;; (defn TestRenegotiationRejected
;;   {:added "1.0"
;;    :go "testRenegotiationRejected(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{1811125 0xc000e210a0}) t])
;; 
JOKER FUNC tls.TestResumption has: 
;; (defn TestResumption
;;   {:added "1.0"
;;    :go "testResumption(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{1954008 0xc0010155e0}) t])
;; 
JOKER FUNC tls.TestResumptionDisabled has: 
;; (defn TestResumptionDisabled
;;   {:added "1.0"
;;    :go "testResumptionDisabled(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{1954475 0xc001015c80}) t])
;; 
JOKER FUNC tls.TestRoundUp has: 
;; (defn TestRoundUp
;;   {:added "1.0"
;;    :go "testRoundUp(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{1914719 0xc000f9d460}) t])
;; 
JOKER FUNC tls.TestSCTHandshake has: 
;; (defn TestSCTHandshake
;;   {:added "1.0"
;;    :go "testSCTHandshake(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{1936810 0xc000fe51a0}) t])
;; 
JOKER FUNC tls.TestSNIGivenOnFailure has: 
;; (defn TestSNIGivenOnFailure
;;   {:added "1.0"
;;    :go "testSNIGivenOnFailure(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{1963207 0xc001026ca0}) t])
;; 
JOKER FUNC tls.TestServerSelectingUnconfiguredCipherSuite has: 
;; (defn TestServerSelectingUnconfiguredCipherSuite
;;   {:added "1.0"
;;    :go "testServerSelectingUnconfiguredCipherSuite(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{1815242 0xc000e2ac00}) t])
;; 
JOKER FUNC tls.TestSignatureSelection has: 
;; (defn TestSignatureSelection
;;   {:added "1.0"
;;    :go "testSignatureSelection(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{1755841 0xc000d765a0}) t])
;; 
JOKER FUNC tls.TestSimpleError has: 
;; (defn TestSimpleError
;;   {:added "1.0"
;;    :go "testSimpleError(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{1927527 0xc000fd2020}) t])
;; 
JOKER FUNC tls.TestSplitPreMasterSecret has: 
;; (defn TestSplitPreMasterSecret
;;   {:added "1.0"
;;    :go "testSplitPreMasterSecret(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{1839744 0xc000e7dc40}) t])
;; 
JOKER FUNC tls.TestTLS11SignatureSchemes has: 
;; (defn TestTLS11SignatureSchemes
;;   {:added "1.0"
;;    :go "testTLS11SignatureSchemes(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{1825905 0xc000e5a6a0}) t])
;; 
JOKER FUNC tls.TestTLS12OnlyCipherSuites has: 
;; (defn TestTLS12OnlyCipherSuites
;;   {:added "1.0"
;;    :go "testTLS12OnlyCipherSuites(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{1932987 0xc000fd99c0}) t])
;; 
JOKER FUNC tls.TestTLSUniqueMatches has: 
;; (defn TestTLSUniqueMatches
;;   {:added "1.0"
;;    :go "testTLSUniqueMatches(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{1893256 0xc000f4e500}) t])
;; 
JOKER FUNC tls.TestVerifyHostname has: 
;; (defn TestVerifyHostname
;;   {:added "1.0"
;;    :go "testVerifyHostname(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{1894433 0xc000f4f8e0}) t])
;; 
JOKER FUNC tls.TestVerifyHostnameResumed has: 
;; (defn TestVerifyHostnameResumed
;;   {:added "1.0"
;;    :go "testVerifyHostnameResumed(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{1895214 0xc000f54400}) t])
;; 
JOKER FUNC tls.TestVerifyPeerCertificate has: 
;; (defn TestVerifyPeerCertificate
;;   {:added "1.0"
;;    :go "testVerifyPeerCertificate(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{1816540 0xc000e2bee0}) t])
;; 
JOKER FUNC tls.TestVersion has: 
;; (defn TestVersion
;;   {:added "1.0"
;;    :go "testVersion(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{1935355 0xc000fe1f00}) t])
;; 
JOKER FUNC tls.TestWarningAlertFlood has: 
;; (defn TestWarningAlertFlood
;;   {:added "1.0"
;;    :go "testWarningAlertFlood(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{1899776 0xc000f66da0}) t])
;; 
JOKER FUNC tls.TestX509KeyPair has: 
;; (defn TestX509KeyPair
;;   {:added "1.0"
;;    :go "testX509KeyPair(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{1888210 0xc000f33900}) t])
;; 
JOKER FUNC tls.TestX509KeyPairErrors has: 
;; (defn TestX509KeyPairErrors
;;   {:added "1.0"
;;    :go "testX509KeyPairErrors(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{1888686 0xc000f3e2c0}) t])
;; 
JOKER FUNC tls.TestX509MixedKeyPair has: 
;; (defn TestX509MixedKeyPair
;;   {:added "1.0"
;;    :go "testX509MixedKeyPair(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{1889898 0xc000f3f060}) t])
;; 
JOKER FUNC tls.X509KeyPair has: 
;; (defn ^[{:certificate ^ABEND881(unrecognized Expr type *ast.ArrayType at: &{1717367 <nil> 0xc000c46360}) Certificate, :privatekey ^ABEND881(unrecognized Expr type *ast.SelectorExpr at: &{crypto PrivateKey}) PrivateKey, :ocspstaple ^ABEND881(unrecognized Expr type *ast.ArrayType at: &{1717833 <nil> byte}) OCSPStaple, :signedcertificatetimestamps ^ABEND881(unrecognized Expr type *ast.ArrayType at: &{1718013 <nil> 0xc000c463f0}) SignedCertificateTimestamps, :leaf ^ABEND881(unrecognized Expr type *ast.StarExpr at: &{1718281 0xc000a5bce0}) Leaf} Error] X509KeyPair
;;   "X509KeyPair parses a public/private key pair from a pair of
;; PEM encoded data. On successful return, Certificate.Leaf will be nil because
;; the parsed form of the certificate is not retained."
;;   {:added "1.0"
;;    :go "x509KeyPair(certPEMBlock, keyPEMBlock)"}
;;   [^ABEND881(unrecognized Expr type *ast.ArrayType at: &{1751880 <nil> byte}) certPEMBlock, ^ABEND881(unrecognized Expr type *ast.ArrayType at: &{1751880 <nil> byte}) keyPEMBlock])
;; 
JOKER FUNC tls_test.ExampleConfig_keyLogWriter has: 
;; (defn ExampleConfig_keyLogWriter
;;   {:added "1.0"
;;    :go "exampleConfig_keyLogWriter()"}
;;   [])
;; 
JOKER FUNC tls_test.ExampleDial has: 
;; (defn ExampleDial
;;   {:added "1.0"
;;    :go "exampleDial()"}
;;   [])
;; 
JOKER FUNC tls_test.ExampleLoadX509KeyPair has: 
;; (defn ExampleLoadX509KeyPair
;;   {:added "1.0"
;;    :go "exampleLoadX509KeyPair()"}
;;   [])
;; 
JOKER FUNC tls_test.ExampleX509KeyPair has: 
;; (defn ExampleX509KeyPair
;;   {:added "1.0"
;;    :go "exampleX509KeyPair()"}
;;   [])
;; 
JOKER FUNC tls_test.ExampleX509KeyPair_httpServer has: 
;; (defn ExampleX509KeyPair_httpServer
;;   {:added "1.0"
;;    :go "exampleX509KeyPair_httpServer()"}
;;   [])
;; 
JOKER FUNC token.Lookup has: 
(defn ^Int Lookup
  "Lookup maps an identifier to its keyword token or IDENT (if not a keyword)."
  {:added "1.0"
   :go "lookup(ident)"}
  [^String ident])

JOKER FUNC token.NewFileSet has: 
;; (defn ^{:mutex ^ABEND881(unrecognized Expr type *ast.SelectorExpr at: &{sync RWMutex}) mutex, :base ^Int base, :files ^ABEND881(unrecognized Expr type *ast.ArrayType at: &{4978059 <nil> 0xc00243b800}) files, :last ^ABEND881(unrecognized Expr type *ast.StarExpr at: &{4978126 File}) last} NewFileSet
;;   "NewFileSet creates a new file set."
;;   {:added "1.0"
;;    :go "newFileSet()"}
;;   [])
;; 
JOKER FUNC token.TestFileSetCacheUnlikely has: 
;; (defn TestFileSetCacheUnlikely
;;   {:added "1.0"
;;    :go "testFileSetCacheUnlikely(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{4963940 0xc002412520}) t])
;; 
JOKER FUNC token.TestFileSetPastEnd has: 
;; (defn TestFileSetPastEnd
;;   "FileSet.File should return nil if Pos is past the end of the FileSet."
;;   {:added "1.0"
;;    :go "testFileSetPastEnd(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{4963696 0xc00240bfa0}) t])
;; 
JOKER FUNC token.TestFileSetRace has: 
;; (defn TestFileSetRace
;;   "issue 4345. Test that concurrent use of FileSet.Pos does not trigger a
;; race in the FileSet position cache."
;;   {:added "1.0"
;;    :go "testFileSetRace(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{4964433 0xc002412dc0}) t])
;; 
JOKER FUNC token.TestFileSetRace2 has: 
;; (defn TestFileSetRace2
;;   "issue 16548. Test that concurrent use of File.AddLine and FileSet.PositionFor
;; does not trigger a race in the FileSet position cache."
;;   {:added "1.0"
;;    :go "testFileSetRace2(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{4965021 0xc002413960}) t])
;; 
JOKER FUNC token.TestFiles has: 
;; (defn TestFiles
;;   {:added "1.0"
;;    :go "testFiles(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{4963083 0xc00240b4c0}) t])
;; 
JOKER FUNC token.TestLineInfo has: 
;; (defn TestLineInfo
;;   {:added "1.0"
;;    :go "testLineInfo(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{4962423 0xc00240a620}) t])
;; 
JOKER FUNC token.TestNoPos has: 
;; (defn TestNoPos
;;   {:added "1.0"
;;    :go "testNoPos(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{4958588 0xc0023f9bc0}) t])
;; 
JOKER FUNC token.TestPositionFor has: 
;; (defn TestPositionFor
;;   {:added "1.0"
;;    :go "testPositionFor(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{4965373 0xc00241c1a0}) t])
;; 
JOKER FUNC token.TestPositions has: 
;; (defn TestPositions
;;   {:added "1.0"
;;    :go "testPositions(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{4960402 0xc002408220}) t])
;; 
JOKER FUNC token.TestSerialization has: 
;; (defn TestSerialization
;;   {:added "1.0"
;;    :go "testSerialization(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{4991762 0xc002480480}) t])
;; 
JOKER FUNC token_test.Example_retrievePositionInfo has: 
;; (defn Example_retrievePositionInfo
;;   {:added "1.0"
;;    :go "example_retrievePositionInfo()"}
;;   [])
;; 
JOKER FUNC trace.IsEnabled has: 
;; (defn ^ABEND042(cannot find typename trace.bool) IsEnabled
;;   "IsEnabled returns whether tracing is enabled.
;; The information is advisory only. The tracing status
;; may have changed by the time this function returns."
;;   {:added "1.0"
;;    :go "isEnabled()"}
;;   [])
;; 
JOKER FUNC trace.Log has: 
;; (defn Log
;;   "Log emits a one-off event with the given category and message.
;; Category can be empty and the API assumes there are only a handful of
;; unique categories in the system."
;;   {:added "1.0"
;;    :go "log(ctx, category, message)"}
;;   [^ABEND881(unrecognized Expr type *ast.SelectorExpr at: &{context Context}) ctx, ^String category, ^String message])
;; 
JOKER FUNC trace.Logf has: 
;; (defn Logf
;;   "Logf is like Log, but the value is formatted using the specified format spec."
;;   {:added "1.0"
;;    :go "logf(ctx, category, format, args)"}
;;   [^ABEND881(unrecognized Expr type *ast.SelectorExpr at: &{context Context}) ctx, ^String category, ^String format, ^ABEND881(unrecognized Expr type *ast.Ellipsis at: &{12677341 0xc005b2d4a0}) args])
;; 
JOKER FUNC trace.NewTask has: 
;; (defn ^[ctx task] NewTask
;;   "NewTask creates a task instance with the type taskType and returns
;; it along with a Context that carries the task.
;; If the input context contains a task, the new task is its subtask.
;; 
;; The taskType is used to classify task instances. Analysis tools
;; like the Go execution tracer may assume there are only a bounded
;; number of unique task types in the system.
;; 
;; The returned end function is used to mark the task's end.
;; The trace tool measures task latency as the time between task creation
;; and when the end function is called, and provides the latency
;; distribution per task type.
;; If the end function is called multiple times, only the first
;; call is used in the latency measurement.
;; 
;;   ctx, task := trace.NewTask(ctx, "awesomeTask")
;;   trace.WithRegion(ctx, "preparation", prepWork)
;;   // preparation of the task
;;   go func() {  // continue processing the task in a separate goroutine.
;;       defer task.End()
;;       trace.WithRegion(ctx, "remainingWork", remainingWork)
;;   }()"
;;   {:added "1.0"
;;    :go "newTask(pctx, taskType)"}
;;   [^ABEND881(unrecognized Expr type *ast.SelectorExpr at: &{context Context}) pctx, ^String taskType])
;; 
JOKER FUNC trace.Start has: 
;; (defn ^Error Start
;;   "Start enables tracing for the current program.
;; While tracing, the trace will be buffered and written to w.
;; Start returns an error if tracing is already enabled."
;;   {:added "1.0"
;;    :go "start(w)"}
;;   [^ABEND881(unrecognized Expr type *ast.SelectorExpr at: &{io Writer}) w])
;; 
JOKER FUNC trace.StartRegion has: 
;; (defn ^{:id id, :regiontype ^String regionType} StartRegion
;;   "StartRegion starts a region and returns a function for marking the
;; end of the region. The returned Region's End function must be called
;; from the same goroutine where the region was started.
;; Within each goroutine, regions must nest. That is, regions started
;; after this region must be ended before this region can be ended.
;; Recommended usage is
;; 
;;     defer trace.StartRegion(ctx, "myTracedRegion").End()"
;;   {:added "1.0"
;;    :go "startRegion(ctx, regionType)"}
;;   [^ABEND881(unrecognized Expr type *ast.SelectorExpr at: &{context Context}) ctx, ^String regionType])
;; 
JOKER FUNC trace.Stop has: 
;; (defn Stop
;;   "Stop stops the current tracing, if any.
;; Stop only returns after all the writes for the trace have completed."
;;   {:added "1.0"
;;    :go "stop()"}
;;   [])
;; 
JOKER FUNC trace.WithRegion has: 
;; (defn WithRegion
;;   "WithRegion starts a region associated with its calling goroutine, runs fn,
;; and then ends the region. If the context carries a task, the region is
;; associated with the task. Otherwise, the region is attached to the background
;; task.
;; 
;; The regionType is used to classify regions, so there should be only a
;; handful of unique region types."
;;   {:added "1.0"
;;    :go "withRegion(ctx, regionType, fn)"}
;;   [^ABEND881(unrecognized Expr type *ast.SelectorExpr at: &{context Context}) ctx, ^String regionType, ^ABEND881(unrecognized Expr type *ast.FuncType at: &{12678042 0xc005b29230 <nil>}) fn])
;; 
JOKER FUNC trace_test.BenchmarkNewTask has: 
;; (defn BenchmarkNewTask
;;   {:added "1.0"
;;    :go "benchmarkNewTask(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{12656199 0xc005aad700}) b])
;; 
JOKER FUNC trace_test.BenchmarkStartRegion has: 
;; (defn BenchmarkStartRegion
;;   {:added "1.0"
;;    :go "benchmarkStartRegion(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{12655964 0xc005aad180}) b])
;; 
JOKER FUNC trace_test.Example has: 
;; (defn Example
;;   "Example demonstrates the use of the trace package to trace
;; the execution of a Go program. The trace output will be
;; written to the file trace.out"
;;   {:added "1.0"
;;    :go "example()"}
;;   [])
;; 
JOKER FUNC trace_test.RunMyProgram has: 
;; (defn RunMyProgram
;;   {:added "1.0"
;;    :go "runMyProgram()"}
;;   [])
;; 
JOKER FUNC trace_test.TestEventBatch has: 
;; (defn TestEventBatch
;;   "TestEventBatch tests Flush calls that happen during Start
;; don't produce corrupted traces."
;;   {:added "1.0"
;;    :go "testEventBatch(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{12680973 0xc005b35500}) t])
;; 
JOKER FUNC trace_test.TestTrace has: 
;; (defn TestTrace
;;   {:added "1.0"
;;    :go "testTrace(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{12683231 0xc005b4b4a0}) t])
;; 
JOKER FUNC trace_test.TestTraceDoubleStart has: 
;; (defn TestTraceDoubleStart
;;   {:added "1.0"
;;    :go "testTraceDoubleStart(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{12682902 0xc005b4af80}) t])
;; 
JOKER FUNC trace_test.TestTraceFutileWakeup has: 
;; (defn TestTraceFutileWakeup
;;   {:added "1.0"
;;    :go "testTraceFutileWakeup(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{12690459 0xc005b66ae0}) t])
;; 
JOKER FUNC trace_test.TestTraceStartStop has: 
;; (defn TestTraceStartStop
;;   {:added "1.0"
;;    :go "testTraceStartStop(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{12682432 0xc005b4a760}) t])
;; 
JOKER FUNC trace_test.TestTraceStress has: 
;; (defn TestTraceStress
;;   {:added "1.0"
;;    :go "testTraceStress(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{12685080 0xc005b4eda0}) t])
;; 
JOKER FUNC trace_test.TestTraceStressStartStop has: 
;; (defn TestTraceStressStartStop
;;   "Do a bunch of various stuff (timers, GC, network, etc) in a separate goroutine.
;; And concurrently with all that start/stop trace 3 times."
;;   {:added "1.0"
;;    :go "testTraceStressStartStop(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{12687773 0xc005b57b40}) t])
;; 
JOKER FUNC trace_test.TestTraceSymbolize has: 
;; (defn TestTraceSymbolize
;;   "TestTraceSymbolize tests symbolization and that events has proper stacks.
;; In particular that we strip bottom uninteresting frames like goexit,
;; top uninteresting frames (runtime guts)."
;;   {:added "1.0"
;;    :go "testTraceSymbolize(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{12666775 0xc005b0c540}) t])
;; 
JOKER FUNC trace_test.TestUserTaskRegion has: 
;; (defn TestUserTaskRegion
;;   {:added "1.0"
;;    :go "testUserTaskRegion(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{12656451 0xc005aadcc0}) t])
;; 
JOKER FUNC transform.Append has: 
;; (defn ^[result n err] Append
;;   "Append appends the result of converting src[:n] using t to dst, where
;; n <= len(src), If err == nil, n will be len(src). It calls Reset on t."
;;   {:added "1.0"
;;    :go "append(t, dst, src)"}
;;   [t, ^ABEND881(unrecognized Expr type *ast.ArrayType at: &{15504881 <nil> byte}) dst, ^ABEND881(unrecognized Expr type *ast.ArrayType at: &{15504881 <nil> byte}) src])
;; 
JOKER FUNC transform.Bytes has: 
;; (defn ^[result n err] Bytes
;;   "Bytes returns a new byte slice with the result of converting b[:n] using t,
;; where n <= len(b). If err == nil, n will be len(b). It calls Reset on t."
;;   {:added "1.0"
;;    :go "bytes(t, b)"}
;;   [t, ^ABEND881(unrecognized Expr type *ast.ArrayType at: &{15504603 <nil> byte}) b])
;; 
JOKER FUNC transform.Chain has: 
;; (defn ^ABEND881(unrecognized Expr type *ast.InterfaceType at: &{15484902 0xc0053148a0 false}) Chain
;;   "Chain returns a Transformer that applies t in sequence."
;;   {:added "1.0"
;;    :go "chain(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.Ellipsis at: &{15495439 Transformer}) t])
;; 
JOKER FUNC transform.NewReader has: 
;; (defn ^{:r ^ABEND881(unrecognized Expr type *ast.SelectorExpr at: &{io Reader}) r, :t t, :err err, :dst ^ABEND881(unrecognized Expr type *ast.ArrayType at: &{15488373 <nil> byte}) dst, :dst0 ^Int dst0, :dst1 ^Int dst1, :src ^ABEND881(unrecognized Expr type *ast.ArrayType at: &{15488509 <nil> byte}) src, :src0 ^Int src0, :src1 ^Int src1, :transformcomplete transformComplete} NewReader
;;   "NewReader returns a new Reader that wraps r by transforming the bytes read
;; via t. It calls Reset on t."
;;   {:added "1.0"
;;    :go "newReader(r, t)"}
;;   [^ABEND881(unrecognized Expr type *ast.SelectorExpr at: &{io Reader}) r, t])
;; 
JOKER FUNC transform.NewWriter has: 
;; (defn ^{:w ^ABEND881(unrecognized Expr type *ast.SelectorExpr at: &{io Writer}) w, :t t, :dst ^ABEND881(unrecognized Expr type *ast.ArrayType at: &{15491094 <nil> byte}) dst, :src ^ABEND881(unrecognized Expr type *ast.ArrayType at: &{15491170 <nil> byte}) src, :n ^Int n} NewWriter
;;   "NewWriter returns a new Writer that wraps w by transforming the bytes written
;; via t. It calls Reset on t."
;;   {:added "1.0"
;;    :go "newWriter(w, t)"}
;;   [^ABEND881(unrecognized Expr type *ast.SelectorExpr at: &{io Writer}) w, t])
;; 
JOKER FUNC transform.RemoveFunc has: 
;; (defn ^ABEND881(unrecognized Expr type *ast.InterfaceType at: &{15484902 0xc0053148a0 false}) RemoveFunc
;;   "Deprecated: use runes.Remove instead."
;;   {:added "1.0"
;;    :go "removeFunc(f)"}
;;   [^ABEND881(unrecognized Expr type *ast.FuncType at: &{15499392 0xc00575ae70 0xc00575aea0}) f])
;; 
JOKER FUNC transform.String has: 
(defn ^[result n err] String
  "String returns a string with the result of converting s[:n] using t, where
n <= len(s). If err == nil, n will be len(s). It calls Reset on t."
  {:added "1.0"
   :go "string(t, s)"}
  [t, ^String s])

JOKER FUNC transform_test.ExampleRemoveFunc has: 
;; (defn ExampleRemoveFunc
;;   {:added "1.0"
;;    :go "exampleRemoveFunc()"}
;;   [])
;; 
JOKER FUNC types.AssertableTo has: 
;; (defn ^ABEND042(cannot find typename types.bool) AssertableTo
;;   "AssertableTo reports whether a value of type V can be asserted to have type T."
;;   {:added "1.0"
;;    :go "assertableTo(V, T)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{5058637 Interface}) V, T])
;; 
JOKER FUNC types.AssignableTo has: 
;; (defn ^ABEND042(cannot find typename types.bool) AssignableTo
;;   "AssignableTo reports whether a value of type V is assignable to a variable of type T."
;;   {:added "1.0"
;;    :go "assignableTo(V, T)"}
;;   [V, T])
;; 
JOKER FUNC types.Comparable has: 
;; (defn ^ABEND042(cannot find typename types.bool) Comparable
;;   "Comparable reports whether values of type T are comparable."
;;   {:added "1.0"
;;    :go "comparable(T)"}
;;   [T])
;; 
JOKER FUNC types.ConvertibleTo has: 
;; (defn ^ABEND042(cannot find typename types.bool) ConvertibleTo
;;   "ConvertibleTo reports whether a value of type V is convertible to a value of type T."
;;   {:added "1.0"
;;    :go "convertibleTo(V, T)"}
;;   [V, T])
;; 
JOKER FUNC types.DefPredeclaredTestFuncs has: 
;; (defn DefPredeclaredTestFuncs
;;   "DefPredeclaredTestFuncs defines the assert and trace built-ins.
;; These built-ins are intended for debugging and testing of this
;; package only."
;;   {:added "1.0"
;;    :go "defPredeclaredTestFuncs()"}
;;   [])
;; 
JOKER FUNC types.Default has: 
;; (defn ^ABEND881(unrecognized Expr type *ast.InterfaceType at: &{4992490 0xc00247f260 false}) Default
;;   "Default returns the default "typed" type for an "untyped" type;
;; it returns the incoming type for all other types. The default type
;; for untyped nil is untyped nil."
;;   {:added "1.0"
;;    :go "default(typ)"}
;;   [typ])
;; 
JOKER FUNC types.Eval has: 
;; (defn ^[_ err] Eval
;;   "Eval returns the type and, if constant, the value for the
;; expression expr, evaluated at position pos of package pkg,
;; which must have been derived from type-checking an AST with
;; complete position information relative to the provided file
;; set.
;; 
;; If pkg == nil, the Universe scope is used and the provided
;; position pos is ignored. If pkg != nil, and pos is invalid,
;; the package scope is used. Otherwise, pos must belong to the
;; package.
;; 
;; An error is returned if pos is not within the package or
;; if the node cannot be evaluated.
;; 
;; Note: Eval should not be used instead of running Check to compute
;; types and values, but in addition to Check. Eval will re-evaluate
;; its argument each time, and it also does not know about the context
;; in which an expression is used (e.g., an assignment). Thus, top-
;; level untyped constants will return an untyped type rather then the
;; respective context-specific type."
;;   {:added "1.0"
;;    :go "eval(fset, pkg, pos, expr)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{5027411 0xc002517a60}) fset, ^ABEND881(unrecognized Expr type *ast.StarExpr at: &{5027431 Package}) pkg, ^ABEND881(unrecognized Expr type *ast.SelectorExpr at: &{token Pos}) pos, ^String expr])
;; 
JOKER FUNC types.ExprString has: 
;; (defn ^String ExprString
;;   "ExprString returns the (possibly shortened) string representation for x.
;; Shortened representations are suitable for user interfaces but may not
;; necessarily follow Go syntax."
;;   {:added "1.0"
;;    :go "exprString(x)"}
;;   [^ABEND881(unrecognized Expr type *ast.SelectorExpr at: &{ast Expr}) x])
;; 
JOKER FUNC types.Id has: 
;; (defn ^String Id
;;   "Id returns name if it is exported, otherwise it
;; returns the name qualified with the package path."
;;   {:added "1.0"
;;    :go "id(pkg, name)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{5264155 Package}) pkg, ^String name])
;; 
JOKER FUNC types.Identical has: 
;; (defn ^ABEND042(cannot find typename types.bool) Identical
;;   "Identical reports whether x and y are identical types.
;; Receivers of Signature types are ignored."
;;   {:added "1.0"
;;    :go "identical(x, y)"}
;;   [x, y])
;; 
JOKER FUNC types.IdenticalIgnoreTags has: 
;; (defn ^ABEND042(cannot find typename types.bool) IdenticalIgnoreTags
;;   "IdenticalIgnoreTags reports whether x and y are identical types if tags are ignored.
;; Receivers of Signature types are ignored."
;;   {:added "1.0"
;;    :go "identicalIgnoreTags(x, y)"}
;;   [x, y])
;; 
JOKER FUNC types.Implements has: 
;; (defn ^ABEND042(cannot find typename types.bool) Implements
;;   "Implements reports whether type V implements interface T."
;;   {:added "1.0"
;;    :go "implements(V, T)"}
;;   [V, ^ABEND881(unrecognized Expr type *ast.StarExpr at: &{5059273 Interface}) T])
;; 
JOKER FUNC types.IsInterface has: 
;; (defn ^ABEND042(cannot find typename types.bool) IsInterface
;;   "IsInterface reports whether typ is an interface type."
;;   {:added "1.0"
;;    :go "isInterface(typ)"}
;;   [typ])
;; 
JOKER FUNC types.LookupFieldOrMethod has: 
;; (defn ^[obj index indirect] LookupFieldOrMethod
;;   "LookupFieldOrMethod looks up a field or method with given package and name
;; in T and returns the corresponding *Var or *Func, an index sequence, and a
;; bool indicating if there were any pointer indirections on the path to the
;; field or method. If addressable is set, T is the type of an addressable
;; variable (only matters for method lookups).
;; 
;; The last index entry is the field or method index in the (possibly embedded)
;; type where the entry was found, either:
;; 
;; 	1) the list of declared methods of a named type; or
;; 	2) the list of all methods (method set) of an interface type; or
;; 	3) the list of fields of a struct type.
;; 
;; The earlier index entries are the indices of the embedded struct fields
;; traversed to get to the found entry, starting at depth 0.
;; 
;; If no entry is found, a nil object is returned. In this case, the returned
;; index and indirect values have the following meaning:
;; 
;; 	- If index != nil, the index sequence points to an ambiguous entry
;; 	(the same name appeared more than once at the same embedding level).
;; 
;; 	- If indirect is set, a method with a pointer receiver type was found
;;      but there was no pointer on the path from the actual receiver type to
;; 	the method's formal receiver base type, nor was the receiver addressable."
;;   {:added "1.0"
;;    :go "lookupFieldOrMethod(T, addressable, pkg, name)"}
;;   [T, addressable, ^ABEND881(unrecognized Expr type *ast.StarExpr at: &{5281227 Package}) pkg, ^String name])
;; 
JOKER FUNC types.MissingMethod has: 
;; (defn ^[method wrongType] MissingMethod
;;   "MissingMethod returns (nil, false) if V implements T, otherwise it
;; returns a missing method required by T and whether it is missing or
;; just has the wrong type.
;; 
;; For non-interface types V, or if static is set, V implements T if all
;; methods of T are present in V. Otherwise (V is an interface and static
;; is not set), MissingMethod only checks that methods of T which are also
;; present in V have matching types (e.g., for a type assertion x.(T) where
;; x is of interface type V)."
;;   {:added "1.0"
;;    :go "missingMethod(V, T, static)"}
;;   [V, ^ABEND881(unrecognized Expr type *ast.StarExpr at: &{5288486 Interface}) T, static])
;; 
JOKER FUNC types.NewArray has: 
(defn ^{:len len, :elem elem} NewArray
  "NewArray returns a new array type for the given element type and length.
A negative length indicates an unknown length."
  {:added "1.0"
   :go "newArray(elem, len)"}
  [elem, len])

JOKER FUNC types.NewChan has: 
(defn ^{:dir dir, :elem elem} NewChan
  "NewChan returns a new channel type for the given direction and element type."
  {:added "1.0"
   :go "newChan(dir, elem)"}
  [dir, elem])

JOKER FUNC types.NewChecker has: 
;; (defn ^{:conf ^ABEND881(unrecognized Expr type *ast.StarExpr at: &{5349599 Config}) conf, :fset ^ABEND881(unrecognized Expr type *ast.StarExpr at: &{5349613 0xc002934b60}) fset, :pkg ^ABEND881(unrecognized Expr type *ast.StarExpr at: &{5349634 Package}) pkg, :objmap ^ABEND881(unrecognized Expr type *ast.MapType at: &{5349658 Object 0xc002934cc0}) objMap, :impmap ^ABEND881(unrecognized Expr type *ast.MapType at: &{5349738 importKey 0xc002934d80}) impMap, :files ^ABEND881(unrecognized Expr type *ast.ArrayType at: &{5350038 <nil> 0xc002934f00}) files, :unuseddotimports ^ABEND881(unrecognized Expr type *ast.MapType at: &{5350107 0xc002934fa0 0xc00292ae40}) unusedDotImports, :firsterr firstErr, :methods ^ABEND881(unrecognized Expr type *ast.MapType at: &{5350283 0xc002935160 0xc00292aea0}) methods, :interfaces ^ABEND881(unrecognized Expr type *ast.MapType at: &{5350400 0xc002935240 0xc002935280}) interfaces, :untyped ^ABEND881(unrecognized Expr type *ast.MapType at: &{5350499 0xc002935340 exprInfo}) untyped, :delayed ^ABEND881(unrecognized Expr type *ast.ArrayType at: &{5350577 <nil> 0xc0029353e0}) delayed, :objpath ^ABEND881(unrecognized Expr type *ast.ArrayType at: &{5350642 <nil> Object}) objPath, :indent ^Int indent} NewChecker
;;   "NewChecker returns a new Checker instance for a given package.
;; Package files may be added incrementally via checker.Files."
;;   {:added "1.0"
;;    :go "newChecker(conf, fset, pkg, info)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{5353076 Config}) conf, ^ABEND881(unrecognized Expr type *ast.StarExpr at: &{5353090 0xc0029394e0}) fset, ^ABEND881(unrecognized Expr type *ast.StarExpr at: &{5353110 Package}) pkg, ^ABEND881(unrecognized Expr type *ast.StarExpr at: &{5353125 Info}) info])
;; 
JOKER FUNC types.NewConst has: 
;; (defn ^{:val ^ABEND881(unrecognized Expr type *ast.SelectorExpr at: &{constant Value}) val} NewConst
;;   "NewConst returns a new constant with value val.
;; The remaining arguments set the attributes found with all Objects."
;;   {:added "1.0"
;;    :go "newConst(pos, pkg, name, typ, val)"}
;;   [^ABEND881(unrecognized Expr type *ast.SelectorExpr at: &{token Pos}) pos, ^ABEND881(unrecognized Expr type *ast.StarExpr at: &{5268739 Package}) pkg, ^String name, typ, ^ABEND881(unrecognized Expr type *ast.SelectorExpr at: &{constant Value}) val])
;; 
JOKER FUNC types.NewField has: 
;; (defn ^{:embedded embedded, :isfield isField, :used used} NewField
;;   "NewField returns a new variable representing a struct field.
;; For embedded fields, the name is the unqualified type name
;; / under which the field is accessible."
;;   {:added "1.0"
;;    :go "newField(pos, pkg, name, typ, embedded)"}
;;   [^ABEND881(unrecognized Expr type *ast.SelectorExpr at: &{token Pos}) pos, ^ABEND881(unrecognized Expr type *ast.StarExpr at: &{5271569 Package}) pkg, ^String name, typ, embedded])
;; 
JOKER FUNC types.NewFunc has: 
;; (defn ^{} NewFunc
;;   "NewFunc returns a new function with the given signature, representing
;; the function's type."
;;   {:added "1.0"
;;    :go "newFunc(pos, pkg, name, sig)"}
;;   [^ABEND881(unrecognized Expr type *ast.SelectorExpr at: &{token Pos}) pos, ^ABEND881(unrecognized Expr type *ast.StarExpr at: &{5272621 Package}) pkg, ^String name, ^ABEND881(unrecognized Expr type *ast.StarExpr at: &{5272648 Signature}) sig])
;; 
JOKER FUNC types.NewInterface has: 
;; (defn ^{:methods ^ABEND881(unrecognized Expr type *ast.ArrayType at: &{4999146 <nil> 0xc0024b7920}) methods, :embeddeds ^ABEND881(unrecognized Expr type *ast.ArrayType at: &{4999212 <nil> Type}) embeddeds, :allmethods ^ABEND881(unrecognized Expr type *ast.ArrayType at: &{4999278 <nil> 0xc0024b7a40}) allMethods} NewInterface
;;   "NewInterface returns a new (incomplete) interface for the given methods and embedded types.
;; Each embedded type must have an underlying type of interface type.
;; NewInterface takes ownership of the provided methods and may modify their types by setting
;; missing receivers. To compute the method set of the interface, Complete must be called.
;; 
;; Deprecated: Use NewInterfaceType instead which allows any (even non-defined) interface types
;; to be embedded. This is necessary for interfaces that embed alias type names referring to
;; non-defined (literal) interface types."
;;   {:added "1.0"
;;    :go "newInterface(methods, embeddeds)"}
;;   [^ABEND881(unrecognized Expr type *ast.ArrayType at: &{5000290 <nil> 0xc0024b7e60}) methods, ^ABEND881(unrecognized Expr type *ast.ArrayType at: &{5000309 <nil> 0xc0024b7ec0}) embeddeds])
;; 
JOKER FUNC types.NewInterfaceType has: 
;; (defn ^{:methods ^ABEND881(unrecognized Expr type *ast.ArrayType at: &{4999146 <nil> 0xc0024b7920}) methods, :embeddeds ^ABEND881(unrecognized Expr type *ast.ArrayType at: &{4999212 <nil> Type}) embeddeds, :allmethods ^ABEND881(unrecognized Expr type *ast.ArrayType at: &{4999278 <nil> 0xc0024b7a40}) allMethods} NewInterfaceType
;;   "NewInterfaceType returns a new (incomplete) interface for the given methods and embedded types.
;; Each embedded type must have an underlying type of interface type (this property is not
;; verified for defined types, which may be in the process of being set up and which don't
;; have a valid underlying type yet).
;; NewInterfaceType takes ownership of the provided methods and may modify their types by setting
;; missing receivers. To compute the method set of the interface, Complete must be called."
;;   {:added "1.0"
;;    :go "newInterfaceType(methods, embeddeds)"}
;;   [^ABEND881(unrecognized Expr type *ast.ArrayType at: &{5001005 <nil> 0xc0024ba320}) methods, ^ABEND881(unrecognized Expr type *ast.ArrayType at: &{5001024 <nil> Type}) embeddeds])
;; 
JOKER FUNC types.NewLabel has: 
;; (defn ^{:used used} NewLabel
;;   "NewLabel returns a new label."
;;   {:added "1.0"
;;    :go "newLabel(pos, pkg, name)"}
;;   [^ABEND881(unrecognized Expr type *ast.SelectorExpr at: &{token Pos}) pos, ^ABEND881(unrecognized Expr type *ast.StarExpr at: &{5273469 Package}) pkg, ^String name])
;; 
JOKER FUNC types.NewMap has: 
(defn ^{:key key, :elem elem} NewMap
  "NewMap returns a new map for the given key and element types."
  {:added "1.0"
   :go "newMap(key, elem)"}
  [key, elem])

JOKER FUNC types.NewMethodSet has: 
;; (defn ^{:list ^ABEND881(unrecognized Expr type *ast.ArrayType at: &{5059862 <nil> 0xc002572160}) list} NewMethodSet
;;   "NewMethodSet returns the method set for the given type T.
;; It always returns a non-nil method set, even if it is empty."
;;   {:added "1.0"
;;    :go "newMethodSet(T)"}
;;   [T])
;; 
JOKER FUNC types.NewNamed has: 
;; (defn ^{:obj ^ABEND881(unrecognized Expr type *ast.StarExpr at: &{5005508 TypeName}) obj, :underlying underlying, :methods ^ABEND881(unrecognized Expr type *ast.ArrayType at: &{5005658 <nil> 0xc0024c5d40}) methods} NewNamed
;;   "NewNamed returns a new named type for the given type name, underlying type, and associated methods.
;; If the given type name obj doesn't have a type yet, its type is set to the returned named type.
;; The underlying type must not be a *Named."
;;   {:added "1.0"
;;    :go "newNamed(obj, underlying, methods)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{5006004 TypeName}) obj, underlying, ^ABEND881(unrecognized Expr type *ast.ArrayType at: &{5006040 <nil> 0xc0024c5f80}) methods])
;; 
JOKER FUNC types.NewPackage has: 
;; (defn ^{:path ^String path, :name ^String name, :scope ^ABEND881(unrecognized Expr type *ast.StarExpr at: &{5198592 Scope}) scope, :complete complete, :imports ^ABEND881(unrecognized Expr type *ast.ArrayType at: &{5198624 <nil> 0xc00271a880}) imports, :fake fake} NewPackage
;;   "NewPackage returns a new Package for the given package path and name.
;; The package is not complete and contains no explicit imports."
;;   {:added "1.0"
;;    :go "newPackage(path, name)"}
;;   [^String path, ^String name])
;; 
JOKER FUNC types.NewParam has: 
;; (defn ^{:embedded embedded, :isfield isField, :used used} NewParam
;;   "NewParam returns a new variable representing a function parameter."
;;   {:added "1.0"
;;    :go "newParam(pos, pkg, name, typ)"}
;;   [^ABEND881(unrecognized Expr type *ast.SelectorExpr at: &{token Pos}) pos, ^ABEND881(unrecognized Expr type *ast.StarExpr at: &{5271196 Package}) pkg, ^String name, typ])
;; 
JOKER FUNC types.NewPkgName has: 
;; (defn ^{:imported ^ABEND881(unrecognized Expr type *ast.StarExpr at: &{5267895 Package}) imported, :used used} NewPkgName
;;   "NewPkgName returns a new PkgName object representing an imported package.
;; The remaining arguments set the attributes found with all Objects."
;;   {:added "1.0"
;;    :go "newPkgName(pos, pkg, name, imported)"}
;;   [^ABEND881(unrecognized Expr type *ast.SelectorExpr at: &{token Pos}) pos, ^ABEND881(unrecognized Expr type *ast.StarExpr at: &{5268135 Package}) pkg, ^String name, ^ABEND881(unrecognized Expr type *ast.StarExpr at: &{5268167 Package}) imported])
;; 
JOKER FUNC types.NewPointer has: 
(defn ^{:base base} NewPointer
  "NewPointer returns a new pointer type for the given element (base) type."
  {:added "1.0"
   :go "newPointer(elem)"}
  [elem])

JOKER FUNC types.NewScope has: 
;; (defn ^{:parent ^ABEND881(unrecognized Expr type *ast.StarExpr at: &{5427198 Scope}) parent, :children ^ABEND881(unrecognized Expr type *ast.ArrayType at: &{5427215 <nil> 0xc002a1c6a0}) children, :elems ^ABEND881(unrecognized Expr type *ast.MapType at: &{5427234 string Object}) elems, :pos ^ABEND881(unrecognized Expr type *ast.SelectorExpr at: &{token Pos}) pos, :end ^ABEND881(unrecognized Expr type *ast.SelectorExpr at: &{token Pos}) end, :comment ^String comment, :isfunc isFunc} NewScope
;;   "NewScope returns a new, empty scope contained in the given parent
;; scope, if any. The comment is for debugging only."
;;   {:added "1.0"
;;    :go "newScope(parent, pos, end, comment)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{5427611 Scope}) parent, ^ABEND881(unrecognized Expr type *ast.SelectorExpr at: &{token Pos}) pos, ^ABEND881(unrecognized Expr type *ast.SelectorExpr at: &{token Pos}) end, ^String comment])
;; 
JOKER FUNC types.NewSignature has: 
;; (defn ^{:scope ^ABEND881(unrecognized Expr type *ast.StarExpr at: &{4997289 Scope}) scope, :recv ^ABEND881(unrecognized Expr type *ast.StarExpr at: &{4997362 Var}) recv, :params ^ABEND881(unrecognized Expr type *ast.StarExpr at: &{4997402 Tuple}) params, :results ^ABEND881(unrecognized Expr type *ast.StarExpr at: &{4997471 Tuple}) results, :variadic variadic} NewSignature
;;   "NewSignature returns a new function type for the given receiver, parameters,
;; and results, either of which may be nil. If variadic is set, the function
;; is variadic, it must have at least one parameter, and the last parameter
;; must be of unnamed slice type."
;;   {:added "1.0"
;;    :go "newSignature(recv, params, results, variadic)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{4997932 Var}) recv, ^ABEND881(unrecognized Expr type *ast.StarExpr at: &{4997954 Tuple}) params, ^ABEND881(unrecognized Expr type *ast.StarExpr at: &{4997954 Tuple}) results, variadic])
;; 
JOKER FUNC types.NewSlice has: 
(defn ^{:elem elem} NewSlice
  "NewSlice returns a new slice type for the given element type."
  {:added "1.0"
   :go "newSlice(elem)"}
  [elem])

JOKER FUNC types.NewStruct has: 
;; (defn ^{:fields ^ABEND881(unrecognized Expr type *ast.ArrayType at: &{4994739 <nil> 0xc0024aec60}) fields, :tags ^ABEND881(unrecognized Expr type *ast.ArrayType at: &{4994754 <nil> string}) tags} NewStruct
;;   "NewStruct returns a new struct with the given fields and corresponding field tags.
;; If a field with index i has a tag, tags[i] must be that tag, but len(tags) may be
;; only as long as required to hold the tag with the largest index i. Consequently,
;; if no field has a tag, tags may be nil."
;;   {:added "1.0"
;;    :go "newStruct(fields, tags)"}
;;   [^ABEND881(unrecognized Expr type *ast.ArrayType at: &{4995126 <nil> 0xc0024aee40}) fields, ^ABEND881(unrecognized Expr type *ast.ArrayType at: &{4995139 <nil> string}) tags])
;; 
JOKER FUNC types.NewTuple has: 
;; (defn ^{:vars ^ABEND881(unrecognized Expr type *ast.ArrayType at: &{4996443 <nil> 0xc0024afec0}) vars} NewTuple
;;   "NewTuple returns a new tuple for the given variables."
;;   {:added "1.0"
;;    :go "newTuple(x)"}
;;   [^ABEND881(unrecognized Expr type *ast.Ellipsis at: &{4996526 0xc0024affa0}) x])
;; 
JOKER FUNC types.NewTypeName has: 
;; (defn ^{} NewTypeName
;;   "NewTypeName returns a new type name denoting the given typ.
;; The remaining arguments set the attributes found with all Objects.
;; 
;; The typ argument may be a defined (Named) type or an alias type.
;; It may also be nil such that the returned TypeName can be used as
;; argument for NewNamed, which will set the TypeName's type as a side-
;; effect."
;;   {:added "1.0"
;;    :go "newTypeName(pos, pkg, name, typ)"}
;;   [^ABEND881(unrecognized Expr type *ast.SelectorExpr at: &{token Pos}) pos, ^ABEND881(unrecognized Expr type *ast.StarExpr at: &{5269573 Package}) pkg, ^String name, typ])
;; 
JOKER FUNC types.NewVar has: 
;; (defn ^{:embedded embedded, :isfield isField, :used used} NewVar
;;   "NewVar returns a new variable.
;; The arguments set the attributes found with all Objects."
;;   {:added "1.0"
;;    :go "newVar(pos, pkg, name, typ)"}
;;   [^ABEND881(unrecognized Expr type *ast.SelectorExpr at: &{token Pos}) pos, ^ABEND881(unrecognized Expr type *ast.StarExpr at: &{5270964 Package}) pkg, ^String name, typ])
;; 
JOKER FUNC types.ObjectString has: 
(defn ^String ObjectString
  "ObjectString returns the string form of obj.
The Qualifier controls the printing of
package-level objects, and may be nil."
  {:added "1.0"
   :go "objectString(obj, qf)"}
  [obj, qf])

JOKER FUNC types.RelativeTo has: 
;; (defn ^ABEND881(unrecognized Expr type *ast.FuncType at: &{5201318 0xc002726cc0 0xc002726cf0}) RelativeTo
;;   "RelativeTo(pkg) returns a Qualifier that fully qualifies members of
;; all packages other than pkg."
;;   {:added "1.0"
;;    :go "relativeTo(pkg)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{5201464 Package}) pkg])
;; 
JOKER FUNC types.SelectionString has: 
;; (defn ^String SelectionString
;;   "SelectionString returns the string form of s.
;; The Qualifier controls the printing of
;; package-level objects, and may be nil.
;; 
;; Examples:
;; 	"field (T) f int"
;; 	"method (T) f(X) Y"
;; 	"method expr (T) f(X) Y""
;;   {:added "1.0"
;;    :go "selectionString(s, qf)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{5368107 Selection}) s, qf])
;; 
JOKER FUNC types.SizesFor has: 
;; (defn ^ABEND881(unrecognized Expr type *ast.InterfaceType at: &{5241082 0xc0027b4c60 false}) SizesFor
;;   "SizesFor returns the Sizes used by a compiler for an architecture.
;; The result is nil if a compiler/architecture pair is not known.
;; 
;; Supported architectures for compiler "gc":
;; "386", "arm", "arm64", "amd64", "amd64p32", "mips", "mipsle",
;; "mips64", "mips64le", "ppc64", "ppc64le", "riscv64", "s390x", "wasm"."
;;   {:added "1.0"
;;    :go "sizesFor(compiler, arch)"}
;;   [^String compiler, ^String arch])
;; 
JOKER FUNC types.TestAssignOp has: 
;; (defn TestAssignOp
;;   {:added "1.0"
;;    :go "testAssignOp(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{5261885 0xc00280bf00}) t])
;; 
JOKER FUNC types.TestIsAlias has: 
;; (defn TestIsAlias
;;   {:added "1.0"
;;    :go "testIsAlias(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{5239262 0xc0027b6480}) t])
;; 
JOKER FUNC types.TestZeroTok has: 
;; (defn TestZeroTok
;;   {:added "1.0"
;;    :go "testZeroTok(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{5261690 0xc00280bb60}) t])
;; 
JOKER FUNC types.TypeString has: 
(defn ^String TypeString
  "TypeString returns the string representation of typ.
The Qualifier controls the printing of
package-level objects, and may be nil."
  {:added "1.0"
   :go "typeString(typ, qf)"}
  [typ, qf])

JOKER FUNC types.WriteExpr has: 
;; (defn WriteExpr
;;   "WriteExpr writes the (possibly shortened) string representation for x to buf.
;; Shortened representations are suitable for user interfaces but may not
;; necessarily follow Go syntax."
;;   {:added "1.0"
;;    :go "writeExpr(buf, x)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{5433143 0xc002a29160}) buf, ^ABEND881(unrecognized Expr type *ast.SelectorExpr at: &{ast Expr}) x])
;; 
JOKER FUNC types.WriteSignature has: 
;; (defn WriteSignature
;;   "WriteSignature writes the representation of the signature sig to buf,
;; without a leading "func" keyword.
;; The Qualifier controls the printing of
;; package-level objects, and may be nil."
;;   {:added "1.0"
;;    :go "writeSignature(buf, sig, qf)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{5207959 0xc002739f00}) buf, ^ABEND881(unrecognized Expr type *ast.StarExpr at: &{5207978 Signature}) sig, qf])
;; 
JOKER FUNC types.WriteType has: 
;; (defn WriteType
;;   "WriteType writes the string representation of typ to buf.
;; The Qualifier controls the printing of
;; package-level objects, and may be nil."
;;   {:added "1.0"
;;    :go "writeType(buf, typ, qf)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{5202963 0xc002728e00}) buf, typ, qf])
;; 
JOKER FUNC types_test.ExampleInfo has: 
;; (defn ExampleInfo
;;   "ExampleInfo prints various facts recorded by the type checker in a
;; types.Info struct: definitions of and references to each named object,
;; and the type, value, and mode of every expression in the package."
;;   {:added "1.0"
;;    :go "exampleInfo()"}
;;   [])
;; 
JOKER FUNC types_test.ExampleMethodSet has: 
;; (defn ExampleMethodSet
;;   "ExampleMethodSet prints the method sets of various types."
;;   {:added "1.0"
;;    :go "exampleMethodSet()"}
;;   [])
;; 
JOKER FUNC types_test.ExampleScope has: 
;; (defn ExampleScope
;;   "ExampleScope prints the tree of Scopes of a package created from a
;; set of parsed files."
;;   {:added "1.0"
;;    :go "exampleScope()"}
;;   [])
;; 
JOKER FUNC types_test.TestAlignofNaclSlice has: 
;; (defn TestAlignofNaclSlice
;;   "Issue 16464"
;;   {:added "1.0"
;;    :go "testAlignofNaclSlice(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{5278559 0xc00283fd80}) t])
;; 
JOKER FUNC types_test.TestBenchmark has: 
;; (defn TestBenchmark
;;   {:added "1.0"
;;    :go "testBenchmark(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{5313702 0xc0028adc80}) t])
;; 
JOKER FUNC types_test.TestBuiltinSignatures has: 
;; (defn TestBuiltinSignatures
;;   {:added "1.0"
;;    :go "testBuiltinSignatures(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{5373765 0xc00297cee0}) t])
;; 
JOKER FUNC types_test.TestCheck has: 
;; (defn TestCheck
;;   {:added "1.0"
;;    :go "testCheck(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{5229908 0xc002787340}) t])
;; 
JOKER FUNC types_test.TestCompositeLitTypes has: 
;; (defn TestCompositeLitTypes
;;   "TestCompositeLitTypes verifies that Info.Types registers the correct
;; types for composite literal expressions and composite literal type
;; expressions."
;;   {:added "1.0"
;;    :go "testCompositeLitTypes(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{5421819 0xc002a0bc60}) t])
;; 
JOKER FUNC types_test.TestEvalArith has: 
;; (defn TestEvalArith
;;   {:added "1.0"
;;    :go "testEvalArith(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{5110212 0xc002603a00}) t])
;; 
JOKER FUNC types_test.TestEvalBasic has: 
;; (defn TestEvalBasic
;;   {:added "1.0"
;;    :go "testEvalBasic(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{5109851 0xc0026031a0}) t])
;; 
JOKER FUNC types_test.TestEvalComposite has: 
;; (defn TestEvalComposite
;;   {:added "1.0"
;;    :go "testEvalComposite(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{5110031 0xc0026035e0}) t])
;; 
JOKER FUNC types_test.TestEvalPos has: 
;; (defn TestEvalPos
;;   {:added "1.0"
;;    :go "testEvalPos(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{5110613 0xc002603f20}) t])
;; 
JOKER FUNC types_test.TestExprString has: 
;; (defn TestExprString
;;   {:added "1.0"
;;    :go "testExprString(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{5359433 0xc002953ac0}) t])
;; 
JOKER FUNC types_test.TestFailedImport has: 
;; (defn TestFailedImport
;;   "TestFailedImport tests that we don't get follow-on errors
;; elsewhere in a package due to failing to import a package."
;;   {:added "1.0"
;;    :go "testFailedImport(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{5424811 0xc002a16a20}) t])
;; 
JOKER FUNC types_test.TestFiles has: 
;; (defn TestFiles
;;   {:added "1.0"
;;    :go "testFiles(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{5408907 0xc0029e9340}) t])
;; 
JOKER FUNC types_test.TestHilbert has: 
;; (defn TestHilbert
;;   {:added "1.0"
;;    :go "testHilbert(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{5042461 0xc002543360}) t])
;; 
JOKER FUNC types_test.TestIdentical_issue15173 has: 
;; (defn TestIdentical_issue15173
;;   {:added "1.0"
;;    :go "testIdentical_issue15173(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{5420641 0xc002a0a760}) t])
;; 
JOKER FUNC types_test.TestImplicitsInfo has: 
;; (defn TestImplicitsInfo
;;   {:added "1.0"
;;    :go "testImplicitsInfo(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{5394650 0xc0029c3d20}) t])
;; 
JOKER FUNC types_test.TestIncompleteInterfaces has: 
;; (defn TestIncompleteInterfaces
;;   {:added "1.0"
;;    :go "testIncompleteInterfaces(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{5257398 0xc0027f9540}) t])
;; 
JOKER FUNC types_test.TestInitOrderInfo has: 
;; (defn TestInitOrderInfo
;;   {:added "1.0"
;;    :go "testInitOrderInfo(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{5404181 0xc0029e26e0}) t])
;; 
JOKER FUNC types_test.TestIssue13898 has: 
;; (defn TestIssue13898
;;   "This tests that the package associated with the types.Object.Pkg method
;; is the type's package independent of the order in which the imports are
;; listed in the sources src1, src2 below.
;; The actual issue is in go/internal/gcimporter which has a corresponding
;; test; we leave this test here to verify correct behavior at the go/types
;; level."
;;   {:added "1.0"
;;    :go "testIssue13898(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{5343406 0xc0029228c0}) t])
;; 
JOKER FUNC types_test.TestIssue15305 has: 
;; (defn TestIssue15305
;;   {:added "1.0"
;;    :go "testIssue15305(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{5421031 0xc002a0afa0}) t])
;; 
JOKER FUNC types_test.TestIssue16902 has: 
;; (defn TestIssue16902
;;   {:added "1.0"
;;    :go "testIssue16902(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{5279027 0xc00284a640}) t])
;; 
JOKER FUNC types_test.TestIssue22525 has: 
;; (defn TestIssue22525
;;   {:added "1.0"
;;    :go "testIssue22525(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{5344737 0xc002923a20}) t])
;; 
JOKER FUNC types_test.TestIssue25627 has: 
;; (defn TestIssue25627
;;   {:added "1.0"
;;    :go "testIssue25627(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{5345290 0xc0029282c0}) t])
;; 
JOKER FUNC types_test.TestIssue5770 has: 
;; (defn TestIssue5770
;;   {:added "1.0"
;;    :go "testIssue5770(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{5338808 0xc00290faa0}) t])
;; 
JOKER FUNC types_test.TestIssue5849 has: 
;; (defn TestIssue5849
;;   {:added "1.0"
;;    :go "testIssue5849(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{5339222 0xc002914460}) t])
;; 
JOKER FUNC types_test.TestIssue6413 has: 
;; (defn TestIssue6413
;;   {:added "1.0"
;;    :go "testIssue6413(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{5340201 0xc002915500}) t])
;; 
JOKER FUNC types_test.TestIssue7245 has: 
;; (defn TestIssue7245
;;   {:added "1.0"
;;    :go "testIssue7245(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{5340830 0xc002918300}) t])
;; 
JOKER FUNC types_test.TestIssue7827 has: 
;; (defn TestIssue7827
;;   "This tests that uses of existing vars on the LHS of an assignment
;; are Uses, not Defs; and also that the (illegal) use of a non-var on
;; the LHS of an assignment is a Use nonetheless."
;;   {:added "1.0"
;;    :go "testIssue7827(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{5341657 0xc002919200}) t])
;; 
JOKER FUNC types_test.TestIssue8518 has: 
;; (defn TestIssue8518
;;   {:added "1.0"
;;    :go "testIssue8518(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{5413862 0xc0029f7120}) t])
;; 
JOKER FUNC types_test.TestLookupFieldOrMethod has: 
;; (defn TestLookupFieldOrMethod
;;   {:added "1.0"
;;    :go "testLookupFieldOrMethod(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{5414575 0xc0029f7c20}) t])
;; 
JOKER FUNC types_test.TestMultiFileInitOrder has: 
;; (defn TestMultiFileInitOrder
;;   {:added "1.0"
;;    :go "testMultiFileInitOrder(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{5408063 0xc0029e8380}) t])
;; 
JOKER FUNC types_test.TestMultipleSizeUse has: 
;; (defn TestMultipleSizeUse
;;   "Issue 16316"
;;   {:added "1.0"
;;    :go "testMultipleSizeUse(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{5278061 0xc00283f5a0}) t])
;; 
JOKER FUNC types_test.TestObjectParents has: 
;; (defn TestObjectParents
;;   "TestObjectParents verifies that objects have parent scopes or not
;; as specified by the Object interface."
;;   {:added "1.0"
;;    :go "testObjectParents(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{5423405 0xc002a0f7c0}) t])
;; 
JOKER FUNC types_test.TestPredicatesInfo has: 
;; (defn TestPredicatesInfo
;;   {:added "1.0"
;;    :go "testPredicatesInfo(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{5397138 0xc0029cbe60}) t])
;; 
JOKER FUNC types_test.TestQualifiedTypeString has: 
;; (defn TestQualifiedTypeString
;;   {:added "1.0"
;;    :go "testQualifiedTypeString(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{5260249 0xc00280a180}) t])
;; 
JOKER FUNC types_test.TestResolveIdents has: 
;; (defn TestResolveIdents
;;   {:added "1.0"
;;    :go "testResolveIdents(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{5038244 0xc002531b40}) t])
;; 
JOKER FUNC types_test.TestScopeLookupParent has: 
;; (defn TestScopeLookupParent
;;   "TestScopeLookupParent ensures that (*Scope).LookupParent returns
;; the correct result at various positions with the source."
;;   {:added "1.0"
;;    :go "testScopeLookupParent(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{5417026 0xc0029fbca0}) t])
;; 
JOKER FUNC types_test.TestScopesInfo has: 
;; (defn TestScopesInfo
;;   {:added "1.0"
;;    :go "testScopesInfo(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{5400471 0xc0029d5da0}) t])
;; 
JOKER FUNC types_test.TestSelection has: 
;; (defn TestSelection
;;   {:added "1.0"
;;    :go "testSelection(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{5410044 0xc0029f2700}) t])
;; 
JOKER FUNC types_test.TestSelf has: 
;; (defn TestSelf
;;   {:added "1.0"
;;    :go "testSelf(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{5313220 0xc0028ad500}) t])
;; 
JOKER FUNC types_test.TestStdFixed has: 
;; (defn TestStdFixed
;;   {:added "1.0"
;;    :go "testStdFixed(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{5379999 0xc002996fa0}) t])
;; 
JOKER FUNC types_test.TestStdKen has: 
;; (defn TestStdKen
;;   {:added "1.0"
;;    :go "testStdKen(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{5381183 0xc002997980}) t])
;; 
JOKER FUNC types_test.TestStdTest has: 
;; (defn TestStdTest
;;   {:added "1.0"
;;    :go "testStdTest(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{5379441 0xc002996920}) t])
;; 
JOKER FUNC types_test.TestStdlib has: 
;; (defn TestStdlib
;;   {:added "1.0"
;;    :go "testStdlib(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{5377034 0xc002988220}) t])
;; 
JOKER FUNC types_test.TestTypeString has: 
;; (defn TestTypeString
;;   {:added "1.0"
;;    :go "testTypeString(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{5256843 0xc0027f8b00}) t])
;; 
JOKER FUNC types_test.TestTypesInfo has: 
;; (defn TestTypesInfo
;;   {:added "1.0"
;;    :go "testTypesInfo(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{5391279 0xc0029c2240}) t])
;; 
JOKER FUNC types_test.TestValuesInfo has: 
;; (defn TestValuesInfo
;;   {:added "1.0"
;;    :go "testValuesInfo(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{5385806 0xc0029b8a20}) t])
;; 
JOKER FUNC unicode.In has: 
;; (defn ^ABEND042(cannot find typename unicode.bool) In
;;   "In reports whether the rune is a member of one of the ranges."
;;   {:added "1.0"
;;    :go "in(r, ranges)"}
;;   [r, ^ABEND881(unrecognized Expr type *ast.Ellipsis at: &{14313577 0xc0050f8d20}) ranges])
;; 
JOKER FUNC unicode.Is has: 
;; (defn ^ABEND042(cannot find typename unicode.bool) Is
;;   "Is reports whether the rune is in the specified table of ranges."
;;   {:added "1.0"
;;    :go "is(rangeTab, r)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{14320245 RangeTable}) rangeTab, r])
;; 
JOKER FUNC unicode.IsControl has: 
;; (defn ^ABEND042(cannot find typename unicode.bool) IsControl
;;   "IsControl reports whether the rune is a control character.
;; The C (Other) Unicode category includes more code points
;; such as surrogates; use Is(C, r) to test for them."
;;   {:added "1.0"
;;    :go "isControl(r)"}
;;   [r])
;; 
JOKER FUNC unicode.IsDigit has: 
;; (defn ^ABEND042(cannot find typename unicode.bool) IsDigit
;;   "IsDigit reports whether the rune is a decimal digit."
;;   {:added "1.0"
;;    :go "isDigit(r)"}
;;   [r])
;; 
JOKER FUNC unicode.IsGraphic has: 
;; (defn ^ABEND042(cannot find typename unicode.bool) IsGraphic
;;   "IsGraphic reports whether the rune is defined as a Graphic by Unicode.
;; Such characters include letters, marks, numbers, punctuation, symbols, and
;; spaces, from categories L, M, N, P, S, Zs."
;;   {:added "1.0"
;;    :go "isGraphic(r)"}
;;   [r])
;; 
JOKER FUNC unicode.IsLetter has: 
;; (defn ^ABEND042(cannot find typename unicode.bool) IsLetter
;;   "IsLetter reports whether the rune is a letter (category L)."
;;   {:added "1.0"
;;    :go "isLetter(r)"}
;;   [r])
;; 
JOKER FUNC unicode.IsLower has: 
;; (defn ^ABEND042(cannot find typename unicode.bool) IsLower
;;   "IsLower reports whether the rune is a lower case letter."
;;   {:added "1.0"
;;    :go "isLower(r)"}
;;   [r])
;; 
JOKER FUNC unicode.IsMark has: 
;; (defn ^ABEND042(cannot find typename unicode.bool) IsMark
;;   "IsMark reports whether the rune is a mark character (category M)."
;;   {:added "1.0"
;;    :go "isMark(r)"}
;;   [r])
;; 
JOKER FUNC unicode.IsNumber has: 
;; (defn ^ABEND042(cannot find typename unicode.bool) IsNumber
;;   "IsNumber reports whether the rune is a number (category N)."
;;   {:added "1.0"
;;    :go "isNumber(r)"}
;;   [r])
;; 
JOKER FUNC unicode.IsOneOf has: 
;; (defn ^ABEND042(cannot find typename unicode.bool) IsOneOf
;;   "IsOneOf reports whether the rune is a member of one of the ranges.
;; The function "In" provides a nicer signature and should be used in preference to IsOneOf."
;;   {:added "1.0"
;;    :go "isOneOf(ranges, r)"}
;;   [^ABEND881(unrecognized Expr type *ast.ArrayType at: &{14313366 <nil> 0xc0050f89e0}) ranges, r])
;; 
JOKER FUNC unicode.IsPrint has: 
;; (defn ^ABEND042(cannot find typename unicode.bool) IsPrint
;;   "IsPrint reports whether the rune is defined as printable by Go. Such
;; characters include letters, marks, numbers, punctuation, symbols, and the
;; ASCII space character, from categories L, M, N, P, S and the ASCII space
;; character. This categorization is the same as IsGraphic except that the
;; only spacing character is ASCII space, U+0020."
;;   {:added "1.0"
;;    :go "isPrint(r)"}
;;   [r])
;; 
JOKER FUNC unicode.IsPunct has: 
;; (defn ^ABEND042(cannot find typename unicode.bool) IsPunct
;;   "IsPunct reports whether the rune is a Unicode punctuation character
;; (category P)."
;;   {:added "1.0"
;;    :go "isPunct(r)"}
;;   [r])
;; 
JOKER FUNC unicode.IsSpace has: 
;; (defn ^ABEND042(cannot find typename unicode.bool) IsSpace
;;   "IsSpace reports whether the rune is a space character as defined
;; by Unicode's White Space property; in the Latin-1 space
;; this is
;; 	'\t', '\n', '\v', '\f', '\r', ' ', U+0085 (NEL), U+00A0 (NBSP).
;; Other definitions of spacing characters are set by category
;; Z and property Pattern_White_Space."
;;   {:added "1.0"
;;    :go "isSpace(r)"}
;;   [r])
;; 
JOKER FUNC unicode.IsSymbol has: 
;; (defn ^ABEND042(cannot find typename unicode.bool) IsSymbol
;;   "IsSymbol reports whether the rune is a symbolic character."
;;   {:added "1.0"
;;    :go "isSymbol(r)"}
;;   [r])
;; 
JOKER FUNC unicode.IsTitle has: 
;; (defn ^ABEND042(cannot find typename unicode.bool) IsTitle
;;   "IsTitle reports whether the rune is a title case letter."
;;   {:added "1.0"
;;    :go "isTitle(r)"}
;;   [r])
;; 
JOKER FUNC unicode.IsUpper has: 
;; (defn ^ABEND042(cannot find typename unicode.bool) IsUpper
;;   "IsUpper reports whether the rune is an upper case letter."
;;   {:added "1.0"
;;    :go "isUpper(r)"}
;;   [r])
;; 
JOKER FUNC unicode.SimpleFold has: 
;; (defn ^ABEND042(cannot find typename unicode.rune) SimpleFold
;;   "SimpleFold iterates over Unicode code points equivalent under
;; the Unicode-defined simple case folding. Among the code points
;; equivalent to rune (including rune itself), SimpleFold returns the
;; smallest rune > r if one exists, or else the smallest rune >= 0.
;; If r is not a valid Unicode code point, SimpleFold(r) returns r.
;; 
;; For example:
;; 	SimpleFold('A') = 'a'
;; 	SimpleFold('a') = 'A'
;; 
;; 	SimpleFold('K') = 'k'
;; 	SimpleFold('k') = '\u212A' (Kelvin symbol, K)
;; 	SimpleFold('\u212A') = 'K'
;; 
;; 	SimpleFold('1') = '1'
;; 
;; 	SimpleFold(-2) = -2"
;;   {:added "1.0"
;;    :go "simpleFold(r)"}
;;   [r])
;; 
JOKER FUNC unicode.To has: 
;; (defn ^ABEND042(cannot find typename unicode.rune) To
;;   "To maps the rune to the specified case: UpperCase, LowerCase, or TitleCase."
;;   {:added "1.0"
;;    :go "to(_case, r)"}
;;   [^Int _case, r])
;; 
JOKER FUNC unicode.ToLower has: 
;; (defn ^ABEND042(cannot find typename unicode.rune) ToLower
;;   "ToLower maps the rune to lower case."
;;   {:added "1.0"
;;    :go "toLower(r)"}
;;   [r])
;; 
JOKER FUNC unicode.ToTitle has: 
;; (defn ^ABEND042(cannot find typename unicode.rune) ToTitle
;;   "ToTitle maps the rune to title case."
;;   {:added "1.0"
;;    :go "toTitle(r)"}
;;   [r])
;; 
JOKER FUNC unicode.ToUpper has: 
;; (defn ^ABEND042(cannot find typename unicode.rune) ToUpper
;;   "ToUpper maps the rune to upper case."
;;   {:added "1.0"
;;    :go "toUpper(r)"}
;;   [r])
;; 
JOKER FUNC unicode_test.ExampleSimpleFold has: 
;; (defn ExampleSimpleFold
;;   {:added "1.0"
;;    :go "exampleSimpleFold()"}
;;   [])
;; 
JOKER FUNC unicode_test.ExampleSpecialCase has: 
;; (defn ExampleSpecialCase
;;   {:added "1.0"
;;    :go "exampleSpecialCase()"}
;;   [])
;; 
JOKER FUNC unicode_test.ExampleTo has: 
;; (defn ExampleTo
;;   {:added "1.0"
;;    :go "exampleTo()"}
;;   [])
;; 
JOKER FUNC unicode_test.ExampleToLower has: 
;; (defn ExampleToLower
;;   {:added "1.0"
;;    :go "exampleToLower()"}
;;   [])
;; 
JOKER FUNC unicode_test.ExampleToTitle has: 
;; (defn ExampleToTitle
;;   {:added "1.0"
;;    :go "exampleToTitle()"}
;;   [])
;; 
JOKER FUNC unicode_test.ExampleToUpper has: 
;; (defn ExampleToUpper
;;   {:added "1.0"
;;    :go "exampleToUpper()"}
;;   [])
;; 
JOKER FUNC unicode_test.Example_is has: 
;; (defn Example_is
;;   "Functions starting with "Is" can be used to inspect which table of range a
;; rune belongs to. Note that runes may fit into more than one range."
;;   {:added "1.0"
;;    :go "example_is()"}
;;   [])
;; 
JOKER FUNC unicode_test.TestCalibrate has: 
;; (defn TestCalibrate
;;   {:added "1.0"
;;    :go "testCalibrate(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{14110578 0xc006025760}) t])
;; 
JOKER FUNC unicode_test.TestCategories has: 
;; (defn TestCategories
;;   {:added "1.0"
;;    :go "testCategories(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{14332241 0xc0052c7a60}) t])
;; 
JOKER FUNC unicode_test.TestDigit has: 
;; (defn TestDigit
;;   {:added "1.0"
;;    :go "testDigit(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{14114233 0xc0060b7aa0}) t])
;; 
JOKER FUNC unicode_test.TestDigitOptimization has: 
;; (defn TestDigitOptimization
;;   "Test that the special case in IsDigit agrees with the table"
;;   {:added "1.0"
;;    :go "testDigitOptimization(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{14114562 0xc0060c7e60}) t])
;; 
JOKER FUNC unicode_test.TestIsControlLatin1 has: 
;; (defn TestIsControlLatin1
;;   {:added "1.0"
;;    :go "testIsControlLatin1(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{14115078 0xc0060d5340}) t])
;; 
JOKER FUNC unicode_test.TestIsGraphicLatin1 has: 
;; (defn TestIsGraphicLatin1
;;   {:added "1.0"
;;    :go "testIsGraphicLatin1(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{14116496 0xc0060e9560}) t])
;; 
JOKER FUNC unicode_test.TestIsLetter has: 
;; (defn TestIsLetter
;;   {:added "1.0"
;;    :go "testIsLetter(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{14105128 0xc005f854e0}) t])
;; 
JOKER FUNC unicode_test.TestIsLetterLatin1 has: 
;; (defn TestIsLetterLatin1
;;   {:added "1.0"
;;    :go "testIsLetterLatin1(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{14115392 0xc0060ddf20}) t])
;; 
JOKER FUNC unicode_test.TestIsLowerLatin1 has: 
;; (defn TestIsLowerLatin1
;;   {:added "1.0"
;;    :go "testIsLowerLatin1(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{14115816 0xc0060e8880}) t])
;; 
JOKER FUNC unicode_test.TestIsPrintLatin1 has: 
;; (defn TestIsPrintLatin1
;;   {:added "1.0"
;;    :go "testIsPrintLatin1(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{14116239 0xc0060e90c0}) t])
;; 
JOKER FUNC unicode_test.TestIsPunctLatin1 has: 
;; (defn TestIsPunctLatin1
;;   {:added "1.0"
;;    :go "testIsPunctLatin1(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{14116720 0xc0060e9980}) t])
;; 
JOKER FUNC unicode_test.TestIsSpace has: 
;; (defn TestIsSpace
;;   {:added "1.0"
;;    :go "testIsSpace(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{14106932 0xc005fc0260}) t])
;; 
JOKER FUNC unicode_test.TestIsSpaceLatin1 has: 
;; (defn TestIsSpaceLatin1
;;   {:added "1.0"
;;    :go "testIsSpaceLatin1(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{14116931 0xc0060e9da0}) t])
;; 
JOKER FUNC unicode_test.TestIsSymbolLatin1 has: 
;; (defn TestIsSymbolLatin1
;;   {:added "1.0"
;;    :go "testIsSymbolLatin1(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{14117149 0xc0060ee1c0}) t])
;; 
JOKER FUNC unicode_test.TestIsUpper has: 
;; (defn TestIsUpper
;;   {:added "1.0"
;;    :go "testIsUpper(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{14105504 0xc005f89260}) t])
;; 
JOKER FUNC unicode_test.TestIsUpperLatin1 has: 
;; (defn TestIsUpperLatin1
;;   {:added "1.0"
;;    :go "testIsUpperLatin1(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{14115605 0xc0060e8460}) t])
;; 
JOKER FUNC unicode_test.TestLatinOffset has: 
;; (defn TestLatinOffset
;;   {:added "1.0"
;;    :go "testLatinOffset(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{14112396 0xc006070e80}) t])
;; 
JOKER FUNC unicode_test.TestLetterOptimizations has: 
;; (defn TestLetterOptimizations
;;   "Check that the optimizations for IsLetter etc. agree with the tables.
;; We only need to check the Latin-1 range."
;;   {:added "1.0"
;;    :go "testLetterOptimizations(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{14107317 0xc005fc9a80}) t])
;; 
JOKER FUNC unicode_test.TestNumberLatin1 has: 
;; (defn TestNumberLatin1
;;   {:added "1.0"
;;    :go "testNumberLatin1(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{14116026 0xc0060e8ca0}) t])
;; 
JOKER FUNC unicode_test.TestProperties has: 
;; (defn TestProperties
;;   {:added "1.0"
;;    :go "testProperties(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{14332738 0xc0052e4400}) t])
;; 
JOKER FUNC unicode_test.TestScripts has: 
;; (defn TestScripts
;;   {:added "1.0"
;;    :go "testScripts(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{14331610 0xc0052c6d80}) t])
;; 
JOKER FUNC unicode_test.TestSimpleFold has: 
;; (defn TestSimpleFold
;;   {:added "1.0"
;;    :go "testSimpleFold(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{14109511 0xc006001f60}) t])
;; 
JOKER FUNC unicode_test.TestSpecialCaseNoMapping has: 
;; (defn TestSpecialCaseNoMapping
;;   {:added "1.0"
;;    :go "testSpecialCaseNoMapping(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{14112800 0xc00607fde0}) t])
;; 
JOKER FUNC unicode_test.TestTo has: 
;; (defn TestTo
;;   {:added "1.0"
;;    :go "testTo(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{14106054 0xc005f9a240}) t])
;; 
JOKER FUNC unicode_test.TestToLowerCase has: 
;; (defn TestToLowerCase
;;   {:added "1.0"
;;    :go "testToLowerCase(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{14106484 0xc005fa8d00}) t])
;; 
JOKER FUNC unicode_test.TestToTitleCase has: 
;; (defn TestToTitleCase
;;   {:added "1.0"
;;    :go "testToTitleCase(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{14106710 0xc005fb49a0}) t])
;; 
JOKER FUNC unicode_test.TestToUpperCase has: 
;; (defn TestToUpperCase
;;   {:added "1.0"
;;    :go "testToUpperCase(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{14106258 0xc005f9e860}) t])
;; 
JOKER FUNC unicode_test.TestTurkishCase has: 
;; (defn TestTurkishCase
;;   {:added "1.0"
;;    :go "testTurkishCase(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{14108205 0xc005fec4c0}) t])
;; 
JOKER FUNC unsafe.Alignof has: 
;; (defn ^ABEND042(cannot find typename unsafe.uintptr) Alignof
;;   "Alignof takes an expression x of any type and returns the required alignment
;; of a hypothetical variable v as if v was declared via var v = x.
;; It is the largest value m such that the address of v is always zero mod m.
;; It is the same as the value returned by reflect.TypeOf(x).Align().
;; As a special case, if a variable s is of struct type and f is a field
;; within that struct, then Alignof(s.f) will return the required alignment
;; of a field of that type within a struct. This case is the same as the
;; value returned by reflect.TypeOf(s.f).FieldAlign()."
;;   {:added "1.0"
;;    :go "alignof(x)"}
;;   [x])
;; 
JOKER FUNC unsafe.Offsetof has: 
;; (defn ^ABEND042(cannot find typename unsafe.uintptr) Offsetof
;;   "Offsetof returns the offset within the struct of the field represented by x,
;; which must be of the form structValue.field. In other words, it returns the
;; number of bytes between the start of the struct and the start of the field."
;;   {:added "1.0"
;;    :go "offsetof(x)"}
;;   [x])
;; 
JOKER FUNC unsafe.Sizeof has: 
;; (defn ^ABEND042(cannot find typename unsafe.uintptr) Sizeof
;;   "Sizeof takes an expression x of any type and returns the size in bytes
;; of a hypothetical variable v as if v was declared via var v = x.
;; The size does not include any memory possibly referenced by x.
;; For instance, if x is a slice, Sizeof returns the size of the slice
;; descriptor, not the size of the memory referenced by the slice."
;;   {:added "1.0"
;;    :go "sizeof(x)"}
;;   [x])
;; 
JOKER FUNC url.BenchmarkString has: 
;; (defn BenchmarkString
;;   {:added "1.0"
;;    :go "benchmarkString(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{9884077 0xc004a72260}) b])
;; 
JOKER FUNC url.Parse has: 
;; (defn ^[{:scheme ^String Scheme, :opaque ^String Opaque, :user ^ABEND881(unrecognized Expr type *ast.StarExpr at: &{9923506 Userinfo}) User, :host ^String Host, :path ^String Path, :rawpath ^String RawPath, :forcequery ForceQuery, :rawquery ^String RawQuery, :fragment ^String Fragment} Error] Parse
;;   "Parse parses rawurl into a URL structure.
;; 
;; The rawurl may be relative (a path, without a host) or absolute
;; (starting with a scheme). Trying to parse a hostname and path
;; without a scheme is invalid but may not necessarily return an
;; error, due to parsing ambiguities."
;;   {:added "1.0"
;;    :go "parse(rawurl)"}
;;   [^String rawurl])
;; 
JOKER FUNC url.ParseQuery has: 
;; (defn ^[ABEND881(unrecognized Expr type *ast.MapType at: &{9937224 string 0xc004b22ea0}) Error] ParseQuery
;;   "ParseQuery parses the URL-encoded query string and returns
;; a map listing the values specified for each key.
;; ParseQuery always returns a non-nil map containing all the
;; valid query parameters found; err describes the first decoding error
;; encountered, if any.
;; 
;; Query is expected to be a list of key=value settings separated by
;; ampersands or semicolons. A setting without an equals sign is
;; interpreted as a key set to an empty value."
;;   {:added "1.0"
;;    :go "parseQuery(query)"}
;;   [^String query])
;; 
JOKER FUNC url.ParseRequestURI has: 
;; (defn ^[{:scheme ^String Scheme, :opaque ^String Opaque, :user ^ABEND881(unrecognized Expr type *ast.StarExpr at: &{9923506 Userinfo}) User, :host ^String Host, :path ^String Path, :rawpath ^String RawPath, :forcequery ForceQuery, :rawquery ^String RawQuery, :fragment ^String Fragment} Error] ParseRequestURI
;;   "ParseRequestURI parses rawurl into a URL structure. It assumes that
;; rawurl was received in an HTTP request, so the rawurl is interpreted
;; only as an absolute URI or an absolute path.
;; The string rawurl is assumed not to have a #fragment suffix.
;; (Web browsers strip #fragment before sending the URL to a web server.)"
;;   {:added "1.0"
;;    :go "parseRequestURI(rawurl)"}
;;   [^String rawurl])
;; 
JOKER FUNC url.PathEscape has: 
(defn ^String PathEscape
  "PathEscape escapes the string so it can be safely placed
inside a URL path segment."
  {:added "1.0"
   :go "pathEscape(s)"}
  [^String s])

JOKER FUNC url.PathUnescape has: 
(defn ^[String Error] PathUnescape
  "PathUnescape does the inverse transformation of PathEscape,
converting each 3-byte encoded substring of the form "%AB" into the
hex-decoded byte 0xAB. It returns an error if any % is not followed
by two hexadecimal digits.

PathUnescape is identical to QueryUnescape except that it does not
unescape '+' to ' ' (space)."
  {:added "1.0"
   :go "pathUnescape(s)"}
  [^String s])

JOKER FUNC url.QueryEscape has: 
(defn ^String QueryEscape
  "QueryEscape escapes the string so it can be safely placed
inside a URL query."
  {:added "1.0"
   :go "queryEscape(s)"}
  [^String s])

JOKER FUNC url.QueryUnescape has: 
(defn ^[String Error] QueryUnescape
  "QueryUnescape does the inverse transformation of QueryEscape,
converting each 3-byte encoded substring of the form "%AB" into the
hex-decoded byte 0xAB.
It returns an error if any % is not followed by two hexadecimal
digits."
  {:added "1.0"
   :go "queryUnescape(s)"}
  [^String s])

JOKER FUNC url.TestEncodeQuery has: 
;; (defn TestEncodeQuery
;;   {:added "1.0"
;;    :go "testEncodeQuery(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{9892226 0xc004a856c0}) t])
;; 
JOKER FUNC url.TestGob has: 
;; (defn TestGob
;;   {:added "1.0"
;;    :go "testGob(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{9912784 0xc004acad60}) t])
;; 
JOKER FUNC url.TestInvalidUserPassword has: 
;; (defn TestInvalidUserPassword
;;   {:added "1.0"
;;    :go "testInvalidUserPassword(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{9913695 0xc004acbfc0}) t])
;; 
JOKER FUNC url.TestJSON has: 
;; (defn TestJSON
;;   {:added "1.0"
;;    :go "testJSON(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{9912214 0xc004aca4c0}) t])
;; 
JOKER FUNC url.TestNilUser has: 
;; (defn TestNilUser
;;   {:added "1.0"
;;    :go "testNilUser(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{9913172 0xc004acb600}) t])
;; 
JOKER FUNC url.TestParse has: 
;; (defn TestParse
;;   {:added "1.0"
;;    :go "testParse(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{9884543 0xc004a72d00}) t])
;; 
JOKER FUNC url.TestParseErrors has: 
;; (defn TestParseErrors
;;   {:added "1.0"
;;    :go "testParseErrors(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{9905056 0xc004aa95a0}) t])
;; 
JOKER FUNC url.TestParseFailure has: 
;; (defn TestParseFailure
;;   {:added "1.0"
;;    :go "testParseFailure(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{9904750 0xc004aa9100}) t])
;; 
JOKER FUNC url.TestParseQuery has: 
;; (defn TestParseQuery
;;   {:added "1.0"
;;    :go "testParseQuery(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{9901964 0xc004aa6880}) t])
;; 
JOKER FUNC url.TestParseRequestURI has: 
;; (defn TestParseRequestURI
;;   {:added "1.0"
;;    :go "testParseRequestURI(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{9886322 0xc004a76080}) t])
;; 
JOKER FUNC url.TestPathEscape has: 
;; (defn TestPathEscape
;;   {:added "1.0"
;;    :go "testPathEscape(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{9891157 0xc004a848a0}) t])
;; 
JOKER FUNC url.TestQueryEscape has: 
;; (defn TestQueryEscape
;;   {:added "1.0"
;;    :go "testQueryEscape(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{9890329 0xc004a7fde0}) t])
;; 
JOKER FUNC url.TestQueryValues has: 
;; (defn TestQueryValues
;;   {:added "1.0"
;;    :go "testQueryValues(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{9900783 0xc004a9f140}) t])
;; 
JOKER FUNC url.TestRequestURI has: 
;; (defn TestRequestURI
;;   {:added "1.0"
;;    :go "testRequestURI(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{9904551 0xc004aa8ca0}) t])
;; 
JOKER FUNC url.TestResolvePath has: 
;; (defn TestResolvePath
;;   {:added "1.0"
;;    :go "testResolvePath(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{9892779 0xc004a88220}) t])
;; 
JOKER FUNC url.TestResolveReference has: 
;; (defn TestResolveReference
;;   {:added "1.0"
;;    :go "testResolveReference(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{9898994 0xc004a9b7c0}) t])
;; 
JOKER FUNC url.TestShouldEscape has: 
;; (defn TestShouldEscape
;;   {:added "1.0"
;;    :go "testShouldEscape(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{9908486 0xc004aba660}) t])
;; 
JOKER FUNC url.TestStarRequest has: 
;; (defn TestStarRequest
;;   "Issue 11202"
;;   {:added "1.0"
;;    :go "testStarRequest(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{9906600 0xc004ab67a0}) t])
;; 
JOKER FUNC url.TestURLErrorImplementsNetError has: 
;; (defn TestURLErrorImplementsNetError
;;   "Test that url.Error implements net.Error and that it forwards"
;;   {:added "1.0"
;;    :go "testURLErrorImplementsNetError(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{9910701 0xc004ac0740}) t])
;; 
JOKER FUNC url.TestURLHostname has: 
;; (defn TestURLHostname
;;   {:added "1.0"
;;    :go "testURLHostname(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{9911167 0xc004ac10c0}) t])
;; 
JOKER FUNC url.TestURLPort has: 
;; (defn TestURLPort
;;   {:added "1.0"
;;    :go "testURLPort(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{9911704 0xc004ac1a40}) t])
;; 
JOKER FUNC url.TestURLString has: 
;; (defn TestURLString
;;   {:added "1.0"
;;    :go "testURLString(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{9887781 0xc004a77080}) t])
;; 
JOKER FUNC url.TestUnescape has: 
;; (defn TestUnescape
;;   {:added "1.0"
;;    :go "testUnescape(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{9889044 0xc004a7e580}) t])
;; 
JOKER FUNC url.User has: 
(defn ^{:username ^String username, :password ^String password, :passwordset passwordSet} User
  "User returns a Userinfo containing the provided username
and no password set."
  {:added "1.0"
   :go "user(username)"}
  [^String username])

JOKER FUNC url.UserPassword has: 
(defn ^{:username ^String username, :password ^String password, :passwordset passwordSet} UserPassword
  "UserPassword returns a Userinfo containing the provided username
and password.

This functionality should only be used with legacy web sites.
RFC 2396 warns that interpreting Userinfo this way
``is NOT RECOMMENDED, because the passing of authentication
information in clear text (such as URI) has proven to be a
security risk in almost every case where it has been used.''"
  {:added "1.0"
   :go "userPassword(username, password)"}
  [^String username, ^String password])

JOKER FUNC url_test.ExampleParseQuery has: 
;; (defn ExampleParseQuery
;;   {:added "1.0"
;;    :go "exampleParseQuery()"}
;;   [])
;; 
JOKER FUNC url_test.ExampleURL has: 
;; (defn ExampleURL
;;   {:added "1.0"
;;    :go "exampleURL()"}
;;   [])
;; 
JOKER FUNC url_test.ExampleURL_EscapedPath has: 
;; (defn ExampleURL_EscapedPath
;;   {:added "1.0"
;;    :go "exampleURL_EscapedPath()"}
;;   [])
;; 
JOKER FUNC url_test.ExampleURL_Hostname has: 
;; (defn ExampleURL_Hostname
;;   {:added "1.0"
;;    :go "exampleURL_Hostname()"}
;;   [])
;; 
JOKER FUNC url_test.ExampleURL_IsAbs has: 
;; (defn ExampleURL_IsAbs
;;   {:added "1.0"
;;    :go "exampleURL_IsAbs()"}
;;   [])
;; 
JOKER FUNC url_test.ExampleURL_MarshalBinary has: 
;; (defn ExampleURL_MarshalBinary
;;   {:added "1.0"
;;    :go "exampleURL_MarshalBinary()"}
;;   [])
;; 
JOKER FUNC url_test.ExampleURL_Parse has: 
;; (defn ExampleURL_Parse
;;   {:added "1.0"
;;    :go "exampleURL_Parse()"}
;;   [])
;; 
JOKER FUNC url_test.ExampleURL_Port has: 
;; (defn ExampleURL_Port
;;   {:added "1.0"
;;    :go "exampleURL_Port()"}
;;   [])
;; 
JOKER FUNC url_test.ExampleURL_Query has: 
;; (defn ExampleURL_Query
;;   {:added "1.0"
;;    :go "exampleURL_Query()"}
;;   [])
;; 
JOKER FUNC url_test.ExampleURL_RequestURI has: 
;; (defn ExampleURL_RequestURI
;;   {:added "1.0"
;;    :go "exampleURL_RequestURI()"}
;;   [])
;; 
JOKER FUNC url_test.ExampleURL_ResolveReference has: 
;; (defn ExampleURL_ResolveReference
;;   {:added "1.0"
;;    :go "exampleURL_ResolveReference()"}
;;   [])
;; 
JOKER FUNC url_test.ExampleURL_String has: 
;; (defn ExampleURL_String
;;   {:added "1.0"
;;    :go "exampleURL_String()"}
;;   [])
;; 
JOKER FUNC url_test.ExampleURL_UnmarshalBinary has: 
;; (defn ExampleURL_UnmarshalBinary
;;   {:added "1.0"
;;    :go "exampleURL_UnmarshalBinary()"}
;;   [])
;; 
JOKER FUNC url_test.ExampleURL_roundtrip has: 
;; (defn ExampleURL_roundtrip
;;   {:added "1.0"
;;    :go "exampleURL_roundtrip()"}
;;   [])
;; 
JOKER FUNC url_test.ExampleValues has: 
;; (defn ExampleValues
;;   {:added "1.0"
;;    :go "exampleValues()"}
;;   [])
;; 
JOKER FUNC user.BenchmarkCurrent has: 
;; (defn BenchmarkCurrent
;;   {:added "1.0"
;;    :go "benchmarkCurrent(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{10242795 0xc0029e2bc0}) b])
;; 
JOKER FUNC user.Current has: 
(defn ^[{:uid ^String Uid, :gid ^String Gid, :username ^String Username, :name ^String Name, :homedir ^String HomeDir} Error] Current
  "Current returns the current user."
  {:added "1.0"
   :go "current()"}
  [])

JOKER FUNC user.Lookup has: 
(defn ^[{:uid ^String Uid, :gid ^String Gid, :username ^String Username, :name ^String Name, :homedir ^String HomeDir} Error] Lookup
  "Lookup looks up a user by username. If the user cannot be found, the
returned error is of type UnknownUserError."
  {:added "1.0"
   :go "lookup(username)"}
  [^String username])

JOKER FUNC user.LookupGroup has: 
(defn ^[{:gid ^String Gid, :name ^String Name} Error] LookupGroup
  "LookupGroup looks up a group by name. If the group cannot be found, the
returned error is of type UnknownGroupError."
  {:added "1.0"
   :go "lookupGroup(name)"}
  [^String name])

JOKER FUNC user.LookupGroupId has: 
(defn ^[{:gid ^String Gid, :name ^String Name} Error] LookupGroupId
  "LookupGroupId looks up a group by groupid. If the group cannot be found, the
returned error is of type UnknownGroupIdError."
  {:added "1.0"
   :go "lookupGroupId(gid)"}
  [^String gid])

JOKER FUNC user.LookupId has: 
(defn ^[{:uid ^String Uid, :gid ^String Gid, :username ^String Username, :name ^String Name, :homedir ^String HomeDir} Error] LookupId
  "LookupId looks up a user by userid. If the user cannot be found, the
returned error is of type UnknownUserIdError."
  {:added "1.0"
   :go "lookupId(uid)"}
  [^String uid])

JOKER FUNC user.TestCurrent has: 
;; (defn TestCurrent
;;   {:added "1.0"
;;    :go "testCurrent(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{10242048 0xc0029d48e0}) t])
;; 
JOKER FUNC user.TestGroupIds has: 
;; (defn TestGroupIds
;;   {:added "1.0"
;;    :go "testGroupIds(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{10245114 0xc002aaf480}) t])
;; 
JOKER FUNC user.TestLookup has: 
;; (defn TestLookup
;;   {:added "1.0"
;;    :go "testLookup(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{10243382 0xc0029fa060}) t])
;; 
JOKER FUNC user.TestLookupGroup has: 
;; (defn TestLookupGroup
;;   {:added "1.0"
;;    :go "testLookupGroup(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{10244376 0xc002aae720}) t])
;; 
JOKER FUNC user.TestLookupId has: 
;; (defn TestLookupId
;;   {:added "1.0"
;;    :go "testLookupId(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{10243930 0xc002a3bf80}) t])
;; 
JOKER FUNC user.TestNegativeUid has: 
;; (defn TestNegativeUid
;;   "Issue 22739"
;;   {:added "1.0"
;;    :go "testNegativeUid(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{10247578 0xc002ace200}) t])
;; 
JOKER FUNC utf16.Decode has: 
;; (defn ^[ABEND042(cannot find typename utf16.rune)] Decode
;;   "Decode returns the Unicode code point sequence represented
;; by the UTF-16 encoding s."
;;   {:added "1.0"
;;    :go "decode(s)"}
;;   [^ABEND881(unrecognized Expr type *ast.ArrayType at: &{14335914 <nil> uint16}) s])
;; 
JOKER FUNC utf16.DecodeRune has: 
;; (defn ^ABEND042(cannot find typename utf16.rune) DecodeRune
;;   "DecodeRune returns the UTF-16 decoding of a surrogate pair.
;; If the pair is not a valid UTF-16 surrogate pair, DecodeRune returns
;; the Unicode replacement code point U+FFFD."
;;   {:added "1.0"
;;    :go "decodeRune(r1, r2)"}
;;   [r1, r2])
;; 
JOKER FUNC utf16.Encode has: 
;; (defn ^[Int] Encode
;;   "Encode returns the UTF-16 encoding of the Unicode code point sequence s."
;;   {:added "1.0"
;;    :go "encode(s)"}
;;   [^ABEND881(unrecognized Expr type *ast.ArrayType at: &{14335326 <nil> rune}) s])
;; 
JOKER FUNC utf16.EncodeRune has: 
(defn ^[r1 r2] EncodeRune
  "EncodeRune returns the UTF-16 surrogate pair r1, r2 for the given rune.
If the rune is not a valid Unicode code point or does not need encoding,
EncodeRune returns U+FFFD, U+FFFD."
  {:added "1.0"
   :go "encodeRune(r)"}
  [r])

JOKER FUNC utf16.IsSurrogate has: 
;; (defn ^ABEND042(cannot find typename utf16.bool) IsSurrogate
;;   "IsSurrogate reports whether the specified Unicode code point
;; can appear in a surrogate pair."
;;   {:added "1.0"
;;    :go "isSurrogate(r)"}
;;   [r])
;; 
JOKER FUNC utf16_test.BenchmarkDecodeRune has: 
;; (defn BenchmarkDecodeRune
;;   {:added "1.0"
;;    :go "benchmarkDecodeRune(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{14340793 0xc00544a340}) b])
;; 
JOKER FUNC utf16_test.BenchmarkDecodeValidASCII has: 
;; (defn BenchmarkDecodeValidASCII
;;   {:added "1.0"
;;    :go "benchmarkDecodeValidASCII(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{14340394 0xc0053fbb00}) b])
;; 
JOKER FUNC utf16_test.BenchmarkDecodeValidJapaneseChars has: 
;; (defn BenchmarkDecodeValidJapaneseChars
;;   {:added "1.0"
;;    :go "benchmarkDecodeValidJapaneseChars(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{14340588 0xc0053fbf40}) b])
;; 
JOKER FUNC utf16_test.BenchmarkEncodeRune has: 
;; (defn BenchmarkEncodeRune
;;   {:added "1.0"
;;    :go "benchmarkEncodeRune(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{14341425 0xc00544b140}) b])
;; 
JOKER FUNC utf16_test.BenchmarkEncodeValidASCII has: 
;; (defn BenchmarkEncodeValidASCII
;;   {:added "1.0"
;;    :go "benchmarkEncodeValidASCII(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{14341153 0xc00544ab00}) b])
;; 
JOKER FUNC utf16_test.BenchmarkEncodeValidJapaneseChars has: 
;; (defn BenchmarkEncodeValidJapaneseChars
;;   {:added "1.0"
;;    :go "benchmarkEncodeValidJapaneseChars(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{14341298 0xc00544ae40}) b])
;; 
JOKER FUNC utf16_test.TestConstants has: 
;; (defn TestConstants
;;   "Validate the constants redefined from unicode."
;;   {:added "1.0"
;;    :go "testConstants(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{14336672 0xc0053b7620}) t])
;; 
JOKER FUNC utf16_test.TestDecode has: 
;; (defn TestDecode
;;   {:added "1.0"
;;    :go "testDecode(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{14338871 0xc0053bbfe0}) t])
;; 
JOKER FUNC utf16_test.TestDecodeRune has: 
;; (defn TestDecodeRune
;;   {:added "1.0"
;;    :go "testDecodeRune(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{14339316 0xc0053fa8c0}) t])
;; 
JOKER FUNC utf16_test.TestEncode has: 
;; (defn TestEncode
;;   {:added "1.0"
;;    :go "testEncode(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{14337390 0xc0053ba2a0}) t])
;; 
JOKER FUNC utf16_test.TestEncodeRune has: 
;; (defn TestEncodeRune
;;   {:added "1.0"
;;    :go "testEncodeRune(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{14337592 0xc0053ba780}) t])
;; 
JOKER FUNC utf16_test.TestIsSurrogate has: 
;; (defn TestIsSurrogate
;;   {:added "1.0"
;;    :go "testIsSurrogate(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{14340179 0xc0053fb6a0}) t])
;; 
JOKER FUNC utf8.DecodeLastRune has: 
;; (defn ^[r size] DecodeLastRune
;;   "DecodeLastRune unpacks the last UTF-8 encoding in p and returns the rune and
;; its width in bytes. If p is empty it returns (RuneError, 0). Otherwise, if
;; the encoding is invalid, it returns (RuneError, 1). Both are impossible
;; results for correct, non-empty UTF-8.
;; 
;; An encoding is invalid if it is incorrect UTF-8, encodes a rune that is
;; out of range, or is not the shortest possible UTF-8 encoding for the
;; value. No other validation is performed."
;;   {:added "1.0"
;;    :go "decodeLastRune(p)"}
;;   [^ABEND881(unrecognized Expr type *ast.ArrayType at: &{14367185 <nil> byte}) p])
;; 
JOKER FUNC utf8.DecodeLastRuneInString has: 
(defn ^[r size] DecodeLastRuneInString
  "DecodeLastRuneInString is like DecodeLastRune but its input is a string. If
s is empty it returns (RuneError, 0). Otherwise, if the encoding is invalid,
it returns (RuneError, 1). Both are impossible results for correct,
non-empty UTF-8.

An encoding is invalid if it is incorrect UTF-8, encodes a rune that is
out of range, or is not the shortest possible UTF-8 encoding for the
value. No other validation is performed."
  {:added "1.0"
   :go "decodeLastRuneInString(s)"}
  [^String s])

JOKER FUNC utf8.DecodeRune has: 
;; (defn ^[r size] DecodeRune
;;   "DecodeRune unpacks the first UTF-8 encoding in p and returns the rune and
;; its width in bytes. If p is empty it returns (RuneError, 0). Otherwise, if
;; the encoding is invalid, it returns (RuneError, 1). Both are impossible
;; results for correct, non-empty UTF-8.
;; 
;; An encoding is invalid if it is incorrect UTF-8, encodes a rune that is
;; out of range, or is not the shortest possible UTF-8 encoding for the
;; value. No other validation is performed."
;;   {:added "1.0"
;;    :go "decodeRune(p)"}
;;   [^ABEND881(unrecognized Expr type *ast.ArrayType at: &{14364335 <nil> byte}) p])
;; 
JOKER FUNC utf8.DecodeRuneInString has: 
(defn ^[r size] DecodeRuneInString
  "DecodeRuneInString is like DecodeRune but its input is a string. If s is
empty it returns (RuneError, 0). Otherwise, if the encoding is invalid, it
returns (RuneError, 1). Both are impossible results for correct, non-empty
UTF-8.

An encoding is invalid if it is incorrect UTF-8, encodes a rune that is
out of range, or is not the shortest possible UTF-8 encoding for the
value. No other validation is performed."
  {:added "1.0"
   :go "decodeRuneInString(s)"}
  [^String s])

JOKER FUNC utf8.EncodeRune has: 
;; (defn ^Int EncodeRune
;;   "EncodeRune writes into p (which must be large enough) the UTF-8 encoding of the rune.
;; It returns the number of bytes written."
;;   {:added "1.0"
;;    :go "encodeRune(p, r)"}
;;   [^ABEND881(unrecognized Expr type *ast.ArrayType at: &{14369307 <nil> byte}) p, r])
;; 
JOKER FUNC utf8.FullRune has: 
;; (defn ^ABEND042(cannot find typename utf8.bool) FullRune
;;   "FullRune reports whether the bytes in p begin with a full UTF-8 encoding of a rune.
;; An invalid encoding is considered a full Rune since it will convert as a width-1 error rune."
;;   {:added "1.0"
;;    :go "fullRune(p)"}
;;   [^ABEND881(unrecognized Expr type *ast.ArrayType at: &{14363053 <nil> byte}) p])
;; 
JOKER FUNC utf8.FullRuneInString has: 
;; (defn ^ABEND042(cannot find typename utf8.bool) FullRuneInString
;;   "FullRuneInString is like FullRune but its input is a string."
;;   {:added "1.0"
;;    :go "fullRuneInString(s)"}
;;   [^String s])
;; 
JOKER FUNC utf8.RuneCount has: 
;; (defn ^Int RuneCount
;;   "RuneCount returns the number of runes in p. Erroneous and short
;; encodings are treated as single runes of width 1 byte."
;;   {:added "1.0"
;;    :go "runeCount(p)"}
;;   [^ABEND881(unrecognized Expr type *ast.ArrayType at: &{14370172 <nil> byte}) p])
;; 
JOKER FUNC utf8.RuneCountInString has: 
(defn ^n RuneCountInString
  "RuneCountInString is like RuneCount but its input is a string."
  {:added "1.0"
   :go "runeCountInString(s)"}
  [^String s])

JOKER FUNC utf8.RuneLen has: 
(defn ^Int RuneLen
  "RuneLen returns the number of bytes required to encode the rune.
It returns -1 if the rune is not a valid value to encode in UTF-8."
  {:added "1.0"
   :go "runeLen(r)"}
  [r])

JOKER FUNC utf8.RuneStart has: 
;; (defn ^ABEND042(cannot find typename utf8.bool) RuneStart
;;   "RuneStart reports whether the byte could be the first byte of an encoded,
;; possibly invalid rune. Second and subsequent bytes always have the top two
;; bits set to 10."
;;   {:added "1.0"
;;    :go "runeStart(b)"}
;;   [b])
;; 
JOKER FUNC utf8.Valid has: 
;; (defn ^ABEND042(cannot find typename utf8.bool) Valid
;;   "Valid reports whether p consists entirely of valid UTF-8-encoded runes."
;;   {:added "1.0"
;;    :go "valid(p)"}
;;   [^ABEND881(unrecognized Expr type *ast.ArrayType at: &{14371749 <nil> byte}) p])
;; 
JOKER FUNC utf8.ValidRune has: 
;; (defn ^ABEND042(cannot find typename utf8.bool) ValidRune
;;   "ValidRune reports whether r can be legally encoded as UTF-8.
;; Code points that are out of range or a surrogate half are illegal."
;;   {:added "1.0"
;;    :go "validRune(r)"}
;;   [r])
;; 
JOKER FUNC utf8.ValidString has: 
;; (defn ^ABEND042(cannot find typename utf8.bool) ValidString
;;   "ValidString reports whether s consists entirely of valid UTF-8-encoded runes."
;;   {:added "1.0"
;;    :go "validString(s)"}
;;   [^String s])
;; 
JOKER FUNC utf8_test.BenchmarkDecodeASCIIRune has: 
;; (defn BenchmarkDecodeASCIIRune
;;   {:added "1.0"
;;    :go "benchmarkDecodeASCIIRune(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{14358596 0xc0056e30e0}) b])
;; 
JOKER FUNC utf8_test.BenchmarkDecodeJapaneseRune has: 
;; (defn BenchmarkDecodeJapaneseRune
;;   {:added "1.0"
;;    :go "benchmarkDecodeJapaneseRune(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{14358713 0xc0056e3380}) b])
;; 
JOKER FUNC utf8_test.BenchmarkEncodeASCIIRune has: 
;; (defn BenchmarkEncodeASCIIRune
;;   {:added "1.0"
;;    :go "benchmarkEncodeASCIIRune(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{14358327 0xc0056e2aa0}) b])
;; 
JOKER FUNC utf8_test.BenchmarkEncodeJapaneseRune has: 
;; (defn BenchmarkEncodeJapaneseRune
;;   {:added "1.0"
;;    :go "benchmarkEncodeJapaneseRune(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{14358462 0xc0056e2dc0}) b])
;; 
JOKER FUNC utf8_test.BenchmarkFullASCIIRune has: 
;; (defn BenchmarkFullASCIIRune
;;   {:added "1.0"
;;    :go "benchmarkFullASCIIRune(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{14358835 0xc0056e3620}) b])
;; 
JOKER FUNC utf8_test.BenchmarkFullJapaneseRune has: 
;; (defn BenchmarkFullJapaneseRune
;;   {:added "1.0"
;;    :go "benchmarkFullJapaneseRune(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{14358948 0xc0056e38c0}) b])
;; 
JOKER FUNC utf8_test.BenchmarkRuneCountInStringTenASCIIChars has: 
;; (defn BenchmarkRuneCountInStringTenASCIIChars
;;   {:added "1.0"
;;    :go "benchmarkRuneCountInStringTenASCIIChars(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{14357539 0xc0056d7ce0}) b])
;; 
JOKER FUNC utf8_test.BenchmarkRuneCountInStringTenJapaneseChars has: 
;; (defn BenchmarkRuneCountInStringTenJapaneseChars
;;   {:added "1.0"
;;    :go "benchmarkRuneCountInStringTenJapaneseChars(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{14357671 0xc0056d7f00}) b])
;; 
JOKER FUNC utf8_test.BenchmarkRuneCountTenASCIIChars has: 
;; (defn BenchmarkRuneCountTenASCIIChars
;;   {:added "1.0"
;;    :go "benchmarkRuneCountTenASCIIChars(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{14357250 0xc0056d77a0}) b])
;; 
JOKER FUNC utf8_test.BenchmarkRuneCountTenJapaneseChars has: 
;; (defn BenchmarkRuneCountTenJapaneseChars
;;   {:added "1.0"
;;    :go "benchmarkRuneCountTenJapaneseChars(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{14357382 0xc0056d7a40}) b])
;; 
JOKER FUNC utf8_test.BenchmarkValidStringTenASCIIChars has: 
;; (defn BenchmarkValidStringTenASCIIChars
;;   {:added "1.0"
;;    :go "benchmarkValidStringTenASCIIChars(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{14358079 0xc0056e2660}) b])
;; 
JOKER FUNC utf8_test.BenchmarkValidStringTenJapaneseChars has: 
;; (defn BenchmarkValidStringTenJapaneseChars
;;   {:added "1.0"
;;    :go "benchmarkValidStringTenJapaneseChars(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{14358199 0xc0056e2880}) b])
;; 
JOKER FUNC utf8_test.BenchmarkValidTenASCIIChars has: 
;; (defn BenchmarkValidTenASCIIChars
;;   {:added "1.0"
;;    :go "benchmarkValidTenASCIIChars(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{14357808 0xc0056e2120}) b])
;; 
JOKER FUNC utf8_test.BenchmarkValidTenJapaneseChars has: 
;; (defn BenchmarkValidTenJapaneseChars
;;   {:added "1.0"
;;    :go "benchmarkValidTenJapaneseChars(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{14357932 0xc0056e23c0}) b])
;; 
JOKER FUNC utf8_test.ExampleDecodeLastRune has: 
;; (defn ExampleDecodeLastRune
;;   {:added "1.0"
;;    :go "exampleDecodeLastRune()"}
;;   [])
;; 
JOKER FUNC utf8_test.ExampleDecodeLastRuneInString has: 
;; (defn ExampleDecodeLastRuneInString
;;   {:added "1.0"
;;    :go "exampleDecodeLastRuneInString()"}
;;   [])
;; 
JOKER FUNC utf8_test.ExampleDecodeRune has: 
;; (defn ExampleDecodeRune
;;   {:added "1.0"
;;    :go "exampleDecodeRune()"}
;;   [])
;; 
JOKER FUNC utf8_test.ExampleDecodeRuneInString has: 
;; (defn ExampleDecodeRuneInString
;;   {:added "1.0"
;;    :go "exampleDecodeRuneInString()"}
;;   [])
;; 
JOKER FUNC utf8_test.ExampleEncodeRune has: 
;; (defn ExampleEncodeRune
;;   {:added "1.0"
;;    :go "exampleEncodeRune()"}
;;   [])
;; 
JOKER FUNC utf8_test.ExampleFullRune has: 
;; (defn ExampleFullRune
;;   {:added "1.0"
;;    :go "exampleFullRune()"}
;;   [])
;; 
JOKER FUNC utf8_test.ExampleFullRuneInString has: 
;; (defn ExampleFullRuneInString
;;   {:added "1.0"
;;    :go "exampleFullRuneInString()"}
;;   [])
;; 
JOKER FUNC utf8_test.ExampleRuneCount has: 
;; (defn ExampleRuneCount
;;   {:added "1.0"
;;    :go "exampleRuneCount()"}
;;   [])
;; 
JOKER FUNC utf8_test.ExampleRuneCountInString has: 
;; (defn ExampleRuneCountInString
;;   {:added "1.0"
;;    :go "exampleRuneCountInString()"}
;;   [])
;; 
JOKER FUNC utf8_test.ExampleRuneLen has: 
;; (defn ExampleRuneLen
;;   {:added "1.0"
;;    :go "exampleRuneLen()"}
;;   [])
;; 
JOKER FUNC utf8_test.ExampleRuneStart has: 
;; (defn ExampleRuneStart
;;   {:added "1.0"
;;    :go "exampleRuneStart()"}
;;   [])
;; 
JOKER FUNC utf8_test.ExampleValid has: 
;; (defn ExampleValid
;;   {:added "1.0"
;;    :go "exampleValid()"}
;;   [])
;; 
JOKER FUNC utf8_test.ExampleValidRune has: 
;; (defn ExampleValidRune
;;   {:added "1.0"
;;    :go "exampleValidRune()"}
;;   [])
;; 
JOKER FUNC utf8_test.ExampleValidString has: 
;; (defn ExampleValidString
;;   {:added "1.0"
;;    :go "exampleValidString()"}
;;   [])
;; 
JOKER FUNC utf8_test.TestConstants has: 
;; (defn TestConstants
;;   "Validate the constants redefined from unicode."
;;   {:added "1.0"
;;    :go "testConstants(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{14345152 0xc0054a3300}) t])
;; 
JOKER FUNC utf8_test.TestDecodeInvalidSequence has: 
;; (defn TestDecodeInvalidSequence
;;   {:added "1.0"
;;    :go "testDecodeInvalidSequence(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{14352233 0xc005525be0}) t])
;; 
JOKER FUNC utf8_test.TestDecodeRune has: 
;; (defn TestDecodeRune
;;   {:added "1.0"
;;    :go "testDecodeRune(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{14347823 0xc0054b9aa0}) t])
;; 
JOKER FUNC utf8_test.TestDecodeSurrogateRune has: 
;; (defn TestDecodeSurrogateRune
;;   {:added "1.0"
;;    :go "testDecodeSurrogateRune(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{14349596 0xc0054d3a00}) t])
;; 
JOKER FUNC utf8_test.TestEncodeRune has: 
;; (defn TestEncodeRune
;;   {:added "1.0"
;;    :go "testEncodeRune(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{14347574 0xc0054b9460}) t])
;; 
JOKER FUNC utf8_test.TestFullRune has: 
;; (defn TestFullRune
;;   {:added "1.0"
;;    :go "testFullRune(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{14346854 0xc0054b87a0}) t])
;; 
JOKER FUNC utf8_test.TestNegativeRune has: 
;; (defn TestNegativeRune
;;   "Check that negative runes encode as U+FFFD."
;;   {:added "1.0"
;;    :go "testNegativeRune(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{14354414 0xc00556a0c0}) t])
;; 
JOKER FUNC utf8_test.TestRuneCount has: 
;; (defn TestRuneCount
;;   {:added "1.0"
;;    :go "testRuneCount(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{14354917 0xc00556aa00}) t])
;; 
JOKER FUNC utf8_test.TestRuneLen has: 
;; (defn TestRuneLen
;;   {:added "1.0"
;;    :go "testRuneLen(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{14355468 0xc00556b6a0}) t])
;; 
JOKER FUNC utf8_test.TestRuntimeConversion has: 
;; (defn TestRuntimeConversion
;;   "Check that a range loop, len([]rune(string)) optimization and
;; []rune conversions visit the same runes.
;; Not really a test of this package, but the assumption is used here and
;; it's good to verify."
;;   {:added "1.0"
;;    :go "testRuntimeConversion(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{14350638 0xc005524900}) t])
;; 
JOKER FUNC utf8_test.TestSequencing has: 
;; (defn TestSequencing
;;   "Check that DecodeRune and DecodeLastRune correspond to
;; the equivalent range loop."
;;   {:added "1.0"
;;    :go "testSequencing(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{14350095 0xc0055241e0}) t])
;; 
JOKER FUNC utf8_test.TestValid has: 
;; (defn TestValid
;;   {:added "1.0"
;;    :go "testValid(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{14356467 0xc0056d6660}) t])
;; 
JOKER FUNC utf8_test.TestValidRune has: 
;; (defn TestValidRune
;;   {:added "1.0"
;;    :go "testValidRune(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{14357047 0xc0056d7380}) t])
;; 
JOKER FUNC x509.CreateCertificate has: 
;; (defn ^[cert err] CreateCertificate
;;   "CreateCertificate creates a new X.509v3 certificate based on a template.
;; The following members of template are used:
;; 
;;  - AuthorityKeyId
;;  - BasicConstraintsValid
;;  - CRLDistributionPoints
;;  - DNSNames
;;  - EmailAddresses
;;  - ExcludedDNSDomains
;;  - ExcludedEmailAddresses
;;  - ExcludedIPRanges
;;  - ExcludedURIDomains
;;  - ExtKeyUsage
;;  - ExtraExtensions
;;  - IsCA
;;  - IssuingCertificateURL
;;  - KeyUsage
;;  - MaxPathLen
;;  - MaxPathLenZero
;;  - NotAfter
;;  - NotBefore
;;  - OCSPServer
;;  - PermittedDNSDomains
;;  - PermittedDNSDomainsCritical
;;  - PermittedEmailAddresses
;;  - PermittedIPRanges
;;  - PermittedURIDomains
;;  - PolicyIdentifiers
;;  - SerialNumber
;;  - SignatureAlgorithm
;;  - Subject
;;  - SubjectKeyId
;;  - URIs
;;  - UnknownExtKeyUsage
;; 
;; The certificate is signed by parent. If parent is equal to template then the
;; certificate is self-signed. The parameter pub is the public key of the
;; signee and priv is the private key of the signer.
;; 
;; The returned slice is the certificate in DER encoding.
;; 
;; All keys types that are implemented via crypto.Signer are supported (This
;; includes *rsa.PublicKey and *ecdsa.PublicKey.)
;; 
;; The AuthorityKeyId will be taken from the SubjectKeyId of parent, if any,
;; unless the resulting certificate is self-signed. Otherwise the value from
;; template will be used."
;;   {:added "1.0"
;;    :go "createCertificate(rand, template, parent, pub, priv)"}
;;   [^ABEND881(unrecognized Expr type *ast.SelectorExpr at: &{io Reader}) rand, ^ABEND881(unrecognized Expr type *ast.StarExpr at: &{2128598 Certificate}) template, ^ABEND881(unrecognized Expr type *ast.StarExpr at: &{2128598 Certificate}) parent, ^ABEND881(unrecognized Expr type *ast.InterfaceType at: &{2128622 0xc000c6ec90 false}) pub, ^ABEND881(unrecognized Expr type *ast.InterfaceType at: &{2128622 0xc000c6ec90 false}) priv])
;; 
JOKER FUNC x509.CreateCertificateRequest has: 
;; (defn ^[csr err] CreateCertificateRequest
;;   "CreateCertificateRequest creates a new certificate request based on a
;; template. The following members of template are used:
;; 
;;  - Attributes
;;  - DNSNames
;;  - EmailAddresses
;;  - ExtraExtensions
;;  - IPAddresses
;;  - URIs
;;  - SignatureAlgorithm
;;  - Subject
;; 
;; The private key is the private key of the signer.
;; 
;; The returned slice is the certificate request in DER encoding.
;; 
;; All keys types that are implemented via crypto.Signer are supported (This
;; includes *rsa.PublicKey and *ecdsa.PublicKey.)"
;;   {:added "1.0"
;;    :go "createCertificateRequest(rand, template, priv)"}
;;   [^ABEND881(unrecognized Expr type *ast.SelectorExpr at: &{io Reader}) rand, ^ABEND881(unrecognized Expr type *ast.StarExpr at: &{2138429 CertificateRequest}) template, ^ABEND881(unrecognized Expr type *ast.InterfaceType at: &{2138455 0xc000c14c00 false}) priv])
;; 
JOKER FUNC x509.DecryptPEMBlock has: 
;; (defn ^[[ABEND042(cannot find typename x509.byte)] Error] DecryptPEMBlock
;;   "DecryptPEMBlock takes a password encrypted PEM block and the password used to
;; encrypt it and returns a slice of decrypted DER encoded bytes. It inspects
;; the DEK-Info header to determine the algorithm used for decryption. If no
;; DEK-Info header is present, an error is returned. If an incorrect password
;; is detected an IncorrectPasswordError is returned. Because of deficiencies
;; in the encrypted-PEM format, it's not always possible to detect an incorrect
;; password. In these cases no error will be returned but the decrypted DER
;; bytes will be random noise."
;;   {:added "1.0"
;;    :go "decryptPEMBlock(b, password)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{2277352 0xc000e8bd60}) b, ^ABEND881(unrecognized Expr type *ast.ArrayType at: &{2277373 <nil> byte}) password])
;; 
JOKER FUNC x509.EncryptPEMBlock has: 
;; (defn ^[ABEND881(unrecognized Expr type *ast.SelectorExpr at: &{pem Block}) Error] EncryptPEMBlock
;;   "EncryptPEMBlock returns a PEM block of the specified type holding the
;; given DER-encoded data encrypted with the specified algorithm and
;; password."
;;   {:added "1.0"
;;    :go "encryptPEMBlock(rand, blockType, data, password, alg)"}
;;   [^ABEND881(unrecognized Expr type *ast.SelectorExpr at: &{io Reader}) rand, ^String blockType, ^ABEND881(unrecognized Expr type *ast.ArrayType at: &{2279328 <nil> byte}) data, ^ABEND881(unrecognized Expr type *ast.ArrayType at: &{2279328 <nil> byte}) password, alg])
;; 
JOKER FUNC x509.IsEncryptedPEMBlock has: 
;; (defn ^ABEND042(cannot find typename x509.bool) IsEncryptedPEMBlock
;;   "IsEncryptedPEMBlock returns if the PEM block is password encrypted."
;;   {:added "1.0"
;;    :go "isEncryptedPEMBlock(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{2276527 0xc000e8b900}) b])
;; 
JOKER FUNC x509.MarshalECPrivateKey has: 
;; (defn ^[[ABEND042(cannot find typename x509.byte)] Error] MarshalECPrivateKey
;;   "MarshalECPrivateKey marshals an EC private key into ASN.1, DER format."
;;   {:added "1.0"
;;    :go "marshalECPrivateKey(key)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{1999364 0xc00107c520}) key])
;; 
JOKER FUNC x509.MarshalPKCS1PrivateKey has: 
;; (defn ^[ABEND042(cannot find typename x509.byte)] MarshalPKCS1PrivateKey
;;   "MarshalPKCS1PrivateKey converts a private key to ASN.1 DER encoded form."
;;   {:added "1.0"
;;    :go "marshalPKCS1PrivateKey(key)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{2060495 0xc00112bb60}) key])
;; 
JOKER FUNC x509.MarshalPKCS1PublicKey has: 
;; (defn ^[ABEND042(cannot find typename x509.byte)] MarshalPKCS1PublicKey
;;   "MarshalPKCS1PublicKey converts an RSA public key to PKCS#1, ASN.1 DER form."
;;   {:added "1.0"
;;    :go "marshalPKCS1PublicKey(key)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{2061888 0xc00112d6a0}) key])
;; 
JOKER FUNC x509.MarshalPKCS8PrivateKey has: 
;; (defn ^[[ABEND042(cannot find typename x509.byte)] Error] MarshalPKCS8PrivateKey
;;   "MarshalPKCS8PrivateKey converts a private key to PKCS#8 encoded form.
;; The following key types are supported: *rsa.PrivateKey, *ecdsa.PrivateKey.
;; Unsupported key types result in an error.
;; 
;; See RFC 5208."
;;   {:added "1.0"
;;    :go "marshalPKCS8PrivateKey(key)"}
;;   [^ABEND881(unrecognized Expr type *ast.InterfaceType at: &{2273161 0xc0001eeae0 false}) key])
;; 
JOKER FUNC x509.MarshalPKIXPublicKey has: 
;; (defn ^[[ABEND042(cannot find typename x509.byte)] Error] MarshalPKIXPublicKey
;;   "MarshalPKIXPublicKey serialises a public key to DER-encoded PKIX format."
;;   {:added "1.0"
;;    :go "marshalPKIXPublicKey(pub)"}
;;   [^ABEND881(unrecognized Expr type *ast.InterfaceType at: &{2065090 0xc001131050 false}) pub])
;; 
JOKER FUNC x509.NewCertPool has: 
;; (defn ^{:bysubjectkeyid ^ABEND881(unrecognized Expr type *ast.MapType at: &{2002358 string 0xc001086540}) bySubjectKeyId, :byname ^ABEND881(unrecognized Expr type *ast.MapType at: &{2002391 string 0xc0010865a0}) byName, :certs ^ABEND881(unrecognized Expr type *ast.ArrayType at: &{2002424 <nil> 0xc001088e40}) certs} NewCertPool
;;   "NewCertPool returns a new, empty CertPool."
;;   {:added "1.0"
;;    :go "newCertPool()"}
;;   [])
;; 
JOKER FUNC x509.ParseCRL has: 
;; (defn ^[ABEND881(unrecognized Expr type *ast.SelectorExpr at: &{pkix CertificateList}) Error] ParseCRL
;;   "ParseCRL parses a CRL from the given bytes. It's often the case that PEM
;; encoded CRLs will appear where they should be DER encoded, so this function
;; will transparently handle PEM encoding as long as there isn't any leading
;; garbage."
;;   {:added "1.0"
;;    :go "parseCRL(crlBytes)"}
;;   [^ABEND881(unrecognized Expr type *ast.ArrayType at: &{2131275 <nil> byte}) crlBytes])
;; 
JOKER FUNC x509.ParseCertificate has: 
;; (defn ^[{:raw ^ABEND881(unrecognized Expr type *ast.ArrayType at: &{2082642 <nil> byte}) Raw, :rawtbscertificate ^ABEND881(unrecognized Expr type *ast.ArrayType at: &{2082754 <nil> byte}) RawTBSCertificate, :rawsubjectpublickeyinfo ^ABEND881(unrecognized Expr type *ast.ArrayType at: &{2082832 <nil> byte}) RawSubjectPublicKeyInfo, :rawsubject ^ABEND881(unrecognized Expr type *ast.ArrayType at: &{2082901 <nil> byte}) RawSubject, :rawissuer ^ABEND881(unrecognized Expr type *ast.ArrayType at: &{2082956 <nil> byte}) RawIssuer, :signature ^ABEND881(unrecognized Expr type *ast.ArrayType at: &{2083006 <nil> byte}) Signature, :signaturealgorithm SignatureAlgorithm, :publickeyalgorithm PublicKeyAlgorithm, :publickey ^ABEND881(unrecognized Expr type *ast.InterfaceType at: &{2083112 0xc00115dcb0 false}) PublicKey, :version ^Int Version, :serialnumber ^ABEND881(unrecognized Expr type *ast.StarExpr at: &{2083171 0xc001176b80}) SerialNumber, :issuer ^ABEND881(unrecognized Expr type *ast.SelectorExpr at: &{pkix Name}) Issuer, :subject ^ABEND881(unrecognized Expr type *ast.SelectorExpr at: &{pkix Name}) Subject, :notbefore ^ABEND881(unrecognized Expr type *ast.SelectorExpr at: &{time Time}) NotBefore, :notafter ^ABEND881(unrecognized Expr type *ast.SelectorExpr at: &{time Time}) NotAfter, :keyusage KeyUsage, :extensions ^ABEND881(unrecognized Expr type *ast.ArrayType at: &{2083594 <nil> 0xc001176f20}) Extensions, :extraextensions ^ABEND881(unrecognized Expr type *ast.ArrayType at: &{2083910 <nil> 0xc001177060}) ExtraExtensions, :unhandledcriticalextensions ^ABEND881(unrecognized Expr type *ast.ArrayType at: &{2084374 <nil> 0xc001177220}) UnhandledCriticalExtensions, :extkeyusage ^ABEND881(unrecognized Expr type *ast.ArrayType at: &{2084419 <nil> ExtKeyUsage}) ExtKeyUsage, :unknownextkeyusage ^ABEND881(unrecognized Expr type *ast.ArrayType at: &{2084499 <nil> 0xc001177320}) UnknownExtKeyUsage, :basicconstraintsvalid BasicConstraintsValid, :isca IsCA, :maxpathlen ^Int MaxPathLen, :maxpathlenzero MaxPathLenZero, :subjectkeyid ^ABEND881(unrecognized Expr type *ast.ArrayType at: &{2085636 <nil> byte}) SubjectKeyId, :authoritykeyid ^ABEND881(unrecognized Expr type *ast.ArrayType at: &{2085659 <nil> byte}) AuthorityKeyId, :ocspserver ^ABEND881(unrecognized Expr type *ast.ArrayType at: &{2085743 <nil> string}) OCSPServer, :issuingcertificateurl ^ABEND881(unrecognized Expr type *ast.ArrayType at: &{2085775 <nil> string}) IssuingCertificateURL, :dnsnames ^ABEND881(unrecognized Expr type *ast.ArrayType at: &{2086020 <nil> string}) DNSNames, :emailaddresses ^ABEND881(unrecognized Expr type *ast.ArrayType at: &{2086045 <nil> string}) EmailAddresses, :ipaddresses ^ABEND881(unrecognized Expr type *ast.ArrayType at: &{2086070 <nil> 0xc001177a20}) IPAddresses, :uris ^ABEND881(unrecognized Expr type *ast.ArrayType at: &{2086095 <nil> 0xc001177ac0}) URIs, :permitteddnsdomainscritical PermittedDNSDomainsCritical, :permitteddnsdomains ^ABEND881(unrecognized Expr type *ast.ArrayType at: &{2086249 <nil> string}) PermittedDNSDomains, :excludeddnsdomains ^ABEND881(unrecognized Expr type *ast.ArrayType at: &{2086287 <nil> string}) ExcludedDNSDomains, :permittedipranges ^ABEND881(unrecognized Expr type *ast.ArrayType at: &{2086325 <nil> 0xc001177ca0}) PermittedIPRanges, :excludedipranges ^ABEND881(unrecognized Expr type *ast.ArrayType at: &{2086367 <nil> 0xc001177d40}) ExcludedIPRanges, :permittedemailaddresses ^ABEND881(unrecognized Expr type *ast.ArrayType at: &{2086409 <nil> string}) PermittedEmailAddresses, :excludedemailaddresses ^ABEND881(unrecognized Expr type *ast.ArrayType at: &{2086447 <nil> string}) ExcludedEmailAddresses, :permitteduridomains ^ABEND881(unrecognized Expr type *ast.ArrayType at: &{2086485 <nil> string}) PermittedURIDomains, :excludeduridomains ^ABEND881(unrecognized Expr type *ast.ArrayType at: &{2086523 <nil> string}) ExcludedURIDomains, :crldistributionpoints ^ABEND881(unrecognized Expr type *ast.ArrayType at: &{2086584 <nil> string}) CRLDistributionPoints, :policyidentifiers ^ABEND881(unrecognized Expr type *ast.ArrayType at: &{2086613 <nil> 0xc001177f40}) PolicyIdentifiers} Error] ParseCertificate
;;   "ParseCertificate parses a single certificate from the given ASN.1 DER data."
;;   {:added "1.0"
;;    :go "parseCertificate(asn1Data)"}
;;   [^ABEND881(unrecognized Expr type *ast.ArrayType at: &{2113340 <nil> byte}) asn1Data])
;; 
JOKER FUNC x509.ParseCertificateRequest has: 
;; (defn ^[{:raw ^ABEND881(unrecognized Expr type *ast.ArrayType at: &{2133809 <nil> byte}) Raw, :rawtbscertificaterequest ^ABEND881(unrecognized Expr type *ast.ArrayType at: &{2133914 <nil> byte}) RawTBSCertificateRequest, :rawsubjectpublickeyinfo ^ABEND881(unrecognized Expr type *ast.ArrayType at: &{2134006 <nil> byte}) RawSubjectPublicKeyInfo, :rawsubject ^ABEND881(unrecognized Expr type *ast.ArrayType at: &{2134076 <nil> byte}) RawSubject, :version ^Int Version, :signature ^ABEND881(unrecognized Expr type *ast.ArrayType at: &{2134152 <nil> byte}) Signature, :signaturealgorithm SignatureAlgorithm, :publickeyalgorithm PublicKeyAlgorithm, :publickey ^ABEND881(unrecognized Expr type *ast.InterfaceType at: &{2134258 0xc000c46b10 false}) PublicKey, :subject ^ABEND881(unrecognized Expr type *ast.SelectorExpr at: &{pkix Name}) Subject, :attributes ^ABEND881(unrecognized Expr type *ast.ArrayType at: &{2134368 <nil> 0xc0007d5ce0}) Attributes, :extensions ^ABEND881(unrecognized Expr type *ast.ArrayType at: &{2134562 <nil> 0xc0007d5e20}) Extensions, :extraextensions ^ABEND881(unrecognized Expr type *ast.ArrayType at: &{2134934 <nil> 0xc0007d5fe0}) ExtraExtensions, :dnsnames ^ABEND881(unrecognized Expr type *ast.ArrayType at: &{2135003 <nil> string}) DNSNames, :emailaddresses ^ABEND881(unrecognized Expr type *ast.ArrayType at: &{2135028 <nil> string}) EmailAddresses, :ipaddresses ^ABEND881(unrecognized Expr type *ast.ArrayType at: &{2135053 <nil> 0xc0007c4120}) IPAddresses, :uris ^ABEND881(unrecognized Expr type *ast.ArrayType at: &{2135078 <nil> 0xc0007c41e0}) URIs} Error] ParseCertificateRequest
;;   "ParseCertificateRequest parses a single certificate request from the
;; given ASN.1 DER data."
;;   {:added "1.0"
;;    :go "parseCertificateRequest(asn1Data)"}
;;   [^ABEND881(unrecognized Expr type *ast.ArrayType at: &{2142967 <nil> byte}) asn1Data])
;; 
JOKER FUNC x509.ParseCertificates has: 
;; (defn ^[[{:raw ^ABEND881(unrecognized Expr type *ast.ArrayType at: &{2082642 <nil> byte}) Raw, :rawtbscertificate ^ABEND881(unrecognized Expr type *ast.ArrayType at: &{2082754 <nil> byte}) RawTBSCertificate, :rawsubjectpublickeyinfo ^ABEND881(unrecognized Expr type *ast.ArrayType at: &{2082832 <nil> byte}) RawSubjectPublicKeyInfo, :rawsubject ^ABEND881(unrecognized Expr type *ast.ArrayType at: &{2082901 <nil> byte}) RawSubject, :rawissuer ^ABEND881(unrecognized Expr type *ast.ArrayType at: &{2082956 <nil> byte}) RawIssuer, :signature ^ABEND881(unrecognized Expr type *ast.ArrayType at: &{2083006 <nil> byte}) Signature, :signaturealgorithm SignatureAlgorithm, :publickeyalgorithm PublicKeyAlgorithm, :publickey ^ABEND881(unrecognized Expr type *ast.InterfaceType at: &{2083112 0xc00115dcb0 false}) PublicKey, :version ^Int Version, :serialnumber ^ABEND881(unrecognized Expr type *ast.StarExpr at: &{2083171 0xc001176b80}) SerialNumber, :issuer ^ABEND881(unrecognized Expr type *ast.SelectorExpr at: &{pkix Name}) Issuer, :subject ^ABEND881(unrecognized Expr type *ast.SelectorExpr at: &{pkix Name}) Subject, :notbefore ^ABEND881(unrecognized Expr type *ast.SelectorExpr at: &{time Time}) NotBefore, :notafter ^ABEND881(unrecognized Expr type *ast.SelectorExpr at: &{time Time}) NotAfter, :keyusage KeyUsage, :extensions ^ABEND881(unrecognized Expr type *ast.ArrayType at: &{2083594 <nil> 0xc001176f20}) Extensions, :extraextensions ^ABEND881(unrecognized Expr type *ast.ArrayType at: &{2083910 <nil> 0xc001177060}) ExtraExtensions, :unhandledcriticalextensions ^ABEND881(unrecognized Expr type *ast.ArrayType at: &{2084374 <nil> 0xc001177220}) UnhandledCriticalExtensions, :extkeyusage ^ABEND881(unrecognized Expr type *ast.ArrayType at: &{2084419 <nil> ExtKeyUsage}) ExtKeyUsage, :unknownextkeyusage ^ABEND881(unrecognized Expr type *ast.ArrayType at: &{2084499 <nil> 0xc001177320}) UnknownExtKeyUsage, :basicconstraintsvalid BasicConstraintsValid, :isca IsCA, :maxpathlen ^Int MaxPathLen, :maxpathlenzero MaxPathLenZero, :subjectkeyid ^ABEND881(unrecognized Expr type *ast.ArrayType at: &{2085636 <nil> byte}) SubjectKeyId, :authoritykeyid ^ABEND881(unrecognized Expr type *ast.ArrayType at: &{2085659 <nil> byte}) AuthorityKeyId, :ocspserver ^ABEND881(unrecognized Expr type *ast.ArrayType at: &{2085743 <nil> string}) OCSPServer, :issuingcertificateurl ^ABEND881(unrecognized Expr type *ast.ArrayType at: &{2085775 <nil> string}) IssuingCertificateURL, :dnsnames ^ABEND881(unrecognized Expr type *ast.ArrayType at: &{2086020 <nil> string}) DNSNames, :emailaddresses ^ABEND881(unrecognized Expr type *ast.ArrayType at: &{2086045 <nil> string}) EmailAddresses, :ipaddresses ^ABEND881(unrecognized Expr type *ast.ArrayType at: &{2086070 <nil> 0xc001177a20}) IPAddresses, :uris ^ABEND881(unrecognized Expr type *ast.ArrayType at: &{2086095 <nil> 0xc001177ac0}) URIs, :permitteddnsdomainscritical PermittedDNSDomainsCritical, :permitteddnsdomains ^ABEND881(unrecognized Expr type *ast.ArrayType at: &{2086249 <nil> string}) PermittedDNSDomains, :excludeddnsdomains ^ABEND881(unrecognized Expr type *ast.ArrayType at: &{2086287 <nil> string}) ExcludedDNSDomains, :permittedipranges ^ABEND881(unrecognized Expr type *ast.ArrayType at: &{2086325 <nil> 0xc001177ca0}) PermittedIPRanges, :excludedipranges ^ABEND881(unrecognized Expr type *ast.ArrayType at: &{2086367 <nil> 0xc001177d40}) ExcludedIPRanges, :permittedemailaddresses ^ABEND881(unrecognized Expr type *ast.ArrayType at: &{2086409 <nil> string}) PermittedEmailAddresses, :excludedemailaddresses ^ABEND881(unrecognized Expr type *ast.ArrayType at: &{2086447 <nil> string}) ExcludedEmailAddresses, :permitteduridomains ^ABEND881(unrecognized Expr type *ast.ArrayType at: &{2086485 <nil> string}) PermittedURIDomains, :excludeduridomains ^ABEND881(unrecognized Expr type *ast.ArrayType at: &{2086523 <nil> string}) ExcludedURIDomains, :crldistributionpoints ^ABEND881(unrecognized Expr type *ast.ArrayType at: &{2086584 <nil> string}) CRLDistributionPoints, :policyidentifiers ^ABEND881(unrecognized Expr type *ast.ArrayType at: &{2086613 <nil> 0xc001177f40}) PolicyIdentifiers}] Error] ParseCertificates
;;   "ParseCertificates parses one or more certificates from the given ASN.1 DER
;; data. The certificates must be concatenated with no intermediate padding."
;;   {:added "1.0"
;;    :go "parseCertificates(asn1Data)"}
;;   [^ABEND881(unrecognized Expr type *ast.ArrayType at: &{2113777 <nil> byte}) asn1Data])
;; 
JOKER FUNC x509.ParseDERCRL has: 
;; (defn ^[ABEND881(unrecognized Expr type *ast.SelectorExpr at: &{pkix CertificateList}) Error] ParseDERCRL
;;   "ParseDERCRL parses a DER encoded CRL from the given bytes."
;;   {:added "1.0"
;;    :go "parseDERCRL(derBytes)"}
;;   [^ABEND881(unrecognized Expr type *ast.ArrayType at: &{2131596 <nil> byte}) derBytes])
;; 
JOKER FUNC x509.ParseECPrivateKey has: 
;; (defn ^[ABEND881(unrecognized Expr type *ast.SelectorExpr at: &{ecdsa PrivateKey}) Error] ParseECPrivateKey
;;   "ParseECPrivateKey parses an ASN.1 Elliptic Curve Private Key Structure."
;;   {:added "1.0"
;;    :go "parseECPrivateKey(der)"}
;;   [^ABEND881(unrecognized Expr type *ast.ArrayType at: &{1999185 <nil> byte}) der])
;; 
JOKER FUNC x509.ParsePKCS1PrivateKey has: 
;; (defn ^[ABEND881(unrecognized Expr type *ast.SelectorExpr at: &{rsa PrivateKey}) Error] ParsePKCS1PrivateKey
;;   "ParsePKCS1PrivateKey returns an RSA private key from its ASN.1 PKCS#1 DER encoded form."
;;   {:added "1.0"
;;    :go "parsePKCS1PrivateKey(der)"}
;;   [^ABEND881(unrecognized Expr type *ast.ArrayType at: &{2059321 <nil> byte}) der])
;; 
JOKER FUNC x509.ParsePKCS1PublicKey has: 
;; (defn ^[ABEND881(unrecognized Expr type *ast.SelectorExpr at: &{rsa PublicKey}) Error] ParsePKCS1PublicKey
;;   "ParsePKCS1PublicKey parses a PKCS#1 public key in ASN.1 DER form."
;;   {:added "1.0"
;;    :go "parsePKCS1PublicKey(der)"}
;;   [^ABEND881(unrecognized Expr type *ast.ArrayType at: &{2061286 <nil> byte}) der])
;; 
JOKER FUNC x509.ParsePKCS8PrivateKey has: 
;; (defn ^[key err] ParsePKCS8PrivateKey
;;   "ParsePKCS8PrivateKey parses an unencrypted, PKCS#8 private key.
;; See RFC 5208."
;;   {:added "1.0"
;;    :go "parsePKCS8PrivateKey(der)"}
;;   [^ABEND881(unrecognized Expr type *ast.ArrayType at: &{2271930 <nil> byte}) der])
;; 
JOKER FUNC x509.ParsePKIXPublicKey has: 
;; (defn ^[pub err] ParsePKIXPublicKey
;;   "ParsePKIXPublicKey parses a DER encoded public key. These values are
;; typically found in PEM blocks with "BEGIN PUBLIC KEY".
;; 
;; Supported key types include RSA, DSA, and ECDSA. Unknown key
;; types result in an error.
;; 
;; On success, pub will be of type *rsa.PublicKey, *dsa.PublicKey,
;; or *ecdsa.PublicKey."
;;   {:added "1.0"
;;    :go "parsePKIXPublicKey(derBytes)"}
;;   [^ABEND881(unrecognized Expr type *ast.ArrayType at: &{2063391 <nil> byte}) derBytes])
;; 
JOKER FUNC x509.SystemCertPool has: 
;; (defn ^[{:bysubjectkeyid ^ABEND881(unrecognized Expr type *ast.MapType at: &{2002358 string 0xc001086540}) bySubjectKeyId, :byname ^ABEND881(unrecognized Expr type *ast.MapType at: &{2002391 string 0xc0010865a0}) byName, :certs ^ABEND881(unrecognized Expr type *ast.ArrayType at: &{2002424 <nil> 0xc001088e40}) certs} Error] SystemCertPool
;;   "SystemCertPool returns a copy of the system cert pool.
;; 
;; Any mutations to the returned pool are not written to disk and do
;; not affect any other pool.
;; 
;; New changes in the the system cert pool might not be reflected
;; in subsequent calls."
;;   {:added "1.0"
;;    :go "systemCertPool()"}
;;   [])
;; 
JOKER FUNC x509.TestASN1BitLength has: 
;; (defn TestASN1BitLength
;;   {:added "1.0"
;;    :go "testASN1BitLength(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{2342495 0xc0001a9aa0}) t])
;; 
JOKER FUNC x509.TestAdditionFieldsInGeneralSubtree has: 
;; (defn TestAdditionFieldsInGeneralSubtree
;;   {:added "1.0"
;;    :go "testAdditionFieldsInGeneralSubtree(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{2364301 0xc000822ec0}) t])
;; 
JOKER FUNC x509.TestBadIPMask has: 
;; (defn TestBadIPMask
;;   {:added "1.0"
;;    :go "testBadIPMask(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{2361459 0xc0008228a0}) t])
;; 
JOKER FUNC x509.TestBadNamesInConstraints has: 
;; (defn TestBadNamesInConstraints
;;   {:added "1.0"
;;    :go "testBadNamesInConstraints(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{2056100 0xc001113a00}) t])
;; 
JOKER FUNC x509.TestBadNamesInSANs has: 
;; (defn TestBadNamesInSANs
;;   {:added "1.0"
;;    :go "testBadNamesInSANs(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{2057448 0xc00111ac60}) t])
;; 
JOKER FUNC x509.TestCRLCreation has: 
;; (defn TestCRLCreation
;;   {:added "1.0"
;;    :go "testCRLCreation(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{2323151 0xc0008fa080}) t])
;; 
JOKER FUNC x509.TestCRLWithoutExpiry has: 
;; (defn TestCRLWithoutExpiry
;;   {:added "1.0"
;;    :go "testCRLWithoutExpiry(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{2325201 0xc000a94220}) t])
;; 
JOKER FUNC x509.TestCertificateParse has: 
;; (defn TestCertificateParse
;;   {:added "1.0"
;;    :go "testCertificateParse(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{2294769 0xc00111a100}) t])
;; 
JOKER FUNC x509.TestCertificateRequestOverrides has: 
;; (defn TestCertificateRequestOverrides
;;   {:added "1.0"
;;    :go "testCertificateRequestOverrides(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{2335052 0xc000bd3c60}) t])
;; 
JOKER FUNC x509.TestConstraintCases has: 
;; (defn TestConstraintCases
;;   {:added "1.0"
;;    :go "testConstraintCases(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{2048988 0xc0011014e0}) t])
;; 
JOKER FUNC x509.TestCreateCertificateRequest has: 
;; (defn TestCreateCertificateRequest
;;   {:added "1.0"
;;    :go "testCreateCertificateRequest(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{2332229 0xc000a95260}) t])
;; 
JOKER FUNC x509.TestCreateSelfSignedCertificate has: 
;; (defn TestCreateSelfSignedCertificate
;;   {:added "1.0"
;;    :go "testCreateSelfSignedCertificate(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{2299651 0xc0011b9600}) t])
;; 
JOKER FUNC x509.TestCriticalFlagInCSRRequestedExtensions has: 
;; (defn TestCriticalFlagInCSRRequestedExtensions
;;   {:added "1.0"
;;    :go "testCriticalFlagInCSRRequestedExtensions(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{2338227 0xc000c589e0}) t])
;; 
JOKER FUNC x509.TestCriticalNameConstraintWithUnknownType has: 
;; (defn TestCriticalNameConstraintWithUnknownType
;;   {:added "1.0"
;;    :go "testCriticalNameConstraintWithUnknownType(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{2360040 0xc0008222e0}) t])
;; 
JOKER FUNC x509.TestDecrypt has: 
;; (defn TestDecrypt
;;   {:added "1.0"
;;    :go "testDecrypt(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{1983939 0xc001066b40}) t])
;; 
JOKER FUNC x509.TestECDSA has: 
;; (defn TestECDSA
;;   {:added "1.0"
;;    :go "testECDSA(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{2312982 0xc000690f40}) t])
;; 
JOKER FUNC x509.TestEmptyNameConstraints has: 
;; (defn TestEmptyNameConstraints
;;   {:added "1.0"
;;    :go "testEmptyNameConstraints(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{2355742 0xc000caf7e0}) t])
;; 
JOKER FUNC x509.TestEmptySubject has: 
;; (defn TestEmptySubject
;;   {:added "1.0"
;;    :go "testEmptySubject(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{2364665 0xc000823340}) t])
;; 
JOKER FUNC x509.TestEncrypt has: 
;; (defn TestEncrypt
;;   {:added "1.0"
;;    :go "testEncrypt(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{1984567 0xc001067820}) t])
;; 
JOKER FUNC x509.TestEnvVars has: 
;; (defn TestEnvVars
;;   {:added "1.0"
;;    :go "testEnvVars(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{2178821 0xc0001a6220}) t])
;; 
JOKER FUNC x509.TestGoVerify has: 
;; (defn TestGoVerify
;;   {:added "1.0"
;;    :go "testGoVerify(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{2200238 0xc000de63a0}) t])
;; 
JOKER FUNC x509.TestISOOIDInCertificate has: 
;; (defn TestISOOIDInCertificate
;;   {:added "1.0"
;;    :go "testISOOIDInCertificate(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{2349991 0xc000cae0a0}) t])
;; 
JOKER FUNC x509.TestImports has: 
;; (defn TestImports
;;   {:added "1.0"
;;    :go "testImports(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{2326270 0xc000a94dc0}) t])
;; 
JOKER FUNC x509.TestIncompleteBlock has: 
;; (defn TestIncompleteBlock
;;   {:added "1.0"
;;    :go "testIncompleteBlock(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{1992118 0xc00106f220}) t])
;; 
JOKER FUNC x509.TestInsecureAlgorithmErrorString has: 
;; (defn TestInsecureAlgorithmErrorString
;;   {:added "1.0"
;;    :go "testInsecureAlgorithmErrorString(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{2343222 0xc0001907a0}) t])
;; 
JOKER FUNC x509.TestMD5 has: 
;; (defn TestMD5
;;   {:added "1.0"
;;    :go "testMD5(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{2347341 0xc0001911a0}) t])
;; 
JOKER FUNC x509.TestMarshalRSAPrivateKey has: 
;; (defn TestMarshalRSAPrivateKey
;;   {:added "1.0"
;;    :go "testMarshalRSAPrivateKey(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{2285969 0xc000fcc6e0}) t])
;; 
JOKER FUNC x509.TestMarshalRSAPublicKey has: 
;; (defn TestMarshalRSAPublicKey
;;   {:added "1.0"
;;    :go "testMarshalRSAPublicKey(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{2288575 0xc000fd9c40}) t])
;; 
JOKER FUNC x509.TestMatchHostnames has: 
;; (defn TestMatchHostnames
;;   {:added "1.0"
;;    :go "testMatchHostnames(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{2293452 0xc0010ba860}) t])
;; 
JOKER FUNC x509.TestMatchIP has: 
;; (defn TestMatchIP
;;   {:added "1.0"
;;    :go "testMatchIP(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{2293723 0xc0010d17e0}) t])
;; 
JOKER FUNC x509.TestMaxPathLen has: 
;; (defn TestMaxPathLen
;;   {:added "1.0"
;;    :go "testMaxPathLen(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{2340699 0xc0001a8020}) t])
;; 
JOKER FUNC x509.TestMismatchedSignatureAlgorithm has: 
;; (defn TestMismatchedSignatureAlgorithm
;;   {:added "1.0"
;;    :go "testMismatchedSignatureAlgorithm(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{2295358 0xc00115a7c0}) t])
;; 
JOKER FUNC x509.TestMultipleRDN has: 
;; (defn TestMultipleRDN
;;   {:added "1.0"
;;    :go "testMultipleRDN(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{2352465 0xc000cae660}) t])
;; 
JOKER FUNC x509.TestMultipleURLsInCRLDP has: 
;; (defn TestMultipleURLsInCRLDP
;;   {:added "1.0"
;;    :go "testMultipleURLsInCRLDP(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{2367601 0xc000823e60}) t])
;; 
JOKER FUNC x509.TestNameConstraints has: 
;; (defn TestNameConstraints
;;   {:added "1.0"
;;    :go "testNameConstraints(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{2263127 0xc000e005a0}) t])
;; 
JOKER FUNC x509.TestNoAuthorityKeyIdInSelfSignedCert has: 
;; (defn TestNoAuthorityKeyIdInSelfSignedCert
;;   {:added "1.0"
;;    :go "testNoAuthorityKeyIdInSelfSignedCert(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{2341810 0xc0001a9000}) t])
;; 
JOKER FUNC x509.TestPKCS8 has: 
;; (defn TestPKCS8
;;   {:added "1.0"
;;    :go "testPKCS8(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{1996469 0xc00106ff80}) t])
;; 
JOKER FUNC x509.TestPKIXNameString has: 
;; (defn TestPKIXNameString
;;   {:added "1.0"
;;    :go "testPKIXNameString(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{2356102 0xc000cafe00}) t])
;; 
JOKER FUNC x509.TestParseCertificateRequest has: 
;; (defn TestParseCertificateRequest
;;   {:added "1.0"
;;    :go "testParseCertificateRequest(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{2337321 0xc000c53be0}) t])
;; 
JOKER FUNC x509.TestParseCertificateWithDSASignatureAlgorithm has: 
;; (defn TestParseCertificateWithDSASignatureAlgorithm
;;   {:added "1.0"
;;    :go "testParseCertificateWithDSASignatureAlgorithm(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{2316976 0xc0007bebe0}) t])
;; 
JOKER FUNC x509.TestParseCertificateWithDsaPublicKey has: 
;; (defn TestParseCertificateWithDsaPublicKey
;;   {:added "1.0"
;;    :go "testParseCertificateWithDsaPublicKey(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{2315326 0xc000691ce0}) t])
;; 
JOKER FUNC x509.TestParseDERCRL has: 
;; (defn TestParseDERCRL
;;   {:added "1.0"
;;    :go "testParseDERCRL(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{2324652 0xc0008fbac0}) t])
;; 
JOKER FUNC x509.TestParseECPrivateKey has: 
;; (defn TestParseECPrivateKey
;;   {:added "1.0"
;;    :go "testParseECPrivateKey(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{1983041 0xc001066020}) t])
;; 
JOKER FUNC x509.TestParsePEMCRL has: 
;; (defn TestParsePEMCRL
;;   {:added "1.0"
;;    :go "testParsePEMCRL(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{2325734 0xc000a94660}) t])
;; 
JOKER FUNC x509.TestParsePKCS1PrivateKey has: 
;; (defn TestParsePKCS1PrivateKey
;;   {:added "1.0"
;;    :go "testParsePKCS1PrivateKey(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{2281394 0xc000f89f20}) t])
;; 
JOKER FUNC x509.TestParsePKIXPublicKey has: 
;; (defn TestParsePKIXPublicKey
;;   {:added "1.0"
;;    :go "testParsePKIXPublicKey(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{2282255 0xc000f9cd60}) t])
;; 
JOKER FUNC x509.TestRDNSequenceString has: 
;; (defn TestRDNSequenceString
;;   {:added "1.0"
;;    :go "testRDNSequenceString(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{2357784 0xc000879340}) t])
;; 
JOKER FUNC x509.TestRFC2821Parsing has: 
;; (defn TestRFC2821Parsing
;;   {:added "1.0"
;;    :go "testRFC2821Parsing(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{2055403 0xc001112d60}) t])
;; 
JOKER FUNC x509.TestRSAMissingNULLParameters has: 
;; (defn TestRSAMissingNULLParameters
;;   {:added "1.0"
;;    :go "testRSAMissingNULLParameters(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{2348842 0xc000191ae0}) t])
;; 
JOKER FUNC x509.TestRSAPSSSelfSigned has: 
;; (defn TestRSAPSSSelfSigned
;;   {:added "1.0"
;;    :go "testRSAPSSSelfSigned(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{2321514 0xc0007bf7c0}) t])
;; 
JOKER FUNC x509.TestSystemCertPool has: 
;; (defn TestSystemCertPool
;;   {:added "1.0"
;;    :go "testSystemCertPool(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{2353006 0xc000caef00}) t])
;; 
JOKER FUNC x509.TestSystemVerify has: 
;; (defn TestSystemVerify
;;   {:added "1.0"
;;    :go "testSystemVerify(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{2200301 0xc000de6500}) t])
;; 
JOKER FUNC x509.TestUnknownAuthorityError has: 
;; (defn TestUnknownAuthorityError
;;   {:added "1.0"
;;    :go "testUnknownAuthorityError(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{2261826 0xc000de7b60}) t])
;; 
JOKER FUNC x509.TestValidHostname has: 
;; (defn TestValidHostname
;;   {:added "1.0"
;;    :go "testValidHostname(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{2270711 0xc000e212a0}) t])
;; 
JOKER FUNC x509.TestVerifyCertificateWithDSASignature has: 
;; (defn TestVerifyCertificateWithDSASignature
;;   {:added "1.0"
;;    :go "testVerifyCertificateWithDSASignature(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{2317312 0xc0007bf0c0}) t])
;; 
JOKER FUNC x509.TestVerifyEmptyCertificate has: 
;; (defn TestVerifyEmptyCertificate
;;   {:added "1.0"
;;    :go "testVerifyEmptyCertificate(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{2342978 0xc000190480}) t])
;; 
JOKER FUNC x509_test.ExampleCertificate_Verify has: 
;; (defn ExampleCertificate_Verify
;;   {:added "1.0"
;;    :go "exampleCertificate_Verify()"}
;;   [])
;; 
JOKER FUNC x509_test.ExampleParsePKIXPublicKey has: 
;; (defn ExampleParsePKIXPublicKey
;;   {:added "1.0"
;;    :go "exampleParsePKIXPublicKey()"}
;;   [])
;; 
JOKER FUNC xml.BenchmarkMarshal has: 
;; (defn BenchmarkMarshal
;;   {:added "1.0"
;;    :go "benchmarkMarshal(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{3920817 0xc001f9d640}) b])
;; 
JOKER FUNC xml.BenchmarkUnmarshal has: 
;; (defn BenchmarkUnmarshal
;;   {:added "1.0"
;;    :go "benchmarkUnmarshal(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{3920964 0xc001f9d960}) b])
;; 
JOKER FUNC xml.CopyToken has: 
;; (defn ^ABEND881(unrecognized Expr type *ast.InterfaceType at: &{4022450 0xc0020f35f0 false}) CopyToken
;;   "CopyToken returns a copy of a Token."
;;   {:added "1.0"
;;    :go "copyToken(t)"}
;;   [t])
;; 
JOKER FUNC xml.Escape has: 
;; (defn Escape
;;   "Escape is like EscapeText but omits the error return value.
;; It is provided for backwards compatibility with Go 1.0.
;; Code targeting Go 1.1 or later should use EscapeText."
;;   {:added "1.0"
;;    :go "escape(w, s)"}
;;   [^ABEND881(unrecognized Expr type *ast.SelectorExpr at: &{io Writer}) w, ^ABEND881(unrecognized Expr type *ast.ArrayType at: &{4067259 <nil> byte}) s])
;; 
JOKER FUNC xml.EscapeText has: 
;; (defn ^Error EscapeText
;;   "EscapeText writes to w the properly escaped XML equivalent
;; of the plain text data s."
;;   {:added "1.0"
;;    :go "escapeText(w, s)"}
;;   [^ABEND881(unrecognized Expr type *ast.SelectorExpr at: &{io Writer}) w, ^ABEND881(unrecognized Expr type *ast.ArrayType at: &{4065381 <nil> byte}) s])
;; 
JOKER FUNC xml.Marshal has: 
;; (defn ^[[ABEND042(cannot find typename xml.byte)] Error] Marshal
;;   "Marshal returns the XML encoding of v.
;; 
;; Marshal handles an array or slice by marshaling each of the elements.
;; Marshal handles a pointer by marshaling the value it points at or, if the
;; pointer is nil, by writing nothing. Marshal handles an interface value by
;; marshaling the value it contains or, if the interface value is nil, by
;; writing nothing. Marshal handles all other data by writing one or more XML
;; elements containing the data.
;; 
;; The name for the XML elements is taken from, in order of preference:
;;     - the tag on the XMLName field, if the data is a struct
;;     - the value of the XMLName field of type Name
;;     - the tag of the struct field used to obtain the data
;;     - the name of the struct field used to obtain the data
;;     - the name of the marshaled type
;; 
;; The XML element for a struct contains marshaled elements for each of the
;; exported fields of the struct, with these exceptions:
;;     - the XMLName field, described above, is omitted.
;;     - a field with tag "-" is omitted.
;;     - a field with tag "name,attr" becomes an attribute with
;;       the given name in the XML element.
;;     - a field with tag ",attr" becomes an attribute with the
;;       field name in the XML element.
;;     - a field with tag ",chardata" is written as character data,
;;       not as an XML element.
;;     - a field with tag ",cdata" is written as character data
;;       wrapped in one or more <![CDATA[ ... ]]> tags, not as an XML element.
;;     - a field with tag ",innerxml" is written verbatim, not subject
;;       to the usual marshaling procedure.
;;     - a field with tag ",comment" is written as an XML comment, not
;;       subject to the usual marshaling procedure. It must not contain
;;       the "--" string within it.
;;     - a field with a tag including the "omitempty" option is omitted
;;       if the field value is empty. The empty values are false, 0, any
;;       nil pointer or interface value, and any array, slice, map, or
;;       string of length zero.
;;     - an anonymous struct field is handled as if the fields of its
;;       value were part of the outer struct.
;; 
;; If a field uses a tag "a>b>c", then the element c will be nested inside
;; parent elements a and b. Fields that appear next to each other that name
;; the same parent will be enclosed in one XML element.
;; 
;; If the XML name for a struct field is defined by both the field tag and the
;; struct's XMLName field, the names must match.
;; 
;; See MarshalIndent for an example.
;; 
;; Marshal will return an error if asked to marshal a channel, function, or map."
;;   {:added "1.0"
;;    :go "marshal(v)"}
;;   [^ABEND881(unrecognized Expr type *ast.InterfaceType at: &{4071775 0xc0017c8030 false}) v])
;; 
JOKER FUNC xml.MarshalIndent has: 
;; (defn ^[[ABEND042(cannot find typename xml.byte)] Error] MarshalIndent
;;   "MarshalIndent works like Marshal, but each XML element begins on a new
;; indented line that starts with prefix and is followed by one or more
;; copies of indent according to the nesting depth."
;;   {:added "1.0"
;;    :go "marshalIndent(v, prefix, indent)"}
;;   [^ABEND881(unrecognized Expr type *ast.InterfaceType at: &{4073640 0xc0017c8960 false}) v, ^String prefix, ^String indent])
;; 
JOKER FUNC xml.NewDecoder has: 
;; (defn ^{:strict Strict, :autoclose ^ABEND881(unrecognized Expr type *ast.ArrayType at: &{4026369 <nil> string}) AutoClose, :entity ^ABEND881(unrecognized Expr type *ast.MapType at: &{4026670 string string}) Entity, :charsetreader ^ABEND881(unrecognized Expr type *ast.FuncType at: &{4027001 0xc0021106f0 0xc002110720}) CharsetReader, :defaultspace ^String DefaultSpace, :r ^ABEND881(unrecognized Expr type *ast.SelectorExpr at: &{io ByteReader}) r, :t t, :buf ^ABEND881(unrecognized Expr type *ast.SelectorExpr at: &{bytes Buffer}) buf, :saved ^ABEND881(unrecognized Expr type *ast.StarExpr at: &{4027364 0xc00210f880}) saved, :stk ^ABEND881(unrecognized Expr type *ast.StarExpr at: &{4027394 stack}) stk, :free ^ABEND881(unrecognized Expr type *ast.StarExpr at: &{4027417 stack}) free, :needclose needClose, :toclose toClose, :nexttoken nextToken, :nextbyte ^Int nextByte, :ns ^ABEND881(unrecognized Expr type *ast.MapType at: &{4027524 string string}) ns, :err err, :line ^Int line, :offset offset, :unmarshaldepth ^Int unmarshalDepth} NewDecoder
;;   "NewDecoder creates a new XML parser reading from r.
;; If r does not implement io.ByteReader, NewDecoder will
;; do its own buffering."
;;   {:added "1.0"
;;    :go "newDecoder(r)"}
;;   [^ABEND881(unrecognized Expr type *ast.SelectorExpr at: &{io Reader}) r])
;; 
JOKER FUNC xml.NewEncoder has: 
;; (defn ^{:p p} NewEncoder
;;   "NewEncoder returns a new encoder that writes to w."
;;   {:added "1.0"
;;    :go "newEncoder(w)"}
;;   [^ABEND881(unrecognized Expr type *ast.SelectorExpr at: &{io Writer}) w])
;; 
JOKER FUNC xml.NewText has: 
(defn ^{:type ^String Type, :body ^String Body} NewText
  {:added "1.0"
   :go "newText(text)"}
  [^String text])

JOKER FUNC xml.NewTokenDecoder has: 
;; (defn ^{:strict Strict, :autoclose ^ABEND881(unrecognized Expr type *ast.ArrayType at: &{4026369 <nil> string}) AutoClose, :entity ^ABEND881(unrecognized Expr type *ast.MapType at: &{4026670 string string}) Entity, :charsetreader ^ABEND881(unrecognized Expr type *ast.FuncType at: &{4027001 0xc0021106f0 0xc002110720}) CharsetReader, :defaultspace ^String DefaultSpace, :r ^ABEND881(unrecognized Expr type *ast.SelectorExpr at: &{io ByteReader}) r, :t t, :buf ^ABEND881(unrecognized Expr type *ast.SelectorExpr at: &{bytes Buffer}) buf, :saved ^ABEND881(unrecognized Expr type *ast.StarExpr at: &{4027364 0xc00210f880}) saved, :stk ^ABEND881(unrecognized Expr type *ast.StarExpr at: &{4027394 stack}) stk, :free ^ABEND881(unrecognized Expr type *ast.StarExpr at: &{4027417 stack}) free, :needclose needClose, :toclose toClose, :nexttoken nextToken, :nextbyte ^Int nextByte, :ns ^ABEND881(unrecognized Expr type *ast.MapType at: &{4027524 string string}) ns, :err err, :line ^Int line, :offset offset, :unmarshaldepth ^Int unmarshalDepth} NewTokenDecoder
;;   "NewTokenDecoder creates a new XML parser using an underlying token stream."
;;   {:added "1.0"
;;    :go "newTokenDecoder(t)"}
;;   [t])
;; 
JOKER FUNC xml.ParseTime has: 
;; (defn ^ABEND881(unrecognized Expr type *ast.SelectorExpr at: &{time Time}) ParseTime
;;   {:added "1.0"
;;    :go "parseTime(str)"}
;;   [^String str])
;; 
JOKER FUNC xml.TestAllScalars has: 
;; (defn TestAllScalars
;;   {:added "1.0"
;;    :go "testAllScalars(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{3981329 0xc002073480}) t])
;; 
JOKER FUNC xml.TestCopyTokenCharData has: 
;; (defn TestCopyTokenCharData
;;   {:added "1.0"
;;    :go "testCopyTokenCharData(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{3983170 0xc00207b780}) t])
;; 
JOKER FUNC xml.TestCopyTokenStartElement has: 
;; (defn TestCopyTokenStartElement
;;   {:added "1.0"
;;    :go "testCopyTokenStartElement(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{3983497 0xc00207bcc0}) t])
;; 
JOKER FUNC xml.TestDecodeEncode has: 
;; (defn TestDecodeEncode
;;   {:added "1.0"
;;    :go "testDecodeEncode(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{3932957 0xc001fbf6c0}) t])
;; 
JOKER FUNC xml.TestDirectivesWithComments has: 
;; (defn TestDirectivesWithComments
;;   {:added "1.0"
;;    :go "testDirectivesWithComments(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{3988050 0xc002099ce0}) t])
;; 
JOKER FUNC xml.TestDisallowedCharacters has: 
;; (defn TestDisallowedCharacters
;;   {:added "1.0"
;;    :go "testDisallowedCharacters(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{3985921 0xc002098060}) t])
;; 
JOKER FUNC xml.TestEncodeToken has: 
;; (defn TestEncodeToken
;;   {:added "1.0"
;;    :go "testEncodeToken(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{3931338 0xc001fb9ae0}) t])
;; 
JOKER FUNC xml.TestEntityInsideCDATA has: 
;; (defn TestEntityInsideCDATA
;;   {:added "1.0"
;;    :go "testEntityInsideCDATA(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{3984914 0xc0020836e0}) t])
;; 
JOKER FUNC xml.TestEscapeTextIOErrors has: 
;; (defn TestEscapeTextIOErrors
;;   {:added "1.0"
;;    :go "testEscapeTextIOErrors(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{3988587 0xc00209e5a0}) t])
;; 
JOKER FUNC xml.TestEscapeTextInvalidChar has: 
;; (defn TestEscapeTextInvalidChar
;;   {:added "1.0"
;;    :go "testEscapeTextInvalidChar(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{3988805 0xc00209e940}) t])
;; 
JOKER FUNC xml.TestInvalidInnerXMLType has: 
;; (defn TestInvalidInnerXMLType
;;   "Issue 15600. ",innerxml" on a field that can't hold it."
;;   {:added "1.0"
;;    :go "testInvalidInnerXMLType(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{4013210 0xc0020e6600}) t])
;; 
JOKER FUNC xml.TestInvalidXMLName has: 
;; (defn TestInvalidXMLName
;;   {:added "1.0"
;;    :go "testInvalidXMLName(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{3936037 0xc001fcdfe0}) t])
;; 
JOKER FUNC xml.TestIsInCharacterRange has: 
;; (defn TestIsInCharacterRange
;;   {:added "1.0"
;;    :go "testIsInCharacterRange(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{3986350 0xc002098860}) t])
;; 
JOKER FUNC xml.TestIsValidDirective has: 
;; (defn TestIsValidDirective
;;   {:added "1.0"
;;    :go "testIsValidDirective(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{3933660 0xc001fcc2e0}) t])
;; 
JOKER FUNC xml.TestIssue11405 has: 
;; (defn TestIssue11405
;;   {:added "1.0"
;;    :go "testIssue11405(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{3989381 0xc00209f3a0}) t])
;; 
JOKER FUNC xml.TestIssue12417 has: 
;; (defn TestIssue12417
;;   {:added "1.0"
;;    :go "testIssue12417(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{3989769 0xc00209fa40}) t])
;; 
JOKER FUNC xml.TestIssue16158 has: 
;; (defn TestIssue16158
;;   "Issue 16158. Decoder.unmarshalAttr ignores the return value of copyValue."
;;   {:added "1.0"
;;    :go "testIssue16158(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{3935633 0xc001fcdb20}) t])
;; 
JOKER FUNC xml.TestIssue569 has: 
;; (defn TestIssue569
;;   {:added "1.0"
;;    :go "testIssue569(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{3981581 0xc0020739a0}) t])
;; 
JOKER FUNC xml.TestIssue5880 has: 
;; (defn TestIssue5880
;;   {:added "1.0"
;;    :go "testIssue5880(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{3989146 0xc00209eec0}) t])
;; 
JOKER FUNC xml.TestMalformedComment has: 
;; (defn TestMalformedComment
;;   "Issue 11112. Unmarshal must reject invalid comments."
;;   {:added "1.0"
;;    :go "testMalformedComment(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{4012697 0xc0020dffc0}) t])
;; 
JOKER FUNC xml.TestMarshal has: 
;; (defn TestMarshal
;;   {:added "1.0"
;;    :go "testMarshal(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{3914622 0xc001f8ce60}) t])
;; 
JOKER FUNC xml.TestMarshalErrors has: 
;; (defn TestMarshalErrors
;;   {:added "1.0"
;;    :go "testMarshalErrors(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{3916893 0xc001f94de0}) t])
;; 
JOKER FUNC xml.TestMarshalFlush has: 
;; (defn TestMarshalFlush
;;   {:added "1.0"
;;    :go "testMarshalFlush(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{3920332 0xc001f9cde0}) t])
;; 
JOKER FUNC xml.TestMarshalIndent has: 
;; (defn TestMarshalIndent
;;   {:added "1.0"
;;    :go "testMarshalIndent(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{3918745 0xc001f96e60}) t])
;; 
JOKER FUNC xml.TestMarshalNS has: 
;; (defn TestMarshalNS
;;   {:added "1.0"
;;    :go "testMarshalNS(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{4006187 0xc0020cf4c0}) t])
;; 
JOKER FUNC xml.TestMarshalNSAttr has: 
;; (defn TestMarshalNSAttr
;;   {:added "1.0"
;;    :go "testMarshalNSAttr(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{4009782 0xc0020d3700}) t])
;; 
JOKER FUNC xml.TestMarshalWriteErrors has: 
;; (defn TestMarshalWriteErrors
;;   {:added "1.0"
;;    :go "testMarshalWriteErrors(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{3919537 0xc001f9c000}) t])
;; 
JOKER FUNC xml.TestMarshalWriteIOErrors has: 
;; (defn TestMarshalWriteIOErrors
;;   {:added "1.0"
;;    :go "testMarshalWriteIOErrors(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{3920087 0xc001f9c9e0}) t])
;; 
JOKER FUNC xml.TestNestedDirectives has: 
;; (defn TestNestedDirectives
;;   {:added "1.0"
;;    :go "testNestedDirectives(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{3979147 0xc00205f620}) t])
;; 
JOKER FUNC xml.TestNewTokenDecoderIdempotent has: 
;; (defn TestNewTokenDecoderIdempotent
;;   {:added "1.0"
;;    :go "testNewTokenDecoderIdempotent(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{3990897 0xc0020a8ce0}) t])
;; 
JOKER FUNC xml.TestNonStrictRawToken has: 
;; (defn TestNonStrictRawToken
;;   {:added "1.0"
;;    :go "testNonStrictRawToken(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{3975208 0xc002053fe0}) t])
;; 
JOKER FUNC xml.TestProcInstEncodeToken has: 
;; (defn TestProcInstEncodeToken
;;   {:added "1.0"
;;    :go "testProcInstEncodeToken(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{3932315 0xc001fbeee0}) t])
;; 
JOKER FUNC xml.TestProcInstEncoding has: 
;; (defn TestProcInstEncoding
;;   {:added "1.0"
;;    :go "testProcInstEncoding(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{3986970 0xc002099240}) t])
;; 
JOKER FUNC xml.TestRace9796 has: 
;; (defn TestRace9796
;;   "Issue 9796. Used to fail with GORACE="halt_on_error=1" -race."
;;   {:added "1.0"
;;    :go "testRace9796(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{3933427 0xc001fbfdc0}) t])
;; 
JOKER FUNC xml.TestRawToken has: 
;; (defn TestRawToken
;;   {:added "1.0"
;;    :go "testRawToken(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{3973921 0xc002052be0}) t])
;; 
JOKER FUNC xml.TestRawTokenAltEncoding has: 
;; (defn TestRawTokenAltEncoding
;;   {:added "1.0"
;;    :go "testRawTokenAltEncoding(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{3975704 0xc0020589e0}) t])
;; 
JOKER FUNC xml.TestRawTokenAltEncodingNoConverter has: 
;; (defn TestRawTokenAltEncodingNoConverter
;;   {:added "1.0"
;;    :go "testRawTokenAltEncodingNoConverter(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{3976107 0xc0020590c0}) t])
;; 
JOKER FUNC xml.TestSimpleUseOfEncodeToken has: 
;; (defn TestSimpleUseOfEncodeToken
;;   "Issue 11719. EncodeToken used to silently eat tokens with an invalid type."
;;   {:added "1.0"
;;    :go "testSimpleUseOfEncodeToken(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{3934520 0xc001fcca60}) t])
;; 
JOKER FUNC xml.TestStructPointerMarshal has: 
;; (defn TestStructPointerMarshal
;;   "golang.org/issue/6556"
;;   {:added "1.0"
;;    :go "testStructPointerMarshal(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{3921171 0xc001f9dd80}) t])
;; 
JOKER FUNC xml.TestSyntax has: 
;; (defn TestSyntax
;;   {:added "1.0"
;;    :go "testSyntax(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{3979831 0xc002072320}) t])
;; 
JOKER FUNC xml.TestSyntaxErrorLineNum has: 
;; (defn TestSyntaxErrorLineNum
;;   {:added "1.0"
;;    :go "testSyntaxErrorLineNum(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{3984000 0xc0020825e0}) t])
;; 
JOKER FUNC xml.TestToken has: 
;; (defn TestToken
;;   {:added "1.0"
;;    :go "testToken(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{3979488 0xc00205fc60}) t])
;; 
JOKER FUNC xml.TestTokenUnmarshaler has: 
;; (defn TestTokenUnmarshaler
;;   {:added "1.0"
;;    :go "testTokenUnmarshaler(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{3992065 0xc0020a9ee0}) t])
;; 
JOKER FUNC xml.TestTrailingRawToken has: 
;; (defn TestTrailingRawToken
;;   {:added "1.0"
;;    :go "testTrailingRawToken(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{3984375 0xc002082c60}) t])
;; 
JOKER FUNC xml.TestTrailingToken has: 
;; (defn TestTrailingToken
;;   {:added "1.0"
;;    :go "testTrailingToken(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{3984647 0xc0020831a0}) t])
;; 
JOKER FUNC xml.TestUnmarshal has: 
;; (defn TestUnmarshal
;;   "Do invertibility testing on the various structures that we test"
;;   {:added "1.0"
;;    :go "testUnmarshal(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{3917547 0xc001f95900}) t])
;; 
JOKER FUNC xml.TestUnmarshalAttr has: 
;; (defn TestUnmarshalAttr
;;   {:added "1.0"
;;    :go "testUnmarshalAttr(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{4003397 0xc0020c4f20}) t])
;; 
JOKER FUNC xml.TestUnmarshalBadPaths has: 
;; (defn TestUnmarshalBadPaths
;;   {:added "1.0"
;;    :go "testUnmarshalBadPaths(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{4002701 0xc0020c43a0}) t])
;; 
JOKER FUNC xml.TestUnmarshalEmptyValues has: 
;; (defn TestUnmarshalEmptyValues
;;   "golang.org/issues/13417"
;;   {:added "1.0"
;;    :go "testUnmarshalEmptyValues(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{4014537 0xc0020e7540}) t])
;; 
JOKER FUNC xml.TestUnmarshalFeed has: 
;; (defn TestUnmarshalFeed
;;   {:added "1.0"
;;    :go "testUnmarshalFeed(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{3992561 0xc0020ae420}) t])
;; 
JOKER FUNC xml.TestUnmarshalIntoInterface has: 
;; (defn TestUnmarshalIntoInterface
;;   "https://golang.org/issue/6836"
;;   {:added "1.0"
;;    :go "testUnmarshalIntoInterface(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{4012085 0xc0020df660}) t])
;; 
JOKER FUNC xml.TestUnmarshalNS has: 
;; (defn TestUnmarshalNS
;;   {:added "1.0"
;;    :go "testUnmarshalNS(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{4005745 0xc0020ceb40}) t])
;; 
JOKER FUNC xml.TestUnmarshalNSAttr has: 
;; (defn TestUnmarshalNSAttr
;;   {:added "1.0"
;;    :go "testUnmarshalNSAttr(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{4009328 0xc0020d2d80}) t])
;; 
JOKER FUNC xml.TestUnmarshalPaths has: 
;; (defn TestUnmarshalPaths
;;   {:added "1.0"
;;    :go "testUnmarshalPaths(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{4001372 0xc0020bcfa0}) t])
;; 
JOKER FUNC xml.TestUnmarshalWhitespaceAttrs has: 
;; (defn TestUnmarshalWhitespaceAttrs
;;   "golang.org/issues/22146"
;;   {:added "1.0"
;;    :go "testUnmarshalWhitespaceAttrs(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{4020448 0xc0020f5e60}) t])
;; 
JOKER FUNC xml.TestUnmarshalWhitespaceValues has: 
;; (defn TestUnmarshalWhitespaceValues
;;   "golang.org/issues/22146"
;;   {:added "1.0"
;;    :go "testUnmarshalWhitespaceValues(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{4018492 0xc0020f4ae0}) t])
;; 
JOKER FUNC xml.TestUnmarshalWithoutNameType has: 
;; (defn TestUnmarshalWithoutNameType
;;   {:added "1.0"
;;    :go "testUnmarshalWithoutNameType(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{4003169 0xc0020c4a60}) t])
;; 
JOKER FUNC xml.TestUnmarshaler has: 
;; (defn TestUnmarshaler
;;   {:added "1.0"
;;    :go "testUnmarshaler(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{4011447 0xc0020ded20}) t])
;; 
JOKER FUNC xml.TestUnquotedAttrs has: 
;; (defn TestUnquotedAttrs
;;   {:added "1.0"
;;    :go "testUnquotedAttrs(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{3981788 0xc002073d40}) t])
;; 
JOKER FUNC xml.TestValuelessAttrs has: 
;; (defn TestValuelessAttrs
;;   {:added "1.0"
;;    :go "testValuelessAttrs(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{3982378 0xc00207a8a0}) t])
;; 
JOKER FUNC xml.TestWrapDecoder has: 
;; (defn TestWrapDecoder
;;   {:added "1.0"
;;    :go "testWrapDecoder(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{3991088 0xc0020a8fc0}) t])
;; 
JOKER FUNC xml.Unmarshal has: 
;; (defn ^Error Unmarshal
;;   "Unmarshal parses the XML-encoded data and stores the result in
;; the value pointed to by v, which must be an arbitrary struct,
;; slice, or string. Well-formed data that does not fit into v is
;; discarded.
;; 
;; Because Unmarshal uses the reflect package, it can only assign
;; to exported (upper case) fields. Unmarshal uses a case-sensitive
;; comparison to match XML element names to tag values and struct
;; field names.
;; 
;; Unmarshal maps an XML element to a struct using the following rules.
;; In the rules, the tag of a field refers to the value associated with the
;; key 'xml' in the struct field's tag (see the example above).
;; 
;;   * If the struct has a field of type []byte or string with tag
;;      ",innerxml", Unmarshal accumulates the raw XML nested inside the
;;      element in that field. The rest of the rules still apply.
;; 
;;   * If the struct has a field named XMLName of type Name,
;;      Unmarshal records the element name in that field.
;; 
;;   * If the XMLName field has an associated tag of the form
;;      "name" or "namespace-URL name", the XML element must have
;;      the given name (and, optionally, name space) or else Unmarshal
;;      returns an error.
;; 
;;   * If the XML element has an attribute whose name matches a
;;      struct field name with an associated tag containing ",attr" or
;;      the explicit name in a struct field tag of the form "name,attr",
;;      Unmarshal records the attribute value in that field.
;; 
;;   * If the XML element has an attribute not handled by the previous
;;      rule and the struct has a field with an associated tag containing
;;      ",any,attr", Unmarshal records the attribute value in the first
;;      such field.
;; 
;;   * If the XML element contains character data, that data is
;;      accumulated in the first struct field that has tag ",chardata".
;;      The struct field may have type []byte or string.
;;      If there is no such field, the character data is discarded.
;; 
;;   * If the XML element contains comments, they are accumulated in
;;      the first struct field that has tag ",comment".  The struct
;;      field may have type []byte or string. If there is no such
;;      field, the comments are discarded.
;; 
;;   * If the XML element contains a sub-element whose name matches
;;      the prefix of a tag formatted as "a" or "a>b>c", unmarshal
;;      will descend into the XML structure looking for elements with the
;;      given names, and will map the innermost elements to that struct
;;      field. A tag starting with ">" is equivalent to one starting
;;      with the field name followed by ">".
;; 
;;   * If the XML element contains a sub-element whose name matches
;;      a struct field's XMLName tag and the struct field has no
;;      explicit name tag as per the previous rule, unmarshal maps
;;      the sub-element to that struct field.
;; 
;;   * If the XML element contains a sub-element whose name matches a
;;      field without any mode flags (",attr", ",chardata", etc), Unmarshal
;;      maps the sub-element to that struct field.
;; 
;;   * If the XML element contains a sub-element that hasn't matched any
;;      of the above rules and the struct has a field with tag ",any",
;;      unmarshal maps the sub-element to that struct field.
;; 
;;   * An anonymous struct field is handled as if the fields of its
;;      value were part of the outer struct.
;; 
;;   * A struct field with tag "-" is never unmarshaled into.
;; 
;; Unmarshal maps an XML element to a string or []byte by saving the
;; concatenation of that element's character data in the string or
;; []byte. The saved []byte is never nil.
;; 
;; Unmarshal maps an attribute value to a string or []byte by saving
;; the value in the string or slice.
;; 
;; Unmarshal maps an attribute value to an Attr by saving the attribute,
;; including its name, in the Attr.
;; 
;; Unmarshal maps an XML element or attribute value to a slice by
;; extending the length of the slice and mapping the element or attribute
;; to the newly created value.
;; 
;; Unmarshal maps an XML element or attribute value to a bool by
;; setting it to the boolean value represented by the string. Whitespace
;; is trimmed and ignored.
;; 
;; Unmarshal maps an XML element or attribute value to an integer or
;; floating-point field by setting the field to the result of
;; interpreting the string value in decimal. There is no check for
;; overflow. Whitespace is trimmed and ignored.
;; 
;; Unmarshal maps an XML element to a Name by recording the element
;; name.
;; 
;; Unmarshal maps an XML element to a pointer by setting the pointer
;; to a freshly allocated value and then mapping the element to that value.
;; 
;; A missing element or empty attribute value will be unmarshaled as a zero value.
;; If the field is a slice, a zero value will be appended to the field. Otherwise, the
;; field will be set to its zero value."
;;   {:added "1.0"
;;    :go "unmarshal(data, v)"}
;;   [^ABEND881(unrecognized Expr type *ast.ArrayType at: &{3941816 <nil> byte}) data, ^ABEND881(unrecognized Expr type *ast.InterfaceType at: &{3941826 0xc001fdc030 false}) v])
;; 
JOKER FUNC xml_test.ExampleEncoder has: 
;; (defn ExampleEncoder
;;   {:added "1.0"
;;    :go "exampleEncoder()"}
;;   [])
;; 
JOKER FUNC xml_test.ExampleMarshalIndent has: 
;; (defn ExampleMarshalIndent
;;   {:added "1.0"
;;    :go "exampleMarshalIndent()"}
;;   [])
;; 
JOKER FUNC xml_test.ExampleUnmarshal has: 
;; (defn ExampleUnmarshal
;;   "This example demonstrates unmarshaling an XML excerpt into a value with
;; some preset fields. Note that the Phone field isn't modified and that
;; the XML <Company> element is ignored. Also, the Groups field is assigned
;; considering the element path provided in its tag."
;;   {:added "1.0"
;;    :go "exampleUnmarshal()"}
;;   [])
;; 
JOKER FUNC zip.BenchmarkCompressedZipGarbage has: 
;; (defn BenchmarkCompressedZipGarbage
;;   {:added "1.0"
;;    :go "benchmarkCompressedZipGarbage(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{227204 0xc0004401c0}) b])
;; 
JOKER FUNC zip.BenchmarkZip64Test has: 
;; (defn BenchmarkZip64Test
;;   "Just benchmarking how fast the Zip64 test above is. Not related to
;; our zip performance, since the test above disabled CRC32 and flate."
;;   {:added "1.0"
;;    :go "benchmarkZip64Test(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{306010 0xc0004488a0}) b])
;; 
JOKER FUNC zip.BenchmarkZip64TestSizes has: 
;; (defn BenchmarkZip64TestSizes
;;   {:added "1.0"
;;    :go "benchmarkZip64TestSizes(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{306111 0xc000448b20}) b])
;; 
JOKER FUNC zip.FileInfoHeader has: 
;; (defn ^[{:name ^String Name, :comment ^String Comment, :nonutf8 NonUTF8, :creatorversion ^Int CreatorVersion, :readerversion ^Int ReaderVersion, :flags ^Int Flags, :method ^Int Method, :modified ^ABEND881(unrecognized Expr type *ast.SelectorExpr at: &{time Time}) Modified, :modifiedtime ^Int ModifiedTime, :modifieddate ^Int ModifiedDate, :crc32 CRC32, :compressedsize CompressedSize, :uncompressedsize UncompressedSize, :compressedsize64 CompressedSize64, :uncompressedsize64 UncompressedSize64, :extra ^ABEND881(unrecognized Expr type *ast.ArrayType at: &{281915 <nil> byte}) Extra, :externalattrs ExternalAttrs} Error] FileInfoHeader
;;   "FileInfoHeader creates a partially-populated FileHeader from an
;; os.FileInfo.
;; Because os.FileInfo's Name method returns only the base name of
;; the file it describes, it may be necessary to modify the Name field
;; of the returned header to provide the full path name of the file.
;; If compression is desired, callers should set the FileHeader.Method
;; field; it is unset by default."
;;   {:added "1.0"
;;    :go "fileInfoHeader(fi)"}
;;   [^ABEND881(unrecognized Expr type *ast.SelectorExpr at: &{os FileInfo}) fi])
;; 
JOKER FUNC zip.NewReader has: 
;; (defn ^[{:r ^ABEND881(unrecognized Expr type *ast.SelectorExpr at: &{io ReaderAt}) r, :file ^ABEND881(unrecognized Expr type *ast.ArrayType at: &{228333 <nil> 0xc0004ac540}) File, :comment ^String Comment, :decompressors ^ABEND881(unrecognized Expr type *ast.MapType at: &{228378 uint16 Decompressor}) decompressors} Error] NewReader
;;   "NewReader returns a new Reader reading from r, which is assumed to
;; have the given size in bytes."
;;   {:added "1.0"
;;    :go "newReader(r, size)"}
;;   [^ABEND881(unrecognized Expr type *ast.SelectorExpr at: &{io ReaderAt}) r, size])
;; 
JOKER FUNC zip.NewWriter has: 
;; (defn ^{:cw ^ABEND881(unrecognized Expr type *ast.StarExpr at: &{308006 countWriter}) cw, :dir ^ABEND881(unrecognized Expr type *ast.ArrayType at: &{308032 <nil> 0xc0001c6bc0}) dir, :last ^ABEND881(unrecognized Expr type *ast.StarExpr at: &{308055 fileWriter}) last, :closed closed, :compressors ^ABEND881(unrecognized Expr type *ast.MapType at: &{308098 uint16 Compressor}) compressors, :comment ^String comment, :testhookclosesizeoffset ^ABEND881(unrecognized Expr type *ast.FuncType at: &{308278 0xc0004ccbd0 <nil>}) testHookCloseSizeOffset} NewWriter
;;   "NewWriter returns a new Writer writing a zip file to w."
;;   {:added "1.0"
;;    :go "newWriter(w)"}
;;   [^ABEND881(unrecognized Expr type *ast.SelectorExpr at: &{io Writer}) w])
;; 
JOKER FUNC zip.OpenReader has: 
;; (defn ^[{:f ^ABEND881(unrecognized Expr type *ast.StarExpr at: &{228433 0xc0004ac6c0}) f} Error] OpenReader
;;   "OpenReader will open the Zip file specified by name and return a ReadCloser."
;;   {:added "1.0"
;;    :go "openReader(name)"}
;;   [^String name])
;; 
JOKER FUNC zip.RegisterCompressor has: 
;; (defn RegisterCompressor
;;   "RegisterCompressor registers custom compressors for a specified method ID.
;; The common methods Store and Deflate are built in."
;;   {:added "1.0"
;;    :go "registerCompressor(method, comp)"}
;;   [^Int method, comp])
;; 
JOKER FUNC zip.RegisterDecompressor has: 
;; (defn RegisterDecompressor
;;   "RegisterDecompressor allows custom decompressors for a specified method ID.
;; The common methods Store and Deflate are built in."
;;   {:added "1.0"
;;    :go "registerDecompressor(method, dcomp)"}
;;   [^Int method, dcomp])
;; 
JOKER FUNC zip.TestFileHeaderRoundTrip has: 
;; (defn TestFileHeaderRoundTrip
;;   {:added "1.0"
;;    :go "testFileHeaderRoundTrip(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{291055 0xc0002934c0}) t])
;; 
JOKER FUNC zip.TestFileHeaderRoundTrip64 has: 
;; (defn TestFileHeaderRoundTrip64
;;   {:added "1.0"
;;    :go "testFileHeaderRoundTrip64(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{291320 0xc0002938a0}) t])
;; 
JOKER FUNC zip.TestHeaderIgnoredSize has: 
;; (defn TestHeaderIgnoredSize
;;   {:added "1.0"
;;    :go "testHeaderIgnoredSize(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{305204 0xc0003efb00}) t])
;; 
JOKER FUNC zip.TestHeaderInvalidTagAndSize has: 
;; (defn TestHeaderInvalidTagAndSize
;;   "Issue 4302."
;;   {:added "1.0"
;;    :go "testHeaderInvalidTagAndSize(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{303938 0xc0003ee560}) t])
;; 
JOKER FUNC zip.TestHeaderTooLongErr has: 
;; (defn TestHeaderTooLongErr
;;   {:added "1.0"
;;    :go "testHeaderTooLongErr(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{304524 0xc0003eee20}) t])
;; 
JOKER FUNC zip.TestHeaderTooShort has: 
;; (defn TestHeaderTooShort
;;   {:added "1.0"
;;    :go "testHeaderTooShort(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{304289 0xc0003eeb00}) t])
;; 
JOKER FUNC zip.TestInvalidFiles has: 
;; (defn TestInvalidFiles
;;   {:added "1.0"
;;    :go "testInvalidFiles(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{260619 0xc000440d60}) t])
;; 
JOKER FUNC zip.TestIssue10956 has: 
;; (defn TestIssue10956
;;   "Verify the number of files is sane."
;;   {:added "1.0"
;;    :go "testIssue10956(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{274278 0xc000154080}) t])
;; 
JOKER FUNC zip.TestIssue10957 has: 
;; (defn TestIssue10957
;;   "Verify we return ErrUnexpectedEOF when length is short."
;;   {:added "1.0"
;;    :go "testIssue10957(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{273096 0xc00011d2c0}) t])
;; 
JOKER FUNC zip.TestIssue11146 has: 
;; (defn TestIssue11146
;;   "Verify we return ErrUnexpectedEOF when reading truncated data descriptor."
;;   {:added "1.0"
;;    :go "testIssue11146(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{274794 0xc000154660}) t])
;; 
JOKER FUNC zip.TestIssue12449 has: 
;; (defn TestIssue12449
;;   "Verify we do not treat non-zip64 archives as zip64"
;;   {:added "1.0"
;;    :go "testIssue12449(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{275470 0xc000154f40}) t])
;; 
JOKER FUNC zip.TestIssue8186 has: 
;; (defn TestIssue8186
;;   {:added "1.0"
;;    :go "testIssue8186(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{271088 0xc00011cc80}) t])
;; 
JOKER FUNC zip.TestModTime has: 
;; (defn TestModTime
;;   {:added "1.0"
;;    :go "testModTime(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{289791 0xc000271d80}) t])
;; 
JOKER FUNC zip.TestOver65kFiles has: 
;; (defn TestOver65kFiles
;;   {:added "1.0"
;;    :go "testOver65kFiles(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{288879 0xc000270a00}) t])
;; 
JOKER FUNC zip.TestRLEBuffer has: 
;; (defn TestRLEBuffer
;;   "Just testing the rleBuffer used in the Zip64 test above. Not used by the zip code."
;;   {:added "1.0"
;;    :go "testRLEBuffer(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{293429 0xc0002cc320}) t])
;; 
JOKER FUNC zip.TestReader has: 
;; (defn TestReader
;;   {:added "1.0"
;;    :go "testReader(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{257071 0xc000320ae0}) t])
;; 
JOKER FUNC zip.TestSuffixSaver has: 
;; (defn TestSuffixSaver
;;   {:added "1.0"
;;    :go "testSuffixSaver(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{306361 0xc000449140}) t])
;; 
JOKER FUNC zip.TestWriter has: 
;; (defn TestWriter
;;   {:added "1.0"
;;    :go "testWriter(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{219911 0xc000411440}) t])
;; 
JOKER FUNC zip.TestWriterComment has: 
;; (defn TestWriterComment
;;   "TestWriterComment is test for EOCD comment read/write."
;;   {:added "1.0"
;;    :go "testWriterComment(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{220589 0xc000428220}) t])
;; 
JOKER FUNC zip.TestWriterDir has: 
;; (defn TestWriterDir
;;   {:added "1.0"
;;    :go "testWriterDir(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{224989 0xc0004393e0}) t])
;; 
JOKER FUNC zip.TestWriterDirAttributes has: 
;; (defn TestWriterDirAttributes
;;   {:added "1.0"
;;    :go "testWriterDirAttributes(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{225366 0xc000439ac0}) t])
;; 
JOKER FUNC zip.TestWriterFlush has: 
;; (defn TestWriterFlush
;;   {:added "1.0"
;;    :go "testWriterFlush(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{224619 0xc000438c00}) t])
;; 
JOKER FUNC zip.TestWriterOffset has: 
;; (defn TestWriterOffset
;;   {:added "1.0"
;;    :go "testWriterOffset(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{223894 0xc000433b80}) t])
;; 
JOKER FUNC zip.TestWriterTime has: 
;; (defn TestWriterTime
;;   {:added "1.0"
;;    :go "testWriterTime(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{223244 0xc000432e60}) t])
;; 
JOKER FUNC zip.TestWriterUTF8 has: 
;; (defn TestWriterUTF8
;;   {:added "1.0"
;;    :go "testWriterUTF8(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{221647 0xc000429620}) t])
;; 
JOKER FUNC zip.TestZeroLengthHeader has: 
;; (defn TestZeroLengthHeader
;;   "Issue 4393. It is valid to have an extra data header
;; which contains no body."
;;   {:added "1.0"
;;    :go "testZeroLengthHeader(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{305617 0xc000448340}) t])
;; 
JOKER FUNC zip.TestZip64 has: 
;; (defn TestZip64
;;   {:added "1.0"
;;    :go "testZip64(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{294310 0xc0002cd520}) t])
;; 
JOKER FUNC zip.TestZip64DirectoryOffset has: 
;; (defn TestZip64DirectoryOffset
;;   "Tests that we generate a zip64 file if the directory at offset
;; 0xFFFFFFFF, but not before."
;;   {:added "1.0"
;;    :go "testZip64DirectoryOffset(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{295145 0xc0002cdee0}) t])
;; 
JOKER FUNC zip.TestZip64EdgeCase has: 
;; (defn TestZip64EdgeCase
;;   {:added "1.0"
;;    :go "testZip64EdgeCase(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{294539 0xc0002cd920}) t])
;; 
JOKER FUNC zip.TestZip64LargeDirectory has: 
;; (defn TestZip64LargeDirectory
;;   "Zip64 is required if the total size of the records is uint32max."
;;   {:added "1.0"
;;    :go "testZip64LargeDirectory(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{299559 0xc0003592e0}) t])
;; 
JOKER FUNC zip.TestZip64ManyRecords has: 
;; (defn TestZip64ManyRecords
;;   "At 16k records, we need to generate a zip64 file."
;;   {:added "1.0"
;;    :go "testZip64ManyRecords(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{296296 0xc000323360}) t])
;; 
JOKER FUNC zip_test.ExampleReader has: 
;; (defn ExampleReader
;;   {:added "1.0"
;;    :go "exampleReader()"}
;;   [])
;; 
JOKER FUNC zip_test.ExampleWriter has: 
;; (defn ExampleWriter
;;   {:added "1.0"
;;    :go "exampleWriter()"}
;;   [])
;; 
JOKER FUNC zip_test.ExampleWriter_RegisterCompressor has: 
;; (defn ExampleWriter_RegisterCompressor
;;   {:added "1.0"
;;    :go "exampleWriter_RegisterCompressor()"}
;;   [])
;; 
JOKER FUNC zlib.NewReader has: 
;; (defn ^[ABEND881(unrecognized Expr type *ast.SelectorExpr at: &{io ReadCloser}) Error] NewReader
;;   "NewReader creates a new ReadCloser.
;; Reads from the returned ReadCloser read and decompress data from r.
;; If r does not implement io.ByteReader, the decompressor may read more
;; data than necessary from r.
;; It is the caller's responsibility to call Close on the ReadCloser when done.
;; 
;; The ReadCloser returned by NewReader also implements Resetter."
;;   {:added "1.0"
;;    :go "newReader(r)"}
;;   [^ABEND881(unrecognized Expr type *ast.SelectorExpr at: &{io Reader}) r])
;; 
JOKER FUNC zlib.NewReaderDict has: 
;; (defn ^[ABEND881(unrecognized Expr type *ast.SelectorExpr at: &{io ReadCloser}) Error] NewReaderDict
;;   "NewReaderDict is like NewReader but uses a preset dictionary.
;; NewReaderDict ignores the dictionary if the compressed data does not refer to it.
;; If the compressed data refers to a different dictionary, NewReaderDict returns ErrDictionary.
;; 
;; The ReadCloser returned by NewReaderDict also implements Resetter."
;;   {:added "1.0"
;;    :go "newReaderDict(r, dict)"}
;;   [^ABEND881(unrecognized Expr type *ast.SelectorExpr at: &{io Reader}) r, ^ABEND881(unrecognized Expr type *ast.ArrayType at: &{837564 <nil> byte}) dict])
;; 
JOKER FUNC zlib.NewWriter has: 
;; (defn ^{:w ^ABEND881(unrecognized Expr type *ast.SelectorExpr at: &{io Writer}) w, :level ^Int level, :dict ^ABEND881(unrecognized Expr type *ast.ArrayType at: &{844108 <nil> byte}) dict, :compressor ^ABEND881(unrecognized Expr type *ast.StarExpr at: &{844128 0xc000735d80}) compressor, :digest ^ABEND881(unrecognized Expr type *ast.SelectorExpr at: &{hash Hash32}) digest, :err err, :scratch ^ABEND881(unrecognized Expr type *ast.ArrayType at: &{844199 0xc000735ea0 byte}) scratch, :wroteheader wroteHeader} NewWriter
;;   "NewWriter creates a new Writer.
;; Writes to the returned Writer are compressed and written to w.
;; 
;; It is the caller's responsibility to call Close on the Writer when done.
;; Writes may be buffered and not flushed until Close."
;;   {:added "1.0"
;;    :go "newWriter(w)"}
;;   [^ABEND881(unrecognized Expr type *ast.SelectorExpr at: &{io Writer}) w])
;; 
JOKER FUNC zlib.NewWriterLevel has: 
;; (defn ^[{:w ^ABEND881(unrecognized Expr type *ast.SelectorExpr at: &{io Writer}) w, :level ^Int level, :dict ^ABEND881(unrecognized Expr type *ast.ArrayType at: &{844108 <nil> byte}) dict, :compressor ^ABEND881(unrecognized Expr type *ast.StarExpr at: &{844128 0xc000735d80}) compressor, :digest ^ABEND881(unrecognized Expr type *ast.SelectorExpr at: &{hash Hash32}) digest, :err err, :scratch ^ABEND881(unrecognized Expr type *ast.ArrayType at: &{844199 0xc000735ea0 byte}) scratch, :wroteheader wroteHeader} Error] NewWriterLevel
;;   "NewWriterLevel is like NewWriter but specifies the compression level instead
;; of assuming DefaultCompression.
;; 
;; The compression level can be DefaultCompression, NoCompression, HuffmanOnly
;; or any integer value between BestSpeed and BestCompression inclusive.
;; The error returned will be nil if the level is valid."
;;   {:added "1.0"
;;    :go "newWriterLevel(w, level)"}
;;   [^ABEND881(unrecognized Expr type *ast.SelectorExpr at: &{io Writer}) w, ^Int level])
;; 
JOKER FUNC zlib.NewWriterLevelDict has: 
;; (defn ^[{:w ^ABEND881(unrecognized Expr type *ast.SelectorExpr at: &{io Writer}) w, :level ^Int level, :dict ^ABEND881(unrecognized Expr type *ast.ArrayType at: &{844108 <nil> byte}) dict, :compressor ^ABEND881(unrecognized Expr type *ast.StarExpr at: &{844128 0xc000735d80}) compressor, :digest ^ABEND881(unrecognized Expr type *ast.SelectorExpr at: &{hash Hash32}) digest, :err err, :scratch ^ABEND881(unrecognized Expr type *ast.ArrayType at: &{844199 0xc000735ea0 byte}) scratch, :wroteheader wroteHeader} Error] NewWriterLevelDict
;;   "NewWriterLevelDict is like NewWriterLevel but specifies a dictionary to
;; compress with.
;; 
;; The dictionary may be nil. If not, its contents should not be modified until
;; the Writer is closed."
;;   {:added "1.0"
;;    :go "newWriterLevelDict(w, level, dict)"}
;;   [^ABEND881(unrecognized Expr type *ast.SelectorExpr at: &{io Writer}) w, ^Int level, ^ABEND881(unrecognized Expr type *ast.ArrayType at: &{845259 <nil> byte}) dict])
;; 
JOKER FUNC zlib.TestDecompressor has: 
;; (defn TestDecompressor
;;   {:added "1.0"
;;    :go "testDecompressor(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{842420 0xc000734340}) t])
;; 
JOKER FUNC zlib.TestWriter has: 
;; (defn TestWriter
;;   {:added "1.0"
;;    :go "testWriter(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{832524 0xc000652e80}) t])
;; 
JOKER FUNC zlib.TestWriterBig has: 
;; (defn TestWriterBig
;;   {:added "1.0"
;;    :go "testWriterBig(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{832885 0xc0006535a0}) t])
;; 
JOKER FUNC zlib.TestWriterDict has: 
;; (defn TestWriterDict
;;   {:added "1.0"
;;    :go "testWriterDict(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{833358 0xc000653da0}) t])
;; 
JOKER FUNC zlib.TestWriterDictIsUsed has: 
;; (defn TestWriterDictIsUsed
;;   {:added "1.0"
;;    :go "testWriterDictIsUsed(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{834522 0xc000604ee0}) t])
;; 
JOKER FUNC zlib.TestWriterReset has: 
;; (defn TestWriterReset
;;   {:added "1.0"
;;    :go "testWriterReset(t)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: &{833898 0xc000604600}) t])
;; 
JOKER FUNC zlib_test.ExampleNewReader has: 
;; (defn ExampleNewReader
;;   {:added "1.0"
;;    :go "exampleNewReader()"}
;;   [])
;; 
JOKER FUNC zlib_test.ExampleNewWriter has: 
;; (defn ExampleNewWriter
;;   {:added "1.0"
;;    :go "exampleNewWriter()"}
;;   [])
;; 
GO FUNC adler32.BenchmarkAdler32KB has: 
// func benchmarkAdler32KB(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{5467594 0xc002aa9700}))  {
// 	 := adler32.BenchmarkAdler32KB(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC adler32.TestGolden has: 
// func testGolden(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{5466385 0xc002aa3da0}))  {
// 	 := adler32.TestGolden(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC adler32.TestGoldenMarshal has: 
// func testGoldenMarshal(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{5466843 0xc002aa8680}))  {
// 	 := adler32.TestGoldenMarshal(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC aes.BenchmarkDecrypt has: 
// func benchmarkDecrypt(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{944904 0xc000a122a0}))  {
// 	 := aes.BenchmarkDecrypt(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC aes.BenchmarkEncrypt has: 
// func benchmarkEncrypt(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{944629 0xc000a09b40}))  {
// 	 := aes.BenchmarkEncrypt(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC aes.BenchmarkExpand has: 
// func benchmarkExpand(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{945180 0xc000a12a00}))  {
// 	 := aes.BenchmarkExpand(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC aes.TestCBCDecAble has: 
// func testCBCDecAble(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{949969 0xc000a26dc0}))  {
// 	 := aes.TestCBCDecAble(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC aes.TestCBCEncAble has: 
// func testCBCEncAble(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{949558 0xc000a26820}))  {
// 	 := aes.TestCBCEncAble(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC aes.TestCTRAble has: 
// func testCTRAble(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{950564 0xc000a275c0}))  {
// 	 := aes.TestCTRAble(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC aes.TestCipherDecrypt has: 
// func testCipherDecrypt(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{943198 0xc000a08040}))  {
// 	 := aes.TestCipherDecrypt(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC aes.TestCipherEncrypt has: 
// func testCipherEncrypt(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{942741 0xc000a056c0}))  {
// 	 := aes.TestCipherEncrypt(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC aes.TestExpandKey has: 
// func testExpandKey(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{940223 0xc000a028a0}))  {
// 	 := aes.TestExpandKey(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC aes.TestGCMAble has: 
// func testGCMAble(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{948870 0xc000a1be40}))  {
// 	 := aes.TestGCMAble(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC aes.TestMul has: 
// func testMul(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{934821 0xc0009e5e20}))  {
// 	 := aes.TestMul(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC aes.TestPowx has: 
// func testPowx(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{934127 0xc0009e5240}))  {
// 	 := aes.TestPowx(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC aes.TestSboxes has: 
// func testSboxes(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{935430 0xc0009f47e0}))  {
// 	 := aes.TestSboxes(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC aes.TestShortBlocks has: 
// func testShortBlocks(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{943687 0xc000a08a20}))  {
// 	 := aes.TestShortBlocks(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC aes.TestTd has: 
// func testTd(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{936195 0xc0009f56c0}))  {
// 	 := aes.TestTd(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC aes.TestTe has: 
// func testTe(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{935765 0xc0009f4d80}))  {
// 	 := aes.TestTe(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC ascii85.TestBig has: 
// func testBig(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{3097124 0xc000edc020}))  {
// 	 := ascii85.TestBig(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC ascii85.TestDecode has: 
// func testDecode(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{3095087 0xc000eabcc0}))  {
// 	 := ascii85.TestDecode(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC ascii85.TestDecodeCorrupt has: 
// func testDecodeCorrupt(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{3096666 0xc000ed75e0}))  {
// 	 := ascii85.TestDecodeCorrupt(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC ascii85.TestDecoder has: 
// func testDecoder(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{3095579 0xc000ecb640}))  {
// 	 := ascii85.TestDecoder(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC ascii85.TestDecoderBuffering has: 
// func testDecoderBuffering(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{3096065 0xc000ed01e0}))  {
// 	 := ascii85.TestDecoderBuffering(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC ascii85.TestDecoderInternalWhitespace has: 
// func testDecoderInternalWhitespace(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{3097969 0xc000ee6b20}))  {
// 	 := ascii85.TestDecoderInternalWhitespace(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC ascii85.TestEncode has: 
// func testEncode(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{3093849 0xc000eaa3e0}))  {
// 	 := ascii85.TestEncode(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC ascii85.TestEncoder has: 
// func testEncoder(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{3094119 0xc000eaa9e0}))  {
// 	 := ascii85.TestEncoder(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC ascii85.TestEncoderBuffering has: 
// func testEncoderBuffering(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{3094395 0xc000eaafa0}))  {
// 	 := ascii85.TestEncoderBuffering(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC asn1.BenchmarkMarshal has: 
// func benchmarkMarshal(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{3106465 0xc0012ba1a0}))  {
// 	 := asn1.BenchmarkMarshal(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC asn1.TestBitString has: 
// func testBitString(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{3146510 0xc0015ced80}))  {
// 	 := asn1.TestBitString(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC asn1.TestBitStringAt has: 
// func testBitStringAt(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{3146955 0xc0015ea540}))  {
// 	 := asn1.TestBitStringAt(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC asn1.TestBitStringRightAlign has: 
// func testBitStringRightAlign(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{3147703 0xc001637840}))  {
// 	 := asn1.TestBitStringRightAlign(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC asn1.TestCertificate has: 
// func testCertificate(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{3160232 0xc000d0a6e0}))  {
// 	 := asn1.TestCertificate(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC asn1.TestCertificateWithNUL has: 
// func testCertificateWithNUL(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{3160635 0xc000d0ac20}))  {
// 	 := asn1.TestCertificateWithNUL(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC asn1.TestExplicitTagRawValueStruct has: 
// func testExplicitTagRawValueStruct(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{3183157 0xc00109f360}))  {
// 	 := asn1.TestExplicitTagRawValueStruct(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC asn1.TestExplicitTaggedTime has: 
// func testExplicitTaggedTime(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{3179551 0xc000533c00}))  {
// 	 := asn1.TestExplicitTaggedTime(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC asn1.TestGeneralizedTime has: 
// func testGeneralizedTime(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{3152365 0xc000f60280}))  {
// 	 := asn1.TestGeneralizedTime(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC asn1.TestImplicitTaggedTime has: 
// func testImplicitTaggedTime(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{3180059 0xc00061a4a0}))  {
// 	 := asn1.TestImplicitTaggedTime(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC asn1.TestInvalidUTF8 has: 
// func testInvalidUTF8(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{3104727 0xc001223ee0}))  {
// 	 := asn1.TestInvalidUTF8(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC asn1.TestIssue11130 has: 
// func testIssue11130(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{3105674 0xc00129cdc0}))  {
// 	 := asn1.TestIssue11130(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC asn1.TestMarshal has: 
// func testMarshal(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{3103172 0xc0012139c0}))  {
// 	 := asn1.TestMarshal(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC asn1.TestMarshalError has: 
// func testMarshalError(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{3104428 0xc001222f80}))  {
// 	 := asn1.TestMarshalError(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC asn1.TestMarshalNilValue has: 
// func testMarshalNilValue(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{3181695 0xc00061bb60}))  {
// 	 := asn1.TestMarshalNilValue(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC asn1.TestMarshalOID has: 
// func testMarshalOID(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{3104880 0xc00129c1c0}))  {
// 	 := asn1.TestMarshalOID(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC asn1.TestMarshalWithParams has: 
// func testMarshalWithParams(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{3103787 0xc001222500}))  {
// 	 := asn1.TestMarshalWithParams(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC asn1.TestNull has: 
// func testNull(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{3182436 0xc00109e920}))  {
// 	 := asn1.TestNull(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC asn1.TestObjectIdentifier has: 
// func testObjectIdentifier(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{3148408 0xc001696bc0}))  {
// 	 := asn1.TestObjectIdentifier(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC asn1.TestObjectIdentifierEqual has: 
// func testObjectIdentifierEqual(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{3161819 0xc000d0bf80}))  {
// 	 := asn1.TestObjectIdentifierEqual(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC asn1.TestParseBigInt has: 
// func testParseBigInt(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{3145446 0xc001439ee0}))  {
// 	 := asn1.TestParseBigInt(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC asn1.TestParseBool has: 
// func testParseBool(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{3142963 0xc00142c560}))  {
// 	 := asn1.TestParseBool(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC asn1.TestParseFieldParameters has: 
// func testParseFieldParameters(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{3156559 0xc00108a620}))  {
// 	 := asn1.TestParseFieldParameters(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC asn1.TestParseInt32 has: 
// func testParseInt32(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{3144724 0xc001438b80}))  {
// 	 := asn1.TestParseInt32(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC asn1.TestParseInt64 has: 
// func testParseInt64(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{3143871 0xc00142d900}))  {
// 	 := asn1.TestParseInt64(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC asn1.TestParseTagAndLength has: 
// func testParseTagAndLength(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{3154639 0xc000f7a900}))  {
// 	 := asn1.TestParseTagAndLength(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC asn1.TestRawStructs has: 
// func testRawStructs(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{3161016 0xc000d0b040}))  {
// 	 := asn1.TestRawStructs(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC asn1.TestStringSlice has: 
// func testStringSlice(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{3178580 0xc000532800}))  {
// 	 := asn1.TestStringSlice(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC asn1.TestTaggedRawValue has: 
// func testTaggedRawValue(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{3183682 0xc00109fd20}))  {
// 	 := asn1.TestTaggedRawValue(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC asn1.TestTruncatedExplicitTag has: 
// func testTruncatedExplicitTag(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{3180860 0xc00061afc0}))  {
// 	 := asn1.TestTruncatedExplicitTag(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC asn1.TestUTCTime has: 
// func testUTCTime(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{3150577 0xc000f4c2a0}))  {
// 	 := asn1.TestUTCTime(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC asn1.TestUnexportedStructField has: 
// func testUnexportedStructField(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{3182049 0xc00109e100}))  {
// 	 := asn1.TestUnexportedStructField(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC asn1.TestUnmarshal has: 
// func testUnmarshal(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{3159030 0xc00060b7a0}))  {
// 	 := asn1.TestUnmarshal(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC asn1.TestUnmarshalInvalidUTF8 has: 
// func testUnmarshalInvalidUTF8(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{3181284 0xc00061b580}))  {
// 	 := asn1.TestUnmarshalInvalidUTF8(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC ast.Inspect has: 
// func inspect(node Object, f ABEND881(unrecognized Expr type *ast.FuncType at: &{4393917 0xc00198ea20 0xc00198ea50}))  {
// 	 := ast.Inspect(node, f)
// 	...ABEND: TODO...
// }
// 
GO FUNC ast.SortImports has: 
// func sortImports(fset ABEND881(unrecognized Expr type *ast.StarExpr at: &{4361486 0xc000aa6220}), f ABEND881(unrecognized Expr type *ast.StarExpr at: &{4361504 File}))  {
// 	 := ast.SortImports(fset, f)
// 	...ABEND: TODO...
// }
// 
GO FUNC ast.TestCommentText has: 
// func testCommentText(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{4417907 0xc0018be3e0}))  {
// 	 := ast.TestCommentText(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC ast.TestPrint has: 
// func testPrint(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{4387305 0xc0012a1660}))  {
// 	 := ast.TestPrint(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC ast.Walk has: 
// func walk(v Object, node Object)  {
// 	 := ast.Walk(v, node)
// 	...ABEND: TODO...
// }
// 
GO FUNC ast_test.ExampleCommentMap has: 
// func exampleCommentMap()  {
// 	 := ast_test.ExampleCommentMap()
// 	...ABEND: TODO...
// }
// 
GO FUNC ast_test.ExampleInspect has: 
// func exampleInspect()  {
// 	 := ast_test.ExampleInspect()
// 	...ABEND: TODO...
// }
// 
GO FUNC ast_test.ExamplePrint has: 
// func examplePrint()  {
// 	 := ast_test.ExamplePrint()
// 	...ABEND: TODO...
// }
// 
GO FUNC ast_test.TestCommentMap has: 
// func testCommentMap(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{4383062 0xc001127c80}))  {
// 	 := ast_test.TestCommentMap(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC ast_test.TestFilterDuplicates has: 
// func testFilterDuplicates(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{4385139 0xc0005393c0}))  {
// 	 := ast_test.TestFilterDuplicates(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC atomic.StoreInt32 has: 
// func storeInt32(addr ABEND881(unrecognized Expr type *ast.StarExpr at: &{13177544 int32}), val Object)  {
// 	 := atomic.StoreInt32(addr, val)
// 	...ABEND: TODO...
// }
// 
GO FUNC atomic.StoreInt64 has: 
// func storeInt64(addr ABEND881(unrecognized Expr type *ast.StarExpr at: &{13177633 int64}), val Object)  {
// 	 := atomic.StoreInt64(addr, val)
// 	...ABEND: TODO...
// }
// 
GO FUNC atomic.StorePointer has: 
// func storePointer(addr ABEND881(unrecognized Expr type *ast.StarExpr at: &{13178009 0xc00633b2a0}), val ABEND881(unrecognized Expr type *ast.SelectorExpr at: &{unsafe Pointer}))  {
// 	 := atomic.StorePointer(addr, val)
// 	...ABEND: TODO...
// }
// 
GO FUNC atomic.StoreUint32 has: 
// func storeUint32(addr ABEND881(unrecognized Expr type *ast.StarExpr at: &{13177724 uint32}), val Object)  {
// 	 := atomic.StoreUint32(addr, val)
// 	...ABEND: TODO...
// }
// 
GO FUNC atomic.StoreUint64 has: 
// func storeUint64(addr ABEND881(unrecognized Expr type *ast.StarExpr at: &{13177817 uint64}), val Object)  {
// 	 := atomic.StoreUint64(addr, val)
// 	...ABEND: TODO...
// }
// 
GO FUNC atomic.StoreUintptr has: 
// func storeUintptr(addr ABEND881(unrecognized Expr type *ast.StarExpr at: &{13177912 uintptr}), val Object)  {
// 	 := atomic.StoreUintptr(addr, val)
// 	...ABEND: TODO...
// }
// 
GO FUNC atomic_test.BenchmarkValueRead has: 
// func benchmarkValueRead(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{13180819 0xc00634e500}))  {
// 	 := atomic_test.BenchmarkValueRead(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC atomic_test.ExampleValue_config has: 
// func exampleValue_config()  {
// 	 := atomic_test.ExampleValue_config()
// 	...ABEND: TODO...
// }
// 
GO FUNC atomic_test.ExampleValue_readMostly has: 
// func exampleValue_readMostly()  {
// 	 := atomic_test.ExampleValue_readMostly()
// 	...ABEND: TODO...
// }
// 
GO FUNC atomic_test.TestAddInt32 has: 
// func testAddInt32(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{13141674 0xc00628b300}))  {
// 	 := atomic_test.TestAddInt32(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC atomic_test.TestAddInt64 has: 
// func testAddInt64(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{13142651 0xc006290800}))  {
// 	 := atomic_test.TestAddInt64(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC atomic_test.TestAddUint32 has: 
// func testAddUint32(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{13142160 0xc00628bd80}))  {
// 	 := atomic_test.TestAddUint32(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC atomic_test.TestAddUint64 has: 
// func testAddUint64(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{13143227 0xc0062913c0}))  {
// 	 := atomic_test.TestAddUint64(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC atomic_test.TestAddUintptr has: 
// func testAddUintptr(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{13143812 0xc006291f80}))  {
// 	 := atomic_test.TestAddUintptr(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC atomic_test.TestCompareAndSwapInt32 has: 
// func testCompareAndSwapInt32(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{13144374 0xc00629aac0}))  {
// 	 := atomic_test.TestCompareAndSwapInt32(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC atomic_test.TestCompareAndSwapInt64 has: 
// func testCompareAndSwapInt64(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{13145911 0xc00629cb00}))  {
// 	 := atomic_test.TestCompareAndSwapInt64(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC atomic_test.TestCompareAndSwapPointer has: 
// func testCompareAndSwapPointer(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{13148573 0xc0062a8120}))  {
// 	 := atomic_test.TestCompareAndSwapPointer(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC atomic_test.TestCompareAndSwapUint32 has: 
// func testCompareAndSwapUint32(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{13145140 0xc00629bae0}))  {
// 	 := atomic_test.TestCompareAndSwapUint32(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC atomic_test.TestCompareAndSwapUint64 has: 
// func testCompareAndSwapUint64(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{13147639 0xc0062a2ee0}))  {
// 	 := atomic_test.TestCompareAndSwapUint64(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC atomic_test.TestCompareAndSwapUintptr has: 
// func testCompareAndSwapUintptr(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{13147740 0xc0062a3040}))  {
// 	 := atomic_test.TestCompareAndSwapUintptr(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC atomic_test.TestHammer32 has: 
// func testHammer32(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{13159316 0xc0062d0a60}))  {
// 	 := atomic_test.TestHammer32(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC atomic_test.TestHammer64 has: 
// func testHammer64(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{13162957 0xc0062e2720}))  {
// 	 := atomic_test.TestHammer64(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC atomic_test.TestHammerStoreLoad has: 
// func testHammerStoreLoad(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{13165797 0xc0062fc240}))  {
// 	 := atomic_test.TestHammerStoreLoad(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC atomic_test.TestLoadInt32 has: 
// func testLoadInt32(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{13149535 0xc0062a9560}))  {
// 	 := atomic_test.TestLoadInt32(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC atomic_test.TestLoadInt64 has: 
// func testLoadInt64(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{13150443 0xc0062b0920}))  {
// 	 := atomic_test.TestLoadInt64(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC atomic_test.TestLoadPointer has: 
// func testLoadPointer(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{13152054 0xc0062b6a00}))  {
// 	 := atomic_test.TestLoadPointer(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC atomic_test.TestLoadUint32 has: 
// func testLoadUint32(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{13149987 0xc0062a9f40}))  {
// 	 := atomic_test.TestLoadUint32(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC atomic_test.TestLoadUint64 has: 
// func testLoadUint64(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{13150987 0xc0062b1440}))  {
// 	 := atomic_test.TestLoadUint64(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC atomic_test.TestLoadUintptr has: 
// func testLoadUintptr(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{13151537 0xc0062b1f60}))  {
// 	 := atomic_test.TestLoadUintptr(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC atomic_test.TestNilDeref has: 
// func testNilDeref(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{13171358 0xc006318f80}))  {
// 	 := atomic_test.TestNilDeref(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC atomic_test.TestStoreInt32 has: 
// func testStoreInt32(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{13152613 0xc0062b75e0}))  {
// 	 := atomic_test.TestStoreInt32(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC atomic_test.TestStoreInt64 has: 
// func testStoreInt64(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{13153548 0xc0062bca20}))  {
// 	 := atomic_test.TestStoreInt64(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC atomic_test.TestStoreLoadRelAcq32 has: 
// func testStoreLoadRelAcq32(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{13168585 0xc006303ca0}))  {
// 	 := atomic_test.TestStoreLoadRelAcq32(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC atomic_test.TestStoreLoadRelAcq64 has: 
// func testStoreLoadRelAcq64(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{13169489 0xc006312ec0}))  {
// 	 := atomic_test.TestStoreLoadRelAcq64(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC atomic_test.TestStoreLoadSeqCst32 has: 
// func testStoreLoadSeqCst32(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{13166475 0xc0062fce20}))  {
// 	 := atomic_test.TestStoreLoadSeqCst32(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC atomic_test.TestStoreLoadSeqCst64 has: 
// func testStoreLoadSeqCst64(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{13167492 0xc0063024e0}))  {
// 	 := atomic_test.TestStoreLoadSeqCst64(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC atomic_test.TestStorePointer has: 
// func testStorePointer(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{13155201 0xc0062c2bc0}))  {
// 	 := atomic_test.TestStorePointer(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC atomic_test.TestStoreUint32 has: 
// func testStoreUint32(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{13153078 0xc0062bc000}))  {
// 	 := atomic_test.TestStoreUint32(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC atomic_test.TestStoreUint64 has: 
// func testStoreUint64(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{13154105 0xc0062bd580}))  {
// 	 := atomic_test.TestStoreUint64(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC atomic_test.TestStoreUintptr has: 
// func testStoreUintptr(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{13154669 0xc0062c20e0}))  {
// 	 := atomic_test.TestStoreUintptr(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC atomic_test.TestSwapInt32 has: 
// func testSwapInt32(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{13138354 0xc00626ef00}))  {
// 	 := atomic_test.TestSwapInt32(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC atomic_test.TestSwapInt64 has: 
// func testSwapInt64(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{13139341 0xc006280400}))  {
// 	 := atomic_test.TestSwapInt64(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC atomic_test.TestSwapPointer has: 
// func testSwapPointer(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{13141072 0xc00628a6c0}))  {
// 	 := atomic_test.TestSwapPointer(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC atomic_test.TestSwapUint32 has: 
// func testSwapUint32(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{13138845 0xc00626f980}))  {
// 	 := atomic_test.TestSwapUint32(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC atomic_test.TestSwapUint64 has: 
// func testSwapUint64(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{13139924 0xc006280fc0}))  {
// 	 := atomic_test.TestSwapUint64(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC atomic_test.TestSwapUintptr has: 
// func testSwapUintptr(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{13140514 0xc006281b80}))  {
// 	 := atomic_test.TestSwapUintptr(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC atomic_test.TestUnaligned64 has: 
// func testUnaligned64(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{13170614 0xc0063184c0}))  {
// 	 := atomic_test.TestUnaligned64(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC atomic_test.TestValue has: 
// func testValue(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{13178454 0xc00633b6c0}))  {
// 	 := atomic_test.TestValue(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC atomic_test.TestValueConcurrent has: 
// func testValueConcurrent(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{13179860 0xc006346f80}))  {
// 	 := atomic_test.TestValueConcurrent(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC atomic_test.TestValueLarge has: 
// func testValueLarge(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{13178806 0xc00633bf20}))  {
// 	 := atomic_test.TestValueLarge(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC atomic_test.TestValuePanic has: 
// func testValuePanic(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{13179124 0xc006346620}))  {
// 	 := atomic_test.TestValuePanic(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC base32.BenchmarkDecodeString has: 
// func benchmarkDecodeString(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{3229348 0xc0013d9380}))  {
// 	 := base32.BenchmarkDecodeString(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC base32.BenchmarkEncodeToString has: 
// func benchmarkEncodeToString(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{3229178 0xc0013d8fa0}))  {
// 	 := base32.BenchmarkEncodeToString(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC base32.TestBig has: 
// func testBig(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{3226209 0xc00135ab80}))  {
// 	 := base32.TestBig(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC base32.TestBufferedDecodingSameError has: 
// func testBufferedDecodingSameError(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{3231510 0xc0014a95e0}))  {
// 	 := base32.TestBufferedDecodingSameError(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC base32.TestDecode has: 
// func testDecode(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{3216981 0xc000a3ffe0}))  {
// 	 := base32.TestDecode(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC base32.TestDecodeCorrupt has: 
// func testDecodeCorrupt(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{3225194 0xc000ed9780}))  {
// 	 := base32.TestDecodeCorrupt(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC base32.TestDecodeReadAll has: 
// func testDecodeReadAll(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{3235427 0xc000ef5920}))  {
// 	 := base32.TestDecodeReadAll(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC base32.TestDecodeSmallBuffer has: 
// func testDecodeSmallBuffer(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{3236046 0xc00130a360}))  {
// 	 := base32.TestDecodeSmallBuffer(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC base32.TestDecodeWithPadding has: 
// func testDecodeWithPadding(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{3230590 0xc0014a8760}))  {
// 	 := base32.TestDecodeWithPadding(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC base32.TestDecodeWithWrongPadding has: 
// func testDecodeWithWrongPadding(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{3231172 0xc0014a9020}))  {
// 	 := base32.TestDecodeWithWrongPadding(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC base32.TestDecoder has: 
// func testDecoder(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{3217781 0xc000522fc0}))  {
// 	 := base32.TestDecoder(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC base32.TestDecoderBuffering has: 
// func testDecoderBuffering(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{3224580 0xc000ed8be0}))  {
// 	 := base32.TestDecoderBuffering(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC base32.TestDecoderError has: 
// func testDecoderError(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{3223293 0xc000e795c0}))  {
// 	 := base32.TestDecoderError(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC base32.TestDecoderIssue4779 has: 
// func testDecoderIssue4779(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{3227929 0xc0013d85c0}))  {
// 	 := base32.TestDecoderIssue4779(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC base32.TestEncode has: 
// func testEncode(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{3215832 0xc000a3e980}))  {
// 	 := base32.TestEncode(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC base32.TestEncodedDecodedLen has: 
// func testEncodedDecodedLen(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{3233717 0xc000fc1660}))  {
// 	 := base32.TestEncodedDecodedLen(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC base32.TestEncoder has: 
// func testEncoder(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{3216023 0xc000a3ed80}))  {
// 	 := base32.TestEncoder(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC base32.TestEncoderBuffering has: 
// func testEncoderBuffering(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{3216294 0xc000a3f340}))  {
// 	 := base32.TestEncoderBuffering(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC base32.TestIssue20044 has: 
// func testIssue20044(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{3219384 0xc000802920}))  {
// 	 := base32.TestIssue20044(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC base32.TestNewLineCharacters has: 
// func testNewLineCharacters(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{3227408 0xc0013d80e0}))  {
// 	 := base32.TestNewLineCharacters(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC base32.TestReaderEOF has: 
// func testReaderEOF(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{3223857 0xc000e79ee0}))  {
// 	 := base32.TestReaderEOF(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC base32.TestWithCustomPadding has: 
// func testWithCustomPadding(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{3229544 0xc0013d97c0}))  {
// 	 := base32.TestWithCustomPadding(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC base32.TestWithoutPadding has: 
// func testWithoutPadding(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{3230066 0xc0013d9fc0}))  {
// 	 := base32.TestWithoutPadding(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC base32.TestWithoutPaddingClose has: 
// func testWithoutPaddingClose(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{3234829 0xc000ef4ee0}))  {
// 	 := base32.TestWithoutPaddingClose(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC base32_test.ExampleEncoding_DecodeString has: 
// func exampleEncoding_DecodeString()  {
// 	 := base32_test.ExampleEncoding_DecodeString()
// 	...ABEND: TODO...
// }
// 
GO FUNC base32_test.ExampleEncoding_EncodeToString has: 
// func exampleEncoding_EncodeToString()  {
// 	 := base32_test.ExampleEncoding_EncodeToString()
// 	...ABEND: TODO...
// }
// 
GO FUNC base32_test.ExampleNewEncoder has: 
// func exampleNewEncoder()  {
// 	 := base32_test.ExampleNewEncoder()
// 	...ABEND: TODO...
// }
// 
GO FUNC base64.BenchmarkDecodeString has: 
// func benchmarkDecodeString(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{3250959 0xc00064b260}))  {
// 	 := base64.BenchmarkDecodeString(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC base64.BenchmarkEncodeToString has: 
// func benchmarkEncodeToString(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{3250789 0xc00064ae80}))  {
// 	 := base64.BenchmarkEncodeToString(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC base64.TestBig has: 
// func testBig(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{3245806 0xc000476d60}))  {
// 	 := base64.TestBig(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC base64.TestDecode has: 
// func testDecode(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{3241911 0xc000c17e80}))  {
// 	 := base64.TestDecode(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC base64.TestDecodeCorrupt has: 
// func testDecodeCorrupt(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{3243850 0xc000a4e3e0}))  {
// 	 := base64.TestDecodeCorrupt(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC base64.TestDecodedLen has: 
// func testDecodedLen(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{3245367 0xc0004763a0}))  {
// 	 := base64.TestDecodedLen(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC base64.TestDecoder has: 
// func testDecoder(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{3242619 0xc000a4cba0}))  {
// 	 := base64.TestDecoder(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC base64.TestDecoderBuffering has: 
// func testDecoderBuffering(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{3243236 0xc000a4d840}))  {
// 	 := base64.TestDecoderBuffering(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC base64.TestDecoderIssue15656 has: 
// func testDecoderIssue15656(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{3250285 0xc00064a660}))  {
// 	 := base64.TestDecoderIssue15656(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC base64.TestDecoderIssue3577 has: 
// func testDecoderIssue3577(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{3247791 0xc00047ace0}))  {
// 	 := base64.TestDecoderIssue3577(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC base64.TestDecoderIssue4779 has: 
// func testDecoderIssue4779(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{3248444 0xc00047b780}))  {
// 	 := base64.TestDecoderIssue4779(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC base64.TestDecoderIssue7733 has: 
// func testDecoderIssue7733(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{3249987 0xc00064a160}))  {
// 	 := base64.TestDecoderIssue7733(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC base64.TestDecoderRaw has: 
// func testDecoderRaw(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{3251377 0xc00064bc60}))  {
// 	 := base64.TestDecoderRaw(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC base64.TestEncode has: 
// func testEncode(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{3240711 0xc000c166e0}))  {
// 	 := base64.TestEncode(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC base64.TestEncodedLen has: 
// func testEncodedLen(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{3244851 0xc000a4f860}))  {
// 	 := base64.TestEncodedLen(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC base64.TestEncoder has: 
// func testEncoder(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{3240953 0xc000c16c20}))  {
// 	 := base64.TestEncoder(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC base64.TestEncoderBuffering has: 
// func testEncoderBuffering(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{3241224 0xc000c171e0}))  {
// 	 := base64.TestEncoderBuffering(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC base64.TestNewLineCharacters has: 
// func testNewLineCharacters(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{3246673 0xc000477ca0}))  {
// 	 := base64.TestNewLineCharacters(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC base64_test.Example has: 
// func example()  {
// 	 := base64_test.Example()
// 	...ABEND: TODO...
// }
// 
GO FUNC base64_test.ExampleEncoding_DecodeString has: 
// func exampleEncoding_DecodeString()  {
// 	 := base64_test.ExampleEncoding_DecodeString()
// 	...ABEND: TODO...
// }
// 
GO FUNC base64_test.ExampleEncoding_EncodeToString has: 
// func exampleEncoding_EncodeToString()  {
// 	 := base64_test.ExampleEncoding_EncodeToString()
// 	...ABEND: TODO...
// }
// 
GO FUNC base64_test.ExampleNewEncoder has: 
// func exampleNewEncoder()  {
// 	 := base64_test.ExampleNewEncoder()
// 	...ABEND: TODO...
// }
// 
GO FUNC big.BenchmarkAddMulVVW has: 
// func benchmarkAddMulVVW(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{6783202 0xc002e061a0}))  {
// 	 := big.BenchmarkAddMulVVW(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC big.BenchmarkAddVV has: 
// func benchmarkAddVV(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{6776305 0xc002de0d80}))  {
// 	 := big.BenchmarkAddVV(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC big.BenchmarkAddVW has: 
// func benchmarkAddVW(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{6779126 0xc002df3a60}))  {
// 	 := big.BenchmarkAddVW(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC big.BenchmarkBinomial has: 
// func benchmarkBinomial(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{6728432 0xc002d3b400}))  {
// 	 := big.BenchmarkBinomial(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC big.BenchmarkBitset has: 
// func benchmarkBitset(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{6763326 0xc002da1ac0}))  {
// 	 := big.BenchmarkBitset(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC big.BenchmarkBitsetNeg has: 
// func benchmarkBitsetNeg(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{6763497 0xc002da1fe0}))  {
// 	 := big.BenchmarkBitsetNeg(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC big.BenchmarkBitsetNegOrig has: 
// func benchmarkBitsetNegOrig(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{6763854 0xc002daea00}))  {
// 	 := big.BenchmarkBitsetNegOrig(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC big.BenchmarkBitsetOrig has: 
// func benchmarkBitsetOrig(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{6763671 0xc002dae520}))  {
// 	 := big.BenchmarkBitsetOrig(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC big.BenchmarkDecimalConversion has: 
// func benchmarkDecimalConversion(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{7096414 0xc003277e40}))  {
// 	 := big.BenchmarkDecimalConversion(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC big.BenchmarkExp has: 
// func benchmarkExp(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{6744957 0xc002d64420}))  {
// 	 := big.BenchmarkExp(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC big.BenchmarkExp2 has: 
// func benchmarkExp2(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{6746812 0xc002d64b20}))  {
// 	 := big.BenchmarkExp2(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC big.BenchmarkExp3Power has: 
// func benchmarkExp3Power(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{6818878 0xc002e8a5a0}))  {
// 	 := big.BenchmarkExp3Power(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC big.BenchmarkFibo has: 
// func benchmarkFibo(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{6819789 0xc002e8b8c0}))  {
// 	 := big.BenchmarkFibo(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC big.BenchmarkFloatAdd has: 
// func benchmarkFloatAdd(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{7086146 0xc003253ec0}))  {
// 	 := big.BenchmarkFloatAdd(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC big.BenchmarkFloatSqrt has: 
// func benchmarkFloatSqrt(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{6938051 0xc0030509a0}))  {
// 	 := big.BenchmarkFloatSqrt(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC big.BenchmarkFloatString has: 
// func benchmarkFloatString(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{7096603 0xc00327c2c0}))  {
// 	 := big.BenchmarkFloatString(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC big.BenchmarkFloatSub has: 
// func benchmarkFloatSub(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{7086525 0xc0032569a0}))  {
// 	 := big.BenchmarkFloatSub(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC big.BenchmarkGCD100000x100000 has: 
// func benchmarkGCD100000x100000(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{6718221 0xc002cfdaa0}))  {
// 	 := big.BenchmarkGCD100000x100000(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC big.BenchmarkGCD10000x10000 has: 
// func benchmarkGCD10000x10000(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{6718072 0xc002cfd7a0}))  {
// 	 := big.BenchmarkGCD10000x10000(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC big.BenchmarkGCD10000x100000 has: 
// func benchmarkGCD10000x100000(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{6718146 0xc002cfd920}))  {
// 	 := big.BenchmarkGCD10000x100000(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC big.BenchmarkGCD1000x1000 has: 
// func benchmarkGCD1000x1000(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{6717854 0xc002cfd320}))  {
// 	 := big.BenchmarkGCD1000x1000(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC big.BenchmarkGCD1000x10000 has: 
// func benchmarkGCD1000x10000(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{6717926 0xc002cfd4a0}))  {
// 	 := big.BenchmarkGCD1000x10000(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC big.BenchmarkGCD1000x100000 has: 
// func benchmarkGCD1000x100000(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{6717999 0xc002cfd620}))  {
// 	 := big.BenchmarkGCD1000x100000(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC big.BenchmarkGCD100x100 has: 
// func benchmarkGCD100x100(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{6717570 0xc002cfcd20}))  {
// 	 := big.BenchmarkGCD100x100(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC big.BenchmarkGCD100x1000 has: 
// func benchmarkGCD100x1000(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{6717640 0xc002cfcea0}))  {
// 	 := big.BenchmarkGCD100x1000(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC big.BenchmarkGCD100x10000 has: 
// func benchmarkGCD100x10000(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{6717711 0xc002cfd020}))  {
// 	 := big.BenchmarkGCD100x10000(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC big.BenchmarkGCD100x100000 has: 
// func benchmarkGCD100x100000(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{6717783 0xc002cfd1a0}))  {
// 	 := big.BenchmarkGCD100x100000(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC big.BenchmarkGCD10x10 has: 
// func benchmarkGCD10x10(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{6717223 0xc002cfc5a0}))  {
// 	 := big.BenchmarkGCD10x10(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC big.BenchmarkGCD10x100 has: 
// func benchmarkGCD10x100(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{6717291 0xc002cfc720}))  {
// 	 := big.BenchmarkGCD10x100(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC big.BenchmarkGCD10x1000 has: 
// func benchmarkGCD10x1000(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{6717360 0xc002cfc8a0}))  {
// 	 := big.BenchmarkGCD10x1000(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC big.BenchmarkGCD10x10000 has: 
// func benchmarkGCD10x10000(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{6717430 0xc002cfca20}))  {
// 	 := big.BenchmarkGCD10x10000(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC big.BenchmarkGCD10x100000 has: 
// func benchmarkGCD10x100000(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{6717501 0xc002cfcba0}))  {
// 	 := big.BenchmarkGCD10x100000(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC big.BenchmarkHilbert has: 
// func benchmarkHilbert(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{6715981 0xc002cf2cc0}))  {
// 	 := big.BenchmarkHilbert(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC big.BenchmarkIntSqr has: 
// func benchmarkIntSqr(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{6773200 0xc002dd3ae0}))  {
// 	 := big.BenchmarkIntSqr(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC big.BenchmarkLeafSize has: 
// func benchmarkLeafSize(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{7009541 0xc003136f60}))  {
// 	 := big.BenchmarkLeafSize(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC big.BenchmarkModInverse has: 
// func benchmarkModInverse(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{6768024 0xc002dc03e0}))  {
// 	 := big.BenchmarkModInverse(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC big.BenchmarkModSqrt225_3Mod4 has: 
// func benchmarkModSqrt225_3Mod4(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{6764465 0xc002daf840}))  {
// 	 := big.BenchmarkModSqrt225_3Mod4(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC big.BenchmarkModSqrt225_Tonelli has: 
// func benchmarkModSqrt225_Tonelli(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{6764305 0xc002daf420}))  {
// 	 := big.BenchmarkModSqrt225_Tonelli(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC big.BenchmarkModSqrt231_5Mod8 has: 
// func benchmarkModSqrt231_5Mod8(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{6764882 0xc002db2300}))  {
// 	 := big.BenchmarkModSqrt231_5Mod8(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC big.BenchmarkModSqrt231_Tonelli has: 
// func benchmarkModSqrt231_Tonelli(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{6764636 0xc002dafcc0}))  {
// 	 := big.BenchmarkModSqrt231_Tonelli(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC big.BenchmarkMul has: 
// func benchmarkMul(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{6810717 0xc002e6e440}))  {
// 	 := big.BenchmarkMul(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC big.BenchmarkNatSetBytes has: 
// func benchmarkNatSetBytes(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{6822331 0xc002e97700}))  {
// 	 := big.BenchmarkNatSetBytes(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC big.BenchmarkNatSqr has: 
// func benchmarkNatSqr(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{6822119 0xc002e97260}))  {
// 	 := big.BenchmarkNatSqr(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC big.BenchmarkParseFloatLargeExp has: 
// func benchmarkParseFloatLargeExp(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{6931658 0xc003039820}))  {
// 	 := big.BenchmarkParseFloatLargeExp(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC big.BenchmarkParseFloatSmallExp has: 
// func benchmarkParseFloatSmallExp(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{6931251 0xc0030390a0}))  {
// 	 := big.BenchmarkParseFloatSmallExp(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC big.BenchmarkProbablyPrime has: 
// func benchmarkProbablyPrime(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{6803904 0xc002e47700}))  {
// 	 := big.BenchmarkProbablyPrime(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC big.BenchmarkQuoRem has: 
// func benchmarkQuoRem(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{6733832 0xc002d563e0}))  {
// 	 := big.BenchmarkQuoRem(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC big.BenchmarkScan has: 
// func benchmarkScan(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{7008511 0xc003131680}))  {
// 	 := big.BenchmarkScan(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC big.BenchmarkScanPi has: 
// func benchmarkScanPi(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{7008110 0xc003130ce0}))  {
// 	 := big.BenchmarkScanPi(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC big.BenchmarkSqrt has: 
// func benchmarkSqrt(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{6772856 0xc002dd30e0}))  {
// 	 := big.BenchmarkSqrt(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC big.BenchmarkString has: 
// func benchmarkString(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{7009080 0xc003136460}))  {
// 	 := big.BenchmarkString(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC big.BenchmarkStringPiParallel has: 
// func benchmarkStringPiParallel(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{7008246 0xc003131060}))  {
// 	 := big.BenchmarkStringPiParallel(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC big.BenchmarkSubVV has: 
// func benchmarkSubVV(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{6776612 0xc002de1540}))  {
// 	 := big.BenchmarkSubVV(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC big.BenchmarkSubVW has: 
// func benchmarkSubVW(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{6779432 0xc002df6200}))  {
// 	 := big.BenchmarkSubVW(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC big.BenchmarkZeroShifts has: 
// func benchmarkZeroShifts(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{6812062 0xc002e78640}))  {
// 	 := big.BenchmarkZeroShifts(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC big.LeafSizeHelper has: 
// func leafSizeHelper(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{7009820 0xc003137720}), base int, size int)  {
// 	 := big.LeafSizeHelper(b, base, size)
// 	...ABEND: TODO...
// }
// 
GO FUNC big.TestAbsZ has: 
// func testAbsZ(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{6724458 0xc002d27400}))  {
// 	 := big.TestAbsZ(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC big.TestAppendText has: 
// func testAppendText(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{6785348 0xc002e11200}))  {
// 	 := big.TestAppendText(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC big.TestBinomial has: 
// func testBinomial(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{6727771 0xc002d3a3c0}))  {
// 	 := big.TestBinomial(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC big.TestBit has: 
// func testBit(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{6820395 0xc002e94800}))  {
// 	 := big.TestBit(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC big.TestBitLen has: 
// func testBitLen(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{6735558 0xc002d56fc0}))  {
// 	 := big.TestBitLen(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC big.TestBitSet has: 
// func testBitSet(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{6762818 0xc002da0da0}))  {
// 	 := big.TestBitSet(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC big.TestBits has: 
// func testBits(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{6730486 0xc002d44440}))  {
// 	 := big.TestBits(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC big.TestBitwise has: 
// func testBitwise(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{6765111 0xc002db2940}))  {
// 	 := big.TestBitwise(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC big.TestBytes has: 
// func testBytes(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{6731596 0xc002d45c00}))  {
// 	 := big.TestBytes(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC big.TestCalibrate has: 
// func testCalibrate(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{6719255 0xc002d0a240}))  {
// 	 := big.TestCalibrate(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC big.TestCmp has: 
// func testCmp(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{6806516 0xc002e5eae0}))  {
// 	 := big.TestCmp(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC big.TestCmpAbs has: 
// func testCmpAbs(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{6755878 0xc002d83920}))  {
// 	 := big.TestCmpAbs(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC big.TestDecimalInit has: 
// func testDecimalInit(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{7094161 0xc003271040}))  {
// 	 := big.TestDecimalInit(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC big.TestDecimalRounding has: 
// func testDecimalRounding(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{7094842 0xc003271d80}))  {
// 	 := big.TestDecimalRounding(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC big.TestDecimalString has: 
// func testDecimalString(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{7093681 0xc0032705e0}))  {
// 	 := big.TestDecimalString(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC big.TestDivisionSigns has: 
// func testDivisionSigns(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{6728865 0xc002d40060}))  {
// 	 := big.TestDivisionSigns(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC big.TestExp has: 
// func testExp(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{6744057 0xc002d5f000}))  {
// 	 := big.TestExp(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC big.TestExpNN has: 
// func testExpNN(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{6818515 0xc002e85d20}))  {
// 	 := big.TestExpNN(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC big.TestFibo has: 
// func testFibo(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{6819583 0xc002e8b4a0}))  {
// 	 := big.TestFibo(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC big.TestFloat32Distribution has: 
// func testFloat32Distribution(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{6906602 0xc002fef7e0}))  {
// 	 := big.TestFloat32Distribution(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC big.TestFloat32SpecialCases has: 
// func testFloat32SpecialCases(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{6856945 0xc002f17ee0}))  {
// 	 := big.TestFloat32SpecialCases(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC big.TestFloat64Distribution has: 
// func testFloat64Distribution(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{6907702 0xc002ff2a00}))  {
// 	 := big.TestFloat64Distribution(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC big.TestFloat64SpecialCases has: 
// func testFloat64SpecialCases(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{6858493 0xc002f1b380}))  {
// 	 := big.TestFloat64SpecialCases(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC big.TestFloat64Text has: 
// func testFloat64Text(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{6916415 0xc003009d40}))  {
// 	 := big.TestFloat64Text(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC big.TestFloatAbs has: 
// func testFloatAbs(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{7067220 0xc003213820}))  {
// 	 := big.TestFloatAbs(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC big.TestFloatAdd has: 
// func testFloatAdd(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{7069313 0xc003219d80}))  {
// 	 := big.TestFloatAdd(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC big.TestFloatAdd32 has: 
// func testFloatAdd32(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{7071252 0xc00321fae0}))  {
// 	 := big.TestFloatAdd32(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC big.TestFloatAdd64 has: 
// func testFloatAdd64(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{7072163 0xc003226a60}))  {
// 	 := big.TestFloatAdd64(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC big.TestFloatAddRoundZero has: 
// func testFloatAddRoundZero(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{7070431 0xc00321ede0}))  {
// 	 := big.TestFloatAddRoundZero(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC big.TestFloatArithmeticOverflow has: 
// func testFloatArithmeticOverflow(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{7080693 0xc0032483e0}))  {
// 	 := big.TestFloatArithmeticOverflow(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC big.TestFloatArithmeticRounding has: 
// func testFloatArithmeticRounding(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{7084066 0xc00324d120}))  {
// 	 := big.TestFloatArithmeticRounding(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC big.TestFloatArithmeticSpecialValues has: 
// func testFloatArithmeticSpecialValues(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{7079060 0xc003242620}))  {
// 	 := big.TestFloatArithmeticSpecialValues(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC big.TestFloatCmpSpecialValues has: 
// func testFloatCmpSpecialValues(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{7085400 0xc003253060}))  {
// 	 := big.TestFloatCmpSpecialValues(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC big.TestFloatCorruptGob has: 
// func testFloatCorruptGob(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{6836774 0xc002ed4b40}))  {
// 	 := big.TestFloatCorruptGob(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC big.TestFloatFloat32 has: 
// func testFloatFloat32(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{7054879 0xc0031f2060}))  {
// 	 := big.TestFloatFloat32(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC big.TestFloatFloat64 has: 
// func testFloatFloat64(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{7059854 0xc0031fe980}))  {
// 	 := big.TestFloatFloat64(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC big.TestFloatFormat has: 
// func testFloatFormat(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{6926711 0xc00302ea60}))  {
// 	 := big.TestFloatFormat(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC big.TestFloatGobEncoding has: 
// func testFloatGobEncoding(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{6835071 0xc002ecaf60}))  {
// 	 := big.TestFloatGobEncoding(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC big.TestFloatInc has: 
// func testFloatInc(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{7068096 0xc003218c20}))  {
// 	 := big.TestFloatInc(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC big.TestFloatInt has: 
// func testFloatInt(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{7064851 0xc00320aa40}))  {
// 	 := big.TestFloatInt(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC big.TestFloatInt64 has: 
// func testFloatInt64(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{7053544 0xc0031ee9e0}))  {
// 	 := big.TestFloatInt64(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC big.TestFloatIsInt has: 
// func testFloatIsInt(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{7040855 0xc0031c2da0}))  {
// 	 := big.TestFloatIsInt(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC big.TestFloatJSONEncoding has: 
// func testFloatJSONEncoding(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{6837358 0xc002ed5860}))  {
// 	 := big.TestFloatJSONEncoding(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC big.TestFloatMantExp has: 
// func testFloatMantExp(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{7038249 0xc0031b54a0}))  {
// 	 := big.TestFloatMantExp(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC big.TestFloatMantExpAliasing has: 
// func testFloatMantExpAliasing(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{7038815 0xc0031b81e0}))  {
// 	 := big.TestFloatMantExpAliasing(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC big.TestFloatMinPrec has: 
// func testFloatMinPrec(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{7037072 0xc0031b1a40}))  {
// 	 := big.TestFloatMinPrec(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC big.TestFloatMul has: 
// func testFloatMul(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{7073677 0xc00322a820}))  {
// 	 := big.TestFloatMul(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC big.TestFloatMul64 has: 
// func testFloatMul64(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{7074765 0xc00322b920}))  {
// 	 := big.TestFloatMul64(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC big.TestFloatNeg has: 
// func testFloatNeg(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{7067634 0xc003218160}))  {
// 	 := big.TestFloatNeg(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC big.TestFloatPredicates has: 
// func testFloatPredicates(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{7040158 0xc0031b9e00}))  {
// 	 := big.TestFloatPredicates(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC big.TestFloatQuo has: 
// func testFloatQuo(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{7076438 0xc003235ea0}))  {
// 	 := big.TestFloatQuo(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC big.TestFloatQuoSmoke has: 
// func testFloatQuoSmoke(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{7077908 0xc00323b480}))  {
// 	 := big.TestFloatQuoSmoke(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC big.TestFloatRat has: 
// func testFloatRat(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{7065972 0xc00320bf40}))  {
// 	 := big.TestFloatRat(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC big.TestFloatRound has: 
// func testFloatRound(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{7043289 0xc0031cb3c0}))  {
// 	 := big.TestFloatRound(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC big.TestFloatRound24 has: 
// func testFloatRound24(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{7047626 0xc0031d3aa0}))  {
// 	 := big.TestFloatRound24(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC big.TestFloatScan has: 
// func testFloatScan(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{6932125 0xc00303e020}))  {
// 	 := big.TestFloatScan(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC big.TestFloatSetFloat64 has: 
// func testFloatSetFloat64(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{7049452 0xc0031d9dc0}))  {
// 	 := big.TestFloatSetFloat64(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC big.TestFloatSetFloat64String has: 
// func testFloatSetFloat64String(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{6913704 0xc0030029c0}))  {
// 	 := big.TestFloatSetFloat64String(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC big.TestFloatSetInf has: 
// func testFloatSetInf(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{7052247 0xc0031e6fe0}))  {
// 	 := big.TestFloatSetInf(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC big.TestFloatSetInt has: 
// func testFloatSetInt(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{7050715 0xc0031e3540}))  {
// 	 := big.TestFloatSetInt(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC big.TestFloatSetInt64 has: 
// func testFloatSetInt64(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{7048662 0xc0031d8ee0}))  {
// 	 := big.TestFloatSetInt64(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC big.TestFloatSetMantExp has: 
// func testFloatSetMantExp(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{7039132 0xc0031b8800}))  {
// 	 := big.TestFloatSetMantExp(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC big.TestFloatSetPrec has: 
// func testFloatSetPrec(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{7035994 0xc0031b04a0}))  {
// 	 := big.TestFloatSetPrec(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC big.TestFloatSetRat has: 
// func testFloatSetRat(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{7051440 0xc0031e6180}))  {
// 	 := big.TestFloatSetRat(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC big.TestFloatSetUint64 has: 
// func testFloatSetUint64(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{7047944 0xc0031d8140}))  {
// 	 := big.TestFloatSetUint64(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC big.TestFloatSign has: 
// func testFloatSign(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{7037523 0xc0031b4480}))  {
// 	 := big.TestFloatSign(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC big.TestFloatSqrt has: 
// func testFloatSqrt(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{6934056 0xc00304c2a0}))  {
// 	 := big.TestFloatSqrt(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC big.TestFloatSqrt64 has: 
// func testFloatSqrt64(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{6933786 0xc00303fc40}))  {
// 	 := big.TestFloatSqrt64(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC big.TestFloatSqrtSpecial has: 
// func testFloatSqrtSpecial(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{6937594 0xc00304de00}))  {
// 	 := big.TestFloatSqrtSpecial(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC big.TestFloatString has: 
// func testFloatString(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{6851699 0xc002f0f980}))  {
// 	 := big.TestFloatString(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC big.TestFloatText has: 
// func testFloatText(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{6921939 0xc00301dfc0}))  {
// 	 := big.TestFloatText(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC big.TestFloatUint64 has: 
// func testFloatUint64(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{7052716 0xc0031e7a60}))  {
// 	 := big.TestFloatUint64(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC big.TestFloatZeroValue has: 
// func testFloatZeroValue(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{7034335 0xc003195a20}))  {
// 	 := big.TestFloatZeroValue(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC big.TestFormat has: 
// func testFormat(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{6791595 0xc002e2a240}))  {
// 	 := big.TestFormat(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC big.TestFromBits has: 
// func testFromBits(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{6828917 0xc002eabb20}))  {
// 	 := big.TestFromBits(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC big.TestFunNN has: 
// func testFunNN(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{6808610 0xc002e65ae0}))  {
// 	 := big.TestFunNN(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC big.TestFunVV has: 
// func testFunVV(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{6775456 0xc002ddf920}))  {
// 	 := big.TestFunVV(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC big.TestFunVW has: 
// func testFunVW(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{6778507 0xc002df2d00}))  {
// 	 := big.TestFunVW(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC big.TestFunVWW has: 
// func testFunVWW(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{6781878 0xc002e00720}))  {
// 	 := big.TestFunVWW(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC big.TestFunWW has: 
// func testFunWW(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{6774274 0xc002dd94c0}))  {
// 	 := big.TestFunWW(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC big.TestGcd has: 
// func testGcd(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{6751433 0xc002d71ac0}))  {
// 	 := big.TestGcd(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC big.TestGetString has: 
// func testGetString(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{6785942 0xc002e11ec0}))  {
// 	 := big.TestGetString(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC big.TestGobEncodingNilIntInSlice has: 
// func testGobEncodingNilIntInSlice(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{6995215 0xc00310f2e0}))  {
// 	 := big.TestGobEncodingNilIntInSlice(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC big.TestGobEncodingNilRatInSlice has: 
// func testGobEncodingNilRatInSlice(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{6842657 0xc002eec7c0}))  {
// 	 := big.TestGobEncodingNilRatInSlice(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC big.TestHilbert has: 
// func testHilbert(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{6715922 0xc002cf2b60}))  {
// 	 := big.TestHilbert(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC big.TestInt64 has: 
// func testInt64(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{6757045 0xc002d8aca0}))  {
// 	 := big.TestInt64(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC big.TestIntGobEncoding has: 
// func testIntGobEncoding(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{6994385 0xc00310e460}))  {
// 	 := big.TestIntGobEncoding(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC big.TestIntJSONEncoding has: 
// func testIntJSONEncoding(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{6995741 0xc00310fd80}))  {
// 	 := big.TestIntJSONEncoding(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC big.TestIntText has: 
// func testIntText(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{6784951 0xc002e108e0}))  {
// 	 := big.TestIntText(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC big.TestIntXMLEncoding has: 
// func testIntXMLEncoding(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{6996298 0xc003116900}))  {
// 	 := big.TestIntXMLEncoding(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC big.TestIsFinite has: 
// func testIsFinite(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{6912952 0xc002fffe40}))  {
// 	 := big.TestIsFinite(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC big.TestIsInt has: 
// func testIsInt(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{6899164 0xc002fd0400}))  {
// 	 := big.TestIsInt(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC big.TestIssue20490 has: 
// func testIssue20490(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{7072912 0xc0032278e0}))  {
// 	 := big.TestIssue20490(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC big.TestIssue22830 has: 
// func testIssue22830(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{6772393 0xc002dd2680}))  {
// 	 := big.TestIssue22830(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC big.TestIssue2379 has: 
// func testIssue2379(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{6904541 0xc002fdec00}))  {
// 	 := big.TestIssue2379(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC big.TestIssue2607 has: 
// func testIssue2607(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{6771457 0xc002dcb1a0}))  {
// 	 := big.TestIssue2607(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC big.TestIssue3521 has: 
// func testIssue3521(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{6905339 0xc002fdff40}))  {
// 	 := big.TestIssue3521(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC big.TestIssue6866 has: 
// func testIssue6866(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{7075608 0xc003234b80}))  {
// 	 := big.TestIssue6866(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC big.TestIssue820 has: 
// func testIssue820(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{6903695 0xc002fdb400}))  {
// 	 := big.TestIssue820(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC big.TestJacobi has: 
// func testJacobi(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{6770542 0xc002dc5a40}))  {
// 	 := big.TestJacobi(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC big.TestJacobiPanic has: 
// func testJacobiPanic(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{6771151 0xc002dcace0}))  {
// 	 := big.TestJacobiPanic(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC big.TestLsh has: 
// func testLsh(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{6754188 0xc002d7d5c0}))  {
// 	 := big.TestLsh(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC big.TestLshRsh has: 
// func testLshRsh(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{6754905 0xc002d82740}))  {
// 	 := big.TestLshRsh(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC big.TestLshSelf has: 
// func testLshSelf(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{6754559 0xc002d7dea0}))  {
// 	 := big.TestLshSelf(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC big.TestLucasPseudoprimes has: 
// func testLucasPseudoprimes(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{6805023 0xc002e56a40}))  {
// 	 := big.TestLucasPseudoprimes(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC big.TestMaxBase has: 
// func testMaxBase(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{6997086 0xc003117680}))  {
// 	 := big.TestMaxBase(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC big.TestMillerRabinPseudoprimes has: 
// func testMillerRabinPseudoprimes(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{6804688 0xc002e56480}))  {
// 	 := big.TestMillerRabinPseudoprimes(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC big.TestModInverse has: 
// func testModInverse(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{6767028 0xc002db8b40}))  {
// 	 := big.TestModInverse(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC big.TestModSqrt has: 
// func testModSqrt(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{6769368 0xc002dc4060}))  {
// 	 := big.TestModSqrt(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC big.TestModW has: 
// func testModW(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{6813121 0xc002e7e0c0}))  {
// 	 := big.TestModW(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC big.TestMontgomery has: 
// func testMontgomery(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{6815661 0xc002e7ec40}))  {
// 	 := big.TestMontgomery(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC big.TestMul has: 
// func testMul(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{6726458 0xc002d329c0}))  {
// 	 := big.TestMul(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC big.TestMulAddWWW has: 
// func testMulAddWWW(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{6782962 0xc002e01b80}))  {
// 	 := big.TestMulAddWWW(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC big.TestMulBits has: 
// func testMulBits(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{6825557 0xc002ea1960}))  {
// 	 := big.TestMulBits(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC big.TestMulRangeN has: 
// func testMulRangeN(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{6809641 0xc002e69280}))  {
// 	 := big.TestMulRangeN(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC big.TestMulRangeZ has: 
// func testMulRangeZ(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{6727337 0xc002d33980}))  {
// 	 := big.TestMulRangeZ(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC big.TestMulUnbalanced has: 
// func testMulUnbalanced(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{6810275 0xc002e69c80}))  {
// 	 := big.TestMulUnbalanced(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC big.TestMulWW has: 
// func testMulWW(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{6782345 0xc002e011e0}))  {
// 	 := big.TestMulWW(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC big.TestNLZ has: 
// func testNLZ(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{6810870 0xc002e6e880}))  {
// 	 := big.TestNLZ(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC big.TestNormBits has: 
// func testNormBits(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{6826556 0xc002ea70e0}))  {
// 	 := big.TestNormBits(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC big.TestNot has: 
// func testNot(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{6765980 0xc002db3ee0}))  {
// 	 := big.TestNot(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC big.TestProbablyPrime has: 
// func testProbablyPrime(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{6803033 0xc002e46600}))  {
// 	 := big.TestProbablyPrime(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC big.TestProdZZ has: 
// func testProdZZ(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{6725397 0xc002d310c0}))  {
// 	 := big.TestProdZZ(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC big.TestQuo has: 
// func testQuo(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{6732528 0xc002d4ea20}))  {
// 	 := big.TestQuo(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC big.TestQuoStepD6 has: 
// func testQuoStepD6(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{6733041 0xc002d4f7c0}))  {
// 	 := big.TestQuoStepD6(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC big.TestRatAbs has: 
// func testRatAbs(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{6899438 0xc002fd0a80}))  {
// 	 := big.TestRatAbs(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC big.TestRatBin has: 
// func testRatBin(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{6902817 0xc002fd5a20}))  {
// 	 := big.TestRatBin(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC big.TestRatCmp has: 
// func testRatCmp(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{6898906 0xc002fc7d80}))  {
// 	 := big.TestRatCmp(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC big.TestRatGobEncoding has: 
// func testRatGobEncoding(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{6841901 0xc002ee5ac0}))  {
// 	 := big.TestRatGobEncoding(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC big.TestRatInv has: 
// func testRatInv(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{6900041 0xc002fd19e0}))  {
// 	 := big.TestRatInv(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC big.TestRatJSONEncoding has: 
// func testRatJSONEncoding(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{6843702 0xc002eed4c0}))  {
// 	 := big.TestRatJSONEncoding(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC big.TestRatNeg has: 
// func testRatNeg(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{6899759 0xc002fd12c0}))  {
// 	 := big.TestRatNeg(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC big.TestRatScan has: 
// func testRatScan(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{6850782 0xc002f0e440}))  {
// 	 := big.TestRatScan(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC big.TestRatSetFrac64Rat has: 
// func testRatSetFrac64Rat(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{6904320 0xc002fde6a0}))  {
// 	 := big.TestRatSetFrac64Rat(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC big.TestRatSetString has: 
// func testRatSetString(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{6850250 0xc002f059c0}))  {
// 	 := big.TestRatSetString(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC big.TestRatSign has: 
// func testRatSign(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{6898170 0xc002fc70e0}))  {
// 	 := big.TestRatSign(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC big.TestRatXMLEncoding has: 
// func testRatXMLEncoding(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{6844232 0xc002eedf60}))  {
// 	 := big.TestRatXMLEncoding(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC big.TestRsh has: 
// func testRsh(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{6752846 0xc002d75a60}))  {
// 	 := big.TestRsh(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC big.TestRshSelf has: 
// func testRshSelf(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{6753217 0xc002d7c340}))  {
// 	 := big.TestRshSelf(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC big.TestScan has: 
// func testScan(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{6792518 0xc002e2b6e0}))  {
// 	 := big.TestScan(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC big.TestScanBase has: 
// func testScanBase(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{7000933 0xc00312ca80}))  {
// 	 := big.TestScanBase(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC big.TestScanPi has: 
// func testScanPi(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{7007679 0xc0031302e0}))  {
// 	 := big.TestScanPi(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC big.TestScanPiParallel has: 
// func testScanPiParallel(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{7007925 0xc0031308c0}))  {
// 	 := big.TestScanPiParallel(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC big.TestSet has: 
// func testSet(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{6808280 0xc002e650e0}))  {
// 	 := big.TestSet(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC big.TestSetBytes has: 
// func testSetBytes(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{6731260 0xc002d45560}))  {
// 	 := big.TestSetBytes(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC big.TestSetFloat64NonFinite has: 
// func testSetFloat64NonFinite(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{6908893 0xc002ff3c80}))  {
// 	 := big.TestSetFloat64NonFinite(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC big.TestSetString has: 
// func testSetString(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{6786492 0xc002e18ae0}))  {
// 	 := big.TestSetString(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC big.TestSetZ has: 
// func testSetZ(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{6724229 0xc002d26de0}))  {
// 	 := big.TestSetZ(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC big.TestShiftLeft has: 
// func testShiftLeft(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{6811305 0xc002e6f300}))  {
// 	 := big.TestShiftLeft(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC big.TestShiftRight has: 
// func testShiftRight(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{6811793 0xc002e6ffe0}))  {
// 	 := big.TestShiftRight(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC big.TestSignZ has: 
// func testSignZ(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{6724041 0xc002d268a0}))  {
// 	 := big.TestSignZ(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC big.TestSqr has: 
// func testSqr(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{6821690 0xc002e966e0}))  {
// 	 := big.TestSqr(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC big.TestSqrt has: 
// func testSqrt(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{6771584 0xc002dcb4c0}))  {
// 	 := big.TestSqrt(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC big.TestSticky has: 
// func testSticky(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{6820987 0xc002e95660}))  {
// 	 := big.TestSticky(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC big.TestString has: 
// func testString(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{6998237 0xc003122ca0}))  {
// 	 := big.TestString(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC big.TestStringPowers has: 
// func testStringPowers(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{7010528 0xc00313e5c0}))  {
// 	 := big.TestStringPowers(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC big.TestSumZZ has: 
// func testSumZZ(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{6724953 0xc002d302c0}))  {
// 	 := big.TestSumZZ(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC big.TestUint64 has: 
// func testUint64(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{6757925 0xc002d8bb20}))  {
// 	 := big.TestUint64(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC big.TestZeroRat has: 
// func testZeroRat(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{6897441 0xc002fbdfe0}))  {
// 	 := big.TestZeroRat(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC big_test.ExampleFloat_Add has: 
// func exampleFloat_Add()  {
// 	 := big_test.ExampleFloat_Add()
// 	...ABEND: TODO...
// }
// 
GO FUNC big_test.ExampleFloat_Cmp has: 
// func exampleFloat_Cmp()  {
// 	 := big_test.ExampleFloat_Cmp()
// 	...ABEND: TODO...
// }
// 
GO FUNC big_test.ExampleFloat_Scan has: 
// func exampleFloat_Scan()  {
// 	 := big_test.ExampleFloat_Scan()
// 	...ABEND: TODO...
// }
// 
GO FUNC big_test.ExampleFloat_shift has: 
// func exampleFloat_shift()  {
// 	 := big_test.ExampleFloat_shift()
// 	...ABEND: TODO...
// }
// 
GO FUNC big_test.ExampleInt_Scan has: 
// func exampleInt_Scan()  {
// 	 := big_test.ExampleInt_Scan()
// 	...ABEND: TODO...
// }
// 
GO FUNC big_test.ExampleInt_SetString has: 
// func exampleInt_SetString()  {
// 	 := big_test.ExampleInt_SetString()
// 	...ABEND: TODO...
// }
// 
GO FUNC big_test.ExampleRat_Scan has: 
// func exampleRat_Scan()  {
// 	 := big_test.ExampleRat_Scan()
// 	...ABEND: TODO...
// }
// 
GO FUNC big_test.ExampleRat_SetString has: 
// func exampleRat_SetString()  {
// 	 := big_test.ExampleRat_SetString()
// 	...ABEND: TODO...
// }
// 
GO FUNC big_test.ExampleRoundingMode has: 
// func exampleRoundingMode()  {
// 	 := big_test.ExampleRoundingMode()
// 	...ABEND: TODO...
// }
// 
GO FUNC big_test.Example_eConvergents has: 
// func example_eConvergents()  {
// 	 := big_test.Example_eConvergents()
// 	...ABEND: TODO...
// }
// 
GO FUNC big_test.Example_fibonacci has: 
// func example_fibonacci()  {
// 	 := big_test.Example_fibonacci()
// 	...ABEND: TODO...
// }
// 
GO FUNC big_test.Example_sqrt2 has: 
// func example_sqrt2()  {
// 	 := big_test.Example_sqrt2()
// 	...ABEND: TODO...
// }
// 
GO FUNC binary.BenchmarkLittleEndianPutUint16 has: 
// func benchmarkLittleEndianPutUint16(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{3303646 0xc0014effa0}))  {
// 	 := binary.BenchmarkLittleEndianPutUint16(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC binary.BenchmarkLittleEndianPutUint32 has: 
// func benchmarkLittleEndianPutUint32(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{3303794 0xc0014f2300}))  {
// 	 := binary.BenchmarkLittleEndianPutUint32(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC binary.BenchmarkLittleEndianPutUint64 has: 
// func benchmarkLittleEndianPutUint64(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{3303942 0xc0014f2660}))  {
// 	 := binary.BenchmarkLittleEndianPutUint64(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC binary.BenchmarkPutUint16 has: 
// func benchmarkPutUint16(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{3303236 0xc0014ef580}))  {
// 	 := binary.BenchmarkPutUint16(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC binary.BenchmarkPutUint32 has: 
// func benchmarkPutUint32(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{3303369 0xc0014ef8e0}))  {
// 	 := binary.BenchmarkPutUint32(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC binary.BenchmarkPutUint64 has: 
// func benchmarkPutUint64(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{3303502 0xc0014efc40}))  {
// 	 := binary.BenchmarkPutUint64(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC binary.BenchmarkPutUvarint32 has: 
// func benchmarkPutUvarint32(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{3307174 0xc0015c6a60}))  {
// 	 := binary.BenchmarkPutUvarint32(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC binary.BenchmarkPutUvarint64 has: 
// func benchmarkPutUvarint64(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{3307382 0xc0015c6f40}))  {
// 	 := binary.BenchmarkPutUvarint64(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC binary.BenchmarkReadInts has: 
// func benchmarkReadInts(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{3301610 0xc001448a40}))  {
// 	 := binary.BenchmarkReadInts(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC binary.BenchmarkReadSlice1000Int32s has: 
// func benchmarkReadSlice1000Int32s(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{3300951 0xc001445a40}))  {
// 	 := binary.BenchmarkReadSlice1000Int32s(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC binary.BenchmarkReadStruct has: 
// func benchmarkReadStruct(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{3301212 0xc001448080}))  {
// 	 := binary.BenchmarkReadStruct(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC binary.BenchmarkWriteInts has: 
// func benchmarkWriteInts(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{3302400 0xc001449f80}))  {
// 	 := binary.BenchmarkWriteInts(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC binary.BenchmarkWriteSlice1000Int32s has: 
// func benchmarkWriteSlice1000Int32s(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{3302987 0xc0014eef20}))  {
// 	 := binary.BenchmarkWriteSlice1000Int32s(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC binary.TestBigEndianPtrWrite has: 
// func testBigEndianPtrWrite(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{3294458 0xc0012b4080}))  {
// 	 := binary.TestBigEndianPtrWrite(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC binary.TestBigEndianRead has: 
// func testBigEndianRead(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{3294301 0xc0012add40}))  {
// 	 := binary.TestBigEndianRead(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC binary.TestBigEndianWrite has: 
// func testBigEndianWrite(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{3294378 0xc0012adee0}))  {
// 	 := binary.TestBigEndianWrite(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC binary.TestBlankFields has: 
// func testBlankFields(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{3297531 0xc001440080}))  {
// 	 := binary.TestBlankFields(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC binary.TestBufferTooSmall has: 
// func testBufferTooSmall(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{3305969 0xc0015c1140}))  {
// 	 := binary.TestBufferTooSmall(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC binary.TestConstants has: 
// func testConstants(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{3304480 0xc0014f3020}))  {
// 	 := binary.TestConstants(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC binary.TestEarlyBoundsChecks has: 
// func testEarlyBoundsChecks(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{3300437 0xc0014453a0}))  {
// 	 := binary.TestEarlyBoundsChecks(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC binary.TestLittleEndianPtrWrite has: 
// func testLittleEndianPtrWrite(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{3294220 0xc0012adb80}))  {
// 	 := binary.TestLittleEndianPtrWrite(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC binary.TestLittleEndianRead has: 
// func testLittleEndianRead(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{3294045 0xc0012ad840}))  {
// 	 := binary.TestLittleEndianRead(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC binary.TestLittleEndianWrite has: 
// func testLittleEndianWrite(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{3294131 0xc0012ad9e0}))  {
// 	 := binary.TestLittleEndianWrite(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC binary.TestNonCanonicalZero has: 
// func testNonCanonicalZero(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{3306975 0xc0015c6660}))  {
// 	 := binary.TestNonCanonicalZero(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC binary.TestOverflow has: 
// func testOverflow(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{3306708 0xc0015c6040}))  {
// 	 := binary.TestOverflow(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC binary.TestReadBool has: 
// func testReadBool(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{3294867 0xc0012b49a0}))  {
// 	 := binary.TestReadBool(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC binary.TestReadBoolSlice has: 
// func testReadBoolSlice(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{3295301 0xc0012b52c0}))  {
// 	 := binary.TestReadBoolSlice(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC binary.TestReadErrorMsg has: 
// func testReadErrorMsg(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{3298915 0xc0014418a0}))  {
// 	 := binary.TestReadErrorMsg(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC binary.TestReadSlice has: 
// func testReadSlice(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{3294529 0xc0012b4240}))  {
// 	 := binary.TestReadSlice(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC binary.TestReadTruncated has: 
// func testReadTruncated(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{3299365 0xc001444180}))  {
// 	 := binary.TestReadTruncated(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC binary.TestSliceRoundTrip has: 
// func testSliceRoundTrip(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{3295774 0xc0012b5b60}))  {
// 	 := binary.TestSliceRoundTrip(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC binary.TestUnexportedRead has: 
// func testUnexportedRead(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{3298626 0xc0014412e0}))  {
// 	 := binary.TestUnexportedRead(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC binary.TestUvarint has: 
// func testUvarint(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{3305804 0xc0015c0da0}))  {
// 	 := binary.TestUvarint(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC binary.TestVarint has: 
// func testVarint(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{3305617 0xc0015c08a0}))  {
// 	 := binary.TestVarint(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC binary.TestWriteSlice has: 
// func testWriteSlice(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{3294705 0xc0012b4600}))  {
// 	 := binary.TestWriteSlice(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC binary.TestWriteT has: 
// func testWriteT(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{3296615 0xc0012b6e00}))  {
// 	 := binary.TestWriteT(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC binary_test.ExampleByteOrder_get has: 
// func exampleByteOrder_get()  {
// 	 := binary_test.ExampleByteOrder_get()
// 	...ABEND: TODO...
// }
// 
GO FUNC binary_test.ExampleByteOrder_put has: 
// func exampleByteOrder_put()  {
// 	 := binary_test.ExampleByteOrder_put()
// 	...ABEND: TODO...
// }
// 
GO FUNC binary_test.ExamplePutUvarint has: 
// func examplePutUvarint()  {
// 	 := binary_test.ExamplePutUvarint()
// 	...ABEND: TODO...
// }
// 
GO FUNC binary_test.ExamplePutVarint has: 
// func examplePutVarint()  {
// 	 := binary_test.ExamplePutVarint()
// 	...ABEND: TODO...
// }
// 
GO FUNC binary_test.ExampleRead has: 
// func exampleRead()  {
// 	 := binary_test.ExampleRead()
// 	...ABEND: TODO...
// }
// 
GO FUNC binary_test.ExampleRead_multi has: 
// func exampleRead_multi()  {
// 	 := binary_test.ExampleRead_multi()
// 	...ABEND: TODO...
// }
// 
GO FUNC binary_test.ExampleUvarint has: 
// func exampleUvarint()  {
// 	 := binary_test.ExampleUvarint()
// 	...ABEND: TODO...
// }
// 
GO FUNC binary_test.ExampleVarint has: 
// func exampleVarint()  {
// 	 := binary_test.ExampleVarint()
// 	...ABEND: TODO...
// }
// 
GO FUNC binary_test.ExampleWrite has: 
// func exampleWrite()  {
// 	 := binary_test.ExampleWrite()
// 	...ABEND: TODO...
// }
// 
GO FUNC binary_test.ExampleWrite_multi has: 
// func exampleWrite_multi()  {
// 	 := binary_test.ExampleWrite_multi()
// 	...ABEND: TODO...
// }
// 
GO FUNC bits_test.BenchmarkLeadingZeros has: 
// func benchmarkLeadingZeros(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{7139459 0xc0033280e0}))  {
// 	 := bits_test.BenchmarkLeadingZeros(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC bits_test.BenchmarkLeadingZeros16 has: 
// func benchmarkLeadingZeros16(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{7139771 0xc0033287e0}))  {
// 	 := bits_test.BenchmarkLeadingZeros16(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC bits_test.BenchmarkLeadingZeros32 has: 
// func benchmarkLeadingZeros32(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{7139928 0xc003328b60}))  {
// 	 := bits_test.BenchmarkLeadingZeros32(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC bits_test.BenchmarkLeadingZeros64 has: 
// func benchmarkLeadingZeros64(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{7140085 0xc003328ee0}))  {
// 	 := bits_test.BenchmarkLeadingZeros64(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC bits_test.BenchmarkLeadingZeros8 has: 
// func benchmarkLeadingZeros8(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{7139617 0xc003328460}))  {
// 	 := bits_test.BenchmarkLeadingZeros8(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC bits_test.BenchmarkOnesCount has: 
// func benchmarkOnesCount(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{7143556 0xc003339000}))  {
// 	 := bits_test.BenchmarkOnesCount(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC bits_test.BenchmarkOnesCount16 has: 
// func benchmarkOnesCount16(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{7143815 0xc003339600}))  {
// 	 := bits_test.BenchmarkOnesCount16(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC bits_test.BenchmarkOnesCount32 has: 
// func benchmarkOnesCount32(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{7143948 0xc003339900}))  {
// 	 := bits_test.BenchmarkOnesCount32(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC bits_test.BenchmarkOnesCount64 has: 
// func benchmarkOnesCount64(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{7144081 0xc003339c00}))  {
// 	 := bits_test.BenchmarkOnesCount64(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC bits_test.BenchmarkOnesCount8 has: 
// func benchmarkOnesCount8(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{7143684 0xc003339300}))  {
// 	 := bits_test.BenchmarkOnesCount8(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC bits_test.BenchmarkReverse has: 
// func benchmarkReverse(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{7148888 0xc00334f7c0}))  {
// 	 := bits_test.BenchmarkReverse(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC bits_test.BenchmarkReverse16 has: 
// func benchmarkReverse16(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{7149144 0xc00334fe00}))  {
// 	 := bits_test.BenchmarkReverse16(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC bits_test.BenchmarkReverse32 has: 
// func benchmarkReverse32(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{7149277 0xc003358120}))  {
// 	 := bits_test.BenchmarkReverse32(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC bits_test.BenchmarkReverse64 has: 
// func benchmarkReverse64(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{7149410 0xc003358440}))  {
// 	 := bits_test.BenchmarkReverse64(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC bits_test.BenchmarkReverse8 has: 
// func benchmarkReverse8(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{7149014 0xc00334fae0}))  {
// 	 := bits_test.BenchmarkReverse8(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC bits_test.BenchmarkReverseBytes has: 
// func benchmarkReverseBytes(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{7150965 0xc003359e40}))  {
// 	 := bits_test.BenchmarkReverseBytes(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC bits_test.BenchmarkReverseBytes16 has: 
// func benchmarkReverseBytes16(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{7151102 0xc003362160}))  {
// 	 := bits_test.BenchmarkReverseBytes16(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC bits_test.BenchmarkReverseBytes32 has: 
// func benchmarkReverseBytes32(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{7151245 0xc003362480}))  {
// 	 := bits_test.BenchmarkReverseBytes32(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC bits_test.BenchmarkReverseBytes64 has: 
// func benchmarkReverseBytes64(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{7151388 0xc0033627a0}))  {
// 	 := bits_test.BenchmarkReverseBytes64(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC bits_test.BenchmarkRotateLeft has: 
// func benchmarkRotateLeft(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{7146435 0xc003346620}))  {
// 	 := bits_test.BenchmarkRotateLeft(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC bits_test.BenchmarkRotateLeft16 has: 
// func benchmarkRotateLeft16(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{7146717 0xc003346ce0}))  {
// 	 := bits_test.BenchmarkRotateLeft16(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC bits_test.BenchmarkRotateLeft32 has: 
// func benchmarkRotateLeft32(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{7146863 0xc003347040}))  {
// 	 := bits_test.BenchmarkRotateLeft32(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC bits_test.BenchmarkRotateLeft64 has: 
// func benchmarkRotateLeft64(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{7147009 0xc0033473a0}))  {
// 	 := bits_test.BenchmarkRotateLeft64(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC bits_test.BenchmarkRotateLeft8 has: 
// func benchmarkRotateLeft8(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{7146574 0xc003346980}))  {
// 	 := bits_test.BenchmarkRotateLeft8(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC bits_test.BenchmarkTrailingZeros has: 
// func benchmarkTrailingZeros(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{7141526 0xc00332e680}))  {
// 	 := bits_test.BenchmarkTrailingZeros(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC bits_test.BenchmarkTrailingZeros16 has: 
// func benchmarkTrailingZeros16(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{7141842 0xc00332ed80}))  {
// 	 := bits_test.BenchmarkTrailingZeros16(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC bits_test.BenchmarkTrailingZeros32 has: 
// func benchmarkTrailingZeros32(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{7142001 0xc00332f100}))  {
// 	 := bits_test.BenchmarkTrailingZeros32(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC bits_test.BenchmarkTrailingZeros64 has: 
// func benchmarkTrailingZeros64(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{7142160 0xc00332f480}))  {
// 	 := bits_test.BenchmarkTrailingZeros64(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC bits_test.BenchmarkTrailingZeros8 has: 
// func benchmarkTrailingZeros8(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{7141686 0xc00332ea00}))  {
// 	 := bits_test.BenchmarkTrailingZeros8(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC bits_test.ExampleLeadingZeros16 has: 
// func exampleLeadingZeros16()  {
// 	 := bits_test.ExampleLeadingZeros16()
// 	...ABEND: TODO...
// }
// 
GO FUNC bits_test.ExampleLeadingZeros32 has: 
// func exampleLeadingZeros32()  {
// 	 := bits_test.ExampleLeadingZeros32()
// 	...ABEND: TODO...
// }
// 
GO FUNC bits_test.ExampleLeadingZeros64 has: 
// func exampleLeadingZeros64()  {
// 	 := bits_test.ExampleLeadingZeros64()
// 	...ABEND: TODO...
// }
// 
GO FUNC bits_test.ExampleLeadingZeros8 has: 
// func exampleLeadingZeros8()  {
// 	 := bits_test.ExampleLeadingZeros8()
// 	...ABEND: TODO...
// }
// 
GO FUNC bits_test.ExampleLen16 has: 
// func exampleLen16()  {
// 	 := bits_test.ExampleLen16()
// 	...ABEND: TODO...
// }
// 
GO FUNC bits_test.ExampleLen32 has: 
// func exampleLen32()  {
// 	 := bits_test.ExampleLen32()
// 	...ABEND: TODO...
// }
// 
GO FUNC bits_test.ExampleLen64 has: 
// func exampleLen64()  {
// 	 := bits_test.ExampleLen64()
// 	...ABEND: TODO...
// }
// 
GO FUNC bits_test.ExampleLen8 has: 
// func exampleLen8()  {
// 	 := bits_test.ExampleLen8()
// 	...ABEND: TODO...
// }
// 
GO FUNC bits_test.ExampleOnesCount16 has: 
// func exampleOnesCount16()  {
// 	 := bits_test.ExampleOnesCount16()
// 	...ABEND: TODO...
// }
// 
GO FUNC bits_test.ExampleOnesCount32 has: 
// func exampleOnesCount32()  {
// 	 := bits_test.ExampleOnesCount32()
// 	...ABEND: TODO...
// }
// 
GO FUNC bits_test.ExampleOnesCount64 has: 
// func exampleOnesCount64()  {
// 	 := bits_test.ExampleOnesCount64()
// 	...ABEND: TODO...
// }
// 
GO FUNC bits_test.ExampleOnesCount8 has: 
// func exampleOnesCount8()  {
// 	 := bits_test.ExampleOnesCount8()
// 	...ABEND: TODO...
// }
// 
GO FUNC bits_test.ExampleReverse16 has: 
// func exampleReverse16()  {
// 	 := bits_test.ExampleReverse16()
// 	...ABEND: TODO...
// }
// 
GO FUNC bits_test.ExampleReverse32 has: 
// func exampleReverse32()  {
// 	 := bits_test.ExampleReverse32()
// 	...ABEND: TODO...
// }
// 
GO FUNC bits_test.ExampleReverse64 has: 
// func exampleReverse64()  {
// 	 := bits_test.ExampleReverse64()
// 	...ABEND: TODO...
// }
// 
GO FUNC bits_test.ExampleReverse8 has: 
// func exampleReverse8()  {
// 	 := bits_test.ExampleReverse8()
// 	...ABEND: TODO...
// }
// 
GO FUNC bits_test.ExampleReverseBytes16 has: 
// func exampleReverseBytes16()  {
// 	 := bits_test.ExampleReverseBytes16()
// 	...ABEND: TODO...
// }
// 
GO FUNC bits_test.ExampleReverseBytes32 has: 
// func exampleReverseBytes32()  {
// 	 := bits_test.ExampleReverseBytes32()
// 	...ABEND: TODO...
// }
// 
GO FUNC bits_test.ExampleReverseBytes64 has: 
// func exampleReverseBytes64()  {
// 	 := bits_test.ExampleReverseBytes64()
// 	...ABEND: TODO...
// }
// 
GO FUNC bits_test.ExampleRotateLeft16 has: 
// func exampleRotateLeft16()  {
// 	 := bits_test.ExampleRotateLeft16()
// 	...ABEND: TODO...
// }
// 
GO FUNC bits_test.ExampleRotateLeft32 has: 
// func exampleRotateLeft32()  {
// 	 := bits_test.ExampleRotateLeft32()
// 	...ABEND: TODO...
// }
// 
GO FUNC bits_test.ExampleRotateLeft64 has: 
// func exampleRotateLeft64()  {
// 	 := bits_test.ExampleRotateLeft64()
// 	...ABEND: TODO...
// }
// 
GO FUNC bits_test.ExampleRotateLeft8 has: 
// func exampleRotateLeft8()  {
// 	 := bits_test.ExampleRotateLeft8()
// 	...ABEND: TODO...
// }
// 
GO FUNC bits_test.ExampleTrailingZeros16 has: 
// func exampleTrailingZeros16()  {
// 	 := bits_test.ExampleTrailingZeros16()
// 	...ABEND: TODO...
// }
// 
GO FUNC bits_test.ExampleTrailingZeros32 has: 
// func exampleTrailingZeros32()  {
// 	 := bits_test.ExampleTrailingZeros32()
// 	...ABEND: TODO...
// }
// 
GO FUNC bits_test.ExampleTrailingZeros64 has: 
// func exampleTrailingZeros64()  {
// 	 := bits_test.ExampleTrailingZeros64()
// 	...ABEND: TODO...
// }
// 
GO FUNC bits_test.ExampleTrailingZeros8 has: 
// func exampleTrailingZeros8()  {
// 	 := bits_test.ExampleTrailingZeros8()
// 	...ABEND: TODO...
// }
// 
GO FUNC bits_test.TestLeadingZeros has: 
// func testLeadingZeros(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{7137755 0xc003314820}))  {
// 	 := bits_test.TestLeadingZeros(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC bits_test.TestLen has: 
// func testLen(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{7151515 0xc003362ac0}))  {
// 	 := bits_test.TestLen(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC bits_test.TestOnesCount has: 
// func testOnesCount(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{7142308 0xc00332f800}))  {
// 	 := bits_test.TestOnesCount(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC bits_test.TestReverse has: 
// func testReverse(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{7147145 0xc003347700}))  {
// 	 := bits_test.TestReverse(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC bits_test.TestReverseBytes has: 
// func testReverseBytes(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{7149541 0xc003358760}))  {
// 	 := bits_test.TestReverseBytes(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC bits_test.TestRotateLeft has: 
// func testRotateLeft(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{7144208 0xc003339f00}))  {
// 	 := bits_test.TestRotateLeft(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC bits_test.TestTrailingZeros has: 
// func testTrailingZeros(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{7140236 0xc003329260}))  {
// 	 := bits_test.TestTrailingZeros(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC bits_test.TestUintSize has: 
// func testUintSize(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{7137593 0xc0033144a0}))  {
// 	 := bits_test.TestUintSize(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC bufio_test.BenchmarkReaderCopyNoWriteTo has: 
// func benchmarkReaderCopyNoWriteTo(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{416402 0xc000348980}))  {
// 	 := bufio_test.BenchmarkReaderCopyNoWriteTo(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC bufio_test.BenchmarkReaderCopyOptimal has: 
// func benchmarkReaderCopyOptimal(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{415653 0xc0001d9bc0}))  {
// 	 := bufio_test.BenchmarkReaderCopyOptimal(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC bufio_test.BenchmarkReaderCopyUnoptimal has: 
// func benchmarkReaderCopyUnoptimal(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{416011 0xc000348280}))  {
// 	 := bufio_test.BenchmarkReaderCopyUnoptimal(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC bufio_test.BenchmarkReaderEmpty has: 
// func benchmarkReaderEmpty(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{418259 0xc00034d3c0}))  {
// 	 := bufio_test.BenchmarkReaderEmpty(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC bufio_test.BenchmarkReaderWriteToOptimal has: 
// func benchmarkReaderWriteToOptimal(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{416732 0xc0003492c0}))  {
// 	 := bufio_test.BenchmarkReaderWriteToOptimal(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC bufio_test.BenchmarkWriterCopyNoReadFrom has: 
// func benchmarkWriterCopyNoReadFrom(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{417938 0xc00034cb60}))  {
// 	 := bufio_test.BenchmarkWriterCopyNoReadFrom(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC bufio_test.BenchmarkWriterCopyOptimal has: 
// func benchmarkWriterCopyOptimal(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{417266 0xc000349de0}))  {
// 	 := bufio_test.BenchmarkWriterCopyOptimal(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC bufio_test.BenchmarkWriterCopyUnoptimal has: 
// func benchmarkWriterCopyUnoptimal(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{417626 0xc00034c4a0}))  {
// 	 := bufio_test.BenchmarkWriterCopyUnoptimal(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC bufio_test.BenchmarkWriterEmpty has: 
// func benchmarkWriterEmpty(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{418568 0xc0003e0060}))  {
// 	 := bufio_test.BenchmarkWriterEmpty(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC bufio_test.BenchmarkWriterFlush has: 
// func benchmarkWriterFlush(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{418892 0xc000367520}))  {
// 	 := bufio_test.BenchmarkWriterFlush(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC bufio_test.ExampleScanner_custom has: 
// func exampleScanner_custom()  {
// 	 := bufio_test.ExampleScanner_custom()
// 	...ABEND: TODO...
// }
// 
GO FUNC bufio_test.ExampleScanner_emptyFinalToken has: 
// func exampleScanner_emptyFinalToken()  {
// 	 := bufio_test.ExampleScanner_emptyFinalToken()
// 	...ABEND: TODO...
// }
// 
GO FUNC bufio_test.ExampleScanner_lines has: 
// func exampleScanner_lines()  {
// 	 := bufio_test.ExampleScanner_lines()
// 	...ABEND: TODO...
// }
// 
GO FUNC bufio_test.ExampleScanner_words has: 
// func exampleScanner_words()  {
// 	 := bufio_test.ExampleScanner_words()
// 	...ABEND: TODO...
// }
// 
GO FUNC bufio_test.ExampleWriter has: 
// func exampleWriter()  {
// 	 := bufio_test.ExampleWriter()
// 	...ABEND: TODO...
// }
// 
GO FUNC bufio_test.TestBadReader has: 
// func testBadReader(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{340523 0xc0002b24a0}))  {
// 	 := bufio_test.TestBadReader(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC bufio_test.TestBlankLines has: 
// func testBlankLines(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{342824 0xc0002b6f60}))  {
// 	 := bufio_test.TestBlankLines(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC bufio_test.TestBufferFull has: 
// func testBufferFull(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{392366 0xc0004ac0a0}))  {
// 	 := bufio_test.TestBufferFull(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC bufio_test.TestDontLoopForever has: 
// func testDontLoopForever(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{342361 0xc0002b6680}))  {
// 	 := bufio_test.TestDontLoopForever(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC bufio_test.TestEmptyLinesOK has: 
// func testEmptyLinesOK(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{343337 0xc0002b79c0}))  {
// 	 := bufio_test.TestEmptyLinesOK(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC bufio_test.TestEmptyTokens has: 
// func testEmptyTokens(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{341999 0xc0002b3ee0}))  {
// 	 := bufio_test.TestEmptyTokens(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC bufio_test.TestErrAtEOF has: 
// func testErrAtEOF(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{339498 0xc00028d320}))  {
// 	 := bufio_test.TestErrAtEOF(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC bufio_test.TestHugeBuffer has: 
// func testHugeBuffer(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{343698 0xc000414060}))  {
// 	 := bufio_test.TestHugeBuffer(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC bufio_test.TestLineTooLong has: 
// func testLineTooLong(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{397253 0xc00020e8e0}))  {
// 	 := bufio_test.TestLineTooLong(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC bufio_test.TestLinesAfterRead has: 
// func testLinesAfterRead(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{399274 0xc0001d45c0}))  {
// 	 := bufio_test.TestLinesAfterRead(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC bufio_test.TestNegativeRead has: 
// func testNegativeRead(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{406284 0xc000173340}))  {
// 	 := bufio_test.TestNegativeRead(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC bufio_test.TestNewReaderSizeIdempotent has: 
// func testNewReaderSizeIdempotent(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{390956 0xc000504bc0}))  {
// 	 := bufio_test.TestNewReaderSizeIdempotent(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC bufio_test.TestNewWriterSizeIdempotent has: 
// func testNewWriterSizeIdempotent(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{391385 0xc000505160}))  {
// 	 := bufio_test.TestNewWriterSizeIdempotent(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC bufio_test.TestNonEOFWithEmptyRead has: 
// func testNonEOFWithEmptyRead(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{340139 0xc00028dea0}))  {
// 	 := bufio_test.TestNonEOFWithEmptyRead(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC bufio_test.TestPeek has: 
// func testPeek(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{392870 0xc0004ad900}))  {
// 	 := bufio_test.TestPeek(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC bufio_test.TestPeekThenUnreadRune has: 
// func testPeekThenUnreadRune(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{395434 0xc000250d60}))  {
// 	 := bufio_test.TestPeekThenUnreadRune(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC bufio_test.TestReadAfterLines has: 
// func testReadAfterLines(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{398299 0xc0001e4760}))  {
// 	 := bufio_test.TestReadAfterLines(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC bufio_test.TestReadEmptyBuffer has: 
// func testReadEmptyBuffer(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{399035 0xc0001d4160}))  {
// 	 := bufio_test.TestReadEmptyBuffer(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC bufio_test.TestReadLine has: 
// func testReadLine(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{397155 0xc00020e2a0}))  {
// 	 := bufio_test.TestReadLine(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC bufio_test.TestReadLineNewlines has: 
// func testReadLineNewlines(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{400486 0xc0001d5b60}))  {
// 	 := bufio_test.TestReadLineNewlines(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC bufio_test.TestReadLineNonNilLineOrError has: 
// func testReadLineNonNilLineOrError(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{399611 0xc0001d4da0}))  {
// 	 := bufio_test.TestReadLineNonNilLineOrError(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC bufio_test.TestReadRune has: 
// func testReadRune(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{381827 0xc0001a3180}))  {
// 	 := bufio_test.TestReadRune(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC bufio_test.TestReadWriteRune has: 
// func testReadWriteRune(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{388177 0xc0004f7620}))  {
// 	 := bufio_test.TestReadWriteRune(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC bufio_test.TestReadZero has: 
// func testReadZero(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{409499 0xc000350d40}))  {
// 	 := bufio_test.TestReadZero(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC bufio_test.TestReader has: 
// func testReader(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{379633 0xc00019c940}))  {
// 	 := bufio_test.TestReader(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC bufio_test.TestReaderClearError has: 
// func testReaderClearError(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{407092 0xc0001c0ac0}))  {
// 	 := bufio_test.TestReaderClearError(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC bufio_test.TestReaderDiscard has: 
// func testReaderDiscard(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{410901 0xc0001c73a0}))  {
// 	 := bufio_test.TestReaderDiscard(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC bufio_test.TestReaderReset has: 
// func testReaderReset(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{410180 0xc000358680}))  {
// 	 := bufio_test.TestReaderReset(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC bufio_test.TestReaderSimple has: 
// func testReaderSimple(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{377832 0xc0003d86c0}))  {
// 	 := bufio_test.TestReaderSimple(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC bufio_test.TestReaderSize has: 
// func testReaderSize(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{414246 0xc0001d85a0}))  {
// 	 := bufio_test.TestReaderSize(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC bufio_test.TestReaderWriteTo has: 
// func testReaderWriteTo(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{401503 0xc00018b5c0}))  {
// 	 := bufio_test.TestReaderWriteTo(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC bufio_test.TestReaderWriteToErrors has: 
// func testReaderWriteToErrors(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{402443 0xc000166bc0}))  {
// 	 := bufio_test.TestReaderWriteToErrors(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC bufio_test.TestScanByte has: 
// func testScanByte(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{331703 0xc000367b20}))  {
// 	 := bufio_test.TestScanByte(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC bufio_test.TestScanLineEmptyFinalLine has: 
// func testScanLineEmptyFinalLine(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{337876 0xc000287d20}))  {
// 	 := bufio_test.TestScanLineEmptyFinalLine(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC bufio_test.TestScanLineEmptyFinalLineWithCR has: 
// func testScanLineEmptyFinalLineWithCR(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{338177 0xc00028c000}))  {
// 	 := bufio_test.TestScanLineEmptyFinalLineWithCR(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC bufio_test.TestScanLineNoNewline has: 
// func testScanLineNoNewline(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{337344 0xc0002877a0}))  {
// 	 := bufio_test.TestScanLineNoNewline(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC bufio_test.TestScanLineReturnButNoNewline has: 
// func testScanLineReturnButNoNewline(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{337627 0xc000287a60}))  {
// 	 := bufio_test.TestScanLineReturnButNoNewline(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC bufio_test.TestScanLineTooLong has: 
// func testScanLineTooLong(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{335892 0xc000109e20}))  {
// 	 := bufio_test.TestScanLineTooLong(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC bufio_test.TestScanLongLines has: 
// func testScanLongLines(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{334959 0xc000108e40}))  {
// 	 := bufio_test.TestScanLongLines(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC bufio_test.TestScanRune has: 
// func testScanRune(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{332281 0xc000104540}))  {
// 	 := bufio_test.TestScanRune(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC bufio_test.TestScanWords has: 
// func testScanWords(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{333292 0xc000105420}))  {
// 	 := bufio_test.TestScanWords(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC bufio_test.TestScanWordsExcessiveWhiteSpace has: 
// func testScanWordsExcessiveWhiteSpace(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{340769 0xc0002b28a0}))  {
// 	 := bufio_test.TestScanWordsExcessiveWhiteSpace(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC bufio_test.TestSpace has: 
// func testSpace(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{331289 0xc0003674e0}))  {
// 	 := bufio_test.TestSpace(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC bufio_test.TestSplitError has: 
// func testSplitError(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{338478 0xc00028c380}))  {
// 	 := bufio_test.TestSplitError(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC bufio_test.TestUnreadByte has: 
// func testUnreadByte(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{382694 0xc0001aa040}))  {
// 	 := bufio_test.TestUnreadByte(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC bufio_test.TestUnreadByteMultiple has: 
// func testUnreadByteMultiple(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{383453 0xc0001aacc0}))  {
// 	 := bufio_test.TestUnreadByteMultiple(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC bufio_test.TestUnreadByteOthers has: 
// func testUnreadByteOthers(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{384261 0xc0001ab960}))  {
// 	 := bufio_test.TestUnreadByteOthers(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC bufio_test.TestUnreadRune has: 
// func testUnreadRune(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{381927 0xc0001a3380}))  {
// 	 := bufio_test.TestUnreadRune(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC bufio_test.TestUnreadRuneAtEOF has: 
// func testUnreadRuneAtEOF(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{387835 0xc0004f7020}))  {
// 	 := bufio_test.TestUnreadRuneAtEOF(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC bufio_test.TestUnreadRuneError has: 
// func testUnreadRuneError(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{385897 0xc0004f1120}))  {
// 	 := bufio_test.TestUnreadRuneError(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC bufio_test.TestWithNoEmptyTokens has: 
// func testWithNoEmptyTokens(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{342104 0xc0002b6100}))  {
// 	 := bufio_test.TestWithNoEmptyTokens(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC bufio_test.TestWriteErrors has: 
// func testWriteErrors(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{390527 0xc0005043c0}))  {
// 	 := bufio_test.TestWriteErrors(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC bufio_test.TestWriteString has: 
// func testWriteString(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{391787 0xc000505700}))  {
// 	 := bufio_test.TestWriteString(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC bufio_test.TestWriter has: 
// func testWriter(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{388958 0xc0004f8480}))  {
// 	 := bufio_test.TestWriter(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC bufio_test.TestWriterReadFrom has: 
// func testWriterReadFrom(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{402695 0xc000158700}))  {
// 	 := bufio_test.TestWriterReadFrom(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC bufio_test.TestWriterReadFromCounts has: 
// func testWriterReadFromCounts(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{404635 0xc0000a41a0}))  {
// 	 := bufio_test.TestWriterReadFromCounts(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC bufio_test.TestWriterReadFromErrNoProgress has: 
// func testWriterReadFromErrNoProgress(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{408995 0xc000350220}))  {
// 	 := bufio_test.TestWriterReadFromErrNoProgress(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC bufio_test.TestWriterReadFromErrors has: 
// func testWriterReadFromErrors(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{404142 0xc000115200}))  {
// 	 := bufio_test.TestWriterReadFromErrors(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC bufio_test.TestWriterReadFromUntilEOF has: 
// func testWriterReadFromUntilEOF(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{408367 0xc0002922a0}))  {
// 	 := bufio_test.TestWriterReadFromUntilEOF(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC bufio_test.TestWriterReadFromWhileFull has: 
// func testWriterReadFromWhileFull(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{407690 0xc0001c1660}))  {
// 	 := bufio_test.TestWriterReadFromWhileFull(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC bufio_test.TestWriterReset has: 
// func testWriterReset(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{410556 0xc0001c65a0}))  {
// 	 := bufio_test.TestWriterReset(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC bufio_test.TestWriterSize has: 
// func testWriterSize(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{414561 0xc0001d8b60}))  {
// 	 := bufio_test.TestWriterSize(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC bufio_test.TestZeroReader has: 
// func testZeroReader(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{380498 0xc00019d9a0}))  {
// 	 := bufio_test.TestZeroReader(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC build.TestDependencies has: 
// func testDependencies(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{4524451 0xc00147e480}))  {
// 	 := build.TestDependencies(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC build.TestDotSlashImport has: 
// func testDotSlashImport(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{4543457 0xc001c89a80}))  {
// 	 := build.TestDotSlashImport(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC build.TestEmptyFolderImport has: 
// func testEmptyFolderImport(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{4544323 0xc001cdaaa0}))  {
// 	 := build.TestEmptyFolderImport(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC build.TestEmptyImport has: 
// func testEmptyImport(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{4544017 0xc001cda540}))  {
// 	 := build.TestEmptyImport(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC build.TestExpandSrcDir has: 
// func testExpandSrcDir(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{4549712 0xc001ecde00}))  {
// 	 := build.TestExpandSrcDir(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC build.TestGoodOSArch has: 
// func testGoodOSArch(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{4531231 0xc00192a680}))  {
// 	 := build.TestGoodOSArch(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC build.TestGoodOSArchFile has: 
// func testGoodOSArchFile(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{4546728 0xc001db6f00}))  {
// 	 := build.TestGoodOSArchFile(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC build.TestImportCmd has: 
// func testImportCmd(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{4548612 0xc001eccf80}))  {
// 	 := build.TestImportCmd(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC build.TestImportDirNotExist has: 
// func testImportDirNotExist(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{4551364 0xc001579300}))  {
// 	 := build.TestImportDirNotExist(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC build.TestImportDirTarget has: 
// func testImportDirTarget(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{4554164 0xc00157bdc0}))  {
// 	 := build.TestImportDirTarget(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC build.TestImportVendor has: 
// func testImportVendor(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{4552555 0xc00157a440}))  {
// 	 := build.TestImportVendor(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC build.TestImportVendorFailure has: 
// func testImportVendorFailure(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{4553067 0xc00157abc0}))  {
// 	 := build.TestImportVendorFailure(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC build.TestImportVendorParentFailure has: 
// func testImportVendorParentFailure(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{4553535 0xc00157b3c0}))  {
// 	 := build.TestImportVendorParentFailure(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC build.TestIssue23594 has: 
// func testIssue23594(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{4554657 0xc0014be5c0}))  {
// 	 := build.TestIssue23594(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC build.TestLocalDirectory has: 
// func testLocalDirectory(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{4545003 0xc001cdb5c0}))  {
// 	 := build.TestLocalDirectory(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC build.TestMatch has: 
// func testMatch(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{4541834 0xc001c316c0}))  {
// 	 := build.TestMatch(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC build.TestMatchFile has: 
// func testMatchFile(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{4548025 0xc001ecc2e0}))  {
// 	 := build.TestMatchFile(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC build.TestMultiplePackageImport has: 
// func testMultiplePackageImport(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{4544521 0xc001cdae20}))  {
// 	 := build.TestMultiplePackageImport(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC build.TestReadComments has: 
// func testReadComments(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{4528394 0xc0018ba2c0}))  {
// 	 := build.TestReadComments(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC build.TestReadFailures has: 
// func testReadFailures(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{4529352 0xc0018baaa0}))  {
// 	 := build.TestReadFailures(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC build.TestReadFailuresIgnored has: 
// func testReadFailuresIgnored(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{4529561 0xc0018bae20}))  {
// 	 := build.TestReadFailuresIgnored(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC build.TestReadImports has: 
// func testReadImports(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{4528250 0xc0018adfa0}))  {
// 	 := build.TestReadImports(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC build.TestShellSafety has: 
// func testShellSafety(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{4550104 0xc001578420}))  {
// 	 := build.TestShellSafety(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC build.TestShouldBuild has: 
// func testShouldBuild(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{4545433 0xc001cdbe20}))  {
// 	 := build.TestShouldBuild(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC bytes_test.BenchmarkBufferFullSmallReads has: 
// func benchmarkBufferFullSmallReads(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{457548 0xc0001ea960}))  {
// 	 := bytes_test.BenchmarkBufferFullSmallReads(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC bytes_test.BenchmarkBufferNotEmptyWriteRead has: 
// func benchmarkBufferNotEmptyWriteRead(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{457276 0xc0001ea360}))  {
// 	 := bytes_test.BenchmarkBufferNotEmptyWriteRead(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC bytes_test.BenchmarkBytesCompare has: 
// func benchmarkBytesCompare(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{520610 0xc0003b7560}))  {
// 	 := bytes_test.BenchmarkBytesCompare(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC bytes_test.BenchmarkCompareBytesBig has: 
// func benchmarkCompareBytesBig(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{462126 0xc0004ec7a0}))  {
// 	 := bytes_test.BenchmarkCompareBytesBig(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC bytes_test.BenchmarkCompareBytesBigIdentical has: 
// func benchmarkCompareBytesBigIdentical(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{462455 0xc0004ecee0}))  {
// 	 := bytes_test.BenchmarkCompareBytesBigIdentical(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC bytes_test.BenchmarkCompareBytesBigUnaligned has: 
// func benchmarkCompareBytesBigUnaligned(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{461784 0xc0004ec000}))  {
// 	 := bytes_test.BenchmarkCompareBytesBigUnaligned(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC bytes_test.BenchmarkCompareBytesDifferentLength has: 
// func benchmarkCompareBytesDifferentLength(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{461568 0xc0004e7c00}))  {
// 	 := bytes_test.BenchmarkCompareBytesDifferentLength(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC bytes_test.BenchmarkCompareBytesEmpty has: 
// func benchmarkCompareBytesEmpty(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{460997 0xc0004e7080}))  {
// 	 := bytes_test.BenchmarkCompareBytesEmpty(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC bytes_test.BenchmarkCompareBytesEqual has: 
// func benchmarkCompareBytesEqual(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{460606 0xc0004e68e0}))  {
// 	 := bytes_test.BenchmarkCompareBytesEqual(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC bytes_test.BenchmarkCompareBytesIdentical has: 
// func benchmarkCompareBytesIdentical(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{461166 0xc0004e7440}))  {
// 	 := bytes_test.BenchmarkCompareBytesIdentical(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC bytes_test.BenchmarkCompareBytesSameLength has: 
// func benchmarkCompareBytesSameLength(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{461350 0xc0004e7800}))  {
// 	 := bytes_test.BenchmarkCompareBytesSameLength(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC bytes_test.BenchmarkCompareBytesToNil has: 
// func benchmarkCompareBytesToNil(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{460807 0xc0004e6cc0}))  {
// 	 := bytes_test.BenchmarkCompareBytesToNil(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC bytes_test.BenchmarkCount has: 
// func benchmarkCount(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{495455 0xc000575dc0}))  {
// 	 := bytes_test.BenchmarkCount(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC bytes_test.BenchmarkCountEasy has: 
// func benchmarkCountEasy(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{495725 0xc0005784c0}))  {
// 	 := bytes_test.BenchmarkCountEasy(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC bytes_test.BenchmarkCountSingle has: 
// func benchmarkCountSingle(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{496034 0xc000578cc0}))  {
// 	 := bytes_test.BenchmarkCountSingle(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC bytes_test.BenchmarkEqual has: 
// func benchmarkEqual(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{493994 0xc000567800}))  {
// 	 := bytes_test.BenchmarkEqual(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC bytes_test.BenchmarkEqualPort has: 
// func benchmarkEqualPort(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{494340 0xc000574120}))  {
// 	 := bytes_test.BenchmarkEqualPort(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC bytes_test.BenchmarkFields has: 
// func benchmarkFields(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{518603 0xc0005fa120}))  {
// 	 := bytes_test.BenchmarkFields(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC bytes_test.BenchmarkFieldsFunc has: 
// func benchmarkFieldsFunc(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{518963 0xc0005faa40}))  {
// 	 := bytes_test.BenchmarkFieldsFunc(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC bytes_test.BenchmarkIndex has: 
// func benchmarkIndex(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{494878 0xc000574e80}))  {
// 	 := bytes_test.BenchmarkIndex(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC bytes_test.BenchmarkIndexAnyASCII has: 
// func benchmarkIndexAnyASCII(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{520967 0xc0004148a0}))  {
// 	 := bytes_test.BenchmarkIndexAnyASCII(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC bytes_test.BenchmarkIndexByte has: 
// func benchmarkIndexByte(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{492687 0xc000563920}))  {
// 	 := bytes_test.BenchmarkIndexByte(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC bytes_test.BenchmarkIndexBytePortable has: 
// func benchmarkIndexBytePortable(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{492789 0xc000563ac0}))  {
// 	 := bytes_test.BenchmarkIndexBytePortable(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC bytes_test.BenchmarkIndexEasy has: 
// func benchmarkIndexEasy(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{495150 0xc0005755a0}))  {
// 	 := bytes_test.BenchmarkIndexEasy(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC bytes_test.BenchmarkIndexPeriodic has: 
// func benchmarkIndexPeriodic(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{521623 0xc000505f60}))  {
// 	 := bytes_test.BenchmarkIndexPeriodic(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC bytes_test.BenchmarkIndexRune has: 
// func benchmarkIndexRune(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{493172 0xc000566400}))  {
// 	 := bytes_test.BenchmarkIndexRune(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC bytes_test.BenchmarkIndexRuneASCII has: 
// func benchmarkIndexRuneASCII(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{493271 0xc0005665a0}))  {
// 	 := bytes_test.BenchmarkIndexRuneASCII(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC bytes_test.BenchmarkReadString has: 
// func benchmarkReadString(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{453439 0xc000401c80}))  {
// 	 := bytes_test.BenchmarkReadString(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC bytes_test.BenchmarkRepeat has: 
// func benchmarkRepeat(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{520507 0xc0001e1d80}))  {
// 	 := bytes_test.BenchmarkRepeat(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC bytes_test.BenchmarkSplitEmptySeparator has: 
// func benchmarkSplitEmptySeparator(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{519837 0xc0005fbcc0}))  {
// 	 := bytes_test.BenchmarkSplitEmptySeparator(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC bytes_test.BenchmarkSplitMultiByteSeparator has: 
// func benchmarkSplitMultiByteSeparator(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{520092 0xc0005460a0}))  {
// 	 := bytes_test.BenchmarkSplitMultiByteSeparator(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC bytes_test.BenchmarkSplitNMultiByteSeparator has: 
// func benchmarkSplitNMultiByteSeparator(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{520378 0xc000547ac0}))  {
// 	 := bytes_test.BenchmarkSplitNMultiByteSeparator(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC bytes_test.BenchmarkSplitNSingleByteSeparator has: 
// func benchmarkSplitNSingleByteSeparator(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{520235 0xc000546d80}))  {
// 	 := bytes_test.BenchmarkSplitNSingleByteSeparator(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC bytes_test.BenchmarkSplitSingleByteSeparator has: 
// func benchmarkSplitSingleByteSeparator(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{519955 0xc0005fbf20}))  {
// 	 := bytes_test.BenchmarkSplitSingleByteSeparator(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC bytes_test.BenchmarkTrimASCII has: 
// func benchmarkTrimASCII(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{521293 0xc0004150e0}))  {
// 	 := bytes_test.BenchmarkTrimASCII(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC bytes_test.BenchmarkTrimSpace has: 
// func benchmarkTrimSpace(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{519343 0xc0005fb3e0}))  {
// 	 := bytes_test.BenchmarkTrimSpace(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC bytes_test.BenchmarkWriteByte has: 
// func benchmarkWriteByte(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{456770 0xc0002f5720}))  {
// 	 := bytes_test.BenchmarkWriteByte(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC bytes_test.BenchmarkWriteRune has: 
// func benchmarkWriteRune(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{456980 0xc0002f5c80}))  {
// 	 := bytes_test.BenchmarkWriteRune(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC bytes_test.ExampleBuffer has: 
// func exampleBuffer()  {
// 	 := bytes_test.ExampleBuffer()
// 	...ABEND: TODO...
// }
// 
GO FUNC bytes_test.ExampleBuffer_Grow has: 
// func exampleBuffer_Grow()  {
// 	 := bytes_test.ExampleBuffer_Grow()
// 	...ABEND: TODO...
// }
// 
GO FUNC bytes_test.ExampleBuffer_reader has: 
// func exampleBuffer_reader()  {
// 	 := bytes_test.ExampleBuffer_reader()
// 	...ABEND: TODO...
// }
// 
GO FUNC bytes_test.ExampleCompare has: 
// func exampleCompare()  {
// 	 := bytes_test.ExampleCompare()
// 	...ABEND: TODO...
// }
// 
GO FUNC bytes_test.ExampleCompare_search has: 
// func exampleCompare_search()  {
// 	 := bytes_test.ExampleCompare_search()
// 	...ABEND: TODO...
// }
// 
GO FUNC bytes_test.ExampleContains has: 
// func exampleContains()  {
// 	 := bytes_test.ExampleContains()
// 	...ABEND: TODO...
// }
// 
GO FUNC bytes_test.ExampleContainsAny has: 
// func exampleContainsAny()  {
// 	 := bytes_test.ExampleContainsAny()
// 	...ABEND: TODO...
// }
// 
GO FUNC bytes_test.ExampleContainsRune has: 
// func exampleContainsRune()  {
// 	 := bytes_test.ExampleContainsRune()
// 	...ABEND: TODO...
// }
// 
GO FUNC bytes_test.ExampleCount has: 
// func exampleCount()  {
// 	 := bytes_test.ExampleCount()
// 	...ABEND: TODO...
// }
// 
GO FUNC bytes_test.ExampleEqual has: 
// func exampleEqual()  {
// 	 := bytes_test.ExampleEqual()
// 	...ABEND: TODO...
// }
// 
GO FUNC bytes_test.ExampleEqualFold has: 
// func exampleEqualFold()  {
// 	 := bytes_test.ExampleEqualFold()
// 	...ABEND: TODO...
// }
// 
GO FUNC bytes_test.ExampleFields has: 
// func exampleFields()  {
// 	 := bytes_test.ExampleFields()
// 	...ABEND: TODO...
// }
// 
GO FUNC bytes_test.ExampleFieldsFunc has: 
// func exampleFieldsFunc()  {
// 	 := bytes_test.ExampleFieldsFunc()
// 	...ABEND: TODO...
// }
// 
GO FUNC bytes_test.ExampleHasPrefix has: 
// func exampleHasPrefix()  {
// 	 := bytes_test.ExampleHasPrefix()
// 	...ABEND: TODO...
// }
// 
GO FUNC bytes_test.ExampleHasSuffix has: 
// func exampleHasSuffix()  {
// 	 := bytes_test.ExampleHasSuffix()
// 	...ABEND: TODO...
// }
// 
GO FUNC bytes_test.ExampleIndex has: 
// func exampleIndex()  {
// 	 := bytes_test.ExampleIndex()
// 	...ABEND: TODO...
// }
// 
GO FUNC bytes_test.ExampleIndexAny has: 
// func exampleIndexAny()  {
// 	 := bytes_test.ExampleIndexAny()
// 	...ABEND: TODO...
// }
// 
GO FUNC bytes_test.ExampleIndexByte has: 
// func exampleIndexByte()  {
// 	 := bytes_test.ExampleIndexByte()
// 	...ABEND: TODO...
// }
// 
GO FUNC bytes_test.ExampleIndexFunc has: 
// func exampleIndexFunc()  {
// 	 := bytes_test.ExampleIndexFunc()
// 	...ABEND: TODO...
// }
// 
GO FUNC bytes_test.ExampleIndexRune has: 
// func exampleIndexRune()  {
// 	 := bytes_test.ExampleIndexRune()
// 	...ABEND: TODO...
// }
// 
GO FUNC bytes_test.ExampleJoin has: 
// func exampleJoin()  {
// 	 := bytes_test.ExampleJoin()
// 	...ABEND: TODO...
// }
// 
GO FUNC bytes_test.ExampleLastIndex has: 
// func exampleLastIndex()  {
// 	 := bytes_test.ExampleLastIndex()
// 	...ABEND: TODO...
// }
// 
GO FUNC bytes_test.ExampleLastIndexAny has: 
// func exampleLastIndexAny()  {
// 	 := bytes_test.ExampleLastIndexAny()
// 	...ABEND: TODO...
// }
// 
GO FUNC bytes_test.ExampleLastIndexByte has: 
// func exampleLastIndexByte()  {
// 	 := bytes_test.ExampleLastIndexByte()
// 	...ABEND: TODO...
// }
// 
GO FUNC bytes_test.ExampleLastIndexFunc has: 
// func exampleLastIndexFunc()  {
// 	 := bytes_test.ExampleLastIndexFunc()
// 	...ABEND: TODO...
// }
// 
GO FUNC bytes_test.ExampleMap has: 
// func exampleMap()  {
// 	 := bytes_test.ExampleMap()
// 	...ABEND: TODO...
// }
// 
GO FUNC bytes_test.ExampleReader_Len has: 
// func exampleReader_Len()  {
// 	 := bytes_test.ExampleReader_Len()
// 	...ABEND: TODO...
// }
// 
GO FUNC bytes_test.ExampleRepeat has: 
// func exampleRepeat()  {
// 	 := bytes_test.ExampleRepeat()
// 	...ABEND: TODO...
// }
// 
GO FUNC bytes_test.ExampleReplace has: 
// func exampleReplace()  {
// 	 := bytes_test.ExampleReplace()
// 	...ABEND: TODO...
// }
// 
GO FUNC bytes_test.ExampleRunes has: 
// func exampleRunes()  {
// 	 := bytes_test.ExampleRunes()
// 	...ABEND: TODO...
// }
// 
GO FUNC bytes_test.ExampleSplit has: 
// func exampleSplit()  {
// 	 := bytes_test.ExampleSplit()
// 	...ABEND: TODO...
// }
// 
GO FUNC bytes_test.ExampleSplitAfter has: 
// func exampleSplitAfter()  {
// 	 := bytes_test.ExampleSplitAfter()
// 	...ABEND: TODO...
// }
// 
GO FUNC bytes_test.ExampleSplitAfterN has: 
// func exampleSplitAfterN()  {
// 	 := bytes_test.ExampleSplitAfterN()
// 	...ABEND: TODO...
// }
// 
GO FUNC bytes_test.ExampleSplitN has: 
// func exampleSplitN()  {
// 	 := bytes_test.ExampleSplitN()
// 	...ABEND: TODO...
// }
// 
GO FUNC bytes_test.ExampleTitle has: 
// func exampleTitle()  {
// 	 := bytes_test.ExampleTitle()
// 	...ABEND: TODO...
// }
// 
GO FUNC bytes_test.ExampleToLower has: 
// func exampleToLower()  {
// 	 := bytes_test.ExampleToLower()
// 	...ABEND: TODO...
// }
// 
GO FUNC bytes_test.ExampleToTitle has: 
// func exampleToTitle()  {
// 	 := bytes_test.ExampleToTitle()
// 	...ABEND: TODO...
// }
// 
GO FUNC bytes_test.ExampleToUpper has: 
// func exampleToUpper()  {
// 	 := bytes_test.ExampleToUpper()
// 	...ABEND: TODO...
// }
// 
GO FUNC bytes_test.ExampleTrim has: 
// func exampleTrim()  {
// 	 := bytes_test.ExampleTrim()
// 	...ABEND: TODO...
// }
// 
GO FUNC bytes_test.ExampleTrimFunc has: 
// func exampleTrimFunc()  {
// 	 := bytes_test.ExampleTrimFunc()
// 	...ABEND: TODO...
// }
// 
GO FUNC bytes_test.ExampleTrimLeft has: 
// func exampleTrimLeft()  {
// 	 := bytes_test.ExampleTrimLeft()
// 	...ABEND: TODO...
// }
// 
GO FUNC bytes_test.ExampleTrimLeftFunc has: 
// func exampleTrimLeftFunc()  {
// 	 := bytes_test.ExampleTrimLeftFunc()
// 	...ABEND: TODO...
// }
// 
GO FUNC bytes_test.ExampleTrimPrefix has: 
// func exampleTrimPrefix()  {
// 	 := bytes_test.ExampleTrimPrefix()
// 	...ABEND: TODO...
// }
// 
GO FUNC bytes_test.ExampleTrimRight has: 
// func exampleTrimRight()  {
// 	 := bytes_test.ExampleTrimRight()
// 	...ABEND: TODO...
// }
// 
GO FUNC bytes_test.ExampleTrimRightFunc has: 
// func exampleTrimRightFunc()  {
// 	 := bytes_test.ExampleTrimRightFunc()
// 	...ABEND: TODO...
// }
// 
GO FUNC bytes_test.ExampleTrimSpace has: 
// func exampleTrimSpace()  {
// 	 := bytes_test.ExampleTrimSpace()
// 	...ABEND: TODO...
// }
// 
GO FUNC bytes_test.ExampleTrimSuffix has: 
// func exampleTrimSuffix()  {
// 	 := bytes_test.ExampleTrimSuffix()
// 	...ABEND: TODO...
// }
// 
GO FUNC bytes_test.TestBasicOperations has: 
// func testBasicOperations(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{444151 0xc000303160}))  {
// 	 := bytes_test.TestBasicOperations(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC bytes_test.TestBufferGrowNegative has: 
// func testBufferGrowNegative(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{515601 0xc0005deb20}))  {
// 	 := bytes_test.TestBufferGrowNegative(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC bytes_test.TestBufferGrowth has: 
// func testBufferGrowth(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{456348 0xc0002f4f60}))  {
// 	 := bytes_test.TestBufferGrowth(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC bytes_test.TestBufferTruncateNegative has: 
// func testBufferTruncateNegative(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{515783 0xc0005dee20}))  {
// 	 := bytes_test.TestBufferTruncateNegative(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC bytes_test.TestBufferTruncateOutOfRange has: 
// func testBufferTruncateOutOfRange(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{515975 0xc0005df120}))  {
// 	 := bytes_test.TestBufferTruncateOutOfRange(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC bytes_test.TestCapWithPreallocatedSlice has: 
// func testCapWithPreallocatedSlice(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{447306 0xc00030ef80}))  {
// 	 := bytes_test.TestCapWithPreallocatedSlice(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC bytes_test.TestCapWithSliceAndWrittenData has: 
// func testCapWithSliceAndWrittenData(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{447467 0xc00030f2c0}))  {
// 	 := bytes_test.TestCapWithSliceAndWrittenData(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC bytes_test.TestCompare has: 
// func testCompare(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{458863 0xc0004e2440}))  {
// 	 := bytes_test.TestCompare(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC bytes_test.TestCompareBytes has: 
// func testCompareBytes(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{459241 0xc0004e2ce0}))  {
// 	 := bytes_test.TestCompareBytes(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC bytes_test.TestCompareIdenticalSlice has: 
// func testCompareIdenticalSlice(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{459056 0xc0004e2920}))  {
// 	 := bytes_test.TestCompareIdenticalSlice(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC bytes_test.TestContains has: 
// func testContains(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{516439 0xc0005df900}))  {
// 	 := bytes_test.TestContains(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC bytes_test.TestContainsAny has: 
// func testContainsAny(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{517110 0xc0005ea5c0}))  {
// 	 := bytes_test.TestContainsAny(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC bytes_test.TestContainsRune has: 
// func testContainsRune(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{517690 0xc0005eb120}))  {
// 	 := bytes_test.TestContainsRune(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC bytes_test.TestCountByte has: 
// func testCountByte(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{490516 0xc00055aac0}))  {
// 	 := bytes_test.TestCountByte(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC bytes_test.TestCountByteNoMatch has: 
// func testCountByteNoMatch(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{491463 0xc00055be00}))  {
// 	 := bytes_test.TestCountByteNoMatch(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC bytes_test.TestEmptyReaderConcurrent has: 
// func testEmptyReaderConcurrent(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{436757 0xc0004d1260}))  {
// 	 := bytes_test.TestEmptyReaderConcurrent(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC bytes_test.TestEqual has: 
// func testEqual(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{481637 0xc00052b8c0}))  {
// 	 := bytes_test.TestEqual(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC bytes_test.TestEqualExhaustive has: 
// func testEqualExhaustive(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{481950 0xc00053c120}))  {
// 	 := bytes_test.TestEqualExhaustive(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC bytes_test.TestEqualFold has: 
// func testEqualFold(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{515224 0xc0005de200}))  {
// 	 := bytes_test.TestEqualFold(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC bytes_test.TestEqualNearPageBoundary has: 
// func testEqualNearPageBoundary(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{479888 0xc00051bac0}))  {
// 	 := bytes_test.TestEqualNearPageBoundary(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC bytes_test.TestExplode has: 
// func testExplode(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{496678 0xc000579be0}))  {
// 	 := bytes_test.TestExplode(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC bytes_test.TestFields has: 
// func testFields(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{500754 0xc00058f920}))  {
// 	 := bytes_test.TestFields(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC bytes_test.TestFieldsFunc has: 
// func testFieldsFunc(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{501365 0xc000590580}))  {
// 	 := bytes_test.TestFieldsFunc(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC bytes_test.TestGrow has: 
// func testGrow(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{453683 0xc0004082c0}))  {
// 	 := bytes_test.TestGrow(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC bytes_test.TestGrowOverflow has: 
// func testGrowOverflow(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{454759 0xc0004094e0}))  {
// 	 := bytes_test.TestGrowOverflow(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC bytes_test.TestIndex has: 
// func testIndex(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{485780 0xc0005490c0}))  {
// 	 := bytes_test.TestIndex(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC bytes_test.TestIndexAny has: 
// func testIndexAny(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{485959 0xc000549400}))  {
// 	 := bytes_test.TestIndexAny(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC bytes_test.TestIndexByte has: 
// func testIndexByte(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{486165 0xc000549740}))  {
// 	 := bytes_test.TestIndexByte(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC bytes_test.TestIndexByteBig has: 
// func testIndexByteBig(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{487168 0xc00054ea80}))  {
// 	 := bytes_test.TestIndexByteBig(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC bytes_test.TestIndexByteNearPageBoundary has: 
// func testIndexByteNearPageBoundary(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{480109 0xc00052a040}))  {
// 	 := bytes_test.TestIndexByteNearPageBoundary(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC bytes_test.TestIndexByteSmall has: 
// func testIndexByteSmall(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{488307 0xc0005540e0}))  {
// 	 := bytes_test.TestIndexByteSmall(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC bytes_test.TestIndexFunc has: 
// func testIndexFunc(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{512062 0xc0005c4340}))  {
// 	 := bytes_test.TestIndexFunc(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC bytes_test.TestIndexNearPageBoundary has: 
// func testIndexNearPageBoundary(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{480325 0xc00052a480}))  {
// 	 := bytes_test.TestIndexNearPageBoundary(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC bytes_test.TestIndexRune has: 
// func testIndexRune(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{489088 0xc000555260}))  {
// 	 := bytes_test.TestIndexRune(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC bytes_test.TestLargeByteReads has: 
// func testLargeByteReads(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{446485 0xc000309e80}))  {
// 	 := bytes_test.TestLargeByteReads(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC bytes_test.TestLargeByteWrites has: 
// func testLargeByteWrites(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{445842 0xc000309180}))  {
// 	 := bytes_test.TestLargeByteWrites(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC bytes_test.TestLargeStringReads has: 
// func testLargeStringReads(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{446183 0xc000309840}))  {
// 	 := bytes_test.TestLargeStringReads(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC bytes_test.TestLargeStringWrites has: 
// func testLargeStringWrites(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{445496 0xc000308ac0}))  {
// 	 := bytes_test.TestLargeStringWrites(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC bytes_test.TestLastIndex has: 
// func testLastIndex(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{485866 0xc000549260}))  {
// 	 := bytes_test.TestLastIndex(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC bytes_test.TestLastIndexAny has: 
// func testLastIndexAny(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{486057 0xc0005495a0}))  {
// 	 := bytes_test.TestLastIndexAny(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC bytes_test.TestLastIndexByte has: 
// func testLastIndexByte(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{486539 0xc000549fa0}))  {
// 	 := bytes_test.TestLastIndexByte(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC bytes_test.TestMap has: 
// func testMap(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{504263 0xc000595480}))  {
// 	 := bytes_test.TestMap(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC bytes_test.TestMixedReadsAndWrites has: 
// func testMixedReadsAndWrites(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{446787 0xc00030e4c0}))  {
// 	 := bytes_test.TestMixedReadsAndWrites(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC bytes_test.TestNewBuffer has: 
// func testNewBuffer(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{443417 0xc000302500}))  {
// 	 := bytes_test.TestNewBuffer(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC bytes_test.TestNewBufferString has: 
// func testNewBufferString(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{443530 0xc000302720}))  {
// 	 := bytes_test.TestNewBufferString(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC bytes_test.TestNext has: 
// func testNext(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{451265 0xc0000ab520}))  {
// 	 := bytes_test.TestNext(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC bytes_test.TestNil has: 
// func testNil(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{447635 0xc00030f6c0}))  {
// 	 := bytes_test.TestNil(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC bytes_test.TestNotEqual has: 
// func testNotEqual(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{482681 0xc00053d000}))  {
// 	 := bytes_test.TestNotEqual(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC bytes_test.TestReadAfterBigSeek has: 
// func testReadAfterBigSeek(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{435460 0xc0003c15a0}))  {
// 	 := bytes_test.TestReadAfterBigSeek(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC bytes_test.TestReadBytes has: 
// func testReadBytes(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{452551 0xc000400c60}))  {
// 	 := bytes_test.TestReadBytes(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC bytes_test.TestReadEmptyAtEOF has: 
// func testReadEmptyAtEOF(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{455098 0xc0004099a0}))  {
// 	 := bytes_test.TestReadEmptyAtEOF(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC bytes_test.TestReadFrom has: 
// func testReadFrom(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{447767 0xc00030f9a0}))  {
// 	 := bytes_test.TestReadFrom(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC bytes_test.TestReadFromNegativeReader has: 
// func testReadFromNegativeReader(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{448827 0xc000312b00}))  {
// 	 := bytes_test.TestReadFromNegativeReader(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC bytes_test.TestReadFromPanicReader has: 
// func testReadFromPanicReader(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{448288 0xc000312360}))  {
// 	 := bytes_test.TestReadFromPanicReader(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC bytes_test.TestReadString has: 
// func testReadString(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{453004 0xc000401480}))  {
// 	 := bytes_test.TestReadString(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC bytes_test.TestReader has: 
// func testReader(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{434018 0xc0000ef4a0}))  {
// 	 := bytes_test.TestReader(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC bytes_test.TestReaderAt has: 
// func testReaderAt(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{435729 0xc0003c1c60}))  {
// 	 := bytes_test.TestReaderAt(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC bytes_test.TestReaderAtConcurrent has: 
// func testReaderAtConcurrent(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{436421 0xc0004d0c00}))  {
// 	 := bytes_test.TestReaderAtConcurrent(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC bytes_test.TestReaderCopyNothing has: 
// func testReaderCopyNothing(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{439575 0xc00042a620}))  {
// 	 := bytes_test.TestReaderCopyNothing(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC bytes_test.TestReaderDoubleUnreadRune has: 
// func testReaderDoubleUnreadRune(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{439104 0xc0004b9fa0}))  {
// 	 := bytes_test.TestReaderDoubleUnreadRune(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC bytes_test.TestReaderLen has: 
// func testReaderLen(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{437773 0xc0004b8420}))  {
// 	 := bytes_test.TestReaderLen(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC bytes_test.TestReaderLenSize has: 
// func testReaderLenSize(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{440105 0xc00042af60}))  {
// 	 := bytes_test.TestReaderLenSize(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC bytes_test.TestReaderReset has: 
// func testReaderReset(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{440335 0xc00042b500}))  {
// 	 := bytes_test.TestReaderReset(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC bytes_test.TestReaderWriteTo has: 
// func testReaderWriteTo(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{437215 0xc0004d1960}))  {
// 	 := bytes_test.TestReaderWriteTo(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC bytes_test.TestRepeat has: 
// func testRepeat(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{506130 0xc00059b5a0}))  {
// 	 := bytes_test.TestRepeat(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC bytes_test.TestRepeatCatchesOverflow has: 
// func testRepeatCatchesOverflow(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{506672 0xc00059bfe0}))  {
// 	 := bytes_test.TestRepeatCatchesOverflow(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC bytes_test.TestReplace has: 
// func testReplace(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{513337 0xc0005c5ec0}))  {
// 	 := bytes_test.TestReplace(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC bytes_test.TestRuneIO has: 
// func testRuneIO(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{449607 0xc000313760}))  {
// 	 := bytes_test.TestRuneIO(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC bytes_test.TestRunes has: 
// func testRunes(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{507867 0xc0005a3aa0}))  {
// 	 := bytes_test.TestRunes(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC bytes_test.TestSplit has: 
// func testSplit(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{497703 0xc00057f500}))  {
// 	 := bytes_test.TestSplit(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC bytes_test.TestSplitAfter has: 
// func testSplitAfter(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{499390 0xc000583d00}))  {
// 	 := bytes_test.TestSplitAfter(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC bytes_test.TestTitle has: 
// func testTitle(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{514188 0xc0005d8fa0}))  {
// 	 := bytes_test.TestTitle(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC bytes_test.TestToLower has: 
// func testToLower(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{505728 0xc00059ad80}))  {
// 	 := bytes_test.TestToLower(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC bytes_test.TestToTitle has: 
// func testToTitle(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{514591 0xc0005d9700}))  {
// 	 := bytes_test.TestToTitle(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC bytes_test.TestToUpper has: 
// func testToUpper(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{505642 0xc00059abe0}))  {
// 	 := bytes_test.TestToUpper(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC bytes_test.TestTrim has: 
// func testTrim(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{509340 0xc0005a9520}))  {
// 	 := bytes_test.TestTrim(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC bytes_test.TestTrimFunc has: 
// func testTrimFunc(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{510980 0xc0005aef60}))  {
// 	 := bytes_test.TestTrimFunc(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC bytes_test.TestTrimSpace has: 
// func testTrimSpace(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{505816 0xc00059af20}))  {
// 	 := bytes_test.TestTrimSpace(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC bytes_test.TestUnreadByte has: 
// func testUnreadByte(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{455320 0xc000409e80}))  {
// 	 := bytes_test.TestUnreadByte(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC bytes_test.TestUnreadRuneError has: 
// func testUnreadRuneError(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{438744 0xc0004b9960}))  {
// 	 := bytes_test.TestUnreadRuneError(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC bytes_test.TestWriteTo has: 
// func testWriteTo(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{449339 0xc000313120}))  {
// 	 := bytes_test.TestWriteTo(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC bzip2.BenchmarkDecodeDigits has: 
// func benchmarkDecodeDigits(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{553148 0xc00022fb00}))  {
// 	 := bzip2.BenchmarkDecodeDigits(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC bzip2.BenchmarkDecodeRand has: 
// func benchmarkDecodeRand(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{553289 0xc00023a060}))  {
// 	 := bzip2.BenchmarkDecodeRand(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC bzip2.BenchmarkDecodeTwain has: 
// func benchmarkDecodeTwain(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{553219 0xc0002357a0}))  {
// 	 := bzip2.BenchmarkDecodeTwain(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC bzip2.TestBitReader has: 
// func testBitReader(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{550771 0xc0001d9440}))  {
// 	 := bzip2.TestBitReader(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC bzip2.TestMTF has: 
// func testMTF(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{551749 0xc0001731a0}))  {
// 	 := bzip2.TestMTF(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC bzip2.TestReader has: 
// func testReader(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{547471 0xc00041de40}))  {
// 	 := bzip2.TestReader(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC bzip2.TestZeroRead has: 
// func testZeroRead(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{552278 0xc0001585a0}))  {
// 	 := bzip2.TestZeroRead(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC cgi.Test500WithEmptyHeaders has: 
// func test500WithEmptyHeaders(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{9438254 0xc0043ecd40}))  {
// 	 := cgi.Test500WithEmptyHeaders(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC cgi.Test500WithNoContentType has: 
// func test500WithNoContentType(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{9438172 0xc0043ecbe0}))  {
// 	 := cgi.Test500WithNoContentType(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC cgi.Test500WithNoHeaders has: 
// func test500WithNoHeaders(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{9438080 0xc0043eca80}))  {
// 	 := cgi.Test500WithNoHeaders(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC cgi.TestBeChildCGIProcess has: 
// func testBeChildCGIProcess(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{9438887 0xc0043ed840}))  {
// 	 := cgi.TestBeChildCGIProcess(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC cgi.TestCGIBasicGet has: 
// func testCGIBasicGet(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{9421643 0xc0043b70c0}))  {
// 	 := cgi.TestCGIBasicGet(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC cgi.TestCGIBasicGetAbsPath has: 
// func testCGIBasicGetAbsPath(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{9423911 0xc0043be760}))  {
// 	 := cgi.TestCGIBasicGetAbsPath(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC cgi.TestCGIBasicPost has: 
// func testCGIBasicPost(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{9426964 0xc0043c27c0}))  {
// 	 := cgi.TestCGIBasicPost(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC cgi.TestCGIEnvIPv6 has: 
// func testCGIEnvIPv6(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{9422877 0xc0043b7da0}))  {
// 	 := cgi.TestCGIEnvIPv6(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC cgi.TestCGIPostChunked has: 
// func testCGIPostChunked(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{9427611 0xc0043c2ec0}))  {
// 	 := cgi.TestCGIPostChunked(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC cgi.TestChildOnlyHeaders has: 
// func testChildOnlyHeaders(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{9437556 0xc0043ec300}))  {
// 	 := cgi.TestChildOnlyHeaders(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC cgi.TestCopyError has: 
// func testCopyError(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{9429320 0xc0043ce6a0}))  {
// 	 := cgi.TestCopyError(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC cgi.TestDirUnix has: 
// func testDirUnix(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{9430634 0xc0043cfe60}))  {
// 	 := cgi.TestDirUnix(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC cgi.TestDirWindows has: 
// func testDirWindows(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{9431260 0xc0043d0880}))  {
// 	 := cgi.TestDirWindows(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC cgi.TestDropProxyHeader has: 
// func testDropProxyHeader(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{9426006 0xc0043bfcc0}))  {
// 	 := cgi.TestDropProxyHeader(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC cgi.TestDupHeaders has: 
// func testDupHeaders(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{9425316 0xc0043bf760}))  {
// 	 := cgi.TestDupHeaders(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC cgi.TestEnvOverride has: 
// func testEnvOverride(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{9432354 0xc0043d18e0}))  {
// 	 := cgi.TestEnvOverride(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC cgi.TestHandlerStderr has: 
// func testHandlerStderr(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{9433086 0xc0043dc380}))  {
// 	 := cgi.TestHandlerStderr(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC cgi.TestHostingOurselves has: 
// func testHostingOurselves(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{9434613 0xc0043dd740}))  {
// 	 := cgi.TestHostingOurselves(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC cgi.TestInternalRedirect has: 
// func testInternalRedirect(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{9428626 0xc0043c3da0}))  {
// 	 := cgi.TestInternalRedirect(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC cgi.TestKillChildAfterCopyError has: 
// func testKillChildAfterCopyError(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{9436464 0xc0043e50e0}))  {
// 	 := cgi.TestKillChildAfterCopyError(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC cgi.TestPathInfo has: 
// func testPathInfo(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{9424384 0xc0043beda0}))  {
// 	 := cgi.TestPathInfo(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC cgi.TestPathInfoDirRoot has: 
// func testPathInfoDirRoot(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{9424876 0xc0043bf2a0}))  {
// 	 := cgi.TestPathInfoDirRoot(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC cgi.TestPathInfoNoRoot has: 
// func testPathInfoNoRoot(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{9426558 0xc0043c2300}))  {
// 	 := cgi.TestPathInfoNoRoot(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC cgi.TestRedirect has: 
// func testRedirect(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{9428180 0xc0043c35e0}))  {
// 	 := cgi.TestRedirect(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC cgi.TestRemoveLeadingDuplicates has: 
// func testRemoveLeadingDuplicates(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{9433517 0xc0043dca60}))  {
// 	 := cgi.TestRemoveLeadingDuplicates(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC cgi.TestRequest has: 
// func testRequest(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{9415478 0xc004382e40}))  {
// 	 := cgi.TestRequest(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC cgi.TestRequestWithTLS has: 
// func testRequestWithTLS(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{9417127 0xc0043a0be0}))  {
// 	 := cgi.TestRequestWithTLS(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC cgi.TestRequestWithoutHost has: 
// func testRequestWithoutHost(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{9417728 0xc0043a1460}))  {
// 	 := cgi.TestRequestWithoutHost(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC cgi.TestRequestWithoutRemotePort has: 
// func testRequestWithoutRemotePort(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{9418790 0xc0043a8460}))  {
// 	 := cgi.TestRequestWithoutRemotePort(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC cgi.TestRequestWithoutRequestURI has: 
// func testRequestWithoutRequestURI(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{9418200 0xc0043a1c20}))  {
// 	 := cgi.TestRequestWithoutRequestURI(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC cgo._cgo_panic has: 
// func _cgo_panic(a ABEND881(unrecognized Expr type *ast.SelectorExpr at: &{unsafe Pointer}), n Object)  {
// 	 := cgo._cgo_panic(a, n)
// 	...ABEND: TODO...
// }
// 
GO FUNC cgo._runtime_cgocallback has: 
// func _runtime_cgocallback()  {
// 	 := cgo._runtime_cgocallback()
// 	...ABEND: TODO...
// }
// 
GO FUNC chacha20poly1305.BenchmarkChacha20Poly1305Open_1350 has: 
// func benchmarkChacha20Poly1305Open_1350(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{14386264 0xc0059c7500}))  {
// 	 := chacha20poly1305.BenchmarkChacha20Poly1305Open_1350(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC chacha20poly1305.BenchmarkChacha20Poly1305Open_64 has: 
// func benchmarkChacha20Poly1305Open_64(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{14386042 0xc0059c7180}))  {
// 	 := chacha20poly1305.BenchmarkChacha20Poly1305Open_64(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC chacha20poly1305.BenchmarkChacha20Poly1305Open_8K has: 
// func benchmarkChacha20Poly1305Open_8K(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{14386490 0xc0059c7880}))  {
// 	 := chacha20poly1305.BenchmarkChacha20Poly1305Open_8K(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC chacha20poly1305.BenchmarkChacha20Poly1305Seal_1350 has: 
// func benchmarkChacha20Poly1305Seal_1350(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{14386378 0xc0059c76c0}))  {
// 	 := chacha20poly1305.BenchmarkChacha20Poly1305Seal_1350(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC chacha20poly1305.BenchmarkChacha20Poly1305Seal_64 has: 
// func benchmarkChacha20Poly1305Seal_64(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{14386152 0xc0059c7340}))  {
// 	 := chacha20poly1305.BenchmarkChacha20Poly1305Seal_64(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC chacha20poly1305.BenchmarkChacha20Poly1305Seal_8K has: 
// func benchmarkChacha20Poly1305Seal_8K(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{14386604 0xc0059c7a60}))  {
// 	 := chacha20poly1305.BenchmarkChacha20Poly1305Seal_8K(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC chacha20poly1305.TestRandom has: 
// func testRandom(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{14383904 0xc0059b27c0}))  {
// 	 := chacha20poly1305.TestRandom(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC chacha20poly1305.TestVectors has: 
// func testVectors(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{14382444 0xc00584eb20}))  {
// 	 := chacha20poly1305.TestVectors(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC cipher.TestXOR has: 
// func testXOR(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{997732 0xc000aa9ce0}))  {
// 	 := cipher.TestXOR(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC cipher_test.BenchmarkAESCBCDecrypt1K has: 
// func benchmarkAESCBCDecrypt1K(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{1063061 0xc0007d4900}))  {
// 	 := cipher_test.BenchmarkAESCBCDecrypt1K(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC cipher_test.BenchmarkAESCBCEncrypt1K has: 
// func benchmarkAESCBCEncrypt1K(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{1062785 0xc0007d4240}))  {
// 	 := cipher_test.BenchmarkAESCBCEncrypt1K(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC cipher_test.BenchmarkAESCFBDecrypt1K has: 
// func benchmarkAESCFBDecrypt1K(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{1061923 0xc0007dec80}))  {
// 	 := cipher_test.BenchmarkAESCFBDecrypt1K(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC cipher_test.BenchmarkAESCFBEncrypt1K has: 
// func benchmarkAESCFBEncrypt1K(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{1061625 0xc0007de580}))  {
// 	 := cipher_test.BenchmarkAESCFBEncrypt1K(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC cipher_test.BenchmarkAESCTR1K has: 
// func benchmarkAESCTR1K(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{1062496 0xc0007dfae0}))  {
// 	 := cipher_test.BenchmarkAESCTR1K(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC cipher_test.BenchmarkAESGCMOpen1K has: 
// func benchmarkAESGCMOpen1K(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{1061011 0xc0007e1ca0}))  {
// 	 := cipher_test.BenchmarkAESGCMOpen1K(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC cipher_test.BenchmarkAESGCMOpen8K has: 
// func benchmarkAESGCMOpen8K(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{1061285 0xc0007de240}))  {
// 	 := cipher_test.BenchmarkAESGCMOpen8K(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC cipher_test.BenchmarkAESGCMSeal1K has: 
// func benchmarkAESGCMSeal1K(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{1060921 0xc0007e1ac0}))  {
// 	 := cipher_test.BenchmarkAESGCMSeal1K(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC cipher_test.BenchmarkAESGCMSeal8K has: 
// func benchmarkAESGCMSeal8K(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{1061193 0xc0007de060}))  {
// 	 := cipher_test.BenchmarkAESGCMSeal8K(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC cipher_test.BenchmarkAESGCMSign8K has: 
// func benchmarkAESGCMSign8K(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{1061101 0xc0007e1e80}))  {
// 	 := cipher_test.BenchmarkAESGCMSign8K(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC cipher_test.BenchmarkAESOFB1K has: 
// func benchmarkAESOFB1K(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{1062214 0xc0007df3c0}))  {
// 	 := cipher_test.BenchmarkAESOFB1K(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC cipher_test.ExampleNewCBCDecrypter has: 
// func exampleNewCBCDecrypter()  {
// 	 := cipher_test.ExampleNewCBCDecrypter()
// 	...ABEND: TODO...
// }
// 
GO FUNC cipher_test.ExampleNewCBCEncrypter has: 
// func exampleNewCBCEncrypter()  {
// 	 := cipher_test.ExampleNewCBCEncrypter()
// 	...ABEND: TODO...
// }
// 
GO FUNC cipher_test.ExampleNewCFBDecrypter has: 
// func exampleNewCFBDecrypter()  {
// 	 := cipher_test.ExampleNewCFBDecrypter()
// 	...ABEND: TODO...
// }
// 
GO FUNC cipher_test.ExampleNewCFBEncrypter has: 
// func exampleNewCFBEncrypter()  {
// 	 := cipher_test.ExampleNewCFBEncrypter()
// 	...ABEND: TODO...
// }
// 
GO FUNC cipher_test.ExampleNewCTR has: 
// func exampleNewCTR()  {
// 	 := cipher_test.ExampleNewCTR()
// 	...ABEND: TODO...
// }
// 
GO FUNC cipher_test.ExampleNewGCM_decrypt has: 
// func exampleNewGCM_decrypt()  {
// 	 := cipher_test.ExampleNewGCM_decrypt()
// 	...ABEND: TODO...
// }
// 
GO FUNC cipher_test.ExampleNewGCM_encrypt has: 
// func exampleNewGCM_encrypt()  {
// 	 := cipher_test.ExampleNewGCM_encrypt()
// 	...ABEND: TODO...
// }
// 
GO FUNC cipher_test.ExampleNewOFB has: 
// func exampleNewOFB()  {
// 	 := cipher_test.ExampleNewOFB()
// 	...ABEND: TODO...
// }
// 
GO FUNC cipher_test.ExampleStreamReader has: 
// func exampleStreamReader()  {
// 	 := cipher_test.ExampleStreamReader()
// 	...ABEND: TODO...
// }
// 
GO FUNC cipher_test.ExampleStreamWriter has: 
// func exampleStreamWriter()  {
// 	 := cipher_test.ExampleStreamWriter()
// 	...ABEND: TODO...
// }
// 
GO FUNC cipher_test.TestAESGCM has: 
// func testAESGCM(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{1039694 0xc000b32cc0}))  {
// 	 := cipher_test.TestAESGCM(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC cipher_test.TestCBCDecrypterAES has: 
// func testCBCDecrypterAES(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{1052778 0xc0007f83e0}))  {
// 	 := cipher_test.TestCBCDecrypterAES(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC cipher_test.TestCBCEncrypterAES has: 
// func testCBCEncrypterAES(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{1052285 0xc00080b840}))  {
// 	 := cipher_test.TestCBCEncrypterAES(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC cipher_test.TestCFBInverse has: 
// func testCFBInverse(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{1049568 0xc000828960}))  {
// 	 := cipher_test.TestCFBInverse(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC cipher_test.TestCFBVectors has: 
// func testCFBVectors(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{1048538 0xc000845d00}))  {
// 	 := cipher_test.TestCFBVectors(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC cipher_test.TestCTR has: 
// func testCTR(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{996969 0xc000aa8f20}))  {
// 	 := cipher_test.TestCTR(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC cipher_test.TestCTR_AES has: 
// func testCTR_AES(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{1025017 0xc000b1be00}))  {
// 	 := cipher_test.TestCTR_AES(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC cipher_test.TestCryptBlocks has: 
// func testCryptBlocks(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{1017384 0xc000afc3a0}))  {
// 	 := cipher_test.TestCryptBlocks(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC cipher_test.TestEmptyPlaintext has: 
// func testEmptyPlaintext(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{1018220 0xc000afd2a0}))  {
// 	 := cipher_test.TestEmptyPlaintext(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC cipher_test.TestGCMAsm has: 
// func testGCMAsm(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{1044821 0xc0005e5540}))  {
// 	 := cipher_test.TestGCMAsm(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC cipher_test.TestGCMCounterWrap has: 
// func testGCMCounterWrap(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{1042890 0xc00030cf20}))  {
// 	 := cipher_test.TestGCMCounterWrap(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC cipher_test.TestGCMInvalidTagSize has: 
// func testGCMInvalidTagSize(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{1041514 0xc0009af840}))  {
// 	 := cipher_test.TestGCMInvalidTagSize(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC cipher_test.TestOFB has: 
// func testOFB(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{1081047 0xc0006db560}))  {
// 	 := cipher_test.TestOFB(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC cipher_test.TestTagFailureOverwrite has: 
// func testTagFailureOverwrite(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{1041914 0xc00087ee40}))  {
// 	 := cipher_test.TestTagFailureOverwrite(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC cmplx.BenchmarkAbs has: 
// func benchmarkAbs(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{7192050 0xc0033f6b60}))  {
// 	 := cmplx.BenchmarkAbs(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC cmplx.BenchmarkAcos has: 
// func benchmarkAcos(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{7192143 0xc0033f6de0}))  {
// 	 := cmplx.BenchmarkAcos(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC cmplx.BenchmarkAcosh has: 
// func benchmarkAcosh(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{7192238 0xc0033f7060}))  {
// 	 := cmplx.BenchmarkAcosh(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC cmplx.BenchmarkAsin has: 
// func benchmarkAsin(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{7192333 0xc0033f72e0}))  {
// 	 := cmplx.BenchmarkAsin(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC cmplx.BenchmarkAsinh has: 
// func benchmarkAsinh(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{7192428 0xc0033f7560}))  {
// 	 := cmplx.BenchmarkAsinh(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC cmplx.BenchmarkAtan has: 
// func benchmarkAtan(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{7192523 0xc0033f77e0}))  {
// 	 := cmplx.BenchmarkAtan(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC cmplx.BenchmarkAtanh has: 
// func benchmarkAtanh(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{7192618 0xc0033f7a60}))  {
// 	 := cmplx.BenchmarkAtanh(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC cmplx.BenchmarkConj has: 
// func benchmarkConj(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{7192713 0xc0033f7ce0}))  {
// 	 := cmplx.BenchmarkConj(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC cmplx.BenchmarkCos has: 
// func benchmarkCos(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{7192806 0xc0033f7f60}))  {
// 	 := cmplx.BenchmarkCos(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC cmplx.BenchmarkCosh has: 
// func benchmarkCosh(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{7192899 0xc0033fe1e0}))  {
// 	 := cmplx.BenchmarkCosh(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC cmplx.BenchmarkExp has: 
// func benchmarkExp(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{7192992 0xc0033fe460}))  {
// 	 := cmplx.BenchmarkExp(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC cmplx.BenchmarkLog has: 
// func benchmarkLog(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{7193084 0xc0033fe6e0}))  {
// 	 := cmplx.BenchmarkLog(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC cmplx.BenchmarkLog10 has: 
// func benchmarkLog10(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{7193178 0xc0033fe960}))  {
// 	 := cmplx.BenchmarkLog10(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC cmplx.BenchmarkPhase has: 
// func benchmarkPhase(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{7193274 0xc0033febe0}))  {
// 	 := cmplx.BenchmarkPhase(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC cmplx.BenchmarkPolar has: 
// func benchmarkPolar(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{7193370 0xc0033fee60}))  {
// 	 := cmplx.BenchmarkPolar(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC cmplx.BenchmarkPow has: 
// func benchmarkPow(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{7193464 0xc0033ff0e0}))  {
// 	 := cmplx.BenchmarkPow(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC cmplx.BenchmarkRect has: 
// func benchmarkRect(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{7193576 0xc0033ff400}))  {
// 	 := cmplx.BenchmarkRect(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC cmplx.BenchmarkSin has: 
// func benchmarkSin(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{7193660 0xc0033ff660}))  {
// 	 := cmplx.BenchmarkSin(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC cmplx.BenchmarkSinh has: 
// func benchmarkSinh(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{7193753 0xc0033ff8e0}))  {
// 	 := cmplx.BenchmarkSinh(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC cmplx.BenchmarkSqrt has: 
// func benchmarkSqrt(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{7193847 0xc0033ffb60}))  {
// 	 := cmplx.BenchmarkSqrt(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC cmplx.BenchmarkTan has: 
// func benchmarkTan(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{7193940 0xc0033ffde0}))  {
// 	 := cmplx.BenchmarkTan(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC cmplx.BenchmarkTanh has: 
// func benchmarkTanh(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{7194033 0xc003406060}))  {
// 	 := cmplx.BenchmarkTanh(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC cmplx.TestAbs has: 
// func testAbs(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{7182258 0xc0033c2da0}))  {
// 	 := cmplx.TestAbs(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC cmplx.TestAcos has: 
// func testAcos(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{7182585 0xc0033c3560}))  {
// 	 := cmplx.TestAcos(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC cmplx.TestAcosh has: 
// func testAcosh(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{7183106 0xc0033ca0e0}))  {
// 	 := cmplx.TestAcosh(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC cmplx.TestAsin has: 
// func testAsin(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{7183640 0xc0033cac60}))  {
// 	 := cmplx.TestAsin(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC cmplx.TestAsinh has: 
// func testAsinh(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{7184161 0xc0033cb7e0}))  {
// 	 := cmplx.TestAsinh(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC cmplx.TestAtan has: 
// func testAtan(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{7184695 0xc0033ce360}))  {
// 	 := cmplx.TestAtan(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC cmplx.TestAtanh has: 
// func testAtanh(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{7185211 0xc0033ceec0}))  {
// 	 := cmplx.TestAtanh(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC cmplx.TestConj has: 
// func testConj(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{7185740 0xc0033cfa20}))  {
// 	 := cmplx.TestConj(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC cmplx.TestCos has: 
// func testCos(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{7186079 0xc0033dc1e0}))  {
// 	 := cmplx.TestCos(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC cmplx.TestCosh has: 
// func testCosh(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{7186413 0xc0033dc9c0}))  {
// 	 := cmplx.TestCosh(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC cmplx.TestExp has: 
// func testExp(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{7186757 0xc0033dd1a0}))  {
// 	 := cmplx.TestExp(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC cmplx.TestInfiniteLoopIntanSeries has: 
// func testInfiniteLoopIntanSeries(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{7191913 0xc0033f68a0}))  {
// 	 := cmplx.TestInfiniteLoopIntanSeries(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC cmplx.TestIsNaN has: 
// func testIsNaN(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{7187092 0xc0033dd980}))  {
// 	 := cmplx.TestIsNaN(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC cmplx.TestLog has: 
// func testLog(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{7187286 0xc0033ddd60}))  {
// 	 := cmplx.TestLog(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC cmplx.TestLog10 has: 
// func testLog10(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{7187788 0xc0033e08c0}))  {
// 	 := cmplx.TestLog10(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC cmplx.TestPolar has: 
// func testPolar(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{7188140 0xc0033e1080}))  {
// 	 := cmplx.TestPolar(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC cmplx.TestPow has: 
// func testPow(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{7188645 0xc0033e1d00}))  {
// 	 := cmplx.TestPow(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC cmplx.TestRect has: 
// func testRect(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{7189573 0xc0033e7280}))  {
// 	 := cmplx.TestRect(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC cmplx.TestSin has: 
// func testSin(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{7190002 0xc0033e7d80}))  {
// 	 := cmplx.TestSin(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC cmplx.TestSinh has: 
// func testSinh(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{7190336 0xc0033ee560}))  {
// 	 := cmplx.TestSinh(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC cmplx.TestSqrt has: 
// func testSqrt(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{7190681 0xc0033eed40}))  {
// 	 := cmplx.TestSqrt(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC cmplx.TestTan has: 
// func testTan(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{7191195 0xc0033ef8a0}))  {
// 	 := cmplx.TestTan(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC cmplx.TestTanh has: 
// func testTanh(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{7191529 0xc0033f6080}))  {
// 	 := cmplx.TestTanh(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC cmplx_test.ExampleAbs has: 
// func exampleAbs()  {
// 	 := cmplx_test.ExampleAbs()
// 	...ABEND: TODO...
// }
// 
GO FUNC cmplx_test.ExampleExp has: 
// func exampleExp()  {
// 	 := cmplx_test.ExampleExp()
// 	...ABEND: TODO...
// }
// 
GO FUNC cmplx_test.ExamplePolar has: 
// func examplePolar()  {
// 	 := cmplx_test.ExamplePolar()
// 	...ABEND: TODO...
// }
// 
GO FUNC color.BenchmarkNYCbCrAToRGBA has: 
// func benchmarkNYCbCrAToRGBA(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{6006816 0xc002960ec0}))  {
// 	 := color.BenchmarkNYCbCrAToRGBA(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC color.BenchmarkRGBToYCbCr has: 
// func benchmarkRGBToYCbCr(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{6005699 0xc002957440}))  {
// 	 := color.BenchmarkRGBToYCbCr(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC color.BenchmarkYCbCrToRGB has: 
// func benchmarkYCbCrToRGB(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{6005161 0xc002956820}))  {
// 	 := color.BenchmarkYCbCrToRGB(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC color.BenchmarkYCbCrToRGBA has: 
// func benchmarkYCbCrToRGBA(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{6006216 0xc002960060}))  {
// 	 := color.BenchmarkYCbCrToRGBA(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC color.TestCMYKGray has: 
// func testCMYKGray(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{6004203 0xc0029522a0}))  {
// 	 := color.TestCMYKGray(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC color.TestCMYKRoundtrip has: 
// func testCMYKRoundtrip(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{6002892 0xc002938340}))  {
// 	 := color.TestCMYKRoundtrip(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC color.TestCMYKToRGBConsistency has: 
// func testCMYKToRGBConsistency(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{6003563 0xc002938ec0}))  {
// 	 := color.TestCMYKToRGBConsistency(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC color.TestNYCbCrAAlpha has: 
// func testNYCbCrAAlpha(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{6002233 0xc0029357c0}))  {
// 	 := color.TestNYCbCrAAlpha(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC color.TestNYCbCrAYCbCr has: 
// func testNYCbCrAYCbCr(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{6002536 0xc002935d40}))  {
// 	 := color.TestNYCbCrAYCbCr(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC color.TestPalette has: 
// func testPalette(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{6004396 0xc002952720}))  {
// 	 := color.TestPalette(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC color.TestSqDiff has: 
// func testSqDiff(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{6007665 0xc00296c3c0}))  {
// 	 := color.TestSqDiff(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC color.TestYCbCrGray has: 
// func testYCbCrGray(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{6001946 0xc002934620}))  {
// 	 := color.TestYCbCrGray(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC color.TestYCbCrRoundtrip has: 
// func testYCbCrRoundtrip(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{6000692 0xc0028b49e0}))  {
// 	 := color.TestYCbCrRoundtrip(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC color.TestYCbCrToRGBConsistency has: 
// func testYCbCrToRGBConsistency(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{6001361 0xc002918480}))  {
// 	 := color.TestYCbCrToRGBConsistency(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC constant.BenchmarkStringAdd has: 
// func benchmarkStringAdd(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{4600138 0xc001a89940}))  {
// 	 := constant.BenchmarkStringAdd(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC constant.TestBytes has: 
// func testBytes(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{4598948 0xc001a88400}))  {
// 	 := constant.TestBytes(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC constant.TestFractions has: 
// func testFractions(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{4598351 0xc001a85ce0}))  {
// 	 := constant.TestFractions(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC constant.TestOps has: 
// func testOps(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{4592218 0xc00148bf40}))  {
// 	 := constant.TestOps(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC constant.TestString has: 
// func testString(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{4595921 0xc001a42c20}))  {
// 	 := constant.TestString(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC constant.TestUnknown has: 
// func testUnknown(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{4599425 0xc001a88c60}))  {
// 	 := constant.TestUnknown(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC constant_test.ExampleBinaryOp has: 
// func exampleBinaryOp()  {
// 	 := constant_test.ExampleBinaryOp()
// 	...ABEND: TODO...
// }
// 
GO FUNC constant_test.ExampleCompare has: 
// func exampleCompare()  {
// 	 := constant_test.ExampleCompare()
// 	...ABEND: TODO...
// }
// 
GO FUNC constant_test.ExampleSign has: 
// func exampleSign()  {
// 	 := constant_test.ExampleSign()
// 	...ABEND: TODO...
// }
// 
GO FUNC constant_test.ExampleUnaryOp has: 
// func exampleUnaryOp()  {
// 	 := constant_test.ExampleUnaryOp()
// 	...ABEND: TODO...
// }
// 
GO FUNC constant_test.Example_complexNumbers has: 
// func example_complexNumbers()  {
// 	 := constant_test.Example_complexNumbers()
// 	...ABEND: TODO...
// }
// 
GO FUNC context.XTestAllocs has: 
// func xTestAllocs(t Object, testingShort ABEND881(unrecognized Expr type *ast.FuncType at: &{900152 0xc00095b620 0xc00095b650}), testingAllocsPerRun ABEND881(unrecognized Expr type *ast.FuncType at: &{900185 0xc00095b710 0xc00095b740}))  {
// 	 := context.XTestAllocs(t, testingShort, testingAllocsPerRun)
// 	...ABEND: TODO...
// }
// 
GO FUNC context.XTestBackground has: 
// func xTestBackground(t Object)  {
// 	 := context.XTestBackground(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC context.XTestCancelRemoves has: 
// func xTestCancelRemoves(t Object)  {
// 	 := context.XTestCancelRemoves(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC context.XTestCanceledTimeout has: 
// func xTestCanceledTimeout(t Object)  {
// 	 := context.XTestCanceledTimeout(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC context.XTestChildFinishesFirst has: 
// func xTestChildFinishesFirst(t Object)  {
// 	 := context.XTestChildFinishesFirst(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC context.XTestDeadline has: 
// func xTestDeadline(t Object)  {
// 	 := context.XTestDeadline(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC context.XTestDeadlineExceededSupportsTimeout has: 
// func xTestDeadlineExceededSupportsTimeout(t Object)  {
// 	 := context.XTestDeadlineExceededSupportsTimeout(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC context.XTestInterlockedCancels has: 
// func xTestInterlockedCancels(t Object)  {
// 	 := context.XTestInterlockedCancels(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC context.XTestLayersCancel has: 
// func xTestLayersCancel(t Object)  {
// 	 := context.XTestLayersCancel(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC context.XTestLayersTimeout has: 
// func xTestLayersTimeout(t Object)  {
// 	 := context.XTestLayersTimeout(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC context.XTestParentFinishesChild has: 
// func xTestParentFinishesChild(t Object)  {
// 	 := context.XTestParentFinishesChild(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC context.XTestSimultaneousCancels has: 
// func xTestSimultaneousCancels(t Object)  {
// 	 := context.XTestSimultaneousCancels(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC context.XTestTODO has: 
// func xTestTODO(t Object)  {
// 	 := context.XTestTODO(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC context.XTestTimeout has: 
// func xTestTimeout(t Object)  {
// 	 := context.XTestTimeout(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC context.XTestValues has: 
// func xTestValues(t Object)  {
// 	 := context.XTestValues(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC context.XTestWithCancel has: 
// func xTestWithCancel(t Object)  {
// 	 := context.XTestWithCancel(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC context.XTestWithCancelCanceledParent has: 
// func xTestWithCancelCanceledParent(t Object)  {
// 	 := context.XTestWithCancelCanceledParent(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC context.XTestWithValueChecksKey has: 
// func xTestWithValueChecksKey(t Object)  {
// 	 := context.XTestWithValueChecksKey(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC context_test.BenchmarkCancelTree has: 
// func benchmarkCancelTree(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{908546 0xc000997fc0}))  {
// 	 := context_test.BenchmarkCancelTree(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC context_test.BenchmarkCheckCanceled has: 
// func benchmarkCheckCanceled(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{909334 0xc0009990e0}))  {
// 	 := context_test.BenchmarkCheckCanceled(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC context_test.BenchmarkCommonParentCancel has: 
// func benchmarkCommonParentCancel(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{907011 0xc000996200}))  {
// 	 := context_test.BenchmarkCommonParentCancel(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC context_test.BenchmarkWithTimeout has: 
// func benchmarkWithTimeout(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{907495 0xc000996b80}))  {
// 	 := context_test.BenchmarkWithTimeout(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC context_test.ExampleWithCancel has: 
// func exampleWithCancel()  {
// 	 := context_test.ExampleWithCancel()
// 	...ABEND: TODO...
// }
// 
GO FUNC context_test.ExampleWithDeadline has: 
// func exampleWithDeadline()  {
// 	 := context_test.ExampleWithDeadline()
// 	...ABEND: TODO...
// }
// 
GO FUNC context_test.ExampleWithTimeout has: 
// func exampleWithTimeout()  {
// 	 := context_test.ExampleWithTimeout()
// 	...ABEND: TODO...
// }
// 
GO FUNC context_test.ExampleWithValue has: 
// func exampleWithValue()  {
// 	 := context_test.ExampleWithValue()
// 	...ABEND: TODO...
// }
// 
GO FUNC context_test.TestAllocs has: 
// func testAllocs(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{888945 0xc000937980}))  {
// 	 := context_test.TestAllocs(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC context_test.TestBackground has: 
// func testBackground(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{888240 0xc000936f00}))  {
// 	 := context_test.TestBackground(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC context_test.TestCancelRemoves has: 
// func testCancelRemoves(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{889397 0xc000944000}))  {
// 	 := context_test.TestCancelRemoves(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC context_test.TestCanceledTimeout has: 
// func testCanceledTimeout(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{888797 0xc000937740}))  {
// 	 := context_test.TestCanceledTimeout(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC context_test.TestChildFinishesFirst has: 
// func testChildFinishesFirst(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{888563 0xc0009373e0}))  {
// 	 := context_test.TestChildFinishesFirst(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC context_test.TestDeadline has: 
// func testDeadline(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{888639 0xc000937500}))  {
// 	 := context_test.TestDeadline(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC context_test.TestDeadlineExceededIsNetError has: 
// func testDeadlineExceededIsNetError(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{887722 0xc0009367e0}))  {
// 	 := context_test.TestDeadlineExceededIsNetError(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC context_test.TestDeadlineExceededSupportsTimeout has: 
// func testDeadlineExceededSupportsTimeout(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{889674 0xc000944360}))  {
// 	 := context_test.TestDeadlineExceededSupportsTimeout(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC context_test.TestInterlockedCancels has: 
// func testInterlockedCancels(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{889155 0xc000937ca0}))  {
// 	 := context_test.TestInterlockedCancels(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC context_test.TestLayersCancel has: 
// func testLayersCancel(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{889235 0xc000937dc0}))  {
// 	 := context_test.TestLayersCancel(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC context_test.TestLayersTimeout has: 
// func testLayersTimeout(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{889316 0xc000937ee0}))  {
// 	 := context_test.TestLayersTimeout(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC context_test.TestParentFinishesChild has: 
// func testParentFinishesChild(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{888477 0xc0009372c0}))  {
// 	 := context_test.TestParentFinishesChild(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC context_test.TestSimultaneousCancels has: 
// func testSimultaneousCancels(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{889069 0xc000937b80}))  {
// 	 := context_test.TestSimultaneousCancels(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC context_test.TestTODO has: 
// func testTODO(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{888312 0xc000937080}))  {
// 	 := context_test.TestTODO(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC context_test.TestTimeout has: 
// func testTimeout(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{888714 0xc000937620}))  {
// 	 := context_test.TestTimeout(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC context_test.TestValues has: 
// func testValues(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{888871 0xc000937860}))  {
// 	 := context_test.TestValues(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC context_test.TestWithCancel has: 
// func testWithCancel(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{888390 0xc0009371a0}))  {
// 	 := context_test.TestWithCancel(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC context_test.TestWithCancelCanceledParent has: 
// func testWithCancelCanceledParent(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{889489 0xc000944120}))  {
// 	 := context_test.TestWithCancelCanceledParent(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC context_test.TestWithValueChecksKey has: 
// func testWithValueChecksKey(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{889575 0xc000944240}))  {
// 	 := context_test.TestWithValueChecksKey(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC cookiejar.TestBasics has: 
// func testBasics(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{9482537 0xc004481f40}))  {
// 	 := cookiejar.TestBasics(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC cookiejar.TestCanonicalHost has: 
// func testCanonicalHost(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{9469053 0xc004464640}))  {
// 	 := cookiejar.TestCanonicalHost(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC cookiejar.TestChromiumBasics has: 
// func testChromiumBasics(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{9491391 0xc004494860}))  {
// 	 := cookiejar.TestChromiumBasics(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC cookiejar.TestChromiumDeletion has: 
// func testChromiumDeletion(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{9494315 0xc0044a6280}))  {
// 	 := cookiejar.TestChromiumDeletion(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC cookiejar.TestChromiumDomain has: 
// func testChromiumDomain(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{9492899 0xc004495460}))  {
// 	 := cookiejar.TestChromiumDomain(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC cookiejar.TestDefaultPath has: 
// func testDefaultPath(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{9472385 0xc00446ac80}))  {
// 	 := cookiejar.TestDefaultPath(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC cookiejar.TestDomainAndType has: 
// func testDomainAndType(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{9474308 0xc004478580}))  {
// 	 := cookiejar.TestDomainAndType(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC cookiejar.TestDomainHandling has: 
// func testDomainHandling(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{9498480 0xc0044a8cc0}))  {
// 	 := cookiejar.TestDomainHandling(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC cookiejar.TestExpiration has: 
// func testExpiration(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{9486085 0xc004485e20}))  {
// 	 := cookiejar.TestExpiration(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC cookiejar.TestHasDotSuffix has: 
// func testHasDotSuffix(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{9467740 0xc00445da40}))  {
// 	 := cookiejar.TestHasDotSuffix(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC cookiejar.TestHasPort has: 
// func testHasPort(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{9469668 0xc004464f00}))  {
// 	 := cookiejar.TestHasPort(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC cookiejar.TestIsIP has: 
// func testIsIP(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{9471889 0xc00446a5e0}))  {
// 	 := cookiejar.TestIsIP(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC cookiejar.TestIssue19384 has: 
// func testIssue19384(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{9498607 0xc0044a8f60}))  {
// 	 := cookiejar.TestIssue19384(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC cookiejar.TestJarKey has: 
// func testJarKey(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{9470596 0xc0044657c0}))  {
// 	 := cookiejar.TestJarKey(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC cookiejar.TestJarKeyNilPSL has: 
// func testJarKeyNilPSL(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{9471450 0xc00446a040}))  {
// 	 := cookiejar.TestJarKeyNilPSL(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC cookiejar.TestPunycode has: 
// func testPunycode(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{9465236 0xc00444cf60}))  {
// 	 := cookiejar.TestPunycode(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC cookiejar.TestUpdateAndDelete has: 
// func testUpdateAndDelete(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{9485958 0xc004485b80}))  {
// 	 := cookiejar.TestUpdateAndDelete(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC cookiejar_test.ExampleNew has: 
// func exampleNew()  {
// 	 := cookiejar_test.ExampleNew()
// 	...ABEND: TODO...
// }
// 
GO FUNC crc32.BenchmarkCRC32 has: 
// func benchmarkCRC32(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{5485621 0xc001ea13e0}))  {
// 	 := crc32.BenchmarkCRC32(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC crc32.TestArchCastagnoli has: 
// func testArchCastagnoli(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{5484292 0xc001ea0040}))  {
// 	 := crc32.TestArchCastagnoli(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC crc32.TestArchIEEE has: 
// func testArchIEEE(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{5483997 0xc002329e80}))  {
// 	 := crc32.TestArchIEEE(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC crc32.TestGolden has: 
// func testGolden(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{5484609 0xc001ea0480}))  {
// 	 := crc32.TestGolden(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC crc32.TestGoldenMarshal has: 
// func testGoldenMarshal(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{5481260 0xc002603080}))  {
// 	 := crc32.TestGoldenMarshal(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC crc32.TestMarshalTableMismatch has: 
// func testMarshalTableMismatch(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{5482938 0xc002328b20}))  {
// 	 := crc32.TestMarshalTableMismatch(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC crc32.TestSimple has: 
// func testSimple(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{5480986 0xc00290f840}))  {
// 	 := crc32.TestSimple(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC crc32.TestSlicing has: 
// func testSlicing(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{5483332 0xc002329120}))  {
// 	 := crc32.TestSlicing(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC crc32_test.ExampleMakeTable has: 
// func exampleMakeTable()  {
// 	 := crc32_test.ExampleMakeTable()
// 	...ABEND: TODO...
// }
// 
GO FUNC crc64.BenchmarkCrc64 has: 
// func benchmarkCrc64(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{5511176 0xc002036c60}))  {
// 	 := crc64.BenchmarkCrc64(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC crc64.TestGolden has: 
// func testGolden(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{5508362 0xc0020bc3a0}))  {
// 	 := crc64.TestGolden(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC crc64.TestGoldenMarshal has: 
// func testGoldenMarshal(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{5508850 0xc0020a9de0}))  {
// 	 := crc64.TestGoldenMarshal(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC crc64.TestMarshalTableMismatch has: 
// func testMarshalTableMismatch(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{5510533 0xc00203d400}))  {
// 	 := crc64.TestMarshalTableMismatch(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC crypto.RegisterHash has: 
// func registerHash(h Object, f ABEND881(unrecognized Expr type *ast.FuncType at: &{930294 0xc0009d7770 0xc0009d77a0}))  {
// 	 := crypto.RegisterHash(h, f)
// 	...ABEND: TODO...
// }
// 
GO FUNC crypto.TestCFBDecryptOutOfBoundsWrite has: 
// func testCFBDecryptOutOfBoundsWrite(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{926161 0xc0009cec20}))  {
// 	 := crypto.TestCFBDecryptOutOfBoundsWrite(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC crypto.TestCFBEncryptOutOfBoundsWrite has: 
// func testCFBEncryptOutOfBoundsWrite(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{926054 0xc0009cea60}))  {
// 	 := crypto.TestCFBEncryptOutOfBoundsWrite(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC crypto.TestCTROutOfBoundsWrite has: 
// func testCTROutOfBoundsWrite(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{925881 0xc0009ce6e0}))  {
// 	 := crypto.TestCTROutOfBoundsWrite(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC crypto.TestOFBOutOfBoundsWrite has: 
// func testOFBOutOfBoundsWrite(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{925964 0xc0009ce8a0}))  {
// 	 := crypto.TestOFBOutOfBoundsWrite(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC crypto.TestRC4OutOfBoundsWrite has: 
// func testRC4OutOfBoundsWrite(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{925598 0xc0009ce120}))  {
// 	 := crypto.TestRC4OutOfBoundsWrite(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC cryptobyte.TestASN1Int64 has: 
// func testASN1Int64(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{14738641 0xc005fb62c0}))  {
// 	 := cryptobyte.TestASN1Int64(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC cryptobyte.TestASN1ObjectIdentifier has: 
// func testASN1ObjectIdentifier(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{14726996 0xc005e1ba60}))  {
// 	 := cryptobyte.TestASN1ObjectIdentifier(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC cryptobyte.TestASN1Uint64 has: 
// func testASN1Uint64(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{14739554 0xc005fb7a20}))  {
// 	 := cryptobyte.TestASN1Uint64(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC cryptobyte.TestBytes has: 
// func testBytes(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{14732087 0xc005efdda0}))  {
// 	 := cryptobyte.TestBytes(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC cryptobyte.TestContinuationError has: 
// func testContinuationError(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{14731251 0xc005efce60}))  {
// 	 := cryptobyte.TestContinuationError(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC cryptobyte.TestContinuationNonError has: 
// func testContinuationNonError(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{14731694 0xc005efd620}))  {
// 	 := cryptobyte.TestContinuationNonError(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC cryptobyte.TestGeneratedPanic has: 
// func testGeneratedPanic(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{14731897 0xc005efd9e0}))  {
// 	 := cryptobyte.TestGeneratedPanic(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC cryptobyte.TestPreallocatedBuffer has: 
// func testPreallocatedBuffer(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{14737586 0xc005f9d040}))  {
// 	 := cryptobyte.TestPreallocatedBuffer(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC cryptobyte.TestReadASN1 has: 
// func testReadASN1(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{14721124 0xc005db6160}))  {
// 	 := cryptobyte.TestReadASN1(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC cryptobyte.TestReadASN1BitString has: 
// func testReadASN1BitString(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{14729845 0xc005e87400}))  {
// 	 := cryptobyte.TestReadASN1BitString(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC cryptobyte.TestReadASN1GeneralizedTime has: 
// func testReadASN1GeneralizedTime(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{14728194 0xc005e43480}))  {
// 	 := cryptobyte.TestReadASN1GeneralizedTime(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC cryptobyte.TestReadASN1IntegerInvalid has: 
// func testReadASN1IntegerInvalid(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{14726590 0xc005e1b280}))  {
// 	 := cryptobyte.TestReadASN1IntegerInvalid(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC cryptobyte.TestReadASN1IntegerSigned has: 
// func testReadASN1IntegerSigned(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{14723876 0xc005ddd720}))  {
// 	 := cryptobyte.TestReadASN1IntegerSigned(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC cryptobyte.TestReadASN1IntegerUnsigned has: 
// func testReadASN1IntegerUnsigned(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{14725812 0xc005e17fe0}))  {
// 	 := cryptobyte.TestReadASN1IntegerUnsigned(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC cryptobyte.TestReadASN1Optional has: 
// func testReadASN1Optional(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{14721496 0xc005db6a80}))  {
// 	 := cryptobyte.TestReadASN1Optional(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC cryptobyte.TestReadASN1OptionalInteger has: 
// func testReadASN1OptionalInteger(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{14723466 0xc005ddcec0}))  {
// 	 := cryptobyte.TestReadASN1OptionalInteger(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC cryptobyte.TestReadASN1OptionalOctetString has: 
// func testReadASN1OptionalOctetString(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{14722635 0xc005db7e80}))  {
// 	 := cryptobyte.TestReadASN1OptionalOctetString(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC cryptobyte.TestUMultiple has: 
// func testUMultiple(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{14734364 0xc005f4ad00}))  {
// 	 := cryptobyte.TestUMultiple(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC cryptobyte.TestUint16 has: 
// func testUint16(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{14733020 0xc005f1d1e0}))  {
// 	 := cryptobyte.TestUint16(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC cryptobyte.TestUint24 has: 
// func testUint24(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{14733401 0xc005f1d9a0}))  {
// 	 := cryptobyte.TestUint24(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC cryptobyte.TestUint24Truncation has: 
// func testUint24Truncation(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{14733803 0xc005f4a180}))  {
// 	 := cryptobyte.TestUint24Truncation(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC cryptobyte.TestUint32 has: 
// func testUint32(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{14733958 0xc005f4a500}))  {
// 	 := cryptobyte.TestUint32(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC cryptobyte.TestUint8 has: 
// func testUint8(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{14732658 0xc005f1ca40}))  {
// 	 := cryptobyte.TestUint8(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC cryptobyte.TestUint8LengthPrefixedMulti has: 
// func testUint8LengthPrefixedMulti(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{14735591 0xc005f5e640}))  {
// 	 := cryptobyte.TestUint8LengthPrefixedMulti(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC cryptobyte.TestUint8LengthPrefixedNested has: 
// func testUint8LengthPrefixedNested(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{14736524 0xc005f5fae0}))  {
// 	 := cryptobyte.TestUint8LengthPrefixedNested(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC cryptobyte.TestUint8LengthPrefixedSimple has: 
// func testUint8LengthPrefixedSimple(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{14734950 0xc005f4b940}))  {
// 	 := cryptobyte.TestUint8LengthPrefixedSimple(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC cryptobyte.TestWriteWithPendingChild has: 
// func testWriteWithPendingChild(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{14738011 0xc005f9da40}))  {
// 	 := cryptobyte.TestWriteWithPendingChild(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC cryptobyte_test.ExampleBuilderContinuation_errorHandling has: 
// func exampleBuilderContinuation_errorHandling()  {
// 	 := cryptobyte_test.ExampleBuilderContinuation_errorHandling()
// 	...ABEND: TODO...
// }
// 
GO FUNC cryptobyte_test.ExampleBuilder_aSN1 has: 
// func exampleBuilder_aSN1()  {
// 	 := cryptobyte_test.ExampleBuilder_aSN1()
// 	...ABEND: TODO...
// }
// 
GO FUNC cryptobyte_test.ExampleBuilder_lengthPrefixOverflow has: 
// func exampleBuilder_lengthPrefixOverflow()  {
// 	 := cryptobyte_test.ExampleBuilder_lengthPrefixOverflow()
// 	...ABEND: TODO...
// }
// 
GO FUNC cryptobyte_test.ExampleBuilder_lengthPrefixed has: 
// func exampleBuilder_lengthPrefixed()  {
// 	 := cryptobyte_test.ExampleBuilder_lengthPrefixed()
// 	...ABEND: TODO...
// }
// 
GO FUNC cryptobyte_test.ExampleString_aSN1 has: 
// func exampleString_aSN1()  {
// 	 := cryptobyte_test.ExampleString_aSN1()
// 	...ABEND: TODO...
// }
// 
GO FUNC cryptobyte_test.ExampleString_lengthPrefixed has: 
// func exampleString_lengthPrefixed()  {
// 	 := cryptobyte_test.ExampleString_lengthPrefixed()
// 	...ABEND: TODO...
// }
// 
GO FUNC csv.BenchmarkRead has: 
// func benchmarkRead(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{3337245 0xc000e9b260}))  {
// 	 := csv.BenchmarkRead(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC csv.BenchmarkReadLargeFields has: 
// func benchmarkReadLargeFields(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{3337611 0xc000e9b8c0}))  {
// 	 := csv.BenchmarkReadLargeFields(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC csv.BenchmarkReadReuseRecord has: 
// func benchmarkReadReuseRecord(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{3338686 0xc000e9bae0}))  {
// 	 := csv.BenchmarkReadReuseRecord(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC csv.BenchmarkReadReuseRecordLargeFields has: 
// func benchmarkReadReuseRecordLargeFields(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{3339166 0xc000ea0360}))  {
// 	 := csv.BenchmarkReadReuseRecordLargeFields(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC csv.BenchmarkReadReuseRecordWithFieldsPerRecord has: 
// func benchmarkReadReuseRecordWithFieldsPerRecord(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{3338832 0xc000e9bd40}))  {
// 	 := csv.BenchmarkReadReuseRecordWithFieldsPerRecord(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC csv.BenchmarkReadReuseRecordWithoutFieldsPerRecord has: 
// func benchmarkReadReuseRecordWithoutFieldsPerRecord(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{3339004 0xc000ea0040}))  {
// 	 := csv.BenchmarkReadReuseRecordWithoutFieldsPerRecord(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC csv.BenchmarkReadWithFieldsPerRecord has: 
// func benchmarkReadWithFieldsPerRecord(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{3337343 0xc000e9b3e0}))  {
// 	 := csv.BenchmarkReadWithFieldsPerRecord(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC csv.BenchmarkReadWithoutFieldsPerRecord has: 
// func benchmarkReadWithoutFieldsPerRecord(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{3337482 0xc000e9b640}))  {
// 	 := csv.BenchmarkReadWithoutFieldsPerRecord(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC csv.TestError has: 
// func testError(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{3312873 0xc000d5c200}))  {
// 	 := csv.TestError(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC csv.TestRead has: 
// func testRead(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{3325982 0xc000d81760}))  {
// 	 := csv.TestRead(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC csv.TestWrite has: 
// func testWrite(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{3312351 0xc000d59640}))  {
// 	 := csv.TestWrite(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC csv_test.ExampleReader has: 
// func exampleReader()  {
// 	 := csv_test.ExampleReader()
// 	...ABEND: TODO...
// }
// 
GO FUNC csv_test.ExampleReader_ReadAll has: 
// func exampleReader_ReadAll()  {
// 	 := csv_test.ExampleReader_ReadAll()
// 	...ABEND: TODO...
// }
// 
GO FUNC csv_test.ExampleReader_options has: 
// func exampleReader_options()  {
// 	 := csv_test.ExampleReader_options()
// 	...ABEND: TODO...
// }
// 
GO FUNC csv_test.ExampleWriter has: 
// func exampleWriter()  {
// 	 := csv_test.ExampleWriter()
// 	...ABEND: TODO...
// }
// 
GO FUNC csv_test.ExampleWriter_WriteAll has: 
// func exampleWriter_WriteAll()  {
// 	 := csv_test.ExampleWriter_WriteAll()
// 	...ABEND: TODO...
// }
// 
GO FUNC curve25519.BenchmarkScalarBaseMult has: 
// func benchmarkScalarBaseMult(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{14757267 0xc006112f20}))  {
// 	 := curve25519.BenchmarkScalarBaseMult(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC curve25519.ScalarBaseMult has: 
// func scalarBaseMult(dst ABEND881(unrecognized Expr type *ast.StarExpr at: &{14756581 0xc00368b1d0}), in ABEND881(unrecognized Expr type *ast.StarExpr at: &{14756581 0xc00368b1d0}))  {
// 	 := curve25519.ScalarBaseMult(dst, in)
// 	...ABEND: TODO...
// }
// 
GO FUNC curve25519.ScalarMult has: 
// func scalarMult(dst ABEND881(unrecognized Expr type *ast.StarExpr at: &{14756323 0xc00368aed0}), in ABEND881(unrecognized Expr type *ast.StarExpr at: &{14756323 0xc00368aed0}), base ABEND881(unrecognized Expr type *ast.StarExpr at: &{14756323 0xc00368aed0}))  {
// 	 := curve25519.ScalarMult(dst, in, base)
// 	...ABEND: TODO...
// }
// 
GO FUNC curve25519.TestBaseScalarMult has: 
// func testBaseScalarMult(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{14756954 0xc006112820}))  {
// 	 := curve25519.TestBaseScalarMult(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC debug.FreeOSMemory has: 
// func freeOSMemory()  {
// 	 := debug.FreeOSMemory()
// 	...ABEND: TODO...
// }
// 
GO FUNC debug.PrintStack has: 
// func printStack()  {
// 	 := debug.PrintStack()
// 	...ABEND: TODO...
// }
// 
GO FUNC debug.ReadGCStats has: 
// func readGCStats(stats ABEND881(unrecognized Expr type *ast.StarExpr at: &{12541923 GCStats}))  {
// 	 := debug.ReadGCStats(stats)
// 	...ABEND: TODO...
// }
// 
GO FUNC debug.SetTraceback has: 
// func setTraceback(level string)  {
// 	 := debug.SetTraceback(level)
// 	...ABEND: TODO...
// }
// 
GO FUNC debug.WriteHeapDump has: 
// func writeHeapDump(fd Object)  {
// 	 := debug.WriteHeapDump(fd)
// 	...ABEND: TODO...
// }
// 
GO FUNC debug_test.TestFreeOSMemory has: 
// func testFreeOSMemory(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{12537627 0xc0058f5aa0}))  {
// 	 := debug_test.TestFreeOSMemory(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC debug_test.TestReadGCStats has: 
// func testReadGCStats(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{12535243 0xc0058f0f20}))  {
// 	 := debug_test.TestReadGCStats(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC debug_test.TestSetGCPercent has: 
// func testSetGCPercent(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{12538098 0xc0058fc1c0}))  {
// 	 := debug_test.TestSetGCPercent(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC debug_test.TestSetMaxThreadsOvf has: 
// func testSetMaxThreadsOvf(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{12540200 0xc005904040}))  {
// 	 := debug_test.TestSetMaxThreadsOvf(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC debug_test.TestStack has: 
// func testStack(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{12534260 0xc0058f00c0}))  {
// 	 := debug_test.TestStack(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC debug_test.TestWriteHeapDumpFinalizers has: 
// func testWriteHeapDumpFinalizers(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{12548613 0xc005916600}))  {
// 	 := debug_test.TestWriteHeapDumpFinalizers(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC debug_test.TestWriteHeapDumpNonempty has: 
// func testWriteHeapDumpNonempty(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{12547965 0xc0059119a0}))  {
// 	 := debug_test.TestWriteHeapDumpNonempty(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC des.BenchmarkDecrypt has: 
// func benchmarkDecrypt(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{1139966 0xc000944560}))  {
// 	 := des.BenchmarkDecrypt(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC des.BenchmarkEncrypt has: 
// func benchmarkEncrypt(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{1139688 0xc0009257e0}))  {
// 	 := des.BenchmarkEncrypt(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC des.BenchmarkTDESDecrypt has: 
// func benchmarkTDESDecrypt(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{1140547 0xc000974c00}))  {
// 	 := des.BenchmarkTDESDecrypt(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC des.BenchmarkTDESEncrypt has: 
// func benchmarkTDESEncrypt(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{1140250 0xc00095c360}))  {
// 	 := des.BenchmarkTDESEncrypt(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC des.TestDESDecryptBlock has: 
// func testDESDecryptBlock(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{1134858 0xc0008c8760}))  {
// 	 := des.TestDESDecryptBlock(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC des.TestDESEncryptBlock has: 
// func testDESEncryptBlock(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{1134579 0xc0008c80a0}))  {
// 	 := des.TestDESEncryptBlock(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC des.TestDecryptTripleDES has: 
// func testDecryptTripleDES(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{1135426 0xc0008d4b40}))  {
// 	 := des.TestDecryptTripleDES(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC des.TestEncryptTripleDES has: 
// func testEncryptTripleDES(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{1135145 0xc0008c9ec0}))  {
// 	 := des.TestEncryptTripleDES(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC des.TestFinalPermute has: 
// func testFinalPermute(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{1139427 0xc0009245a0}))  {
// 	 := des.TestFinalPermute(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC des.TestInitialPermutationKnownAnswer has: 
// func testInitialPermutationKnownAnswer(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{1136907 0xc00090e6c0}))  {
// 	 := des.TestInitialPermutationKnownAnswer(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC des.TestInitialPermute has: 
// func testInitialPermute(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{1139166 0xc0009240c0}))  {
// 	 := des.TestInitialPermute(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC des.TestInversePermutationKnownAnswer has: 
// func testInversePermutationKnownAnswer(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{1136485 0xc0008fe420}))  {
// 	 := des.TestInversePermutationKnownAnswer(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC des.TestPermutationOperationKnownAnswerDecrypt has: 
// func testPermutationOperationKnownAnswerDecrypt(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{1138239 0xc00091c680}))  {
// 	 := des.TestPermutationOperationKnownAnswerDecrypt(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC des.TestPermutationOperationKnownAnswerEncrypt has: 
// func testPermutationOperationKnownAnswerEncrypt(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{1137897 0xc000915fe0}))  {
// 	 := des.TestPermutationOperationKnownAnswerEncrypt(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC des.TestSemiWeakKeyPairs has: 
// func testSemiWeakKeyPairs(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{1134011 0xc0008bd6c0}))  {
// 	 := des.TestSemiWeakKeyPairs(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC des.TestSubstitutionTableKnownAnswerDecrypt has: 
// func testSubstitutionTableKnownAnswerDecrypt(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{1138895 0xc00091d9e0}))  {
// 	 := des.TestSubstitutionTableKnownAnswerDecrypt(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC des.TestSubstitutionTableKnownAnswerEncrypt has: 
// func testSubstitutionTableKnownAnswerEncrypt(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{1138578 0xc00091d2a0}))  {
// 	 := des.TestSubstitutionTableKnownAnswerEncrypt(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC des.TestVariableCiphertextKnownAnswer has: 
// func testVariableCiphertextKnownAnswer(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{1136067 0xc0008ec6a0}))  {
// 	 := des.TestVariableCiphertextKnownAnswer(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC des.TestVariableKeyKnownAnswerDecrypt has: 
// func testVariableKeyKnownAnswerDecrypt(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{1137555 0xc000915420}))  {
// 	 := des.TestVariableKeyKnownAnswerDecrypt(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC des.TestVariableKeyKnownAnswerEncrypt has: 
// func testVariableKeyKnownAnswerEncrypt(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{1137222 0xc00090fea0}))  {
// 	 := des.TestVariableKeyKnownAnswerEncrypt(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC des.TestVariablePlaintextKnownAnswer has: 
// func testVariablePlaintextKnownAnswer(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{1135752 0xc0008ddc40}))  {
// 	 := des.TestVariablePlaintextKnownAnswer(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC des.TestWeakKeys has: 
// func testWeakKeys(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{1133471 0xc0008bcde0}))  {
// 	 := des.TestWeakKeys(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC des_test.ExampleNewTripleDESCipher has: 
// func exampleNewTripleDESCipher()  {
// 	 := des_test.ExampleNewTripleDESCipher()
// 	...ABEND: TODO...
// }
// 
GO FUNC dnsmessage.BenchmarkAppendPack has: 
// func benchmarkAppendPack(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{14981386 0xc0045d7e20}))  {
// 	 := dnsmessage.BenchmarkAppendPack(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC dnsmessage.BenchmarkBuilding has: 
// func benchmarkBuilding(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{14980048 0xc0045d67c0}))  {
// 	 := dnsmessage.BenchmarkBuilding(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC dnsmessage.BenchmarkPack has: 
// func benchmarkPack(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{14981208 0xc0045d7a00}))  {
// 	 := dnsmessage.BenchmarkPack(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC dnsmessage.BenchmarkParsing has: 
// func benchmarkParsing(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{14978235 0xc0045c6720}))  {
// 	 := dnsmessage.BenchmarkParsing(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC dnsmessage.TestBuilder has: 
// func testBuilder(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{14972885 0xc004286700}))  {
// 	 := dnsmessage.TestBuilder(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC dnsmessage.TestBuilderResourceError has: 
// func testBuilderResourceError(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{14971002 0xc00427c620}))  {
// 	 := dnsmessage.TestBuilderResourceError(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC dnsmessage.TestBuildingAllocs has: 
// func testBuildingAllocs(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{14980213 0xc0045d6b40}))  {
// 	 := dnsmessage.TestBuildingAllocs(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC dnsmessage.TestDNSAppendPackUnpack has: 
// func testDNSAppendPackUnpack(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{14964295 0xc002f5cce0}))  {
// 	 := dnsmessage.TestDNSAppendPackUnpack(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC dnsmessage.TestDNSPackUnpack has: 
// func testDNSPackUnpack(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{14963653 0xc002f5c280}))  {
// 	 := dnsmessage.TestDNSPackUnpack(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC dnsmessage.TestFinishError has: 
// func testFinishError(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{14972704 0xc0042863a0}))  {
// 	 := dnsmessage.TestFinishError(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC dnsmessage.TestHeaderUnpackError has: 
// func testHeaderUnpackError(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{14961958 0xc002ae9f40}))  {
// 	 := dnsmessage.TestHeaderUnpackError(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC dnsmessage.TestIncompressibleName has: 
// func testIncompressibleName(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{14961091 0xc002ae9040}))  {
// 	 := dnsmessage.TestIncompressibleName(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC dnsmessage.TestName has: 
// func testName(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{14959449 0xc002ae3540}))  {
// 	 := dnsmessage.TestName(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC dnsmessage.TestNamePackUnpack has: 
// func testNamePackUnpack(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{14959915 0xc002ae3c80}))  {
// 	 := dnsmessage.TestNamePackUnpack(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC dnsmessage.TestNameString has: 
// func testNameString(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{14958606 0xc002ae2460}))  {
// 	 := dnsmessage.TestNameString(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC dnsmessage.TestParserStart has: 
// func testParserStart(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{14962357 0xc0034666a0}))  {
// 	 := dnsmessage.TestParserStart(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC dnsmessage.TestParsingAllocs has: 
// func testParsingAllocs(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{14978426 0xc0045c6b40}))  {
// 	 := dnsmessage.TestParsingAllocs(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC dnsmessage.TestQuestionPackUnpack has: 
// func testQuestionPackUnpack(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{14958808 0xc002ae27e0}))  {
// 	 := dnsmessage.TestQuestionPackUnpack(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC dnsmessage.TestResourceNotStarted has: 
// func testResourceNotStarted(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{14962616 0xc003466b60}))  {
// 	 := dnsmessage.TestResourceNotStarted(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC dnsmessage.TestResourcePack has: 
// func testResourcePack(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{14975408 0xc004331b80}))  {
// 	 := dnsmessage.TestResourcePack(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC dnsmessage.TestSkipAfterRead has: 
// func testSkipAfterRead(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{14966312 0xc003ead160}))  {
// 	 := dnsmessage.TestSkipAfterRead(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC dnsmessage.TestSkipAll has: 
// func testSkipAll(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{14964972 0xc002f5d880}))  {
// 	 := dnsmessage.TestSkipAll(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC dnsmessage.TestSkipEach has: 
// func testSkipEach(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{14965600 0xc003eac440}))  {
// 	 := dnsmessage.TestSkipEach(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC dnsmessage.TestSkipNotStarted has: 
// func testSkipNotStarted(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{14967233 0xc003f06480}))  {
// 	 := dnsmessage.TestSkipNotStarted(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC dnsmessage.TestStartAppends has: 
// func testStartAppends(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{14969618 0xc004026c40}))  {
// 	 := dnsmessage.TestStartAppends(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC dnsmessage.TestStartError has: 
// func testStartError(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{14970104 0xc0040275a0}))  {
// 	 := dnsmessage.TestStartError(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC dnsmessage.TestTooLongTxt has: 
// func testTooLongTxt(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{14969320 0xc004026720}))  {
// 	 := dnsmessage.TestTooLongTxt(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC dnsmessage.TestTooManyRecords has: 
// func testTooManyRecords(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{14967686 0xc003f06be0}))  {
// 	 := dnsmessage.TestTooManyRecords(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC dnsmessage.TestVeryLongTxt has: 
// func testVeryLongTxt(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{14968432 0xc003f07720}))  {
// 	 := dnsmessage.TestVeryLongTxt(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC dnsmessage_test.ExampleParser has: 
// func exampleParser()  {
// 	 := dnsmessage_test.ExampleParser()
// 	...ABEND: TODO...
// }
// 
GO FUNC doc.Test has: 
// func test(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{4667943 0xc001a77480}))  {
// 	 := doc.Test(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC doc.TestBlocks has: 
// func testBlocks(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{4635280 0xc00208d900}))  {
// 	 := doc.TestBlocks(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC doc.TestEmphasize has: 
// func testEmphasize(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{4638167 0xc002090c40}))  {
// 	 := doc.TestEmphasize(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC doc.TestIsHeading has: 
// func testIsHeading(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{4634173 0xc00208cae0}))  {
// 	 := doc.TestIsHeading(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC doc.TestPairedParensPrefixLen has: 
// func testPairedParensPrefixLen(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{4638923 0xc002091960}))  {
// 	 := doc.TestPairedParensPrefixLen(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC doc.TestSynopsis has: 
// func testSynopsis(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{4680618 0xc0017d2a60}))  {
// 	 := doc.TestSynopsis(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC doc.TestToText has: 
// func testToText(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{4635477 0xc00208dda0}))  {
// 	 := doc.TestToText(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC doc.ToHTML has: 
// func toHTML(w ABEND881(unrecognized Expr type *ast.SelectorExpr at: &{io Writer}), text string, words ABEND881(unrecognized Expr type *ast.MapType at: &{4661000 string string}))  {
// 	 := doc.ToHTML(w, text, words)
// 	...ABEND: TODO...
// }
// 
GO FUNC doc.ToText has: 
// func toText(w ABEND881(unrecognized Expr type *ast.SelectorExpr at: &{io Writer}), text string, indent string, preIndent string, width int)  {
// 	 := doc.ToText(w, text, indent, preIndent, width)
// 	...ABEND: TODO...
// }
// 
GO FUNC doc_test.TestExamples has: 
// func testExamples(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{4604868 0xc001c7cfc0}))  {
// 	 := doc_test.TestExamples(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC doc_test.TestExamplesWholeFile has: 
// func testExamplesWholeFile(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{4605876 0xc001c7de60}))  {
// 	 := doc_test.TestExamplesWholeFile(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC draw.BenchmarkCMYK has: 
// func benchmarkCMYK(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{6033864 0xc001d7cc40}))  {
// 	 := draw.BenchmarkCMYK(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC draw.BenchmarkCopyOver has: 
// func benchmarkCopyOver(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{6033292 0xc001d67ec0}))  {
// 	 := draw.BenchmarkCopyOver(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC draw.BenchmarkCopySrc has: 
// func benchmarkCopySrc(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{6033388 0xc001d7c100}))  {
// 	 := draw.BenchmarkCopySrc(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC draw.BenchmarkFillOver has: 
// func benchmarkFillOver(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{6033124 0xc001d67ac0}))  {
// 	 := draw.BenchmarkFillOver(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC draw.BenchmarkFillSrc has: 
// func benchmarkFillSrc(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{6033208 0xc001d67cc0}))  {
// 	 := draw.BenchmarkFillSrc(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC draw.BenchmarkGenericMaskOver has: 
// func benchmarkGenericMaskOver(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{6034429 0xc001d7d780}))  {
// 	 := draw.BenchmarkGenericMaskOver(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC draw.BenchmarkGenericMaskSrc has: 
// func benchmarkGenericMaskSrc(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{6034651 0xc001d7dc40}))  {
// 	 := draw.BenchmarkGenericMaskSrc(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC draw.BenchmarkGenericOver has: 
// func benchmarkGenericOver(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{6034321 0xc001d7d540}))  {
// 	 := draw.BenchmarkGenericOver(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC draw.BenchmarkGenericSrc has: 
// func benchmarkGenericSrc(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{6034545 0xc001d7da00}))  {
// 	 := draw.BenchmarkGenericSrc(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC draw.BenchmarkGlyphOver has: 
// func benchmarkGlyphOver(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{6033962 0xc001d7ce80}))  {
// 	 := draw.BenchmarkGlyphOver(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC draw.BenchmarkGray has: 
// func benchmarkGray(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{6033771 0xc001d7ca00}))  {
// 	 := draw.BenchmarkGray(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC draw.BenchmarkNRGBAOver has: 
// func benchmarkNRGBAOver(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{6033485 0xc001d7c340}))  {
// 	 := draw.BenchmarkNRGBAOver(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC draw.BenchmarkNRGBASrc has: 
// func benchmarkNRGBASrc(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{6033583 0xc001d7c580}))  {
// 	 := draw.BenchmarkNRGBASrc(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC draw.BenchmarkPaletted has: 
// func benchmarkPaletted(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{6034154 0xc001d7d300}))  {
// 	 := draw.BenchmarkPaletted(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC draw.BenchmarkRGBA has: 
// func benchmarkRGBA(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{6034056 0xc001d7d0c0}))  {
// 	 := draw.BenchmarkRGBA(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC draw.BenchmarkYCbCr has: 
// func benchmarkYCbCr(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{6033677 0xc001d7c7c0}))  {
// 	 := draw.BenchmarkYCbCr(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC draw.Draw has: 
// func draw(dst Object, r ABEND881(unrecognized Expr type *ast.SelectorExpr at: &{image Rectangle}), src ABEND881(unrecognized Expr type *ast.SelectorExpr at: &{image Image}), sp ABEND881(unrecognized Expr type *ast.SelectorExpr at: &{image Point}), op Object)  {
// 	 := draw.Draw(dst, r, src, sp, op)
// 	...ABEND: TODO...
// }
// 
GO FUNC draw.DrawMask has: 
// func drawMask(dst Object, r ABEND881(unrecognized Expr type *ast.SelectorExpr at: &{image Rectangle}), src ABEND881(unrecognized Expr type *ast.SelectorExpr at: &{image Image}), sp ABEND881(unrecognized Expr type *ast.SelectorExpr at: &{image Point}), mask ABEND881(unrecognized Expr type *ast.SelectorExpr at: &{image Image}), mp ABEND881(unrecognized Expr type *ast.SelectorExpr at: &{image Point}), op Object)  {
// 	 := draw.DrawMask(dst, r, src, sp, mask, mp, op)
// 	...ABEND: TODO...
// }
// 
GO FUNC draw.TestClip has: 
// func testClip(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{6058803 0xc001a80220}))  {
// 	 := draw.TestClip(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC draw.TestDraw has: 
// func testDraw(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{6068920 0xc001d4b940}))  {
// 	 := draw.TestDraw(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC draw.TestDrawOverlap has: 
// func testDrawOverlap(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{6070582 0xc00208ffe0}))  {
// 	 := draw.TestDrawOverlap(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC draw.TestFill has: 
// func testFill(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{6072362 0xc001f1eba0}))  {
// 	 := draw.TestFill(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC draw.TestFloydSteinbergCheckerboard has: 
// func testFloydSteinbergCheckerboard(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{6074332 0xc001b5c2a0}))  {
// 	 := draw.TestFloydSteinbergCheckerboard(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC draw.TestNonZeroSrcPt has: 
// func testNonZeroSrcPt(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{6071904 0xc00155d9c0}))  {
// 	 := draw.TestNonZeroSrcPt(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC draw.TestPaletted has: 
// func testPaletted(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{6075245 0xc001b5d320}))  {
// 	 := draw.TestPaletted(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC draw.TestSqDiff has: 
// func testSqDiff(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{6076247 0xc001b92c00}))  {
// 	 := draw.TestSqDiff(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC draw_test.ExampleDrawer_floydSteinberg has: 
// func exampleDrawer_floydSteinberg()  {
// 	 := draw_test.ExampleDrawer_floydSteinberg()
// 	...ABEND: TODO...
// }
// 
GO FUNC driver.TestValueConverters has: 
// func testValueConverters(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{2647341 0xc0012d4060}))  {
// 	 := driver.TestValueConverters(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC dsa.TestParameterGeneration has: 
// func testParameterGeneration(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{1160840 0xc000607e20}))  {
// 	 := dsa.TestParameterGeneration(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC dsa.TestSignAndVerify has: 
// func testSignAndVerify(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{1161290 0xc00072a660}))  {
// 	 := dsa.TestSignAndVerify(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC dsa.TestSigningWithDegenerateKeys has: 
// func testSigningWithDegenerateKeys(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{1162408 0xc00072ab20}))  {
// 	 := dsa.TestSigningWithDegenerateKeys(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC dwarf_test.Test64Bit has: 
// func test64Bit(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{2689894 0xc001377540}))  {
// 	 := dwarf_test.Test64Bit(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC dwarf_test.TestLineELFClang has: 
// func testLineELFClang(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{2672657 0xc0013398c0}))  {
// 	 := dwarf_test.TestLineELFClang(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC dwarf_test.TestLineELFGCC has: 
// func testLineELFGCC(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{2669717 0xc0013267e0}))  {
// 	 := dwarf_test.TestLineELFGCC(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC dwarf_test.TestLineGCCWindows has: 
// func testLineGCCWindows(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{2671024 0xc001327d40}))  {
// 	 := dwarf_test.TestLineGCCWindows(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC dwarf_test.TestLineSeek has: 
// func testLineSeek(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{2673825 0xc00133eb60}))  {
// 	 := dwarf_test.TestLineSeek(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC dwarf_test.TestPathJoin has: 
// func testPathJoin(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{2678373 0xc00134d6e0}))  {
// 	 := dwarf_test.TestPathJoin(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC dwarf_test.TestRangesSection has: 
// func testRangesSection(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{2687761 0xc001372c40}))  {
// 	 := dwarf_test.TestRangesSection(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC dwarf_test.TestReaderRanges has: 
// func testReaderRanges(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{2688829 0xc001376220}))  {
// 	 := dwarf_test.TestReaderRanges(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC dwarf_test.TestReaderSeek has: 
// func testReaderSeek(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{2687405 0xc0013725c0}))  {
// 	 := dwarf_test.TestReaderSeek(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC dwarf_test.TestSplit has: 
// func testSplit(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{2686377 0xc0013678e0}))  {
// 	 := dwarf_test.TestSplit(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC dwarf_test.TestTypedefCycle has: 
// func testTypedefCycle(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{2682665 0xc001356c40}))  {
// 	 := dwarf_test.TestTypedefCycle(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC dwarf_test.TestTypedefsELF has: 
// func testTypedefsELF(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{2681413 0xc0013533e0}))  {
// 	 := dwarf_test.TestTypedefsELF(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC dwarf_test.TestTypedefsELFDwarf4 has: 
// func testTypedefsELFDwarf4(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{2681626 0xc0013537a0}))  {
// 	 := dwarf_test.TestTypedefsELFDwarf4(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC dwarf_test.TestTypedefsMachO has: 
// func testTypedefsMachO(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{2681514 0xc0013535c0}))  {
// 	 := dwarf_test.TestTypedefsMachO(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC ecdsa.BenchmarkKeyGeneration has: 
// func benchmarkKeyGeneration(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{1165600 0xc000622860}))  {
// 	 := ecdsa.BenchmarkKeyGeneration(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC ecdsa.BenchmarkSignP256 has: 
// func benchmarkSignP256(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{1164656 0xc0008a7240}))  {
// 	 := ecdsa.BenchmarkSignP256(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC ecdsa.BenchmarkSignP384 has: 
// func benchmarkSignP384(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{1164955 0xc0008a7940}))  {
// 	 := ecdsa.BenchmarkSignP384(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC ecdsa.BenchmarkVerifyP256 has: 
// func benchmarkVerifyP256(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{1165256 0xc000622040}))  {
// 	 := ecdsa.BenchmarkVerifyP256(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC ecdsa.TestINDCCA has: 
// func testINDCCA(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{1168041 0xc00091b900}))  {
// 	 := ecdsa.TestINDCCA(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC ecdsa.TestKeyGeneration has: 
// func testKeyGeneration(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{1164392 0xc0008a6d40}))  {
// 	 := ecdsa.TestKeyGeneration(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC ecdsa.TestNegativeInputs has: 
// func testNegativeInputs(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{1171232 0xc00096b180}))  {
// 	 := ecdsa.TestNegativeInputs(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC ecdsa.TestNonceSafety has: 
// func testNonceSafety(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{1167193 0xc00091a860}))  {
// 	 := ecdsa.TestNonceSafety(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC ecdsa.TestSignAndVerify has: 
// func testSignAndVerify(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{1166276 0xc0006237a0}))  {
// 	 := ecdsa.TestSignAndVerify(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC ecdsa.TestVectors has: 
// func testVectors(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{1168390 0xc000926160}))  {
// 	 := ecdsa.TestVectors(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC ecdsa.TestZeroHashSignature has: 
// func testZeroHashSignature(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{1171470 0xc00096b600}))  {
// 	 := ecdsa.TestZeroHashSignature(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC ecdsa_test.Example has: 
// func example()  {
// 	 := ecdsa_test.Example()
// 	...ABEND: TODO...
// }
// 
GO FUNC elf.TestCompressedDWARF has: 
// func testCompressedDWARF(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{2947628 0xc0016f2700}))  {
// 	 := elf.TestCompressedDWARF(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC elf.TestCompressedSection has: 
// func testCompressedSection(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{2948185 0xc0016f2f80}))  {
// 	 := elf.TestCompressedSection(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC elf.TestDWARFRelocations has: 
// func testDWARFRelocations(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{2946840 0xc0016ef7c0}))  {
// 	 := elf.TestDWARFRelocations(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC elf.TestNames has: 
// func testNames(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{2882127 0xc0015edfc0}))  {
// 	 := elf.TestNames(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC elf.TestNoSectionOverlaps has: 
// func testNoSectionOverlaps(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{2950507 0xc0016fc6e0}))  {
// 	 := elf.TestNoSectionOverlaps(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC elf.TestOpen has: 
// func testOpen(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{2930739 0xc0016c4a60}))  {
// 	 := elf.TestOpen(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC elf.TestSymbols has: 
// func testSymbols(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{2867746 0xc0015bb8e0}))  {
// 	 := elf.TestSymbols(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC elliptic.BenchmarkBaseMult has: 
// func benchmarkBaseMult(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{1197704 0xc0009e6380}))  {
// 	 := elliptic.BenchmarkBaseMult(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC elliptic.BenchmarkBaseMultP256 has: 
// func benchmarkBaseMultP256(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{1197983 0xc0009e6a40}))  {
// 	 := elliptic.BenchmarkBaseMultP256(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC elliptic.BenchmarkScalarMultP256 has: 
// func benchmarkScalarMultP256(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{1198264 0xc0009e7100}))  {
// 	 := elliptic.BenchmarkScalarMultP256(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC elliptic.TestBaseMult has: 
// func testBaseMult(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{1192660 0xc000882840}))  {
// 	 := elliptic.TestBaseMult(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC elliptic.TestCombinedMult has: 
// func testCombinedMult(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{1196309 0xc0009483e0}))  {
// 	 := elliptic.TestCombinedMult(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC elliptic.TestFuzz has: 
// func testFuzz(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{1180782 0xc00068eba0}))  {
// 	 := elliptic.TestFuzz(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC elliptic.TestGenericBaseMult has: 
// func testGenericBaseMult(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{1193115 0xc0008833a0}))  {
// 	 := elliptic.TestGenericBaseMult(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC elliptic.TestInfinity has: 
// func testInfinity(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{1195250 0xc00093e9e0}))  {
// 	 := elliptic.TestInfinity(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC elliptic.TestMarshal has: 
// func testMarshal(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{1198557 0xc0009e7880}))  {
// 	 := elliptic.TestMarshal(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC elliptic.TestOffCurve has: 
// func testOffCurve(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{1182141 0xc000640200}))  {
// 	 := elliptic.TestOffCurve(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC elliptic.TestOnCurve has: 
// func testOnCurve(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{1182008 0xc00068fe00}))  {
// 	 := elliptic.TestOnCurve(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC elliptic.TestP224Overflow has: 
// func testP224Overflow(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{1198941 0xc000a300c0}))  {
// 	 := elliptic.TestP224Overflow(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC elliptic.TestP256BaseMult has: 
// func testP256BaseMult(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{1193662 0xc000883f80}))  {
// 	 := elliptic.TestP256BaseMult(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC elliptic.TestP256Mult has: 
// func testP256Mult(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{1194274 0xc000912e60}))  {
// 	 := elliptic.TestP256Mult(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC elliptic.TestToFromBig has: 
// func testToFromBig(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{1180178 0xc00068e180}))  {
// 	 := elliptic.TestToFromBig(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC elliptic.TestUnmarshalToLargeCoordinates has: 
// func testUnmarshalToLargeCoordinates(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{1199386 0xc000a305a0}))  {
// 	 := elliptic.TestUnmarshalToLargeCoordinates(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC errors_test.Example has: 
// func example()  {
// 	 := errors_test.Example()
// 	...ABEND: TODO...
// }
// 
GO FUNC errors_test.ExampleNew has: 
// func exampleNew()  {
// 	 := errors_test.ExampleNew()
// 	...ABEND: TODO...
// }
// 
GO FUNC errors_test.ExampleNew_errorf has: 
// func exampleNew_errorf()  {
// 	 := errors_test.ExampleNew_errorf()
// 	...ABEND: TODO...
// }
// 
GO FUNC errors_test.TestErrorMethod has: 
// func testErrorMethod(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{4099845 0xc00164d3c0}))  {
// 	 := errors_test.TestErrorMethod(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC errors_test.TestNewEqual has: 
// func testNewEqual(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{4099453 0xc00164cd20}))  {
// 	 := errors_test.TestNewEqual(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC exec.TestDedupEnv has: 
// func testDedupEnv(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{10191660 0xc001b959e0}))  {
// 	 := exec.TestDedupEnv(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC exec.TestLookPathNotFound has: 
// func testLookPathNotFound(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{10193111 0xc001a5c3e0}))  {
// 	 := exec.TestLookPathNotFound(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC exec.TestLookPathUnixEmptyPath has: 
// func testLookPathUnixEmptyPath(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{10158823 0xc0014848c0}))  {
// 	 := exec.TestLookPathUnixEmptyPath(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC exec.TestPrefixSuffixSaver has: 
// func testPrefixSuffixSaver(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{10154243 0xc001aba300}))  {
// 	 := exec.TestPrefixSuffixSaver(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC exec_test.ExampleCmd_CombinedOutput has: 
// func exampleCmd_CombinedOutput()  {
// 	 := exec_test.ExampleCmd_CombinedOutput()
// 	...ABEND: TODO...
// }
// 
GO FUNC exec_test.ExampleCmd_Output has: 
// func exampleCmd_Output()  {
// 	 := exec_test.ExampleCmd_Output()
// 	...ABEND: TODO...
// }
// 
GO FUNC exec_test.ExampleCmd_Run has: 
// func exampleCmd_Run()  {
// 	 := exec_test.ExampleCmd_Run()
// 	...ABEND: TODO...
// }
// 
GO FUNC exec_test.ExampleCmd_Start has: 
// func exampleCmd_Start()  {
// 	 := exec_test.ExampleCmd_Start()
// 	...ABEND: TODO...
// }
// 
GO FUNC exec_test.ExampleCmd_StderrPipe has: 
// func exampleCmd_StderrPipe()  {
// 	 := exec_test.ExampleCmd_StderrPipe()
// 	...ABEND: TODO...
// }
// 
GO FUNC exec_test.ExampleCmd_StdinPipe has: 
// func exampleCmd_StdinPipe()  {
// 	 := exec_test.ExampleCmd_StdinPipe()
// 	...ABEND: TODO...
// }
// 
GO FUNC exec_test.ExampleCmd_StdoutPipe has: 
// func exampleCmd_StdoutPipe()  {
// 	 := exec_test.ExampleCmd_StdoutPipe()
// 	...ABEND: TODO...
// }
// 
GO FUNC exec_test.ExampleCommand has: 
// func exampleCommand()  {
// 	 := exec_test.ExampleCommand()
// 	...ABEND: TODO...
// }
// 
GO FUNC exec_test.ExampleCommandContext has: 
// func exampleCommandContext()  {
// 	 := exec_test.ExampleCommandContext()
// 	...ABEND: TODO...
// }
// 
GO FUNC exec_test.ExampleCommand_environment has: 
// func exampleCommand_environment()  {
// 	 := exec_test.ExampleCommand_environment()
// 	...ABEND: TODO...
// }
// 
GO FUNC exec_test.ExampleLookPath has: 
// func exampleLookPath()  {
// 	 := exec_test.ExampleLookPath()
// 	...ABEND: TODO...
// }
// 
GO FUNC exec_test.TestCatGoodAndBadFile has: 
// func testCatGoodAndBadFile(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{10164161 0xc0012baac0}))  {
// 	 := exec_test.TestCatGoodAndBadFile(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC exec_test.TestCatStdin has: 
// func testCatStdin(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{10163431 0xc00127e480}))  {
// 	 := exec_test.TestCatStdin(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC exec_test.TestClosePipeOnCopyError has: 
// func testClosePipeOnCopyError(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{10186118 0xc001578f40}))  {
// 	 := exec_test.TestClosePipeOnCopyError(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC exec_test.TestCommandRelativeName has: 
// func testCommandRelativeName(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{10162559 0xc000da82a0}))  {
// 	 := exec_test.TestCommandRelativeName(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC exec_test.TestContext has: 
// func testContext(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{10186990 0xc0013b0760}))  {
// 	 := exec_test.TestContext(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC exec_test.TestContextCancel has: 
// func testContextCancel(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{10187840 0xc001b89c00}))  {
// 	 := exec_test.TestContextCancel(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC exec_test.TestCredentialNoSetGroups has: 
// func testCredentialNoSetGroups(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{10189906 0xc001a70120}))  {
// 	 := exec_test.TestCredentialNoSetGroups(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC exec_test.TestDedupEnvEcho has: 
// func testDedupEnvEcho(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{10189240 0xc001a69280}))  {
// 	 := exec_test.TestDedupEnvEcho(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC exec_test.TestEcho has: 
// func testEcho(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{10162304 0xc0009bdf20}))  {
// 	 := exec_test.TestEcho(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC exec_test.TestEchoFileRace has: 
// func testEchoFileRace(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{10163758 0xc00127f6a0}))  {
// 	 := exec_test.TestEchoFileRace(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC exec_test.TestExitStatus has: 
// func testExitStatus(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{10165104 0xc0012c0ac0}))  {
// 	 := exec_test.TestExitStatus(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC exec_test.TestExtraFiles has: 
// func testExtraFiles(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{10176128 0xc0014910c0}))  {
// 	 := exec_test.TestExtraFiles(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC exec_test.TestExtraFilesFDShuffle has: 
// func testExtraFilesFDShuffle(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{10172982 0xc001464680}))  {
// 	 := exec_test.TestExtraFilesFDShuffle(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC exec_test.TestExtraFilesRace has: 
// func testExtraFilesRace(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{10178103 0xc0014cd500}))  {
// 	 := exec_test.TestExtraFilesRace(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC exec_test.TestHelperProcess has: 
// func testHelperProcess()  {
// 	 := exec_test.TestHelperProcess()
// 	...ABEND: TODO...
// }
// 
GO FUNC exec_test.TestIgnorePipeErrorOnSuccess has: 
// func testIgnorePipeErrorOnSuccess(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{10185290 0xc001c307a0}))  {
// 	 := exec_test.TestIgnorePipeErrorOnSuccess(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC exec_test.TestNoExistExecutable has: 
// func testNoExistExecutable(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{10164900 0xc0012bbfe0}))  {
// 	 := exec_test.TestNoExistExecutable(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC exec_test.TestOutputStderrCapture has: 
// func testOutputStderrCapture(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{10186628 0xc000e6f4e0}))  {
// 	 := exec_test.TestOutputStderrCapture(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC exec_test.TestPipeLookPathLeak has: 
// func testPipeLookPathLeak(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{10169122 0xc00131e200}))  {
// 	 := exec_test.TestPipeLookPathLeak(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC exec_test.TestPipes has: 
// func testPipes(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{10165638 0xc0012c9040}))  {
// 	 := exec_test.TestPipes(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC exec_test.TestStdinClose has: 
// func testStdinClose(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{10166990 0xc0012d58c0}))  {
// 	 := exec_test.TestStdinClose(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC exec_test.TestStdinCloseRace has: 
// func testStdinCloseRace(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{10168010 0xc0012e4c60}))  {
// 	 := exec_test.TestStdinCloseRace(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC exec_test.TestWaitid has: 
// func testWaitid(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{10190731 0xc001b94ae0}))  {
// 	 := exec_test.TestWaitid(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC expvar.BenchmarkFloatAdd has: 
// func benchmarkFloatAdd(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{4102444 0xc001640180}))  {
// 	 := expvar.BenchmarkFloatAdd(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC expvar.BenchmarkFloatSet has: 
// func benchmarkFloatSet(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{4102578 0xc0016404c0}))  {
// 	 := expvar.BenchmarkFloatSet(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC expvar.BenchmarkIntAdd has: 
// func benchmarkIntAdd(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{4101654 0xc001647060}))  {
// 	 := expvar.BenchmarkIntAdd(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC expvar.BenchmarkIntSet has: 
// func benchmarkIntSet(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{4101782 0xc0016473c0}))  {
// 	 := expvar.BenchmarkIntSet(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC expvar.BenchmarkMapAddDifferent has: 
// func benchmarkMapAddDifferent(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{4106056 0xc001636d00}))  {
// 	 := expvar.BenchmarkMapAddDifferent(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC expvar.BenchmarkMapAddDifferentSteadyState has: 
// func benchmarkMapAddDifferentSteadyState(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{4106710 0xc001637c60}))  {
// 	 := expvar.BenchmarkMapAddDifferentSteadyState(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC expvar.BenchmarkMapAddSame has: 
// func benchmarkMapAddSame(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{4105843 0xc0016366e0}))  {
// 	 := expvar.BenchmarkMapAddSame(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC expvar.BenchmarkMapAddSameSteadyState has: 
// func benchmarkMapAddSameSteadyState(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{4106545 0xc001637820}))  {
// 	 := expvar.BenchmarkMapAddSameSteadyState(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC expvar.BenchmarkMapSet has: 
// func benchmarkMapSet(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{4104988 0xc0016391e0}))  {
// 	 := expvar.BenchmarkMapSet(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC expvar.BenchmarkMapSetDifferent has: 
// func benchmarkMapSetDifferent(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{4105159 0xc001639620}))  {
// 	 := expvar.BenchmarkMapSetDifferent(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC expvar.BenchmarkMapSetString has: 
// func benchmarkMapSetString(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{4105652 0xc001636200}))  {
// 	 := expvar.BenchmarkMapSetString(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC expvar.BenchmarkRealworldExpvarUsage has: 
// func benchmarkRealworldExpvarUsage(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{4108121 0xc001626500}))  {
// 	 := expvar.BenchmarkRealworldExpvarUsage(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC expvar.BenchmarkStringSet has: 
// func benchmarkStringSet(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{4103353 0xc001641360}))  {
// 	 := expvar.BenchmarkStringSet(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC expvar.Do has: 
// func do(f ABEND881(unrecognized Expr type *ast.FuncType at: &{4117206 0xc001622e40 <nil>}))  {
// 	 := expvar.Do(f)
// 	...ABEND: TODO...
// }
// 
GO FUNC expvar.Publish has: 
// func publish(name string, v Object)  {
// 	 := expvar.Publish(name, v)
// 	...ABEND: TODO...
// }
// 
GO FUNC expvar.RemoveAll has: 
// func removeAll()  {
// 	 := expvar.RemoveAll()
// 	...ABEND: TODO...
// }
// 
GO FUNC expvar.TestFloat has: 
// func testFloat(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{4101904 0xc001647720}))  {
// 	 := expvar.TestFloat(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC expvar.TestFunc has: 
// func testFunc(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{4107175 0xc00162c800}))  {
// 	 := expvar.TestFunc(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC expvar.TestHandler has: 
// func testHandler(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{4107604 0xc00162d1c0}))  {
// 	 := expvar.TestHandler(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC expvar.TestInt has: 
// func testInt(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{4101140 0xc0016465c0}))  {
// 	 := expvar.TestInt(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC expvar.TestMapCounter has: 
// func testMapCounter(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{4103941 0xc001641f00}))  {
// 	 := expvar.TestMapCounter(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC expvar.TestMapInit has: 
// func testMapInit(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{4103484 0xc0016416a0}))  {
// 	 := expvar.TestMapInit(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC expvar.TestNil has: 
// func testNil(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{4101016 0xc001646320}))  {
// 	 := expvar.TestNil(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC expvar.TestString has: 
// func testString(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{4102705 0xc001640820}))  {
// 	 := expvar.TestString(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC fcgi.TestChildServeCleansUp has: 
// func testChildServeCleansUp(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{9524386 0xc0045035e0}))  {
// 	 := fcgi.TestChildServeCleansUp(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC fcgi.TestChildServeReadsEnvVars has: 
// func testChildServeReadsEnvVars(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{9526847 0xc004509b20}))  {
// 	 := fcgi.TestChildServeReadsEnvVars(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC fcgi.TestGetValues has: 
// func testGetValues(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{9522015 0xc0044fd7c0}))  {
// 	 := fcgi.TestGetValues(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC fcgi.TestMalformedParams has: 
// func testMalformedParams(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{9525172 0xc004508380}))  {
// 	 := fcgi.TestMalformedParams(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC fcgi.TestSize has: 
// func testSize(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{9519376 0xc0044f6060}))  {
// 	 := fcgi.TestSize(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC fcgi.TestStreams has: 
// func testStreams(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{9520560 0xc0044f7760}))  {
// 	 := fcgi.TestStreams(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC filepath_test.ExampleExt has: 
// func exampleExt()  {
// 	 := filepath_test.ExampleExt()
// 	...ABEND: TODO...
// }
// 
GO FUNC filepath_test.ExampleJoin has: 
// func exampleJoin()  {
// 	 := filepath_test.ExampleJoin()
// 	...ABEND: TODO...
// }
// 
GO FUNC filepath_test.ExampleRel has: 
// func exampleRel()  {
// 	 := filepath_test.ExampleRel()
// 	...ABEND: TODO...
// }
// 
GO FUNC filepath_test.ExampleSplit has: 
// func exampleSplit()  {
// 	 := filepath_test.ExampleSplit()
// 	...ABEND: TODO...
// }
// 
GO FUNC filepath_test.ExampleSplitList has: 
// func exampleSplitList()  {
// 	 := filepath_test.ExampleSplitList()
// 	...ABEND: TODO...
// }
// 
GO FUNC filepath_test.ExampleWalk has: 
// func exampleWalk()  {
// 	 := filepath_test.ExampleWalk()
// 	...ABEND: TODO...
// }
// 
GO FUNC filepath_test.TestAbs has: 
// func testAbs(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{10306491 0xc0023ef300}))  {
// 	 := filepath_test.TestAbs(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC filepath_test.TestAbsEmptyString has: 
// func testAbsEmptyString(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{10308197 0xc00185f540}))  {
// 	 := filepath_test.TestAbsEmptyString(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC filepath_test.TestBase has: 
// func testBase(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{10298237 0xc001e449e0}))  {
// 	 := filepath_test.TestBase(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC filepath_test.TestBug3486 has: 
// func testBug3486(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{10312742 0xc002ebf140}))  {
// 	 := filepath_test.TestBug3486(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC filepath_test.TestClean has: 
// func testClean(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{10285260 0xc002bf0b80}))  {
// 	 := filepath_test.TestClean(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC filepath_test.TestDir has: 
// func testDir(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{10299179 0xc00150c480}))  {
// 	 := filepath_test.TestDir(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC filepath_test.TestDriveLetterInEvalSymlinks has: 
// func testDriveLetterInEvalSymlinks(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{10312197 0xc002e42260}))  {
// 	 := filepath_test.TestDriveLetterInEvalSymlinks(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC filepath_test.TestEvalSymlinks has: 
// func testEvalSymlinks(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{10302538 0xc002592320}))  {
// 	 := filepath_test.TestEvalSymlinks(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC filepath_test.TestEvalSymlinksIsNotExist has: 
// func testEvalSymlinksIsNotExist(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{10304205 0xc0027f57c0}))  {
// 	 := filepath_test.TestEvalSymlinksIsNotExist(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC filepath_test.TestExt has: 
// func testExt(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{10290791 0xc00306b340}))  {
// 	 := filepath_test.TestExt(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC filepath_test.TestFromAndToSlash has: 
// func testFromAndToSlash(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{10286340 0xc002d01880}))  {
// 	 := filepath_test.TestFromAndToSlash(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC filepath_test.TestGlob has: 
// func testGlob(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{10317869 0xc002600a20}))  {
// 	 := filepath_test.TestGlob(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC filepath_test.TestGlobError has: 
// func testGlobError(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{10318570 0xc002601900}))  {
// 	 := filepath_test.TestGlobError(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC filepath_test.TestGlobSymlink has: 
// func testGlobSymlink(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{10318967 0xc0022a65e0}))  {
// 	 := filepath_test.TestGlobSymlink(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC filepath_test.TestGlobUNC has: 
// func testGlobUNC(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{10318702 0xc0022a28c0}))  {
// 	 := filepath_test.TestGlobUNC(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC filepath_test.TestIsAbs has: 
// func testIsAbs(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{10300110 0xc00150d5c0}))  {
// 	 := filepath_test.TestIsAbs(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC filepath_test.TestIssue13582 has: 
// func testIssue13582(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{10304658 0xc002636040}))  {
// 	 := filepath_test.TestIssue13582(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC filepath_test.TestJoin has: 
// func testJoin(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{10290297 0xc00306aa20}))  {
// 	 := filepath_test.TestJoin(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC filepath_test.TestMatch has: 
// func testMatch(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{10317043 0xc0025fd9a0}))  {
// 	 := filepath_test.TestMatch(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC filepath_test.TestNonWindowsGlobEscape has: 
// func testNonWindowsGlobEscape(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{10323109 0xc003427300}))  {
// 	 := filepath_test.TestNonWindowsGlobEscape(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC filepath_test.TestRel has: 
// func testRel(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{10310526 0xc002c1e5e0}))  {
// 	 := filepath_test.TestRel(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC filepath_test.TestSplit has: 
// func testSplit(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{10288383 0xc002e304a0}))  {
// 	 := filepath_test.TestSplit(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC filepath_test.TestSplitList has: 
// func testSplitList(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{10287478 0xc002d78ec0}))  {
// 	 := filepath_test.TestSplitList(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC filepath_test.TestVolumeName has: 
// func testVolumeName(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{10311937 0xc002c75d40}))  {
// 	 := filepath_test.TestVolumeName(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC filepath_test.TestWalk has: 
// func testWalk(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{10292985 0xc003265140}))  {
// 	 := filepath_test.TestWalk(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC filepath_test.TestWalkFileError has: 
// func testWalkFileError(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{10296653 0xc00340afa0}))  {
// 	 := filepath_test.TestWalkFileError(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC filepath_test.TestWalkSkipDirOnFile has: 
// func testWalkSkipDirOnFile(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{10295777 0xc00338de40}))  {
// 	 := filepath_test.TestWalkSkipDirOnFile(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC filepath_test.TestWalkSymlink has: 
// func testWalkSymlink(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{10314488 0xc00238c760}))  {
// 	 := filepath_test.TestWalkSymlink(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC filepath_test.TestWindowsGlob has: 
// func testWindowsGlob(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{10320886 0xc002ec3c00}))  {
// 	 := filepath_test.TestWindowsGlob(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC flag.BoolVar has: 
// func boolVar(p ABEND881(unrecognized Expr type *ast.StarExpr at: &{4152731 bool}), name string, value Object, usage string)  {
// 	 := flag.BoolVar(p, name, value, usage)
// 	...ABEND: TODO...
// }
// 
GO FUNC flag.DurationVar has: 
// func durationVar(p ABEND881(unrecognized Expr type *ast.StarExpr at: &{4161289 0xc0014db560}), name string, value ABEND881(unrecognized Expr type *ast.SelectorExpr at: &{time Duration}), usage string)  {
// 	 := flag.DurationVar(p, name, value, usage)
// 	...ABEND: TODO...
// }
// 
GO FUNC flag.Float64Var has: 
// func float64Var(p ABEND881(unrecognized Expr type *ast.StarExpr at: &{4159874 float64}), name string, value Object, usage string)  {
// 	 := flag.Float64Var(p, name, value, usage)
// 	...ABEND: TODO...
// }
// 
GO FUNC flag.Int64Var has: 
// func int64Var(p ABEND881(unrecognized Expr type *ast.StarExpr at: &{4155051 int64}), name string, value Object, usage string)  {
// 	 := flag.Int64Var(p, name, value, usage)
// 	...ABEND: TODO...
// }
// 
GO FUNC flag.IntVar has: 
// func intVar(p ABEND881(unrecognized Expr type *ast.StarExpr at: &{4153887 int}), name string, value int, usage string)  {
// 	 := flag.IntVar(p, name, value, usage)
// 	...ABEND: TODO...
// }
// 
GO FUNC flag.Parse has: 
// func parse()  {
// 	 := flag.Parse()
// 	...ABEND: TODO...
// }
// 
GO FUNC flag.PrintDefaults has: 
// func printDefaults()  {
// 	 := flag.PrintDefaults()
// 	...ABEND: TODO...
// }
// 
GO FUNC flag.ResetForTesting has: 
// func resetForTesting(usage ABEND881(unrecognized Expr type *ast.FuncType at: &{4134953 0xc001467890 <nil>}))  {
// 	 := flag.ResetForTesting(usage)
// 	...ABEND: TODO...
// }
// 
GO FUNC flag.StringVar has: 
// func stringVar(p ABEND881(unrecognized Expr type *ast.StarExpr at: &{4158642 string}), name string, value string, usage string)  {
// 	 := flag.StringVar(p, name, value, usage)
// 	...ABEND: TODO...
// }
// 
GO FUNC flag.Uint64Var has: 
// func uint64Var(p ABEND881(unrecognized Expr type *ast.StarExpr at: &{4157421 uint64}), name string, value Object, usage string)  {
// 	 := flag.Uint64Var(p, name, value, usage)
// 	...ABEND: TODO...
// }
// 
GO FUNC flag.UintVar has: 
// func uintVar(p ABEND881(unrecognized Expr type *ast.StarExpr at: &{4156236 uint}), name string, value Object, usage string)  {
// 	 := flag.UintVar(p, name, value, usage)
// 	...ABEND: TODO...
// }
// 
GO FUNC flag.Var has: 
// func var(value Object, name string, usage string)  {
// 	 := flag.Var(value, name, usage)
// 	...ABEND: TODO...
// }
// 
GO FUNC flag.Visit has: 
// func visit(fn ABEND881(unrecognized Expr type *ast.FuncType at: &{4145236 0xc00139c810 <nil>}))  {
// 	 := flag.Visit(fn)
// 	...ABEND: TODO...
// }
// 
GO FUNC flag.VisitAll has: 
// func visitAll(fn ABEND881(unrecognized Expr type *ast.FuncType at: &{4144816 0xc00139c4b0 <nil>}))  {
// 	 := flag.VisitAll(fn)
// 	...ABEND: TODO...
// }
// 
GO FUNC flag_test.Example has: 
// func example()  {
// 	 := flag_test.Example()
// 	...ABEND: TODO...
// }
// 
GO FUNC flag_test.ExampleValue has: 
// func exampleValue()  {
// 	 := flag_test.ExampleValue()
// 	...ABEND: TODO...
// }
// 
GO FUNC flag_test.TestChangingArgs has: 
// func testChangingArgs(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{4125792 0xc00156e0c0}))  {
// 	 := flag_test.TestChangingArgs(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC flag_test.TestEverything has: 
// func testEverything(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{4118559 0xc00159dbe0}))  {
// 	 := flag_test.TestEverything(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC flag_test.TestFlagSetParse has: 
// func testFlagSetParse(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{4123685 0xc00157f8e0}))  {
// 	 := flag_test.TestFlagSetParse(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC flag_test.TestGet has: 
// func testGet(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{4120277 0xc001597d80}))  {
// 	 := flag_test.TestGet(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC flag_test.TestGetters has: 
// func testGetters(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{4129832 0xc001563a00}))  {
// 	 := flag_test.TestGetters(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC flag_test.TestHelp has: 
// func testHelp(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{4126448 0xc00156ece0}))  {
// 	 := flag_test.TestHelp(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC flag_test.TestIntFlagOverflow has: 
// func testIntFlagOverflow(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{4129065 0xc001562c80}))  {
// 	 := flag_test.TestIntFlagOverflow(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC flag_test.TestParse has: 
// func testParse(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{4123567 0xc00157f6a0}))  {
// 	 := flag_test.TestParse(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC flag_test.TestPrintDefaults has: 
// func testPrintDefaults(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{4128137 0xc00156fce0}))  {
// 	 := flag_test.TestPrintDefaults(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC flag_test.TestSetOutput has: 
// func testSetOutput(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{4125382 0xc001577a80}))  {
// 	 := flag_test.TestSetOutput(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC flag_test.TestUsage has: 
// func testUsage(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{4121415 0xc0015912e0}))  {
// 	 := flag_test.TestUsage(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC flag_test.TestUsageOutput has: 
// func testUsageOutput(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{4129450 0xc0015632a0}))  {
// 	 := flag_test.TestUsageOutput(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC flag_test.TestUserDefined has: 
// func testUserDefined(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{4123991 0xc00157ff20}))  {
// 	 := flag_test.TestUserDefined(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC flag_test.TestUserDefinedBool has: 
// func testUserDefinedBool(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{4124950 0xc0015771a0}))  {
// 	 := flag_test.TestUserDefinedBool(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC flag_test.TestUserDefinedForCommandLine has: 
// func testUserDefinedForCommandLine(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{4124414 0xc001576840}))  {
// 	 := flag_test.TestUserDefinedForCommandLine(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC flate.BenchmarkDecode has: 
// func benchmarkDecode(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{589149 0xc0001f1d20}))  {
// 	 := flate.BenchmarkDecode(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC flate.BenchmarkEncode has: 
// func benchmarkEncode(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{584366 0xc0005cca80}))  {
// 	 := flate.BenchmarkEncode(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC flate.TestBestSpeed has: 
// func testBestSpeed(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{736545 0xc000591fe0}))  {
// 	 := flate.TestBestSpeed(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC flate.TestBestSpeedMatch has: 
// func testBestSpeedMatch(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{739708 0xc000514a80}))  {
// 	 := flate.TestBestSpeedMatch(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC flate.TestBestSpeedMaxMatchOffset has: 
// func testBestSpeedMaxMatchOffset(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{742278 0xc0001ce260}))  {
// 	 := flate.TestBestSpeedMaxMatchOffset(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC flate.TestBlockHuff has: 
// func testBlockHuff(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{648521 0xc0006e8500}))  {
// 	 := flate.TestBlockHuff(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC flate.TestBulkHash4 has: 
// func testBulkHash4(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{724828 0xc00083cb00}))  {
// 	 := flate.TestBulkHash4(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC flate.TestDeflate has: 
// func testDeflate(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{725459 0xc00083d6c0}))  {
// 	 := flate.TestDeflate(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC flate.TestDeflateInflate has: 
// func testDeflateInflate(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{730992 0xc000293fe0}))  {
// 	 := flate.TestDeflateInflate(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC flate.TestDeflateInflateString has: 
// func testDeflateInflateString(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{731857 0xc0000e7340}))  {
// 	 := flate.TestDeflateInflateString(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC flate.TestDeterministic has: 
// func testDeterministic(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{586676 0xc0001ed7a0}))  {
// 	 := flate.TestDeterministic(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC flate.TestDictDecoder has: 
// func testDictDecoder(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{745040 0xc0002efa80}))  {
// 	 := flate.TestDictDecoder(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC flate.TestInvalidBits has: 
// func testInvalidBits(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{751179 0xc00079cdc0}))  {
// 	 := flate.TestInvalidBits(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC flate.TestInvalidEncoding has: 
// func testInvalidEncoding(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{750775 0xc00076e3a0}))  {
// 	 := flate.TestInvalidEncoding(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC flate.TestIssue5915 has: 
// func testIssue5915(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{749749 0xc0006637a0}))  {
// 	 := flate.TestIssue5915(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC flate.TestIssue5962 has: 
// func testIssue5962(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{750151 0xc0006a5760}))  {
// 	 := flate.TestIssue5962(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC flate.TestIssue6255 has: 
// func testIssue6255(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{750450 0xc0006dba60}))  {
// 	 := flate.TestIssue6255(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC flate.TestMaxStackSize has: 
// func testMaxStackSize(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{743929 0xc0000eeec0}))  {
// 	 := flate.TestMaxStackSize(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC flate.TestNlitOutOfRange has: 
// func testNlitOutOfRange(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{588370 0xc0001f1720}))  {
// 	 := flate.TestNlitOutOfRange(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC flate.TestReaderDict has: 
// func testReaderDict(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{732225 0xc0003604e0}))  {
// 	 := flate.TestReaderDict(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC flate.TestReaderEarlyEOF has: 
// func testReaderEarlyEOF(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{758775 0xc0005ddfe0}))  {
// 	 := flate.TestReaderEarlyEOF(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC flate.TestReaderTruncated has: 
// func testReaderTruncated(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{690086 0xc00079daa0}))  {
// 	 := flate.TestReaderTruncated(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC flate.TestRegression2508 has: 
// func testRegression2508(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{733249 0xc000361c60}))  {
// 	 := flate.TestRegression2508(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC flate.TestReset has: 
// func testReset(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{689515 0xc00079cd80}))  {
// 	 := flate.TestReset(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC flate.TestResetDict has: 
// func testResetDict(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{690844 0xc0007a6660}))  {
// 	 := flate.TestResetDict(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC flate.TestReverseBits has: 
// func testReverseBits(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{731155 0xc0002574c0}))  {
// 	 := flate.TestReverseBits(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC flate.TestStreams has: 
// func testStreams(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{751483 0xc0007c5c80}))  {
// 	 := flate.TestStreams(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC flate.TestTruncatedStreams has: 
// func testTruncatedStreams(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{758150 0xc0005dd860}))  {
// 	 := flate.TestTruncatedStreams(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC flate.TestVeryLongSparseChunk has: 
// func testVeryLongSparseChunk(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{726333 0xc000844a60}))  {
// 	 := flate.TestVeryLongSparseChunk(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC flate.TestWriteBlock has: 
// func testWriteBlock(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{684477 0xc00078ce40}))  {
// 	 := flate.TestWriteBlock(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC flate.TestWriteBlockDynamic has: 
// func testWriteBlockDynamic(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{684740 0xc00078d0c0}))  {
// 	 := flate.TestWriteBlockDynamic(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC flate.TestWriteError has: 
// func testWriteError(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{585154 0xc0005cdc80}))  {
// 	 := flate.TestWriteError(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC flate.TestWriterDict has: 
// func testWriterDict(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{732718 0xc000360fa0}))  {
// 	 := flate.TestWriterDict(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC flate.TestWriterPersistentError has: 
// func testWriterPersistentError(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{738616 0xc00051ac00}))  {
// 	 := flate.TestWriterPersistentError(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC flate.TestWriterReset has: 
// func testWriterReset(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{733610 0xc0005e4100}))  {
// 	 := flate.TestWriterReset(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC flate_test.Example_dictionary has: 
// func example_dictionary()  {
// 	 := flate_test.Example_dictionary()
// 	...ABEND: TODO...
// }
// 
GO FUNC flate_test.Example_reset has: 
// func example_reset()  {
// 	 := flate_test.Example_reset()
// 	...ABEND: TODO...
// }
// 
GO FUNC flate_test.Example_synchronization has: 
// func example_synchronization()  {
// 	 := flate_test.Example_synchronization()
// 	...ABEND: TODO...
// }
// 
GO FUNC fmt_test.BenchmarkFprintInt has: 
// func benchmarkFprintInt(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{4341793 0xc001e4f820}))  {
// 	 := fmt_test.BenchmarkFprintInt(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC fmt_test.BenchmarkFprintIntNoAlloc has: 
// func benchmarkFprintIntNoAlloc(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{4342112 0xc001e538e0}))  {
// 	 := fmt_test.BenchmarkFprintIntNoAlloc(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC fmt_test.BenchmarkFprintfBytes has: 
// func benchmarkFprintfBytes(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{4341929 0xc001e53460}))  {
// 	 := fmt_test.BenchmarkFprintfBytes(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC fmt_test.BenchmarkManyArgs has: 
// func benchmarkManyArgs(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{4341560 0xc001e38c60}))  {
// 	 := fmt_test.BenchmarkManyArgs(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC fmt_test.BenchmarkScanInts has: 
// func benchmarkScanInts(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{4230181 0xc001317140}))  {
// 	 := fmt_test.BenchmarkScanInts(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC fmt_test.BenchmarkScanRecursiveInt has: 
// func benchmarkScanRecursiveInt(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{4230415 0xc001317fe0}))  {
// 	 := fmt_test.BenchmarkScanRecursiveInt(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC fmt_test.BenchmarkScanRecursiveIntReaderWrapper has: 
// func benchmarkScanRecursiveIntReaderWrapper(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{4230659 0xc0013d2840}))  {
// 	 := fmt_test.BenchmarkScanRecursiveIntReaderWrapper(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC fmt_test.BenchmarkSprintfBoolean has: 
// func benchmarkSprintfBoolean(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{4340578 0xc001e1d920}))  {
// 	 := fmt_test.BenchmarkSprintfBoolean(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC fmt_test.BenchmarkSprintfBytes has: 
// func benchmarkSprintfBytes(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{4341038 0xc001e2ccc0}))  {
// 	 := fmt_test.BenchmarkSprintfBytes(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC fmt_test.BenchmarkSprintfComplex has: 
// func benchmarkSprintfComplex(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{4340431 0xc001e1d5c0}))  {
// 	 := fmt_test.BenchmarkSprintfComplex(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC fmt_test.BenchmarkSprintfEmpty has: 
// func benchmarkSprintfEmpty(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{4339092 0xc001e00780}))  {
// 	 := fmt_test.BenchmarkSprintfEmpty(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC fmt_test.BenchmarkSprintfFloat has: 
// func benchmarkSprintfFloat(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{4340293 0xc001e12a60}))  {
// 	 := fmt_test.BenchmarkSprintfFloat(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC fmt_test.BenchmarkSprintfHexBytes has: 
// func benchmarkSprintfHexBytes(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{4340867 0xc001e1dfa0}))  {
// 	 := fmt_test.BenchmarkSprintfHexBytes(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC fmt_test.BenchmarkSprintfHexString has: 
// func benchmarkSprintfHexString(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{4340715 0xc001e1dc80}))  {
// 	 := fmt_test.BenchmarkSprintfHexString(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC fmt_test.BenchmarkSprintfInt has: 
// func benchmarkSprintfInt(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{4339828 0xc001e015a0}))  {
// 	 := fmt_test.BenchmarkSprintfInt(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC fmt_test.BenchmarkSprintfIntInt has: 
// func benchmarkSprintfIntInt(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{4339959 0xc001e018e0}))  {
// 	 := fmt_test.BenchmarkSprintfIntInt(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC fmt_test.BenchmarkSprintfPadding has: 
// func benchmarkSprintfPadding(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{4338958 0xc001e00480}))  {
// 	 := fmt_test.BenchmarkSprintfPadding(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC fmt_test.BenchmarkSprintfPrefixedInt has: 
// func benchmarkSprintfPrefixedInt(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{4340101 0xc001e0df20}))  {
// 	 := fmt_test.BenchmarkSprintfPrefixedInt(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC fmt_test.BenchmarkSprintfQuoteString has: 
// func benchmarkSprintfQuoteString(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{4339672 0xc001e012c0}))  {
// 	 := fmt_test.BenchmarkSprintfQuoteString(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC fmt_test.BenchmarkSprintfSlowParsingPath has: 
// func benchmarkSprintfSlowParsingPath(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{4339533 0xc001e00fe0}))  {
// 	 := fmt_test.BenchmarkSprintfSlowParsingPath(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC fmt_test.BenchmarkSprintfString has: 
// func benchmarkSprintfString(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{4339218 0xc001e00a20}))  {
// 	 := fmt_test.BenchmarkSprintfString(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC fmt_test.BenchmarkSprintfStringer has: 
// func benchmarkSprintfStringer(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{4341210 0xc001e36020}))  {
// 	 := fmt_test.BenchmarkSprintfStringer(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC fmt_test.BenchmarkSprintfStructure has: 
// func benchmarkSprintfStructure(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{4341373 0xc001e371c0}))  {
// 	 := fmt_test.BenchmarkSprintfStructure(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC fmt_test.BenchmarkSprintfTruncateString has: 
// func benchmarkSprintfTruncateString(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{4339363 0xc001e00d00}))  {
// 	 := fmt_test.BenchmarkSprintfTruncateString(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC fmt_test.ExampleStringer has: 
// func exampleStringer()  {
// 	 := fmt_test.ExampleStringer()
// 	...ABEND: TODO...
// }
// 
GO FUNC fmt_test.TestBadVerbRecursion has: 
// func testBadVerbRecursion(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{4351334 0xc001184960}))  {
// 	 := fmt_test.TestBadVerbRecursion(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC fmt_test.TestBlank has: 
// func testBlank(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{4347017 0xc00203dc40}))  {
// 	 := fmt_test.TestBlank(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC fmt_test.TestBlankln has: 
// func testBlankln(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{4347323 0xc002156480}))  {
// 	 := fmt_test.TestBlankln(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC fmt_test.TestComplexFormatting has: 
// func testComplexFormatting(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{4335891 0xc001deb320}))  {
// 	 := fmt_test.TestComplexFormatting(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC fmt_test.TestCountMallocs has: 
// func testCountMallocs(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{4343169 0xc001e6e3e0}))  {
// 	 := fmt_test.TestCountMallocs(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC fmt_test.TestEOF has: 
// func testEOF(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{4222568 0xc00162ae20}))  {
// 	 := fmt_test.TestEOF(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC fmt_test.TestEOFAllTypes has: 
// func testEOFAllTypes(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{4224437 0xc000a57140}))  {
// 	 := fmt_test.TestEOFAllTypes(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC fmt_test.TestEOFAtEndOfInput has: 
// func testEOFAtEndOfInput(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{4223303 0xc00162ba80}))  {
// 	 := fmt_test.TestEOFAtEndOfInput(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC fmt_test.TestEmptyMap has: 
// func testEmptyMap(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{4346552 0xc001ffff60}))  {
// 	 := fmt_test.TestEmptyMap(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC fmt_test.TestFlagParser has: 
// func testFlagParser(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{4344287 0xc001edfdc0}))  {
// 	 := fmt_test.TestFlagParser(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC fmt_test.TestFmtInterface has: 
// func testFmtInterface(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{4299878 0xc001b1bc60}))  {
// 	 := fmt_test.TestFmtInterface(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC fmt_test.TestFormatterFlags has: 
// func testFormatterFlags(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{4354530 0xc001175780}))  {
// 	 := fmt_test.TestFormatterFlags(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC fmt_test.TestFormatterPrintln has: 
// func testFormatterPrintln(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{4347585 0xc002156860}))  {
// 	 := fmt_test.TestFormatterPrintln(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC fmt_test.TestHexByte has: 
// func testHexByte(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{4237276 0xc00063f820}))  {
// 	 := fmt_test.TestHexByte(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC fmt_test.TestHexBytes has: 
// func testHexBytes(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{4230992 0xc0013d2e80}))  {
// 	 := fmt_test.TestHexBytes(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC fmt_test.TestInf has: 
// func testInf(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{4218333 0xc00149fc60}))  {
// 	 := fmt_test.TestInf(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC fmt_test.TestIsSpace has: 
// func testIsSpace(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{4351628 0xc001184fc0}))  {
// 	 := fmt_test.TestIsSpace(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC fmt_test.TestLineByLineFscanf has: 
// func testLineByLineFscanf(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{4227016 0xc000523f80}))  {
// 	 := fmt_test.TestLineByLineFscanf(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC fmt_test.TestMapPrinter has: 
// func testMapPrinter(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{4346002 0xc001fa55a0}))  {
// 	 := fmt_test.TestMapPrinter(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC fmt_test.TestMultiLine has: 
// func testMultiLine(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{4225912 0xc000bb6f60}))  {
// 	 := fmt_test.TestMultiLine(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC fmt_test.TestNaN has: 
// func testNaN(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{4217670 0xc00149e6e0}))  {
// 	 := fmt_test.TestNaN(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC fmt_test.TestNilDoesNotBecomeTyped has: 
// func testNilDoesNotBecomeTyped(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{4351994 0xc001185540}))  {
// 	 := fmt_test.TestNilDoesNotBecomeTyped(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC fmt_test.TestPanics has: 
// func testPanics(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{4350656 0xc0011cdf20}))  {
// 	 := fmt_test.TestPanics(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC fmt_test.TestParsenum has: 
// func testParsenum(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{4354735 0xc001175ca0}))  {
// 	 := fmt_test.TestParsenum(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC fmt_test.TestReorder has: 
// func testReorder(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{4338729 0xc001df3f60}))  {
// 	 := fmt_test.TestReorder(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC fmt_test.TestScan has: 
// func testScan(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{4215615 0xc00129a660}))  {
// 	 := fmt_test.TestScan(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC fmt_test.TestScanEmpty has: 
// func testScanEmpty(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{4220481 0xc001612980}))  {
// 	 := fmt_test.TestScanEmpty(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC fmt_test.TestScanInts has: 
// func testScanInts(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{4229416 0xc000476740}))  {
// 	 := fmt_test.TestScanInts(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC fmt_test.TestScanMultiple has: 
// func testScanMultiple(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{4219813 0xc001519bc0}))  {
// 	 := fmt_test.TestScanMultiple(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC fmt_test.TestScanNewlinesAreSpaces has: 
// func testScanNewlinesAreSpaces(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{4232334 0xc0013fc6e0}))  {
// 	 := fmt_test.TestScanNewlinesAreSpaces(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC fmt_test.TestScanNotPointer has: 
// func testScanNotPointer(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{4221215 0xc001613540}))  {
// 	 := fmt_test.TestScanNotPointer(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC fmt_test.TestScanOverflow has: 
// func testScanOverflow(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{4216709 0xc0012ea2c0}))  {
// 	 := fmt_test.TestScanOverflow(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC fmt_test.TestScanStateCount has: 
// func testScanStateCount(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{4227759 0xc000e78120}))  {
// 	 := fmt_test.TestScanStateCount(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC fmt_test.TestScanf has: 
// func testScanf(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{4215888 0xc00129aea0}))  {
// 	 := fmt_test.TestScanf(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC fmt_test.TestScanfMulti has: 
// func testScanfMulti(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{4219672 0xc0015197e0}))  {
// 	 := fmt_test.TestScanfMulti(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC fmt_test.TestScanfNewlineMatchFormat has: 
// func testScanfNewlineMatchFormat(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{4233619 0xc000d2c100}))  {
// 	 := fmt_test.TestScanfNewlineMatchFormat(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC fmt_test.TestScanln has: 
// func testScanln(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{4215751 0xc00129aaa0}))  {
// 	 := fmt_test.TestScanln(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC fmt_test.TestScanlnNewlinesTerminate has: 
// func testScanlnNewlinesTerminate(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{4232896 0xc0013fd3e0}))  {
// 	 := fmt_test.TestScanlnNewlinesTerminate(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC fmt_test.TestScanlnNoNewline has: 
// func testScanlnNoNewline(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{4221518 0xc001613aa0}))  {
// 	 := fmt_test.TestScanlnNoNewline(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC fmt_test.TestScanlnWithMiddleNewline has: 
// func testScanlnWithMiddleNewline(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{4221831 0xc001613f80}))  {
// 	 := fmt_test.TestScanlnWithMiddleNewline(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC fmt_test.TestSlicePrinter has: 
// func testSlicePrinter(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{4345145 0xc001f586c0}))  {
// 	 := fmt_test.TestSlicePrinter(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC fmt_test.TestSprintf has: 
// func testSprintf(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{4334517 0xc001ddf6a0}))  {
// 	 := fmt_test.TestSprintf(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC fmt_test.TestStringer has: 
// func testStringer(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{4239206 0xc0012db660}))  {
// 	 := fmt_test.TestStringer(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC fmt_test.TestStructPrinter has: 
// func testStructPrinter(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{4344526 0xc001eef3e0}))  {
// 	 := fmt_test.TestStructPrinter(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC fmt_test.TestUnreadRuneWithBufio has: 
// func testUnreadRuneWithBufio(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{4224946 0xc000a57e60}))  {
// 	 := fmt_test.TestUnreadRuneWithBufio(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC fmt_test.TestWidthAndPrecision has: 
// func testWidthAndPrecision(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{4349191 0xc0011cc840}))  {
// 	 := fmt_test.TestWidthAndPrecision(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC fnv.BenchmarkFnv128KB has: 
// func benchmarkFnv128KB(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{5524164 0xc001ff1fa0}))  {
// 	 := fnv.BenchmarkFnv128KB(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC fnv.BenchmarkFnv128aKB has: 
// func benchmarkFnv128aKB(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{5524233 0xc001fea100}))  {
// 	 := fnv.BenchmarkFnv128aKB(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC fnv.BenchmarkFnv32KB has: 
// func benchmarkFnv32KB(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{5523895 0xc001ff1a20}))  {
// 	 := fnv.BenchmarkFnv32KB(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC fnv.BenchmarkFnv32aKB has: 
// func benchmarkFnv32aKB(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{5523962 0xc001ff1b80}))  {
// 	 := fnv.BenchmarkFnv32aKB(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC fnv.BenchmarkFnv64KB has: 
// func benchmarkFnv64KB(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{5524029 0xc001ff1ce0}))  {
// 	 := fnv.BenchmarkFnv64KB(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC fnv.BenchmarkFnv64aKB has: 
// func benchmarkFnv64aKB(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{5524096 0xc001ff1e40}))  {
// 	 := fnv.BenchmarkFnv64aKB(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC fnv.TestGolden128 has: 
// func testGolden128(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{5520491 0xc001ffefa0}))  {
// 	 := fnv.TestGolden128(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC fnv.TestGolden128a has: 
// func testGolden128a(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{5520566 0xc001fff120}))  {
// 	 := fnv.TestGolden128a(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC fnv.TestGolden32 has: 
// func testGolden32(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{5520200 0xc001ffe980}))  {
// 	 := fnv.TestGolden32(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC fnv.TestGolden32a has: 
// func testGolden32a(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{5520272 0xc001ffeb20}))  {
// 	 := fnv.TestGolden32a(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC fnv.TestGolden64 has: 
// func testGolden64(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{5520345 0xc001ffeca0}))  {
// 	 := fnv.TestGolden64(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC fnv.TestGolden64a has: 
// func testGolden64a(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{5520417 0xc001ffee20}))  {
// 	 := fnv.TestGolden64a(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC fnv.TestGoldenMarshal has: 
// func testGoldenMarshal(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{5521077 0xc001fffd60}))  {
// 	 := fnv.TestGoldenMarshal(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC fnv.TestIntegrity128 has: 
// func testIntegrity128(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{5522718 0xc001ff0100}))  {
// 	 := fnv.TestIntegrity128(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC fnv.TestIntegrity128a has: 
// func testIntegrity128a(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{5522788 0xc001ff0260}))  {
// 	 := fnv.TestIntegrity128a(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC fnv.TestIntegrity32 has: 
// func testIntegrity32(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{5522446 0xc001ff5b60}))  {
// 	 := fnv.TestIntegrity32(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC fnv.TestIntegrity32a has: 
// func testIntegrity32a(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{5522514 0xc001ff5ce0}))  {
// 	 := fnv.TestIntegrity32a(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC fnv.TestIntegrity64 has: 
// func testIntegrity64(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{5522582 0xc001ff5e40}))  {
// 	 := fnv.TestIntegrity64(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC fnv.TestIntegrity64a has: 
// func testIntegrity64a(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{5522650 0xc001ff5fa0}))  {
// 	 := fnv.TestIntegrity64a(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC format.TestNode has: 
// func testNode(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{4682407 0xc0017e08a0}))  {
// 	 := format.TestNode(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC format.TestPartial has: 
// func testPartial(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{4684438 0xc001a4e2c0}))  {
// 	 := format.TestPartial(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC format.TestSource has: 
// func testSource(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{4682787 0xc0017e1160}))  {
// 	 := format.TestSource(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC format_test.ExampleNode has: 
// func exampleNode()  {
// 	 := format_test.ExampleNode()
// 	...ABEND: TODO...
// }
// 
GO FUNC gif.BenchmarkDecode has: 
// func benchmarkDecode(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{6122969 0xc002721280}))  {
// 	 := gif.BenchmarkDecode(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC gif.BenchmarkEncode has: 
// func benchmarkEncode(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{6091567 0xc0023d0d80}))  {
// 	 := gif.BenchmarkEncode(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC gif.BenchmarkQuantizedEncode has: 
// func benchmarkQuantizedEncode(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{6092260 0xc0023d1ee0}))  {
// 	 := gif.BenchmarkQuantizedEncode(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC gif.TestBounds has: 
// func testBounds(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{6116838 0xc002649e40}))  {
// 	 := gif.TestBounds(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC gif.TestColorTablesMatch has: 
// func testColorTablesMatch(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{6089631 0xc0023a6980}))  {
// 	 := gif.TestColorTablesMatch(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC gif.TestDecode has: 
// func testDecode(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{6111608 0xc0025e92c0}))  {
// 	 := gif.TestDecode(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC gif.TestDecodeMemoryConsumption has: 
// func testDecodeMemoryConsumption(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{6122107 0xc002720020}))  {
// 	 := gif.TestDecodeMemoryConsumption(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC gif.TestEncodeAllFramesOutOfBounds has: 
// func testEncodeAllFramesOutOfBounds(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{6084901 0xc00231caa0}))  {
// 	 := gif.TestEncodeAllFramesOutOfBounds(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC gif.TestEncodeAllGo1Dot4 has: 
// func testEncodeAllGo1Dot4(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{6083783 0xc002227700}))  {
// 	 := gif.TestEncodeAllGo1Dot4(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC gif.TestEncodeAllGo1Dot5 has: 
// func testEncodeAllGo1Dot5(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{6083874 0xc002227880}))  {
// 	 := gif.TestEncodeAllGo1Dot5(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC gif.TestEncodeAllGo1Dot5GlobalColorModel has: 
// func testEncodeAllGo1Dot5GlobalColorModel(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{6083980 0xc002227a00}))  {
// 	 := gif.TestEncodeAllGo1Dot5GlobalColorModel(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC gif.TestEncodeBadPalettes has: 
// func testEncodeBadPalettes(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{6088896 0xc00236db60}))  {
// 	 := gif.TestEncodeBadPalettes(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC gif.TestEncodeCroppedSubImages has: 
// func testEncodeCroppedSubImages(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{6090756 0xc0023a7aa0}))  {
// 	 := gif.TestEncodeCroppedSubImages(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC gif.TestEncodeImplicitConfigSize has: 
// func testEncodeImplicitConfigSize(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{6086273 0xc00234ea40}))  {
// 	 := gif.TestEncodeImplicitConfigSize(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC gif.TestEncodeMismatchDelay has: 
// func testEncodeMismatchDelay(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{6084057 0xc002227b80}))  {
// 	 := gif.TestEncodeMismatchDelay(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC gif.TestEncodeNonZeroMinPoint has: 
// func testEncodeNonZeroMinPoint(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{6085652 0xc00231d9c0}))  {
// 	 := gif.TestEncodeNonZeroMinPoint(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC gif.TestEncodePalettes has: 
// func testEncodePalettes(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{6087358 0xc00234f520}))  {
// 	 := gif.TestEncodePalettes(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC gif.TestEncodeZeroGIF has: 
// func testEncodeZeroGIF(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{6084731 0xc00231c800}))  {
// 	 := gif.TestEncodeZeroGIF(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC gif.TestLoopCount has: 
// func testLoopCount(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{6119833 0xc002712340}))  {
// 	 := gif.TestLoopCount(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC gif.TestNoPalette has: 
// func testNoPalette(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{6117441 0xc00265e6a0}))  {
// 	 := gif.TestNoPalette(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC gif.TestPixelOutsidePaletteRange has: 
// func testPixelOutsidePaletteRange(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{6118128 0xc00265ef60}))  {
// 	 := gif.TestPixelOutsidePaletteRange(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC gif.TestSubImage has: 
// func testSubImage(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{6079454 0xc0021b06e0}))  {
// 	 := gif.TestSubImage(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC gif.TestTransparentIndex has: 
// func testTransparentIndex(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{6114869 0xc0025f7a40}))  {
// 	 := gif.TestTransparentIndex(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC gif.TestTransparentPixelOutsidePaletteRange has: 
// func testTransparentPixelOutsidePaletteRange(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{6118923 0xc00265f9a0}))  {
// 	 := gif.TestTransparentPixelOutsidePaletteRange(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC gif.TestUnexpectedEOF has: 
// func testUnexpectedEOF(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{6121659 0xc0027138c0}))  {
// 	 := gif.TestUnexpectedEOF(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC gif.TestWriter has: 
// func testWriter(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{6078707 0xc0021a57e0}))  {
// 	 := gif.TestWriter(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC gob.BenchmarkDecodeComplex128Slice has: 
// func benchmarkDecodeComplex128Slice(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{3462038 0xc0018dce00}))  {
// 	 := gob.BenchmarkDecodeComplex128Slice(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC gob.BenchmarkDecodeFloat64Slice has: 
// func benchmarkDecodeFloat64Slice(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{3462192 0xc0018dd100}))  {
// 	 := gob.BenchmarkDecodeFloat64Slice(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC gob.BenchmarkDecodeInt32Slice has: 
// func benchmarkDecodeInt32Slice(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{3462337 0xc0018dd3e0}))  {
// 	 := gob.BenchmarkDecodeInt32Slice(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC gob.BenchmarkDecodeInterfaceSlice has: 
// func benchmarkDecodeInterfaceSlice(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{3462638 0xc0018dd9a0}))  {
// 	 := gob.BenchmarkDecodeInterfaceSlice(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC gob.BenchmarkDecodeMap has: 
// func benchmarkDecodeMap(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{3462791 0xc0018ddc80}))  {
// 	 := gob.BenchmarkDecodeMap(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC gob.BenchmarkDecodeStringSlice has: 
// func benchmarkDecodeStringSlice(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{3462479 0xc0018dd6c0}))  {
// 	 := gob.BenchmarkDecodeStringSlice(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC gob.BenchmarkEncodeComplex128Slice has: 
// func benchmarkEncodeComplex128Slice(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{3460193 0xc0018d2700}))  {
// 	 := gob.BenchmarkEncodeComplex128Slice(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC gob.BenchmarkEncodeFloat64Slice has: 
// func benchmarkEncodeFloat64Slice(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{3460347 0xc0018d2a00}))  {
// 	 := gob.BenchmarkEncodeFloat64Slice(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC gob.BenchmarkEncodeInt32Slice has: 
// func benchmarkEncodeInt32Slice(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{3460492 0xc0018d2ce0}))  {
// 	 := gob.BenchmarkEncodeInt32Slice(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC gob.BenchmarkEncodeInterfaceSlice has: 
// func benchmarkEncodeInterfaceSlice(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{3460803 0xc0018d32e0}))  {
// 	 := gob.BenchmarkEncodeInterfaceSlice(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC gob.BenchmarkEncodeStringSlice has: 
// func benchmarkEncodeStringSlice(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{3460644 0xc0018d3000}))  {
// 	 := gob.BenchmarkEncodeStringSlice(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC gob.BenchmarkEndToEndByteBuffer has: 
// func benchmarkEndToEndByteBuffer(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{3457990 0xc0018c7d40}))  {
// 	 := gob.BenchmarkEndToEndByteBuffer(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC gob.BenchmarkEndToEndPipe has: 
// func benchmarkEndToEndPipe(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{3457717 0xc0018c7760}))  {
// 	 := gob.BenchmarkEndToEndPipe(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC gob.BenchmarkEndToEndSliceByteBuffer has: 
// func benchmarkEndToEndSliceByteBuffer(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{3458283 0xc0018ce380}))  {
// 	 := gob.BenchmarkEndToEndSliceByteBuffer(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC gob.Register has: 
// func register(value ABEND881(unrecognized Expr type *ast.InterfaceType at: &{3369725 0xc0011a3f20 false}))  {
// 	 := gob.Register(value)
// 	...ABEND: TODO...
// }
// 
GO FUNC gob.RegisterName has: 
// func registerName(name string, value ABEND881(unrecognized Expr type *ast.InterfaceType at: &{3368504 0xc0011a3b60 false}))  {
// 	 := gob.RegisterName(name, value)
// 	...ABEND: TODO...
// }
// 
GO FUNC gob.Test29ElementSlice has: 
// func test29ElementSlice(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{3542300 0xc001a27940}))  {
// 	 := gob.Test29ElementSlice(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC gob.TestArray has: 
// func testArray(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{3525362 0xc0019ec320}))  {
// 	 := gob.TestArray(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC gob.TestArrayType has: 
// func testArrayType(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{3374663 0xc001243200}))  {
// 	 := gob.TestArrayType(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC gob.TestAutoIndirection has: 
// func testAutoIndirection(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{3483140 0xc00193f260}))  {
// 	 := gob.TestAutoIndirection(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC gob.TestBadCount has: 
// func testBadCount(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{3535597 0xc001a130a0}))  {
// 	 := gob.TestBadCount(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC gob.TestBadData has: 
// func testBadData(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{3544468 0xc001a2f4a0}))  {
// 	 := gob.TestBadData(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC gob.TestBadRecursiveType has: 
// func testBadRecursiveType(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{3486412 0xc00194a840}))  {
// 	 := gob.TestBadRecursiveType(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC gob.TestBasic has: 
// func testBasic(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{3373831 0xc001242320}))  {
// 	 := gob.TestBasic(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC gob.TestBasicEncoderDecoder has: 
// func testBasicEncoderDecoder(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{3518202 0xc0019d13a0}))  {
// 	 := gob.TestBasicEncoderDecoder(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC gob.TestCatchInvalidNilValue has: 
// func testCatchInvalidNilValue(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{3538652 0xc001a20840}))  {
// 	 := gob.TestCatchInvalidNilValue(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC gob.TestChanFuncIgnored has: 
// func testChanFuncIgnored(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{3536721 0xc001a183a0}))  {
// 	 := gob.TestChanFuncIgnored(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC gob.TestCountDecodeMallocs has: 
// func testCountDecodeMallocs(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{3459169 0xc0018cf420}))  {
// 	 := gob.TestCountDecodeMallocs(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC gob.TestCountEncodeMallocs has: 
// func testCountEncodeMallocs(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{3458625 0xc0018ceb20}))  {
// 	 := gob.TestCountEncodeMallocs(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC gob.TestDebugSingleton has: 
// func testDebugSingleton(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{3494621 0xc001965560}))  {
// 	 := gob.TestDebugSingleton(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC gob.TestDebugStruct has: 
// func testDebugStruct(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{3495454 0xc00196e5a0}))  {
// 	 := gob.TestDebugStruct(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC gob.TestDecodeIntoNothing has: 
// func testDecodeIntoNothing(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{3530774 0xc0019fbb80}))  {
// 	 := gob.TestDecodeIntoNothing(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC gob.TestDefaultsInArray has: 
// func testDefaultsInArray(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{3526314 0xc0019ed4e0}))  {
// 	 := gob.TestDefaultsInArray(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC gob.TestEncodeIntSlice has: 
// func testEncodeIntSlice(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{3519118 0xc0019d4440}))  {
// 	 := gob.TestEncodeIntSlice(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC gob.TestEncoderDecoder has: 
// func testEncoderDecoder(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{3520902 0xc0019d8b00}))  {
// 	 := gob.TestEncoderDecoder(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC gob.TestEndToEnd has: 
// func testEndToEnd(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{3476961 0xc00191faa0}))  {
// 	 := gob.TestEndToEnd(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC gob.TestErrorForHugeSlice has: 
// func testErrorForHugeSlice(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{3542808 0xc001a2e180}))  {
// 	 := gob.TestErrorForHugeSlice(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC gob.TestErrorInvalidTypeId has: 
// func testErrorInvalidTypeId(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{3498448 0xc001975820}))  {
// 	 := gob.TestErrorInvalidTypeId(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC gob.TestFuzz has: 
// func testFuzz(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{3496296 0xc00196f600}))  {
// 	 := gob.TestFuzz(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC gob.TestFuzzOneByte has: 
// func testFuzzOneByte(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{3497407 0xc0019747a0}))  {
// 	 := gob.TestFuzzOneByte(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC gob.TestFuzzRegressions has: 
// func testFuzzRegressions(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{3496694 0xc00196fce0}))  {
// 	 := gob.TestFuzzRegressions(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC gob.TestGobEncodeIsZero has: 
// func testGobEncodeIsZero(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{3516771 0xc0019c7940}))  {
// 	 := gob.TestGobEncodeIsZero(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC gob.TestGobEncodePtrError has: 
// func testGobEncodePtrError(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{3517176 0xc0019d0280}))  {
// 	 := gob.TestGobEncodePtrError(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC gob.TestGobEncoderArrayField has: 
// func testGobEncoderArrayField(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{3506330 0xc0019a1960}))  {
// 	 := gob.TestGobEncoderArrayField(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC gob.TestGobEncoderExtraIndirect has: 
// func testGobEncoderExtraIndirect(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{3515514 0xc0019c6400}))  {
// 	 := gob.TestGobEncoderExtraIndirect(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC gob.TestGobEncoderField has: 
// func testGobEncoderField(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{3504318 0xc0019912a0}))  {
// 	 := gob.TestGobEncoderField(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC gob.TestGobEncoderFieldTypeError has: 
// func testGobEncoderFieldTypeError(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{3511994 0xc0019bc2a0}))  {
// 	 := gob.TestGobEncoderFieldTypeError(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC gob.TestGobEncoderFieldsOfDifferentType has: 
// func testGobEncoderFieldsOfDifferentType(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{3507732 0xc0019a5300}))  {
// 	 := gob.TestGobEncoderFieldsOfDifferentType(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC gob.TestGobEncoderIgnoreNilEncoder has: 
// func testGobEncoderIgnoreNilEncoder(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{3514626 0xc0019c1320}))  {
// 	 := gob.TestGobEncoderIgnoreNilEncoder(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC gob.TestGobEncoderIgnoreNonStructField has: 
// func testGobEncoderIgnoreNonStructField(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{3514111 0xc0019c0940}))  {
// 	 := gob.TestGobEncoderIgnoreNonStructField(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC gob.TestGobEncoderIgnoreStructField has: 
// func testGobEncoderIgnoreStructField(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{3513681 0xc0019c00e0}))  {
// 	 := gob.TestGobEncoderIgnoreStructField(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC gob.TestGobEncoderIndirectArrayField has: 
// func testGobEncoderIndirectArrayField(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{3506880 0xc0019a4520}))  {
// 	 := gob.TestGobEncoderIndirectArrayField(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC gob.TestGobEncoderIndirectField has: 
// func testGobEncoderIndirectField(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{3505805 0xc0019a0e80}))  {
// 	 := gob.TestGobEncoderIndirectField(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC gob.TestGobEncoderNonStructSingleton has: 
// func testGobEncoderNonStructSingleton(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{3513316 0xc0019bd960}))  {
// 	 := gob.TestGobEncoderNonStructSingleton(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC gob.TestGobEncoderPointerThenValue has: 
// func testGobEncoderPointerThenValue(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{3510732 0xc0019b2880}))  {
// 	 := gob.TestGobEncoderPointerThenValue(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC gob.TestGobEncoderStructSingleton has: 
// func testGobEncoderStructSingleton(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{3512948 0xc0019bd1a0}))  {
// 	 := gob.TestGobEncoderStructSingleton(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC gob.TestGobEncoderValueEncoder has: 
// func testGobEncoderValueEncoder(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{3508555 0xc0019ac300}))  {
// 	 := gob.TestGobEncoderValueEncoder(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC gob.TestGobEncoderValueField has: 
// func testGobEncoderValueField(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{3505265 0xc0019a0540}))  {
// 	 := gob.TestGobEncoderValueField(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC gob.TestGobEncoderValueThenPointer has: 
// func testGobEncoderValueThenPointer(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{3509235 0xc0019acda0}))  {
// 	 := gob.TestGobEncoderValueThenPointer(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC gob.TestGobMapInterfaceEncode has: 
// func testGobMapInterfaceEncode(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{3533900 0xc001a0d0e0}))  {
// 	 := gob.TestGobMapInterfaceEncode(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC gob.TestGobPtrSlices has: 
// func testGobPtrSlices(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{3537530 0xc001a19520}))  {
// 	 := gob.TestGobPtrSlices(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC gob.TestHugeWriteFails has: 
// func testHugeWriteFails(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{3544999 0xc001a2fe40}))  {
// 	 := gob.TestHugeWriteFails(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC gob.TestIgnoreInterface has: 
// func testIgnoreInterface(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{3493222 0xc0019618c0}))  {
// 	 := gob.TestIgnoreInterface(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC gob.TestIgnoreRecursiveType has: 
// func testIgnoreRecursiveType(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{3531579 0xc001a02a80}))  {
// 	 := gob.TestIgnoreRecursiveType(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC gob.TestIgnoredFields has: 
// func testIgnoredFields(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{3485698 0xc001945760}))  {
// 	 := gob.TestIgnoredFields(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC gob.TestIndirectSliceMapArray has: 
// func testIndirectSliceMapArray(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{3486946 0xc00194b280}))  {
// 	 := gob.TestIndirectSliceMapArray(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC gob.TestIntCodec has: 
// func testIntCodec(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{3465923 0xc0018fb320}))  {
// 	 := gob.TestIntCodec(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC gob.TestInterface has: 
// func testInterface(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{3489419 0xc001957a80}))  {
// 	 := gob.TestInterface(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC gob.TestInterfaceBasic has: 
// func testInterfaceBasic(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{3491446 0xc00195b9a0}))  {
// 	 := gob.TestInterfaceBasic(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC gob.TestInterfaceIndirect has: 
// func testInterfaceIndirect(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{3529270 0xc0019fab00}))  {
// 	 := gob.TestInterfaceIndirect(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC gob.TestInterfacePointer has: 
// func testInterfacePointer(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{3492523 0xc001960c40}))  {
// 	 := gob.TestInterfacePointer(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC gob.TestMapBug1 has: 
// func testMapBug1(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{3533441 0xc001a0c720}))  {
// 	 := gob.TestMapBug1(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC gob.TestMapType has: 
// func testMapType(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{3375907 0xc001248460}))  {
// 	 := gob.TestMapType(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC gob.TestMutipleEncodingsOfBadType has: 
// func testMutipleEncodingsOfBadType(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{3541509 0xc001a26fe0}))  {
// 	 := gob.TestMutipleEncodingsOfBadType(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC gob.TestNestedInterfaces has: 
// func testNestedInterfaces(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{3532482 0xc001a03580}))  {
// 	 := gob.TestNestedInterfaces(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC gob.TestNesting has: 
// func testNesting(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{3482338 0xc001937f20}))  {
// 	 := gob.TestNesting(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC gob.TestNetIP has: 
// func testNetIP(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{3517523 0xc0019d0a40}))  {
// 	 := gob.TestNetIP(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC gob.TestNilPointerInsideInterface has: 
// func testNilPointerInsideInterface(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{3540866 0xc001a266c0}))  {
// 	 := gob.TestNilPointerInsideInterface(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC gob.TestNilPointerPanics has: 
// func testNilPointerPanics(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{3539846 0xc001a21840}))  {
// 	 := gob.TestNilPointerPanics(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC gob.TestOverflow has: 
// func testOverflow(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{3479088 0xc001930420}))  {
// 	 := gob.TestOverflow(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC gob.TestPtrToMapOfMap has: 
// func testPtrToMapOfMap(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{3538042 0xc001a19e40}))  {
// 	 := gob.TestPtrToMapOfMap(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC gob.TestPtrTypeToType has: 
// func testPtrTypeToType(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{3524254 0xc0019e8700}))  {
// 	 := gob.TestPtrTypeToType(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC gob.TestRecursiveMapType has: 
// func testRecursiveMapType(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{3525771 0xc0019ecb60}))  {
// 	 := gob.TestRecursiveMapType(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC gob.TestRecursiveSliceType has: 
// func testRecursiveSliceType(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{3526018 0xc0019ed020}))  {
// 	 := gob.TestRecursiveSliceType(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC gob.TestRegistration has: 
// func testRegistration(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{3377448 0xc001249700}))  {
// 	 := gob.TestRegistration(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC gob.TestRegistrationNaming has: 
// func testRegistrationNaming(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{3377626 0xc001249a00}))  {
// 	 := gob.TestRegistrationNaming(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC gob.TestReorderedFields has: 
// func testReorderedFields(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{3485017 0xc001944a20}))  {
// 	 := gob.TestReorderedFields(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC gob.TestReregistration has: 
// func testReregistration(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{3374146 0xc001242940}))  {
// 	 := gob.TestReregistration(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC gob.TestScalarDecInstructions has: 
// func testScalarDecInstructions(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{3472339 0xc001914a20}))  {
// 	 := gob.TestScalarDecInstructions(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC gob.TestScalarEncInstructions has: 
// func testScalarEncInstructions(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{3467100 0xc001900580}))  {
// 	 := gob.TestScalarEncInstructions(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC gob.TestSequentialDecoder has: 
// func testSequentialDecoder(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{3536060 0xc001a136c0}))  {
// 	 := gob.TestSequentialDecoder(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC gob.TestSingletons has: 
// func testSingletons(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{3527263 0xc0019f6860}))  {
// 	 := gob.TestSingletons(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC gob.TestSlice has: 
// func testSlice(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{3524873 0xc0019e99a0}))  {
// 	 := gob.TestSlice(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC gob.TestSliceIncompatibility has: 
// func testSliceIncompatibility(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{3537247 0xc001a19080}))  {
// 	 := gob.TestSliceIncompatibility(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC gob.TestSliceReusesMemory has: 
// func testSliceReusesMemory(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{3534513 0xc001a0dd40}))  {
// 	 := gob.TestSliceReusesMemory(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC gob.TestSliceType has: 
// func testSliceType(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{3375362 0xc001243c40}))  {
// 	 := gob.TestSliceType(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC gob.TestStressParallel has: 
// func testStressParallel(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{3378246 0xc0012505a0}))  {
// 	 := gob.TestStressParallel(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC gob.TestStructNonStruct has: 
// func testStructNonStruct(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{3528189 0xc0019f7ba0}))  {
// 	 := gob.TestStructNonStruct(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC gob.TestStructType has: 
// func testStructType(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{3376938 0xc001249280}))  {
// 	 := gob.TestStructType(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC gob.TestTopLevelNilPointer has: 
// func testTopLevelNilPointer(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{3539159 0xc001a20dc0}))  {
// 	 := gob.TestTopLevelNilPointer(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC gob.TestTypeRace has: 
// func testTypeRace(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{3378780 0xc001250f80}))  {
// 	 := gob.TestTypeRace(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC gob.TestTypeToPtrPtrPtrPtrType has: 
// func testTypeToPtrPtrPtrPtrType(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{3524461 0xc0019e8ae0}))  {
// 	 := gob.TestTypeToPtrPtrPtrPtrType(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC gob.TestTypeToPtrType has: 
// func testTypeToPtrType(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{3524055 0xc0019e8320}))  {
// 	 := gob.TestTypeToPtrType(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC gob.TestUintCodec has: 
// func testUintCodec(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{3464973 0xc0018fa160}))  {
// 	 := gob.TestUintCodec(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC gob.TestUnexportedFields has: 
// func testUnexportedFields(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{3494027 0xc001964660}))  {
// 	 := gob.TestUnexportedFields(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC gob.TestUnsupported has: 
// func testUnsupported(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{3523594 0xc0019e39e0}))  {
// 	 := gob.TestUnsupported(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC gob.TestValueError has: 
// func testValueError(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{3525068 0xc0019e9da0}))  {
// 	 := gob.TestValueError(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC gob.TestWrongTypeDecoder has: 
// func testWrongTypeDecoder(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{3523231 0xc0019e34a0}))  {
// 	 := gob.TestWrongTypeDecoder(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC gob_test.Example_basic has: 
// func example_basic()  {
// 	 := gob_test.Example_basic()
// 	...ABEND: TODO...
// }
// 
GO FUNC gob_test.Example_encodeDecode has: 
// func example_encodeDecode()  {
// 	 := gob_test.Example_encodeDecode()
// 	...ABEND: TODO...
// }
// 
GO FUNC gob_test.Example_interface has: 
// func example_interface()  {
// 	 := gob_test.Example_interface()
// 	...ABEND: TODO...
// }
// 
GO FUNC gosym.TestLineAline has: 
// func testLineAline(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{2969906 0xc001747f80}))  {
// 	 := gosym.TestLineAline(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC gosym.TestLineFromAline has: 
// func testLineFromAline(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{2968677 0xc001746ee0}))  {
// 	 := gosym.TestLineFromAline(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC gosym.TestPCLine has: 
// func testPCLine(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{2971093 0xc00174cf60}))  {
// 	 := gosym.TestPCLine(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC gosym.TestRemotePackage has: 
// func testRemotePackage(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{2952717 0xc00170f6e0}))  {
// 	 := gosym.TestRemotePackage(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC gosym.TestStandardLibPackage has: 
// func testStandardLibPackage(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{2951758 0xc00170e3e0}))  {
// 	 := gosym.TestStandardLibPackage(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC gosym.TestStandardLibPathPackage has: 
// func testStandardLibPathPackage(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{2952230 0xc00170ed60}))  {
// 	 := gosym.TestStandardLibPathPackage(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC gzip.TestConcat has: 
// func testConcat(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{794141 0xc0006850a0}))  {
// 	 := gzip.TestConcat(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC gzip.TestDecompressor has: 
// func testDecompressor(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{776965 0xc0004b41c0}))  {
// 	 := gzip.TestDecompressor(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC gzip.TestEmpty has: 
// func testEmpty(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{789809 0xc00057df80}))  {
// 	 := gzip.TestEmpty(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC gzip.TestGZIPFilesHaveZeroMTimes has: 
// func testGZIPFilesHaveZeroMTimes(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{795952 0xc0006ad220}))  {
// 	 := gzip.TestGZIPFilesHaveZeroMTimes(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC gzip.TestIssue6550 has: 
// func testIssue6550(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{778255 0xc0004b5de0}))  {
// 	 := gzip.TestIssue6550(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC gzip.TestLatin1 has: 
// func testLatin1(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{791584 0xc0005ce2e0}))  {
// 	 := gzip.TestLatin1(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC gzip.TestLatin1RoundTrip has: 
// func testLatin1RoundTrip(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{792292 0xc0005cef60}))  {
// 	 := gzip.TestLatin1RoundTrip(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC gzip.TestLimitedWrite has: 
// func testLimitedWrite(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{795099 0xc0006ac580}))  {
// 	 := gzip.TestLimitedWrite(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC gzip.TestMultistreamFalse has: 
// func testMultistreamFalse(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{778810 0xc0003368a0}))  {
// 	 := gzip.TestMultistreamFalse(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC gzip.TestNilStream has: 
// func testNilStream(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{779799 0xc000337a40}))  {
// 	 := gzip.TestNilStream(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC gzip.TestRoundTrip has: 
// func testRoundTrip(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{790483 0xc00046ecc0}))  {
// 	 := gzip.TestRoundTrip(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC gzip.TestTruncatedStreams has: 
// func testTruncatedStreams(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{780133 0xc000337de0}))  {
// 	 := gzip.TestTruncatedStreams(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC gzip.TestWriterFlush has: 
// func testWriterFlush(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{793396 0xc0006842e0}))  {
// 	 := gzip.TestWriterFlush(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC gzip.TestWriterReset has: 
// func testWriterReset(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{794509 0xc000685860}))  {
// 	 := gzip.TestWriterReset(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC gzip_test.ExampleReader_Multistream has: 
// func exampleReader_Multistream()  {
// 	 := gzip_test.ExampleReader_Multistream()
// 	...ABEND: TODO...
// }
// 
GO FUNC gzip_test.Example_writerReader has: 
// func example_writerReader()  {
// 	 := gzip_test.Example_writerReader()
// 	...ABEND: TODO...
// }
// 
GO FUNC hash_test.Example_binaryMarshaler has: 
// func example_binaryMarshaler()  {
// 	 := hash_test.Example_binaryMarshaler()
// 	...ABEND: TODO...
// }
// 
GO FUNC hash_test.TestMarshalHash has: 
// func testMarshalHash(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{5458849 0xc002a894a0}))  {
// 	 := hash_test.TestMarshalHash(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC heap.BenchmarkDup has: 
// func benchmarkDup(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{858761 0xc0008a5220}))  {
// 	 := heap.BenchmarkDup(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC heap.Fix has: 
// func fix(h Object, i int)  {
// 	 := heap.Fix(h, i)
// 	...ABEND: TODO...
// }
// 
GO FUNC heap.Init has: 
// func init(h Object)  {
// 	 := heap.Init(h)
// 	...ABEND: TODO...
// }
// 
GO FUNC heap.Push has: 
// func push(h Object, x ABEND881(unrecognized Expr type *ast.InterfaceType at: &{853299 0xc000875500 false}))  {
// 	 := heap.Push(h, x)
// 	...ABEND: TODO...
// }
// 
GO FUNC heap.Test has: 
// func test(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{857476 0xc00089ae40}))  {
// 	 := heap.Test(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC heap.TestFix has: 
// func testFix(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{858976 0xc0008a57c0}))  {
// 	 := heap.TestFix(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC heap.TestInit0 has: 
// func testInit0(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{856902 0xc000893f20}))  {
// 	 := heap.TestInit0(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC heap.TestInit1 has: 
// func testInit1(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{857191 0xc00089a6a0}))  {
// 	 := heap.TestInit1(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC heap.TestRemove0 has: 
// func testRemove0(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{857852 0xc00089b940}))  {
// 	 := heap.TestRemove0(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC heap.TestRemove1 has: 
// func testRemove1(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{858118 0xc0008a40a0}))  {
// 	 := heap.TestRemove1(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC heap.TestRemove2 has: 
// func testRemove2(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{858374 0xc0008a47c0}))  {
// 	 := heap.TestRemove2(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC heap_test.Example_intHeap has: 
// func example_intHeap()  {
// 	 := heap_test.Example_intHeap()
// 	...ABEND: TODO...
// }
// 
GO FUNC heap_test.Example_priorityQueue has: 
// func example_priorityQueue()  {
// 	 := heap_test.Example_priorityQueue()
// 	...ABEND: TODO...
// }
// 
GO FUNC hex.BenchmarkEncode has: 
// func benchmarkEncode(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{3597854 0xc001b00580}))  {
// 	 := hex.BenchmarkEncode(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC hex.TestDecode has: 
// func testDecode(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{3592508 0xc001aec3c0}))  {
// 	 := hex.TestDecode(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC hex.TestDecodeErr has: 
// func testDecodeErr(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{3593937 0xc001aedec0}))  {
// 	 := hex.TestDecodeErr(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC hex.TestDecodeString has: 
// func testDecodeString(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{3593264 0xc001aed220}))  {
// 	 := hex.TestDecodeString(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC hex.TestDecodeStringErr has: 
// func testDecodeStringErr(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{3594238 0xc001af4640}))  {
// 	 := hex.TestDecodeStringErr(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC hex.TestDecoderErr has: 
// func testDecoderErr(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{3595721 0xc001afa380}))  {
// 	 := hex.TestDecoderErr(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC hex.TestDump has: 
// func testDump(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{3597341 0xc001b00040}))  {
// 	 := hex.TestDump(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC hex.TestDumper has: 
// func testDumper(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{3596185 0xc001afab20}))  {
// 	 := hex.TestDumper(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC hex.TestDumper_doubleclose has: 
// func testDumper_doubleclose(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{3596716 0xc001afb520}))  {
// 	 := hex.TestDumper_doubleclose(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC hex.TestDumper_earlyclose has: 
// func testDumper_earlyclose(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{3597102 0xc001afbb60}))  {
// 	 := hex.TestDumper_earlyclose(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC hex.TestEncode has: 
// func testEncode(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{3592168 0xc001ae3ca0}))  {
// 	 := hex.TestEncode(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC hex.TestEncodeToString has: 
// func testEncodeToString(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{3593077 0xc001aece20}))  {
// 	 := hex.TestEncodeToString(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC hex.TestEncoderDecoder has: 
// func testEncoderDecoder(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{3594486 0xc001af4be0}))  {
// 	 := hex.TestEncoderDecoder(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC hex_test.ExampleDecode has: 
// func exampleDecode()  {
// 	 := hex_test.ExampleDecode()
// 	...ABEND: TODO...
// }
// 
GO FUNC hex_test.ExampleDecodeString has: 
// func exampleDecodeString()  {
// 	 := hex_test.ExampleDecodeString()
// 	...ABEND: TODO...
// }
// 
GO FUNC hex_test.ExampleDump has: 
// func exampleDump()  {
// 	 := hex_test.ExampleDump()
// 	...ABEND: TODO...
// }
// 
GO FUNC hex_test.ExampleDumper has: 
// func exampleDumper()  {
// 	 := hex_test.ExampleDumper()
// 	...ABEND: TODO...
// }
// 
GO FUNC hex_test.ExampleEncode has: 
// func exampleEncode()  {
// 	 := hex_test.ExampleEncode()
// 	...ABEND: TODO...
// }
// 
GO FUNC hex_test.ExampleEncodeToString has: 
// func exampleEncodeToString()  {
// 	 := hex_test.ExampleEncodeToString()
// 	...ABEND: TODO...
// }
// 
GO FUNC hmac.BenchmarkHMACSHA256_1K has: 
// func benchmarkHMACSHA256_1K(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{1271844 0xc000b50180}))  {
// 	 := hmac.BenchmarkHMACSHA256_1K(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC hmac.BenchmarkHMACSHA256_32 has: 
// func benchmarkHMACSHA256_32(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{1272095 0xc000b50880}))  {
// 	 := hmac.BenchmarkHMACSHA256_32(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC hmac.TestEqual has: 
// func testEqual(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{1271437 0xc000b4db40}))  {
// 	 := hmac.TestEqual(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC hmac.TestHMAC has: 
// func testHMAC(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{1270661 0xc000b4ca60}))  {
// 	 := hmac.TestHMAC(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC hpack.BenchmarkEncoderSearchTable has: 
// func benchmarkEncoderSearchTable(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{15148441 0xc003095c40}))  {
// 	 := hpack.BenchmarkEncoderSearchTable(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC hpack.BenchmarkHuffmanDecode has: 
// func benchmarkHuffmanDecode(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{15131334 0xc001f06980}))  {
// 	 := hpack.BenchmarkHuffmanDecode(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC hpack.TestAppendHpackString has: 
// func testAppendHpackString(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{15143511 0xc003180960}))  {
// 	 := hpack.TestAppendHpackString(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC hpack.TestAppendHuffmanString has: 
// func testAppendHuffmanString(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{15131943 0xc001f073e0}))  {
// 	 := hpack.TestAppendHuffmanString(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC hpack.TestAppendIndexed has: 
// func testAppendIndexed(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{15143988 0xc003181180}))  {
// 	 := hpack.TestAppendIndexed(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC hpack.TestAppendIndexedName has: 
// func testAppendIndexedName(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{15145315 0xc00266a5e0}))  {
// 	 := hpack.TestAppendIndexedName(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC hpack.TestAppendNewName has: 
// func testAppendNewName(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{15144401 0xc0031819c0}))  {
// 	 := hpack.TestAppendNewName(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC hpack.TestAppendTableSize has: 
// func testAppendTableSize(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{15146059 0xc00266b320}))  {
// 	 := hpack.TestAppendTableSize(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC hpack.TestAppendVarInt has: 
// func testAppendVarInt(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{15142949 0xc00317dba0}))  {
// 	 := hpack.TestAppendVarInt(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC hpack.TestDecodeC3_NoHuffman has: 
// func testDecodeC3_NoHuffman(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{15121151 0xc0061054c0}))  {
// 	 := hpack.TestDecodeC3_NoHuffman(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC hpack.TestDecodeC4_Huffman has: 
// func testDecodeC4_Huffman(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{15122443 0xc00610c3a0}))  {
// 	 := hpack.TestDecodeC4_Huffman(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC hpack.TestDecodeC5_ResponsesNoHuff has: 
// func testDecodeC5_ResponsesNoHuff(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{15123922 0xc00610d300}))  {
// 	 := hpack.TestDecodeC5_ResponsesNoHuff(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC hpack.TestDecodeC6_ResponsesHuffman has: 
// func testDecodeC6_ResponsesHuffman(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{15126265 0xc006126540}))  {
// 	 := hpack.TestDecodeC6_ResponsesHuffman(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC hpack.TestDecoderDecode has: 
// func testDecoderDecode(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{15119062 0xc006103a60}))  {
// 	 := hpack.TestDecoderDecode(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC hpack.TestDynamicSizeUpdate has: 
// func testDynamicSizeUpdate(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{15139129 0xc002323a60}))  {
// 	 := hpack.TestDynamicSizeUpdate(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC hpack.TestDynamicTableAt has: 
// func testDynamicTableAt(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{15117428 0xc005f314e0}))  {
// 	 := hpack.TestDynamicTableAt(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC hpack.TestDynamicTableSizeEvict has: 
// func testDynamicTableSizeEvict(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{15118079 0xc006102400}))  {
// 	 := hpack.TestDynamicTableSizeEvict(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC hpack.TestEmitEnabled has: 
// func testEmitEnabled(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{15137598 0xc000835e00}))  {
// 	 := hpack.TestEmitEnabled(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC hpack.TestEncoderSearchTable has: 
// func testEncoderSearchTable(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{15141746 0xc00317c620}))  {
// 	 := hpack.TestEncoderSearchTable(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC hpack.TestEncoderSetMaxDynamicTableSize has: 
// func testEncoderSetMaxDynamicTableSize(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{15146491 0xc00266bb00}))  {
// 	 := hpack.TestEncoderSetMaxDynamicTableSize(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC hpack.TestEncoderSetMaxDynamicTableSizeLimit has: 
// func testEncoderSetMaxDynamicTableSizeLimit(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{15147282 0xc003094880}))  {
// 	 := hpack.TestEncoderSetMaxDynamicTableSizeLimit(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC hpack.TestEncoderTableSizeUpdate has: 
// func testEncoderTableSizeUpdate(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{15139919 0xc002474500}))  {
// 	 := hpack.TestEncoderTableSizeUpdate(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC hpack.TestEncoderWriteField has: 
// func testEncoderWriteField(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{15140623 0xc002475180}))  {
// 	 := hpack.TestEncoderWriteField(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC hpack.TestHeaderFieldTable has: 
// func testHeaderFieldTable(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{15071737 0xc0056fe8c0}))  {
// 	 := hpack.TestHeaderFieldTable(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC hpack.TestHeaderFieldTable_LookupMapEviction has: 
// func testHeaderFieldTable_LookupMapEviction(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{15074659 0xc0058577c0}))  {
// 	 := hpack.TestHeaderFieldTable_LookupMapEviction(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC hpack.TestHuffmanDecode has: 
// func testHuffmanDecode(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{15130211 0xc0032bba80}))  {
// 	 := hpack.TestHuffmanDecode(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC hpack.TestHuffmanDecodeCorruptPadding has: 
// func testHuffmanDecodeCorruptPadding(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{15130004 0xc0032bb6a0}))  {
// 	 := hpack.TestHuffmanDecodeCorruptPadding(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC hpack.TestHuffmanDecodeEOS has: 
// func testHuffmanDecodeEOS(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{15129494 0xc0032bada0}))  {
// 	 := hpack.TestHuffmanDecodeEOS(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC hpack.TestHuffmanDecodeExcessPadding has: 
// func testHuffmanDecodeExcessPadding(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{15128772 0xc0032ba3e0}))  {
// 	 := hpack.TestHuffmanDecodeExcessPadding(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC hpack.TestHuffmanDecodeFuzz has: 
// func testHuffmanDecodeFuzz(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{15134394 0xc001723a60}))  {
// 	 := hpack.TestHuffmanDecodeFuzz(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC hpack.TestHuffmanDecodeMaxLengthOnTrailingByte has: 
// func testHuffmanDecodeMaxLengthOnTrailingByte(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{15129762 0xc0032bb260}))  {
// 	 := hpack.TestHuffmanDecodeMaxLengthOnTrailingByte(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC hpack.TestHuffmanFuzzCrash has: 
// func testHuffmanFuzzCrash(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{15137060 0xc0008353a0}))  {
// 	 := hpack.TestHuffmanFuzzCrash(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC hpack.TestHuffmanMaxStrLen has: 
// func testHuffmanMaxStrLen(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{15132885 0xc001f07ec0}))  {
// 	 := hpack.TestHuffmanMaxStrLen(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC hpack.TestHuffmanRoundtripStress has: 
// func testHuffmanRoundtripStress(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{15133491 0xc001722940}))  {
// 	 := hpack.TestHuffmanRoundtripStress(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC hpack.TestReadVarInt has: 
// func testReadVarInt(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{15135301 0xc001726a40}))  {
// 	 := hpack.TestReadVarInt(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC hpack.TestSaveBufLimit has: 
// func testSaveBufLimit(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{15138232 0xc002322960}))  {
// 	 := hpack.TestSaveBufLimit(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC hpack.TestStaticTable has: 
// func testStaticTable(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{15075310 0xc005876480}))  {
// 	 := hpack.TestStaticTable(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC html.BenchmarkEscape has: 
// func benchmarkEscape(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{5544432 0xc001b1af40}))  {
// 	 := html.BenchmarkEscape(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC html.BenchmarkEscapeNone has: 
// func benchmarkEscapeNone(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{5544557 0xc001b1b200}))  {
// 	 := html.BenchmarkEscapeNone(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC html.BenchmarkUnescape has: 
// func benchmarkUnescape(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{5544680 0xc001b1b4c0}))  {
// 	 := html.BenchmarkUnescape(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC html.BenchmarkUnescapeDense has: 
// func benchmarkUnescapeDense(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{5545118 0xc001b16a60}))  {
// 	 := html.BenchmarkUnescapeDense(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC html.BenchmarkUnescapeNone has: 
// func benchmarkUnescapeNone(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{5544831 0xc001b16020}))  {
// 	 := html.BenchmarkUnescapeNone(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC html.BenchmarkUnescapeSparse has: 
// func benchmarkUnescapeSparse(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{5544984 0xc001b16340}))  {
// 	 := html.BenchmarkUnescapeSparse(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC html.TestEntityLength has: 
// func testEntityLength(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{5541019 0xc001bc66c0}))  {
// 	 := html.TestEntityLength(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC html.TestUnescape has: 
// func testUnescape(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{5543427 0xc001b22fe0}))  {
// 	 := html.TestUnescape(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC html.TestUnescapeEscape has: 
// func testUnescapeEscape(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{5543667 0xc001b1a5e0}))  {
// 	 := html.TestUnescapeEscape(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC html_test.ExampleEscapeString has: 
// func exampleEscapeString()  {
// 	 := html_test.ExampleEscapeString()
// 	...ABEND: TODO...
// }
// 
GO FUNC html_test.ExampleUnescapeString has: 
// func exampleUnescapeString()  {
// 	 := html_test.ExampleUnescapeString()
// 	...ABEND: TODO...
// }
// 
GO FUNC http.BenchmarkCookieString has: 
// func benchmarkCookieString(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{8273937 0xc0019850c0}))  {
// 	 := http.BenchmarkCookieString(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC http.BenchmarkHeaderWriteSubset has: 
// func benchmarkHeaderWriteSubset(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{8283455 0xc002b29260}))  {
// 	 := http.BenchmarkHeaderWriteSubset(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC http.BenchmarkReadCookies has: 
// func benchmarkReadCookies(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{8275796 0xc001a90700}))  {
// 	 := http.BenchmarkReadCookies(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC http.BenchmarkReadSetCookies has: 
// func benchmarkReadSetCookies(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{8274588 0xc001985900}))  {
// 	 := http.BenchmarkReadSetCookies(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC http.Error has: 
// func error(w Object, error string, code int)  {
// 	 := http.Error(w, error, code)
// 	...ABEND: TODO...
// }
// 
GO FUNC http.Handle has: 
// func handle(pattern string, handler Object)  {
// 	 := http.Handle(pattern, handler)
// 	...ABEND: TODO...
// }
// 
GO FUNC http.HandleFunc has: 
// func handleFunc(pattern string, handler ABEND881(unrecognized Expr type *ast.FuncType at: &{9375397 0xc00430d470 <nil>}))  {
// 	 := http.HandleFunc(pattern, handler)
// 	...ABEND: TODO...
// }
// 
GO FUNC http.NotFound has: 
// func notFound(w Object, r ABEND881(unrecognized Expr type *ast.StarExpr at: &{9362355 Request}))  {
// 	 := http.NotFound(w, r)
// 	...ABEND: TODO...
// }
// 
GO FUNC http.Redirect has: 
// func redirect(w Object, r ABEND881(unrecognized Expr type *ast.StarExpr at: &{9363749 Request}), url string, code int)  {
// 	 := http.Redirect(w, r, url, code)
// 	...ABEND: TODO...
// }
// 
GO FUNC http.ResetCachedEnvironment has: 
// func resetCachedEnvironment()  {
// 	 := http.ResetCachedEnvironment()
// 	...ABEND: TODO...
// }
// 
GO FUNC http.ResetProxyEnv has: 
// func resetProxyEnv()  {
// 	 := http.ResetProxyEnv()
// 	...ABEND: TODO...
// }
// 
GO FUNC http.ServeContent has: 
// func serveContent(w Object, req ABEND881(unrecognized Expr type *ast.StarExpr at: &{8439965 Request}), name string, modtime ABEND881(unrecognized Expr type *ast.SelectorExpr at: &{time Time}), content ABEND881(unrecognized Expr type *ast.SelectorExpr at: &{io ReadSeeker}))  {
// 	 := http.ServeContent(w, req, name, modtime, content)
// 	...ABEND: TODO...
// }
// 
GO FUNC http.ServeFile has: 
// func serveFile(w Object, r ABEND881(unrecognized Expr type *ast.StarExpr at: &{8454421 Request}), name string)  {
// 	 := http.ServeFile(w, r, name)
// 	...ABEND: TODO...
// }
// 
GO FUNC http.SetCookie has: 
// func setCookie(w Object, cookie ABEND881(unrecognized Expr type *ast.StarExpr at: &{8495788 Cookie}))  {
// 	 := http.SetCookie(w, cookie)
// 	...ABEND: TODO...
// }
// 
GO FUNC http.SetPendingDialHooks has: 
// func setPendingDialHooks(before ABEND881(unrecognized Expr type *ast.FuncType at: &{8293797 0xc0030e8660 <nil>}), after ABEND881(unrecognized Expr type *ast.FuncType at: &{8293797 0xc0030e8660 <nil>}))  {
// 	 := http.SetPendingDialHooks(before, after)
// 	...ABEND: TODO...
// }
// 
GO FUNC http.SetReadLoopBeforeNextReadHook has: 
// func setReadLoopBeforeNextReadHook(f ABEND881(unrecognized Expr type *ast.FuncType at: &{8293553 0xc0030e8510 <nil>}))  {
// 	 := http.SetReadLoopBeforeNextReadHook(f)
// 	...ABEND: TODO...
// }
// 
GO FUNC http.SetTestHookServerServe has: 
// func setTestHookServerServe(fn ABEND881(unrecognized Expr type *ast.FuncType at: &{8293953 0xc0030e87b0 <nil>}))  {
// 	 := http.SetTestHookServerServe(fn)
// 	...ABEND: TODO...
// }
// 
GO FUNC http.TestAddCookie has: 
// func testAddCookie(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{8266343 0xc0018ee440}))  {
// 	 := http.TestAddCookie(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC http.TestBodyReadBadTrailer has: 
// func testBodyReadBadTrailer(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{8721269 0xc003af6660}))  {
// 	 := http.TestBodyReadBadTrailer(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC http.TestCacheKeys has: 
// func testCacheKeys(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{9301372 0xc004237e00}))  {
// 	 := http.TestCacheKeys(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC http.TestCleanHost has: 
// func testCleanHost(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{9052683 0xc003ea85a0}))  {
// 	 := http.TestCleanHost(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC http.TestCmdGoNoHTTPServer has: 
// func testCmdGoNoHTTPServer(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{9053751 0xc003ea9180}))  {
// 	 := http.TestCmdGoNoHTTPServer(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC http.TestCookieSanitizePath has: 
// func testCookieSanitizePath(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{8273302 0xc0019845e0}))  {
// 	 := http.TestCookieSanitizePath(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC http.TestCookieSanitizeValue has: 
// func testCookieSanitizeValue(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{8272525 0xc0019817a0}))  {
// 	 := http.TestCookieSanitizeValue(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC http.TestDetectInMemoryReaders has: 
// func testDetectInMemoryReaders(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{8722566 0xc003af7e20}))  {
// 	 := http.TestDetectInMemoryReaders(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC http.TestFileTransport has: 
// func testFileTransport(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{8635492 0xc0039c4cc0}))  {
// 	 := http.TestFileTransport(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC http.TestFinalChunkedBodyReadEOF has: 
// func testFinalChunkedBodyReadEOF(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{8721948 0xc003af7340}))  {
// 	 := http.TestFinalChunkedBodyReadEOF(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC http.TestForeachHeaderElement has: 
// func testForeachHeaderElement(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{9052030 0xc003ea19a0}))  {
// 	 := http.TestForeachHeaderElement(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC http.TestHasToken has: 
// func testHasToken(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{8283026 0xc002b28b60}))  {
// 	 := http.TestHasToken(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC http.TestHeaderWrite has: 
// func testHeaderWrite(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{8281140 0xc00126e820}))  {
// 	 := http.TestHeaderWrite(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC http.TestHeaderWriteSubsetAllocs has: 
// func testHeaderWriteSubsetAllocs(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{8283606 0xc002b29620}))  {
// 	 := http.TestHeaderWriteSubsetAllocs(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC http.TestLocationResponse has: 
// func testLocationResponse(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{8167891 0xc0022de960}))  {
// 	 := http.TestLocationResponse(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC http.TestNeedsSniff has: 
// func testNeedsSniff(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{8174259 0xc0026b8440}))  {
// 	 := http.TestNeedsSniff(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC http.TestParseRange has: 
// func testParseRange(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{8638524 0xc0039d4580}))  {
// 	 := http.TestParseRange(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC http.TestParseTime has: 
// func testParseTime(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{8281776 0xc00126f320}))  {
// 	 := http.TestParseTime(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC http.TestReadCookies has: 
// func testReadCookies(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{8271341 0xc001980160}))  {
// 	 := http.TestReadCookies(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC http.TestReadRequest has: 
// func testReadRequest(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{9137088 0xc003fd0f00}))  {
// 	 := http.TestReadRequest(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC http.TestReadRequest_Bad has: 
// func testReadRequest_Bad(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{9138780 0xc003fd27e0}))  {
// 	 := http.TestReadRequest_Bad(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC http.TestReadResponse has: 
// func testReadResponse(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{8163159 0xc002377420}))  {
// 	 := http.TestReadResponse(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC http.TestReadResponseCloseInMiddle has: 
// func testReadResponseCloseInMiddle(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{8164416 0xc001810ca0}))  {
// 	 := http.TestReadResponseCloseInMiddle(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC http.TestReadResponseErrors has: 
// func testReadResponseErrors(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{8169999 0xc00259cea0}))  {
// 	 := http.TestReadResponseErrors(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC http.TestReadSetCookies has: 
// func testReadSetCookies(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{8270243 0xc00197cfa0}))  {
// 	 := http.TestReadSetCookies(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC http.TestRequestWrite has: 
// func testRequestWrite(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{8471419 0xc00309f860}))  {
// 	 := http.TestRequestWrite(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC http.TestRequestWriteClosesBody has: 
// func testRequestWriteClosesBody(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{8476074 0xc0030b4100}))  {
// 	 := http.TestRequestWriteClosesBody(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC http.TestRequestWriteError has: 
// func testRequestWriteError(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{8477111 0xc0030b5240}))  {
// 	 := http.TestRequestWriteError(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC http.TestRequestWriteTransport has: 
// func testRequestWriteTransport(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{8472584 0xc0030a8f60}))  {
// 	 := http.TestRequestWriteTransport(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC http.TestResponseContentLengthShortBody has: 
// func testResponseContentLengthShortBody(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{8169024 0xc00259c160}))  {
// 	 := http.TestResponseContentLengthShortBody(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC http.TestResponseStatusStutter has: 
// func testResponseStatusStutter(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{8168721 0xc0022dfbc0}))  {
// 	 := http.TestResponseStatusStutter(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC http.TestResponseWrite has: 
// func testResponseWrite(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{8284856 0xc002b2c480}))  {
// 	 := http.TestResponseWrite(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC http.TestResponseWritesOnlySingleConnectionClose has: 
// func testResponseWritesOnlySingleConnectionClose(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{8174813 0xc0026b8b60}))  {
// 	 := http.TestResponseWritesOnlySingleConnectionClose(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC http.TestSetCookie has: 
// func testSetCookie(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{8265395 0xc0020b74a0}))  {
// 	 := http.TestSetCookie(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC http.TestSetCookieDoubleQuotes has: 
// func testSetCookieDoubleQuotes(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{8271705 0xc001980800}))  {
// 	 := http.TestSetCookieDoubleQuotes(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC http.TestTransportPersistConnReadLoopEOF has: 
// func testTransportPersistConnReadLoopEOF(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{8175938 0xc0026b9aa0}))  {
// 	 := http.TestTransportPersistConnReadLoopEOF(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC http.TestTransportShouldRetryRequest has: 
// func testTransportShouldRetryRequest(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{8178123 0xc002c69dc0}))  {
// 	 := http.TestTransportShouldRetryRequest(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC http.TestWriteResponse has: 
// func testWriteResponse(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{8163762 0xc001810260}))  {
// 	 := http.TestWriteResponse(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC http.TestWriteSetCookies has: 
// func testWriteSetCookies(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{8264666 0xc0020b67e0}))  {
// 	 := http.TestWriteSetCookies(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC http_test.BenchmarkClient has: 
// func benchmarkClient(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{9276549 0xc0041d6000}))  {
// 	 := http_test.BenchmarkClient(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC http_test.BenchmarkClientServer has: 
// func benchmarkClientServer(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{9273026 0xc0041cc2e0}))  {
// 	 := http_test.BenchmarkClientServer(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC http_test.BenchmarkClientServerParallel4 has: 
// func benchmarkClientServerParallel4(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{9273581 0xc0041ccf00}))  {
// 	 := http_test.BenchmarkClientServerParallel4(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC http_test.BenchmarkClientServerParallel64 has: 
// func benchmarkClientServerParallel64(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{9273681 0xc0041cd080}))  {
// 	 := http_test.BenchmarkClientServerParallel64(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC http_test.BenchmarkClientServerParallelTLS4 has: 
// func benchmarkClientServerParallelTLS4(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{9273784 0xc0041cd200}))  {
// 	 := http_test.BenchmarkClientServerParallelTLS4(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC http_test.BenchmarkClientServerParallelTLS64 has: 
// func benchmarkClientServerParallelTLS64(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{9273886 0xc0041cd380}))  {
// 	 := http_test.BenchmarkClientServerParallelTLS64(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC http_test.BenchmarkCloseNotifier has: 
// func benchmarkCloseNotifier(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{9284079 0xc0041f7bc0}))  {
// 	 := http_test.BenchmarkCloseNotifier(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC http_test.BenchmarkReadRequestApachebench has: 
// func benchmarkReadRequestApachebench(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{8261118 0xc002a7dbc0}))  {
// 	 := http_test.BenchmarkReadRequestApachebench(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC http_test.BenchmarkReadRequestChrome has: 
// func benchmarkReadRequestChrome(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{8260175 0xc002a7d880}))  {
// 	 := http_test.BenchmarkReadRequestChrome(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC http_test.BenchmarkReadRequestCurl has: 
// func benchmarkReadRequestCurl(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{8260929 0xc002a7da20}))  {
// 	 := http_test.BenchmarkReadRequestCurl(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC http_test.BenchmarkReadRequestSiege has: 
// func benchmarkReadRequestSiege(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{8261313 0xc002a7dd60}))  {
// 	 := http_test.BenchmarkReadRequestSiege(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC http_test.BenchmarkReadRequestWrk has: 
// func benchmarkReadRequestWrk(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{8261576 0xc002a7df00}))  {
// 	 := http_test.BenchmarkReadRequestWrk(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC http_test.BenchmarkResponseStatusLine has: 
// func benchmarkResponseStatusLine(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{9300571 0xc0042372a0}))  {
// 	 := http_test.BenchmarkResponseStatusLine(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC http_test.BenchmarkServeMux has: 
// func benchmarkServeMux(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{9154708 0xc004032b00}))  {
// 	 := http_test.BenchmarkServeMux(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC http_test.BenchmarkServeMux_SkipServe has: 
// func benchmarkServeMux_SkipServe(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{9154796 0xc004032c60}))  {
// 	 := http_test.BenchmarkServeMux_SkipServe(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC http_test.BenchmarkServer has: 
// func benchmarkServer(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{9275028 0xc0041d2520}))  {
// 	 := http_test.BenchmarkServer(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC http_test.BenchmarkServerFakeConnNoKeepAlive has: 
// func benchmarkServerFakeConnNoKeepAlive(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{9278858 0xc0041eeac0}))  {
// 	 := http_test.BenchmarkServerFakeConnNoKeepAlive(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC http_test.BenchmarkServerFakeConnWithKeepAlive has: 
// func benchmarkServerFakeConnWithKeepAlive(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{9280133 0xc0041efde0}))  {
// 	 := http_test.BenchmarkServerFakeConnWithKeepAlive(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC http_test.BenchmarkServerFakeConnWithKeepAliveLite has: 
// func benchmarkServerFakeConnWithKeepAliveLite(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{9281204 0xc0041f49a0}))  {
// 	 := http_test.BenchmarkServerFakeConnWithKeepAliveLite(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC http_test.BenchmarkServerHandlerNoHeader has: 
// func benchmarkServerHandlerNoHeader(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{9282921 0xc0041f6420}))  {
// 	 := http_test.BenchmarkServerHandlerNoHeader(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC http_test.BenchmarkServerHandlerNoLen has: 
// func benchmarkServerHandlerNoLen(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{9282378 0xc0041f5ba0}))  {
// 	 := http_test.BenchmarkServerHandlerNoLen(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC http_test.BenchmarkServerHandlerNoType has: 
// func benchmarkServerHandlerNoType(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{9282638 0xc0041f5fa0}))  {
// 	 := http_test.BenchmarkServerHandlerNoType(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC http_test.BenchmarkServerHandlerTypeLen has: 
// func benchmarkServerHandlerTypeLen(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{9282032 0xc0041f5620}))  {
// 	 := http_test.BenchmarkServerHandlerTypeLen(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC http_test.BenchmarkServerHijack has: 
// func benchmarkServerHijack(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{9283578 0xc0041f7140}))  {
// 	 := http_test.BenchmarkServerHijack(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC http_test.ExampleFileServer has: 
// func exampleFileServer()  {
// 	 := http_test.ExampleFileServer()
// 	...ABEND: TODO...
// }
// 
GO FUNC http_test.ExampleFileServer_stripPrefix has: 
// func exampleFileServer_stripPrefix()  {
// 	 := http_test.ExampleFileServer_stripPrefix()
// 	...ABEND: TODO...
// }
// 
GO FUNC http_test.ExampleGet has: 
// func exampleGet()  {
// 	 := http_test.ExampleGet()
// 	...ABEND: TODO...
// }
// 
GO FUNC http_test.ExampleHijacker has: 
// func exampleHijacker()  {
// 	 := http_test.ExampleHijacker()
// 	...ABEND: TODO...
// }
// 
GO FUNC http_test.ExampleListenAndServe has: 
// func exampleListenAndServe()  {
// 	 := http_test.ExampleListenAndServe()
// 	...ABEND: TODO...
// }
// 
GO FUNC http_test.ExampleListenAndServeTLS has: 
// func exampleListenAndServeTLS()  {
// 	 := http_test.ExampleListenAndServeTLS()
// 	...ABEND: TODO...
// }
// 
GO FUNC http_test.ExampleResponseWriter_trailers has: 
// func exampleResponseWriter_trailers()  {
// 	 := http_test.ExampleResponseWriter_trailers()
// 	...ABEND: TODO...
// }
// 
GO FUNC http_test.ExampleServeMux_Handle has: 
// func exampleServeMux_Handle()  {
// 	 := http_test.ExampleServeMux_Handle()
// 	...ABEND: TODO...
// }
// 
GO FUNC http_test.ExampleServer_Shutdown has: 
// func exampleServer_Shutdown()  {
// 	 := http_test.ExampleServer_Shutdown()
// 	...ABEND: TODO...
// }
// 
GO FUNC http_test.ExampleStripPrefix has: 
// func exampleStripPrefix()  {
// 	 := http_test.ExampleStripPrefix()
// 	...ABEND: TODO...
// }
// 
GO FUNC http_test.Test304Responses_h1 has: 
// func test304Responses_h1(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{9099630 0xc003f4bcc0}))  {
// 	 := http_test.Test304Responses_h1(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC http_test.Test304Responses_h2 has: 
// func test304Responses_h2(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{9099701 0xc003f4be20}))  {
// 	 := http_test.Test304Responses_h2(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC http_test.TestAcceptMaxFds has: 
// func testAcceptMaxFds(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{9238177 0xc004150860}))  {
// 	 := http_test.TestAcceptMaxFds(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC http_test.TestAppendTime has: 
// func testAppendTime(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{9249615 0xc00416fb00}))  {
// 	 := http_test.TestAppendTime(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC http_test.TestAutomaticHTTP2_ListenAndServe has: 
// func testAutomaticHTTP2_ListenAndServe(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{9181862 0xc0040984a0}))  {
// 	 := http_test.TestAutomaticHTTP2_ListenAndServe(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC http_test.TestAutomaticHTTP2_ListenAndServe_GetCertificate has: 
// func testAutomaticHTTP2_ListenAndServe_GetCertificate(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{9182143 0xc004098980}))  {
// 	 := http_test.TestAutomaticHTTP2_ListenAndServe_GetCertificate(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC http_test.TestAutomaticHTTP2_Serve_H2TLSConfig has: 
// func testAutomaticHTTP2_Serve_H2TLSConfig(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{9180803 0xc0040953a0}))  {
// 	 := http_test.TestAutomaticHTTP2_Serve_H2TLSConfig(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC http_test.TestAutomaticHTTP2_Serve_NoTLSConfig has: 
// func testAutomaticHTTP2_Serve_NoTLSConfig(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{9180587 0xc004095040}))  {
// 	 := http_test.TestAutomaticHTTP2_Serve_NoTLSConfig(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC http_test.TestAutomaticHTTP2_Serve_NonH2TLSConfig has: 
// func testAutomaticHTTP2_Serve_NonH2TLSConfig(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{9180691 0xc0040951c0}))  {
// 	 := http_test.TestAutomaticHTTP2_Serve_NonH2TLSConfig(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC http_test.TestAutomaticHTTP2_Serve_WithTLSConfig has: 
// func testAutomaticHTTP2_Serve_WithTLSConfig(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{9181361 0xc004095d60}))  {
// 	 := http_test.TestAutomaticHTTP2_Serve_WithTLSConfig(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC http_test.TestBadResponseAfterReadingBody has: 
// func testBadResponseAfterReadingBody(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{9125491 0xc003fb49c0}))  {
// 	 := http_test.TestBadResponseAfterReadingBody(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC http_test.TestBasicAuth has: 
// func testBasicAuth(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{8689574 0xc003a92aa0}))  {
// 	 := http_test.TestBasicAuth(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC http_test.TestBasicAuthHeadersPreserved has: 
// func testBasicAuthHeadersPreserved(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{8690452 0xc003a93a60}))  {
// 	 := http_test.TestBasicAuthHeadersPreserved(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC http_test.TestCancelRequestMidBody_h1 has: 
// func testCancelRequestMidBody_h1(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{9101868 0xc003f5a520}))  {
// 	 := http_test.TestCancelRequestMidBody_h1(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC http_test.TestCancelRequestMidBody_h2 has: 
// func testCancelRequestMidBody_h2(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{9101955 0xc003f5a680}))  {
// 	 := http_test.TestCancelRequestMidBody_h2(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC http_test.TestCancelRequestWithChannel has: 
// func testCancelRequestWithChannel(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{8553572 0xc00388d020}))  {
// 	 := http_test.TestCancelRequestWithChannel(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC http_test.TestCancelRequestWithChannelBeforeDo_Cancel has: 
// func testCancelRequestWithChannelBeforeDo_Cancel(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{8554886 0xc0038926e0}))  {
// 	 := http_test.TestCancelRequestWithChannelBeforeDo_Cancel(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC http_test.TestCancelRequestWithChannelBeforeDo_Context has: 
// func testCancelRequestWithChannelBeforeDo_Context(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{8555002 0xc003892840}))  {
// 	 := http_test.TestCancelRequestWithChannelBeforeDo_Context(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC http_test.TestCaseSensitiveMethod_h1 has: 
// func testCaseSensitiveMethod_h1(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{9223488 0xc00412a1e0}))  {
// 	 := http_test.TestCaseSensitiveMethod_h1(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC http_test.TestCaseSensitiveMethod_h2 has: 
// func testCaseSensitiveMethod_h2(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{9223573 0xc00412a340}))  {
// 	 := http_test.TestCaseSensitiveMethod_h2(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC http_test.TestChunkedNoContent has: 
// func testChunkedNoContent(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{8544579 0xc00386eea0}))  {
// 	 := http_test.TestChunkedNoContent(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC http_test.TestChunkedResponseHeaders_h1 has: 
// func testChunkedResponseHeaders_h1(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{9090845 0xc003f33a20}))  {
// 	 := http_test.TestChunkedResponseHeaders_h1(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC http_test.TestChunkedResponseHeaders_h2 has: 
// func testChunkedResponseHeaders_h2(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{9090936 0xc003f33b80}))  {
// 	 := http_test.TestChunkedResponseHeaders_h2(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC http_test.TestClient has: 
// func testClient(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{8661014 0xc003a2d0a0}))  {
// 	 := http_test.TestClient(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC http_test.TestClientAltersCookiesOnRedirect has: 
// func testClientAltersCookiesOnRedirect(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{8703586 0xc003ac6ba0}))  {
// 	 := http_test.TestClientAltersCookiesOnRedirect(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC http_test.TestClientCanClose has: 
// func testClientCanClose(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{9169109 0xc004062b20}))  {
// 	 := http_test.TestClientCanClose(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC http_test.TestClientCopyHeadersOnRedirect has: 
// func testClientCopyHeadersOnRedirect(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{8699947 0xc003aba8e0}))  {
// 	 := http_test.TestClientCopyHeadersOnRedirect(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC http_test.TestClientCopyHostOnRedirect has: 
// func testClientCopyHostOnRedirect(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{8701558 0xc003ac0740}))  {
// 	 := http_test.TestClientCopyHostOnRedirect(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC http_test.TestClientErrorWithRequestURI has: 
// func testClientErrorWithRequestURI(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{8683501 0xc003a7c340}))  {
// 	 := http_test.TestClientErrorWithRequestURI(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC http_test.TestClientHeadContentLength_h1 has: 
// func testClientHeadContentLength_h1(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{8687783 0xc003a886c0}))  {
// 	 := http_test.TestClientHeadContentLength_h1(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC http_test.TestClientHeadContentLength_h2 has: 
// func testClientHeadContentLength_h2(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{8687878 0xc003a88820}))  {
// 	 := http_test.TestClientHeadContentLength_h2(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC http_test.TestClientHead_h1 has: 
// func testClientHead_h1(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{8661458 0xc003a2d9a0}))  {
// 	 := http_test.TestClientHead_h1(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC http_test.TestClientHead_h2 has: 
// func testClientHead_h2(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{8661525 0xc003a2db00}))  {
// 	 := http_test.TestClientHead_h2(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC http_test.TestClientInsecureTransport has: 
// func testClientInsecureTransport(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{8682437 0xc003a79220}))  {
// 	 := http_test.TestClientInsecureTransport(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC http_test.TestClientRedirect308NoGetBody has: 
// func testClientRedirect308NoGetBody(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{8675040 0xc003a5c1e0}))  {
// 	 := http_test.TestClientRedirect308NoGetBody(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC http_test.TestClientRedirect308NoLocation has: 
// func testClientRedirect308NoLocation(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{8674454 0xc003a55640}))  {
// 	 := http_test.TestClientRedirect308NoLocation(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC http_test.TestClientRedirectContext has: 
// func testClientRedirectContext(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{8667903 0xc003a42cc0}))  {
// 	 := http_test.TestClientRedirectContext(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC http_test.TestClientRedirectEatsBody_h1 has: 
// func testClientRedirectEatsBody_h1(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{8696819 0xc003aafc60}))  {
// 	 := http_test.TestClientRedirectEatsBody_h1(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC http_test.TestClientRedirectEatsBody_h2 has: 
// func testClientRedirectEatsBody_h2(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{8696910 0xc003aafdc0}))  {
// 	 := http_test.TestClientRedirectEatsBody_h2(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC http_test.TestClientRedirectResponseWithoutRequest has: 
// func testClientRedirectResponseWithoutRequest(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{8699616 0xc003aba480}))  {
// 	 := http_test.TestClientRedirectResponseWithoutRequest(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC http_test.TestClientRedirectTypes has: 
// func testClientRedirectTypes(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{8708243 0xc003ad3740}))  {
// 	 := http_test.TestClientRedirectTypes(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC http_test.TestClientRedirectUseResponse has: 
// func testClientRedirectUseResponse(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{8673383 0xc003a54280}))  {
// 	 := http_test.TestClientRedirectUseResponse(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC http_test.TestClientRedirects has: 
// func testClientRedirects(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{8664637 0xc003a37660}))  {
// 	 := http_test.TestClientRedirects(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC http_test.TestClientSendsCookieFromJar has: 
// func testClientSendsCookieFromJar(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{8676271 0xc003a5d940}))  {
// 	 := http_test.TestClientSendsCookieFromJar(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC http_test.TestClientTimeoutCancel has: 
// func testClientTimeoutCancel(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{8696152 0xc003aaee60}))  {
// 	 := http_test.TestClientTimeoutCancel(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC http_test.TestClientTimeoutKillsConn_AfterHeaders has: 
// func testClientTimeoutKillsConn_AfterHeaders(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{8630115 0xc0039ba440}))  {
// 	 := http_test.TestClientTimeoutKillsConn_AfterHeaders(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC http_test.TestClientTimeoutKillsConn_BeforeHeaders has: 
// func testClientTimeoutKillsConn_BeforeHeaders(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{8628579 0xc0039af000}))  {
// 	 := http_test.TestClientTimeoutKillsConn_BeforeHeaders(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC http_test.TestClientTimeout_Headers_h1 has: 
// func testClientTimeout_Headers_h1(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{8694475 0xc003aa19a0}))  {
// 	 := http_test.TestClientTimeout_Headers_h1(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC http_test.TestClientTimeout_Headers_h2 has: 
// func testClientTimeout_Headers_h2(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{8694564 0xc003aa1b00}))  {
// 	 := http_test.TestClientTimeout_Headers_h2(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC http_test.TestClientTimeout_h1 has: 
// func testClientTimeout_h1(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{8692436 0xc003a9b880}))  {
// 	 := http_test.TestClientTimeout_h1(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC http_test.TestClientTimeout_h2 has: 
// func testClientTimeout_h2(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{8692509 0xc003a9b9e0}))  {
// 	 := http_test.TestClientTimeout_h2(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC http_test.TestClientWithCorrectTLSServerName has: 
// func testClientWithCorrectTLSServerName(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{8683909 0xc003a7c980}))  {
// 	 := http_test.TestClientWithCorrectTLSServerName(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC http_test.TestClientWithIncorrectTLSServerName has: 
// func testClientWithIncorrectTLSServerName(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{8684458 0xc003a7d2c0}))  {
// 	 := http_test.TestClientWithIncorrectTLSServerName(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC http_test.TestClientWriteShutdown has: 
// func testClientWriteShutdown(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{9220587 0xc004111520}))  {
// 	 := http_test.TestClientWriteShutdown(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC http_test.TestClientWrites has: 
// func testClientWrites(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{8681690 0xc003a78260}))  {
// 	 := http_test.TestClientWrites(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC http_test.TestCloseIdleConnections_h1 has: 
// func testCloseIdleConnections_h1(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{9122397 0xc003fa6c20}))  {
// 	 := http_test.TestCloseIdleConnections_h1(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC http_test.TestCloseIdleConnections_h2 has: 
// func testCloseIdleConnections_h2(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{9122484 0xc003fa6d80}))  {
// 	 := http_test.TestCloseIdleConnections_h2(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC http_test.TestCloseNotifier has: 
// func testCloseNotifier(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{9225173 0xc00412be80}))  {
// 	 := http_test.TestCloseNotifier(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC http_test.TestCloseNotifierChanLeak has: 
// func testCloseNotifierChanLeak(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{9227272 0xc004130220}))  {
// 	 := http_test.TestCloseNotifierChanLeak(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC http_test.TestCloseNotifierPipelined has: 
// func testCloseNotifierPipelined(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{9226160 0xc00412ce20}))  {
// 	 := http_test.TestCloseNotifierPipelined(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC http_test.TestCloseWrite has: 
// func testCloseWrite(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{9255894 0xc004191720}))  {
// 	 := http_test.TestCloseWrite(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC http_test.TestCodesPreventingContentTypeAndBody has: 
// func testCodesPreventingContentTypeAndBody(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{9242707 0xc00415f8c0}))  {
// 	 := http_test.TestCodesPreventingContentTypeAndBody(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC http_test.TestConcurrentReadWriteReqBody_h1 has: 
// func testConcurrentReadWriteReqBody_h1(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{9108100 0xc003f6c8c0}))  {
// 	 := http_test.TestConcurrentReadWriteReqBody_h1(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC http_test.TestConcurrentReadWriteReqBody_h2 has: 
// func testConcurrentReadWriteReqBody_h2(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{9108199 0xc003f6ca20}))  {
// 	 := http_test.TestConcurrentReadWriteReqBody_h2(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC http_test.TestConcurrentServerServe has: 
// func testConcurrentServerServe(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{9284877 0xc0041fcb80}))  {
// 	 := http_test.TestConcurrentServerServe(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC http_test.TestConnectRequest_h1 has: 
// func testConnectRequest_h1(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{9109602 0xc003f721a0}))  {
// 	 := http_test.TestConnectRequest_h1(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC http_test.TestConnectRequest_h2 has: 
// func testConnectRequest_h2(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{9109677 0xc003f72300}))  {
// 	 := http_test.TestConnectRequest_h2(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC http_test.TestConsumingBodyOnNextConn has: 
// func testConsumingBodyOnNextConn(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{9142173 0xc00400a080}))  {
// 	 := http_test.TestConsumingBodyOnNextConn(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC http_test.TestContentLengthZero has: 
// func testContentLengthZero(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{9224267 0xc00412ae80}))  {
// 	 := http_test.TestContentLengthZero(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC http_test.TestContentTypeOkayOn204 has: 
// func testContentTypeOkayOn204(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{9243784 0xc0041608a0}))  {
// 	 := http_test.TestContentTypeOkayOn204(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC http_test.TestContentTypeWithCopy_h1 has: 
// func testContentTypeWithCopy_h1(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{8486629 0xc002f64d20}))  {
// 	 := http_test.TestContentTypeWithCopy_h1(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC http_test.TestContentTypeWithCopy_h2 has: 
// func testContentTypeWithCopy_h2(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{8486714 0xc002f64e80}))  {
// 	 := http_test.TestContentTypeWithCopy_h2(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC http_test.TestDeleteRedirects has: 
// func testDeleteRedirects(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{8670032 0xc003a469e0}))  {
// 	 := http_test.TestDeleteRedirects(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC http_test.TestDetectContentType has: 
// func testDetectContentType(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{8484129 0xc002f55fa0}))  {
// 	 := http_test.TestDetectContentType(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC http_test.TestDirJoin has: 
// func testDirJoin(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{8308922 0xc000b27e20}))  {
// 	 := http_test.TestDirJoin(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC http_test.TestDirectoryIfNotModified has: 
// func testDirectoryIfNotModified(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{8315656 0xc0030cbd40}))  {
// 	 := http_test.TestDirectoryIfNotModified(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC http_test.TestDoubleHijack has: 
// func testDoubleHijack(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{9239343 0xc004151ea0}))  {
// 	 := http_test.TestDoubleHijack(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC http_test.TestEmptyDirOpenCWD has: 
// func testEmptyDirOpenCWD(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{8309819 0xc000b2ce80}))  {
// 	 := http_test.TestEmptyDirOpenCWD(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC http_test.TestEmptyPasswordAuth has: 
// func testEmptyPasswordAuth(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{8688755 0xc003a89a80}))  {
// 	 := http_test.TestEmptyPasswordAuth(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC http_test.TestFSRedirect has: 
// func testFSRedirect(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{8304076 0xc0020fe800}))  {
// 	 := http_test.TestFSRedirect(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC http_test.TestFileServerCleanPath has: 
// func testFileServerCleanPath(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{8331391 0xc002d1e3a0}))  {
// 	 := http_test.TestFileServerCleanPath(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC http_test.TestFileServerCleans has: 
// func testFileServerCleans(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{8304663 0xc0020ff480}))  {
// 	 := http_test.TestFileServerCleans(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC http_test.TestFileServerEscapesNames has: 
// func testFileServerEscapesNames(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{8305320 0xc002104100}))  {
// 	 := http_test.TestFileServerEscapesNames(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC http_test.TestFileServerImplicitLeadingSlash has: 
// func testFileServerImplicitLeadingSlash(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{8308004 0xc000b26c80}))  {
// 	 := http_test.TestFileServerImplicitLeadingSlash(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC http_test.TestFileServerNotDirError has: 
// func testFileServerNotDirError(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{8330335 0xc002d190e0}))  {
// 	 := http_test.TestFileServerNotDirError(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC http_test.TestFileServerSortsNames has: 
// func testFileServerSortsNames(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{8307045 0xc002105ba0}))  {
// 	 := http_test.TestFileServerSortsNames(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC http_test.TestFileServerZeroByte has: 
// func testFileServerZeroByte(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{8313750 0xc002ba1380}))  {
// 	 := http_test.TestFileServerZeroByte(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC http_test.TestFormFileCallsParseMultipartForm has: 
// func testFormFileCallsParseMultipartForm(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{8241373 0xc002c94f60}))  {
// 	 := http_test.TestFormFileCallsParseMultipartForm(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC http_test.TestFormFileOrder has: 
// func testFormFileOrder(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{8242572 0xc002c95e00}))  {
// 	 := http_test.TestFormFileOrder(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC http_test.TestFormValueCallsParseMultipartForm has: 
// func testFormValueCallsParseMultipartForm(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{8240923 0xc002c94940}))  {
// 	 := http_test.TestFormValueCallsParseMultipartForm(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC http_test.TestGetBasicAuth has: 
// func testGetBasicAuth(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{8248522 0xc003189800}))  {
// 	 := http_test.TestGetBasicAuth(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC http_test.TestGetRequestFormat has: 
// func testGetRequestFormat(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{8662087 0xc003a306c0}))  {
// 	 := http_test.TestGetRequestFormat(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC http_test.TestH12_200NoBody has: 
// func testH12_200NoBody(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{9095437 0xc003f41460}))  {
// 	 := http_test.TestH12_200NoBody(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC http_test.TestH12_AutoGzip has: 
// func testH12_AutoGzip(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{9098649 0xc003f4ad80}))  {
// 	 := http_test.TestH12_AutoGzip(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC http_test.TestH12_AutoGzipWithDumpResponse has: 
// func testH12_AutoGzipWithDumpResponse(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{9121493 0xc003fa3e40}))  {
// 	 := http_test.TestH12_AutoGzipWithDumpResponse(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC http_test.TestH12_AutoGzip_Disabled has: 
// func testH12_AutoGzip_Disabled(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{9099101 0xc003f4b4e0}))  {
// 	 := http_test.TestH12_AutoGzip_Disabled(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC http_test.TestH12_ExplicitContentLength has: 
// func testH12_ExplicitContentLength(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{9096037 0xc003f460c0}))  {
// 	 := http_test.TestH12_ExplicitContentLength(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC http_test.TestH12_FlushBeforeBody has: 
// func testH12_FlushBeforeBody(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{9096221 0xc003f464e0}))  {
// 	 := http_test.TestH12_FlushBeforeBody(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC http_test.TestH12_FlushMidBody has: 
// func testH12_FlushMidBody(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{9096384 0xc003f46880}))  {
// 	 := http_test.TestH12_FlushMidBody(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC http_test.TestH12_HandlerWritesTooLittle has: 
// func testH12_HandlerWritesTooLittle(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{9097118 0xc003f47820}))  {
// 	 := http_test.TestH12_HandlerWritesTooLittle(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC http_test.TestH12_HandlerWritesTooMuch has: 
// func testH12_HandlerWritesTooMuch(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{9098091 0xc003f4a4e0}))  {
// 	 := http_test.TestH12_HandlerWritesTooMuch(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC http_test.TestH12_HeadContentLengthLargeBody has: 
// func testH12_HeadContentLengthLargeBody(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{9095188 0xc003f40ea0}))  {
// 	 := http_test.TestH12_HeadContentLengthLargeBody(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC http_test.TestH12_HeadContentLengthNoBody has: 
// func testH12_HeadContentLengthNoBody(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{9094834 0xc003f407a0}))  {
// 	 := http_test.TestH12_HeadContentLengthNoBody(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC http_test.TestH12_HeadContentLengthSmallBody has: 
// func testH12_HeadContentLengthSmallBody(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{9094996 0xc003f40ac0}))  {
// 	 := http_test.TestH12_HeadContentLengthSmallBody(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC http_test.TestH12_Head_ExplicitLen has: 
// func testH12_Head_ExplicitLen(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{9096578 0xc003f46ce0}))  {
// 	 := http_test.TestH12_Head_ExplicitLen(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC http_test.TestH12_Head_ImplicitLen has: 
// func testH12_Head_ImplicitLen(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{9096853 0xc003f472a0}))  {
// 	 := http_test.TestH12_Head_ImplicitLen(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC http_test.TestH12_RequestContentLength_Known_NonZero has: 
// func testH12_RequestContentLength_Known_NonZero(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{9100715 0xc003f53080}))  {
// 	 := http_test.TestH12_RequestContentLength_Known_NonZero(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC http_test.TestH12_RequestContentLength_Known_Zero has: 
// func testH12_RequestContentLength_Known_Zero(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{9100865 0xc003f53300}))  {
// 	 := http_test.TestH12_RequestContentLength_Known_Zero(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC http_test.TestH12_RequestContentLength_Unknown has: 
// func testH12_RequestContentLength_Unknown(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{9100990 0xc003f53520}))  {
// 	 := http_test.TestH12_RequestContentLength_Unknown(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC http_test.TestH12_ServerEmptyContentLength has: 
// func testH12_ServerEmptyContentLength(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{9100474 0xc003f52ca0}))  {
// 	 := http_test.TestH12_ServerEmptyContentLength(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC http_test.TestH12_SmallBody has: 
// func testH12_SmallBody(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{9095880 0xc003f41dc0}))  {
// 	 := http_test.TestH12_SmallBody(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC http_test.TestH2_204NoBody has: 
// func testH2_204NoBody(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{9095545 0xc003f416a0}))  {
// 	 := http_test.TestH2_204NoBody(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC http_test.TestH2_304NoBody has: 
// func testH2_304NoBody(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{9095608 0xc003f41800}))  {
// 	 := http_test.TestH2_304NoBody(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC http_test.TestH2_404NoBody has: 
// func testH2_404NoBody(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{9095671 0xc003f41960}))  {
// 	 := http_test.TestH2_404NoBody(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC http_test.TestHTTP10ConnectionHeader has: 
// func testHTTP10ConnectionHeader(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{9240197 0xc004156a80}))  {
// 	 := http_test.TestHTTP10ConnectionHeader(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC http_test.TestHTTP10KeepAlive204Response has: 
// func testHTTP10KeepAlive204Response(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{9170395 0xc004063a20}))  {
// 	 := http_test.TestHTTP10KeepAlive204Response(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC http_test.TestHTTP10KeepAlive304Response has: 
// func testHTTP10KeepAlive304Response(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{9170702 0xc004063d60}))  {
// 	 := http_test.TestHTTP10KeepAlive304Response(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC http_test.TestHTTP11KeepAlive204Response has: 
// func testHTTP11KeepAlive204Response(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{9170555 0xc004063bc0}))  {
// 	 := http_test.TestHTTP11KeepAlive204Response(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC http_test.TestHTTP2NoWriteDeadline has: 
// func testHTTP2NoWriteDeadline(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{9161906 0xc00404ed00}))  {
// 	 := http_test.TestHTTP2NoWriteDeadline(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC http_test.TestHTTP2UpgradeClosesConnection has: 
// func testHTTP2UpgradeClosesConnection(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{9169905 0xc004063480}))  {
// 	 := http_test.TestHTTP2UpgradeClosesConnection(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC http_test.TestHTTP2WriteDeadlineEnforcedPerStream has: 
// func testHTTP2WriteDeadlineEnforcedPerStream(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{9160166 0xc004045020}))  {
// 	 := http_test.TestHTTP2WriteDeadlineEnforcedPerStream(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC http_test.TestHTTP2WriteDeadlineExtendedOnNewRequest has: 
// func testHTTP2WriteDeadlineExtendedOnNewRequest(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{9158460 0xc00403f1c0}))  {
// 	 := http_test.TestHTTP2WriteDeadlineExtendedOnNewRequest(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC http_test.TestHTTPSClientDetectsHTTPServer has: 
// func testHTTPSClientDetectsHTTPServer(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{8687274 0xc003a85ee0}))  {
// 	 := http_test.TestHTTPSClientDetectsHTTPServer(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC http_test.TestHandlerBodyClose has: 
// func testHandlerBodyClose(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{9193102 0xc0040b1880}))  {
// 	 := http_test.TestHandlerBodyClose(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC http_test.TestHandlerFinishSkipBigContentLengthRead has: 
// func testHandlerFinishSkipBigContentLengthRead(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{9262098 0xc0041a3220}))  {
// 	 := http_test.TestHandlerFinishSkipBigContentLengthRead(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC http_test.TestHandlerPanicNil_h1 has: 
// func testHandlerPanicNil_h1(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{9211808 0xc0040f4be0}))  {
// 	 := http_test.TestHandlerPanicNil_h1(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC http_test.TestHandlerPanicNil_h2 has: 
// func testHandlerPanicNil_h2(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{9211899 0xc0040f4da0}))  {
// 	 := http_test.TestHandlerPanicNil_h2(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC http_test.TestHandlerPanicWithHijack has: 
// func testHandlerPanicWithHijack(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{9212230 0xc0040f52e0}))  {
// 	 := http_test.TestHandlerPanicWithHijack(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC http_test.TestHandlerPanic_h1 has: 
// func testHandlerPanic_h1(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{9211988 0xc0040f4f60}))  {
// 	 := http_test.TestHandlerPanic_h1(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC http_test.TestHandlerPanic_h2 has: 
// func testHandlerPanic_h2(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{9212105 0xc0040f5120}))  {
// 	 := http_test.TestHandlerPanic_h2(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC http_test.TestHandlerSetTransferEncodingChunked has: 
// func testHandlerSetTransferEncodingChunked(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{9271970 0xc0041c71a0}))  {
// 	 := http_test.TestHandlerSetTransferEncodingChunked(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC http_test.TestHandlerSetTransferEncodingGzip has: 
// func testHandlerSetTransferEncodingGzip(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{9272479 0xc0041c7940}))  {
// 	 := http_test.TestHandlerSetTransferEncodingGzip(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC http_test.TestHandlerSetsBodyNil_h1 has: 
// func testHandlerSetsBodyNil_h1(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{9262756 0xc0041a3c60}))  {
// 	 := http_test.TestHandlerSetsBodyNil_h1(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC http_test.TestHandlerSetsBodyNil_h2 has: 
// func testHandlerSetsBodyNil_h2(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{9262839 0xc0041a3dc0}))  {
// 	 := http_test.TestHandlerSetsBodyNil_h2(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC http_test.TestHandlersCanSetConnectionClose10 has: 
// func testHandlersCanSetConnectionClose10(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{9169674 0xc004063140}))  {
// 	 := http_test.TestHandlersCanSetConnectionClose10(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC http_test.TestHandlersCanSetConnectionClose11 has: 
// func testHandlersCanSetConnectionClose11(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{9169449 0xc004062e00}))  {
// 	 := http_test.TestHandlersCanSetConnectionClose11(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC http_test.TestHeadResponses_h1 has: 
// func testHeadResponses_h1(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{9175717 0xc0040837a0}))  {
// 	 := http_test.TestHeadResponses_h1(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC http_test.TestHeadResponses_h2 has: 
// func testHeadResponses_h2(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{9175790 0xc004083900}))  {
// 	 := http_test.TestHeadResponses_h2(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC http_test.TestHeaderToWire has: 
// func testHeaderToWire(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{9232692 0xc00413ef80}))  {
// 	 := http_test.TestHeaderToWire(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC http_test.TestHijackAfterCloseNotifier has: 
// func testHijackAfterCloseNotifier(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{9228247 0xc004130c80}))  {
// 	 := http_test.TestHijackAfterCloseNotifier(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC http_test.TestHijackBeforeRequestBodyRead has: 
// func testHijackBeforeRequestBodyRead(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{9229497 0xc00413a100}))  {
// 	 := http_test.TestHijackBeforeRequestBodyRead(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC http_test.TestHostHandlers has: 
// func testHostHandlers(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{9144019 0xc00400b980}))  {
// 	 := http_test.TestHostHandlers(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC http_test.TestIdentityResponse has: 
// func testIdentityResponse(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{9164771 0xc004054080}))  {
// 	 := http_test.TestIdentityResponse(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC http_test.TestIdentityResponseHeaders has: 
// func testIdentityResponseHeaders(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{9174733 0xc0040826c0}))  {
// 	 := http_test.TestIdentityResponseHeaders(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC http_test.TestIdleConnChannelLeak has: 
// func testIdleConnChannelLeak(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{8570346 0xc0038d3060}))  {
// 	 := http_test.TestIdleConnChannelLeak(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC http_test.TestIdleConnH2Crash has: 
// func testIdleConnH2Crash(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{8617050 0xc003990300}))  {
// 	 := http_test.TestIdleConnH2Crash(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC http_test.TestInterruptWithPanic_ErrAbortHandler_h1 has: 
// func testInterruptWithPanic_ErrAbortHandler_h1(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{9119470 0xc003f99ba0}))  {
// 	 := http_test.TestInterruptWithPanic_ErrAbortHandler_h1(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC http_test.TestInterruptWithPanic_ErrAbortHandler_h2 has: 
// func testInterruptWithPanic_ErrAbortHandler_h2(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{9119587 0xc003f99d20}))  {
// 	 := http_test.TestInterruptWithPanic_ErrAbortHandler_h2(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC http_test.TestInterruptWithPanic_h1 has: 
// func testInterruptWithPanic_h1(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{9119080 0xc003f995a0}))  {
// 	 := http_test.TestInterruptWithPanic_h1(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC http_test.TestInterruptWithPanic_h2 has: 
// func testInterruptWithPanic_h2(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{9119175 0xc003f99720}))  {
// 	 := http_test.TestInterruptWithPanic_h2(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC http_test.TestInterruptWithPanic_nil_h1 has: 
// func testInterruptWithPanic_nil_h1(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{9119274 0xc003f998a0}))  {
// 	 := http_test.TestInterruptWithPanic_nil_h1(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC http_test.TestInterruptWithPanic_nil_h2 has: 
// func testInterruptWithPanic_nil_h2(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{9119366 0xc003f99a20}))  {
// 	 := http_test.TestInterruptWithPanic_nil_h2(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC http_test.TestInvalidTrailerClosesConnection has: 
// func testInvalidTrailerClosesConnection(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{9196140 0xc0040be820}))  {
// 	 := http_test.TestInvalidTrailerClosesConnection(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC http_test.TestIssue10884_MaxBytesEOF has: 
// func testIssue10884_MaxBytesEOF(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{8253862 0xc0032f8ca0}))  {
// 	 := http_test.TestIssue10884_MaxBytesEOF(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC http_test.TestIssue11549_Expect100 has: 
// func testIssue11549_Expect100(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{9261001 0xc0041a2560}))  {
// 	 := http_test.TestIssue11549_Expect100(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC http_test.TestIssue13893_Expect100 has: 
// func testIssue13893_Expect100(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{9260393 0xc00419fd20}))  {
// 	 := http_test.TestIssue13893_Expect100(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC http_test.TestIssue3595 has: 
// func testIssue3595(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{8543844 0xc00386e2c0}))  {
// 	 := http_test.TestIssue3595(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC http_test.TestIssue3644 has: 
// func testIssue3644(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{8543196 0xc0038696a0}))  {
// 	 := http_test.TestIssue3644(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC http_test.TestIssue4191_InfiniteGetTimeout has: 
// func testIssue4191_InfiniteGetTimeout(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{8546620 0xc003875020}))  {
// 	 := http_test.TestIssue4191_InfiniteGetTimeout(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC http_test.TestIssue4191_InfiniteGetToPutTimeout has: 
// func testIssue4191_InfiniteGetToPutTimeout(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{8547848 0xc003878780}))  {
// 	 := http_test.TestIssue4191_InfiniteGetToPutTimeout(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC http_test.TestJarCalls has: 
// func testJarCalls(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{8678685 0xc003a68b00}))  {
// 	 := http_test.TestJarCalls(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC http_test.TestKeepAliveFinalChunkWithEOF has: 
// func testKeepAliveFinalChunkWithEOF(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{9170933 0xc004063f40}))  {
// 	 := http_test.TestKeepAliveFinalChunkWithEOF(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC http_test.TestLinuxSendfile has: 
// func testLinuxSendfile(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{8327463 0xc0031a5ee0}))  {
// 	 := http_test.TestLinuxSendfile(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC http_test.TestLinuxSendfileChild has: 
// func testLinuxSendfileChild()  {
// 	 := http_test.TestLinuxSendfileChild()
// 	...ABEND: TODO...
// }
// 
GO FUNC http_test.TestMain has: 
// func testMain(m ABEND881(unrecognized Expr type *ast.StarExpr at: &{8227705 0xc002750c60}))  {
// 	 := http_test.TestMain(m)
// 	...ABEND: TODO...
// }
// 
GO FUNC http_test.TestMaxBytesReaderStickyError has: 
// func testMaxBytesReaderStickyError(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{8254248 0xc0032f91e0}))  {
// 	 := http_test.TestMaxBytesReaderStickyError(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC http_test.TestMissingFileMultipartRequest has: 
// func testMissingFileMultipartRequest(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{8240677 0xc002c946c0}))  {
// 	 := http_test.TestMissingFileMultipartRequest(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC http_test.TestMissingStatusNoPanic has: 
// func testMissingStatusNoPanic(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{8625313 0xc0039abfc0}))  {
// 	 := http_test.TestMissingStatusNoPanic(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC http_test.TestMultipartReader has: 
// func testMultipartReader(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{8235958 0xc002c481e0}))  {
// 	 := http_test.TestMultipartReader(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC http_test.TestMultipartReaderOrder has: 
// func testMultipartReaderOrder(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{8242138 0xc002c95880}))  {
// 	 := http_test.TestMultipartReaderOrder(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC http_test.TestMultipartRequest has: 
// func testMultipartRequest(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{8239754 0xc002c4bc00}))  {
// 	 := http_test.TestMultipartRequest(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC http_test.TestMultipartRequestAuto has: 
// func testMultipartRequestAuto(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{8240341 0xc002c94320}))  {
// 	 := http_test.TestMultipartRequestAuto(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC http_test.TestMuxRedirectLeadingSlashes has: 
// func testMuxRedirectLeadingSlashes(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{9149809 0xc00401dc20}))  {
// 	 := http_test.TestMuxRedirectLeadingSlashes(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC http_test.TestNewClientServerTest has: 
// func testNewClientServerTest(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{9090280 0xc003f32cc0}))  {
// 	 := http_test.TestNewClientServerTest(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC http_test.TestNewRequestContentLength has: 
// func testNewRequestContentLength(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{8246421 0xc002eff080}))  {
// 	 := http_test.TestNewRequestContentLength(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC http_test.TestNewRequestGetBody has: 
// func testNewRequestGetBody(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{8255739 0xc00339ace0}))  {
// 	 := http_test.TestNewRequestGetBody(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC http_test.TestNewRequestHost has: 
// func testNewRequestHost(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{8245418 0xc002ef9ea0}))  {
// 	 := http_test.TestNewRequestHost(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC http_test.TestNextProtoUpgrade has: 
// func testNextProtoUpgrade(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{8489120 0xc002f6daa0}))  {
// 	 := http_test.TestNextProtoUpgrade(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC http_test.TestNoBodyOnChunked304Response has: 
// func testNoBodyOnChunked304Response(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{8626876 0xc0039ad860}))  {
// 	 := http_test.TestNoBodyOnChunked304Response(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC http_test.TestNoContentLengthIfTransferEncoding has: 
// func testNoContentLengthIfTransferEncoding(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{9258710 0xc00419e020}))  {
// 	 := http_test.TestNoContentLengthIfTransferEncoding(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC http_test.TestNoCrashReturningTransportAltConn has: 
// func testNoCrashReturningTransportAltConn(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{8597755 0xc003933600}))  {
// 	 := http_test.TestNoCrashReturningTransportAltConn(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC http_test.TestNoSniffExpectRequestBody_h1 has: 
// func testNoSniffExpectRequestBody_h1(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{9123446 0xc003fac180}))  {
// 	 := http_test.TestNoSniffExpectRequestBody_h1(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC http_test.TestNoSniffExpectRequestBody_h2 has: 
// func testNoSniffExpectRequestBody_h2(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{9123541 0xc003fac2e0}))  {
// 	 := http_test.TestNoSniffExpectRequestBody_h2(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC http_test.TestOnlyWriteTimeout has: 
// func testOnlyWriteTimeout(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{9163161 0xc004052140}))  {
// 	 := http_test.TestOnlyWriteTimeout(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC http_test.TestOptions has: 
// func testOptions(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{9230866 0xc00413b740}))  {
// 	 := http_test.TestOptions(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC http_test.TestParseBasicAuth has: 
// func testParseBasicAuth(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{8250391 0xc00318b480}))  {
// 	 := http_test.TestParseBasicAuth(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC http_test.TestParseFormInitializeOnError has: 
// func testParseFormInitializeOnError(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{8235537 0xc002b4faa0}))  {
// 	 := http_test.TestParseFormInitializeOnError(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC http_test.TestParseFormQuery has: 
// func testParseFormQuery(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{8232423 0xc002790ec0}))  {
// 	 := http_test.TestParseFormQuery(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC http_test.TestParseFormQueryMethods has: 
// func testParseFormQueryMethods(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{8234085 0xc002b4e780}))  {
// 	 := http_test.TestParseFormQueryMethods(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC http_test.TestParseFormUnknownContentType has: 
// func testParseFormUnknownContentType(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{8235056 0xc002b4f300}))  {
// 	 := http_test.TestParseFormUnknownContentType(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC http_test.TestParseHTTPVersion has: 
// func testParseHTTPVersion(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{8247783 0xc003188b60}))  {
// 	 := http_test.TestParseHTTPVersion(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC http_test.TestParseMultipartForm has: 
// func testParseMultipartForm(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{8238208 0xc002c49f20}))  {
// 	 := http_test.TestParseMultipartForm(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC http_test.TestParseMultipartFormOrder has: 
// func testParseMultipartFormOrder(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{8241725 0xc002c953a0}))  {
// 	 := http_test.TestParseMultipartFormOrder(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC http_test.TestParseMultipartFormPopulatesPostForm has: 
// func testParseMultipartFormPopulatesPostForm(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{8236809 0xc002c48d60}))  {
// 	 := http_test.TestParseMultipartFormPopulatesPostForm(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC http_test.TestPostFormRequestFormat has: 
// func testPostFormRequestFormat(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{8663316 0xc003a31e80}))  {
// 	 := http_test.TestPostFormRequestFormat(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC http_test.TestPostRedirects has: 
// func testPostRedirects(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{8668863 0xc003a43f00}))  {
// 	 := http_test.TestPostRedirects(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC http_test.TestPostRequestFormat has: 
// func testPostRequestFormat(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{8662581 0xc003a31040}))  {
// 	 := http_test.TestPostRequestFormat(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC http_test.TestProxyFromEnvironment has: 
// func testProxyFromEnvironment(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{8569492 0xc0038cdfe0}))  {
// 	 := http_test.TestProxyFromEnvironment(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC http_test.TestProxyFromEnvironmentLowerCase has: 
// func testProxyFromEnvironmentLowerCase(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{8569924 0xc0038d2820}))  {
// 	 := http_test.TestProxyFromEnvironmentLowerCase(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC http_test.TestQuery has: 
// func testQuery(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{8232182 0xc002790a00}))  {
// 	 := http_test.TestQuery(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC http_test.TestReadRequestErrors has: 
// func testReadRequestErrors(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{8244349 0xc002ef8ea0}))  {
// 	 := http_test.TestReadRequestErrors(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC http_test.TestRedirect has: 
// func testRedirect(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{9207003 0xc0040ea9c0}))  {
// 	 := http_test.TestRedirect(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC http_test.TestRedirectBadPath has: 
// func testRedirectBadPath(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{9206581 0xc0040ea320}))  {
// 	 := http_test.TestRedirectBadPath(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC http_test.TestRedirectCookiesJar has: 
// func testRedirectCookiesJar(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{8677805 0xc003a63800}))  {
// 	 := http_test.TestRedirectCookiesJar(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC http_test.TestRedirect_contentTypeAndBody has: 
// func testRedirect_contentTypeAndBody(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{9208736 0xc0040ebb60}))  {
// 	 := http_test.TestRedirect_contentTypeAndBody(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC http_test.TestRedirect_h1 has: 
// func testRedirect_h1(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{8238685 0xc002c4a5e0}))  {
// 	 := http_test.TestRedirect_h1(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC http_test.TestRedirect_h2 has: 
// func testRedirect_h2(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{8238748 0xc002c4a740}))  {
// 	 := http_test.TestRedirect_h2(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC http_test.TestReferer has: 
// func testReferer(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{8697996 0xc003ab70a0}))  {
// 	 := http_test.TestReferer(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC http_test.TestRequestBadHost has: 
// func testRequestBadHost(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{8251483 0xc0032f4a40}))  {
// 	 := http_test.TestRequestBadHost(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC http_test.TestRequestBodyCloseDoesntBlock has: 
// func testRequestBodyCloseDoesntBlock(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{9247963 0xc00416e0e0}))  {
// 	 := http_test.TestRequestBodyCloseDoesntBlock(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC http_test.TestRequestBodyLimit_h1 has: 
// func testRequestBodyLimit_h1(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{9219044 0xc0041101e0}))  {
// 	 := http_test.TestRequestBodyLimit_h1(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC http_test.TestRequestBodyLimit_h2 has: 
// func testRequestBodyLimit_h2(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{9219123 0xc004110340}))  {
// 	 := http_test.TestRequestBodyLimit_h2(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC http_test.TestRequestBodyReadErrorClosesConnection has: 
// func testRequestBodyReadErrorClosesConnection(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{9195298 0xc0040b9c00}))  {
// 	 := http_test.TestRequestBodyReadErrorClosesConnection(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC http_test.TestRequestBodyTimeoutClosesConnection has: 
// func testRequestBodyTimeoutClosesConnection(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{9199000 0xc0040c39e0}))  {
// 	 := http_test.TestRequestBodyTimeoutClosesConnection(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC http_test.TestRequestInvalidMethod has: 
// func testRequestInvalidMethod(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{8245700 0xc002efe500}))  {
// 	 := http_test.TestRequestInvalidMethod(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC http_test.TestRequestLimit_h1 has: 
// func testRequestLimit_h1(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{9217142 0xc0041084a0}))  {
// 	 := http_test.TestRequestLimit_h1(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC http_test.TestRequestLimit_h2 has: 
// func testRequestLimit_h2(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{9217213 0xc004108600}))  {
// 	 := http_test.TestRequestLimit_h2(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC http_test.TestRequestWriteBufferedWriter has: 
// func testRequestWriteBufferedWriter(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{8251123 0xc0032f4420}))  {
// 	 := http_test.TestRequestWriteBufferedWriter(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC http_test.TestResponseBodyReadAfterClose_h1 has: 
// func testResponseBodyReadAfterClose_h1(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{9107431 0xc003f65be0}))  {
// 	 := http_test.TestResponseBodyReadAfterClose_h1(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC http_test.TestResponseBodyReadAfterClose_h2 has: 
// func testResponseBodyReadAfterClose_h2(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{9107530 0xc003f65d40}))  {
// 	 := http_test.TestResponseBodyReadAfterClose_h2(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC http_test.TestResponseSetsTLSConnectionState has: 
// func testResponseSetsTLSConnectionState(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{8686353 0xc003a84f20}))  {
// 	 := http_test.TestResponseSetsTLSConnectionState(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC http_test.TestResponseWriterWriteString has: 
// func testResponseWriterWriteString(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{9249161 0xc00416f3c0}))  {
// 	 := http_test.TestResponseWriterWriteString(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC http_test.TestRetryRequestsOnError has: 
// func testRetryRequestsOnError(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{8579650 0xc0038eba60}))  {
// 	 := http_test.TestRetryRequestsOnError(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC http_test.TestReuseRequest has: 
// func testReuseRequest(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{8505141 0xc0037f0bc0}))  {
// 	 := http_test.TestReuseRequest(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC http_test.TestRoundTripGzip has: 
// func testRoundTripGzip(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{8522825 0xc003823fc0}))  {
// 	 := http_test.TestRoundTripGzip(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC http_test.TestRoundTripReturnsProxyError has: 
// func testRoundTripReturnsProxyError(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{8586485 0xc00390f7a0}))  {
// 	 := http_test.TestRoundTripReturnsProxyError(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC http_test.TestSOCKS5Proxy has: 
// func testSOCKS5Proxy(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{8530370 0xc0038420c0}))  {
// 	 := http_test.TestSOCKS5Proxy(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC http_test.TestServeContent has: 
// func testServeContent(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{8317368 0xc0030cfd20}))  {
// 	 := http_test.TestServeContent(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC http_test.TestServeContentErrorMessages has: 
// func testServeContentErrorMessages(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{8326796 0xc0031a5200}))  {
// 	 := http_test.TestServeContentErrorMessages(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC http_test.TestServeDirWithoutTrailingSlash has: 
// func testServeDirWithoutTrailingSlash(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{8311686 0xc002b9b1e0}))  {
// 	 := http_test.TestServeDirWithoutTrailingSlash(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC http_test.TestServeFile has: 
// func testServeFile(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{8299855 0xc0021299e0}))  {
// 	 := http_test.TestServeFile(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC http_test.TestServeFileContentType has: 
// func testServeFileContentType(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{8310071 0xc000b2d3e0}))  {
// 	 := http_test.TestServeFileContentType(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC http_test.TestServeFileFromCWD has: 
// func testServeFileFromCWD(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{8311313 0xc002b9aa40}))  {
// 	 := http_test.TestServeFileFromCWD(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC http_test.TestServeFileMimeType has: 
// func testServeFileMimeType(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{8310876 0xc002b9a220}))  {
// 	 := http_test.TestServeFileMimeType(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC http_test.TestServeFileWithContentEncoding_h1 has: 
// func testServeFileWithContentEncoding_h1(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{8312163 0xc002b9baa0}))  {
// 	 := http_test.TestServeFileWithContentEncoding_h1(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC http_test.TestServeFileWithContentEncoding_h2 has: 
// func testServeFileWithContentEncoding_h2(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{8312266 0xc002b9bc00}))  {
// 	 := http_test.TestServeFileWithContentEncoding_h2(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC http_test.TestServeFile_DotDot has: 
// func testServeFile_DotDot(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{8303150 0xc002133880}))  {
// 	 := http_test.TestServeFile_DotDot(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC http_test.TestServeHTTP10Close has: 
// func testServeHTTP10Close(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{9168841 0xc004062800}))  {
// 	 := http_test.TestServeHTTP10Close(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC http_test.TestServeIndexHtml has: 
// func testServeIndexHtml(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{8313225 0xc002ba0980}))  {
// 	 := http_test.TestServeIndexHtml(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC http_test.TestServeMuxHandleFuncWithNilHandler has: 
// func testServeMuxHandleFuncWithNilHandler(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{9148182 0xc004019fc0}))  {
// 	 := http_test.TestServeMuxHandleFuncWithNilHandler(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC http_test.TestServeMuxHandler has: 
// func testServeMuxHandler(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{9147600 0xc004019260}))  {
// 	 := http_test.TestServeMuxHandler(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC http_test.TestServeMuxHandlerRedirects has: 
// func testServeMuxHandlerRedirects(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{9148834 0xc00401c780}))  {
// 	 := http_test.TestServeMuxHandlerRedirects(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC http_test.TestServeTLS has: 
// func testServeTLS(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{9179196 0xc004091720}))  {
// 	 := http_test.TestServeTLS(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC http_test.TestServeWithSlashRedirectForHostPatterns has: 
// func testServeWithSlashRedirectForHostPatterns(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{9152391 0xc00402c720}))  {
// 	 := http_test.TestServeWithSlashRedirectForHostPatterns(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC http_test.TestServeWithSlashRedirectKeepsQueryString has: 
// func testServeWithSlashRedirectKeepsQueryString(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{9150744 0xc0040248c0}))  {
// 	 := http_test.TestServeWithSlashRedirectKeepsQueryString(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC http_test.TestServerAllowsBlockingRemoteAddr has: 
// func testServerAllowsBlockingRemoteAddr(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{9172859 0xc0040766c0}))  {
// 	 := http_test.TestServerAllowsBlockingRemoteAddr(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC http_test.TestServerBufferedChunking has: 
// func testServerBufferedChunking(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{9221525 0xc004118460}))  {
// 	 := http_test.TestServerBufferedChunking(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC http_test.TestServerCancelsReadTimeoutWhenIdle has: 
// func testServerCancelsReadTimeoutWhenIdle(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{9292273 0xc00421c660}))  {
// 	 := http_test.TestServerCancelsReadTimeoutWhenIdle(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC http_test.TestServerCloseDeadlock has: 
// func testServerCloseDeadlock(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{9290875 0xc004215200}))  {
// 	 := http_test.TestServerCloseDeadlock(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC http_test.TestServerCloseListenerOnce has: 
// func testServerCloseListenerOnce(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{9299093 0xc004231940}))  {
// 	 := http_test.TestServerCloseListenerOnce(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC http_test.TestServerConnState has: 
// func testServerConnState(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{9249996 0xc004172340}))  {
// 	 := http_test.TestServerConnState(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC http_test.TestServerConnStateNew has: 
// func testServerConnStateNew(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{9255149 0xc004190ca0}))  {
// 	 := http_test.TestServerConnStateNew(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC http_test.TestServerContentType_h1 has: 
// func testServerContentType_h1(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{8484361 0xc002f62400}))  {
// 	 := http_test.TestServerContentType_h1(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC http_test.TestServerContentType_h2 has: 
// func testServerContentType_h2(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{8484442 0xc002f62560}))  {
// 	 := http_test.TestServerContentType_h2(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC http_test.TestServerContext_LocalAddrContextKey_h1 has: 
// func testServerContext_LocalAddrContextKey_h1(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{9271022 0xc0041c6080}))  {
// 	 := http_test.TestServerContext_LocalAddrContextKey_h1(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC http_test.TestServerContext_LocalAddrContextKey_h2 has: 
// func testServerContext_LocalAddrContextKey_h2(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{9271136 0xc0041c61e0}))  {
// 	 := http_test.TestServerContext_LocalAddrContextKey_h2(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC http_test.TestServerContext_ServerContextKey_h1 has: 
// func testServerContext_ServerContextKey_h1(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{9270348 0xc0041bb420}))  {
// 	 := http_test.TestServerContext_ServerContextKey_h1(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC http_test.TestServerContext_ServerContextKey_h2 has: 
// func testServerContext_ServerContextKey_h2(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{9270456 0xc0041bb580}))  {
// 	 := http_test.TestServerContext_ServerContextKey_h2(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC http_test.TestServerDuplicateBackgroundRead has: 
// func testServerDuplicateBackgroundRead(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{9293764 0xc004222120}))  {
// 	 := http_test.TestServerDuplicateBackgroundRead(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC http_test.TestServerEmptyBodyRace_h1 has: 
// func testServerEmptyBodyRace_h1(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{9254289 0xc00418da40}))  {
// 	 := http_test.TestServerEmptyBodyRace_h1(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC http_test.TestServerEmptyBodyRace_h2 has: 
// func testServerEmptyBodyRace_h2(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{9254374 0xc00418dba0}))  {
// 	 := http_test.TestServerEmptyBodyRace_h2(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC http_test.TestServerExpect has: 
// func testServerExpect(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{9185630 0xc0040a1a20}))  {
// 	 := http_test.TestServerExpect(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC http_test.TestServerFileStatError has: 
// func testServerFileStatError(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{8326099 0xc0031a4620}))  {
// 	 := http_test.TestServerFileStatError(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC http_test.TestServerFlushAndHijack has: 
// func testServerFlushAndHijack(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{9256400 0xc004191c20}))  {
// 	 := http_test.TestServerFlushAndHijack(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC http_test.TestServerGracefulClose has: 
// func testServerGracefulClose(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{9222408 0xc004119000}))  {
// 	 := http_test.TestServerGracefulClose(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC http_test.TestServerHandlersCanHandleH2PRI has: 
// func testServerHandlersCanHandleH2PRI(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{9265718 0xc0041aab60}))  {
// 	 := http_test.TestServerHandlersCanHandleH2PRI(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC http_test.TestServerHijackGetsBackgroundByte has: 
// func testServerHijackGetsBackgroundByte(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{9294946 0xc0042232c0}))  {
// 	 := http_test.TestServerHijackGetsBackgroundByte(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC http_test.TestServerHijackGetsBackgroundByte_big has: 
// func testServerHijackGetsBackgroundByte_big(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{9296351 0xc004228a40}))  {
// 	 := http_test.TestServerHijackGetsBackgroundByte_big(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC http_test.TestServerIdleTimeout has: 
// func testServerIdleTimeout(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{9285128 0xc0041fd060}))  {
// 	 := http_test.TestServerIdleTimeout(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC http_test.TestServerIssue5953_h1 has: 
// func testServerIssue5953_h1(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{8485943 0xc002f63fa0}))  {
// 	 := http_test.TestServerIssue5953_h1(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC http_test.TestServerIssue5953_h2 has: 
// func testServerIssue5953_h2(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{8486020 0xc002f64100}))  {
// 	 := http_test.TestServerIssue5953_h2(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC http_test.TestServerKeepAliveAfterWriteError has: 
// func testServerKeepAliveAfterWriteError(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{9257359 0xc004196b20}))  {
// 	 := http_test.TestServerKeepAliveAfterWriteError(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC http_test.TestServerKeepAlivesEnabled has: 
// func testServerKeepAlivesEnabled(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{9253888 0xc00418d2a0}))  {
// 	 := http_test.TestServerKeepAlivesEnabled(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC http_test.TestServerKeepAlivesEnabled_h1 has: 
// func testServerKeepAlivesEnabled_h1(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{9291064 0xc004215460}))  {
// 	 := http_test.TestServerKeepAlivesEnabled_h1(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC http_test.TestServerKeepAlivesEnabled_h2 has: 
// func testServerKeepAlivesEnabled_h2(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{9291157 0xc0042155c0}))  {
// 	 := http_test.TestServerKeepAlivesEnabled_h2(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC http_test.TestServerListenNotComparableListener has: 
// func testServerListenNotComparableListener(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{9298656 0xc004231300}))  {
// 	 := http_test.TestServerListenNotComparableListener(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC http_test.TestServerNoContentType_h1 has: 
// func testServerNoContentType_h1(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{9215493 0xc004104260}))  {
// 	 := http_test.TestServerNoContentType_h1(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC http_test.TestServerNoContentType_h2 has: 
// func testServerNoContentType_h2(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{9215589 0xc0041043e0}))  {
// 	 := http_test.TestServerNoContentType_h2(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC http_test.TestServerNoDate_h1 has: 
// func testServerNoDate_h1(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{9215310 0xc0040fff60}))  {
// 	 := http_test.TestServerNoDate_h1(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC http_test.TestServerNoDate_h2 has: 
// func testServerNoDate_h2(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{9215398 0xc0041040e0}))  {
// 	 := http_test.TestServerNoDate_h2(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC http_test.TestServerReaderFromOrder_h1 has: 
// func testServerReaderFromOrder_h1(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{9241444 0xc004157f20}))  {
// 	 := http_test.TestServerReaderFromOrder_h1(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC http_test.TestServerReaderFromOrder_h2 has: 
// func testServerReaderFromOrder_h2(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{9241533 0xc00415e080}))  {
// 	 := http_test.TestServerReaderFromOrder_h2(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC http_test.TestServerRequestContextCancel_ConnClose has: 
// func testServerRequestContextCancel_ConnClose(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{9269432 0xc0041ba500}))  {
// 	 := http_test.TestServerRequestContextCancel_ConnClose(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC http_test.TestServerRequestContextCancel_ServeHTTPDone_h1 has: 
// func testServerRequestContextCancel_ServeHTTPDone_h1(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{9268335 0xc0041b5680}))  {
// 	 := http_test.TestServerRequestContextCancel_ServeHTTPDone_h1(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC http_test.TestServerRequestContextCancel_ServeHTTPDone_h2 has: 
// func testServerRequestContextCancel_ServeHTTPDone_h2(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{9268463 0xc0041b57e0}))  {
// 	 := http_test.TestServerRequestContextCancel_ServeHTTPDone_h2(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC http_test.TestServerSetKeepAlivesEnabledClosesConns has: 
// func testServerSetKeepAlivesEnabledClosesConns(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{9286716 0xc004207060}))  {
// 	 := http_test.TestServerSetKeepAlivesEnabledClosesConns(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC http_test.TestServerShutdownStateNew has: 
// func testServerShutdownStateNew(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{9289095 0xc004211860}))  {
// 	 := http_test.TestServerShutdownStateNew(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC http_test.TestServerShutdownThenServe has: 
// func testServerShutdownThenServe(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{9299643 0xc0042362a0}))  {
// 	 := http_test.TestServerShutdownThenServe(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC http_test.TestServerShutdown_h1 has: 
// func testServerShutdown_h1(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{9287732 0xc0042101c0}))  {
// 	 := http_test.TestServerShutdown_h1(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC http_test.TestServerShutdown_h2 has: 
// func testServerShutdown_h2(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{9287807 0xc004210320}))  {
// 	 := http_test.TestServerShutdown_h2(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC http_test.TestServerTimeouts has: 
// func testServerTimeouts(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{9155846 0xc0040382e0}))  {
// 	 := http_test.TestServerTimeouts(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC http_test.TestServerUndeclaredTrailers_h1 has: 
// func testServerUndeclaredTrailers_h1(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{9124408 0xc003fad1c0}))  {
// 	 := http_test.TestServerUndeclaredTrailers_h1(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC http_test.TestServerUndeclaredTrailers_h2 has: 
// func testServerUndeclaredTrailers_h2(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{9124503 0xc003fad320}))  {
// 	 := http_test.TestServerUndeclaredTrailers_h2(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC http_test.TestServerUnreadRequestBodyLarge has: 
// func testServerUnreadRequestBodyLarge(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{9189721 0xc0040ab140}))  {
// 	 := http_test.TestServerUnreadRequestBodyLarge(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC http_test.TestServerUnreadRequestBodyLittle has: 
// func testServerUnreadRequestBodyLittle(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{9188562 0xc0040a5f60}))  {
// 	 := http_test.TestServerUnreadRequestBodyLittle(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC http_test.TestServerValidatesHeaders has: 
// func testServerValidatesHeaders(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{9266885 0xc0041b4020}))  {
// 	 := http_test.TestServerValidatesHeaders(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC http_test.TestServerValidatesHostHeader has: 
// func testServerValidatesHostHeader(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{9263621 0xc0041a6c40}))  {
// 	 := http_test.TestServerValidatesHostHeader(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC http_test.TestServerValidatesMethod has: 
// func testServerValidatesMethod(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{9297614 0xc004230180}))  {
// 	 := http_test.TestServerValidatesMethod(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC http_test.TestServerWriteHijackZeroBytes has: 
// func testServerWriteHijackZeroBytes(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{9214567 0xc0040fefc0}))  {
// 	 := http_test.TestServerWriteHijackZeroBytes(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC http_test.TestSetBasicAuth has: 
// func testSetBasicAuth(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{8239476 0xc002c4b6c0}))  {
// 	 := http_test.TestSetBasicAuth(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC http_test.TestSetsRemoteAddr_h1 has: 
// func testSetsRemoteAddr_h1(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{9171629 0xc00406ada0}))  {
// 	 := http_test.TestSetsRemoteAddr_h1(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC http_test.TestSetsRemoteAddr_h2 has: 
// func testSetsRemoteAddr_h2(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{9171704 0xc00406af20}))  {
// 	 := http_test.TestSetsRemoteAddr_h2(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC http_test.TestShouldCopyHeaderOnRedirect has: 
// func testShouldCopyHeaderOnRedirect(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{8706472 0xc003ad2080}))  {
// 	 := http_test.TestShouldCopyHeaderOnRedirect(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC http_test.TestShouldRedirectConcurrency has: 
// func testShouldRedirectConcurrency(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{9154498 0xc0040326e0}))  {
// 	 := http_test.TestShouldRedirectConcurrency(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC http_test.TestSniffWriteSize_h1 has: 
// func testSniffWriteSize_h1(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{8487731 0xc002f6c160}))  {
// 	 := http_test.TestSniffWriteSize_h1(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC http_test.TestSniffWriteSize_h2 has: 
// func testSniffWriteSize_h2(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{8487806 0xc002f6c2c0}))  {
// 	 := http_test.TestSniffWriteSize_h2(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC http_test.TestStarRequest has: 
// func testStarRequest(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{8251955 0xc0032f5260}))  {
// 	 := http_test.TestStarRequest(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC http_test.TestStarRequestFoo_h1 has: 
// func testStarRequestFoo_h1(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{9112245 0xc003f796a0}))  {
// 	 := http_test.TestStarRequestFoo_h1(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC http_test.TestStarRequestFoo_h2 has: 
// func testStarRequestFoo_h2(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{9112328 0xc003f79820}))  {
// 	 := http_test.TestStarRequestFoo_h2(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC http_test.TestStarRequestOptions_h1 has: 
// func testStarRequestOptions_h1(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{9112415 0xc003f799a0}))  {
// 	 := http_test.TestStarRequestOptions_h1(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC http_test.TestStarRequestOptions_h2 has: 
// func testStarRequestOptions_h2(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{9112502 0xc003f79b20}))  {
// 	 := http_test.TestStarRequestOptions_h2(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC http_test.TestStreamingGet_h1 has: 
// func testStreamingGet_h1(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{8680356 0xc003a70780}))  {
// 	 := http_test.TestStreamingGet_h1(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC http_test.TestStreamingGet_h2 has: 
// func testStreamingGet_h2(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{8680427 0xc003a708e0}))  {
// 	 := http_test.TestStreamingGet_h2(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC http_test.TestStressSurpriseServerCloses has: 
// func testStressSurpriseServerCloses(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{8518634 0xc00381e4c0}))  {
// 	 := http_test.TestStressSurpriseServerCloses(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC http_test.TestStripPasswordFromError has: 
// func testStripPasswordFromError(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{8691513 0xc003a9ace0}))  {
// 	 := http_test.TestStripPasswordFromError(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC http_test.TestStripPortFromHost has: 
// func testStripPortFromHost(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{9300067 0xc004236920}))  {
// 	 := http_test.TestStripPortFromHost(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC http_test.TestStripPrefix has: 
// func testStripPrefix(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{9216154 0xc004105000}))  {
// 	 := http_test.TestStripPrefix(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC http_test.TestStripPrefix_notModifyRequest has: 
// func testStripPrefix_notModifyRequest(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{9216846 0xc004105fc0}))  {
// 	 := http_test.TestStripPrefix_notModifyRequest(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC http_test.TestTLSHandshakeTimeout has: 
// func testTLSHandshakeTimeout(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{9176891 0xc00408ad60}))  {
// 	 := http_test.TestTLSHandshakeTimeout(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC http_test.TestTLSHandshakeTrace has: 
// func testTLSHandshakeTrace(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{8612152 0xc003975b00}))  {
// 	 := http_test.TestTLSHandshakeTrace(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC http_test.TestTLSServer has: 
// func testTLSServer(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{9177810 0xc004090000}))  {
// 	 := http_test.TestTLSServer(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC http_test.TestTLSServerClosesConnection has: 
// func testTLSServerClosesConnection(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{8573954 0xc0038dc680}))  {
// 	 := http_test.TestTLSServerClosesConnection(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC http_test.TestTimeoutHandlerEmptyResponse has: 
// func testTimeoutHandlerEmptyResponse(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{9205833 0xc0040e15e0}))  {
// 	 := http_test.TestTimeoutHandlerEmptyResponse(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC http_test.TestTimeoutHandlerPanicRecovery has: 
// func testTimeoutHandlerPanicRecovery(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{9206375 0xc0040e1fa0}))  {
// 	 := http_test.TestTimeoutHandlerPanicRecovery(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC http_test.TestTimeoutHandlerRace has: 
// func testTimeoutHandlerRace(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{9201852 0xc0040d6a20}))  {
// 	 := http_test.TestTimeoutHandlerRace(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC http_test.TestTimeoutHandlerRaceHeader has: 
// func testTimeoutHandlerRaceHeader(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{9202716 0xc0040d7de0}))  {
// 	 := http_test.TestTimeoutHandlerRaceHeader(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC http_test.TestTimeoutHandlerRaceHeaderTimeout has: 
// func testTimeoutHandlerRaceHeaderTimeout(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{9203401 0xc0040dcc60}))  {
// 	 := http_test.TestTimeoutHandlerRaceHeaderTimeout(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC http_test.TestTimeoutHandlerStartTimerWhenServing has: 
// func testTimeoutHandlerStartTimerWhenServing(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{9205003 0xc0040e0a00}))  {
// 	 := http_test.TestTimeoutHandlerStartTimerWhenServing(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC http_test.TestTimeoutHandler_h1 has: 
// func testTimeoutHandler_h1(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{9200009 0xc0040c6800}))  {
// 	 := http_test.TestTimeoutHandler_h1(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC http_test.TestTimeoutHandler_h2 has: 
// func testTimeoutHandler_h2(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{9200084 0xc0040c6960}))  {
// 	 := http_test.TestTimeoutHandler_h2(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC http_test.TestTolerateCRLFBeforeRequestLine has: 
// func testTolerateCRLFBeforeRequestLine(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{9259775 0xc00419f3a0}))  {
// 	 := http_test.TestTolerateCRLFBeforeRequestLine(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC http_test.TestTrailersClientToServer_h1 has: 
// func testTrailersClientToServer_h1(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{9103258 0xc003f5bcc0}))  {
// 	 := http_test.TestTrailersClientToServer_h1(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC http_test.TestTrailersClientToServer_h2 has: 
// func testTrailersClientToServer_h2(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{9103349 0xc003f5be20}))  {
// 	 := http_test.TestTrailersClientToServer_h2(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC http_test.TestTrailersServerToClient_Flush_h1 has: 
// func testTrailersServerToClient_Flush_h1(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{9105058 0xc003f61980}))  {
// 	 := http_test.TestTrailersServerToClient_Flush_h1(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC http_test.TestTrailersServerToClient_Flush_h2 has: 
// func testTrailersServerToClient_Flush_h2(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{9105161 0xc003f61b00}))  {
// 	 := http_test.TestTrailersServerToClient_Flush_h2(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC http_test.TestTrailersServerToClient_h1 has: 
// func testTrailersServerToClient_h1(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{9104844 0xc003f61680}))  {
// 	 := http_test.TestTrailersServerToClient_h1(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC http_test.TestTrailersServerToClient_h2 has: 
// func testTrailersServerToClient_h2(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{9104948 0xc003f61800}))  {
// 	 := http_test.TestTrailersServerToClient_h2(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC http_test.TestTransportAltProto has: 
// func testTransportAltProto(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{8558601 0xc0038a07a0}))  {
// 	 := http_test.TestTransportAltProto(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC http_test.TestTransportAndServerSharedBodyRace_h1 has: 
// func testTransportAndServerSharedBodyRace_h1(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{9244694 0xc004161260}))  {
// 	 := http_test.TestTransportAndServerSharedBodyRace_h1(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC http_test.TestTransportAndServerSharedBodyRace_h2 has: 
// func testTransportAndServerSharedBodyRace_h2(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{9244806 0xc0041613c0}))  {
// 	 := http_test.TestTransportAndServerSharedBodyRace_h2(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC http_test.TestTransportAutomaticHTTP2 has: 
// func testTransportAutomaticHTTP2(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{8595267 0xc00392d1c0}))  {
// 	 := http_test.TestTransportAutomaticHTTP2(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC http_test.TestTransportAutomaticHTTP2_DefaultTransport has: 
// func testTransportAutomaticHTTP2_DefaultTransport(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{8595437 0xc00392d3a0}))  {
// 	 := http_test.TestTransportAutomaticHTTP2_DefaultTransport(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC http_test.TestTransportAutomaticHTTP2_Dial has: 
// func testTransportAutomaticHTTP2_Dial(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{8596053 0xc00392dce0}))  {
// 	 := http_test.TestTransportAutomaticHTTP2_Dial(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC http_test.TestTransportAutomaticHTTP2_DialTLS has: 
// func testTransportAutomaticHTTP2_DialTLS(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{8596196 0xc00392dfa0}))  {
// 	 := http_test.TestTransportAutomaticHTTP2_DialTLS(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC http_test.TestTransportAutomaticHTTP2_ExpectContinueTimeout has: 
// func testTransportAutomaticHTTP2_ExpectContinueTimeout(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{8595906 0xc00392daa0}))  {
// 	 := http_test.TestTransportAutomaticHTTP2_ExpectContinueTimeout(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC http_test.TestTransportAutomaticHTTP2_TLSConfig has: 
// func testTransportAutomaticHTTP2_TLSConfig(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{8595747 0xc00392d860}))  {
// 	 := http_test.TestTransportAutomaticHTTP2_TLSConfig(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC http_test.TestTransportAutomaticHTTP2_TLSNextProto has: 
// func testTransportAutomaticHTTP2_TLSNextProto(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{8595565 0xc00392d560}))  {
// 	 := http_test.TestTransportAutomaticHTTP2_TLSNextProto(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC http_test.TestTransportBodyReadError has: 
// func testTransportBodyReadError(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{8711935 0xc003ad9280}))  {
// 	 := http_test.TestTransportBodyReadError(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC http_test.TestTransportCancelBeforeResponseHeaders has: 
// func testTransportCancelBeforeResponseHeaders(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{8556024 0xc0038939c0}))  {
// 	 := http_test.TestTransportCancelBeforeResponseHeaders(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC http_test.TestTransportCancelRequest has: 
// func testTransportCancelRequest(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{8551033 0xc0038885e0}))  {
// 	 := http_test.TestTransportCancelRequest(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC http_test.TestTransportCancelRequestInDial has: 
// func testTransportCancelRequestInDial(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{8552303 0xc003889c00}))  {
// 	 := http_test.TestTransportCancelRequestInDial(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC http_test.TestTransportCheckContextDoneEarly has: 
// func testTransportCheckContextDoneEarly(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{8628011 0xc0039ae8e0}))  {
// 	 := http_test.TestTransportCheckContextDoneEarly(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC http_test.TestTransportCloseIdleConnsThenReturn has: 
// func testTransportCloseIdleConnsThenReturn(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{8586926 0xc00390fe40}))  {
// 	 := http_test.TestTransportCloseIdleConnsThenReturn(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC http_test.TestTransportCloseResponseBody has: 
// func testTransportCloseResponseBody(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{8557115 0xc003898a80}))  {
// 	 := http_test.TestTransportCloseResponseBody(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC http_test.TestTransportClosesBodyOnError has: 
// func testTransportClosesBodyOnError(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{8584437 0xc0038ff1e0}))  {
// 	 := http_test.TestTransportClosesBodyOnError(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC http_test.TestTransportClosesRequestBody has: 
// func testTransportClosesRequestBody(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{8572196 0xc0038d8580}))  {
// 	 := http_test.TestTransportClosesRequestBody(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC http_test.TestTransportConcurrency has: 
// func testTransportConcurrency(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{8545076 0xc00386f820}))  {
// 	 := http_test.TestTransportConcurrency(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC http_test.TestTransportConnectionCloseOnRequest has: 
// func testTransportConnectionCloseOnRequest(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{8507921 0xc0037f5a20}))  {
// 	 := http_test.TestTransportConnectionCloseOnRequest(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC http_test.TestTransportConnectionCloseOnRequestDisableKeepAlive has: 
// func testTransportConnectionCloseOnRequestDisableKeepAlive(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{8509541 0xc0037ff220}))  {
// 	 := http_test.TestTransportConnectionCloseOnRequestDisableKeepAlive(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC http_test.TestTransportConnectionCloseOnResponse has: 
// func testTransportConnectionCloseOnResponse(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{8506649 0xc0037f4500}))  {
// 	 := http_test.TestTransportConnectionCloseOnResponse(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC http_test.TestTransportContentEncodingCaseInsensitive has: 
// func testTransportContentEncodingCaseInsensitive(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{8589881 0xc00391ae80}))  {
// 	 := http_test.TestTransportContentEncodingCaseInsensitive(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC http_test.TestTransportDialCancelRace has: 
// func testTransportDialCancelRace(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{8590635 0xc00391bda0}))  {
// 	 := http_test.TestTransportDialCancelRace(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC http_test.TestTransportDialPreservesNetOpProxyError has: 
// func testTransportDialPreservesNetOpProxyError(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{8536974 0xc003857380}))  {
// 	 := http_test.TestTransportDialPreservesNetOpProxyError(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC http_test.TestTransportDialTLS has: 
// func testTransportDialTLS(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{8585612 0xc00390e620}))  {
// 	 := http_test.TestTransportDialTLS(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC http_test.TestTransportDiscardsUnneededConns has: 
// func testTransportDiscardsUnneededConns(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{9113979 0xc003f817e0}))  {
// 	 := http_test.TestTransportDiscardsUnneededConns(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC http_test.TestTransportEmptyMethod has: 
// func testTransportEmptyMethod(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{8559370 0xc0038a1620}))  {
// 	 := http_test.TestTransportEmptyMethod(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC http_test.TestTransportEventTrace has: 
// func testTransportEventTrace(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{8601792 0xc003941e80}))  {
// 	 := http_test.TestTransportEventTrace(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC http_test.TestTransportEventTraceRealDNS has: 
// func testTransportEventTraceRealDNS(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{8610100 0xc00396f980}))  {
// 	 := http_test.TestTransportEventTraceRealDNS(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC http_test.TestTransportEventTraceTLSVerify has: 
// func testTransportEventTraceTLSVerify(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{8608144 0xc0039679a0}))  {
// 	 := http_test.TestTransportEventTraceTLSVerify(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC http_test.TestTransportEventTrace_NoHooks has: 
// func testTransportEventTrace_NoHooks(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{8602057 0xc0039441c0}))  {
// 	 := http_test.TestTransportEventTrace_NoHooks(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC http_test.TestTransportEventTrace_NoHooks_h2 has: 
// func testTransportEventTrace_NoHooks_h2(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{8602159 0xc003944340}))  {
// 	 := http_test.TestTransportEventTrace_NoHooks_h2(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC http_test.TestTransportEventTrace_h2 has: 
// func testTransportEventTrace_h2(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{8601887 0xc003944000}))  {
// 	 := http_test.TestTransportEventTrace_h2(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC http_test.TestTransportExpect100Continue has: 
// func testTransportExpect100Continue(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{8527541 0xc003837420}))  {
// 	 := http_test.TestTransportExpect100Continue(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC http_test.TestTransportFlushesBodyChunks has: 
// func testTransportFlushesBodyChunks(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{8591875 0xc003923580}))  {
// 	 := http_test.TestTransportFlushesBodyChunks(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC http_test.TestTransportFlushesRequestHeader has: 
// func testTransportFlushesRequestHeader(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{8593474 0xc003926e00}))  {
// 	 := http_test.TestTransportFlushesRequestHeader(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC http_test.TestTransportGCRequest_Body_h1 has: 
// func testTransportGCRequest_Body_h1(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{9115857 0xc003f85ba0}))  {
// 	 := http_test.TestTransportGCRequest_Body_h1(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC http_test.TestTransportGCRequest_Body_h2 has: 
// func testTransportGCRequest_Body_h2(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{9115953 0xc003f85d20}))  {
// 	 := http_test.TestTransportGCRequest_Body_h2(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC http_test.TestTransportGCRequest_NoBody_h1 has: 
// func testTransportGCRequest_NoBody_h1(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{9116051 0xc003f85ea0}))  {
// 	 := http_test.TestTransportGCRequest_NoBody_h1(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC http_test.TestTransportGCRequest_NoBody_h2 has: 
// func testTransportGCRequest_NoBody_h2(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{9116148 0xc003f8e020}))  {
// 	 := http_test.TestTransportGCRequest_NoBody_h2(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC http_test.TestTransportGzip has: 
// func testTransportGzip(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{8524656 0xc003834200}))  {
// 	 := http_test.TestTransportGzip(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC http_test.TestTransportGzipRecursive has: 
// func testTransportGzipRecursive(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{8538124 0xc00385a6a0}))  {
// 	 := http_test.TestTransportGzipRecursive(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC http_test.TestTransportGzipShort has: 
// func testTransportGzipShort(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{8538820 0xc00385b420}))  {
// 	 := http_test.TestTransportGzipShort(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC http_test.TestTransportHeadChunkedResponse has: 
// func testTransportHeadChunkedResponse(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{8521379 0xc003822ae0}))  {
// 	 := http_test.TestTransportHeadChunkedResponse(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC http_test.TestTransportHeadResponses has: 
// func testTransportHeadResponses(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{8520346 0xc00381f880}))  {
// 	 := http_test.TestTransportHeadResponses(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC http_test.TestTransportIDNA_h1 has: 
// func testTransportIDNA_h1(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{8619483 0xc003995080}))  {
// 	 := http_test.TestTransportIDNA_h1(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC http_test.TestTransportIDNA_h2 has: 
// func testTransportIDNA_h2(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{8619556 0xc0039951e0}))  {
// 	 := http_test.TestTransportIDNA_h2(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC http_test.TestTransportIdleCacheKeys has: 
// func testTransportIdleCacheKeys(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{8509925 0xc0037ff9c0}))  {
// 	 := http_test.TestTransportIdleCacheKeys(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC http_test.TestTransportIdleConnCrash has: 
// func testTransportIdleConnCrash(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{8542449 0xc003868bc0}))  {
// 	 := http_test.TestTransportIdleConnCrash(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC http_test.TestTransportIdleConnTimeout_h1 has: 
// func testTransportIdleConnTimeout_h1(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{8614832 0xc00398a6e0}))  {
// 	 := http_test.TestTransportIdleConnTimeout_h1(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC http_test.TestTransportIdleConnTimeout_h2 has: 
// func testTransportIdleConnTimeout_h2(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{8614927 0xc00398a840}))  {
// 	 := http_test.TestTransportIdleConnTimeout_h2(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC http_test.TestTransportIgnore1xxResponses has: 
// func testTransportIgnore1xxResponses(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{8563849 0xc0038b8740}))  {
// 	 := http_test.TestTransportIgnore1xxResponses(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC http_test.TestTransportIssue10457 has: 
// func testTransportIssue10457(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{8577686 0xc0038ea4c0}))  {
// 	 := http_test.TestTransportIssue10457(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC http_test.TestTransportKeepAlives has: 
// func testTransportKeepAlives(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{8505743 0xc0037f17c0}))  {
// 	 := http_test.TestTransportKeepAlives(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC http_test.TestTransportLimits1xxResponses has: 
// func testTransportLimits1xxResponses(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{8564964 0xc0038b99c0}))  {
// 	 := http_test.TestTransportLimits1xxResponses(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC http_test.TestTransportMaxConnsPerHostIncludeDialInProgress has: 
// func testTransportMaxConnsPerHostIncludeDialInProgress(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{8514313 0xc0038121c0}))  {
// 	 := http_test.TestTransportMaxConnsPerHostIncludeDialInProgress(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC http_test.TestTransportMaxIdleConns has: 
// func testTransportMaxIdleConns(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{8613185 0xc003982d20}))  {
// 	 := http_test.TestTransportMaxIdleConns(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC http_test.TestTransportMaxPerHostIdleConns has: 
// func testTransportMaxPerHostIdleConns(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{8512404 0xc00380a1c0}))  {
// 	 := http_test.TestTransportMaxPerHostIdleConns(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC http_test.TestTransportNoHost has: 
// func testTransportNoHost(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{8559033 0xc0038a0fe0}))  {
// 	 := http_test.TestTransportNoHost(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC http_test.TestTransportNoReuseAfterEarlyResponse has: 
// func testTransportNoReuseAfterEarlyResponse(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{8575995 0xc0038e4680}))  {
// 	 := http_test.TestTransportNoReuseAfterEarlyResponse(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC http_test.TestTransportPersistConnLeak has: 
// func testTransportPersistConnLeak(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{8539767 0xc003860420}))  {
// 	 := http_test.TestTransportPersistConnLeak(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC http_test.TestTransportPersistConnLeakShortBody has: 
// func testTransportPersistConnLeakShortBody(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{8541402 0xc003861c00}))  {
// 	 := http_test.TestTransportPersistConnLeakShortBody(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC http_test.TestTransportPrefersResponseOverWriteError has: 
// func testTransportPrefersResponseOverWriteError(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{8594161 0xc003927b20}))  {
// 	 := http_test.TestTransportPrefersResponseOverWriteError(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC http_test.TestTransportProxy has: 
// func testTransportProxy(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{8533372 0xc003847ce0}))  {
// 	 := http_test.TestTransportProxy(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC http_test.TestTransportProxyConnectHeader has: 
// func testTransportProxyConnectHeader(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{8621554 0xc00399d620}))  {
// 	 := http_test.TestTransportProxyConnectHeader(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC http_test.TestTransportRangeAndGzip has: 
// func testTransportRangeAndGzip(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{8588187 0xc003916f00}))  {
// 	 := http_test.TestTransportRangeAndGzip(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC http_test.TestTransportReadToEndReusesConn has: 
// func testTransportReadToEndReusesConn(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{8510933 0xc003802a20}))  {
// 	 := http_test.TestTransportReadToEndReusesConn(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC http_test.TestTransportReading100Continue has: 
// func testTransportReading100Continue(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{8561186 0xc0038a78a0}))  {
// 	 := http_test.TestTransportReading100Continue(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC http_test.TestTransportRejectsAlphaPort has: 
// func testTransportRejectsAlphaPort(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{8611633 0xc003975360}))  {
// 	 := http_test.TestTransportRejectsAlphaPort(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC http_test.TestTransportRejectsInvalidHeaders_h1 has: 
// func testTransportRejectsInvalidHeaders_h1(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{9117165 0xc003f8f4c0}))  {
// 	 := http_test.TestTransportRejectsInvalidHeaders_h1(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC http_test.TestTransportRejectsInvalidHeaders_h2 has: 
// func testTransportRejectsInvalidHeaders_h2(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{9117273 0xc003f8f620}))  {
// 	 := http_test.TestTransportRejectsInvalidHeaders_h2(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC http_test.TestTransportRemovesDeadIdleConnections has: 
// func testTransportRemovesDeadIdleConnections(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{8515909 0xc003813ba0}))  {
// 	 := http_test.TestTransportRemovesDeadIdleConnections(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC http_test.TestTransportResponseCancelRace has: 
// func testTransportResponseCancelRace(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{8588908 0xc003917da0}))  {
// 	 := http_test.TestTransportResponseCancelRace(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC http_test.TestTransportResponseHeaderLength has: 
// func testTransportResponseHeaderLength(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{8600907 0xc003940c60}))  {
// 	 := http_test.TestTransportResponseHeaderLength(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC http_test.TestTransportResponseHeaderTimeout has: 
// func testTransportResponseHeaderTimeout(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{8549260 0xc00387e460}))  {
// 	 := http_test.TestTransportResponseHeaderTimeout(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC http_test.TestTransportReturnsPeekError has: 
// func testTransportReturnsPeekError(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{8618807 0xc003994440}))  {
// 	 := http_test.TestTransportReturnsPeekError(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC http_test.TestTransportReuseConnEmptyResponseBody has: 
// func testTransportReuseConnEmptyResponseBody(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{8597105 0xc003932960}))  {
// 	 := http_test.TestTransportReuseConnEmptyResponseBody(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC http_test.TestTransportReuseConnection_Gzip_Chunked has: 
// func testTransportReuseConnection_Gzip_Chunked(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{8599728 0xc00393b940}))  {
// 	 := http_test.TestTransportReuseConnection_Gzip_Chunked(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC http_test.TestTransportReuseConnection_Gzip_ContentLength has: 
// func testTransportReuseConnection_Gzip_ContentLength(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{8599844 0xc00393baa0}))  {
// 	 := http_test.TestTransportReuseConnection_Gzip_ContentLength(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC http_test.TestTransportServerClosingUnexpectedly has: 
// func testTransportServerClosingUnexpectedly(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{8517157 0xc00381b040}))  {
// 	 := http_test.TestTransportServerClosingUnexpectedly(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC http_test.TestTransportSocketLateBinding has: 
// func testTransportSocketLateBinding(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{8559806 0xc0038a1cc0}))  {
// 	 := http_test.TestTransportSocketLateBinding(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC http_test.TestTransportTLSHandshakeTimeout has: 
// func testTransportTLSHandshakeTimeout(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{8572652 0xc0038d8f40}))  {
// 	 := http_test.TestTransportTLSHandshakeTimeout(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC http_test.TestTransportTreat101Terminal has: 
// func testTransportTreat101Terminal(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{8565812 0xc0038c8780}))  {
// 	 := http_test.TestTransportTreat101Terminal(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC http_test.TestTransportUserAgent_h1 has: 
// func testTransportUserAgent_h1(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{9110812 0xc003f73a60}))  {
// 	 := http_test.TestTransportUserAgent_h1(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC http_test.TestTransportUserAgent_h2 has: 
// func testTransportUserAgent_h2(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{9110895 0xc003f73bc0}))  {
// 	 := http_test.TestTransportUserAgent_h2(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC http_test.TestTransportUsesTLSConfigServerName has: 
// func testTransportUsesTLSConfigServerName(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{8685794 0xc003a843c0}))  {
// 	 := http_test.TestTransportUsesTLSConfigServerName(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC http_test.TestWithContextDeepCopiesURL has: 
// func testWithContextDeepCopiesURL(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{8255104 0xc00339a320}))  {
// 	 := http_test.TestWithContextDeepCopiesURL(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC http_test.TestWriteAfterHijack has: 
// func testWriteAfterHijack(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{9238583 0xc004151060}))  {
// 	 := http_test.TestWriteAfterHijack(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC http_test.TestWriteHeader0_h1 has: 
// func testWriteHeader0_h1(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{9126155 0xc003fb57e0}))  {
// 	 := http_test.TestWriteHeader0_h1(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC http_test.TestWriteHeader0_h2 has: 
// func testWriteHeader0_h2(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{9126226 0xc003fb5940}))  {
// 	 := http_test.TestWriteHeader0_h2(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC http_test.TestWriteHeaderNoCodeCheck_h1 has: 
// func testWriteHeaderNoCodeCheck_h1(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{9127385 0xc003fb8980}))  {
// 	 := http_test.TestWriteHeaderNoCodeCheck_h1(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC http_test.TestWriteHeaderNoCodeCheck_h1hijack has: 
// func testWriteHeaderNoCodeCheck_h1hijack(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{9127494 0xc003fb8b00}))  {
// 	 := http_test.TestWriteHeaderNoCodeCheck_h1hijack(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC http_test.TestWriteHeaderNoCodeCheck_h2 has: 
// func testWriteHeaderNoCodeCheck_h2(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{9127590 0xc003fb8c80}))  {
// 	 := http_test.TestWriteHeaderNoCodeCheck_h2(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC http_test.TestZeroLengthPostAndResponse_h1 has: 
// func testZeroLengthPostAndResponse_h1(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{9210681 0xc0040ef640}))  {
// 	 := http_test.TestZeroLengthPostAndResponse_h1(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC http_test.TestZeroLengthPostAndResponse_h2 has: 
// func testZeroLengthPostAndResponse_h2(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{9210779 0xc0040ef7a0}))  {
// 	 := http_test.TestZeroLengthPostAndResponse_h2(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC http_test.Test_scanETag has: 
// func test_scanETag(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{8332451 0xc002d1f800}))  {
// 	 := http_test.Test_scanETag(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC httpguts.TestHeaderValuesContainsToken has: 
// func testHeaderValuesContainsToken(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{15039378 0xc004ee9800}))  {
// 	 := httpguts.TestHeaderValuesContainsToken(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC httpguts.TestIsToken has: 
// func testIsToken(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{15039135 0xc004ee9360}))  {
// 	 := httpguts.TestIsToken(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC httpguts.TestPunycodeHostPort has: 
// func testPunycodeHostPort(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{15040512 0xc0052d09c0}))  {
// 	 := httpguts.TestPunycodeHostPort(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC httpproxy_test.BenchmarkProxyForURL has: 
// func benchmarkProxyForURL(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{15070887 0xc0056fda00}))  {
// 	 := httpproxy_test.BenchmarkProxyForURL(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC httpproxy_test.TestAllNoProxy has: 
// func testAllNoProxy(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{15070630 0xc0056fd540}))  {
// 	 := httpproxy_test.TestAllNoProxy(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC httpproxy_test.TestFromEnvironment has: 
// func testFromEnvironment(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{15066991 0xc0056624c0}))  {
// 	 := httpproxy_test.TestFromEnvironment(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC httpproxy_test.TestFromEnvironmentLowerCase has: 
// func testFromEnvironmentLowerCase(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{15067888 0xc005663340}))  {
// 	 := httpproxy_test.TestFromEnvironmentLowerCase(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC httpproxy_test.TestFromEnvironmentWithRequestMethod has: 
// func testFromEnvironmentWithRequestMethod(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{15067432 0xc005662be0}))  {
// 	 := httpproxy_test.TestFromEnvironmentWithRequestMethod(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC httpproxy_test.TestInvalidNoProxy has: 
// func testInvalidNoProxy(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{15070393 0xc0056fd180}))  {
// 	 := httpproxy_test.TestInvalidNoProxy(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC httpproxy_test.TestProxyForURL has: 
// func testProxyForURL(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{15066880 0xc0056622c0}))  {
// 	 := httpproxy_test.TestProxyForURL(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC httpproxy_test.TestUseProxy has: 
// func testUseProxy(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{15070109 0xc0056fcba0}))  {
// 	 := httpproxy_test.TestUseProxy(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC httptest.TestNewRequest has: 
// func testNewRequest(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{9553869 0xc004580fa0}))  {
// 	 := httptest.TestNewRequest(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC httptest.TestRecorder has: 
// func testRecorder(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{9557981 0xc00458cde0}))  {
// 	 := httptest.TestRecorder(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC httptest.TestServer has: 
// func testServer(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{9546233 0xc0045616e0}))  {
// 	 := httptest.TestServer(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC httptest.TestServerZeroValueClose has: 
// func testServerZeroValueClose(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{9551008 0xc004575040}))  {
// 	 := httptest.TestServerZeroValueClose(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC httptest_test.ExampleNewTLSServer has: 
// func exampleNewTLSServer()  {
// 	 := httptest_test.ExampleNewTLSServer()
// 	...ABEND: TODO...
// }
// 
GO FUNC httptest_test.ExampleResponseRecorder has: 
// func exampleResponseRecorder()  {
// 	 := httptest_test.ExampleResponseRecorder()
// 	...ABEND: TODO...
// }
// 
GO FUNC httptest_test.ExampleServer has: 
// func exampleServer()  {
// 	 := httptest_test.ExampleServer()
// 	...ABEND: TODO...
// }
// 
GO FUNC httptrace.TestCompose has: 
// func testCompose(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{9586196 0xc0045efde0}))  {
// 	 := httptrace.TestCompose(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC httptrace.TestWithClientTrace has: 
// func testWithClientTrace(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{9585600 0xc0045ef2c0}))  {
// 	 := httptrace.TestWithClientTrace(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC httptrace_test.Example has: 
// func example()  {
// 	 := httptrace_test.Example()
// 	...ABEND: TODO...
// }
// 
GO FUNC httputil.BenchmarkServeHTTP has: 
// func benchmarkServeHTTP(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{9644896 0xc0046c2bc0}))  {
// 	 := httputil.BenchmarkServeHTTP(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC httputil.TestClonesRequestHeaders has: 
// func testClonesRequestHeaders(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{9646324 0xc0046c8760}))  {
// 	 := httputil.TestClonesRequestHeaders(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC httputil.TestDumpRequest has: 
// func testDumpRequest(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{9605788 0xc00463ea40}))  {
// 	 := httputil.TestDumpRequest(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC httputil.TestDumpResponse has: 
// func testDumpResponse(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{9609386 0xc004646560}))  {
// 	 := httputil.TestDumpResponse(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC httputil.TestModifyResponseClosesBody has: 
// func testModifyResponseClosesBody(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{9647308 0xc0046c9a20}))  {
// 	 := httputil.TestModifyResponseClosesBody(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC httputil.TestNilBody has: 
// func testNilBody(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{9633694 0xc004697e60}))  {
// 	 := httputil.TestNilBody(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC httputil.TestReverseProxy has: 
// func testReverseProxy(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{9622068 0xc004678de0}))  {
// 	 := httputil.TestReverseProxy(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC httputil.TestReverseProxyCancelation has: 
// func testReverseProxyCancelation(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{9631894 0xc004696260}))  {
// 	 := httputil.TestReverseProxyCancelation(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC httputil.TestReverseProxyErrorHandler has: 
// func testReverseProxyErrorHandler(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{9641070 0xc0046baac0}))  {
// 	 := httputil.TestReverseProxyErrorHandler(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC httputil.TestReverseProxyFlushInterval has: 
// func testReverseProxyFlushInterval(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{9630853 0xc004692f80}))  {
// 	 := httputil.TestReverseProxyFlushInterval(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC httputil.TestReverseProxyGetPutBuffer has: 
// func testReverseProxyGetPutBuffer(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{9635925 0xc0046a8b40}))  {
// 	 := httputil.TestReverseProxyGetPutBuffer(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC httputil.TestReverseProxyModifyResponse has: 
// func testReverseProxyModifyResponse(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{9639640 0xc0046b0ea0}))  {
// 	 := httputil.TestReverseProxyModifyResponse(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC httputil.TestReverseProxyQuery has: 
// func testReverseProxyQuery(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{9630051 0xc00468fd80}))  {
// 	 := httputil.TestReverseProxyQuery(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC httputil.TestReverseProxyStripHeadersPresentInConnection has: 
// func testReverseProxyStripHeadersPresentInConnection(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{9626395 0xc004685e40}))  {
// 	 := httputil.TestReverseProxyStripHeadersPresentInConnection(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC httputil.TestReverseProxy_CopyBuffer has: 
// func testReverseProxy_CopyBuffer(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{9643353 0xc0046bf240}))  {
// 	 := httputil.TestReverseProxy_CopyBuffer(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC httputil.TestReverseProxy_NilBody has: 
// func testReverseProxy_NilBody(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{9638736 0xc0046b0100}))  {
// 	 := httputil.TestReverseProxy_NilBody(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC httputil.TestReverseProxy_PanicBodyError has: 
// func testReverseProxy_PanicBodyError(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{9648454 0xc0046d2fe0}))  {
// 	 := httputil.TestReverseProxy_PanicBodyError(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC httputil.TestReverseProxy_Post has: 
// func testReverseProxy_Post(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{9637193 0xc0046ae540}))  {
// 	 := httputil.TestReverseProxy_Post(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC httputil.TestServeHTTPDeepCopy has: 
// func testServeHTTPDeepCopy(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{9645291 0xc0046c3420}))  {
// 	 := httputil.TestServeHTTPDeepCopy(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC httputil.TestUserAgentHeader has: 
// func testUserAgentHeader(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{9634497 0xc00469cea0}))  {
// 	 := httputil.TestUserAgentHeader(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC httputil.TestXForwardedFor has: 
// func testXForwardedFor(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{9628375 0xc00468e180}))  {
// 	 := httputil.TestXForwardedFor(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC httputil_test.ExampleDumpRequest has: 
// func exampleDumpRequest()  {
// 	 := httputil_test.ExampleDumpRequest()
// 	...ABEND: TODO...
// }
// 
GO FUNC httputil_test.ExampleDumpRequestOut has: 
// func exampleDumpRequestOut()  {
// 	 := httputil_test.ExampleDumpRequestOut()
// 	...ABEND: TODO...
// }
// 
GO FUNC httputil_test.ExampleDumpResponse has: 
// func exampleDumpResponse()  {
// 	 := httputil_test.ExampleDumpResponse()
// 	...ABEND: TODO...
// }
// 
GO FUNC httputil_test.ExampleReverseProxy has: 
// func exampleReverseProxy()  {
// 	 := httputil_test.ExampleReverseProxy()
// 	...ABEND: TODO...
// }
// 
GO FUNC idna.TestPunycode has: 
// func testPunycode(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{15158577 0xc004929220}))  {
// 	 := idna.TestPunycode(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC idna.TestPunycodeErrors has: 
// func testPunycodeErrors(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{15159638 0xc00492c120}))  {
// 	 := idna.TestPunycodeErrors(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC image.RegisterFormat has: 
// func registerFormat(name string, magic string, decode ABEND881(unrecognized Expr type *ast.FuncType at: &{5944402 0xc001467f50 0xc001467fb0}), decodeConfig ABEND881(unrecognized Expr type *ast.FuncType at: &{5944447 0xc00149c090 0xc00149c180}))  {
// 	 := image.RegisterFormat(name, magic, decode, decodeConfig)
// 	...ABEND: TODO...
// }
// 
GO FUNC image.Test16BitsPerColorChannel has: 
// func test16BitsPerColorChannel(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{5942538 0xc0023ad780}))  {
// 	 := image.Test16BitsPerColorChannel(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC image.TestImage has: 
// func testImage(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{5940669 0xc002351160}))  {
// 	 := image.TestImage(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC image.TestRectangle has: 
// func testRectangle(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{5921171 0xc001c49cc0}))  {
// 	 := image.TestRectangle(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC image.TestYCbCr has: 
// func testYCbCr(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{5924275 0xc0021d2a80}))  {
// 	 := image.TestYCbCr(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC image.TestYCbCrSlicesDontOverlap has: 
// func testYCbCrSlicesDontOverlap(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{5926984 0xc00222e7a0}))  {
// 	 := image.TestYCbCrSlicesDontOverlap(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC image_test.Example has: 
// func example()  {
// 	 := image_test.Example()
// 	...ABEND: TODO...
// }
// 
GO FUNC image_test.Example_decodeConfig has: 
// func example_decodeConfig()  {
// 	 := image_test.Example_decodeConfig()
// 	...ABEND: TODO...
// }
// 
GO FUNC image_test.TestDecode has: 
// func testDecode(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{5938736 0xc002344420}))  {
// 	 := image_test.TestDecode(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC importer.TestFor has: 
// func testFor(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{4694387 0xc001a60f60}))  {
// 	 := importer.TestFor(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC io_test.BenchmarkCopyNLarge has: 
// func benchmarkCopyNLarge(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{6356404 0xc0017d6700}))  {
// 	 := io_test.BenchmarkCopyNLarge(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC io_test.BenchmarkCopyNSmall has: 
// func benchmarkCopyNSmall(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{6356190 0xc0017d6140}))  {
// 	 := io_test.BenchmarkCopyNSmall(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC io_test.ExampleCopy has: 
// func exampleCopy()  {
// 	 := io_test.ExampleCopy()
// 	...ABEND: TODO...
// }
// 
GO FUNC io_test.ExampleCopyBuffer has: 
// func exampleCopyBuffer()  {
// 	 := io_test.ExampleCopyBuffer()
// 	...ABEND: TODO...
// }
// 
GO FUNC io_test.ExampleCopyN has: 
// func exampleCopyN()  {
// 	 := io_test.ExampleCopyN()
// 	...ABEND: TODO...
// }
// 
GO FUNC io_test.ExampleLimitReader has: 
// func exampleLimitReader()  {
// 	 := io_test.ExampleLimitReader()
// 	...ABEND: TODO...
// }
// 
GO FUNC io_test.ExampleMultiReader has: 
// func exampleMultiReader()  {
// 	 := io_test.ExampleMultiReader()
// 	...ABEND: TODO...
// }
// 
GO FUNC io_test.ExampleMultiWriter has: 
// func exampleMultiWriter()  {
// 	 := io_test.ExampleMultiWriter()
// 	...ABEND: TODO...
// }
// 
GO FUNC io_test.ExamplePipe has: 
// func examplePipe()  {
// 	 := io_test.ExamplePipe()
// 	...ABEND: TODO...
// }
// 
GO FUNC io_test.ExampleReadAtLeast has: 
// func exampleReadAtLeast()  {
// 	 := io_test.ExampleReadAtLeast()
// 	...ABEND: TODO...
// }
// 
GO FUNC io_test.ExampleReadFull has: 
// func exampleReadFull()  {
// 	 := io_test.ExampleReadFull()
// 	...ABEND: TODO...
// }
// 
GO FUNC io_test.ExampleSectionReader has: 
// func exampleSectionReader()  {
// 	 := io_test.ExampleSectionReader()
// 	...ABEND: TODO...
// }
// 
GO FUNC io_test.ExampleSectionReader_ReadAt has: 
// func exampleSectionReader_ReadAt()  {
// 	 := io_test.ExampleSectionReader_ReadAt()
// 	...ABEND: TODO...
// }
// 
GO FUNC io_test.ExampleSectionReader_Seek has: 
// func exampleSectionReader_Seek()  {
// 	 := io_test.ExampleSectionReader_Seek()
// 	...ABEND: TODO...
// }
// 
GO FUNC io_test.ExampleSeeker_Seek has: 
// func exampleSeeker_Seek()  {
// 	 := io_test.ExampleSeeker_Seek()
// 	...ABEND: TODO...
// }
// 
GO FUNC io_test.ExampleTeeReader has: 
// func exampleTeeReader()  {
// 	 := io_test.ExampleTeeReader()
// 	...ABEND: TODO...
// }
// 
GO FUNC io_test.ExampleWriteString has: 
// func exampleWriteString()  {
// 	 := io_test.ExampleWriteString()
// 	...ABEND: TODO...
// }
// 
GO FUNC io_test.TestCopy has: 
// func testCopy(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{6352449 0xc0017f0400}))  {
// 	 := io_test.TestCopy(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC io_test.TestCopyBuffer has: 
// func testCopyBuffer(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{6352970 0xc0017f0e40}))  {
// 	 := io_test.TestCopyBuffer(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC io_test.TestCopyBufferNil has: 
// func testCopyBufferNil(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{6353241 0xc0017f12c0}))  {
// 	 := io_test.TestCopyBufferNil(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC io_test.TestCopyN has: 
// func testCopyN(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{6355523 0xc0018174a0}))  {
// 	 := io_test.TestCopyN(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC io_test.TestCopyNEOF has: 
// func testCopyNEOF(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{6356889 0xc0017d7220}))  {
// 	 := io_test.TestCopyNEOF(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC io_test.TestCopyNReadFrom has: 
// func testCopyNReadFrom(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{6355728 0xc001817880}))  {
// 	 := io_test.TestCopyNReadFrom(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC io_test.TestCopyNWriteTo has: 
// func testCopyNWriteTo(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{6355954 0xc001817ce0}))  {
// 	 := io_test.TestCopyNWriteTo(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC io_test.TestCopyNegative has: 
// func testCopyNegative(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{6352656 0xc0017f07e0}))  {
// 	 := io_test.TestCopyNegative(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC io_test.TestCopyPriority has: 
// func testCopyPriority(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{6354482 0xc0018163e0}))  {
// 	 := io_test.TestCopyPriority(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC io_test.TestCopyReadErrWriteErr has: 
// func testCopyReadErrWriteErr(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{6355243 0xc001816ea0}))  {
// 	 := io_test.TestCopyReadErrWriteErr(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC io_test.TestCopyReadFrom has: 
// func testCopyReadFrom(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{6353494 0xc0017f16e0}))  {
// 	 := io_test.TestCopyReadFrom(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC io_test.TestCopyWriteTo has: 
// func testCopyWriteTo(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{6353730 0xc0017f1b20}))  {
// 	 := io_test.TestCopyWriteTo(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC io_test.TestInterleavedMultiReader has: 
// func testInterleavedMultiReader(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{6377414 0xc0029aa000}))  {
// 	 := io_test.TestInterleavedMultiReader(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC io_test.TestMultiReader has: 
// func testMultiReader(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{6368719 0xc00230fa80}))  {
// 	 := io_test.TestMultiReader(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC io_test.TestMultiReaderCopy has: 
// func testMultiReaderCopy(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{6373281 0xc00288a520}))  {
// 	 := io_test.TestMultiReaderCopy(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC io_test.TestMultiReaderFinalEOF has: 
// func testMultiReaderFinalEOF(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{6376214 0xc00288ec80}))  {
// 	 := io_test.TestMultiReaderFinalEOF(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC io_test.TestMultiReaderFlatten has: 
// func testMultiReaderFlatten(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{6374547 0xc00288b760}))  {
// 	 := io_test.TestMultiReaderFlatten(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC io_test.TestMultiReaderFreesExhaustedReaders has: 
// func testMultiReaderFreesExhaustedReaders(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{6376461 0xc00288f180}))  {
// 	 := io_test.TestMultiReaderFreesExhaustedReaders(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC io_test.TestMultiReaderSingleByteWithEOF has: 
// func testMultiReaderSingleByteWithEOF(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{6375780 0xc00288e6c0}))  {
// 	 := io_test.TestMultiReaderSingleByteWithEOF(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC io_test.TestMultiWriter has: 
// func testMultiWriter(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{6369763 0xc002318ee0}))  {
// 	 := io_test.TestMultiWriter(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC io_test.TestMultiWriterCopy has: 
// func testMultiWriterCopy(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{6373671 0xc00288aa60}))  {
// 	 := io_test.TestMultiWriterCopy(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC io_test.TestMultiWriterError has: 
// func testMultiWriterError(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{6372778 0xc002615ca0}))  {
// 	 := io_test.TestMultiWriterError(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC io_test.TestMultiWriterSingleChainFlatten has: 
// func testMultiWriterSingleChainFlatten(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{6371934 0xc002615040}))  {
// 	 := io_test.TestMultiWriterSingleChainFlatten(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC io_test.TestMultiWriter_String has: 
// func testMultiWriter_String(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{6369950 0xc002319220}))  {
// 	 := io_test.TestMultiWriter_String(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC io_test.TestMultiWriter_StringCheckCall has: 
// func testMultiWriter_StringCheckCall(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{6370811 0xc002319f60}))  {
// 	 := io_test.TestMultiWriter_StringCheckCall(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC io_test.TestMultiWriter_WriteStringSingleAlloc has: 
// func testMultiWriter_WriteStringSingleAlloc(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{6370185 0xc002319460}))  {
// 	 := io_test.TestMultiWriter_WriteStringSingleAlloc(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC io_test.TestPipe1 has: 
// func testPipe1(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{6378620 0xc0029ab260}))  {
// 	 := io_test.TestPipe1(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC io_test.TestPipe2 has: 
// func testPipe2(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{6379222 0xc001278020}))  {
// 	 := io_test.TestPipe2(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC io_test.TestPipe3 has: 
// func testPipe3(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{6379918 0xc001278f80}))  {
// 	 := io_test.TestPipe3(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC io_test.TestPipeCloseError has: 
// func testPipeCloseError(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{6384402 0xc001192760}))  {
// 	 := io_test.TestPipeCloseError(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC io_test.TestPipeConcurrent has: 
// func testPipeConcurrent(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{6385112 0xc001193420}))  {
// 	 := io_test.TestPipeConcurrent(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC io_test.TestPipeReadClose has: 
// func testPipeReadClose(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{6381634 0xc0029b10c0}))  {
// 	 := io_test.TestPipeReadClose(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC io_test.TestPipeReadClose2 has: 
// func testPipeReadClose2(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{6382217 0xc0029b1c00}))  {
// 	 := io_test.TestPipeReadClose2(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC io_test.TestPipeWriteClose has: 
// func testPipeWriteClose(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{6382541 0xc00118c240}))  {
// 	 := io_test.TestPipeWriteClose(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC io_test.TestPipeWriteClose2 has: 
// func testPipeWriteClose2(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{6383137 0xc00118cce0}))  {
// 	 := io_test.TestPipeWriteClose2(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC io_test.TestReadAtLeast has: 
// func testReadAtLeast(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{6358051 0xc0017dc520}))  {
// 	 := io_test.TestReadAtLeast(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC io_test.TestReadAtLeastWithDataAndEOF has: 
// func testReadAtLeastWithDataAndEOF(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{6358474 0xc0017dcd00}))  {
// 	 := io_test.TestReadAtLeastWithDataAndEOF(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC io_test.TestReadAtLeastWithDataAndError has: 
// func testReadAtLeastWithDataAndError(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{6358596 0xc0017dcf60}))  {
// 	 := io_test.TestReadAtLeastWithDataAndError(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC io_test.TestSectionReader_ReadAt has: 
// func testSectionReader_ReadAt(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{6360523 0xc001c39640}))  {
// 	 := io_test.TestSectionReader_ReadAt(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC io_test.TestSectionReader_Seek has: 
// func testSectionReader_Seek(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{6362137 0xc00183e060}))  {
// 	 := io_test.TestSectionReader_Seek(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC io_test.TestSectionReader_Size has: 
// func testSectionReader_Size(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{6363108 0xc00183efa0}))  {
// 	 := io_test.TestSectionReader_Size(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC io_test.TestTeeReader has: 
// func testTeeReader(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{6359688 0xc001c38500}))  {
// 	 := io_test.TestTeeReader(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC io_test.TestWriteAfterWriterClose has: 
// func testWriteAfterWriterClose(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{6383723 0xc00118db20}))  {
// 	 := io_test.TestWriteAfterWriterClose(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC io_test.TestWriteEmpty has: 
// func testWriteEmpty(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{6383415 0xc00118d2e0}))  {
// 	 := io_test.TestWriteEmpty(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC io_test.TestWriteNil has: 
// func testWriteNil(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{6383565 0xc00118d700}))  {
// 	 := io_test.TestWriteNil(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC ioutil.TestReadDir has: 
// func testReadDir(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{6403419 0xc0022e63a0}))  {
// 	 := ioutil.TestReadDir(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC ioutil.TestReadFile has: 
// func testReadFile(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{6402306 0xc0028d73a0}))  {
// 	 := ioutil.TestReadFile(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC ioutil.TestTempDir has: 
// func testTempDir(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{6393372 0xc001bf9de0}))  {
// 	 := ioutil.TestTempDir(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC ioutil.TestTempDir_BadDir has: 
// func testTempDir_BadDir(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{6394106 0xc0026288a0}))  {
// 	 := ioutil.TestTempDir_BadDir(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC ioutil.TestTempFile has: 
// func testTempFile(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{6392341 0xc001bf89e0}))  {
// 	 := ioutil.TestTempFile(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC ioutil.TestTempFile_pattern has: 
// func testTempFile_pattern(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{6392691 0xc001bf90a0}))  {
// 	 := ioutil.TestTempFile_pattern(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC ioutil.TestWriteFile has: 
// func testWriteFile(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{6402674 0xc0028d7960}))  {
// 	 := ioutil.TestWriteFile(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC ioutil_test.ExampleReadAll has: 
// func exampleReadAll()  {
// 	 := ioutil_test.ExampleReadAll()
// 	...ABEND: TODO...
// }
// 
GO FUNC ioutil_test.ExampleReadDir has: 
// func exampleReadDir()  {
// 	 := ioutil_test.ExampleReadDir()
// 	...ABEND: TODO...
// }
// 
GO FUNC ioutil_test.ExampleReadFile has: 
// func exampleReadFile()  {
// 	 := ioutil_test.ExampleReadFile()
// 	...ABEND: TODO...
// }
// 
GO FUNC ioutil_test.ExampleTempDir has: 
// func exampleTempDir()  {
// 	 := ioutil_test.ExampleTempDir()
// 	...ABEND: TODO...
// }
// 
GO FUNC ioutil_test.ExampleTempFile has: 
// func exampleTempFile()  {
// 	 := ioutil_test.ExampleTempFile()
// 	...ABEND: TODO...
// }
// 
GO FUNC ioutil_test.ExampleTempFile_suffix has: 
// func exampleTempFile_suffix()  {
// 	 := ioutil_test.ExampleTempFile_suffix()
// 	...ABEND: TODO...
// }
// 
GO FUNC jpeg.BenchmarkDecodeBaseline has: 
// func benchmarkDecodeBaseline(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{6176513 0xc0013cd740}))  {
// 	 := jpeg.BenchmarkDecodeBaseline(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC jpeg.BenchmarkDecodeProgressive has: 
// func benchmarkDecodeProgressive(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{6176614 0xc0013cd8a0}))  {
// 	 := jpeg.BenchmarkDecodeProgressive(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC jpeg.BenchmarkEncodeRGBA has: 
// func benchmarkEncodeRGBA(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{6141494 0xc002977da0}))  {
// 	 := jpeg.BenchmarkEncodeRGBA(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC jpeg.BenchmarkEncodeYCbCr has: 
// func benchmarkEncodeYCbCr(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{6142026 0xc00298ec60}))  {
// 	 := jpeg.BenchmarkEncodeYCbCr(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC jpeg.BenchmarkFDCT has: 
// func benchmarkFDCT(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{6177200 0xc000d2e240}))  {
// 	 := jpeg.BenchmarkFDCT(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC jpeg.BenchmarkIDCT has: 
// func benchmarkIDCT(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{6177261 0xc000d2e3a0}))  {
// 	 := jpeg.BenchmarkIDCT(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC jpeg.TestDCT has: 
// func testDCT(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{6177316 0xc000d2e500}))  {
// 	 := jpeg.TestDCT(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC jpeg.TestDecodeEOF has: 
// func testDecodeEOF(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{6168743 0xc0014c5d40}))  {
// 	 := jpeg.TestDecodeEOF(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC jpeg.TestDecodeProgressive has: 
// func testDecodeProgressive(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{6166383 0xc001502f00}))  {
// 	 := jpeg.TestDecodeProgressive(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC jpeg.TestEncodeYCbCr has: 
// func testEncodeYCbCr(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{6140474 0xc002976720}))  {
// 	 := jpeg.TestEncodeYCbCr(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC jpeg.TestExtraneousData has: 
// func testExtraneousData(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{6174219 0xc0013c5100}))  {
// 	 := jpeg.TestExtraneousData(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC jpeg.TestLargeImageWithShortData has: 
// func testLargeImageWithShortData(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{6171227 0xc0013c45e0}))  {
// 	 := jpeg.TestLargeImageWithShortData(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC jpeg.TestTruncatedSOSDataDoesntPanic has: 
// func testTruncatedSOSDataDoesntPanic(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{6170837 0xc0009c9e40}))  {
// 	 := jpeg.TestTruncatedSOSDataDoesntPanic(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC jpeg.TestUnscaledQuant has: 
// func testUnscaledQuant(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{6137043 0xc0028c6340}))  {
// 	 := jpeg.TestUnscaledQuant(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC jpeg.TestWriteGrayscale has: 
// func testWriteGrayscale(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{6139341 0xc002964ca0}))  {
// 	 := jpeg.TestWriteGrayscale(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC jpeg.TestWriter has: 
// func testWriter(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{6138425 0xc0028c7c40}))  {
// 	 := jpeg.TestWriter(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC jpeg.TestZigUnzig has: 
// func testZigUnzig(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{6135978 0xc002898c40}))  {
// 	 := jpeg.TestZigUnzig(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC json.BenchmarkCodeDecoder has: 
// func benchmarkCodeDecoder(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{3651828 0xc001bd3520}))  {
// 	 := json.BenchmarkCodeDecoder(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC json.BenchmarkCodeEncoder has: 
// func benchmarkCodeEncoder(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{3651195 0xc001bd27e0}))  {
// 	 := json.BenchmarkCodeEncoder(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC json.BenchmarkCodeMarshal has: 
// func benchmarkCodeMarshal(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{3651529 0xc001bd2ee0}))  {
// 	 := json.BenchmarkCodeMarshal(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC json.BenchmarkCodeUnmarshal has: 
// func benchmarkCodeUnmarshal(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{3653126 0xc001bdb240}))  {
// 	 := json.BenchmarkCodeUnmarshal(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC json.BenchmarkCodeUnmarshalReuse has: 
// func benchmarkCodeUnmarshalReuse(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{3653456 0xc001bdb8e0}))  {
// 	 := json.BenchmarkCodeUnmarshalReuse(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC json.BenchmarkDecoderStream has: 
// func benchmarkDecoderStream(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{3652601 0xc001bda6a0}))  {
// 	 := json.BenchmarkDecoderStream(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC json.BenchmarkEncoderEncode has: 
// func benchmarkEncoderEncode(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{3790305 0xc001dc97c0}))  {
// 	 := json.BenchmarkEncoderEncode(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC json.BenchmarkIssue10335 has: 
// func benchmarkIssue10335(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{3654510 0xc001be0e00}))  {
// 	 := json.BenchmarkIssue10335(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC json.BenchmarkNumberIsValid has: 
// func benchmarkNumberIsValid(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{3702283 0xc001c92f40}))  {
// 	 := json.BenchmarkNumberIsValid(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC json.BenchmarkNumberIsValidRegexp has: 
// func benchmarkNumberIsValidRegexp(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{3702414 0xc001c931c0}))  {
// 	 := json.BenchmarkNumberIsValidRegexp(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC json.BenchmarkTypeFieldsCache has: 
// func benchmarkTypeFieldsCache(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{3655035 0xc001be1840}))  {
// 	 := json.BenchmarkTypeFieldsCache(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC json.BenchmarkUnicodeDecoder has: 
// func benchmarkUnicodeDecoder(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{3652297 0xc001bd3f40}))  {
// 	 := json.BenchmarkUnicodeDecoder(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC json.BenchmarkUnmapped has: 
// func benchmarkUnmapped(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{3654743 0xc001be1320}))  {
// 	 := json.BenchmarkUnmapped(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC json.BenchmarkUnmarshalFloat64 has: 
// func benchmarkUnmarshalFloat64(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{3654049 0xc001be0400}))  {
// 	 := json.BenchmarkUnmarshalFloat64(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC json.BenchmarkUnmarshalInt64 has: 
// func benchmarkUnmarshalInt64(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{3654284 0xc001be0900}))  {
// 	 := json.BenchmarkUnmarshalInt64(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC json.BenchmarkUnmarshalString has: 
// func benchmarkUnmarshalString(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{3653803 0xc001bdbf00}))  {
// 	 := json.BenchmarkUnmarshalString(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC json.HTMLEscape has: 
// func hTMLEscape(dst ABEND881(unrecognized Expr type *ast.StarExpr at: &{3622559 0xc001b5f1a0}), src ABEND881(unrecognized Expr type *ast.ArrayType at: &{3622578 <nil> byte}))  {
// 	 := json.HTMLEscape(dst, src)
// 	...ABEND: TODO...
// }
// 
GO FUNC json.TestAnonymousFields has: 
// func testAnonymousFields(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{3816402 0xc001e2d740}))  {
// 	 := json.TestAnonymousFields(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC json.TestBlocking has: 
// func testBlocking(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{3789923 0xc001dc9160}))  {
// 	 := json.TestBlocking(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC json.TestByteKind has: 
// func testByteKind(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{3748529 0xc001d29880}))  {
// 	 := json.TestByteKind(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC json.TestCompact has: 
// func testCompact(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{3774723 0xc001d87ce0}))  {
// 	 := json.TestCompact(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC json.TestCompactBig has: 
// func testCompactBig(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{3776494 0xc001d920c0}))  {
// 	 := json.TestCompactBig(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC json.TestCompactSeparators has: 
// func testCompactSeparators(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{3775322 0xc001d909c0}))  {
// 	 := json.TestCompactSeparators(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC json.TestDecodeInStream has: 
// func testDecodeInStream(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{3793346 0xc001dda600}))  {
// 	 := json.TestDecodeInStream(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC json.TestDecoder has: 
// func testDecoder(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{3787234 0xc001dc42c0}))  {
// 	 := json.TestDecoder(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC json.TestDecoderBuffered has: 
// func testDecoderBuffered(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{3788105 0xc001dc5040}))  {
// 	 := json.TestDecoderBuffered(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC json.TestDuplicatedFieldDisappears has: 
// func testDuplicatedFieldDisappears(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{3822502 0xc001e47000}))  {
// 	 := json.TestDuplicatedFieldDisappears(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC json.TestEmbeddedBug has: 
// func testEmbeddedBug(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{3821327 0xc001e39e60}))  {
// 	 := json.TestEmbeddedBug(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC json.TestEmptyString has: 
// func testEmptyString(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{3740188 0xc001d14840}))  {
// 	 := json.TestEmptyString(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC json.TestEncodeBytekind has: 
// func testEncodeBytekind(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{3826702 0xc001e53c00}))  {
// 	 := json.TestEncodeBytekind(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC json.TestEncodePointerString has: 
// func testEncodePointerString(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{3824521 0xc001e4f2e0}))  {
// 	 := json.TestEncodePointerString(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC json.TestEncodeRenamedByteSlice has: 
// func testEncodeRenamedByteSlice(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{3813530 0xc001e1c820}))  {
// 	 := json.TestEncodeRenamedByteSlice(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC json.TestEncodeString has: 
// func testEncodeString(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{3825856 0xc001e52aa0}))  {
// 	 := json.TestEncodeString(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC json.TestEncoder has: 
// func testEncoder(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{3785307 0xc001db3f80}))  {
// 	 := json.TestEncoder(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC json.TestEncoderIndent has: 
// func testEncoderIndent(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{3785981 0xc001dbeaa0}))  {
// 	 := json.TestEncoderIndent(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC json.TestEncoderSetEscapeHTML has: 
// func testEncoderSetEscapeHTML(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{3786302 0xc001dbf140}))  {
// 	 := json.TestEncoderSetEscapeHTML(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC json.TestErrorMessageFromMisusedString has: 
// func testErrorMessageFromMisusedString(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{3734173 0xc001d08600}))  {
// 	 := json.TestErrorMessageFromMisusedString(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC json.TestEscape has: 
// func testEscape(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{3733023 0xc001cffd40}))  {
// 	 := json.TestEscape(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC json.TestFold has: 
// func testFold(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{3613152 0xc001b42cc0}))  {
// 	 := json.TestFold(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC json.TestFoldAgainstUnicode has: 
// func testFoldAgainstUnicode(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{3613503 0xc001b43540}))  {
// 	 := json.TestFoldAgainstUnicode(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC json.TestHTMLEscape has: 
// func testHTMLEscape(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{3824111 0xc001e4ec60}))  {
// 	 := json.TestHTMLEscape(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC json.TestHTTPDecoding has: 
// func testHTTPDecoding(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{3794298 0xc001ddb740}))  {
// 	 := json.TestHTTPDecoding(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC json.TestIndent has: 
// func testIndent(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{3775852 0xc001d91320}))  {
// 	 := json.TestIndent(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC json.TestIndentBig has: 
// func testIndentBig(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{3776771 0xc001d926e0}))  {
// 	 := json.TestIndentBig(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC json.TestIndentErrors has: 
// func testIndentErrors(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{3777947 0xc001d93a40}))  {
// 	 := json.TestIndentErrors(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC json.TestInterfaceSet has: 
// func testInterfaceSet(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{3741678 0xc001d1a520}))  {
// 	 := json.TestInterfaceSet(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC json.TestInvalidStringOption has: 
// func testInvalidStringOption(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{3754057 0xc001d3d380}))  {
// 	 := json.TestInvalidStringOption(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC json.TestInvalidUnmarshal has: 
// func testInvalidUnmarshal(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{3753021 0xc001d3c3c0}))  {
// 	 := json.TestInvalidUnmarshal(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC json.TestInvalidUnmarshalText has: 
// func testInvalidUnmarshalText(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{3753651 0xc001d3cd00}))  {
// 	 := json.TestInvalidUnmarshalText(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC json.TestIssue10281 has: 
// func testIssue10281(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{3823919 0xc001e4e8a0}))  {
// 	 := json.TestIssue10281(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC json.TestLargeByteSlice has: 
// func testLargeByteSlice(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{3732166 0xc001cfeb60}))  {
// 	 := json.TestLargeByteSlice(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC json.TestMarshal has: 
// func testMarshal(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{3726638 0xc001cf0760}))  {
// 	 := json.TestMarshal(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC json.TestMarshalBadUTF8 has: 
// func testMarshalBadUTF8(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{3727369 0xc001cf1280}))  {
// 	 := json.TestMarshalBadUTF8(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC json.TestMarshalEmbeds has: 
// func testMarshalEmbeds(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{3727813 0xc001cf1b80}))  {
// 	 := json.TestMarshalEmbeds(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC json.TestMarshalFloat has: 
// func testMarshalFloat(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{3829176 0xc001e5db60}))  {
// 	 := json.TestMarshalFloat(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC json.TestMarshalNumberZeroVal has: 
// func testMarshalNumberZeroVal(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{3727598 0xc001cf1780}))  {
// 	 := json.TestMarshalNumberZeroVal(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC json.TestMarshalPanic has: 
// func testMarshalPanic(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{3834717 0xc001e6fd40}))  {
// 	 := json.TestMarshalPanic(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC json.TestMarshalRawMessageValue has: 
// func testMarshalRawMessageValue(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{3830987 0xc001e67ea0}))  {
// 	 := json.TestMarshalRawMessageValue(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC json.TestMarshalerEscaping has: 
// func testMarshalerEscaping(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{3815931 0xc001e2cf00}))  {
// 	 := json.TestMarshalerEscaping(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC json.TestNilMarshal has: 
// func testNilMarshal(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{3820526 0xc001e38ec0}))  {
// 	 := json.TestNilMarshal(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC json.TestNullRawMessage has: 
// func testNullRawMessage(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{3789321 0xc001dc8780}))  {
// 	 := json.TestNullRawMessage(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC json.TestNullString has: 
// func testNullString(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{3740712 0xc001d14e60}))  {
// 	 := json.TestNullString(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC json.TestNumberAccessors has: 
// func testNumberAccessors(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{3731361 0xc001cfd9c0}))  {
// 	 := json.TestNumberAccessors(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC json.TestNumberIsValid has: 
// func testNumberIsValid(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{3700595 0xc001c8b920}))  {
// 	 := json.TestNumberIsValid(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC json.TestOmitEmpty has: 
// func testOmitEmpty(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{3812146 0xc001e13300}))  {
// 	 := json.TestOmitEmpty(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC json.TestPrefilled has: 
// func testPrefilled(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{3751868 0xc001d36ee0}))  {
// 	 := json.TestPrefilled(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC json.TestRawMessage has: 
// func testRawMessage(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{3788723 0xc001dc5d60}))  {
// 	 := json.TestRawMessage(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC json.TestRefUnmarshal has: 
// func testRefUnmarshal(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{3739621 0xc001d0fe40}))  {
// 	 := json.TestRefUnmarshal(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC json.TestRefValMarshal has: 
// func testRefValMarshal(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{3815090 0xc001e2c140}))  {
// 	 := json.TestRefValMarshal(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC json.TestSkipArrayObjects has: 
// func testSkipArrayObjects(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{3751599 0xc001d36b00}))  {
// 	 := json.TestSkipArrayObjects(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC json.TestSliceOfCustomByte has: 
// func testSliceOfCustomByte(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{3748900 0xc001d29f60}))  {
// 	 := json.TestSliceOfCustomByte(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC json.TestStringBytes has: 
// func testStringBytes(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{3822821 0xc001e47600}))  {
// 	 := json.TestStringBytes(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC json.TestStringKind has: 
// func testStringKind(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{3747979 0xc001d290c0}))  {
// 	 := json.TestStringKind(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC json.TestStringTag has: 
// func testStringTag(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{3812763 0xc001e13ba0}))  {
// 	 := json.TestStringTag(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC json.TestStructTagObjectKey has: 
// func testStructTagObjectKey(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{3694982 0xc001c7eea0}))  {
// 	 := json.TestStructTagObjectKey(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC json.TestTagParsing has: 
// func testTagParsing(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{3695755 0xc001c7fac0}))  {
// 	 := json.TestTagParsing(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC json.TestTaggedFieldDominates has: 
// func testTaggedFieldDominates(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{3822065 0xc001e46980}))  {
// 	 := json.TestTaggedFieldDominates(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC json.TestTextMarshalerMapKeysAreSorted has: 
// func testTextMarshalerMapKeysAreSorted(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{3827454 0xc001e5cac0}))  {
// 	 := json.TestTextMarshalerMapKeysAreSorted(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC json.TestUnmarshal has: 
// func testUnmarshal(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{3728653 0xc001cf6740}))  {
// 	 := json.TestUnmarshal(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC json.TestUnmarshalEmbeddedUnexported has: 
// func testUnmarshalEmbeddedUnexported(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{3754961 0xc001d3de60}))  {
// 	 := json.TestUnmarshalEmbeddedUnexported(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC json.TestUnmarshalInterface has: 
// func testUnmarshalInterface(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{3732565 0xc001cff420}))  {
// 	 := json.TestUnmarshalInterface(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC json.TestUnmarshalJSONLiteralError has: 
// func testUnmarshalJSONLiteralError(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{3751181 0xc001d36500}))  {
// 	 := json.TestUnmarshalJSONLiteralError(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC json.TestUnmarshalMarshal has: 
// func testUnmarshalMarshal(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{3730567 0xc001cfcdc0}))  {
// 	 := json.TestUnmarshalMarshal(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC json.TestUnmarshalNulls has: 
// func testUnmarshalNulls(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{3744273 0xc001d22700}))  {
// 	 := json.TestUnmarshalNulls(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC json.TestUnmarshalPanic has: 
// func testUnmarshalPanic(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{3757888 0xc001d541e0}))  {
// 	 := json.TestUnmarshalPanic(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC json.TestUnmarshalPtrPtr has: 
// func testUnmarshalPtrPtr(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{3732802 0xc001cff8c0}))  {
// 	 := json.TestUnmarshalPtrPtr(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC json.TestUnmarshalSyntax has: 
// func testUnmarshalSyntax(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{3749876 0xc001d31100}))  {
// 	 := json.TestUnmarshalSyntax(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC json.TestUnmarshalTypeError has: 
// func testUnmarshalTypeError(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{3749462 0xc001d30a40}))  {
// 	 := json.TestUnmarshalTypeError(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC json.TestUnmarshalUnexported has: 
// func testUnmarshalUnexported(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{3750349 0xc001d317c0}))  {
// 	 := json.TestUnmarshalUnexported(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC json.TestUnsupportedValues has: 
// func testUnsupportedValues(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{3814030 0xc001e1d140}))  {
// 	 := json.TestUnsupportedValues(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC json.TestValid has: 
// func testValid(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{3774121 0xc001d873a0}))  {
// 	 := json.TestValid(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC json_test.ExampleDecoder has: 
// func exampleDecoder()  {
// 	 := json_test.ExampleDecoder()
// 	...ABEND: TODO...
// }
// 
GO FUNC json_test.ExampleDecoder_Decode_stream has: 
// func exampleDecoder_Decode_stream()  {
// 	 := json_test.ExampleDecoder_Decode_stream()
// 	...ABEND: TODO...
// }
// 
GO FUNC json_test.ExampleDecoder_Token has: 
// func exampleDecoder_Token()  {
// 	 := json_test.ExampleDecoder_Token()
// 	...ABEND: TODO...
// }
// 
GO FUNC json_test.ExampleIndent has: 
// func exampleIndent()  {
// 	 := json_test.ExampleIndent()
// 	...ABEND: TODO...
// }
// 
GO FUNC json_test.ExampleMarshal has: 
// func exampleMarshal()  {
// 	 := json_test.ExampleMarshal()
// 	...ABEND: TODO...
// }
// 
GO FUNC json_test.ExampleMarshalIndent has: 
// func exampleMarshalIndent()  {
// 	 := json_test.ExampleMarshalIndent()
// 	...ABEND: TODO...
// }
// 
GO FUNC json_test.ExampleRawMessage_marshal has: 
// func exampleRawMessage_marshal()  {
// 	 := json_test.ExampleRawMessage_marshal()
// 	...ABEND: TODO...
// }
// 
GO FUNC json_test.ExampleRawMessage_unmarshal has: 
// func exampleRawMessage_unmarshal()  {
// 	 := json_test.ExampleRawMessage_unmarshal()
// 	...ABEND: TODO...
// }
// 
GO FUNC json_test.ExampleUnmarshal has: 
// func exampleUnmarshal()  {
// 	 := json_test.ExampleUnmarshal()
// 	...ABEND: TODO...
// }
// 
GO FUNC json_test.Example_customMarshalJSON has: 
// func example_customMarshalJSON()  {
// 	 := json_test.Example_customMarshalJSON()
// 	...ABEND: TODO...
// }
// 
GO FUNC jsonrpc.ServeConn has: 
// func serveConn(conn ABEND881(unrecognized Expr type *ast.SelectorExpr at: &{io ReadWriteCloser}))  {
// 	 := jsonrpc.ServeConn(conn)
// 	...ABEND: TODO...
// }
// 
GO FUNC jsonrpc.TestBuiltinTypes has: 
// func testBuiltinTypes(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{9777313 0xc0048918c0}))  {
// 	 := jsonrpc.TestBuiltinTypes(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC jsonrpc.TestClient has: 
// func testClient(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{9775571 0xc00488f5a0}))  {
// 	 := jsonrpc.TestClient(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC jsonrpc.TestMalformedInput has: 
// func testMalformedInput(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{9778324 0xc004896a60}))  {
// 	 := jsonrpc.TestMalformedInput(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC jsonrpc.TestMalformedOutput has: 
// func testMalformedOutput(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{9778497 0xc004896d80}))  {
// 	 := jsonrpc.TestMalformedOutput(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC jsonrpc.TestServer has: 
// func testServer(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{9774869 0xc00488e800}))  {
// 	 := jsonrpc.TestServer(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC jsonrpc.TestServerEmptyMessage has: 
// func testServerEmptyMessage(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{9774542 0xc00488e140}))  {
// 	 := jsonrpc.TestServerEmptyMessage(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC jsonrpc.TestServerErrorHasNullResult has: 
// func testServerErrorHasNullResult(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{9778845 0xc004897400}))  {
// 	 := jsonrpc.TestServerErrorHasNullResult(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC jsonrpc.TestServerNoParams has: 
// func testServerNoParams(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{9774165 0xc004885a80}))  {
// 	 := jsonrpc.TestServerNoParams(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC jsonrpc.TestUnexpectedError has: 
// func testUnexpectedError(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{9779703 0xc0048a0240}))  {
// 	 := jsonrpc.TestUnexpectedError(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC list.TestExtending has: 
// func testExtending(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{870260 0xc0008d8220}))  {
// 	 := list.TestExtending(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC list.TestInsertAfterUnknownMark has: 
// func testInsertAfterUnknownMark(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{873793 0xc0008e56a0}))  {
// 	 := list.TestInsertAfterUnknownMark(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC list.TestInsertBeforeUnknownMark has: 
// func testInsertBeforeUnknownMark(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{873506 0xc0008e5180}))  {
// 	 := list.TestInsertBeforeUnknownMark(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC list.TestIssue4103 has: 
// func testIssue4103(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{871474 0xc0008dc1c0}))  {
// 	 := list.TestIssue4103(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC list.TestIssue6349 has: 
// func testIssue6349(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{871857 0xc0008dca40}))  {
// 	 := list.TestIssue6349(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC list.TestList has: 
// func testList(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{867795 0xc0008cc7c0}))  {
// 	 := list.TestList(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC list.TestMove has: 
// func testMove(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{872138 0xc0008dd100}))  {
// 	 := list.TestMove(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC list.TestMoveUnknownMark has: 
// func testMoveUnknownMark(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{874084 0xc0008e5bc0}))  {
// 	 := list.TestMoveUnknownMark(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC list.TestRemove has: 
// func testRemove(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{871213 0xc0008d9ae0}))  {
// 	 := list.TestRemove(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC list.TestZeroList has: 
// func testZeroList(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{873046 0xc0008e49c0}))  {
// 	 := list.TestZeroList(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC list_test.Example has: 
// func example()  {
// 	 := list_test.Example()
// 	...ABEND: TODO...
// }
// 
GO FUNC log.BenchmarkItoa has: 
// func benchmarkItoa(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{6409695 0xc0026847e0}))  {
// 	 := log.BenchmarkItoa(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC log.BenchmarkPrintln has: 
// func benchmarkPrintln(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{6410047 0xc002685240}))  {
// 	 := log.BenchmarkPrintln(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC log.BenchmarkPrintlnNoFlags has: 
// func benchmarkPrintlnNoFlags(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{6410244 0xc0026856e0}))  {
// 	 := log.BenchmarkPrintlnNoFlags(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC log.Fatal has: 
// func fatal(v ABEND881(unrecognized Expr type *ast.Ellipsis at: &{6419706 0xc00235fb00}))  {
// 	 := log.Fatal(v)
// 	...ABEND: TODO...
// }
// 
GO FUNC log.Fatalf has: 
// func fatalf(format string, v ABEND881(unrecognized Expr type *ast.Ellipsis at: &{6419871 0xc00235fde0}))  {
// 	 := log.Fatalf(format, v)
// 	...ABEND: TODO...
// }
// 
GO FUNC log.Fatalln has: 
// func fatalln(v ABEND881(unrecognized Expr type *ast.Ellipsis at: &{6420033 0xc0026620c0}))  {
// 	 := log.Fatalln(v)
// 	...ABEND: TODO...
// }
// 
GO FUNC log.Panic has: 
// func panic(v ABEND881(unrecognized Expr type *ast.Ellipsis at: &{6420179 0xc002662360}))  {
// 	 := log.Panic(v)
// 	...ABEND: TODO...
// }
// 
GO FUNC log.Panicf has: 
// func panicf(format string, v ABEND881(unrecognized Expr type *ast.Ellipsis at: &{6420347 0xc002662640}))  {
// 	 := log.Panicf(format, v)
// 	...ABEND: TODO...
// }
// 
GO FUNC log.Panicln has: 
// func panicln(v ABEND881(unrecognized Expr type *ast.Ellipsis at: &{6420512 0xc002662920}))  {
// 	 := log.Panicln(v)
// 	...ABEND: TODO...
// }
// 
GO FUNC log.Print has: 
// func print(v ABEND881(unrecognized Expr type *ast.Ellipsis at: &{6419186 0xc00235f440}))  {
// 	 := log.Print(v)
// 	...ABEND: TODO...
// }
// 
GO FUNC log.Printf has: 
// func printf(format string, v ABEND881(unrecognized Expr type *ast.Ellipsis at: &{6419379 0xc00235f6a0}))  {
// 	 := log.Printf(format, v)
// 	...ABEND: TODO...
// }
// 
GO FUNC log.Println has: 
// func println(v ABEND881(unrecognized Expr type *ast.Ellipsis at: &{6419569 0xc00235f900}))  {
// 	 := log.Println(v)
// 	...ABEND: TODO...
// }
// 
GO FUNC log.SetFlags has: 
// func setFlags(flag int)  {
// 	 := log.SetFlags(flag)
// 	...ABEND: TODO...
// }
// 
GO FUNC log.SetOutput has: 
// func setOutput(w ABEND881(unrecognized Expr type *ast.SelectorExpr at: &{io Writer}))  {
// 	 := log.SetOutput(w)
// 	...ABEND: TODO...
// }
// 
GO FUNC log.SetPrefix has: 
// func setPrefix(prefix string)  {
// 	 := log.SetPrefix(prefix)
// 	...ABEND: TODO...
// }
// 
GO FUNC log.TestAll has: 
// func testAll(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{6406943 0xc0025c54e0}))  {
// 	 := log.TestAll(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC log.TestEmptyPrintCreatesLine has: 
// func testEmptyPrintCreatesLine(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{6409354 0xc002684060}))  {
// 	 := log.TestEmptyPrintCreatesLine(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC log.TestFlagAndPrefixSetting has: 
// func testFlagAndPrefixSetting(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{6407590 0xc0025c8380}))  {
// 	 := log.TestFlagAndPrefixSetting(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC log.TestOutput has: 
// func testOutput(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{6407158 0xc0025c59c0}))  {
// 	 := log.TestOutput(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC log.TestOutputRace has: 
// func testOutputRace(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{6407414 0xc0025c5ee0}))  {
// 	 := log.TestOutputRace(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC log.TestUTCFlag has: 
// func testUTCFlag(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{6408499 0xc0025c9260}))  {
// 	 := log.TestUTCFlag(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC log_test.ExampleLogger has: 
// func exampleLogger()  {
// 	 := log_test.ExampleLogger()
// 	...ABEND: TODO...
// }
// 
GO FUNC log_test.ExampleLogger_Output has: 
// func exampleLogger_Output()  {
// 	 := log_test.ExampleLogger_Output()
// 	...ABEND: TODO...
// }
// 
GO FUNC lzw.BenchmarkDecoder has: 
// func benchmarkDecoder(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{820572 0xc0006ef740}))  {
// 	 := lzw.BenchmarkDecoder(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC lzw.BenchmarkEncoder has: 
// func benchmarkEncoder(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{806954 0xc000718280}))  {
// 	 := lzw.BenchmarkEncoder(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC lzw.TestHiCodeDoesNotOverflow has: 
// func testHiCodeDoesNotOverflow(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{817730 0xc0007c3940}))  {
// 	 := lzw.TestHiCodeDoesNotOverflow(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC lzw.TestNoLongerSavingPriorExpansions has: 
// func testNoLongerSavingPriorExpansions(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{818472 0xc0006ee2e0}))  {
// 	 := lzw.TestNoLongerSavingPriorExpansions(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC lzw.TestReader has: 
// func testReader(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{816626 0xc0007c22e0}))  {
// 	 := lzw.TestReader(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC lzw.TestSmallLitWidth has: 
// func testSmallLitWidth(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{806661 0xc000695cc0}))  {
// 	 := lzw.TestSmallLitWidth(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC lzw.TestWriter has: 
// func testWriter(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{806001 0xc000695220}))  {
// 	 := lzw.TestWriter(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC lzw.TestWriterReturnValues has: 
// func testWriterReturnValues(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{806468 0xc000695860}))  {
// 	 := lzw.TestWriterReturnValues(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC macho.TestOpen has: 
// func testOpen(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{3027100 0xc000d34520}))  {
// 	 := macho.TestOpen(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC macho.TestOpenFailure has: 
// func testOpenFailure(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{3029360 0xc000bff640}))  {
// 	 := macho.TestOpenFailure(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC macho.TestOpenFat has: 
// func testOpenFat(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{3029560 0xc000bff9a0}))  {
// 	 := macho.TestOpenFat(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC macho.TestOpenFatFailure has: 
// func testOpenFatFailure(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{3030361 0xc000b0caa0}))  {
// 	 := macho.TestOpenFatFailure(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC macho.TestRelocTypeString has: 
// func testRelocTypeString(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{3030817 0xc000b0d3c0}))  {
// 	 := macho.TestRelocTypeString(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC macho.TestTypeString has: 
// func testTypeString(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{3031164 0xc000b0d800}))  {
// 	 := macho.TestTypeString(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC mail.TestAddressFormattingAndParsing has: 
// func testAddressFormattingAndParsing(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{9695505 0xc004767920}))  {
// 	 := mail.TestAddressFormattingAndParsing(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC mail.TestAddressParser has: 
// func testAddressParser(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{9687437 0xc004758040}))  {
// 	 := mail.TestAddressParser(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC mail.TestAddressParsing has: 
// func testAddressParsing(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{9679983 0xc00474c0a0}))  {
// 	 := mail.TestAddressParsing(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC mail.TestAddressParsingAndFormatting has: 
// func testAddressParsingAndFormatting(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{9693402 0xc004766720}))  {
// 	 := mail.TestAddressParsingAndFormatting(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC mail.TestAddressParsingError has: 
// func testAddressParsingError(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{9678465 0xc00474b020}))  {
// 	 := mail.TestAddressParsingError(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC mail.TestAddressString has: 
// func testAddressString(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{9691068 0xc00475e860}))  {
// 	 := mail.TestAddressString(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC mail.TestDateParsing has: 
// func testDateParsing(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{9677327 0xc004743a60}))  {
// 	 := mail.TestDateParsing(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC mail.TestParsing has: 
// func testParsing(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{9676417 0xc0047429a0}))  {
// 	 := mail.TestParsing(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC mail_test.ExampleParseAddress has: 
// func exampleParseAddress()  {
// 	 := mail_test.ExampleParseAddress()
// 	...ABEND: TODO...
// }
// 
GO FUNC mail_test.ExampleParseAddressList has: 
// func exampleParseAddressList()  {
// 	 := mail_test.ExampleParseAddressList()
// 	...ABEND: TODO...
// }
// 
GO FUNC mail_test.ExampleReadMessage has: 
// func exampleReadMessage()  {
// 	 := mail_test.ExampleReadMessage()
// 	...ABEND: TODO...
// }
// 
GO FUNC math_test.BenchmarkAbs has: 
// func benchmarkAbs(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{6640623 0xc002be2940}))  {
// 	 := math_test.BenchmarkAbs(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC math_test.BenchmarkAcos has: 
// func benchmarkAcos(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{6638290 0xc002bcabc0}))  {
// 	 := math_test.BenchmarkAcos(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC math_test.BenchmarkAcosh has: 
// func benchmarkAcosh(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{6638398 0xc002bcaea0}))  {
// 	 := math_test.BenchmarkAcosh(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC math_test.BenchmarkAsin has: 
// func benchmarkAsin(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{6638507 0xc002bcb180}))  {
// 	 := math_test.BenchmarkAsin(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC math_test.BenchmarkAsinh has: 
// func benchmarkAsinh(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{6638615 0xc002bcb460}))  {
// 	 := math_test.BenchmarkAsinh(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC math_test.BenchmarkAtan has: 
// func benchmarkAtan(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{6638723 0xc002bcb740}))  {
// 	 := math_test.BenchmarkAtan(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC math_test.BenchmarkAtan2 has: 
// func benchmarkAtan2(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{6638940 0xc002bcbd00}))  {
// 	 := math_test.BenchmarkAtan2(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC math_test.BenchmarkAtanh has: 
// func benchmarkAtanh(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{6638831 0xc002bcba20}))  {
// 	 := math_test.BenchmarkAtanh(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC math_test.BenchmarkCbrt has: 
// func benchmarkCbrt(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{6639051 0xc002bda020}))  {
// 	 := math_test.BenchmarkCbrt(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC math_test.BenchmarkCeil has: 
// func benchmarkCeil(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{6639158 0xc002bda300}))  {
// 	 := math_test.BenchmarkCeil(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC math_test.BenchmarkCopysign has: 
// func benchmarkCopysign(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{6639293 0xc002bda640}))  {
// 	 := math_test.BenchmarkCopysign(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC math_test.BenchmarkCos has: 
// func benchmarkCos(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{6639416 0xc002bda960}))  {
// 	 := math_test.BenchmarkCos(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC math_test.BenchmarkCosh has: 
// func benchmarkCosh(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{6639522 0xc002bdac40}))  {
// 	 := math_test.BenchmarkCosh(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC math_test.BenchmarkDim has: 
// func benchmarkDim(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{6640733 0xc002be2c20}))  {
// 	 := math_test.BenchmarkDim(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC math_test.BenchmarkErf has: 
// func benchmarkErf(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{6639629 0xc002bdaf20}))  {
// 	 := math_test.BenchmarkErf(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC math_test.BenchmarkErfc has: 
// func benchmarkErfc(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{6639735 0xc002bdb200}))  {
// 	 := math_test.BenchmarkErfc(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC math_test.BenchmarkErfcinv has: 
// func benchmarkErfcinv(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{6639956 0xc002bdb7c0}))  {
// 	 := math_test.BenchmarkErfcinv(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC math_test.BenchmarkErfinv has: 
// func benchmarkErfinv(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{6639844 0xc002bdb4e0}))  {
// 	 := math_test.BenchmarkErfinv(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC math_test.BenchmarkExp has: 
// func benchmarkExp(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{6640065 0xc002bdbaa0}))  {
// 	 := math_test.BenchmarkExp(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC math_test.BenchmarkExp2 has: 
// func benchmarkExp2(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{6640389 0xc002be2340}))  {
// 	 := math_test.BenchmarkExp2(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC math_test.BenchmarkExp2Go has: 
// func benchmarkExp2Go(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{6640498 0xc002be2620}))  {
// 	 := math_test.BenchmarkExp2Go(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC math_test.BenchmarkExpGo has: 
// func benchmarkExpGo(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{6640172 0xc002bdbd80}))  {
// 	 := math_test.BenchmarkExpGo(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC math_test.BenchmarkExpm1 has: 
// func benchmarkExpm1(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{6640281 0xc002be2060}))  {
// 	 := math_test.BenchmarkExpm1(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC math_test.BenchmarkFloor has: 
// func benchmarkFloor(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{6640848 0xc002be2f40}))  {
// 	 := math_test.BenchmarkFloor(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC math_test.BenchmarkFrexp has: 
// func benchmarkFrexp(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{6641281 0xc002be3b80}))  {
// 	 := math_test.BenchmarkFrexp(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC math_test.BenchmarkGamma has: 
// func benchmarkGamma(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{6641413 0xc002be3f20}))  {
// 	 := math_test.BenchmarkGamma(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC math_test.BenchmarkHypot has: 
// func benchmarkHypot(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{6641523 0xc002bea200}))  {
// 	 := math_test.BenchmarkHypot(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC math_test.BenchmarkHypotGo has: 
// func benchmarkHypotGo(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{6641636 0xc002bea520}))  {
// 	 := math_test.BenchmarkHypotGo(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC math_test.BenchmarkIlogb has: 
// func benchmarkIlogb(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{6641749 0xc002bea840}))  {
// 	 := math_test.BenchmarkIlogb(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC math_test.BenchmarkJ0 has: 
// func benchmarkJ0(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{6641853 0xc002beab20}))  {
// 	 := math_test.BenchmarkJ0(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC math_test.BenchmarkJ1 has: 
// func benchmarkJ1(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{6641957 0xc002beae00}))  {
// 	 := math_test.BenchmarkJ1(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC math_test.BenchmarkJn has: 
// func benchmarkJn(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{6642061 0xc002beb0e0}))  {
// 	 := math_test.BenchmarkJn(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC math_test.BenchmarkLdexp has: 
// func benchmarkLdexp(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{6642171 0xc002beb400}))  {
// 	 := math_test.BenchmarkLdexp(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC math_test.BenchmarkLgamma has: 
// func benchmarkLgamma(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{6642284 0xc002beb720}))  {
// 	 := math_test.BenchmarkLgamma(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC math_test.BenchmarkLog has: 
// func benchmarkLog(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{6642417 0xc002bebac0}))  {
// 	 := math_test.BenchmarkLog(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC math_test.BenchmarkLog10 has: 
// func benchmarkLog10(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{6642740 0xc002bf2360}))  {
// 	 := math_test.BenchmarkLog10(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC math_test.BenchmarkLog1p has: 
// func benchmarkLog1p(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{6642631 0xc002bf2080}))  {
// 	 := math_test.BenchmarkLog1p(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC math_test.BenchmarkLog2 has: 
// func benchmarkLog2(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{6642848 0xc002bf2640}))  {
// 	 := math_test.BenchmarkLog2(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC math_test.BenchmarkLogb has: 
// func benchmarkLogb(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{6642523 0xc002bebda0}))  {
// 	 := math_test.BenchmarkLogb(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC math_test.BenchmarkMax has: 
// func benchmarkMax(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{6640955 0xc002be3220}))  {
// 	 := math_test.BenchmarkMax(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC math_test.BenchmarkMin has: 
// func benchmarkMin(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{6641063 0xc002be3540}))  {
// 	 := math_test.BenchmarkMin(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC math_test.BenchmarkMod has: 
// func benchmarkMod(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{6641171 0xc002be3860}))  {
// 	 := math_test.BenchmarkMod(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC math_test.BenchmarkModf has: 
// func benchmarkModf(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{6642956 0xc002bf2920}))  {
// 	 := math_test.BenchmarkModf(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC math_test.BenchmarkNextafter32 has: 
// func benchmarkNextafter32(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{6643099 0xc002bf2cc0}))  {
// 	 := math_test.BenchmarkNextafter32(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC math_test.BenchmarkNextafter64 has: 
// func benchmarkNextafter64(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{6643241 0xc002bf3020}))  {
// 	 := math_test.BenchmarkNextafter64(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC math_test.BenchmarkPow10Neg has: 
// func benchmarkPow10Neg(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{6643754 0xc002bf3d40}))  {
// 	 := math_test.BenchmarkPow10Neg(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC math_test.BenchmarkPow10Pos has: 
// func benchmarkPow10Pos(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{6643610 0xc002bf39e0}))  {
// 	 := math_test.BenchmarkPow10Pos(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC math_test.BenchmarkPowFrac has: 
// func benchmarkPowFrac(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{6643469 0xc002bf3660}))  {
// 	 := math_test.BenchmarkPowFrac(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC math_test.BenchmarkPowInt has: 
// func benchmarkPowInt(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{6643358 0xc002bf3340}))  {
// 	 := math_test.BenchmarkPowInt(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC math_test.BenchmarkRemainder has: 
// func benchmarkRemainder(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{6644145 0xc002bf8660}))  {
// 	 := math_test.BenchmarkRemainder(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC math_test.BenchmarkRound has: 
// func benchmarkRound(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{6643899 0xc002bf80a0}))  {
// 	 := math_test.BenchmarkRound(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC math_test.BenchmarkRoundToEven has: 
// func benchmarkRoundToEven(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{6644020 0xc002bf8380}))  {
// 	 := math_test.BenchmarkRoundToEven(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC math_test.BenchmarkSignbit has: 
// func benchmarkSignbit(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{6644285 0xc002bf89c0}))  {
// 	 := math_test.BenchmarkSignbit(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC math_test.BenchmarkSin has: 
// func benchmarkSin(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{6644404 0xc002bf8ca0}))  {
// 	 := math_test.BenchmarkSin(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC math_test.BenchmarkSincos has: 
// func benchmarkSincos(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{6644512 0xc002bf8f80}))  {
// 	 := math_test.BenchmarkSincos(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC math_test.BenchmarkSinh has: 
// func benchmarkSinh(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{6644649 0xc002bf9320}))  {
// 	 := math_test.BenchmarkSinh(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC math_test.BenchmarkSqrtGoLatency has: 
// func benchmarkSqrtGoLatency(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{6645142 0xc002bf9fa0}))  {
// 	 := math_test.BenchmarkSqrtGoLatency(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC math_test.BenchmarkSqrtIndirect has: 
// func benchmarkSqrtIndirect(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{6644765 0xc002bf9600}))  {
// 	 := math_test.BenchmarkSqrtIndirect(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC math_test.BenchmarkSqrtIndirectLatency has: 
// func benchmarkSqrtIndirectLatency(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{6645018 0xc002bf9c80}))  {
// 	 := math_test.BenchmarkSqrtIndirectLatency(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC math_test.BenchmarkSqrtLatency has: 
// func benchmarkSqrtLatency(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{6644896 0xc002bf99a0}))  {
// 	 := math_test.BenchmarkSqrtLatency(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC math_test.BenchmarkSqrtPrime has: 
// func benchmarkSqrtPrime(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{6645645 0xc002c00620}))  {
// 	 := math_test.BenchmarkSqrtPrime(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC math_test.BenchmarkTan has: 
// func benchmarkTan(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{6645760 0xc002c00900}))  {
// 	 := math_test.BenchmarkTan(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC math_test.BenchmarkTanh has: 
// func benchmarkTanh(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{6645866 0xc002c00be0}))  {
// 	 := math_test.BenchmarkTanh(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC math_test.BenchmarkTrunc has: 
// func benchmarkTrunc(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{6645974 0xc002c00ec0}))  {
// 	 := math_test.BenchmarkTrunc(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC math_test.BenchmarkY0 has: 
// func benchmarkY0(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{6646080 0xc002c011a0}))  {
// 	 := math_test.BenchmarkY0(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC math_test.BenchmarkY1 has: 
// func benchmarkY1(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{6646184 0xc002c01480}))  {
// 	 := math_test.BenchmarkY1(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC math_test.BenchmarkYn has: 
// func benchmarkYn(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{6646288 0xc002c01760}))  {
// 	 := math_test.BenchmarkYn(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC math_test.ExampleAcos has: 
// func exampleAcos()  {
// 	 := math_test.ExampleAcos()
// 	...ABEND: TODO...
// }
// 
GO FUNC math_test.ExampleAcosh has: 
// func exampleAcosh()  {
// 	 := math_test.ExampleAcosh()
// 	...ABEND: TODO...
// }
// 
GO FUNC math_test.ExampleAsin has: 
// func exampleAsin()  {
// 	 := math_test.ExampleAsin()
// 	...ABEND: TODO...
// }
// 
GO FUNC math_test.ExampleAsinh has: 
// func exampleAsinh()  {
// 	 := math_test.ExampleAsinh()
// 	...ABEND: TODO...
// }
// 
GO FUNC math_test.ExampleAtan has: 
// func exampleAtan()  {
// 	 := math_test.ExampleAtan()
// 	...ABEND: TODO...
// }
// 
GO FUNC math_test.ExampleAtan2 has: 
// func exampleAtan2()  {
// 	 := math_test.ExampleAtan2()
// 	...ABEND: TODO...
// }
// 
GO FUNC math_test.ExampleAtanh has: 
// func exampleAtanh()  {
// 	 := math_test.ExampleAtanh()
// 	...ABEND: TODO...
// }
// 
GO FUNC math_test.ExampleCeil has: 
// func exampleCeil()  {
// 	 := math_test.ExampleCeil()
// 	...ABEND: TODO...
// }
// 
GO FUNC math_test.ExampleCos has: 
// func exampleCos()  {
// 	 := math_test.ExampleCos()
// 	...ABEND: TODO...
// }
// 
GO FUNC math_test.ExampleCosh has: 
// func exampleCosh()  {
// 	 := math_test.ExampleCosh()
// 	...ABEND: TODO...
// }
// 
GO FUNC math_test.ExampleFloor has: 
// func exampleFloor()  {
// 	 := math_test.ExampleFloor()
// 	...ABEND: TODO...
// }
// 
GO FUNC math_test.ExamplePow has: 
// func examplePow()  {
// 	 := math_test.ExamplePow()
// 	...ABEND: TODO...
// }
// 
GO FUNC math_test.ExamplePow10 has: 
// func examplePow10()  {
// 	 := math_test.ExamplePow10()
// 	...ABEND: TODO...
// }
// 
GO FUNC math_test.ExampleSin has: 
// func exampleSin()  {
// 	 := math_test.ExampleSin()
// 	...ABEND: TODO...
// }
// 
GO FUNC math_test.ExampleSincos has: 
// func exampleSincos()  {
// 	 := math_test.ExampleSincos()
// 	...ABEND: TODO...
// }
// 
GO FUNC math_test.ExampleSinh has: 
// func exampleSinh()  {
// 	 := math_test.ExampleSinh()
// 	...ABEND: TODO...
// }
// 
GO FUNC math_test.ExampleSqrt has: 
// func exampleSqrt()  {
// 	 := math_test.ExampleSqrt()
// 	...ABEND: TODO...
// }
// 
GO FUNC math_test.ExampleTan has: 
// func exampleTan()  {
// 	 := math_test.ExampleTan()
// 	...ABEND: TODO...
// }
// 
GO FUNC math_test.ExampleTanh has: 
// func exampleTanh()  {
// 	 := math_test.ExampleTanh()
// 	...ABEND: TODO...
// }
// 
GO FUNC math_test.TestAbs has: 
// func testAbs(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{6617647 0xc002b54880}))  {
// 	 := math_test.TestAbs(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC math_test.TestAcos has: 
// func testAcos(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{6609623 0xc00229f2e0}))  {
// 	 := math_test.TestAcos(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC math_test.TestAcosh has: 
// func testAcosh(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{6609969 0xc00229fb00}))  {
// 	 := math_test.TestAcosh(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC math_test.TestAsin has: 
// func testAsin(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{6610333 0xc002b24340}))  {
// 	 := math_test.TestAsin(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC math_test.TestAsinh has: 
// func testAsinh(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{6610683 0xc002b24b60}))  {
// 	 := math_test.TestAsinh(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC math_test.TestAtan has: 
// func testAtan(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{6611033 0xc002b25320}))  {
// 	 := math_test.TestAtan(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC math_test.TestAtan2 has: 
// func testAtan2(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{6611734 0xc002b38300}))  {
// 	 := math_test.TestAtan2(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC math_test.TestAtanh has: 
// func testAtanh(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{6611373 0xc002b25ae0}))  {
// 	 := math_test.TestAtanh(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC math_test.TestCbrt has: 
// func testCbrt(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{6612136 0xc002b38c20}))  {
// 	 := math_test.TestCbrt(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC math_test.TestCeil has: 
// func testCeil(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{6612475 0xc002b393e0}))  {
// 	 := math_test.TestCeil(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC math_test.TestCopysign has: 
// func testCopysign(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{6612808 0xc002b39b40}))  {
// 	 := math_test.TestCopysign(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC math_test.TestCos has: 
// func testCos(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{6613354 0xc002b3a6e0}))  {
// 	 := math_test.TestCos(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC math_test.TestCosh has: 
// func testCosh(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{6613682 0xc002b3aea0}))  {
// 	 := math_test.TestCosh(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC math_test.TestDim has: 
// func testDim(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{6617971 0xc002b54fe0}))  {
// 	 := math_test.TestDim(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC math_test.TestErf has: 
// func testErf(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{6614016 0xc002b3b660}))  {
// 	 := math_test.TestErf(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC math_test.TestErfc has: 
// func testErfc(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{6614354 0xc002b3be80}))  {
// 	 := math_test.TestErfc(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC math_test.TestErfcinv has: 
// func testErfcinv(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{6615361 0xc002b434c0}))  {
// 	 := math_test.TestErfcinv(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC math_test.TestErfinv has: 
// func testErfinv(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{6614705 0xc002b426a0}))  {
// 	 := math_test.TestErfinv(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC math_test.TestExp has: 
// func testExp(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{6616034 0xc002b482e0}))  {
// 	 := math_test.TestExp(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC math_test.TestExp2 has: 
// func testExp2(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{6617022 0xc002b499e0}))  {
// 	 := math_test.TestExp2(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC math_test.TestExpm1 has: 
// func testExpm1(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{6616497 0xc002b48e00}))  {
// 	 := math_test.TestExpm1(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC math_test.TestFloatMinMax has: 
// func testFloatMinMax(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{6637804 0xc002bca560}))  {
// 	 := math_test.TestFloatMinMax(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC math_test.TestFloor has: 
// func testFloor(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{6618558 0xc002b55d40}))  {
// 	 := math_test.TestFloor(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC math_test.TestFrexp has: 
// func testFrexp(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{6620702 0xc002b5ea80}))  {
// 	 := math_test.TestFrexp(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC math_test.TestGamma has: 
// func testGamma(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{6621377 0xc002b5fba0}))  {
// 	 := math_test.TestGamma(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC math_test.TestHypot has: 
// func testHypot(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{6621877 0xc002b687c0}))  {
// 	 := math_test.TestHypot(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC math_test.TestHypotGo has: 
// func testHypotGo(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{6622348 0xc002b69280}))  {
// 	 := math_test.TestHypotGo(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC math_test.TestIlogb has: 
// func testIlogb(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{6622825 0xc002b69d40}))  {
// 	 := math_test.TestIlogb(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC math_test.TestJ0 has: 
// func testJ0(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{6623378 0xc002b70860}))  {
// 	 := math_test.TestJ0(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC math_test.TestJ1 has: 
// func testJ1(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{6623698 0xc002b71040}))  {
// 	 := math_test.TestJ1(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC math_test.TestJn has: 
// func testJn(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{6624009 0xc002b71800}))  {
// 	 := math_test.TestJn(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC math_test.TestLargeCos has: 
// func testLargeCos(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{6636287 0xc002bc4980}))  {
// 	 := math_test.TestLargeCos(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC math_test.TestLargeSin has: 
// func testLargeSin(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{6636521 0xc002bc4ee0}))  {
// 	 := math_test.TestLargeSin(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC math_test.TestLargeSincos has: 
// func testLargeSincos(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{6636758 0xc002bc5440}))  {
// 	 := math_test.TestLargeSincos(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC math_test.TestLargeTan has: 
// func testLargeTan(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{6637053 0xc002bc5b60}))  {
// 	 := math_test.TestLargeTan(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC math_test.TestLdexp has: 
// func testLdexp(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{6624561 0xc002b72640}))  {
// 	 := math_test.TestLdexp(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC math_test.TestLgamma has: 
// func testLgamma(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{6625604 0xc002b7e040}))  {
// 	 := math_test.TestLgamma(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC math_test.TestLog has: 
// func testLog(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{6626066 0xc002b7ec00}))  {
// 	 := math_test.TestLog(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC math_test.TestLog10 has: 
// func testLog10(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{6626973 0xc002b82020}))  {
// 	 := math_test.TestLog10(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC math_test.TestLog1p has: 
// func testLog1p(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{6627412 0xc002b829e0}))  {
// 	 := math_test.TestLog1p(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC math_test.TestLog2 has: 
// func testLog2(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{6627865 0xc002b833e0}))  {
// 	 := math_test.TestLog2(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC math_test.TestLogb has: 
// func testLogb(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{6626478 0xc002b7f560}))  {
// 	 := math_test.TestLogb(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC math_test.TestMax has: 
// func testMax(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{6618892 0xc002b5a4a0}))  {
// 	 := math_test.TestMax(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC math_test.TestMin has: 
// func testMin(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{6619487 0xc002b5b240}))  {
// 	 := math_test.TestMin(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC math_test.TestMod has: 
// func testMod(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{6620086 0xc002b5bfe0}))  {
// 	 := math_test.TestMod(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC math_test.TestModf has: 
// func testModf(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{6628441 0xc002b96100}))  {
// 	 := math_test.TestModf(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC math_test.TestNaN has: 
// func testNaN(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{6609411 0xc00229ef40}))  {
// 	 := math_test.TestNaN(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC math_test.TestNextafter32 has: 
// func testNextafter32(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{6628909 0xc002b96c80}))  {
// 	 := math_test.TestNextafter32(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC math_test.TestNextafter64 has: 
// func testNextafter64(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{6629428 0xc002b97600}))  {
// 	 := math_test.TestNextafter64(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC math_test.TestPow has: 
// func testPow(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{6629897 0xc002b97ee0}))  {
// 	 := math_test.TestPow(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC math_test.TestPow10 has: 
// func testPow10(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{6630270 0xc002baa800}))  {
// 	 := math_test.TestPow10(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC math_test.TestRemainder has: 
// func testRemainder(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{6630477 0xc002baac40}))  {
// 	 := math_test.TestRemainder(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC math_test.TestRound has: 
// func testRound(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{6631135 0xc002bab700}))  {
// 	 := math_test.TestRound(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC math_test.TestRoundToEven has: 
// func testRoundToEven(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{6631504 0xc002babf40}))  {
// 	 := math_test.TestRoundToEven(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC math_test.TestSignbit has: 
// func testSignbit(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{6631913 0xc002bb2780}))  {
// 	 := math_test.TestSignbit(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC math_test.TestSin has: 
// func testSin(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{6632267 0xc002bb2e80}))  {
// 	 := math_test.TestSin(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC math_test.TestSincos has: 
// func testSincos(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{6632597 0xc002bb3640}))  {
// 	 := math_test.TestSincos(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC math_test.TestSinh has: 
// func testSinh(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{6632822 0xc002bb3be0}))  {
// 	 := math_test.TestSinh(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC math_test.TestSqrt has: 
// func testSqrt(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{6633157 0xc002bb63a0}))  {
// 	 := math_test.TestSqrt(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC math_test.TestTan has: 
// func testTan(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{6633732 0xc002bb7060}))  {
// 	 := math_test.TestTan(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC math_test.TestTanh has: 
// func testTanh(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{6634090 0xc002bb7860}))  {
// 	 := math_test.TestTanh(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC math_test.TestTrunc has: 
// func testTrunc(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{6634430 0xc002bc0020}))  {
// 	 := math_test.TestTrunc(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC math_test.TestY0 has: 
// func testY0(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{6634763 0xc002bc0780}))  {
// 	 := math_test.TestY0(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC math_test.TestY1 has: 
// func testY1(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{6635084 0xc002bc0fa0}))  {
// 	 := math_test.TestY1(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC math_test.TestYn has: 
// func testYn(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{6635414 0xc002bc17e0}))  {
// 	 := math_test.TestYn(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC md5.BenchmarkHash1K has: 
// func benchmarkHash1K(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{1294633 0xc000b89600}))  {
// 	 := md5.BenchmarkHash1K(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC md5.BenchmarkHash1KUnaligned has: 
// func benchmarkHash1KUnaligned(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{1294864 0xc000b89a80}))  {
// 	 := md5.BenchmarkHash1KUnaligned(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC md5.BenchmarkHash8Bytes has: 
// func benchmarkHash8Bytes(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{1294565 0xc000b89480}))  {
// 	 := md5.BenchmarkHash8Bytes(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC md5.BenchmarkHash8BytesUnaligned has: 
// func benchmarkHash8BytesUnaligned(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{1294788 0xc000b89900}))  {
// 	 := md5.BenchmarkHash8BytesUnaligned(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC md5.BenchmarkHash8K has: 
// func benchmarkHash8K(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{1294704 0xc000b89780}))  {
// 	 := md5.BenchmarkHash8K(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC md5.BenchmarkHash8KUnaligned has: 
// func benchmarkHash8KUnaligned(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{1294943 0xc000b89c00}))  {
// 	 := md5.BenchmarkHash8KUnaligned(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC md5.TestBlockGeneric has: 
// func testBlockGeneric(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{1293863 0xc000b884e0}))  {
// 	 := md5.TestBlockGeneric(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC md5.TestGolden has: 
// func testGolden(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{1291635 0xc000b7f380}))  {
// 	 := md5.TestGolden(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC md5.TestGoldenMarshal has: 
// func testGoldenMarshal(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{1292366 0xc000b867c0}))  {
// 	 := md5.TestGoldenMarshal(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC md5.TestLarge has: 
// func testLarge(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{1293140 0xc000b87960}))  {
// 	 := md5.TestLarge(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC md5_test.ExampleNew has: 
// func exampleNew()  {
// 	 := md5_test.ExampleNew()
// 	...ABEND: TODO...
// }
// 
GO FUNC md5_test.ExampleNew_file has: 
// func exampleNew_file()  {
// 	 := md5_test.ExampleNew_file()
// 	...ABEND: TODO...
// }
// 
GO FUNC md5_test.ExampleSum has: 
// func exampleSum()  {
// 	 := md5_test.ExampleSum()
// 	...ABEND: TODO...
// }
// 
GO FUNC mime.BenchmarkExtensionsByType has: 
// func benchmarkExtensionsByType(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{7319204 0xc00365a660}))  {
// 	 := mime.BenchmarkExtensionsByType(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC mime.BenchmarkQDecodeHeader has: 
// func benchmarkQDecodeHeader(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{7347165 0xc0036cc3e0}))  {
// 	 := mime.BenchmarkQDecodeHeader(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC mime.BenchmarkQDecodeWord has: 
// func benchmarkQDecodeWord(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{7347009 0xc0036cc100}))  {
// 	 := mime.BenchmarkQDecodeWord(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC mime.BenchmarkQEncodeWord has: 
// func benchmarkQEncodeWord(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{7346886 0xc0036c9e60}))  {
// 	 := mime.BenchmarkQEncodeWord(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC mime.BenchmarkTypeByExtension has: 
// func benchmarkTypeByExtension(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{7318914 0xc00365a0a0}))  {
// 	 := mime.BenchmarkTypeByExtension(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC mime.TestCharsetDecoder has: 
// func testCharsetDecoder(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{7345161 0xc0036c8200}))  {
// 	 := mime.TestCharsetDecoder(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC mime.TestCharsetDecoderError has: 
// func testCharsetDecoderError(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{7346576 0xc0036c98e0}))  {
// 	 := mime.TestCharsetDecoderError(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC mime.TestConsumeMediaParam has: 
// func testConsumeMediaParam(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{7348880 0xc0036cdc00}))  {
// 	 := mime.TestConsumeMediaParam(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC mime.TestConsumeToken has: 
// func testConsumeToken(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{7347529 0xc0036cc820}))  {
// 	 := mime.TestConsumeToken(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC mime.TestConsumeValue has: 
// func testConsumeValue(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{7348113 0xc0036cd140}))  {
// 	 := mime.TestConsumeValue(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC mime.TestDecodeHeader has: 
// func testDecodeHeader(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{7343701 0xc0036c3080}))  {
// 	 := mime.TestDecodeHeader(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC mime.TestDecodeWord has: 
// func testDecodeWord(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{7342586 0xc0036bbfa0}))  {
// 	 := mime.TestDecodeWord(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC mime.TestEncodeWord has: 
// func testEncodeWord(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{7340394 0xc0036b18c0}))  {
// 	 := mime.TestEncodeWord(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC mime.TestEncodedWordLength has: 
// func testEncodedWordLength(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{7341864 0xc0036bb260}))  {
// 	 := mime.TestEncodedWordLength(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC mime.TestExtensionsByType has: 
// func testExtensionsByType(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{7317655 0xc0036509e0}))  {
// 	 := mime.TestExtensionsByType(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC mime.TestFormatMediaType has: 
// func testFormatMediaType(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{7363417 0xc0036e8d40}))  {
// 	 := mime.TestFormatMediaType(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC mime.TestLookupMallocs has: 
// func testLookupMallocs(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{7318712 0xc003651d20}))  {
// 	 := mime.TestLookupMallocs(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC mime.TestParseMediaType has: 
// func testParseMediaType(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{7350157 0xc0036d6ce0}))  {
// 	 := mime.TestParseMediaType(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC mime.TestParseMediaTypeBogus has: 
// func testParseMediaTypeBogus(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{7361467 0xc0036e52c0}))  {
// 	 := mime.TestParseMediaTypeBogus(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC mime.TestTypeByExtension has: 
// func testTypeByExtension(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{7315854 0xc00364b4c0}))  {
// 	 := mime.TestTypeByExtension(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC mime.TestTypeByExtensionCase has: 
// func testTypeByExtensionCase(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{7317022 0xc0036501a0}))  {
// 	 := mime.TestTypeByExtensionCase(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC mime.TestTypeByExtension_LocalData has: 
// func testTypeByExtension_LocalData(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{7316451 0xc00364b9e0}))  {
// 	 := mime.TestTypeByExtension_LocalData(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC mime_test.ExampleWordDecoder_Decode has: 
// func exampleWordDecoder_Decode()  {
// 	 := mime_test.ExampleWordDecoder_Decode()
// 	...ABEND: TODO...
// }
// 
GO FUNC mime_test.ExampleWordDecoder_DecodeHeader has: 
// func exampleWordDecoder_DecodeHeader()  {
// 	 := mime_test.ExampleWordDecoder_DecodeHeader()
// 	...ABEND: TODO...
// }
// 
GO FUNC mime_test.ExampleWordEncoder_Encode has: 
// func exampleWordEncoder_Encode()  {
// 	 := mime_test.ExampleWordEncoder_Encode()
// 	...ABEND: TODO...
// }
// 
GO FUNC multipart.TestBoundaryLine has: 
// func testBoundaryLine(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{7384269 0xc003748bc0}))  {
// 	 := multipart.TestBoundaryLine(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC multipart.TestLineContinuation has: 
// func testLineContinuation(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{7393274 0xc003777a80}))  {
// 	 := multipart.TestLineContinuation(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC multipart.TestLineLimit has: 
// func testLineLimit(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{7390692 0xc00376f260}))  {
// 	 := multipart.TestLineLimit(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC multipart.TestMultipart has: 
// func testMultipart(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{7386572 0xc003760ba0}))  {
// 	 := multipart.TestMultipart(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC multipart.TestMultipartOnlyNewlines has: 
// func testMultipartOnlyNewlines(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{7386719 0xc003760e00}))  {
// 	 := multipart.TestMultipartOnlyNewlines(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC multipart.TestMultipartSlowInput has: 
// func testMultipartSlowInput(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{7386860 0xc003761060}))  {
// 	 := multipart.TestMultipartSlowInput(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC multipart.TestMultipartStreamReadahead has: 
// func testMultipartStreamReadahead(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{7392173 0xc0037769c0}))  {
// 	 := multipart.TestMultipartStreamReadahead(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC multipart.TestMultipartTruncated has: 
// func testMultipartTruncated(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{7391048 0xc00376f880}))  {
// 	 := multipart.TestMultipartTruncated(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC multipart.TestNameAccessors has: 
// func testNameAccessors(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{7385171 0xc0037499e0}))  {
// 	 := multipart.TestNameAccessors(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC multipart.TestNested has: 
// func testNested(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{7396156 0xc00377ae60}))  {
// 	 := multipart.TestNested(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC multipart.TestNoBoundary has: 
// func testNoBoundary(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{7411839 0xc00379dee0}))  {
// 	 := multipart.TestNoBoundary(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC multipart.TestParse has: 
// func testParse(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{7409173 0xc003794760}))  {
// 	 := multipart.TestParse(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC multipart.TestParseAllSizes has: 
// func testParseAllSizes(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{7410553 0xc00379c380}))  {
// 	 := multipart.TestParseAllSizes(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC multipart.TestQuotedPrintableEncoding has: 
// func testQuotedPrintableEncoding(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{7394450 0xc00377a400}))  {
// 	 := multipart.TestQuotedPrintableEncoding(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC multipart.TestReadForm has: 
// func testReadForm(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{7366222 0xc0036f7400}))  {
// 	 := multipart.TestReadForm(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC multipart.TestReadFormWithNamelessFile has: 
// func testReadFormWithNamelessFile(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{7367005 0xc0037085c0}))  {
// 	 := multipart.TestReadFormWithNamelessFile(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC multipart.TestReadFormWithTextContentType has: 
// func testReadFormWithTextContentType(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{7367389 0xc003708da0}))  {
// 	 := multipart.TestReadFormWithTextContentType(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC multipart.TestReadForm_NoReadAfterEOF has: 
// func testReadForm_NoReadAfterEOF(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{7369289 0xc00370e560}))  {
// 	 := multipart.TestReadForm_NoReadAfterEOF(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC multipart.TestReadForm_NonFileMaxMemory has: 
// func testReadForm_NonFileMaxMemory(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{7370366 0xc00370f320}))  {
// 	 := multipart.TestReadForm_NonFileMaxMemory(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC multipart.TestSortedHeader has: 
// func testSortedHeader(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{7374407 0xc003725a80}))  {
// 	 := multipart.TestSortedHeader(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC multipart.TestVariousTextLineEndings has: 
// func testVariousTextLineEndings(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{7389277 0xc00376dbe0}))  {
// 	 := multipart.TestVariousTextLineEndings(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC multipart.TestWriter has: 
// func testWriter(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{7371568 0xc003716520}))  {
// 	 := multipart.TestWriter(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC multipart.TestWriterBoundaryGoroutines has: 
// func testWriterBoundaryGoroutines(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{7373992 0xc003725620}))  {
// 	 := multipart.TestWriterBoundaryGoroutines(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC multipart.TestWriterSetBoundary has: 
// func testWriterSetBoundary(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{7373128 0xc003724400}))  {
// 	 := multipart.TestWriterSetBoundary(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC multipart_test.ExampleNewReader has: 
// func exampleNewReader()  {
// 	 := multipart_test.ExampleNewReader()
// 	...ABEND: TODO...
// }
// 
GO FUNC net.BenchmarkDNSName has: 
// func benchmarkDNSName(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{7646666 0xc001df2d00}))  {
// 	 := net.BenchmarkDNSName(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC net.BenchmarkGoLookupIP has: 
// func benchmarkGoLookupIP(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{7613803 0xc001382f80}))  {
// 	 := net.BenchmarkGoLookupIP(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC net.BenchmarkGoLookupIPNoSuchHost has: 
// func benchmarkGoLookupIPNoSuchHost(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{7614030 0xc0013833a0}))  {
// 	 := net.BenchmarkGoLookupIPNoSuchHost(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC net.BenchmarkGoLookupIPWithBrokenNameServer has: 
// func benchmarkGoLookupIPWithBrokenNameServer(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{7614268 0xc001383820}))  {
// 	 := net.BenchmarkGoLookupIPWithBrokenNameServer(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC net.BenchmarkIPEqual has: 
// func benchmarkIPEqual(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{7904664 0xc001ae9560}))  {
// 	 := net.BenchmarkIPEqual(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC net.BenchmarkIPMaskString has: 
// func benchmarkIPMaskString(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{7888568 0xc002779880}))  {
// 	 := net.BenchmarkIPMaskString(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC net.BenchmarkIPString has: 
// func benchmarkIPString(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{7886789 0xc002775360}))  {
// 	 := net.BenchmarkIPString(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC net.BenchmarkInterfaceAddrs has: 
// func benchmarkInterfaceAddrs(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{7666019 0xc002117de0}))  {
// 	 := net.BenchmarkInterfaceAddrs(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC net.BenchmarkInterfaceByIndex has: 
// func benchmarkInterfaceByIndex(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{7665440 0xc002116f20}))  {
// 	 := net.BenchmarkInterfaceByIndex(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC net.BenchmarkInterfaceByName has: 
// func benchmarkInterfaceByName(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{7665731 0xc002117440}))  {
// 	 := net.BenchmarkInterfaceByName(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC net.BenchmarkInterfaces has: 
// func benchmarkInterfaces(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{7665252 0xc002116b60}))  {
// 	 := net.BenchmarkInterfaces(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC net.BenchmarkInterfacesAndAddrs has: 
// func benchmarkInterfacesAndAddrs(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{7666213 0xc0021201a0}))  {
// 	 := net.BenchmarkInterfacesAndAddrs(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC net.BenchmarkInterfacesAndMulticastAddrs has: 
// func benchmarkInterfacesAndMulticastAddrs(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{7666500 0xc002121d80}))  {
// 	 := net.BenchmarkInterfacesAndMulticastAddrs(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC net.BenchmarkParseIP has: 
// func benchmarkParseIP(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{7883782 0xc002569640}))  {
// 	 := net.BenchmarkParseIP(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC net.BenchmarkTCP4ConcurrentReadWrite has: 
// func benchmarkTCP4ConcurrentReadWrite(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{7866441 0xc003457240}))  {
// 	 := net.BenchmarkTCP4ConcurrentReadWrite(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC net.BenchmarkTCP4OneShot has: 
// func benchmarkTCP4OneShot(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{7863555 0xc003366580}))  {
// 	 := net.BenchmarkTCP4OneShot(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC net.BenchmarkTCP4OneShotTimeout has: 
// func benchmarkTCP4OneShotTimeout(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{7863653 0xc003366780}))  {
// 	 := net.BenchmarkTCP4OneShotTimeout(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC net.BenchmarkTCP4Persistent has: 
// func benchmarkTCP4Persistent(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{7863746 0xc003366920}))  {
// 	 := net.BenchmarkTCP4Persistent(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC net.BenchmarkTCP4PersistentTimeout has: 
// func benchmarkTCP4PersistentTimeout(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{7863846 0xc003366ac0}))  {
// 	 := net.BenchmarkTCP4PersistentTimeout(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC net.BenchmarkTCP6ConcurrentReadWrite has: 
// func benchmarkTCP6ConcurrentReadWrite(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{7866549 0xc0034573a0}))  {
// 	 := net.BenchmarkTCP6ConcurrentReadWrite(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC net.BenchmarkTCP6OneShot has: 
// func benchmarkTCP6OneShot(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{7863935 0xc0033674a0}))  {
// 	 := net.BenchmarkTCP6OneShot(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC net.BenchmarkTCP6OneShotTimeout has: 
// func benchmarkTCP6OneShotTimeout(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{7864088 0xc003370f40}))  {
// 	 := net.BenchmarkTCP6OneShotTimeout(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC net.BenchmarkTCP6Persistent has: 
// func benchmarkTCP6Persistent(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{7864236 0xc003383980}))  {
// 	 := net.BenchmarkTCP6Persistent(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC net.BenchmarkTCP6PersistentTimeout has: 
// func benchmarkTCP6PersistentTimeout(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{7864391 0xc0033a6940}))  {
// 	 := net.BenchmarkTCP6PersistentTimeout(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC net.BenchmarkTCPReadFrom has: 
// func benchmarkTCPReadFrom(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{7769715 0xc00287a0e0}))  {
// 	 := net.BenchmarkTCPReadFrom(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC net.BenchmarkUDP6LinkLocalUnicast has: 
// func benchmarkUDP6LinkLocalUnicast(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{7547747 0xc000e05200}))  {
// 	 := net.BenchmarkUDP6LinkLocalUnicast(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC net.TestAcceptError has: 
// func testAcceptError(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{8105739 0xc00262f360}))  {
// 	 := net.TestAcceptError(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC net.TestAcceptIgnoreAbortedConnRequest has: 
// func testAcceptIgnoreAbortedConnRequest(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{7745140 0xc00138cd40}))  {
// 	 := net.TestAcceptIgnoreAbortedConnRequest(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC net.TestAcceptTimeout has: 
// func testAcceptTimeout(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{7527594 0xc0012e29c0}))  {
// 	 := net.TestAcceptTimeout(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC net.TestAcceptTimeoutMustNotReturn has: 
// func testAcceptTimeoutMustNotReturn(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{7529667 0xc001e5e9e0}))  {
// 	 := net.TestAcceptTimeoutMustNotReturn(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC net.TestAcceptTimeoutMustReturn has: 
// func testAcceptTimeoutMustReturn(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{7528744 0xc001fe37e0}))  {
// 	 := net.TestAcceptTimeoutMustReturn(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC net.TestAddrList has: 
// func testAddrList(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{7734602 0xc00268a100}))  {
// 	 := net.TestAddrList(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC net.TestAddrListPartition has: 
// func testAddrListPartition(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{7735631 0xc00268bd20}))  {
// 	 := net.TestAddrListPartition(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC net.TestAvoidDNSName has: 
// func testAvoidDNSName(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{7599290 0xc000f09420}))  {
// 	 := net.TestAvoidDNSName(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC net.TestBuffers_WriteTo has: 
// func testBuffers_WriteTo(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{8141596 0xc0030c3580}))  {
// 	 := net.TestBuffers_WriteTo(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC net.TestBuffers_consume has: 
// func testBuffers_consume(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{8140503 0xc0030c21a0}))  {
// 	 := net.TestBuffers_consume(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC net.TestBuffers_read has: 
// func testBuffers_read(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{8140036 0xc002ebf9e0}))  {
// 	 := net.TestBuffers_read(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC net.TestCIDRMask has: 
// func testCIDRMask(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{7894665 0xc002905900}))  {
// 	 := net.TestCIDRMask(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC net.TestCancelAfterDial has: 
// func testCancelAfterDial(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{7856542 0xc00327d9c0}))  {
// 	 := net.TestCancelAfterDial(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC net.TestCgoLookupIP has: 
// func testCgoLookupIP(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{8045483 0xc00333b6c0}))  {
// 	 := net.TestCgoLookupIP(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC net.TestCgoLookupIPWithCancel has: 
// func testCgoLookupIPWithCancel(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{8045734 0xc00333bb80}))  {
// 	 := net.TestCgoLookupIPWithCancel(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC net.TestCgoLookupPTR has: 
// func testCgoLookupPTR(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{8046572 0xc00338ca60}))  {
// 	 := net.TestCgoLookupPTR(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC net.TestCgoLookupPTRWithCancel has: 
// func testCgoLookupPTRWithCancel(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{8046826 0xc00338cec0}))  {
// 	 := net.TestCgoLookupPTRWithCancel(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC net.TestCgoLookupPort has: 
// func testCgoLookupPort(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{8046021 0xc00338c0a0}))  {
// 	 := net.TestCgoLookupPort(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC net.TestCgoLookupPortWithCancel has: 
// func testCgoLookupPortWithCancel(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{8046280 0xc00338c520}))  {
// 	 := net.TestCgoLookupPortWithCancel(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC net.TestCloseError has: 
// func testCloseError(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{8103733 0xc001bf6f40}))  {
// 	 := net.TestCloseError(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC net.TestCloseRead has: 
// func testCloseRead(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{7738725 0xc002706120}))  {
// 	 := net.TestCloseRead(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC net.TestCloseUnblocksRead has: 
// func testCloseUnblocksRead(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{7749574 0xc00139b700}))  {
// 	 := net.TestCloseUnblocksRead(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC net.TestCloseWrite has: 
// func testCloseWrite(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{7739761 0xc002707520}))  {
// 	 := net.TestCloseWrite(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC net.TestClosingListener has: 
// func testClosingListener(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{7826768 0xc002ee5200}))  {
// 	 := net.TestClosingListener(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC net.TestConcurrentPreferGoResolversDial has: 
// func testConcurrentPreferGoResolversDial(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{7722046 0xc0017e9280}))  {
// 	 := net.TestConcurrentPreferGoResolversDial(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC net.TestConfHostLookupOrder has: 
// func testConfHostLookupOrder(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{7647734 0xc001ef8000}))  {
// 	 := net.TestConfHostLookupOrder(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC net.TestConnAndListener has: 
// func testConnAndListener(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{8124076 0xc002c1f800}))  {
// 	 := net.TestConnAndListener(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC net.TestConnAndPacketConn has: 
// func testConnAndPacketConn(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{7997308 0xc002da36e0}))  {
// 	 := net.TestConnAndPacketConn(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC net.TestConnClose has: 
// func testConnClose(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{7741541 0xc001858f00}))  {
// 	 := net.TestConnClose(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC net.TestCopyPipeIntoTCP has: 
// func testCopyPipeIntoTCP(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{7879521 0xc0024a67a0}))  {
// 	 := net.TestCopyPipeIntoTCP(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC net.TestDNSDefaultSearch has: 
// func testDNSDefaultSearch(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{7782597 0xc0026c95c0}))  {
// 	 := net.TestDNSDefaultSearch(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC net.TestDNSDialTCP has: 
// func testDNSDialTCP(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{7633909 0xc0019fb1a0}))  {
// 	 := net.TestDNSDialTCP(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC net.TestDNSFlood has: 
// func testDNSFlood(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{7709400 0xc002382a20}))  {
// 	 := net.TestDNSFlood(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC net.TestDNSGoroutineRace has: 
// func testDNSGoroutineRace(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{7629807 0xc00198a4e0}))  {
// 	 := net.TestDNSGoroutineRace(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC net.TestDNSName has: 
// func testDNSName(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{7646422 0xc001ddf2e0}))  {
// 	 := net.TestDNSName(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC net.TestDNSNameLength has: 
// func testDNSNameLength(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{7783017 0xc0026c9d00}))  {
// 	 := net.TestDNSNameLength(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC net.TestDNSReadConfig has: 
// func testDNSReadConfig(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{7781049 0xc0026b5be0}))  {
// 	 := net.TestDNSReadConfig(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC net.TestDNSReadMissingFile has: 
// func testDNSReadMissingFile(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{7781514 0xc0026c84c0}))  {
// 	 := net.TestDNSReadMissingFile(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC net.TestDNSSRVUniformity has: 
// func testDNSSRVUniformity(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{7672030 0xc00132f5a0}))  {
// 	 := net.TestDNSSRVUniformity(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC net.TestDNSTransportFallback has: 
// func testDNSTransportFallback(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{7596473 0xc000db05e0}))  {
// 	 := net.TestDNSTransportFallback(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC net.TestDialAddrError has: 
// func testDialAddrError(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{8094934 0xc0014aa6a0}))  {
// 	 := net.TestDialAddrError(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC net.TestDialCancel has: 
// func testDialCancel(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{7854980 0xc003270360}))  {
// 	 := net.TestDialCancel(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC net.TestDialContextCancelRace has: 
// func testDialContextCancelRace(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{8032720 0xc00320ec20}))  {
// 	 := net.TestDialContextCancelRace(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC net.TestDialError has: 
// func testDialError(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{8092718 0xc002637de0}))  {
// 	 := net.TestDialError(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC net.TestDialGoogle has: 
// func testDialGoogle(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{8126870 0xc002c70920}))  {
// 	 := net.TestDialGoogle(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC net.TestDialListenIPArgs has: 
// func testDialListenIPArgs(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{7497798 0xc00245fec0}))  {
// 	 := net.TestDialListenIPArgs(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC net.TestDialListenerAddr has: 
// func testDialListenerAddr(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{7858470 0xc0032cc980}))  {
// 	 := net.TestDialListenerAddr(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC net.TestDialLocal has: 
// func testDialLocal(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{7835051 0xc003014e40}))  {
// 	 := net.TestDialLocal(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC net.TestDialParallel has: 
// func testDialParallel(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{7838400 0xc003051bc0}))  {
// 	 := net.TestDialParallel(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC net.TestDialParallelSpuriousConnection has: 
// func testDialParallelSpuriousConnection(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{7845246 0xc003168880}))  {
// 	 := net.TestDialParallelSpuriousConnection(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC net.TestDialTimeout has: 
// func testDialTimeout(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{7524796 0xc00192b2e0}))  {
// 	 := net.TestDialTimeout(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC net.TestDialTimeoutMaxDuration has: 
// func testDialTimeoutMaxDuration(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{7526431 0xc000d826e0}))  {
// 	 := net.TestDialTimeoutMaxDuration(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC net.TestDialerControl has: 
// func testDialerControl(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{7858766 0xc0032ccfe0}))  {
// 	 := net.TestDialerControl(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC net.TestDialerDualStack has: 
// func testDialerDualStack(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{7852875 0xc00322ba00}))  {
// 	 := net.TestDialerDualStack(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC net.TestDialerDualStackFDLeak has: 
// func testDialerDualStackFDLeak(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{7835369 0xc0030235c0}))  {
// 	 := net.TestDialerDualStackFDLeak(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC net.TestDialerFallbackDelay has: 
// func testDialerFallbackDelay(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{7843510 0xc003154580}))  {
// 	 := net.TestDialerFallbackDelay(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC net.TestDialerKeepAlive has: 
// func testDialerKeepAlive(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{7854184 0xc0032574a0}))  {
// 	 := net.TestDialerKeepAlive(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC net.TestDialerLocalAddr has: 
// func testDialerLocalAddr(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{7848629 0xc0031b8cc0}))  {
// 	 := net.TestDialerLocalAddr(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC net.TestDialerPartialDeadline has: 
// func testDialerPartialDeadline(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{7847257 0xc003194720}))  {
// 	 := net.TestDialerPartialDeadline(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC net.TestDtoi has: 
// func testDtoi(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{7697603 0xc002534cc0}))  {
// 	 := net.TestDtoi(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC net.TestDualStackTCPListener has: 
// func testDualStackTCPListener(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{7813683 0xc002e32700}))  {
// 	 := net.TestDualStackTCPListener(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC net.TestDualStackUDPListener has: 
// func testDualStackUDPListener(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{7816334 0xc002e3f3c0}))  {
// 	 := net.TestDualStackUDPListener(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC net.TestEndlessWrite has: 
// func testEndlessWrite(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{7801361 0xc002ceb180}))  {
// 	 := net.TestEndlessWrite(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC net.TestErrorForOriginalNameWhenSearching has: 
// func testErrorForOriginalNameWhenSearching(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{7610956 0xc000e8e880}))  {
// 	 := net.TestErrorForOriginalNameWhenSearching(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC net.TestFileCloseRace has: 
// func testFileCloseRace(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{7989658 0xc002c537a0}))  {
// 	 := net.TestFileCloseRace(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC net.TestFileConn has: 
// func testFileConn(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{7984361 0xc002bf10e0}))  {
// 	 := net.TestFileConn(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC net.TestFileError has: 
// func testFileError(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{8107463 0xc002686f60}))  {
// 	 := net.TestFileError(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC net.TestFileListener has: 
// func testFileListener(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{7986498 0xc002c15ac0}))  {
// 	 := net.TestFileListener(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC net.TestFilePacketConn has: 
// func testFilePacketConn(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{7988278 0xc002c27cc0}))  {
// 	 := net.TestFilePacketConn(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC net.TestGoDebugString has: 
// func testGoDebugString(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{7696912 0xc00250c660}))  {
// 	 := net.TestGoDebugString(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC net.TestGoLookupIPOrderFallbackToFile has: 
// func testGoLookupIPOrderFallbackToFile(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{7609043 0xc000d61ec0}))  {
// 	 := net.TestGoLookupIPOrderFallbackToFile(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC net.TestGoLookupIPWithResolverConfig has: 
// func testGoLookupIPWithResolverConfig(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{7606373 0xc0015c7b20}))  {
// 	 := net.TestGoLookupIPWithResolverConfig(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC net.TestHostCacheModification has: 
// func testHostCacheModification(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{7568135 0xc0014db020}))  {
// 	 := net.TestHostCacheModification(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC net.TestIPAddrFamily has: 
// func testIPAddrFamily(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{7901399 0xc002a62500}))  {
// 	 := net.TestIPAddrFamily(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC net.TestIPAddrScope has: 
// func testIPAddrScope(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{7904302 0xc001ae8c60}))  {
// 	 := net.TestIPAddrScope(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC net.TestIPConnLocalName has: 
// func testIPConnLocalName(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{7497074 0xc00245e600}))  {
// 	 := net.TestIPConnLocalName(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC net.TestIPConnRemoteName has: 
// func testIPConnRemoteName(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{7497418 0xc00245f5e0}))  {
// 	 := net.TestIPConnRemoteName(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC net.TestIPConnSpecificMethods has: 
// func testIPConnSpecificMethods(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{8002955 0xc002e72e20}))  {
// 	 := net.TestIPConnSpecificMethods(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC net.TestIPMask has: 
// func testIPMask(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{7887824 0xc002778a20}))  {
// 	 := net.TestIPMask(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC net.TestIPMaskString has: 
// func testIPMaskString(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{7888364 0xc002779440}))  {
// 	 := net.TestIPMaskString(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC net.TestIPNetContains has: 
// func testIPNetContains(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{7893186 0xc0028654a0}))  {
// 	 := net.TestIPNetContains(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC net.TestIPNetString has: 
// func testIPNetString(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{7893847 0xc002904240}))  {
// 	 := net.TestIPNetString(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC net.TestIPString has: 
// func testIPString(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{7886382 0xc002774980}))  {
// 	 := net.TestIPString(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC net.TestIPv4MulticastListener has: 
// func testIPv4MulticastListener(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{7822156 0xc002eb6ba0}))  {
// 	 := net.TestIPv4MulticastListener(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC net.TestIPv6LinkLocalUnicastTCP has: 
// func testIPv6LinkLocalUnicastTCP(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{7872011 0xc001f159a0}))  {
// 	 := net.TestIPv6LinkLocalUnicastTCP(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC net.TestIPv6LinkLocalUnicastUDP has: 
// func testIPv6LinkLocalUnicastUDP(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{7554950 0xc00173a600}))  {
// 	 := net.TestIPv6LinkLocalUnicastUDP(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC net.TestIPv6MulticastListener has: 
// func testIPv6MulticastListener(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{7824434 0xc002edc9c0}))  {
// 	 := net.TestIPv6MulticastListener(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC net.TestIgnoreDNSForgeries has: 
// func testIgnoreDNSForgeries(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{7616677 0xc001485a60}))  {
// 	 := net.TestIgnoreDNSForgeries(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC net.TestIgnoreLameReferrals has: 
// func testIgnoreLameReferrals(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{7612413 0xc000ea1640}))  {
// 	 := net.TestIgnoreLameReferrals(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC net.TestInterfaceAddrs has: 
// func testInterfaceAddrs(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{7658699 0xc001fea460}))  {
// 	 := net.TestInterfaceAddrs(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC net.TestInterfaceArrivalAndDeparture has: 
// func testInterfaceArrivalAndDeparture(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{8085566 0xc0027c3000}))  {
// 	 := net.TestInterfaceArrivalAndDeparture(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC net.TestInterfaceMulticastAddrs has: 
// func testInterfaceMulticastAddrs(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{7659618 0xc00200a2c0}))  {
// 	 := net.TestInterfaceMulticastAddrs(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC net.TestInterfaceUnicastAddrs has: 
// func testInterfaceUnicastAddrs(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{7659077 0xc001febf00}))  {
// 	 := net.TestInterfaceUnicastAddrs(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC net.TestInterfaces has: 
// func testInterfaces(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{7657987 0xc001fe7100}))  {
// 	 := net.TestInterfaces(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC net.TestIssue8434 has: 
// func testIssue8434(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{7630991 0xc00198b860}))  {
// 	 := net.TestIssue8434(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC net.TestJoinHostPort has: 
// func testJoinHostPort(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{7899509 0xc002a3c8c0}))  {
// 	 := net.TestJoinHostPort(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC net.TestListenCloseListen has: 
// func testListenCloseListen(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{7744449 0xc00138c0a0}))  {
// 	 := net.TestListenCloseListen(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC net.TestListenConfigControl has: 
// func testListenConfigControl(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{7827300 0xc002ee5e60}))  {
// 	 := net.TestListenConfigControl(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC net.TestListenError has: 
// func testListenError(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{8096746 0xc001d6c800}))  {
// 	 := net.TestListenError(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC net.TestListenPacketError has: 
// func testListenPacketError(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{8098436 0xc0021f05a0}))  {
// 	 := net.TestListenPacketError(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC net.TestListenerClose has: 
// func testListenerClose(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{7742400 0xc0022d4180}))  {
// 	 := net.TestListenerClose(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC net.TestLookupCNAME has: 
// func testLookupCNAME(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{7705654 0xc002a5c300}))  {
// 	 := net.TestLookupCNAME(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC net.TestLookupContextCancel has: 
// func testLookupContextCancel(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{7719386 0xc002a4ed20}))  {
// 	 := net.TestLookupContextCancel(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC net.TestLookupDotsWithLocalSource has: 
// func testLookupDotsWithLocalSource(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{7711657 0xc002a807e0}))  {
// 	 := net.TestLookupDotsWithLocalSource(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC net.TestLookupDotsWithRemoteSource has: 
// func testLookupDotsWithRemoteSource(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{7712780 0xc002a81820}))  {
// 	 := net.TestLookupDotsWithRemoteSource(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC net.TestLookupGmailMX has: 
// func testLookupGmailMX(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{7700674 0xc001453a20}))  {
// 	 := net.TestLookupGmailMX(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC net.TestLookupGmailNS has: 
// func testLookupGmailNS(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{7701663 0xc002181b00}))  {
// 	 := net.TestLookupGmailNS(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC net.TestLookupGmailTXT has: 
// func testLookupGmailTXT(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{7702671 0xc002187300}))  {
// 	 := net.TestLookupGmailTXT(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC net.TestLookupGoogleHost has: 
// func testLookupGoogleHost(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{7706419 0xc001521c80}))  {
// 	 := net.TestLookupGoogleHost(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC net.TestLookupGoogleIP has: 
// func testLookupGoogleIP(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{7707438 0xc001e9ef40}))  {
// 	 := net.TestLookupGoogleIP(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC net.TestLookupGooglePublicDNSAddr has: 
// func testLookupGooglePublicDNSAddr(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{7703860 0xc0027dc7a0}))  {
// 	 := net.TestLookupGooglePublicDNSAddr(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC net.TestLookupGoogleSRV has: 
// func testLookupGoogleSRV(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{7699544 0xc002a2e900}))  {
// 	 := net.TestLookupGoogleSRV(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC net.TestLookupHostCancel has: 
// func testLookupHostCancel(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{7720671 0xc00121bd60}))  {
// 	 := net.TestLookupHostCancel(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC net.TestLookupIPv6LinkLocalAddr has: 
// func testLookupIPv6LinkLocalAddr(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{7704420 0xc0027dd120}))  {
// 	 := net.TestLookupIPv6LinkLocalAddr(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC net.TestLookupIPv6LinkLocalAddrWithZone has: 
// func testLookupIPv6LinkLocalAddrWithZone(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{7704893 0xc002850360}))  {
// 	 := net.TestLookupIPv6LinkLocalAddrWithZone(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC net.TestLookupLongTXT has: 
// func testLookupLongTXT(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{7706888 0xc001e9e720}))  {
// 	 := net.TestLookupLongTXT(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC net.TestLookupNonLDH has: 
// func testLookupNonLDH(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{7718731 0xc0028fdd20}))  {
// 	 := net.TestLookupNonLDH(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC net.TestLookupPort has: 
// func testLookupPort(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{7716116 0xc0021ebba0}))  {
// 	 := net.TestLookupPort(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC net.TestLookupPort_Minimal has: 
// func testLookupPort_Minimal(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{7717714 0xc0023f47a0}))  {
// 	 := net.TestLookupPort_Minimal(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC net.TestLookupProtocol_Minimal has: 
// func testLookupProtocol_Minimal(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{7718275 0xc0028fd040}))  {
// 	 := net.TestLookupProtocol_Minimal(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC net.TestLookupStaticAddr has: 
// func testLookupStaticAddr(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{7567540 0xc0014e7b20}))  {
// 	 := net.TestLookupStaticAddr(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC net.TestLookupStaticHost has: 
// func testLookupStaticHost(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{7565640 0xc0014e8a60}))  {
// 	 := net.TestLookupStaticHost(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC net.TestLookupTorOnion has: 
// func testLookupTorOnion(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{7600904 0xc00117cac0}))  {
// 	 := net.TestLookupTorOnion(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC net.TestLookupWithIP has: 
// func testLookupWithIP(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{7882391 0xc002568120}))  {
// 	 := net.TestLookupWithIP(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC net.TestMain has: 
// func testMain(m ABEND881(unrecognized Expr type *ast.StarExpr at: &{7465774 0xc002731f20}))  {
// 	 := net.TestMain(m)
// 	...ABEND: TODO...
// }
// 
GO FUNC net.TestMarshalEmptyIP has: 
// func testMarshalEmptyIP(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{7883973 0xc002569a20}))  {
// 	 := net.TestMarshalEmptyIP(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC net.TestNetworkNumberAndMask has: 
// func testNetworkNumberAndMask(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{7896440 0xc0029c1fa0}))  {
// 	 := net.TestNetworkNumberAndMask(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC net.TestNilResolverLookup has: 
// func testNilResolverLookup(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{7719995 0xc002a4fee0}))  {
// 	 := net.TestNilResolverLookup(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC net.TestNoSuchHost has: 
// func testNoSuchHost(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{7632175 0xc0019c1fe0}))  {
// 	 := net.TestNoSuchHost(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC net.TestNotTemporaryRead has: 
// func testNotTemporaryRead(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{7750065 0xc001b71e60}))  {
// 	 := net.TestNotTemporaryRead(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC net.TestPacketConn has: 
// func testPacketConn(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{7995946 0xc002d79660}))  {
// 	 := net.TestPacketConn(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC net.TestPacketConnClose has: 
// func testPacketConnClose(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{7743751 0xc0022d5480}))  {
// 	 := net.TestPacketConnClose(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC net.TestParseCIDR has: 
// func testParseCIDR(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{7891835 0xc00283d280}))  {
// 	 := net.TestParseCIDR(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC net.TestParseIP has: 
// func testParseIP(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{7881897 0xc0024c3640}))  {
// 	 := net.TestParseIP(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC net.TestParseMAC has: 
// func testParseMAC(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{8051829 0xc00340a6c0}))  {
// 	 := net.TestParseMAC(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC net.TestParseNSSConf has: 
// func testParseNSSConf(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{8007670 0xc002f02680}))  {
// 	 := net.TestParseNSSConf(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC net.TestParsePort has: 
// func testParsePort(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{8123201 0xc002c1eea0}))  {
// 	 := net.TestParsePort(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC net.TestParseProcNet has: 
// func testParseProcNet(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{7862607 0xc003347aa0}))  {
// 	 := net.TestParseProcNet(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC net.TestPointToPointInterface has: 
// func testPointToPointInterface(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{8084216 0xc002593740}))  {
// 	 := net.TestPointToPointInterface(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC net.TestProhibitionaryDialArg has: 
// func testProhibitionaryDialArg(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{7834436 0xc0030034e0}))  {
// 	 := net.TestProhibitionaryDialArg(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC net.TestProtocolDialError has: 
// func testProtocolDialError(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{8094172 0xc00276b880}))  {
// 	 := net.TestProtocolDialError(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC net.TestProtocolListenError has: 
// func testProtocolListenError(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{8099353 0xc0021f14e0}))  {
// 	 := net.TestProtocolListenError(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC net.TestRFC6724ClassifyScope has: 
// func testRFC6724ClassifyScope(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{7926012 0xc0015512a0}))  {
// 	 := net.TestRFC6724ClassifyScope(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC net.TestRFC6724CommonPrefixLength has: 
// func testRFC6724CommonPrefixLength(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{7927119 0xc002a543c0}))  {
// 	 := net.TestRFC6724CommonPrefixLength(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC net.TestRFC6724PolicyTableClassify has: 
// func testRFC6724PolicyTableClassify(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{7924963 0xc0015500e0}))  {
// 	 := net.TestRFC6724PolicyTableClassify(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC net.TestRawConnControl has: 
// func testRawConnControl(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{8013960 0xc003004e20}))  {
// 	 := net.TestRawConnControl(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC net.TestRawConnReadWrite has: 
// func testRawConnReadWrite(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{8010509 0xc002fa87e0}))  {
// 	 := net.TestRawConnReadWrite(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC net.TestReadFromTimeout has: 
// func testReadFromTimeout(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{7533555 0xc001b6b220}))  {
// 	 := net.TestReadFromTimeout(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC net.TestReadFromTimeoutFluctuation has: 
// func testReadFromTimeoutFluctuation(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{7539642 0xc0018fe300}))  {
// 	 := net.TestReadFromTimeoutFluctuation(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC net.TestReadLine has: 
// func testReadLine(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{7696067 0xc0024236e0}))  {
// 	 := net.TestReadLine(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC net.TestReadTimeout has: 
// func testReadTimeout(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{7530808 0xc001ccf360}))  {
// 	 := net.TestReadTimeout(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC net.TestReadTimeoutFluctuation has: 
// func testReadTimeoutFluctuation(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{7538965 0xc0019029a0}))  {
// 	 := net.TestReadTimeoutFluctuation(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC net.TestReadTimeoutMustNotReturn has: 
// func testReadTimeoutMustNotReturn(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{7531953 0xc001c91040}))  {
// 	 := net.TestReadTimeoutMustNotReturn(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC net.TestReadTimeoutUnblocksRead has: 
// func testReadTimeoutUnblocksRead(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{7748392 0xc00139a5c0}))  {
// 	 := net.TestReadTimeoutUnblocksRead(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC net.TestReadUnixgramWithUnnamedSocket has: 
// func testReadUnixgramWithUnnamedSocket(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{7446749 0xc002957b20}))  {
// 	 := net.TestReadUnixgramWithUnnamedSocket(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC net.TestReadWriteDeadlineRace has: 
// func testReadWriteDeadlineRace(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{7546240 0xc000f30b60}))  {
// 	 := net.TestReadWriteDeadlineRace(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC net.TestReadWriteProlongedTimeout has: 
// func testReadWriteProlongedTimeout(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{7544734 0xc000d6c020}))  {
// 	 := net.TestReadWriteProlongedTimeout(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC net.TestResolveGoogle has: 
// func testResolveGoogle(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{8125622 0xc002c31580}))  {
// 	 := net.TestResolveGoogle(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC net.TestResolveIPAddr has: 
// func testResolveIPAddr(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{7496032 0xc00246ad20}))  {
// 	 := net.TestResolveIPAddr(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC net.TestResolveTCPAddr has: 
// func testResolveTCPAddr(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{7870656 0xc001ee9f80}))  {
// 	 := net.TestResolveTCPAddr(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC net.TestResolveUDPAddr has: 
// func testResolveUDPAddr(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{7550328 0xc00111f360}))  {
// 	 := net.TestResolveUDPAddr(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC net.TestRetryTimeout has: 
// func testRetryTimeout(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{7618373 0xc0011ad9e0}))  {
// 	 := net.TestRetryTimeout(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC net.TestReverseAddress has: 
// func testReverseAddress(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{7708770 0xc001e9fe60}))  {
// 	 := net.TestReverseAddress(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC net.TestRotate has: 
// func testRotate(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{7619417 0xc00122e2a0}))  {
// 	 := net.TestRotate(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC net.TestSendfile has: 
// func testSendfile(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{7667211 0xc001bdc120}))  {
// 	 := net.TestSendfile(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC net.TestSendfileParts has: 
// func testSendfileParts(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{7668482 0xc001d7dee0}))  {
// 	 := net.TestSendfileParts(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC net.TestSendfileSeeked has: 
// func testSendfileSeeked(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{7669475 0xc001de5800}))  {
// 	 := net.TestSendfileSeeked(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC net.TestSortByRFC6724 has: 
// func testSortByRFC6724(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{7921899 0xc00170b580}))  {
// 	 := net.TestSortByRFC6724(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC net.TestSpecialDomainName has: 
// func testSpecialDomainName(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{7598329 0xc0011bfe60}))  {
// 	 := net.TestSpecialDomainName(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC net.TestSplice has: 
// func testSplice(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{7762334 0xc0025ce440}))  {
// 	 := net.TestSplice(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC net.TestSplitHostPort has: 
// func testSplitHostPort(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{7896725 0xc0029e0620}))  {
// 	 := net.TestSplitHostPort(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC net.TestSpuriousENOTAVAIL has: 
// func testSpuriousENOTAVAIL(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{7806030 0xc002d75320}))  {
// 	 := net.TestSpuriousENOTAVAIL(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC net.TestStrictErrorsLookupIP has: 
// func testStrictErrorsLookupIP(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{7621530 0xc0018c6220}))  {
// 	 := net.TestStrictErrorsLookupIP(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC net.TestStrictErrorsLookupTXT has: 
// func testStrictErrorsLookupTXT(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{7628123 0xc001986a00}))  {
// 	 := net.TestStrictErrorsLookupTXT(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC net.TestSystemConf has: 
// func testSystemConf(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{7656843 0xc001fe6140}))  {
// 	 := net.TestSystemConf(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC net.TestTCPBig has: 
// func testTCPBig(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{7878371 0xc00245d0e0}))  {
// 	 := net.TestTCPBig(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC net.TestTCPConcurrentAccept has: 
// func testTCPConcurrentAccept(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{7873518 0xc001a79660}))  {
// 	 := net.TestTCPConcurrentAccept(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC net.TestTCPConnSpecificMethods has: 
// func testTCPConnSpecificMethods(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{8000657 0xc002e319a0}))  {
// 	 := net.TestTCPConnSpecificMethods(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC net.TestTCPListener has: 
// func testTCPListener(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{7807882 0xc002dd28c0}))  {
// 	 := net.TestTCPListener(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC net.TestTCPListenerName has: 
// func testTCPListenerName(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{7871627 0xc001f15220}))  {
// 	 := net.TestTCPListenerName(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC net.TestTCPListenerSpecificMethods has: 
// func testTCPListenerSpecificMethods(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{7999943 0xc002e30a20}))  {
// 	 := net.TestTCPListenerSpecificMethods(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC net.TestTCPReadWriteAllocs has: 
// func testTCPReadWriteAllocs(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{7874294 0xc001a5e640}))  {
// 	 := net.TestTCPReadWriteAllocs(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC net.TestTCPSelfConnect has: 
// func testTCPSelfConnect(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{7877119 0xc0021c3be0}))  {
// 	 := net.TestTCPSelfConnect(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC net.TestTCPServer has: 
// func testTCPServer(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{7752961 0xc002302620}))  {
// 	 := net.TestTCPServer(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC net.TestTCPSpuriousConnSetupCompletion has: 
// func testTCPSpuriousConnSetupCompletion(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{8136920 0xc002e42440}))  {
// 	 := net.TestTCPSpuriousConnSetupCompletion(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC net.TestTCPSpuriousConnSetupCompletionWithCancel has: 
// func testTCPSpuriousConnSetupCompletionWithCancel(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{8138273 0xc002e43e40}))  {
// 	 := net.TestTCPSpuriousConnSetupCompletionWithCancel(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC net.TestTCPStress has: 
// func testTCPStress(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{7875754 0xc0021c2120}))  {
// 	 := net.TestTCPStress(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC net.TestTXTRecordTwoStrings has: 
// func testTXTRecordTwoStrings(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{7634634 0xc001a2e620}))  {
// 	 := net.TestTXTRecordTwoStrings(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC net.TestUDPConnLocalAndRemoteNames has: 
// func testUDPConnLocalAndRemoteNames(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{7554100 0xc001775820}))  {
// 	 := net.TestUDPConnLocalAndRemoteNames(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC net.TestUDPConnLocalName has: 
// func testUDPConnLocalName(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{7553710 0xc00177fc40}))  {
// 	 := net.TestUDPConnLocalName(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC net.TestUDPConnSpecificMethods has: 
// func testUDPConnSpecificMethods(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{8001811 0xc002e553c0}))  {
// 	 := net.TestUDPConnSpecificMethods(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC net.TestUDPListener has: 
// func testUDPListener(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{7809188 0xc002dfa340}))  {
// 	 := net.TestUDPListener(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC net.TestUDPReadSizeError has: 
// func testUDPReadSizeError(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{7558161 0xc001576fa0}))  {
// 	 := net.TestUDPReadSizeError(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC net.TestUDPServer has: 
// func testUDPServer(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{7758519 0xc001c15e40}))  {
// 	 := net.TestUDPServer(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC net.TestUDPZeroByteBuffer has: 
// func testUDPZeroByteBuffer(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{7557279 0xc001656840}))  {
// 	 := net.TestUDPZeroByteBuffer(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC net.TestUDPZeroBytePayload has: 
// func testUDPZeroBytePayload(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{7556494 0xc00166f6c0}))  {
// 	 := net.TestUDPZeroBytePayload(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC net.TestUnixAndUnixpacketServer has: 
// func testUnixAndUnixpacketServer(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{7754860 0xc0024f93e0}))  {
// 	 := net.TestUnixAndUnixpacketServer(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC net.TestUnixAutobindClose has: 
// func testUnixAutobindClose(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{7804374 0xc002d33ec0}))  {
// 	 := net.TestUnixAutobindClose(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC net.TestUnixConnLocalAndRemoteNames has: 
// func testUnixConnLocalAndRemoteNames(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{7451998 0xc002829500}))  {
// 	 := net.TestUnixConnLocalAndRemoteNames(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC net.TestUnixConnSpecificMethods has: 
// func testUnixConnSpecificMethods(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{8004422 0xc002ea4d60}))  {
// 	 := net.TestUnixConnSpecificMethods(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC net.TestUnixListenerSpecificMethods has: 
// func testUnixListenerSpecificMethods(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{8003722 0xc002e73e60}))  {
// 	 := net.TestUnixListenerSpecificMethods(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC net.TestUnixUnlink has: 
// func testUnixUnlink(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{7454540 0xc0027f0dc0}))  {
// 	 := net.TestUnixUnlink(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC net.TestUnixgramAutobind has: 
// func testUnixgramAutobind(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{7803687 0xc002d0d5c0}))  {
// 	 := net.TestUnixgramAutobind(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC net.TestUnixgramConnLocalAndRemoteNames has: 
// func testUnixgramConnLocalAndRemoteNames(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{7453368 0xc00281cf20}))  {
// 	 := net.TestUnixgramConnLocalAndRemoteNames(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC net.TestUnixgramLinuxAbstractLongName has: 
// func testUnixgramLinuxAbstractLongName(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{7804560 0xc002d3bb80}))  {
// 	 := net.TestUnixgramLinuxAbstractLongName(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC net.TestUnixgramServer has: 
// func testUnixgramServer(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{7760489 0xc002599040}))  {
// 	 := net.TestUnixgramServer(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC net.TestUnixgramWrite has: 
// func testUnixgramWrite(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{7450137 0xc00285d920}))  {
// 	 := net.TestUnixgramWrite(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC net.TestUnixgramZeroByteBuffer has: 
// func testUnixgramZeroByteBuffer(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{7448919 0xc00286bba0}))  {
// 	 := net.TestUnixgramZeroByteBuffer(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC net.TestUnixgramZeroBytePayload has: 
// func testUnixgramZeroBytePayload(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{7447855 0xc00286a220}))  {
// 	 := net.TestUnixgramZeroBytePayload(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC net.TestUpdateResolvConf has: 
// func testUpdateResolvConf(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{7603208 0xc00100a5e0}))  {
// 	 := net.TestUpdateResolvConf(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC net.TestVariousDeadlines has: 
// func testVariousDeadlines(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{7541275 0xc0018bf6c0}))  {
// 	 := net.TestVariousDeadlines(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC net.TestVariousDeadlines1Proc has: 
// func testVariousDeadlines1Proc(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{7541364 0xc0018bf860}))  {
// 	 := net.TestVariousDeadlines1Proc(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC net.TestVariousDeadlines4Proc has: 
// func testVariousDeadlines4Proc(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{7541604 0xc0018bfc80}))  {
// 	 := net.TestVariousDeadlines4Proc(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC net.TestWeighting has: 
// func testWeighting(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{7672388 0xc001a87c60}))  {
// 	 := net.TestWeighting(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC net.TestWildWildcardListener has: 
// func testWildWildcardListener(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{7821189 0xc002eaacc0}))  {
// 	 := net.TestWildWildcardListener(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC net.TestWriteTimeout has: 
// func testWriteTimeout(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{7535334 0xc001ab8b00}))  {
// 	 := net.TestWriteTimeout(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC net.TestWriteTimeoutFluctuation has: 
// func testWriteTimeoutFluctuation(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{7540358 0xc0018ff180}))  {
// 	 := net.TestWriteTimeoutFluctuation(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC net.TestWriteTimeoutMustNotReturn has: 
// func testWriteTimeoutMustNotReturn(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{7536250 0xc001a3d760}))  {
// 	 := net.TestWriteTimeoutMustNotReturn(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC net.TestWriteToTimeout has: 
// func testWriteToTimeout(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{7537822 0xc0019541c0}))  {
// 	 := net.TestWriteToTimeout(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC net.TestWriteToUDP has: 
// func testWriteToUDP(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{7551136 0xc0011857a0}))  {
// 	 := net.TestWriteToUDP(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC net.TestWritevError has: 
// func testWritevError(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{8143893 0xc003101ee0}))  {
// 	 := net.TestWritevError(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC net.TestZeroByteRead has: 
// func testZeroByteRead(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{7746219 0xc0013962c0}))  {
// 	 := net.TestZeroByteRead(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC net_test.ExampleCIDRMask has: 
// func exampleCIDRMask()  {
// 	 := net_test.ExampleCIDRMask()
// 	...ABEND: TODO...
// }
// 
GO FUNC net_test.ExampleIP_DefaultMask has: 
// func exampleIP_DefaultMask()  {
// 	 := net_test.ExampleIP_DefaultMask()
// 	...ABEND: TODO...
// }
// 
GO FUNC net_test.ExampleIP_Mask has: 
// func exampleIP_Mask()  {
// 	 := net_test.ExampleIP_Mask()
// 	...ABEND: TODO...
// }
// 
GO FUNC net_test.ExampleIPv4 has: 
// func exampleIPv4()  {
// 	 := net_test.ExampleIPv4()
// 	...ABEND: TODO...
// }
// 
GO FUNC net_test.ExampleIPv4Mask has: 
// func exampleIPv4Mask()  {
// 	 := net_test.ExampleIPv4Mask()
// 	...ABEND: TODO...
// }
// 
GO FUNC net_test.ExampleListener has: 
// func exampleListener()  {
// 	 := net_test.ExampleListener()
// 	...ABEND: TODO...
// }
// 
GO FUNC net_test.ExampleParseCIDR has: 
// func exampleParseCIDR()  {
// 	 := net_test.ExampleParseCIDR()
// 	...ABEND: TODO...
// }
// 
GO FUNC net_test.ExampleParseIP has: 
// func exampleParseIP()  {
// 	 := net_test.ExampleParseIP()
// 	...ABEND: TODO...
// }
// 
GO FUNC net_test.ExampleUDPConn_WriteTo has: 
// func exampleUDPConn_WriteTo()  {
// 	 := net_test.ExampleUDPConn_WriteTo()
// 	...ABEND: TODO...
// }
// 
GO FUNC net_test.TestPipe has: 
// func testPipe(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{8057000 0xc00202d540}))  {
// 	 := net_test.TestPipe(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC net_test.TestPipeCloseError has: 
// func testPipeCloseError(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{8057200 0xc00202dac0}))  {
// 	 := net_test.TestPipeCloseError(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC nettest.TestConn has: 
// func testConn(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{15461363 0xc006035c20}), mp Object)  {
// 	 := nettest.TestConn(t, mp)
// 	...ABEND: TODO...
// }
// 
GO FUNC nettest.TestTestConn has: 
// func testTestConn(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{15471985 0xc005139240}))  {
// 	 := nettest.TestTestConn(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC norm_test.ExampleForm_NextBoundary has: 
// func exampleForm_NextBoundary()  {
// 	 := norm_test.ExampleForm_NextBoundary()
// 	...ABEND: TODO...
// }
// 
GO FUNC norm_test.ExampleIter has: 
// func exampleIter()  {
// 	 := norm_test.ExampleIter()
// 	...ABEND: TODO...
// }
// 
GO FUNC os.Clearenv has: 
// func clearenv()  {
// 	 := os.Clearenv()
// 	...ABEND: TODO...
// }
// 
GO FUNC os.Exit has: 
// func exit(code int)  {
// 	 := os.Exit(code)
// 	...ABEND: TODO...
// }
// 
GO FUNC os_test.BenchmarkExpand has: 
// func benchmarkExpand(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{10111977 0xc001c3c660}))  {
// 	 := os_test.BenchmarkExpand(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC os_test.BenchmarkLstatDir has: 
// func benchmarkLstatDir(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{10006785 0xc000dbd5c0}))  {
// 	 := os_test.BenchmarkLstatDir(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC os_test.BenchmarkLstatDot has: 
// func benchmarkLstatDot(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{10006603 0xc000db08a0}))  {
// 	 := os_test.BenchmarkLstatDot(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC os_test.BenchmarkLstatFile has: 
// func benchmarkLstatFile(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{10006670 0xc000dbd380}))  {
// 	 := os_test.BenchmarkLstatFile(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC os_test.BenchmarkReaddir has: 
// func benchmarkReaddir(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{10005874 0xc000bbacc0}))  {
// 	 := os_test.BenchmarkReaddir(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC os_test.BenchmarkReaddirname has: 
// func benchmarkReaddirname(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{10005803 0xc000bbaae0}))  {
// 	 := os_test.BenchmarkReaddirname(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC os_test.BenchmarkStatDir has: 
// func benchmarkStatDir(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{10006500 0xc0011bf8e0}))  {
// 	 := os_test.BenchmarkStatDir(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC os_test.BenchmarkStatDot has: 
// func benchmarkStatDot(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{10006322 0xc000bd6140}))  {
// 	 := os_test.BenchmarkStatDot(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC os_test.BenchmarkStatFile has: 
// func benchmarkStatFile(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{10006387 0xc000f08860}))  {
// 	 := os_test.BenchmarkStatFile(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC os_test.ExampleChmod has: 
// func exampleChmod()  {
// 	 := os_test.ExampleChmod()
// 	...ABEND: TODO...
// }
// 
GO FUNC os_test.ExampleChtimes has: 
// func exampleChtimes()  {
// 	 := os_test.ExampleChtimes()
// 	...ABEND: TODO...
// }
// 
GO FUNC os_test.ExampleExpand has: 
// func exampleExpand()  {
// 	 := os_test.ExampleExpand()
// 	...ABEND: TODO...
// }
// 
GO FUNC os_test.ExampleExpandEnv has: 
// func exampleExpandEnv()  {
// 	 := os_test.ExampleExpandEnv()
// 	...ABEND: TODO...
// }
// 
GO FUNC os_test.ExampleFileMode has: 
// func exampleFileMode()  {
// 	 := os_test.ExampleFileMode()
// 	...ABEND: TODO...
// }
// 
GO FUNC os_test.ExampleGetenv has: 
// func exampleGetenv()  {
// 	 := os_test.ExampleGetenv()
// 	...ABEND: TODO...
// }
// 
GO FUNC os_test.ExampleIsNotExist has: 
// func exampleIsNotExist()  {
// 	 := os_test.ExampleIsNotExist()
// 	...ABEND: TODO...
// }
// 
GO FUNC os_test.ExampleLookupEnv has: 
// func exampleLookupEnv()  {
// 	 := os_test.ExampleLookupEnv()
// 	...ABEND: TODO...
// }
// 
GO FUNC os_test.ExampleOpenFile has: 
// func exampleOpenFile()  {
// 	 := os_test.ExampleOpenFile()
// 	...ABEND: TODO...
// }
// 
GO FUNC os_test.ExampleOpenFile_append has: 
// func exampleOpenFile_append()  {
// 	 := os_test.ExampleOpenFile_append()
// 	...ABEND: TODO...
// }
// 
GO FUNC os_test.ExampleUnsetenv has: 
// func exampleUnsetenv()  {
// 	 := os_test.ExampleUnsetenv()
// 	...ABEND: TODO...
// }
// 
GO FUNC os_test.TestAppend has: 
// func testAppend(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{10037957 0xc0035cc420}))  {
// 	 := os_test.TestAppend(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC os_test.TestChdirAndGetwd has: 
// func testChdirAndGetwd(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{10025826 0xc0036f6220}))  {
// 	 := os_test.TestChdirAndGetwd(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC os_test.TestChmod has: 
// func testChmod(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{10022146 0xc00373c360}))  {
// 	 := os_test.TestChmod(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC os_test.TestChown has: 
// func testChown(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{9967058 0xc004ba3f80}))  {
// 	 := os_test.TestChown(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC os_test.TestChtimes has: 
// func testChtimes(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{10023962 0xc00372b240}))  {
// 	 := os_test.TestChtimes(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC os_test.TestChtimesDir has: 
// func testChtimesDir(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{10024352 0xc00372b6e0}))  {
// 	 := os_test.TestChtimesDir(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC os_test.TestClearenv has: 
// func testClearenv(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{10113099 0xc002a4e000}))  {
// 	 := os_test.TestClearenv(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC os_test.TestCloseWithBlockingReadByFd has: 
// func testCloseWithBlockingReadByFd(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{10105281 0xc0024d6340}))  {
// 	 := os_test.TestCloseWithBlockingReadByFd(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC os_test.TestCloseWithBlockingReadByNewFile has: 
// func testCloseWithBlockingReadByNewFile(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{10105002 0xc002797c80}))  {
// 	 := os_test.TestCloseWithBlockingReadByNewFile(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC os_test.TestClosedPipeRaceRead has: 
// func testClosedPipeRaceRead(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{10103820 0xc002796760}))  {
// 	 := os_test.TestClosedPipeRaceRead(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC os_test.TestClosedPipeRaceWrite has: 
// func testClosedPipeRaceWrite(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{10103897 0xc0027968c0}))  {
// 	 := os_test.TestClosedPipeRaceWrite(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC os_test.TestConsistentEnviron has: 
// func testConsistentEnviron(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{10112407 0xc0018169c0}))  {
// 	 := os_test.TestConsistentEnviron(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC os_test.TestDevNullFile has: 
// func testDevNullFile(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{10041669 0xc003598840}))  {
// 	 := os_test.TestDevNullFile(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC os_test.TestDoubleCloseError has: 
// func testDoubleCloseError(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{10053820 0xc003413800}))  {
// 	 := os_test.TestDoubleCloseError(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC os_test.TestEPIPE has: 
// func testEPIPE(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{10099428 0xc0022515e0}))  {
// 	 := os_test.TestEPIPE(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC os_test.TestErrIsExist has: 
// func testErrIsExist(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{10114691 0xc001e984a0}))  {
// 	 := os_test.TestErrIsExist(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC os_test.TestErrIsNotExist has: 
// func testErrIsNotExist(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{10115561 0xc001e99660}))  {
// 	 := os_test.TestErrIsNotExist(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC os_test.TestErrPathNUL has: 
// func testErrPathNUL(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{10117703 0xc002396760}))  {
// 	 := os_test.TestErrPathNUL(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC os_test.TestExecutable has: 
// func testExecutable(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{9974139 0xc004bbfb20}))  {
// 	 := os_test.TestExecutable(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC os_test.TestExpand has: 
// func testExpand(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{10111735 0xc00183fb60}))  {
// 	 := os_test.TestExpand(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC os_test.TestExpandEnvShellSpecialVar has: 
// func testExpandEnvShellSpecialVar(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{9992980 0xc003ea1440}))  {
// 	 := os_test.TestExpandEnvShellSpecialVar(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC os_test.TestFTruncate has: 
// func testFTruncate(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{10022850 0xc00373d440}))  {
// 	 := os_test.TestFTruncate(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC os_test.TestFdRace has: 
// func testFdRace(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{10107967 0xc002663cc0}))  {
// 	 := os_test.TestFdRace(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC os_test.TestFdReadRace has: 
// func testFdReadRace(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{10108259 0xc002629800}))  {
// 	 := os_test.TestFdReadRace(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC os_test.TestFifoEOF has: 
// func testFifoEOF(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{10071958 0xc002ea7b80}))  {
// 	 := os_test.TestFifoEOF(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC os_test.TestFileChown has: 
// func testFileChown(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{9968290 0xc004bab6c0}))  {
// 	 := os_test.TestFileChown(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC os_test.TestFstat has: 
// func testFstat(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{10001978 0xc001808020}))  {
// 	 := os_test.TestFstat(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC os_test.TestGetppid has: 
// func testGetppid(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{10048659 0xc0034cd4c0}))  {
// 	 := os_test.TestGetppid(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC os_test.TestHardLink has: 
// func testHardLink(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{10012542 0xc002e1b720}))  {
// 	 := os_test.TestHardLink(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC os_test.TestHostname has: 
// func testHostname(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{10034009 0xc003682da0}))  {
// 	 := os_test.TestHostname(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC os_test.TestIsExist has: 
// func testIsExist(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{10116929 0xc002422340}))  {
// 	 := os_test.TestIsExist(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC os_test.TestIsPermission has: 
// func testIsPermission(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{10117491 0xc002423400}))  {
// 	 := os_test.TestIsPermission(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC os_test.TestKillFindProcess has: 
// func testKillFindProcess(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{10049439 0xc0034cdf40}))  {
// 	 := os_test.TestKillFindProcess(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC os_test.TestKillStartProcess has: 
// func testKillStartProcess(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{10048488 0xc0034cd160}))  {
// 	 := os_test.TestKillStartProcess(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC os_test.TestLargeWriteToConsole has: 
// func testLargeWriteToConsole(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{10041875 0xc003598ac0}))  {
// 	 := os_test.TestLargeWriteToConsole(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC os_test.TestLchown has: 
// func testLchown(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{9969509 0xc004bb4da0}))  {
// 	 := os_test.TestLchown(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC os_test.TestLongPath has: 
// func testLongPath(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{10045416 0xc00353a800}))  {
// 	 := os_test.TestLongPath(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC os_test.TestLongSymlink has: 
// func testLongSymlink(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{10016617 0xc00369b580}))  {
// 	 := os_test.TestLongSymlink(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC os_test.TestLookupEnv has: 
// func testLookupEnv(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{10113981 0xc002382ba0}))  {
// 	 := os_test.TestLookupEnv(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC os_test.TestLstat has: 
// func testLstat(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{10002431 0xc00171eec0}))  {
// 	 := os_test.TestLstat(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC os_test.TestMkdirAll has: 
// func testMkdirAll(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{9960133 0xc004b892a0}))  {
// 	 := os_test.TestMkdirAll(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC os_test.TestMkdirAllAtSlash has: 
// func testMkdirAllAtSlash(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{9965526 0xc004ba2760}))  {
// 	 := os_test.TestMkdirAllAtSlash(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC os_test.TestMkdirAllWithSymlink has: 
// func testMkdirAllWithSymlink(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{9964996 0xc004b99d60}))  {
// 	 := os_test.TestMkdirAllWithSymlink(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC os_test.TestMkdirStickyUmask has: 
// func testMkdirStickyUmask(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{9972044 0xc004bbb740}))  {
// 	 := os_test.TestMkdirStickyUmask(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC os_test.TestNewFileBlock has: 
// func testNewFileBlock(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{9973652 0xc004bbf460}))  {
// 	 := os_test.TestNewFileBlock(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC os_test.TestNewFileNonBlock has: 
// func testNewFileNonBlock(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{9973732 0xc004bbf640}))  {
// 	 := os_test.TestNewFileNonBlock(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC os_test.TestNilFileMethods has: 
// func testNilFileMethods(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{10050942 0xc00344dc80}))  {
// 	 := os_test.TestNilFileMethods(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC os_test.TestNilProcessStateString has: 
// func testNilProcessStateString(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{10039503 0xc0035c94a0}))  {
// 	 := os_test.TestNilProcessStateString(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC os_test.TestNonpollableDeadline has: 
// func testNonpollableDeadline(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{9976244 0xc004bcbe60}))  {
// 	 := os_test.TestNonpollableDeadline(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC os_test.TestOpenError has: 
// func testOpenError(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{10031370 0xc0036a20a0}))  {
// 	 := os_test.TestOpenError(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC os_test.TestOpenNoName has: 
// func testOpenNoName(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{10032673 0xc0036a3700}))  {
// 	 := os_test.TestOpenNoName(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC os_test.TestPipeEOF has: 
// func testPipeEOF(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{10106859 0xc001b81a80}))  {
// 	 := os_test.TestPipeEOF(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC os_test.TestPipeThreads has: 
// func testPipeThreads(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{10052351 0xc00342e240}))  {
// 	 := os_test.TestPipeThreads(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC os_test.TestProgWideChdir has: 
// func testProgWideChdir(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{10027652 0xc0036e0580}))  {
// 	 := os_test.TestProgWideChdir(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC os_test.TestRacyRead has: 
// func testRacyRead(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{9987119 0xc004c0d3e0}))  {
// 	 := os_test.TestRacyRead(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC os_test.TestRacyWrite has: 
// func testRacyWrite(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{9987916 0xc004c12460}))  {
// 	 := os_test.TestRacyWrite(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC os_test.TestRead0 has: 
// func testRead0(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{10002827 0xc001247860}))  {
// 	 := os_test.TestRead0(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC os_test.TestReadAt has: 
// func testReadAt(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{10035011 0xc00364aae0}))  {
// 	 := os_test.TestReadAt(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC os_test.TestReadAtEOF has: 
// func testReadAtEOF(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{10045128 0xc00354fea0}))  {
// 	 := os_test.TestReadAtEOF(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC os_test.TestReadAtNegativeOffset has: 
// func testReadAtNegativeOffset(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{10036264 0xc0035dc8e0}))  {
// 	 := os_test.TestReadAtNegativeOffset(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC os_test.TestReadAtOffset has: 
// func testReadAtOffset(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{10035622 0xc00363d600}))  {
// 	 := os_test.TestReadAtOffset(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC os_test.TestReadClosed has: 
// func testReadClosed(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{10003302 0xc00151cfa0}))  {
// 	 := os_test.TestReadClosed(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC os_test.TestReadNonblockingFd has: 
// func testReadNonblockingFd(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{10104169 0xc002796ac0}))  {
// 	 := os_test.TestReadNonblockingFd(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC os_test.TestReadTimeout has: 
// func testReadTimeout(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{9977479 0xc004be52c0}))  {
// 	 := os_test.TestReadTimeout(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC os_test.TestReadTimeoutFluctuation has: 
// func testReadTimeoutFluctuation(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{9981526 0xc004bf8720}))  {
// 	 := os_test.TestReadTimeoutFluctuation(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC os_test.TestReadTimeoutMustNotReturn has: 
// func testReadTimeoutMustNotReturn(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{9978226 0xc004bea280}))  {
// 	 := os_test.TestReadTimeoutMustNotReturn(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC os_test.TestReadWriteDeadlineRace has: 
// func testReadWriteDeadlineRace(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{9985972 0xc004c07d20}))  {
// 	 := os_test.TestReadWriteDeadlineRace(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC os_test.TestReaddir has: 
// func testReaddir(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{10004907 0xc000c1ee00}))  {
// 	 := os_test.TestReaddir(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC os_test.TestReaddirNValues has: 
// func testReaddirNValues(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{10008503 0xc000da5960}))  {
// 	 := os_test.TestReaddirNValues(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC os_test.TestReaddirOfFile has: 
// func testReaddirOfFile(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{10012078 0xc0024dd280}))  {
// 	 := os_test.TestReaddirOfFile(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC os_test.TestReaddirRemoveRace has: 
// func testReaddirRemoveRace(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{9971033 0xc004bba600}))  {
// 	 := os_test.TestReaddirRemoveRace(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC os_test.TestReaddirStatFailures has: 
// func testReaddirStatFailures(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{10010210 0xc00121a1e0}))  {
// 	 := os_test.TestReaddirStatFailures(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC os_test.TestReaddirnames has: 
// func testReaddirnames(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{10004792 0xc000ea9380}))  {
// 	 := os_test.TestReaddirnames(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC os_test.TestReaddirnamesOneAtATime has: 
// func testReaddirnamesOneAtATime(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{10007482 0xc000da4600}))  {
// 	 := os_test.TestReaddirnamesOneAtATime(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC os_test.TestRemoveAll has: 
// func testRemoveAll(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{9961712 0xc004b94c60}))  {
// 	 := os_test.TestRemoveAll(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC os_test.TestRemoveAllLarge has: 
// func testRemoveAllLarge(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{9964302 0xc004b99180}))  {
// 	 := os_test.TestRemoveAllLarge(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC os_test.TestRemoveAllRace has: 
// func testRemoveAllRace(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{10051542 0xc003441f00}))  {
// 	 := os_test.TestRemoveAllRace(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC os_test.TestRename has: 
// func testRename(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{10017175 0xc0037a2500}))  {
// 	 := os_test.TestRename(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC os_test.TestRenameFailed has: 
// func testRenameFailed(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{10018654 0xc00377aea0}))  {
// 	 := os_test.TestRenameFailed(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC os_test.TestRenameNotExisting has: 
// func testRenameNotExisting(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{10019470 0xc00376eee0}))  {
// 	 := os_test.TestRenameNotExisting(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC os_test.TestRenameOverwriteDest has: 
// func testRenameOverwriteDest(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{10017737 0xc0037a3540}))  {
// 	 := os_test.TestRenameOverwriteDest(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC os_test.TestRenameToDirFailed has: 
// func testRenameToDirFailed(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{10019736 0xc00376d600}))  {
// 	 := os_test.TestRenameToDirFailed(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC os_test.TestSameFile has: 
// func testSameFile(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{10039672 0xc0035c9aa0}))  {
// 	 := os_test.TestSameFile(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC os_test.TestSeek has: 
// func testSeek(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{10028989 0xc0036dba20}))  {
// 	 := os_test.TestSeek(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC os_test.TestSeekError has: 
// func testSeekError(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{10030405 0xc0036b08c0}))  {
// 	 := os_test.TestSeekError(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC os_test.TestSetenvUnixEinval has: 
// func testSetenvUnixEinval(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{9992578 0xc003ea0c20}))  {
// 	 := os_test.TestSetenvUnixEinval(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC os_test.TestSleep has: 
// func testSleep(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{10048358 0xc0034ccec0}))  {
// 	 := os_test.TestSleep(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC os_test.TestStartProcess has: 
// func testStartProcess(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{10021178 0xc003744ee0}))  {
// 	 := os_test.TestStartProcess(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC os_test.TestStat has: 
// func testStat(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{10000925 0xc00256bee0}))  {
// 	 := os_test.TestStat(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC os_test.TestStatDirModeExec has: 
// func testStatDirModeExec(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{10042467 0xc003599ce0}))  {
// 	 := os_test.TestStatDirModeExec(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC os_test.TestStatDirWithTrailingSlash has: 
// func testStatDirWithTrailingSlash(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{10038997 0xc0035c8500}))  {
// 	 := os_test.TestStatDirWithTrailingSlash(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC os_test.TestStatError has: 
// func testStatError(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{10001278 0xc00218d7e0}))  {
// 	 := os_test.TestStatError(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC os_test.TestStatRelativeSymlink has: 
// func testStatRelativeSymlink(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{10044202 0xc003572ba0}))  {
// 	 := os_test.TestStatRelativeSymlink(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC os_test.TestStatStdin has: 
// func testStatStdin(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{10042972 0xc003588d40}))  {
// 	 := os_test.TestStatStdin(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC os_test.TestStdPipe has: 
// func testStdPipe(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{10099996 0xc0026a4080}))  {
// 	 := os_test.TestStdPipe(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC os_test.TestStdPipeHelper has: 
// func testStdPipeHelper(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{10101612 0xc00269ec80}))  {
// 	 := os_test.TestStdPipeHelper(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC os_test.TestSymlink has: 
// func testSymlink(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{10014912 0xc0034073e0}))  {
// 	 := os_test.TestSymlink(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC os_test.TestTTYClose has: 
// func testTTYClose(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{9988653 0xc004c13440}))  {
// 	 := os_test.TestTTYClose(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC os_test.TestTruncate has: 
// func testTruncate(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{10023284 0xc00373de60}))  {
// 	 := os_test.TestTruncate(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC os_test.TestUnsetenv has: 
// func testUnsetenv(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{10112582 0xc0018179c0}))  {
// 	 := os_test.TestUnsetenv(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC os_test.TestVariousDeadlines has: 
// func testVariousDeadlines(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{9983061 0xc004c007e0}))  {
// 	 := os_test.TestVariousDeadlines(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC os_test.TestVariousDeadlines1Proc has: 
// func testVariousDeadlines1Proc(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{9983150 0xc004c00980}))  {
// 	 := os_test.TestVariousDeadlines1Proc(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC os_test.TestVariousDeadlines4Proc has: 
// func testVariousDeadlines4Proc(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{9983390 0xc004c00cc0}))  {
// 	 := os_test.TestVariousDeadlines4Proc(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC os_test.TestWriteAt has: 
// func testWriteAt(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{10036678 0xc0035d4040}))  {
// 	 := os_test.TestWriteAt(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC os_test.TestWriteAtNegativeOffset has: 
// func testWriteAtNegativeOffset(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{10037238 0xc0035d2420}))  {
// 	 := os_test.TestWriteAtNegativeOffset(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC os_test.TestWriteTimeout has: 
// func testWriteTimeout(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{9979361 0xc004beb940}))  {
// 	 := os_test.TestWriteTimeout(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC os_test.TestWriteTimeoutFluctuation has: 
// func testWriteTimeoutFluctuation(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{9982587 0xc004bf9d60}))  {
// 	 := os_test.TestWriteTimeoutFluctuation(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC os_test.TestWriteTimeoutMustNotReturn has: 
// func testWriteTimeoutMustNotReturn(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{9980105 0xc004bf28a0}))  {
// 	 := os_test.TestWriteTimeoutMustNotReturn(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC parse.BenchmarkParseLarge has: 
// func benchmarkParseLarge(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{13822731 0xc003b24b00}))  {
// 	 := parse.BenchmarkParseLarge(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC parse.TestBlock has: 
// func testBlock(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{13821449 0xc0037cd420}))  {
// 	 := parse.TestBlock(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC parse.TestDelims has: 
// func testDelims(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{13871054 0xc004cbf660}))  {
// 	 := parse.TestDelims(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC parse.TestErrorContextWithTreeCopy has: 
// func testErrorContextWithTreeCopy(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{13818717 0xc00453f8a0}))  {
// 	 := parse.TestErrorContextWithTreeCopy(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC parse.TestErrors has: 
// func testErrors(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{13821089 0xc0037ccbc0}))  {
// 	 := parse.TestErrors(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC parse.TestIsEmpty has: 
// func testIsEmpty(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{13818257 0xc003e3fa80}))  {
// 	 := parse.TestIsEmpty(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC parse.TestLex has: 
// func testLex(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{13870084 0xc004cbe640}))  {
// 	 := parse.TestLex(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC parse.TestLineNum has: 
// func testLineNum(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{13822038 0xc0037cdee0}))  {
// 	 := parse.TestLineNum(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC parse.TestNumberParse has: 
// func testNumberParse(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{13807961 0xc003ef74a0}))  {
// 	 := parse.TestNumberParse(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC parse.TestParse has: 
// func testParse(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{13817538 0xc0026dfd80}))  {
// 	 := parse.TestParse(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC parse.TestParseCopy has: 
// func testParseCopy(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{13817646 0xc0026dff20}))  {
// 	 := parse.TestParseCopy(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC parse.TestPos has: 
// func testPos(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{13872437 0xc004cc5bc0}))  {
// 	 := parse.TestPos(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC parse.TestShutdown has: 
// func testShutdown(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{13873121 0xc004db8920}))  {
// 	 := parse.TestShutdown(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC parser.BenchmarkParse has: 
// func benchmarkParse(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{4772483 0xc00219bce0}))  {
// 	 := parser.BenchmarkParse(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC parser.TestColonEqualsScope has: 
// func testColonEqualsScope(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{4783224 0xc0021b4400}))  {
// 	 := parser.TestColonEqualsScope(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC parser.TestCommentGroups has: 
// func testCommentGroups(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{4787722 0xc0021bece0}))  {
// 	 := parser.TestCommentGroups(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC parser.TestErrors has: 
// func testErrors(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{4798849 0xc0021e26c0}))  {
// 	 := parser.TestErrors(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC parser.TestImports has: 
// func testImports(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{4787330 0xc0021be660}))  {
// 	 := parser.TestImports(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC parser.TestIncompleteSelection has: 
// func testIncompleteSelection(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{4792372 0xc0021cb240}))  {
// 	 := parser.TestIncompleteSelection(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC parser.TestInvalid has: 
// func testInvalid(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{4780145 0xc0021a74a0}))  {
// 	 := parser.TestInvalid(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC parser.TestIssue9979 has: 
// func testIssue9979(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{4790981 0xc0021c5ce0}))  {
// 	 := parser.TestIssue9979(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC parser.TestLastLineComment has: 
// func testLastLineComment(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{4793261 0xc0021d20a0}))  {
// 	 := parser.TestLastLineComment(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC parser.TestLeadAndLineComments has: 
// func testLeadAndLineComments(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{4790052 0xc0021c5380}))  {
// 	 := parser.TestLeadAndLineComments(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC parser.TestObjects has: 
// func testObjects(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{4784351 0xc0021b5d00}))  {
// 	 := parser.TestObjects(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC parser.TestParse has: 
// func testParse(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{4780594 0xc0021a79e0}))  {
// 	 := parser.TestParse(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC parser.TestParseDir has: 
// func testParseDir(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{4781115 0xc0021ac260}))  {
// 	 := parser.TestParseDir(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC parser.TestParseExpr has: 
// func testParseExpr(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{4781664 0xc0021acc40}))  {
// 	 := parser.TestParseExpr(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC parser.TestUnresolved has: 
// func testUnresolved(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{4785333 0xc0021bb0a0}))  {
// 	 := parser.TestUnresolved(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC parser.TestValid has: 
// func testValid(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{4775029 0xc0021a6920}))  {
// 	 := parser.TestValid(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC parser.TestVarScope has: 
// func testVarScope(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{4783773 0xc0021b5020}))  {
// 	 := parser.TestVarScope(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC parser_test.ExampleParseFile has: 
// func exampleParseFile()  {
// 	 := parser_test.ExampleParseFile()
// 	...ABEND: TODO...
// }
// 
GO FUNC path.TestBase has: 
// func testBase(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{10260319 0xc0017d53e0}))  {
// 	 := path.TestBase(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC path.TestClean has: 
// func testClean(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{10257999 0xc00170a7a0}))  {
// 	 := path.TestClean(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC path.TestCleanMallocs has: 
// func testCleanMallocs(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{10258316 0xc00170aec0}))  {
// 	 := path.TestCleanMallocs(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC path.TestDir has: 
// func testDir(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{10260752 0xc001c34440}))  {
// 	 := path.TestDir(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC path.TestExt has: 
// func testExt(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{10259915 0xc0017d4b00}))  {
// 	 := path.TestExt(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC path.TestIsAbs has: 
// func testIsAbs(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{10261160 0xc001c34f00}))  {
// 	 := path.TestIsAbs(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC path.TestJoin has: 
// func testJoin(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{10259556 0xc0017d43e0}))  {
// 	 := path.TestJoin(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC path.TestMatch has: 
// func testMatch(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{10263487 0xc00123bdc0}))  {
// 	 := path.TestMatch(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC path.TestSplit has: 
// func testSplit(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{10258900 0xc001550d00}))  {
// 	 := path.TestSplit(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC path_test.ExampleBase has: 
// func exampleBase()  {
// 	 := path_test.ExampleBase()
// 	...ABEND: TODO...
// }
// 
GO FUNC path_test.ExampleClean has: 
// func exampleClean()  {
// 	 := path_test.ExampleClean()
// 	...ABEND: TODO...
// }
// 
GO FUNC path_test.ExampleDir has: 
// func exampleDir()  {
// 	 := path_test.ExampleDir()
// 	...ABEND: TODO...
// }
// 
GO FUNC path_test.ExampleExt has: 
// func exampleExt()  {
// 	 := path_test.ExampleExt()
// 	...ABEND: TODO...
// }
// 
GO FUNC path_test.ExampleIsAbs has: 
// func exampleIsAbs()  {
// 	 := path_test.ExampleIsAbs()
// 	...ABEND: TODO...
// }
// 
GO FUNC path_test.ExampleJoin has: 
// func exampleJoin()  {
// 	 := path_test.ExampleJoin()
// 	...ABEND: TODO...
// }
// 
GO FUNC path_test.ExampleMatch has: 
// func exampleMatch()  {
// 	 := path_test.ExampleMatch()
// 	...ABEND: TODO...
// }
// 
GO FUNC path_test.ExampleSplit has: 
// func exampleSplit()  {
// 	 := path_test.ExampleSplit()
// 	...ABEND: TODO...
// }
// 
GO FUNC pe.TestBSSHasZeros has: 
// func testBSSHasZeros(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{3061845 0xc00092b0e0}))  {
// 	 := pe.TestBSSHasZeros(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC pe.TestBuildingWindowsGUI has: 
// func testBuildingWindowsGUI(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{3063347 0xc00092dc80}))  {
// 	 := pe.TestBuildingWindowsGUI(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC pe.TestDWARF has: 
// func testDWARF(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{3063151 0xc00092dae0}))  {
// 	 := pe.TestDWARF(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC pe.TestDefaultLinkerDWARF has: 
// func testDefaultLinkerDWARF(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{3049138 0xc000c63360}))  {
// 	 := pe.TestDefaultLinkerDWARF(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC pe.TestExternalLinkerDWARF has: 
// func testExternalLinkerDWARF(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{3049301 0xc000a1d500}))  {
// 	 := pe.TestExternalLinkerDWARF(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC pe.TestImportTableInUnknownSection has: 
// func testImportTableInUnknownSection(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{3064693 0xc000b5afe0}))  {
// 	 := pe.TestImportTableInUnknownSection(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC pe.TestInternalLinkerDWARF has: 
// func testInternalLinkerDWARF(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{3049219 0xc000d32600}))  {
// 	 := pe.TestInternalLinkerDWARF(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC pe.TestOpen has: 
// func testOpen(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{3057925 0xc0010b4c40}))  {
// 	 := pe.TestOpen(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC pe.TestOpenFailure has: 
// func testOpenFailure(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{3059181 0xc0010bfd80}))  {
// 	 := pe.TestOpenFailure(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC pem.BenchmarkDecode has: 
// func benchmarkDecode(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{3841405 0xc001eb4a00}))  {
// 	 := pem.BenchmarkDecode(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC pem.BenchmarkEncode has: 
// func benchmarkEncode(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{3841223 0xc001eb4540}))  {
// 	 := pem.BenchmarkEncode(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC pem.TestBadDecode has: 
// func testBadDecode(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{3837787 0xc001ea8fa0}))  {
// 	 := pem.TestBadDecode(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC pem.TestBadEncode has: 
// func testBadEncode(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{3857666 0xc001ede7e0}))  {
// 	 := pem.TestBadEncode(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC pem.TestDecode has: 
// func testDecode(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{3835742 0xc001e77720}))  {
// 	 := pem.TestDecode(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC pem.TestEncode has: 
// func testEncode(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{3837990 0xc001ea9380}))  {
// 	 := pem.TestEncode(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC pem.TestFuzz has: 
// func testFuzz(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{3839661 0xc001eb0f80}))  {
// 	 := pem.TestFuzz(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC pem.TestGetLine has: 
// func testGetLine(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{3835499 0xc001e77140}))  {
// 	 := pem.TestGetLine(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC pem.TestLineBreaker has: 
// func testLineBreaker(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{3838598 0xc001ea9aa0}))  {
// 	 := pem.TestLineBreaker(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC pem_test.ExampleDecode has: 
// func exampleDecode()  {
// 	 := pem_test.ExampleDecode()
// 	...ABEND: TODO...
// }
// 
GO FUNC pem_test.ExampleEncode has: 
// func exampleEncode()  {
// 	 := pem_test.ExampleEncode()
// 	...ABEND: TODO...
// }
// 
GO FUNC plan9obj.TestOpen has: 
// func testOpen(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{3082397 0xc000f24920}))  {
// 	 := plan9obj.TestOpen(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC plan9obj.TestOpenFailure has: 
// func testOpenFailure(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{3083120 0xc000ff8360}))  {
// 	 := plan9obj.TestOpenFailure(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC png.BenchmarkDecodeGray has: 
// func benchmarkDecodeGray(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{6290495 0xc0017c3f00}))  {
// 	 := png.BenchmarkDecodeGray(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC png.BenchmarkDecodeInterlacing has: 
// func benchmarkDecodeInterlacing(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{6291007 0xc001708680}))  {
// 	 := png.BenchmarkDecodeInterlacing(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC png.BenchmarkDecodeNRGBAGradient has: 
// func benchmarkDecodeNRGBAGradient(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{6290597 0xc001708080}))  {
// 	 := png.BenchmarkDecodeNRGBAGradient(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC png.BenchmarkDecodeNRGBAOpaque has: 
// func benchmarkDecodeNRGBAOpaque(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{6290707 0xc001708200}))  {
// 	 := png.BenchmarkDecodeNRGBAOpaque(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC png.BenchmarkDecodePaletted has: 
// func benchmarkDecodePaletted(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{6290812 0xc001708380}))  {
// 	 := png.BenchmarkDecodePaletted(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC png.BenchmarkDecodeRGB has: 
// func benchmarkDecodeRGB(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{6290908 0xc001708500}))  {
// 	 := png.BenchmarkDecodeRGB(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC png.BenchmarkEncodeGray has: 
// func benchmarkEncodeGray(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{6241499 0xc001b54ec0}))  {
// 	 := png.BenchmarkEncodeGray(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC png.BenchmarkEncodeGrayWithBufferPool has: 
// func benchmarkEncodeGrayWithBufferPool(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{6241873 0xc001b55800}))  {
// 	 := png.BenchmarkEncodeGrayWithBufferPool(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC png.BenchmarkEncodeNRGBA has: 
// func benchmarkEncodeNRGBA(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{6242627 0xc00217eb60}))  {
// 	 := png.BenchmarkEncodeNRGBA(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC png.BenchmarkEncodeNRGBOpaque has: 
// func benchmarkEncodeNRGBOpaque(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{6242138 0xc001b55ea0}))  {
// 	 := png.BenchmarkEncodeNRGBOpaque(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC png.BenchmarkEncodePaletted has: 
// func benchmarkEncodePaletted(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{6242915 0xc00217f200}))  {
// 	 := png.BenchmarkEncodePaletted(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC png.BenchmarkEncodeRGBA has: 
// func benchmarkEncodeRGBA(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{6243707 0xc002180720}))  {
// 	 := png.BenchmarkEncodeRGBA(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC png.BenchmarkEncodeRGBOpaque has: 
// func benchmarkEncodeRGBOpaque(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{6243221 0xc00217fa60}))  {
// 	 := png.BenchmarkEncodeRGBOpaque(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC png.BenchmarkPaeth has: 
// func benchmarkPaeth(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{6292455 0xc001709e20}))  {
// 	 := png.BenchmarkPaeth(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC png.TestDimensionOverflow has: 
// func testDimensionOverflow(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{6289128 0xc0017c27c0}))  {
// 	 := png.TestDimensionOverflow(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC png.TestGray8Transparent has: 
// func testGray8Transparent(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{6286583 0xc002a5de20}))  {
// 	 := png.TestGray8Transparent(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC png.TestIncompleteIDATOnRowBoundary has: 
// func testIncompleteIDATOnRowBoundary(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{6282318 0xc002a43360}))  {
// 	 := png.TestIncompleteIDATOnRowBoundary(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC png.TestInterlaced has: 
// func testInterlaced(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{6281971 0xc002a42de0}))  {
// 	 := png.TestInterlaced(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC png.TestMultipletRNSChunks has: 
// func testMultipletRNSChunks(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{6284170 0xc002a5c200}))  {
// 	 := png.TestMultipletRNSChunks(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC png.TestPaeth has: 
// func testPaeth(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{6292104 0xc001709720}))  {
// 	 := png.TestPaeth(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC png.TestPaethDecode has: 
// func testPaethDecode(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{6292571 0xc001520140}))  {
// 	 := png.TestPaethDecode(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC png.TestPalettedDecodeConfig has: 
// func testPalettedDecodeConfig(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{6281437 0xc002a423c0}))  {
// 	 := png.TestPalettedDecodeConfig(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC png.TestReader has: 
// func testReader(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{6278876 0xc002931a20}))  {
// 	 := png.TestReader(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC png.TestReaderError has: 
// func testReaderError(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{6281030 0xc002959b80}))  {
// 	 := png.TestReaderError(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC png.TestSubImage has: 
// func testSubImage(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{6241087 0xc001b54380}))  {
// 	 := png.TestSubImage(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC png.TestTrailingIDATChunks has: 
// func testTrailingIDATChunks(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{6282978 0xc002a43800}))  {
// 	 := png.TestTrailingIDATChunks(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC png.TestUnknownChunkLengthUnderflow has: 
// func testUnknownChunkLengthUnderflow(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{6286097 0xc002a5d520}))  {
// 	 := png.TestUnknownChunkLengthUnderflow(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC png.TestWriter has: 
// func testWriter(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{6239849 0xc001452c00}))  {
// 	 := png.TestWriter(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC png.TestWriterLevels has: 
// func testWriterLevels(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{6240504 0xc0014537c0}))  {
// 	 := png.TestWriterLevels(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC png_test.ExampleDecode has: 
// func exampleDecode()  {
// 	 := png_test.ExampleDecode()
// 	...ABEND: TODO...
// }
// 
GO FUNC png_test.ExampleEncode has: 
// func exampleEncode()  {
// 	 := png_test.ExampleEncode()
// 	...ABEND: TODO...
// }
// 
GO FUNC poly1305.Benchmark1K has: 
// func benchmark1K(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{14953814 0xc003705480}))  {
// 	 := poly1305.Benchmark1K(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC poly1305.Benchmark1KUnaligned has: 
// func benchmark1KUnaligned(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{14953960 0xc003705780}))  {
// 	 := poly1305.Benchmark1KUnaligned(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC poly1305.Benchmark2M has: 
// func benchmark2M(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{14954020 0xc003705900}))  {
// 	 := poly1305.Benchmark2M(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC poly1305.Benchmark64 has: 
// func benchmark64(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{14953746 0xc003705300}))  {
// 	 := poly1305.Benchmark64(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC poly1305.Benchmark64Unaligned has: 
// func benchmark64Unaligned(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{14953893 0xc003705600}))  {
// 	 := poly1305.Benchmark64Unaligned(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC poly1305.Sum has: 
// func sum(out ABEND881(unrecognized Expr type *ast.StarExpr at: &{14954860 0xc003c679e0}), m ABEND881(unrecognized Expr type *ast.ArrayType at: &{14954873 <nil> byte}), key ABEND881(unrecognized Expr type *ast.StarExpr at: &{14954885 0xc003c67a40}))  {
// 	 := poly1305.Sum(out, m, key)
// 	...ABEND: TODO...
// }
// 
GO FUNC poly1305.TestBurnin has: 
// func testBurnin(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{14952445 0xc0062f7b20}))  {
// 	 := poly1305.TestBurnin(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC poly1305.TestSum has: 
// func testSum(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{14953187 0xc003704680}))  {
// 	 := poly1305.TestSum(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC poly1305.TestSumGeneric has: 
// func testSumGeneric(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{14953333 0xc003704980}))  {
// 	 := poly1305.TestSumGeneric(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC poly1305.TestSumGenericUnaligned has: 
// func testSumGenericUnaligned(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{14953419 0xc003704b00}))  {
// 	 := poly1305.TestSumGenericUnaligned(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC poly1305.TestSumUnaligned has: 
// func testSumUnaligned(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{14953266 0xc003704800}))  {
// 	 := poly1305.TestSumUnaligned(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC pprof.Cmdline has: 
// func cmdline(w ABEND881(unrecognized Expr type *ast.SelectorExpr at: &{http ResponseWriter}), r ABEND881(unrecognized Expr type *ast.StarExpr at: &{9665849 0xc0047143a0}))  {
// 	 := pprof.Cmdline(w, r)
// 	...ABEND: TODO...
// }
// 
GO FUNC pprof.Do has: 
// func do(ctx ABEND881(unrecognized Expr type *ast.SelectorExpr at: &{context Context}), labels Object, f ABEND881(unrecognized Expr type *ast.FuncType at: &{12632190 0xc005a515f0 <nil>}))  {
// 	 := pprof.Do(ctx, labels, f)
// 	...ABEND: TODO...
// }
// 
GO FUNC pprof.ForLabels has: 
// func forLabels(ctx ABEND881(unrecognized Expr type *ast.SelectorExpr at: &{context Context}), f ABEND881(unrecognized Expr type *ast.FuncType at: &{12616531 0xc005a19020 0xc005a19050}))  {
// 	 := pprof.ForLabels(ctx, f)
// 	...ABEND: TODO...
// }
// 
GO FUNC pprof.Index has: 
// func index(w ABEND881(unrecognized Expr type *ast.SelectorExpr at: &{http ResponseWriter}), r ABEND881(unrecognized Expr type *ast.StarExpr at: &{9672341 0xc004721900}))  {
// 	 := pprof.Index(w, r)
// 	...ABEND: TODO...
// }
// 
GO FUNC pprof.Profile has: 
// func profile(w ABEND881(unrecognized Expr type *ast.SelectorExpr at: &{http ResponseWriter}), r ABEND881(unrecognized Expr type *ast.StarExpr at: &{9666986 0xc0047157c0}))  {
// 	 := pprof.Profile(w, r)
// 	...ABEND: TODO...
// }
// 
GO FUNC pprof.SetGoroutineLabels has: 
// func setGoroutineLabels(ctx ABEND881(unrecognized Expr type *ast.SelectorExpr at: &{context Context}))  {
// 	 := pprof.SetGoroutineLabels(ctx)
// 	...ABEND: TODO...
// }
// 
GO FUNC pprof.StopCPUProfile has: 
// func stopCPUProfile()  {
// 	 := pprof.StopCPUProfile()
// 	...ABEND: TODO...
// }
// 
GO FUNC pprof.Symbol has: 
// func symbol(w ABEND881(unrecognized Expr type *ast.SelectorExpr at: &{http ResponseWriter}), r ABEND881(unrecognized Expr type *ast.StarExpr at: &{9669138 0xc00471d3e0}))  {
// 	 := pprof.Symbol(w, r)
// 	...ABEND: TODO...
// }
// 
GO FUNC pprof.TestAtomicLoadStore64 has: 
// func testAtomicLoadStore64(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{12576484 0xc0059a1e80}))  {
// 	 := pprof.TestAtomicLoadStore64(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC pprof.TestBlockProfile has: 
// func testBlockProfile(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{12564545 0xc00597bc60}))  {
// 	 := pprof.TestBlockProfile(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC pprof.TestCPUProfile has: 
// func testCPUProfile(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{12555911 0xc005959de0}))  {
// 	 := pprof.TestCPUProfile(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC pprof.TestCPUProfileInlining has: 
// func testCPUProfileInlining(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{12556413 0xc0059626e0}))  {
// 	 := pprof.TestCPUProfileInlining(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC pprof.TestCPUProfileLabel has: 
// func testCPUProfileLabel(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{12575461 0xc0059a0f20}))  {
// 	 := pprof.TestCPUProfileLabel(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC pprof.TestCPUProfileMultithreaded has: 
// func testCPUProfileMultithreaded(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{12556081 0xc0059620c0}))  {
// 	 := pprof.TestCPUProfileMultithreaded(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC pprof.TestCPUProfileWithFork has: 
// func testCPUProfileWithFork(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{12561607 0xc005977000}))  {
// 	 := pprof.TestCPUProfileWithFork(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC pprof.TestContextLabels has: 
// func testContextLabels(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{12632843 0xc005a5d6e0}))  {
// 	 := pprof.TestContextLabels(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC pprof.TestConvertCPUProfile has: 
// func testConvertCPUProfile(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{12619794 0xc005a2d420}))  {
// 	 := pprof.TestConvertCPUProfile(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC pprof.TestConvertCPUProfileEmpty has: 
// func testConvertCPUProfileEmpty(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{12617771 0xc005a29200}))  {
// 	 := pprof.TestConvertCPUProfileEmpty(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC pprof.TestConvertMemProfile has: 
// func testConvertMemProfile(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{12653122 0xc005aa6200}))  {
// 	 := pprof.TestConvertMemProfile(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC pprof.TestDescriptions has: 
// func testDescriptions(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{9661049 0xc0046f4d80}))  {
// 	 := pprof.TestDescriptions(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC pprof.TestDo has: 
// func testDo(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{12581713 0xc0059ba3a0}))  {
// 	 := pprof.TestDo(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC pprof.TestEmptyCallStack has: 
// func testEmptyCallStack(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{12574907 0xc0059a0500}))  {
// 	 := pprof.TestEmptyCallStack(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC pprof.TestFakeMapping has: 
// func testFakeMapping(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{12627488 0xc005a46c00}))  {
// 	 := pprof.TestFakeMapping(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC pprof.TestGoroutineCounts has: 
// func testGoroutineCounts(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{12573126 0xc005996560}))  {
// 	 := pprof.TestGoroutineCounts(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC pprof.TestGoroutineSwitch has: 
// func testGoroutineSwitch(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{12562490 0xc005977b60}))  {
// 	 := pprof.TestGoroutineSwitch(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC pprof.TestHandlers has: 
// func testHandlers(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{9661262 0xc0046f51e0}))  {
// 	 := pprof.TestHandlers(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC pprof.TestLabelRace has: 
// func testLabelRace(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{12575710 0xc0059a13a0}))  {
// 	 := pprof.TestLabelRace(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC pprof.TestMapping has: 
// func testMapping(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{12625534 0xc005a36e20}))  {
// 	 := pprof.TestMapping(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC pprof.TestMathBigDivide has: 
// func testMathBigDivide(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{12564198 0xc00597b580}))  {
// 	 := pprof.TestMathBigDivide(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC pprof.TestMemoryProfiler has: 
// func testMemoryProfiler(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{12584064 0xc0059c4360}))  {
// 	 := pprof.TestMemoryProfiler(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC pprof.TestMutexProfile has: 
// func testMutexProfile(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{12571270 0xc005992400}))  {
// 	 := pprof.TestMutexProfile(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC pprof.TestProcSelfMaps has: 
// func testProcSelfMaps(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{12624520 0xc005a360c0}))  {
// 	 := pprof.TestProcSelfMaps(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC pprof.TestSetGoroutineLabels has: 
// func testSetGoroutineLabels(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{12580211 0xc0059b1080}))  {
// 	 := pprof.TestSetGoroutineLabels(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC pprof.Trace has: 
// func trace(w ABEND881(unrecognized Expr type *ast.SelectorExpr at: &{http ResponseWriter}), r ABEND881(unrecognized Expr type *ast.StarExpr at: &{9668093 0xc00471c5e0}))  {
// 	 := pprof.Trace(w, r)
// 	...ABEND: TODO...
// }
// 
GO FUNC printer.BenchmarkPrint has: 
// func benchmarkPrint(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{4866674 0xc0022c8b60}))  {
// 	 := printer.BenchmarkPrint(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC printer.TestBadComments has: 
// func testBadComments(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{4808517 0xc002215940}))  {
// 	 := printer.TestBadComments(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC printer.TestBadNodes has: 
// func testBadNodes(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{4807227 0xc0022145c0}))  {
// 	 := printer.TestBadNodes(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC printer.TestBaseIndent has: 
// func testBaseIndent(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{4813729 0xc0022247c0}))  {
// 	 := printer.TestBaseIndent(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC printer.TestCommentedNode has: 
// func testCommentedNode(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{4816589 0xc00222f7e0}))  {
// 	 := printer.TestCommentedNode(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC printer.TestDeclLists has: 
// func testDeclLists(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{4812693 0xc00221f500}))  {
// 	 := printer.TestDeclLists(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC printer.TestFiles has: 
// func testFiles(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{4805627 0xc00220acc0}))  {
// 	 := printer.TestFiles(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC printer.TestFuncType has: 
// func testFuncType(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{4814999 0xc002225a20}))  {
// 	 := printer.TestFuncType(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC printer.TestIssue11151 has: 
// func testIssue11151(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{4817428 0xc0022326c0}))  {
// 	 := printer.TestIssue11151(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC printer.TestIssue5945 has: 
// func testIssue5945(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{4811883 0xc00221eae0}))  {
// 	 := printer.TestIssue5945(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC printer.TestLineComments has: 
// func testLineComments(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{4806182 0xc00220b5a0}))  {
// 	 := printer.TestLineComments(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC printer.TestSourcePos has: 
// func testSourcePos(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{4810124 0xc002219340}))  {
// 	 := printer.TestSourcePos(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC printer.TestStmtLists has: 
// func testStmtLists(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{4813245 0xc00221fe20}))  {
// 	 := printer.TestStmtLists(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC printer.TestWriteErrors has: 
// func testWriteErrors(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{4815728 0xc00222e960}))  {
// 	 := printer.TestWriteErrors(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC printer.TestX has: 
// func testX(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{4816439 0xc00222f4e0}))  {
// 	 := printer.TestX(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC printer_test.ExampleFprint has: 
// func exampleFprint()  {
// 	 := printer_test.ExampleFprint()
// 	...ABEND: TODO...
// }
// 
GO FUNC printer_test.Test has: 
// func test()  {
// 	 := printer_test.Test()
// 	...ABEND: TODO...
// }
// 
GO FUNC quick.TestCheckEqual has: 
// func testCheckEqual(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{13551542 0xc0044eab40}))  {
// 	 := quick.TestCheckEqual(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC quick.TestCheckProperty has: 
// func testCheckProperty(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{13555033 0xc0044b3940}))  {
// 	 := quick.TestCheckProperty(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC quick.TestEmptyStruct has: 
// func testEmptyStruct(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{13556384 0xc00448ccc0}))  {
// 	 := quick.TestEmptyStruct(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC quick.TestFailure has: 
// func testFailure(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{13555135 0xc0044b3b20}))  {
// 	 := quick.TestFailure(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC quick.TestInt64 has: 
// func testInt64(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{13556991 0xc00447c300}))  {
// 	 := quick.TestInt64(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC quick.TestMutuallyRecursive has: 
// func testMutuallyRecursive(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{13556533 0xc0044849c0}))  {
// 	 := quick.TestMutuallyRecursive(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC quick.TestNonZeroSliceAndMap has: 
// func testNonZeroSliceAndMap(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{13556794 0xc004480b40}))  {
// 	 := quick.TestNonZeroSliceAndMap(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC quick.TestRecursive has: 
// func testRecursive(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{13556139 0xc0044951c0}))  {
// 	 := quick.TestRecursive(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC quotedprintable.BenchmarkWriter has: 
// func benchmarkWriter(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{7429941 0xc002af35e0}))  {
// 	 := quotedprintable.BenchmarkWriter(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC quotedprintable.TestExhaustive has: 
// func testExhaustive(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{7437045 0xc002a282c0}))  {
// 	 := quotedprintable.TestExhaustive(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC quotedprintable.TestReader has: 
// func testReader(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{7434029 0xc002a8cc80}))  {
// 	 := quotedprintable.TestReader(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC quotedprintable.TestRoundTrip has: 
// func testRoundTrip(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{7427895 0xc002af2b20}))  {
// 	 := quotedprintable.TestRoundTrip(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC quotedprintable.TestWriter has: 
// func testWriter(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{7425105 0xc002ace760}))  {
// 	 := quotedprintable.TestWriter(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC quotedprintable.TestWriterBinary has: 
// func testWriterBinary(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{7425168 0xc002ace920}))  {
// 	 := quotedprintable.TestWriterBinary(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC quotedprintable_test.ExampleNewReader has: 
// func exampleNewReader()  {
// 	 := quotedprintable_test.ExampleNewReader()
// 	...ABEND: TODO...
// }
// 
GO FUNC quotedprintable_test.ExampleNewWriter has: 
// func exampleNewWriter()  {
// 	 := quotedprintable_test.ExampleNewWriter()
// 	...ABEND: TODO...
// }
// 
GO FUNC rand.BenchmarkFloat32 has: 
// func benchmarkFloat32(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{7274726 0xc003567200}))  {
// 	 := rand.BenchmarkFloat32(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC rand.BenchmarkFloat64 has: 
// func benchmarkFloat64(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{7274836 0xc0035674e0}))  {
// 	 := rand.BenchmarkFloat64(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC rand.BenchmarkInt31n1000 has: 
// func benchmarkInt31n1000(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{7274613 0xc003566f00}))  {
// 	 := rand.BenchmarkInt31n1000(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC rand.BenchmarkInt63Threadsafe has: 
// func benchmarkInt63Threadsafe(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{7274182 0xc003566420}))  {
// 	 := rand.BenchmarkInt63Threadsafe(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC rand.BenchmarkInt63Unthreadsafe has: 
// func benchmarkInt63Unthreadsafe(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{7274274 0xc003566620}))  {
// 	 := rand.BenchmarkInt63Unthreadsafe(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC rand.BenchmarkInt63n1000 has: 
// func benchmarkInt63n1000(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{7274497 0xc003566c00}))  {
// 	 := rand.BenchmarkInt63n1000(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC rand.BenchmarkIntn1000 has: 
// func benchmarkIntn1000(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{7274383 0xc003566900}))  {
// 	 := rand.BenchmarkIntn1000(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC rand.BenchmarkPerm3 has: 
// func benchmarkPerm3(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{7274944 0xc0035677c0}))  {
// 	 := rand.BenchmarkPerm3(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC rand.BenchmarkPerm30 has: 
// func benchmarkPerm30(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{7275051 0xc003567ac0}))  {
// 	 := rand.BenchmarkPerm30(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC rand.BenchmarkPerm30ViaShuffle has: 
// func benchmarkPerm30ViaShuffle(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{7275169 0xc003567dc0}))  {
// 	 := rand.BenchmarkPerm30ViaShuffle(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC rand.BenchmarkRead1000 has: 
// func benchmarkRead1000(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{7276015 0xc003573240}))  {
// 	 := rand.BenchmarkRead1000(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC rand.BenchmarkRead3 has: 
// func benchmarkRead3(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{7275714 0xc003572a40}))  {
// 	 := rand.BenchmarkRead3(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC rand.BenchmarkRead64 has: 
// func benchmarkRead64(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{7275863 0xc003572e40}))  {
// 	 := rand.BenchmarkRead64(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC rand.BenchmarkShuffleOverhead has: 
// func benchmarkShuffleOverhead(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{7275493 0xc0035724a0}))  {
// 	 := rand.BenchmarkShuffleOverhead(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC rand.Seed has: 
// func seed(seed Object)  {
// 	 := rand.Seed(seed)
// 	...ABEND: TODO...
// }
// 
GO FUNC rand.Shuffle has: 
// func shuffle(n int, swap ABEND881(unrecognized Expr type *ast.FuncType at: &{7287454 0xc00359d110 <nil>}))  {
// 	 := rand.Shuffle(n, swap)
// 	...ABEND: TODO...
// }
// 
GO FUNC rand.TestBatched has: 
// func testBatched(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{1308249 0xc000bcb2c0}))  {
// 	 := rand.TestBatched(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC rand.TestBatchedEmpty has: 
// func testBatchedEmpty(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{1308837 0xc000bcbf00}))  {
// 	 := rand.TestBatchedEmpty(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC rand.TestBatchedError has: 
// func testBatchedError(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{1308655 0xc000bcbba0}))  {
// 	 := rand.TestBatchedError(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC rand.TestConcurrent has: 
// func testConcurrent(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{7258621 0xc003514780}))  {
// 	 := rand.TestConcurrent(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC rand.TestExpTables has: 
// func testExpTables(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{7267541 0xc003549a40}))  {
// 	 := rand.TestExpTables(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC rand.TestFloat32 has: 
// func testFloat32(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{7268316 0xc00354e640}))  {
// 	 := rand.TestFloat32(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC rand.TestNonStandardExponentialValues has: 
// func testNonStandardExponentialValues(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{7264683 0xc0035423c0}))  {
// 	 := rand.TestNonStandardExponentialValues(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC rand.TestNonStandardNormalValues has: 
// func testNonStandardNormalValues(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{7263079 0xc00353ae00}))  {
// 	 := rand.TestNonStandardNormalValues(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC rand.TestNormTables has: 
// func testNormTables(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{7267079 0xc0035491e0}))  {
// 	 := rand.TestNormTables(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC rand.TestRead has: 
// func testRead(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{1309235 0xc000bd0460}))  {
// 	 := rand.TestRead(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC rand.TestReadByOneByte has: 
// func testReadByOneByte(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{7270210 0xc0035582e0}))  {
// 	 := rand.TestReadByOneByte(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC rand.TestReadSeedReset has: 
// func testReadSeedReset(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{7270623 0xc003558c40}))  {
// 	 := rand.TestReadSeedReset(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC rand.TestReadUniformity has: 
// func testReadUniformity(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{7269723 0xc00354f980}))  {
// 	 := rand.TestReadUniformity(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC rand.TestShuffleSmall has: 
// func testShuffleSmall(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{7270974 0xc003559500}))  {
// 	 := rand.TestShuffleSmall(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC rand.TestStandardExponentialValues has: 
// func testStandardExponentialValues(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{7264531 0xc003542180}))  {
// 	 := rand.TestStandardExponentialValues(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC rand.TestStandardNormalValues has: 
// func testStandardNormalValues(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{7262934 0xc00353aba0}))  {
// 	 := rand.TestStandardNormalValues(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC rand.TestUniformFactorial has: 
// func testUniformFactorial(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{7271819 0xc00355e140}))  {
// 	 := rand.TestUniformFactorial(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC rand_test.BenchmarkPrime has: 
// func benchmarkPrime(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{1316045 0xc000bee520}))  {
// 	 := rand_test.BenchmarkPrime(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC rand_test.Example has: 
// func example()  {
// 	 := rand_test.Example()
// 	...ABEND: TODO...
// }
// 
GO FUNC rand_test.ExamplePerm has: 
// func examplePerm()  {
// 	 := rand_test.ExamplePerm()
// 	...ABEND: TODO...
// }
// 
GO FUNC rand_test.ExampleRead has: 
// func exampleRead()  {
// 	 := rand_test.ExampleRead()
// 	...ABEND: TODO...
// }
// 
GO FUNC rand_test.ExampleShuffle has: 
// func exampleShuffle()  {
// 	 := rand_test.ExampleShuffle()
// 	...ABEND: TODO...
// }
// 
GO FUNC rand_test.ExampleShuffle_slicesInUnison has: 
// func exampleShuffle_slicesInUnison()  {
// 	 := rand_test.ExampleShuffle_slicesInUnison()
// 	...ABEND: TODO...
// }
// 
GO FUNC rand_test.Example_rand has: 
// func example_rand()  {
// 	 := rand_test.Example_rand()
// 	...ABEND: TODO...
// }
// 
GO FUNC rand_test.TestInt has: 
// func testInt(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{1313915 0xc000bddc60}))  {
// 	 := rand_test.TestInt(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC rand_test.TestIntEmptyMaxPanics has: 
// func testIntEmptyMaxPanics(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{1315792 0xc000bee000}))  {
// 	 := rand_test.TestIntEmptyMaxPanics(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC rand_test.TestIntMask has: 
// func testIntMask(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{1315024 0xc000be71a0}))  {
// 	 := rand_test.TestIntMask(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC rand_test.TestIntNegativeMaxPanics has: 
// func testIntNegativeMaxPanics(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{1315946 0xc000bee260}))  {
// 	 := rand_test.TestIntNegativeMaxPanics(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC rand_test.TestIntReads has: 
// func testIntReads(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{1314475 0xc000be6700}))  {
// 	 := rand_test.TestIntReads(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC rand_test.TestPrimeBitsLt2 has: 
// func testPrimeBitsLt2(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{1313742 0xc000bdd920}))  {
// 	 := rand_test.TestPrimeBitsLt2(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC rand_test.TestPrimeSmall has: 
// func testPrimeSmall(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{1313360 0xc000bdd160}))  {
// 	 := rand_test.TestPrimeSmall(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC rand_test.TestRegress has: 
// func testRegress(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{7290044 0xc0035a49c0}))  {
// 	 := rand_test.TestRegress(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC rc4.BenchmarkRC4_128 has: 
// func benchmarkRC4_128(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{1323476 0xc000c10e20}))  {
// 	 := rc4.BenchmarkRC4_128(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC rc4.BenchmarkRC4_1K has: 
// func benchmarkRC4_1K(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{1323535 0xc000c10f80}))  {
// 	 := rc4.BenchmarkRC4_1K(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC rc4.BenchmarkRC4_8K has: 
// func benchmarkRC4_8K(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{1323595 0xc000c110e0}))  {
// 	 := rc4.BenchmarkRC4_8K(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC rc4.TestBlock has: 
// func testBlock(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{1322461 0xc000c0d6c0}))  {
// 	 := rc4.TestBlock(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC rc4.TestBlockGeneric has: 
// func testBlockGeneric(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{1322680 0xc000c0d940}))  {
// 	 := rc4.TestBlockGeneric(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC rc4.TestGolden has: 
// func testGolden(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{1321784 0xc000c0c840}))  {
// 	 := rc4.TestGolden(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC reflect.ResolveReflectName has: 
// func resolveReflectName(s string)  {
// 	 := reflect.ResolveReflectName(s)
// 	...ABEND: TODO...
// }
// 
GO FUNC reflect_test.BenchmarkCall has: 
// func benchmarkCall(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{10579033 0xc002aad4e0}))  {
// 	 := reflect_test.BenchmarkCall(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC reflect_test.BenchmarkCallArgCopy has: 
// func benchmarkCallArgCopy(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{10579260 0xc002aada20}))  {
// 	 := reflect_test.BenchmarkCallArgCopy(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC reflect_test.BenchmarkFieldByName1 has: 
// func benchmarkFieldByName1(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{10671558 0xc00308a280}))  {
// 	 := reflect_test.BenchmarkFieldByName1(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC reflect_test.BenchmarkFieldByName2 has: 
// func benchmarkFieldByName2(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{10671709 0xc00308a5e0}))  {
// 	 := reflect_test.BenchmarkFieldByName2(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC reflect_test.BenchmarkFieldByName3 has: 
// func benchmarkFieldByName3(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{10672533 0xc00308b9e0}))  {
// 	 := reflect_test.BenchmarkFieldByName3(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC reflect_test.BenchmarkInterfaceBig has: 
// func benchmarkInterfaceBig(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{10672723 0xc00308be00}))  {
// 	 := reflect_test.BenchmarkInterfaceBig(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC reflect_test.BenchmarkInterfaceSmall has: 
// func benchmarkInterfaceSmall(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{10673137 0xc002f48620}))  {
// 	 := reflect_test.BenchmarkInterfaceSmall(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC reflect_test.BenchmarkNew has: 
// func benchmarkNew(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{10702658 0xc003a06180}))  {
// 	 := reflect_test.BenchmarkNew(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC reflect_test.BenchmarkPtrTo has: 
// func benchmarkPtrTo(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{10603058 0xc002d487a0}))  {
// 	 := reflect_test.BenchmarkPtrTo(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC reflect_test.ExampleMakeFunc has: 
// func exampleMakeFunc()  {
// 	 := reflect_test.ExampleMakeFunc()
// 	...ABEND: TODO...
// }
// 
GO FUNC reflect_test.ExampleStructOf has: 
// func exampleStructOf()  {
// 	 := reflect_test.ExampleStructOf()
// 	...ABEND: TODO...
// }
// 
GO FUNC reflect_test.ExampleStructTag has: 
// func exampleStructTag()  {
// 	 := reflect_test.ExampleStructTag()
// 	...ABEND: TODO...
// }
// 
GO FUNC reflect_test.ExampleStructTag_Lookup has: 
// func exampleStructTag_Lookup()  {
// 	 := reflect_test.ExampleStructTag_Lookup()
// 	...ABEND: TODO...
// }
// 
GO FUNC reflect_test.ExampleTypeOf has: 
// func exampleTypeOf()  {
// 	 := reflect_test.ExampleTypeOf()
// 	...ABEND: TODO...
// }
// 
GO FUNC reflect_test.Nil has: 
// func nil(a ABEND881(unrecognized Expr type *ast.InterfaceType at: &{10561455 0xc0024b0960 false}), t ABEND881(unrecognized Expr type *ast.StarExpr at: &{10561470 0xc0014f6080}))  {
// 	 := reflect_test.Nil(a, t)
// 	...ABEND: TODO...
// }
// 
GO FUNC reflect_test.NotNil has: 
// func notNil(a ABEND881(unrecognized Expr type *ast.InterfaceType at: &{10561581 0xc0024b14a0 false}), t ABEND881(unrecognized Expr type *ast.StarExpr at: &{10561596 0xc0014f63c0}))  {
// 	 := reflect_test.NotNil(a, t)
// 	...ABEND: TODO...
// }
// 
GO FUNC reflect_test.TestAddr has: 
// func testAddr(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{10603609 0xc002d48fc0}))  {
// 	 := reflect_test.TestAddr(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC reflect_test.TestAlias has: 
// func testAlias(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{10620363 0xc0032804a0}))  {
// 	 := reflect_test.TestAlias(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC reflect_test.TestAliasNames has: 
// func testAliasNames(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{10704819 0xc003a41000}))  {
// 	 := reflect_test.TestAliasNames(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC reflect_test.TestAlignment has: 
// func testAlignment(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{10561059 0xc00498f680}))  {
// 	 := reflect_test.TestAlignment(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC reflect_test.TestAll has: 
// func testAll(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{10548634 0xc00486eae0}))  {
// 	 := reflect_test.TestAll(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC reflect_test.TestAllocations has: 
// func testAllocations(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{10605222 0xc002e02e80}))  {
// 	 := reflect_test.TestAllocations(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC reflect_test.TestAllocsInterfaceBig has: 
// func testAllocsInterfaceBig(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{10672885 0xc002f481a0}))  {
// 	 := reflect_test.TestAllocsInterfaceBig(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC reflect_test.TestAllocsInterfaceSmall has: 
// func testAllocsInterfaceSmall(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{10673291 0xc002f48980}))  {
// 	 := reflect_test.TestAllocsInterfaceSmall(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC reflect_test.TestAnonymousFields has: 
// func testAnonymousFields(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{10593308 0xc0025b1740}))  {
// 	 := reflect_test.TestAnonymousFields(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC reflect_test.TestAppend has: 
// func testAppend(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{10551033 0xc0048852e0}))  {
// 	 := reflect_test.TestAppend(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC reflect_test.TestArrayElemSet has: 
// func testArrayElemSet(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{10547431 0xc00483dda0}))  {
// 	 := reflect_test.TestArrayElemSet(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC reflect_test.TestArrayOf has: 
// func testArrayOf(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{10638192 0xc002cf7dc0}))  {
// 	 := reflect_test.TestArrayOf(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC reflect_test.TestArrayOfAlg has: 
// func testArrayOfAlg(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{10642329 0xc0022dc280}))  {
// 	 := reflect_test.TestArrayOfAlg(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC reflect_test.TestArrayOfDirectIface has: 
// func testArrayOfDirectIface(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{10643821 0xc00259e3c0}))  {
// 	 := reflect_test.TestArrayOfDirectIface(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC reflect_test.TestArrayOfGC has: 
// func testArrayOfGC(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{10641766 0xc0030ff400}))  {
// 	 := reflect_test.TestArrayOfGC(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC reflect_test.TestArrayOfGenericAlg has: 
// func testArrayOfGenericAlg(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{10642854 0xc0022dcd80}))  {
// 	 := reflect_test.TestArrayOfGenericAlg(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC reflect_test.TestAssignableTo has: 
// func testAssignableTo(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{10538608 0xc0047caf00}))  {
// 	 := reflect_test.TestAssignableTo(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC reflect_test.TestBigStruct has: 
// func testBigStruct(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{10555639 0xc004904a60}))  {
// 	 := reflect_test.TestBigStruct(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC reflect_test.TestBigUnnamedStruct has: 
// func testBigUnnamedStruct(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{10555320 0xc0048d01a0}))  {
// 	 := reflect_test.TestBigUnnamedStruct(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC reflect_test.TestBigZero has: 
// func testBigZero(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{10675827 0xc002f8d240}))  {
// 	 := reflect_test.TestBigZero(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC reflect_test.TestBool has: 
// func testBool(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{10539324 0xc0047cc520}))  {
// 	 := reflect_test.TestBool(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC reflect_test.TestBytes has: 
// func testBytes(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{10611553 0xc003081240}))  {
// 	 := reflect_test.TestBytes(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC reflect_test.TestCallConvert has: 
// func testCallConvert(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{10577035 0xc002717140}))  {
// 	 := reflect_test.TestCallConvert(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC reflect_test.TestCallGC has: 
// func testCallGC(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{10682107 0xc002f57680}))  {
// 	 := reflect_test.TestCallGC(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC reflect_test.TestCallMethodJump has: 
// func testCallMethodJump(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{10679499 0xc002f96aa0}))  {
// 	 := reflect_test.TestCallMethodJump(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC reflect_test.TestCallPanic has: 
// func testCallPanic(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{10617515 0xc00316be60}))  {
// 	 := reflect_test.TestCallPanic(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC reflect_test.TestCallReturnsEmpty has: 
// func testCallReturnsEmpty(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{10578368 0xc002aaca20}))  {
// 	 := reflect_test.TestCallReturnsEmpty(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC reflect_test.TestCallWithStruct has: 
// func testCallWithStruct(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{10577645 0xc002717cc0}))  {
// 	 := reflect_test.TestCallWithStruct(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC reflect_test.TestCanSetField has: 
// func testCanSetField(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{10545166 0xc004803ea0}))  {
// 	 := reflect_test.TestCanSetField(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC reflect_test.TestChan has: 
// func testChan(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{10565110 0xc001bca800}))  {
// 	 := reflect_test.TestChan(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC reflect_test.TestChanAlloc has: 
// func testChanAlloc(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{10698751 0xc0039be4e0}))  {
// 	 := reflect_test.TestChanAlloc(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC reflect_test.TestChanOf has: 
// func testChanOf(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{10664880 0xc0030c83c0}))  {
// 	 := reflect_test.TestChanOf(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC reflect_test.TestChanOfDir has: 
// func testChanOfDir(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{10665477 0xc0030c8f80}))  {
// 	 := reflect_test.TestChanOfDir(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC reflect_test.TestChanOfGC has: 
// func testChanOfGC(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{10666129 0xc0030c9ac0}))  {
// 	 := reflect_test.TestChanOfGC(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC reflect_test.TestComparable has: 
// func testComparable(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{10636516 0xc002c6ff00}))  {
// 	 := reflect_test.TestComparable(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC reflect_test.TestConvert has: 
// func testConvert(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{10633250 0xc0026beba0}))  {
// 	 := reflect_test.TestConvert(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC reflect_test.TestCopy has: 
// func testCopy(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{10552441 0xc0048a13a0}))  {
// 	 := reflect_test.TestCopy(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC reflect_test.TestCopyArray has: 
// func testCopyArray(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{10554824 0xc0048ba580}))  {
// 	 := reflect_test.TestCopyArray(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC reflect_test.TestCopyString has: 
// func testCopyString(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{10553391 0xc0048ad480}))  {
// 	 := reflect_test.TestCopyString(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC reflect_test.TestDeepEqual has: 
// func testDeepEqual(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{10558608 0xc00493e0a0}))  {
// 	 := reflect_test.TestDeepEqual(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC reflect_test.TestDeepEqualComplexStruct has: 
// func testDeepEqualComplexStruct(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{10559637 0xc0049555a0}))  {
// 	 := reflect_test.TestDeepEqualComplexStruct(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC reflect_test.TestDeepEqualComplexStructInequality has: 
// func testDeepEqualComplexStructInequality(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{10559984 0xc00498e2a0}))  {
// 	 := reflect_test.TestDeepEqualComplexStructInequality(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC reflect_test.TestDeepEqualRecursiveStruct has: 
// func testDeepEqualRecursiveStruct(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{10559333 0xc00493efc0}))  {
// 	 := reflect_test.TestDeepEqualRecursiveStruct(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC reflect_test.TestDeepEqualUnexportedMap has: 
// func testDeepEqualUnexportedMap(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{10560387 0xc00498eb80}))  {
// 	 := reflect_test.TestDeepEqualUnexportedMap(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC reflect_test.TestEmbed has: 
// func testEmbed(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{10672358 0xc00308b680}))  {
// 	 := reflect_test.TestEmbed(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC reflect_test.TestEmbeddedMethods has: 
// func testEmbeddedMethods(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{10601204 0xc002c07ec0}))  {
// 	 := reflect_test.TestEmbeddedMethods(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC reflect_test.TestExported has: 
// func testExported(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{10700611 0xc0039bf9c0}))  {
// 	 := reflect_test.TestExported(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC reflect_test.TestFieldByIndex has: 
// func testFieldByIndex(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{10595310 0xc0026ee3c0}))  {
// 	 := reflect_test.TestFieldByIndex(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC reflect_test.TestFieldByIndexNil has: 
// func testFieldByIndexNil(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{10676072 0xc002f8d720}))  {
// 	 := reflect_test.TestFieldByIndexNil(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC reflect_test.TestFieldByName has: 
// func testFieldByName(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{10596148 0xc0026ef620}))  {
// 	 := reflect_test.TestFieldByName(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC reflect_test.TestFieldPkgPath has: 
// func testFieldPkgPath(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{10598406 0xc002bbe840}))  {
// 	 := reflect_test.TestFieldPkgPath(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC reflect_test.TestFunc has: 
// func testFunc(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{10576233 0xc0027160a0}))  {
// 	 := reflect_test.TestFunc(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC reflect_test.TestFuncArg has: 
// func testFuncArg(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{10610203 0xc002fb5a20}))  {
// 	 := reflect_test.TestFuncArg(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC reflect_test.TestFuncLayout has: 
// func testFuncLayout(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{10687074 0xc00382c740}))  {
// 	 := reflect_test.TestFuncLayout(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC reflect_test.TestFuncOf has: 
// func testFuncOf(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{10669654 0xc003313e40}))  {
// 	 := reflect_test.TestFuncOf(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC reflect_test.TestFunctionValue has: 
// func testFunctionValue(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{10550525 0xc004884780}))  {
// 	 := reflect_test.TestFunctionValue(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC reflect_test.TestGCBits has: 
// func testGCBits(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{10689007 0xc003848b40}))  {
// 	 := reflect_test.TestGCBits(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC reflect_test.TestImplements has: 
// func testImplements(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{10537938 0xc0047ca160}))  {
// 	 := reflect_test.TestImplements(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC reflect_test.TestImplicitAppendConversion has: 
// func testImplicitAppendConversion(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{10536932 0xc0047c2ae0}))  {
// 	 := reflect_test.TestImplicitAppendConversion(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC reflect_test.TestImplicitCallConversion has: 
// func testImplicitCallConversion(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{10536609 0xc0047c25a0}))  {
// 	 := reflect_test.TestImplicitCallConversion(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC reflect_test.TestImplicitMapConversion has: 
// func testImplicitMapConversion(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{10533270 0xc00477fda0}))  {
// 	 := reflect_test.TestImplicitMapConversion(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC reflect_test.TestImplicitSendConversion has: 
// func testImplicitSendConversion(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{10536407 0xc0047b9a40}))  {
// 	 := reflect_test.TestImplicitSendConversion(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC reflect_test.TestImplicitSetConversion has: 
// func testImplicitSetConversion(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{10536099 0xc0047b9220}))  {
// 	 := reflect_test.TestImplicitSetConversion(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC reflect_test.TestImportPath has: 
// func testImportPath(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{10597270 0xc002b5cde0}))  {
// 	 := reflect_test.TestImportPath(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC reflect_test.TestIndex has: 
// func testIndex(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{10605882 0xc002e03840}))  {
// 	 := reflect_test.TestIndex(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC reflect_test.TestInterfaceExtraction has: 
// func testInterfaceExtraction(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{10562713 0xc0014f7c60}))  {
// 	 := reflect_test.TestInterfaceExtraction(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC reflect_test.TestInterfaceGet has: 
// func testInterfaceGet(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{10549862 0xc00487ef60}))  {
// 	 := reflect_test.TestInterfaceGet(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC reflect_test.TestInterfaceSet has: 
// func testInterfaceSet(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{10592764 0xc0025b0a40}))  {
// 	 := reflect_test.TestInterfaceSet(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC reflect_test.TestInterfaceValue has: 
// func testInterfaceValue(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{10550142 0xc00487f5e0}))  {
// 	 := reflect_test.TestInterfaceValue(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC reflect_test.TestInvalid has: 
// func testInvalid(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{10680800 0xc002f97fa0}))  {
// 	 := reflect_test.TestInvalid(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC reflect_test.TestIsNil has: 
// func testIsNil(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{10561752 0xc0014f6740}))  {
// 	 := reflect_test.TestIsNil(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC reflect_test.TestIssue22031 has: 
// func testIssue22031(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{10705302 0xc003a41800}))  {
// 	 := reflect_test.TestIssue22031(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC reflect_test.TestIssue22073 has: 
// func testIssue22073(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{10705782 0xc003a56120}))  {
// 	 := reflect_test.TestIssue22073(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC reflect_test.TestKeepFuncLive has: 
// func testKeepFuncLive(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{10682448 0xc002f57d80}))  {
// 	 := reflect_test.TestKeepFuncLive(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC reflect_test.TestKeepMethodLive has: 
// func testKeepMethodLive(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{10684119 0xc0037a7560}))  {
// 	 := reflect_test.TestKeepMethodLive(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC reflect_test.TestLargeGCProg has: 
// func testLargeGCProg(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{10681285 0xc002f567a0}))  {
// 	 := reflect_test.TestLargeGCProg(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC reflect_test.TestMakeFunc has: 
// func testMakeFunc(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{10580014 0xc002394b00}))  {
// 	 := reflect_test.TestMakeFunc(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC reflect_test.TestMakeFuncInterface has: 
// func testMakeFuncInterface(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{10580671 0xc002395780}))  {
// 	 := reflect_test.TestMakeFuncInterface(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC reflect_test.TestMakeFuncStackCopy has: 
// func testMakeFuncStackCopy(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{10679903 0xc002f96fc0}))  {
// 	 := reflect_test.TestMakeFuncStackCopy(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC reflect_test.TestMakeFuncVariadic has: 
// func testMakeFuncVariadic(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{10581178 0xc002420280}))  {
// 	 := reflect_test.TestMakeFuncVariadic(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC reflect_test.TestMap has: 
// func testMap(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{10563080 0xc001a1a4c0}))  {
// 	 := reflect_test.TestMap(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC reflect_test.TestMapAlloc has: 
// func testMapAlloc(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{10697711 0xc00398f840}))  {
// 	 := reflect_test.TestMapAlloc(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC reflect_test.TestMapOf has: 
// func testMapOf(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{10667127 0xc003052dc0}))  {
// 	 := reflect_test.TestMapOf(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC reflect_test.TestMapOfGCKeys has: 
// func testMapOfGCKeys(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{10667727 0xc003053880}))  {
// 	 := reflect_test.TestMapOfGCKeys(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC reflect_test.TestMapOfGCValues has: 
// func testMapOfGCValues(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{10668628 0xc003312a20}))  {
// 	 := reflect_test.TestMapOfGCValues(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC reflect_test.TestMapSetNil has: 
// func testMapSetNil(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{10548455 0xc00486e240}))  {
// 	 := reflect_test.TestMapSetNil(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC reflect_test.TestMethod has: 
// func testMethod(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{10582989 0xc0024e89c0}))  {
// 	 := reflect_test.TestMethod(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC reflect_test.TestMethod5 has: 
// func testMethod5(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{10591269 0xc0022fc540}))  {
// 	 := reflect_test.TestMethod5(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC reflect_test.TestMethodByNameUnExportedFirst has: 
// func testMethodByNameUnExportedFirst(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{10683515 0xc0037a6b00}))  {
// 	 := reflect_test.TestMethodByNameUnExportedFirst(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC reflect_test.TestMethodValue has: 
// func testMethodValue(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{10586231 0xc001450680}))  {
// 	 := reflect_test.TestMethodValue(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC reflect_test.TestNameBytesAreAligned has: 
// func testNameBytesAreAligned(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{10701359 0xc0039da8e0}))  {
// 	 := reflect_test.TestNameBytesAreAligned(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC reflect_test.TestNames has: 
// func testNames(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{10700401 0xc0039bf500}))  {
// 	 := reflect_test.TestNames(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC reflect_test.TestNestedMethods has: 
// func testNestedMethods(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{10600360 0xc002c06c00}))  {
// 	 := reflect_test.TestNestedMethods(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC reflect_test.TestNilMap has: 
// func testNilMap(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{10564456 0xc001a1be40}))  {
// 	 := reflect_test.TestNilMap(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC reflect_test.TestNilPtrValueSub has: 
// func testNilPtrValueSub(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{10562936 0xc001a1a1e0}))  {
// 	 := reflect_test.TestNilPtrValueSub(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC reflect_test.TestNumMethodOnDDD has: 
// func testNumMethodOnDDD(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{10601971 0xc002d2d180}))  {
// 	 := reflect_test.TestNumMethodOnDDD(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC reflect_test.TestOffsetLock has: 
// func testOffsetLock(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{10702404 0xc0039dbba0}))  {
// 	 := reflect_test.TestOffsetLock(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC reflect_test.TestOverflow has: 
// func testOverflow(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{10636716 0xc002cf6340}))  {
// 	 := reflect_test.TestOverflow(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC reflect_test.TestPtrPointTo has: 
// func testPtrPointTo(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{10547928 0xc00486a7e0}))  {
// 	 := reflect_test.TestPtrPointTo(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC reflect_test.TestPtrSetNil has: 
// func testPtrSetNil(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{10548260 0xc00486bd80}))  {
// 	 := reflect_test.TestPtrSetNil(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC reflect_test.TestPtrTo has: 
// func testPtrTo(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{10602113 0xc002d2d4a0}))  {
// 	 := reflect_test.TestPtrTo(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC reflect_test.TestPtrToGC has: 
// func testPtrToGC(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{10602573 0xc002d2dbe0}))  {
// 	 := reflect_test.TestPtrToGC(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC reflect_test.TestPtrToMethods has: 
// func testPtrToMethods(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{10697526 0xc00398f480}))  {
// 	 := reflect_test.TestPtrToMethods(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC reflect_test.TestReflectFuncTraceback has: 
// func testReflectFuncTraceback(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{10675497 0xc002f8cb00}))  {
// 	 := reflect_test.TestReflectFuncTraceback(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC reflect_test.TestReflectMethodTraceback has: 
// func testReflectMethodTraceback(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{10675609 0xc002f8cd40}))  {
// 	 := reflect_test.TestReflectMethodTraceback(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC reflect_test.TestSelect has: 
// func testSelect(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{10567522 0xc001bd7540}))  {
// 	 := reflect_test.TestSelect(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC reflect_test.TestSet has: 
// func testSet(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{10543421 0xc0047f1180}))  {
// 	 := reflect_test.TestSet(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC reflect_test.TestSetBytes has: 
// func testSetBytes(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{10611800 0xc0030818e0}))  {
// 	 := reflect_test.TestSetBytes(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC reflect_test.TestSetLenCap has: 
// func testSetLenCap(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{10608738 0xc002f13bc0}))  {
// 	 := reflect_test.TestSetLenCap(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC reflect_test.TestSetPanic has: 
// func testSetPanic(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{10613651 0xc003138940}))  {
// 	 := reflect_test.TestSetPanic(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC reflect_test.TestSetValue has: 
// func testSetValue(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{10544208 0xc0047fd600}))  {
// 	 := reflect_test.TestSetValue(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC reflect_test.TestSlice has: 
// func testSlice(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{10606374 0xc002e3c3e0}))  {
// 	 := reflect_test.TestSlice(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC reflect_test.TestSlice3 has: 
// func testSlice3(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{10607401 0xc002e3dbc0}))  {
// 	 := reflect_test.TestSlice3(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC reflect_test.TestSliceOf has: 
// func testSliceOf(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{10644597 0xc00259f440}))  {
// 	 := reflect_test.TestSliceOf(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC reflect_test.TestSliceOfGC has: 
// func testSliceOfGC(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{10645656 0xc002c9e7a0}))  {
// 	 := reflect_test.TestSliceOfGC(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC reflect_test.TestSliceOverflow has: 
// func testSliceOverflow(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{10645234 0xc002c9e000}))  {
// 	 := reflect_test.TestSliceOverflow(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC reflect_test.TestSmallNegativeInt has: 
// func testSmallNegativeInt(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{10605741 0xc002e034c0}))  {
// 	 := reflect_test.TestSmallNegativeInt(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC reflect_test.TestStructArg has: 
// func testStructArg(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{10610480 0xc0030800c0}))  {
// 	 := reflect_test.TestStructArg(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC reflect_test.TestStructOf has: 
// func testStructOf(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{10647291 0xc003140420}))  {
// 	 := reflect_test.TestStructOf(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC reflect_test.TestStructOfAlg has: 
// func testStructOfAlg(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{10655490 0xc0020b4b00}))  {
// 	 := reflect_test.TestStructOfAlg(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC reflect_test.TestStructOfDirectIface has: 
// func testStructOfDirectIface(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{10659218 0xc002f273c0}))  {
// 	 := reflect_test.TestStructOfDirectIface(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC reflect_test.TestStructOfExportRules has: 
// func testStructOfExportRules(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{10650529 0xc003173840}))  {
// 	 := reflect_test.TestStructOfExportRules(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC reflect_test.TestStructOfFieldName has: 
// func testStructOfFieldName(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{10646238 0xc002c9f640}))  {
// 	 := reflect_test.TestStructOfFieldName(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC reflect_test.TestStructOfGC has: 
// func testStructOfGC(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{10654817 0xc003187ac0}))  {
// 	 := reflect_test.TestStructOfGC(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC reflect_test.TestStructOfGenericAlg has: 
// func testStructOfGenericAlg(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{10656127 0xc0020b57e0}))  {
// 	 := reflect_test.TestStructOfGenericAlg(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC reflect_test.TestStructOfWithInterface has: 
// func testStructOfWithInterface(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{10660576 0xc002102ee0}))  {
// 	 := reflect_test.TestStructOfWithInterface(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC reflect_test.TestSwapper has: 
// func testSwapper(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{10702787 0xc003a064a0}))  {
// 	 := reflect_test.TestSwapper(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC reflect_test.TestTagGet has: 
// func testTagGet(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{10611348 0xc003080d40}))  {
// 	 := reflect_test.TestTagGet(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC reflect_test.TestTypeFieldOutOfRangePanic has: 
// func testTypeFieldOutOfRangePanic(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{10681564 0xc002f56cc0}))  {
// 	 := reflect_test.TestTypeFieldOutOfRangePanic(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC reflect_test.TestTypeOf has: 
// func testTypeOf(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{10558865 0xc00493e740}))  {
// 	 := reflect_test.TestTypeOf(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC reflect_test.TestTypeOfTypeOf has: 
// func testTypeOfTypeOf(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{10696636 0xc00398e820}))  {
// 	 := reflect_test.TestTypeOfTypeOf(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC reflect_test.TestTypeStrings has: 
// func testTypeStrings(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{10701596 0xc0039dad40}))  {
// 	 := reflect_test.TestTypeStrings(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC reflect_test.TestTypelinksSorted has: 
// func testTypelinksSorted(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{10669463 0xc003313a80}))  {
// 	 := reflect_test.TestTypelinksSorted(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC reflect_test.TestTypes has: 
// func testTypes(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{10543300 0xc0047ea220}))  {
// 	 := reflect_test.TestTypes(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC reflect_test.TestUnaddressableField has: 
// func testUnaddressableField(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{10704455 0xc003a40a20}))  {
// 	 := reflect_test.TestUnaddressableField(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC reflect_test.TestUnexported has: 
// func testUnexported(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{10612323 0xc00310a660}))  {
// 	 := reflect_test.TestUnexported(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC reflect_test.TestUnexportedMethods has: 
// func testUnexportedMethods(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{10600916 0xc002c07980}))  {
// 	 := reflect_test.TestUnexportedMethods(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC reflect_test.TestValueString has: 
// func testValueString(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{10680426 0xc002f97a60}))  {
// 	 := reflect_test.TestValueString(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC reflect_test.TestValueToString has: 
// func testValueToString(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{10547230 0xc00483d980}))  {
// 	 := reflect_test.TestValueToString(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC reflect_test.TestVariadic has: 
// func testVariadic(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{10609709 0xc002fb5000}))  {
// 	 := reflect_test.TestVariadic(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC reflect_test.TestVariadicMethodValue has: 
// func testVariadicMethodValue(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{10589192 0xc001525a20}))  {
// 	 := reflect_test.TestVariadicMethodValue(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC reflect_test.TestVariadicType has: 
// func testVariadicType(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{10599724 0xc002bbff00}))  {
// 	 := reflect_test.TestVariadicType(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC regexp.BenchmarkAnchoredLiteralLongNonMatch has: 
// func benchmarkAnchoredLiteralLongNonMatch(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{10821205 0xc004977ce0}))  {
// 	 := regexp.BenchmarkAnchoredLiteralLongNonMatch(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC regexp.BenchmarkAnchoredLiteralShortNonMatch has: 
// func benchmarkAnchoredLiteralShortNonMatch(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{10820993 0xc0049778e0}))  {
// 	 := regexp.BenchmarkAnchoredLiteralShortNonMatch(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC regexp.BenchmarkAnchoredLongMatch has: 
// func benchmarkAnchoredLongMatch(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{10821662 0xc003480640}))  {
// 	 := regexp.BenchmarkAnchoredLongMatch(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC regexp.BenchmarkAnchoredShortMatch has: 
// func benchmarkAnchoredShortMatch(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{10821460 0xc003480240}))  {
// 	 := regexp.BenchmarkAnchoredShortMatch(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC regexp.BenchmarkCompileOnepass has: 
// func benchmarkCompileOnepass(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{10850462 0xc001c18fe0}))  {
// 	 := regexp.BenchmarkCompileOnepass(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC regexp.BenchmarkFind has: 
// func benchmarkFind(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{10817956 0xc004925c80}))  {
// 	 := regexp.BenchmarkFind(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC regexp.BenchmarkFindAllNoMatches has: 
// func benchmarkFindAllNoMatches(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{10818287 0xc00493a300}))  {
// 	 := regexp.BenchmarkFindAllNoMatches(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC regexp.BenchmarkFindString has: 
// func benchmarkFindString(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{10818545 0xc00493a8c0}))  {
// 	 := regexp.BenchmarkFindString(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC regexp.BenchmarkFindStringSubmatch has: 
// func benchmarkFindStringSubmatch(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{10819334 0xc00493b760}))  {
// 	 := regexp.BenchmarkFindStringSubmatch(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC regexp.BenchmarkFindSubmatch has: 
// func benchmarkFindSubmatch(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{10818868 0xc00493af00}))  {
// 	 := regexp.BenchmarkFindSubmatch(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC regexp.BenchmarkLiteral has: 
// func benchmarkLiteral(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{10819783 0xc00493bf60}))  {
// 	 := regexp.BenchmarkLiteral(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC regexp.BenchmarkMatch has: 
// func benchmarkMatch(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{10842224 0xc002459260}))  {
// 	 := regexp.BenchmarkMatch(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC regexp.BenchmarkMatchClass has: 
// func benchmarkMatchClass(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{10820226 0xc0049769e0}))  {
// 	 := regexp.BenchmarkMatchClass(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC regexp.BenchmarkMatchClass_InRange has: 
// func benchmarkMatchClass_InRange(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{10820464 0xc004976f20}))  {
// 	 := regexp.BenchmarkMatchClass_InRange(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC regexp.BenchmarkMatchParallelCopied has: 
// func benchmarkMatchParallelCopied(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{10823387 0xc0034827e0}))  {
// 	 := regexp.BenchmarkMatchParallelCopied(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC regexp.BenchmarkMatchParallelShared has: 
// func benchmarkMatchParallelShared(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{10823139 0xc0034823c0}))  {
// 	 := regexp.BenchmarkMatchParallelShared(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC regexp.BenchmarkMatch_onepass_regex has: 
// func benchmarkMatch_onepass_regex(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{10842710 0xc002459d40}))  {
// 	 := regexp.BenchmarkMatch_onepass_regex(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC regexp.BenchmarkNotLiteral has: 
// func benchmarkNotLiteral(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{10820004 0xc0049764a0}))  {
// 	 := regexp.BenchmarkNotLiteral(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC regexp.BenchmarkNotOnePassShortA has: 
// func benchmarkNotOnePassShortA(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{10822106 0xc003480fa0}))  {
// 	 := regexp.BenchmarkNotOnePassShortA(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC regexp.BenchmarkNotOnePassShortB has: 
// func benchmarkNotOnePassShortB(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{10822492 0xc0034817a0}))  {
// 	 := regexp.BenchmarkNotOnePassShortB(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC regexp.BenchmarkOnePassLongNotPrefix has: 
// func benchmarkOnePassLongNotPrefix(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{10822914 0xc003481fa0}))  {
// 	 := regexp.BenchmarkOnePassLongNotPrefix(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC regexp.BenchmarkOnePassLongPrefix has: 
// func benchmarkOnePassLongPrefix(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{10822688 0xc003481ba0}))  {
// 	 := regexp.BenchmarkOnePassLongPrefix(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC regexp.BenchmarkOnePassShortA has: 
// func benchmarkOnePassShortA(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{10821912 0xc003480ba0}))  {
// 	 := regexp.BenchmarkOnePassShortA(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC regexp.BenchmarkOnePassShortB has: 
// func benchmarkOnePassShortB(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{10822296 0xc0034813a0}))  {
// 	 := regexp.BenchmarkOnePassShortB(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC regexp.BenchmarkQuoteMetaAll has: 
// func benchmarkQuoteMetaAll(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{10823663 0xc003482ce0}))  {
// 	 := regexp.BenchmarkQuoteMetaAll(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC regexp.BenchmarkQuoteMetaNone has: 
// func benchmarkQuoteMetaNone(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{10823961 0xc003483360}))  {
// 	 := regexp.BenchmarkQuoteMetaNone(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC regexp.BenchmarkReplaceAll has: 
// func benchmarkReplaceAll(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{10820776 0xc0049774c0}))  {
// 	 := regexp.BenchmarkReplaceAll(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC regexp.TestBadCompile has: 
// func testBadCompile(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{10802423 0xc0047a8f00}))  {
// 	 := regexp.TestBadCompile(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC regexp.TestCompileOnePass has: 
// func testCompileOnePass(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{10849178 0xc0024f3960}))  {
// 	 := regexp.TestCompileOnePass(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC regexp.TestCopyMatch has: 
// func testCopyMatch(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{10803785 0xc0047bac20}))  {
// 	 := regexp.TestCopyMatch(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC regexp.TestFind has: 
// func testFind(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{10789697 0xc0045e2e80}))  {
// 	 := regexp.TestFind(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC regexp.TestFindAll has: 
// func testFindAll(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{10792186 0xc004629ce0}))  {
// 	 := regexp.TestFindAll(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC regexp.TestFindAllIndex has: 
// func testFindAllIndex(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{10794421 0xc00467a620}))  {
// 	 := regexp.TestFindAllIndex(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC regexp.TestFindAllString has: 
// func testFindAllString(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{10792978 0xc00463cb80}))  {
// 	 := regexp.TestFindAllString(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC regexp.TestFindAllStringIndex has: 
// func testFindAllStringIndex(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{10794593 0xc00467a9e0}))  {
// 	 := regexp.TestFindAllStringIndex(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC regexp.TestFindAllStringSubmatch has: 
// func testFindAllStringSubmatch(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{10799139 0xc0046e1b60}))  {
// 	 := regexp.TestFindAllStringSubmatch(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC regexp.TestFindAllStringSubmatchIndex has: 
// func testFindAllStringSubmatchIndex(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{10800621 0xc004727620}))  {
// 	 := regexp.TestFindAllStringSubmatchIndex(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC regexp.TestFindAllSubmatch has: 
// func testFindAllSubmatch(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{10798449 0xc0046e0ee0}))  {
// 	 := regexp.TestFindAllSubmatch(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC regexp.TestFindAllSubmatchIndex has: 
// func testFindAllSubmatchIndex(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{10800425 0xc004727260}))  {
// 	 := regexp.TestFindAllSubmatchIndex(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC regexp.TestFindIndex has: 
// func testFindIndex(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{10791667 0xc004629260}))  {
// 	 := regexp.TestFindIndex(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC regexp.TestFindReaderIndex has: 
// func testFindReaderIndex(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{10791983 0xc004629900}))  {
// 	 := regexp.TestFindReaderIndex(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC regexp.TestFindReaderSubmatchIndex has: 
// func testFindReaderSubmatchIndex(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{10798213 0xc0046e0b00}))  {
// 	 := regexp.TestFindReaderSubmatchIndex(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC regexp.TestFindString has: 
// func testFindString(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{10790420 0xc0045e3c40}))  {
// 	 := regexp.TestFindString(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC regexp.TestFindStringIndex has: 
// func testFindStringIndex(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{10791826 0xc0046295c0}))  {
// 	 := regexp.TestFindStringIndex(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC regexp.TestFindStringSubmatch has: 
// func testFindStringSubmatch(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{10796529 0xc004682ce0}))  {
// 	 := regexp.TestFindStringSubmatch(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC regexp.TestFindStringSubmatchIndex has: 
// func testFindStringSubmatchIndex(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{10798032 0xc0046e07c0}))  {
// 	 := regexp.TestFindStringSubmatchIndex(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC regexp.TestFindSubmatch has: 
// func testFindSubmatch(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{10795406 0xc00467b8c0}))  {
// 	 := regexp.TestFindSubmatch(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC regexp.TestFindSubmatchIndex has: 
// func testFindSubmatchIndex(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{10797849 0xc0046e0460}))  {
// 	 := regexp.TestFindSubmatchIndex(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC regexp.TestFowler has: 
// func testFowler(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{10833052 0xc001d45100}))  {
// 	 := regexp.TestFowler(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC regexp.TestGoodCompile has: 
// func testGoodCompile(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{10802313 0xc0047a8c80}))  {
// 	 := regexp.TestGoodCompile(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC regexp.TestLiteralPrefix has: 
// func testLiteralPrefix(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{10813113 0xc004879c00}))  {
// 	 := regexp.TestLiteralPrefix(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC regexp.TestLongest has: 
// func testLongest(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{10843877 0xc00246f180}))  {
// 	 := regexp.TestLongest(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC regexp.TestMatch has: 
// func testMatch(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{10802984 0xc0047a9bc0}))  {
// 	 := regexp.TestMatch(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC regexp.TestMatchFunction has: 
// func testMatchFunction(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{10803337 0xc0047ba360}))  {
// 	 := regexp.TestMatchFunction(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC regexp.TestMergeRuneSet has: 
// func testMergeRuneSet(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{10847514 0xc001b77f80}))  {
// 	 := regexp.TestMergeRuneSet(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC regexp.TestOnePassCutoff has: 
// func testOnePassCutoff(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{10817211 0xc0049251c0}))  {
// 	 := regexp.TestOnePassCutoff(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC regexp.TestParseAndCompile has: 
// func testParseAndCompile(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{10816582 0xc004924540}))  {
// 	 := regexp.TestParseAndCompile(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC regexp.TestProgramTooLongForBacktrack has: 
// func testProgramTooLongForBacktrack(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{10844328 0xc00246f920}))  {
// 	 := regexp.TestProgramTooLongForBacktrack(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC regexp.TestQuoteMeta has: 
// func testQuoteMeta(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{10812228 0xc004879020}))  {
// 	 := regexp.TestQuoteMeta(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC regexp.TestRE2Exhaustive has: 
// func testRE2Exhaustive(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{10706328 0xc003a57680}))  {
// 	 := regexp.TestRE2Exhaustive(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC regexp.TestRE2Search has: 
// func testRE2Search(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{10826351 0xc003483fa0}))  {
// 	 := regexp.TestRE2Search(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC regexp.TestReplaceAll has: 
// func testReplaceAll(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{10808637 0xc004826f80}))  {
// 	 := regexp.TestReplaceAll(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC regexp.TestReplaceAllFunc has: 
// func testReplaceAllFunc(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{10810778 0xc00482d760}))  {
// 	 := regexp.TestReplaceAllFunc(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC regexp.TestReplaceAllLiteral has: 
// func testReplaceAllLiteral(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{10809296 0xc004827c80}))  {
// 	 := regexp.TestReplaceAllLiteral(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC regexp.TestRunOnePass has: 
// func testRunOnePass(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{10850037 0xc001c187c0}))  {
// 	 := regexp.TestRunOnePass(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC regexp.TestSplit has: 
// func testSplit(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{10815868 0xc0048e36a0}))  {
// 	 := regexp.TestSplit(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC regexp.TestSubexp has: 
// func testSubexp(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{10814123 0xc004880f40}))  {
// 	 := regexp.TestSubexp(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC regexp.TestSwitchBacktrack has: 
// func testSwitchBacktrack(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{10817679 0xc004925880}))  {
// 	 := regexp.TestSwitchBacktrack(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC regexp_test.Example has: 
// func example()  {
// 	 := regexp_test.Example()
// 	...ABEND: TODO...
// }
// 
GO FUNC regexp_test.ExampleMatchString has: 
// func exampleMatchString()  {
// 	 := regexp_test.ExampleMatchString()
// 	...ABEND: TODO...
// }
// 
GO FUNC regexp_test.ExampleQuoteMeta has: 
// func exampleQuoteMeta()  {
// 	 := regexp_test.ExampleQuoteMeta()
// 	...ABEND: TODO...
// }
// 
GO FUNC regexp_test.ExampleRegexp_Expand has: 
// func exampleRegexp_Expand()  {
// 	 := regexp_test.ExampleRegexp_Expand()
// 	...ABEND: TODO...
// }
// 
GO FUNC regexp_test.ExampleRegexp_ExpandString has: 
// func exampleRegexp_ExpandString()  {
// 	 := regexp_test.ExampleRegexp_ExpandString()
// 	...ABEND: TODO...
// }
// 
GO FUNC regexp_test.ExampleRegexp_FindAllString has: 
// func exampleRegexp_FindAllString()  {
// 	 := regexp_test.ExampleRegexp_FindAllString()
// 	...ABEND: TODO...
// }
// 
GO FUNC regexp_test.ExampleRegexp_FindAllStringSubmatch has: 
// func exampleRegexp_FindAllStringSubmatch()  {
// 	 := regexp_test.ExampleRegexp_FindAllStringSubmatch()
// 	...ABEND: TODO...
// }
// 
GO FUNC regexp_test.ExampleRegexp_FindAllStringSubmatchIndex has: 
// func exampleRegexp_FindAllStringSubmatchIndex()  {
// 	 := regexp_test.ExampleRegexp_FindAllStringSubmatchIndex()
// 	...ABEND: TODO...
// }
// 
GO FUNC regexp_test.ExampleRegexp_FindAllSubmatchIndex has: 
// func exampleRegexp_FindAllSubmatchIndex()  {
// 	 := regexp_test.ExampleRegexp_FindAllSubmatchIndex()
// 	...ABEND: TODO...
// }
// 
GO FUNC regexp_test.ExampleRegexp_FindIndex has: 
// func exampleRegexp_FindIndex()  {
// 	 := regexp_test.ExampleRegexp_FindIndex()
// 	...ABEND: TODO...
// }
// 
GO FUNC regexp_test.ExampleRegexp_FindString has: 
// func exampleRegexp_FindString()  {
// 	 := regexp_test.ExampleRegexp_FindString()
// 	...ABEND: TODO...
// }
// 
GO FUNC regexp_test.ExampleRegexp_FindStringIndex has: 
// func exampleRegexp_FindStringIndex()  {
// 	 := regexp_test.ExampleRegexp_FindStringIndex()
// 	...ABEND: TODO...
// }
// 
GO FUNC regexp_test.ExampleRegexp_FindStringSubmatch has: 
// func exampleRegexp_FindStringSubmatch()  {
// 	 := regexp_test.ExampleRegexp_FindStringSubmatch()
// 	...ABEND: TODO...
// }
// 
GO FUNC regexp_test.ExampleRegexp_MatchString has: 
// func exampleRegexp_MatchString()  {
// 	 := regexp_test.ExampleRegexp_MatchString()
// 	...ABEND: TODO...
// }
// 
GO FUNC regexp_test.ExampleRegexp_ReplaceAllLiteralString has: 
// func exampleRegexp_ReplaceAllLiteralString()  {
// 	 := regexp_test.ExampleRegexp_ReplaceAllLiteralString()
// 	...ABEND: TODO...
// }
// 
GO FUNC regexp_test.ExampleRegexp_ReplaceAllString has: 
// func exampleRegexp_ReplaceAllString()  {
// 	 := regexp_test.ExampleRegexp_ReplaceAllString()
// 	...ABEND: TODO...
// }
// 
GO FUNC regexp_test.ExampleRegexp_Split has: 
// func exampleRegexp_Split()  {
// 	 := regexp_test.ExampleRegexp_Split()
// 	...ABEND: TODO...
// }
// 
GO FUNC regexp_test.ExampleRegexp_SubexpNames has: 
// func exampleRegexp_SubexpNames()  {
// 	 := regexp_test.ExampleRegexp_SubexpNames()
// 	...ABEND: TODO...
// }
// 
GO FUNC ring.TestCornerCases has: 
// func testCornerCases(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{876150 0xc0008fe920}))  {
// 	 := ring.TestCornerCases(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC ring.TestLink1 has: 
// func testLink1(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{876779 0xc0008ffd20}))  {
// 	 := ring.TestLink1(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC ring.TestLink2 has: 
// func testLink2(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{877133 0xc0009025c0}))  {
// 	 := ring.TestLink2(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC ring.TestLink3 has: 
// func testLink3(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{877426 0xc000902e60}))  {
// 	 := ring.TestLink3(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC ring.TestLinkUnlink has: 
// func testLinkUnlink(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{877899 0xc000903c40}))  {
// 	 := ring.TestLinkUnlink(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC ring.TestMoveEmptyRing has: 
// func testMoveEmptyRing(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{878188 0xc00090e360}))  {
// 	 := ring.TestMoveEmptyRing(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC ring.TestNew has: 
// func testNew(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{876606 0xc0008ff7e0}))  {
// 	 := ring.TestNew(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC ring.TestUnlink has: 
// func testUnlink(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{877556 0xc000903260}))  {
// 	 := ring.TestUnlink(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC ring_test.ExampleRing_Do has: 
// func exampleRing_Do()  {
// 	 := ring_test.ExampleRing_Do()
// 	...ABEND: TODO...
// }
// 
GO FUNC ring_test.ExampleRing_Len has: 
// func exampleRing_Len()  {
// 	 := ring_test.ExampleRing_Len()
// 	...ABEND: TODO...
// }
// 
GO FUNC ring_test.ExampleRing_Link has: 
// func exampleRing_Link()  {
// 	 := ring_test.ExampleRing_Link()
// 	...ABEND: TODO...
// }
// 
GO FUNC ring_test.ExampleRing_Move has: 
// func exampleRing_Move()  {
// 	 := ring_test.ExampleRing_Move()
// 	...ABEND: TODO...
// }
// 
GO FUNC ring_test.ExampleRing_Next has: 
// func exampleRing_Next()  {
// 	 := ring_test.ExampleRing_Next()
// 	...ABEND: TODO...
// }
// 
GO FUNC ring_test.ExampleRing_Prev has: 
// func exampleRing_Prev()  {
// 	 := ring_test.ExampleRing_Prev()
// 	...ABEND: TODO...
// }
// 
GO FUNC ring_test.ExampleRing_Unlink has: 
// func exampleRing_Unlink()  {
// 	 := ring_test.ExampleRing_Unlink()
// 	...ABEND: TODO...
// }
// 
GO FUNC rpc.Accept has: 
// func accept(lis ABEND881(unrecognized Expr type *ast.SelectorExpr at: &{net Listener}))  {
// 	 := rpc.Accept(lis)
// 	...ABEND: TODO...
// }
// 
GO FUNC rpc.BenchmarkEndToEnd has: 
// func benchmarkEndToEnd(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{9745505 0xc00481f880}))  {
// 	 := rpc.BenchmarkEndToEnd(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC rpc.BenchmarkEndToEndAsync has: 
// func benchmarkEndToEndAsync(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{9745664 0xc00481fb40}))  {
// 	 := rpc.BenchmarkEndToEndAsync(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC rpc.BenchmarkEndToEndAsyncHTTP has: 
// func benchmarkEndToEndAsyncHTTP(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{9745754 0xc00481fca0}))  {
// 	 := rpc.BenchmarkEndToEndAsyncHTTP(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC rpc.BenchmarkEndToEndHTTP has: 
// func benchmarkEndToEndHTTP(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{9745585 0xc00481f9e0}))  {
// 	 := rpc.BenchmarkEndToEndHTTP(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC rpc.HandleHTTP has: 
// func handleHTTP()  {
// 	 := rpc.HandleHTTP()
// 	...ABEND: TODO...
// }
// 
GO FUNC rpc.ServeCodec has: 
// func serveCodec(codec Object)  {
// 	 := rpc.ServeCodec(codec)
// 	...ABEND: TODO...
// }
// 
GO FUNC rpc.ServeConn has: 
// func serveConn(conn ABEND881(unrecognized Expr type *ast.SelectorExpr at: &{io ReadWriteCloser}))  {
// 	 := rpc.ServeConn(conn)
// 	...ABEND: TODO...
// }
// 
GO FUNC rpc.TestAcceptExitAfterListenerClose has: 
// func testAcceptExitAfterListenerClose(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{9742502 0xc004811ce0}))  {
// 	 := rpc.TestAcceptExitAfterListenerClose(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC rpc.TestBuiltinTypes has: 
// func testBuiltinTypes(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{9734712 0xc0047f5160}))  {
// 	 := rpc.TestBuiltinTypes(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC rpc.TestClientWriteError has: 
// func testClientWriteError(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{9741276 0xc004810460}))  {
// 	 := rpc.TestClientWriteError(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC rpc.TestCloseCodec has: 
// func testCloseCodec(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{9746499 0xc00482a7a0}))  {
// 	 := rpc.TestCloseCodec(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC rpc.TestCountMallocs has: 
// func testCountMallocs(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{9740460 0xc00480d660}))  {
// 	 := rpc.TestCountMallocs(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC rpc.TestCountMallocsOverHTTP has: 
// func testCountMallocsOverHTTP(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{9740729 0xc00480da80}))  {
// 	 := rpc.TestCountMallocsOverHTTP(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC rpc.TestErrorAfterClientClose has: 
// func testErrorAfterClientClose(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{9742049 0xc004811580}))  {
// 	 := rpc.TestErrorAfterClientClose(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC rpc.TestGobError has: 
// func testGobError(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{9746981 0xc00482af80}))  {
// 	 := rpc.TestGobError(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC rpc.TestHTTP has: 
// func testHTTP(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{9733990 0xc0047f4280}))  {
// 	 := rpc.TestHTTP(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC rpc.TestRPC has: 
// func testRPC(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{9729452 0xc0047e6960}))  {
// 	 := rpc.TestRPC(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC rpc.TestRegistrationError has: 
// func testRegistrationError(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{9738334 0xc004803400}))  {
// 	 := rpc.TestRegistrationError(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC rpc.TestSendDeadlock has: 
// func testSendDeadlock(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{9739312 0xc004803fe0}))  {
// 	 := rpc.TestSendDeadlock(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC rpc.TestServeRequest has: 
// func testServeRequest(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{9737106 0xc0047fde60}))  {
// 	 := rpc.TestServeRequest(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC rpc.TestShutdown has: 
// func testShutdown(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{9742778 0xc004816260}))  {
// 	 := rpc.TestShutdown(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC rpc.TestTCPClose has: 
// func testTCPClose(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{9741592 0xc004810ac0}))  {
// 	 := rpc.TestTCPClose(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC rsa.Benchmark3PrimeRSA2048Decrypt has: 
// func benchmark3PrimeRSA2048Decrypt(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{1384338 0xc000ce60c0}))  {
// 	 := rsa.Benchmark3PrimeRSA2048Decrypt(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC rsa.BenchmarkRSA2048Decrypt has: 
// func benchmarkRSA2048Decrypt(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{1383332 0xc000ce1840}))  {
// 	 := rsa.BenchmarkRSA2048Decrypt(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC rsa.BenchmarkRSA2048Sign has: 
// func benchmarkRSA2048Sign(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{1384110 0xc000ce1c00}))  {
// 	 := rsa.BenchmarkRSA2048Sign(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC rsa.ExampleDecryptOAEP has: 
// func exampleDecryptOAEP()  {
// 	 := rsa.ExampleDecryptOAEP()
// 	...ABEND: TODO...
// }
// 
GO FUNC rsa.ExampleDecryptPKCS1v15SessionKey has: 
// func exampleDecryptPKCS1v15SessionKey()  {
// 	 := rsa.ExampleDecryptPKCS1v15SessionKey()
// 	...ABEND: TODO...
// }
// 
GO FUNC rsa.ExampleEncryptOAEP has: 
// func exampleEncryptOAEP()  {
// 	 := rsa.ExampleEncryptOAEP()
// 	...ABEND: TODO...
// }
// 
GO FUNC rsa.ExampleSignPKCS1v15 has: 
// func exampleSignPKCS1v15()  {
// 	 := rsa.ExampleSignPKCS1v15()
// 	...ABEND: TODO...
// }
// 
GO FUNC rsa.ExampleVerifyPKCS1v15 has: 
// func exampleVerifyPKCS1v15()  {
// 	 := rsa.ExampleVerifyPKCS1v15()
// 	...ABEND: TODO...
// }
// 
GO FUNC rsa.Test3PrimeKeyGeneration has: 
// func test3PrimeKeyGeneration(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{1378681 0xc000cda7a0}))  {
// 	 := rsa.Test3PrimeKeyGeneration(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC rsa.Test4PrimeKeyGeneration has: 
// func test4PrimeKeyGeneration(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{1378920 0xc000cdac00}))  {
// 	 := rsa.Test4PrimeKeyGeneration(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC rsa.TestDecryptOAEP has: 
// func testDecryptOAEP(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{1387902 0xc000ce76c0}))  {
// 	 := rsa.TestDecryptOAEP(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC rsa.TestDecryptPKCS1v15 has: 
// func testDecryptPKCS1v15(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{1350723 0xc000c73800}))  {
// 	 := rsa.TestDecryptPKCS1v15(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC rsa.TestEMSAPSS has: 
// func testEMSAPSS(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{1396980 0xc000d0c0a0}))  {
// 	 := rsa.TestEMSAPSS(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC rsa.TestEncryptOAEP has: 
// func testEncryptOAEP(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{1387362 0xc000ce6ac0}))  {
// 	 := rsa.TestEncryptOAEP(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC rsa.TestEncryptPKCS1v15 has: 
// func testEncryptPKCS1v15(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{1351391 0xc000c78340}))  {
// 	 := rsa.TestEncryptPKCS1v15(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC rsa.TestEncryptPKCS1v15DecrypterSessionKey has: 
// func testEncryptPKCS1v15DecrypterSessionKey(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{1353227 0xc000c79c00}))  {
// 	 := rsa.TestEncryptPKCS1v15DecrypterSessionKey(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC rsa.TestEncryptPKCS1v15SessionKey has: 
// func testEncryptPKCS1v15SessionKey(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{1352826 0xc000c79540}))  {
// 	 := rsa.TestEncryptPKCS1v15SessionKey(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC rsa.TestGnuTLSKey has: 
// func testGnuTLSKey(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{1379884 0xc000cdbca0}))  {
// 	 := rsa.TestGnuTLSKey(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC rsa.TestImpossibleKeyGeneration has: 
// func testImpossibleKeyGeneration(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{1379562 0xc000cdb700}))  {
// 	 := rsa.TestImpossibleKeyGeneration(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC rsa.TestKeyGeneration has: 
// func testKeyGeneration(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{1378357 0xc000cda120}))  {
// 	 := rsa.TestKeyGeneration(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC rsa.TestNPrimeKeyGeneration has: 
// func testNPrimeKeyGeneration(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{1379159 0xc000cdb060}))  {
// 	 := rsa.TestNPrimeKeyGeneration(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC rsa.TestNonZeroRandomBytes has: 
// func testNonZeroRandomBytes(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{1353794 0xc000c80560}))  {
// 	 := rsa.TestNonZeroRandomBytes(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC rsa.TestOverlongMessagePKCS1v15 has: 
// func testOverlongMessagePKCS1v15(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{1355157 0xc000c81d00}))  {
// 	 := rsa.TestOverlongMessagePKCS1v15(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC rsa.TestPSSGolden has: 
// func testPSSGolden(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{1399368 0xc000d0ecc0}))  {
// 	 := rsa.TestPSSGolden(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC rsa.TestPSSNilOpts has: 
// func testPSSNilOpts(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{1402354 0xc000d17800}))  {
// 	 := rsa.TestPSSNilOpts(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC rsa.TestPSSOpenSSL has: 
// func testPSSOpenSSL(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{1401594 0xc000d16a00}))  {
// 	 := rsa.TestPSSOpenSSL(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC rsa.TestPSSSigning has: 
// func testPSSSigning(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{1402540 0xc000d17c60}))  {
// 	 := rsa.TestPSSSigning(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC rsa.TestShortSessionKey has: 
// func testShortSessionKey(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{1356316 0xc000c869c0}))  {
// 	 := rsa.TestShortSessionKey(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC rsa.TestSignPKCS1v15 has: 
// func testSignPKCS1v15(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{1354414 0xc000c80c80}))  {
// 	 := rsa.TestSignPKCS1v15(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC rsa.TestUnpaddedSignature has: 
// func testUnpaddedSignature(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{1355460 0xc000c86020}))  {
// 	 := rsa.TestUnpaddedSignature(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC rsa.TestVerifyPKCS1v15 has: 
// func testVerifyPKCS1v15(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{1354823 0xc000c815a0}))  {
// 	 := rsa.TestVerifyPKCS1v15(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC runtime.BenchSetType has: 
// func benchSetType(n int, x ABEND881(unrecognized Expr type *ast.InterfaceType at: &{11376595 0xc003bbe8d0 false}))  {
// 	 := runtime.BenchSetType(n, x)
// 	...ABEND: TODO...
// }
// 
GO FUNC runtime.BlockOnSystemStack has: 
// func blockOnSystemStack()  {
// 	 := runtime.BlockOnSystemStack()
// 	...ABEND: TODO...
// }
// 
GO FUNC runtime.Breakpoint has: 
// func breakpoint()  {
// 	 := runtime.Breakpoint()
// 	...ABEND: TODO...
// }
// 
GO FUNC runtime.G0StackOverflow has: 
// func g0StackOverflow()  {
// 	 := runtime.G0StackOverflow()
// 	...ABEND: TODO...
// }
// 
GO FUNC runtime.GC has: 
// func gC()  {
// 	 := runtime.GC()
// 	...ABEND: TODO...
// }
// 
GO FUNC runtime.Goexit has: 
// func goexit()  {
// 	 := runtime.Goexit()
// 	...ABEND: TODO...
// }
// 
GO FUNC runtime.Gosched has: 
// func gosched()  {
// 	 := runtime.Gosched()
// 	...ABEND: TODO...
// }
// 
GO FUNC runtime.KeepAlive has: 
// func keepAlive(x ABEND881(unrecognized Expr type *ast.InterfaceType at: &{12483455 0xc00580e360 false}))  {
// 	 := runtime.KeepAlive(x)
// 	...ABEND: TODO...
// }
// 
GO FUNC runtime.KeepNArenaHints has: 
// func keepNArenaHints(n int)  {
// 	 := runtime.KeepNArenaHints(n)
// 	...ABEND: TODO...
// }
// 
GO FUNC runtime.LFStackPush has: 
// func lFStackPush(head ABEND881(unrecognized Expr type *ast.StarExpr at: &{11373486 uint64}), node ABEND881(unrecognized Expr type *ast.StarExpr at: &{11373500 LFNode}))  {
// 	 := runtime.LFStackPush(head, node)
// 	...ABEND: TODO...
// }
// 
GO FUNC runtime.LockOSThread has: 
// func lockOSThread()  {
// 	 := runtime.LockOSThread()
// 	...ABEND: TODO...
// }
// 
GO FUNC runtime.MemclrBytes has: 
// func memclrBytes(b ABEND881(unrecognized Expr type *ast.ArrayType at: &{11376090 <nil> byte}))  {
// 	 := runtime.MemclrBytes(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC runtime.ReadMemStats has: 
// func readMemStats(m ABEND881(unrecognized Expr type *ast.StarExpr at: &{11041602 MemStats}))  {
// 	 := runtime.ReadMemStats(m)
// 	...ABEND: TODO...
// }
// 
GO FUNC runtime.RunSchedLocalQueueEmptyTest has: 
// func runSchedLocalQueueEmptyTest(iters int)  {
// 	 := runtime.RunSchedLocalQueueEmptyTest(iters)
// 	...ABEND: TODO...
// }
// 
GO FUNC runtime.RunSchedLocalQueueStealTest has: 
// func runSchedLocalQueueStealTest()  {
// 	 := runtime.RunSchedLocalQueueStealTest()
// 	...ABEND: TODO...
// }
// 
GO FUNC runtime.RunSchedLocalQueueTest has: 
// func runSchedLocalQueueTest()  {
// 	 := runtime.RunSchedLocalQueueTest()
// 	...ABEND: TODO...
// }
// 
GO FUNC runtime.RunStealOrderTest has: 
// func runStealOrderTest()  {
// 	 := runtime.RunStealOrderTest()
// 	...ABEND: TODO...
// }
// 
GO FUNC runtime.SetBlockProfileRate has: 
// func setBlockProfileRate(rate int)  {
// 	 := runtime.SetBlockProfileRate(rate)
// 	...ABEND: TODO...
// }
// 
GO FUNC runtime.SetCPUProfileRate has: 
// func setCPUProfileRate(hz int)  {
// 	 := runtime.SetCPUProfileRate(hz)
// 	...ABEND: TODO...
// }
// 
GO FUNC runtime.SetCgoTraceback has: 
// func setCgoTraceback(version int, traceback ABEND881(unrecognized Expr type *ast.SelectorExpr at: &{unsafe Pointer}), context ABEND881(unrecognized Expr type *ast.SelectorExpr at: &{unsafe Pointer}), symbolizer ABEND881(unrecognized Expr type *ast.SelectorExpr at: &{unsafe Pointer}))  {
// 	 := runtime.SetCgoTraceback(version, traceback, context, symbolizer)
// 	...ABEND: TODO...
// }
// 
GO FUNC runtime.SetEnvs has: 
// func setEnvs(e ABEND881(unrecognized Expr type *ast.ArrayType at: &{11376491 <nil> string}))  {
// 	 := runtime.SetEnvs(e)
// 	...ABEND: TODO...
// }
// 
GO FUNC runtime.SetFinalizer has: 
// func setFinalizer(obj ABEND881(unrecognized Expr type *ast.InterfaceType at: &{12478954 0xc0057fc900 false}), finalizer ABEND881(unrecognized Expr type *ast.InterfaceType at: &{12478977 0xc0057fc930 false}))  {
// 	 := runtime.SetFinalizer(obj, finalizer)
// 	...ABEND: TODO...
// }
// 
GO FUNC runtime.SetTracebackEnv has: 
// func setTracebackEnv(level string)  {
// 	 := runtime.SetTracebackEnv(level)
// 	...ABEND: TODO...
// }
// 
GO FUNC runtime.StopTrace has: 
// func stopTrace()  {
// 	 := runtime.StopTrace()
// 	...ABEND: TODO...
// }
// 
GO FUNC runtime.UnlockOSThread has: 
// func unlockOSThread()  {
// 	 := runtime.UnlockOSThread()
// 	...ABEND: TODO...
// }
// 
GO FUNC runtime._ExternalCode has: 
// func _ExternalCode()  {
// 	 := runtime._ExternalCode()
// 	...ABEND: TODO...
// }
// 
GO FUNC runtime._GC has: 
// func _GC()  {
// 	 := runtime._GC()
// 	...ABEND: TODO...
// }
// 
GO FUNC runtime._LostExternalCode has: 
// func _LostExternalCode()  {
// 	 := runtime._LostExternalCode()
// 	...ABEND: TODO...
// }
// 
GO FUNC runtime._LostSIGPROFDuringAtomic64 has: 
// func _LostSIGPROFDuringAtomic64()  {
// 	 := runtime._LostSIGPROFDuringAtomic64()
// 	...ABEND: TODO...
// }
// 
GO FUNC runtime._System has: 
// func _System()  {
// 	 := runtime._System()
// 	...ABEND: TODO...
// }
// 
GO FUNC runtime._VDSO has: 
// func _VDSO()  {
// 	 := runtime._VDSO()
// 	...ABEND: TODO...
// }
// 
GO FUNC runtime._cgo_panic_internal has: 
// func _cgo_panic_internal(p ABEND881(unrecognized Expr type *ast.StarExpr at: &{12424135 byte}))  {
// 	 := runtime._cgo_panic_internal(p)
// 	...ABEND: TODO...
// }
// 
GO FUNC runtime_test.BenchmarkAlignedLoad has: 
// func benchmarkAlignedLoad(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{12460020 0xc0057ca140}))  {
// 	 := runtime_test.BenchmarkAlignedLoad(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC runtime_test.BenchmarkAllocation has: 
// func benchmarkAllocation(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{11209756 0xc0026deba0}))  {
// 	 := runtime_test.BenchmarkAllocation(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC runtime_test.BenchmarkAppend has: 
// func benchmarkAppend(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{11387019 0xc003bea740}))  {
// 	 := runtime_test.BenchmarkAppend(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC runtime_test.BenchmarkAppendGrowByte has: 
// func benchmarkAppendGrowByte(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{11387217 0xc003beacc0}))  {
// 	 := runtime_test.BenchmarkAppendGrowByte(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC runtime_test.BenchmarkAppendGrowString has: 
// func benchmarkAppendGrowString(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{11387374 0xc003beb0a0}))  {
// 	 := runtime_test.BenchmarkAppendGrowString(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC runtime_test.BenchmarkAppendInPlace has: 
// func benchmarkAppendInPlace(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{11390582 0xc003bf9000}))  {
// 	 := runtime_test.BenchmarkAppendInPlace(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC runtime_test.BenchmarkAppendSlice has: 
// func benchmarkAppendSlice(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{11387536 0xc003beb4c0}))  {
// 	 := runtime_test.BenchmarkAppendSlice(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC runtime_test.BenchmarkAppendSliceLarge has: 
// func benchmarkAppendSliceLarge(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{11387865 0xc003bebd40}))  {
// 	 := runtime_test.BenchmarkAppendSliceLarge(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC runtime_test.BenchmarkAppendSpecialCase has: 
// func benchmarkAppendSpecialCase(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{11388539 0xc003bf4ca0}))  {
// 	 := runtime_test.BenchmarkAppendSpecialCase(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC runtime_test.BenchmarkAppendStr has: 
// func benchmarkAppendStr(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{11388190 0xc003bf4520}))  {
// 	 := runtime_test.BenchmarkAppendStr(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC runtime_test.BenchmarkArrayEqual has: 
// func benchmarkArrayEqual(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{11086839 0xc003e70460}))  {
// 	 := runtime_test.BenchmarkArrayEqual(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC runtime_test.BenchmarkAssertE2E has: 
// func benchmarkAssertE2E(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{11367065 0xc003b91980}))  {
// 	 := runtime_test.BenchmarkAssertE2E(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC runtime_test.BenchmarkAssertE2E2 has: 
// func benchmarkAssertE2E2(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{11367590 0xc003b94780}))  {
// 	 := runtime_test.BenchmarkAssertE2E2(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC runtime_test.BenchmarkAssertE2E2Blank has: 
// func benchmarkAssertE2E2Blank(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{11367705 0xc003b94a60}))  {
// 	 := runtime_test.BenchmarkAssertE2E2Blank(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC runtime_test.BenchmarkAssertE2I has: 
// func benchmarkAssertE2I(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{11366667 0xc003b90f00}))  {
// 	 := runtime_test.BenchmarkAssertE2I(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC runtime_test.BenchmarkAssertE2T has: 
// func benchmarkAssertE2T(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{11366470 0xc003b909c0}))  {
// 	 := runtime_test.BenchmarkAssertE2T(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC runtime_test.BenchmarkAssertE2T2 has: 
// func benchmarkAssertE2T2(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{11367157 0xc003b91c00}))  {
// 	 := runtime_test.BenchmarkAssertE2T2(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC runtime_test.BenchmarkAssertE2T2Blank has: 
// func benchmarkAssertE2T2Blank(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{11367263 0xc003b91ee0}))  {
// 	 := runtime_test.BenchmarkAssertE2T2Blank(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC runtime_test.BenchmarkAssertE2TLarge has: 
// func benchmarkAssertE2TLarge(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{11366571 0xc003b90c60}))  {
// 	 := runtime_test.BenchmarkAssertE2TLarge(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC runtime_test.BenchmarkAssertI2E has: 
// func benchmarkAssertI2E(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{11366959 0xc003b916e0}))  {
// 	 := runtime_test.BenchmarkAssertI2E(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC runtime_test.BenchmarkAssertI2E2 has: 
// func benchmarkAssertI2E2(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{11367363 0xc003b941c0}))  {
// 	 := runtime_test.BenchmarkAssertI2E2(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC runtime_test.BenchmarkAssertI2E2Blank has: 
// func benchmarkAssertI2E2Blank(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{11367479 0xc003b944a0}))  {
// 	 := runtime_test.BenchmarkAssertI2E2Blank(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC runtime_test.BenchmarkAssertI2I has: 
// func benchmarkAssertI2I(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{11366861 0xc003b91440}))  {
// 	 := runtime_test.BenchmarkAssertI2I(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC runtime_test.BenchmarkAssertI2T has: 
// func benchmarkAssertI2T(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{11366763 0xc003b911a0}))  {
// 	 := runtime_test.BenchmarkAssertI2T(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC runtime_test.BenchmarkBigKeyMap has: 
// func benchmarkBigKeyMap(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{11057452 0xc004737740}))  {
// 	 := runtime_test.BenchmarkBigKeyMap(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC runtime_test.BenchmarkBigValMap has: 
// func benchmarkBigValMap(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{11057622 0xc004737ba0}))  {
// 	 := runtime_test.BenchmarkBigValMap(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC runtime_test.BenchmarkBulkWriteBarrier has: 
// func benchmarkBulkWriteBarrier(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{11215008 0xc003e60800}))  {
// 	 := runtime_test.BenchmarkBulkWriteBarrier(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC runtime_test.BenchmarkCallClosure has: 
// func benchmarkCallClosure(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{11227788 0xc00453e3e0}))  {
// 	 := runtime_test.BenchmarkCallClosure(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC runtime_test.BenchmarkCallClosure1 has: 
// func benchmarkCallClosure1(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{11227910 0xc00453e720}))  {
// 	 := runtime_test.BenchmarkCallClosure1(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC runtime_test.BenchmarkCallClosure2 has: 
// func benchmarkCallClosure2(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{11228056 0xc00453eb00}))  {
// 	 := runtime_test.BenchmarkCallClosure2(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC runtime_test.BenchmarkCallClosure3 has: 
// func benchmarkCallClosure3(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{11228255 0xc00453f000}))  {
// 	 := runtime_test.BenchmarkCallClosure3(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC runtime_test.BenchmarkCallClosure4 has: 
// func benchmarkCallClosure4(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{11228421 0xc00453f440}))  {
// 	 := runtime_test.BenchmarkCallClosure4(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC runtime_test.BenchmarkChanContended has: 
// func benchmarkChanContended(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{11010038 0xc0045ff060}))  {
// 	 := runtime_test.BenchmarkChanContended(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC runtime_test.BenchmarkChanCreation has: 
// func benchmarkChanCreation(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{11013445 0xc004662f40}))  {
// 	 := runtime_test.BenchmarkChanCreation(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC runtime_test.BenchmarkChanNonblocking has: 
// func benchmarkChanNonblocking(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{11008222 0xc0045b6fc0}))  {
// 	 := runtime_test.BenchmarkChanNonblocking(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC runtime_test.BenchmarkChanPopular has: 
// func benchmarkChanPopular(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{11013804 0xc004663740}))  {
// 	 := runtime_test.BenchmarkChanPopular(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC runtime_test.BenchmarkChanProdCons0 has: 
// func benchmarkChanProdCons0(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{11011779 0xc00465f2c0}))  {
// 	 := runtime_test.BenchmarkChanProdCons0(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC runtime_test.BenchmarkChanProdCons10 has: 
// func benchmarkChanProdCons10(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{11011859 0xc00465f440}))  {
// 	 := runtime_test.BenchmarkChanProdCons10(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC runtime_test.BenchmarkChanProdCons100 has: 
// func benchmarkChanProdCons100(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{11011941 0xc00465f5c0}))  {
// 	 := runtime_test.BenchmarkChanProdCons100(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC runtime_test.BenchmarkChanProdConsWork0 has: 
// func benchmarkChanProdConsWork0(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{11012026 0xc00465f740}))  {
// 	 := runtime_test.BenchmarkChanProdConsWork0(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC runtime_test.BenchmarkChanProdConsWork10 has: 
// func benchmarkChanProdConsWork10(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{11012112 0xc00465f8c0}))  {
// 	 := runtime_test.BenchmarkChanProdConsWork10(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC runtime_test.BenchmarkChanProdConsWork100 has: 
// func benchmarkChanProdConsWork100(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{11012200 0xc00465fa40}))  {
// 	 := runtime_test.BenchmarkChanProdConsWork100(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC runtime_test.BenchmarkChanSem has: 
// func benchmarkChanSem(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{11013599 0xc0046632e0}))  {
// 	 := runtime_test.BenchmarkChanSem(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC runtime_test.BenchmarkChanSync has: 
// func benchmarkChanSync(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{11010902 0xc00465e160}))  {
// 	 := runtime_test.BenchmarkChanSync(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC runtime_test.BenchmarkChanSyncWork has: 
// func benchmarkChanSyncWork(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{11010973 0xc00465e2c0}))  {
// 	 := runtime_test.BenchmarkChanSyncWork(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC runtime_test.BenchmarkChanUncontended has: 
// func benchmarkChanUncontended(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{11009796 0xc0045feac0}))  {
// 	 := runtime_test.BenchmarkChanUncontended(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC runtime_test.BenchmarkClearFat1024 has: 
// func benchmarkClearFat1024(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{12432026 0xc005730840}))  {
// 	 := runtime_test.BenchmarkClearFat1024(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC runtime_test.BenchmarkClearFat12 has: 
// func benchmarkClearFat12(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{12430863 0xc005726a00}))  {
// 	 := runtime_test.BenchmarkClearFat12(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC runtime_test.BenchmarkClearFat128 has: 
// func benchmarkClearFat128(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{12431704 0xc005730000}))  {
// 	 := runtime_test.BenchmarkClearFat128(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC runtime_test.BenchmarkClearFat16 has: 
// func benchmarkClearFat16(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{12430968 0xc005726cc0}))  {
// 	 := runtime_test.BenchmarkClearFat16(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC runtime_test.BenchmarkClearFat24 has: 
// func benchmarkClearFat24(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{12431073 0xc005726f80}))  {
// 	 := runtime_test.BenchmarkClearFat24(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC runtime_test.BenchmarkClearFat256 has: 
// func benchmarkClearFat256(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{12431811 0xc0057302c0}))  {
// 	 := runtime_test.BenchmarkClearFat256(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC runtime_test.BenchmarkClearFat32 has: 
// func benchmarkClearFat32(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{12431178 0xc005727240}))  {
// 	 := runtime_test.BenchmarkClearFat32(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC runtime_test.BenchmarkClearFat40 has: 
// func benchmarkClearFat40(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{12431283 0xc005727500}))  {
// 	 := runtime_test.BenchmarkClearFat40(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC runtime_test.BenchmarkClearFat48 has: 
// func benchmarkClearFat48(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{12431388 0xc0057277c0}))  {
// 	 := runtime_test.BenchmarkClearFat48(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC runtime_test.BenchmarkClearFat512 has: 
// func benchmarkClearFat512(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{12431918 0xc005730580}))  {
// 	 := runtime_test.BenchmarkClearFat512(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC runtime_test.BenchmarkClearFat56 has: 
// func benchmarkClearFat56(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{12431493 0xc005727a80}))  {
// 	 := runtime_test.BenchmarkClearFat56(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC runtime_test.BenchmarkClearFat64 has: 
// func benchmarkClearFat64(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{12431598 0xc005727d40}))  {
// 	 := runtime_test.BenchmarkClearFat64(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC runtime_test.BenchmarkClearFat8 has: 
// func benchmarkClearFat8(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{12430759 0xc005726740}))  {
// 	 := runtime_test.BenchmarkClearFat8(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC runtime_test.BenchmarkClockVDSOAndFallbackPaths has: 
// func benchmarkClockVDSOAndFallbackPaths(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{12513667 0xc0058706a0}))  {
// 	 := runtime_test.BenchmarkClockVDSOAndFallbackPaths(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC runtime_test.BenchmarkClosureCall has: 
// func benchmarkClosureCall(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{11534763 0xc003db2500}))  {
// 	 := runtime_test.BenchmarkClosureCall(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC runtime_test.BenchmarkCompareStringBig has: 
// func benchmarkCompareStringBig(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{11084522 0xc0038c4fc0}))  {
// 	 := runtime_test.BenchmarkCompareStringBig(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC runtime_test.BenchmarkCompareStringBigUnaligned has: 
// func benchmarkCompareStringBigUnaligned(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{11084200 0xc0038c48e0}))  {
// 	 := runtime_test.BenchmarkCompareStringBigUnaligned(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC runtime_test.BenchmarkCompareStringDifferentLength has: 
// func benchmarkCompareStringDifferentLength(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{11084018 0xc0038c45a0}))  {
// 	 := runtime_test.BenchmarkCompareStringDifferentLength(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC runtime_test.BenchmarkCompareStringEqual has: 
// func benchmarkCompareStringEqual(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{11083464 0xc002b8dac0}))  {
// 	 := runtime_test.BenchmarkCompareStringEqual(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC runtime_test.BenchmarkCompareStringIdentical has: 
// func benchmarkCompareStringIdentical(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{11083669 0xc002b8df20}))  {
// 	 := runtime_test.BenchmarkCompareStringIdentical(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC runtime_test.BenchmarkCompareStringSameLength has: 
// func benchmarkCompareStringSameLength(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{11083834 0xc0038c4260}))  {
// 	 := runtime_test.BenchmarkCompareStringSameLength(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC runtime_test.BenchmarkComplex128DivDisInf has: 
// func benchmarkComplex128DivDisInf(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{11760446 0xc004ee47c0}))  {
// 	 := runtime_test.BenchmarkComplex128DivDisInf(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC runtime_test.BenchmarkComplex128DivDisNaN has: 
// func benchmarkComplex128DivDisNaN(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{11760110 0xc004ed9f80}))  {
// 	 := runtime_test.BenchmarkComplex128DivDisNaN(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC runtime_test.BenchmarkComplex128DivNisInf has: 
// func benchmarkComplex128DivNisInf(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{11760278 0xc004ee43a0}))  {
// 	 := runtime_test.BenchmarkComplex128DivNisInf(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC runtime_test.BenchmarkComplex128DivNisNaN has: 
// func benchmarkComplex128DivNisNaN(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{11759942 0xc004ed9b60}))  {
// 	 := runtime_test.BenchmarkComplex128DivNisNaN(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC runtime_test.BenchmarkComplex128DivNormal has: 
// func benchmarkComplex128DivNormal(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{11759778 0xc004ed9720}))  {
// 	 := runtime_test.BenchmarkComplex128DivNormal(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC runtime_test.BenchmarkComplexAlgMap has: 
// func benchmarkComplexAlgMap(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{11058330 0xc004738d20}))  {
// 	 := runtime_test.BenchmarkComplexAlgMap(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC runtime_test.BenchmarkConcatStringAndBytes has: 
// func benchmarkConcatStringAndBytes(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{11084825 0xc0038c5640}))  {
// 	 := runtime_test.BenchmarkConcatStringAndBytes(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC runtime_test.BenchmarkConvI2E has: 
// func benchmarkConvI2E(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{11366287 0xc003b904c0}))  {
// 	 := runtime_test.BenchmarkConvI2E(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC runtime_test.BenchmarkConvI2I has: 
// func benchmarkConvI2I(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{11366377 0xc003b90740}))  {
// 	 := runtime_test.BenchmarkConvI2I(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC runtime_test.BenchmarkConvT2ELarge has: 
// func benchmarkConvT2ELarge(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{11365943 0xc003b87c40}))  {
// 	 := runtime_test.BenchmarkConvT2ELarge(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC runtime_test.BenchmarkConvT2ESmall has: 
// func benchmarkConvT2ESmall(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{11365769 0xc003b87800}))  {
// 	 := runtime_test.BenchmarkConvT2ESmall(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC runtime_test.BenchmarkConvT2EUintptr has: 
// func benchmarkConvT2EUintptr(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{11365857 0xc003b87a20}))  {
// 	 := runtime_test.BenchmarkConvT2EUintptr(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC runtime_test.BenchmarkConvT2Ezero has: 
// func benchmarkConvT2Ezero(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{11370031 0xc003b9b580}))  {
// 	 := runtime_test.BenchmarkConvT2Ezero(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC runtime_test.BenchmarkConvT2ILarge has: 
// func benchmarkConvT2ILarge(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{11366205 0xc003b902a0}))  {
// 	 := runtime_test.BenchmarkConvT2ILarge(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC runtime_test.BenchmarkConvT2ISmall has: 
// func benchmarkConvT2ISmall(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{11366029 0xc003b87e60}))  {
// 	 := runtime_test.BenchmarkConvT2ISmall(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC runtime_test.BenchmarkConvT2IUintptr has: 
// func benchmarkConvT2IUintptr(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{11366118 0xc003b90080}))  {
// 	 := runtime_test.BenchmarkConvT2IUintptr(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC runtime_test.BenchmarkCopy has: 
// func benchmarkCopy(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{11389265 0xc003bf5e20}))  {
// 	 := runtime_test.BenchmarkCopy(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC runtime_test.BenchmarkCopyFat1024 has: 
// func benchmarkCopyFat1024(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{12433261 0xc00573aa40}))  {
// 	 := runtime_test.BenchmarkCopyFat1024(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC runtime_test.BenchmarkCopyFat12 has: 
// func benchmarkCopyFat12(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{12432243 0xc005730e20}))  {
// 	 := runtime_test.BenchmarkCopyFat12(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC runtime_test.BenchmarkCopyFat128 has: 
// func benchmarkCopyFat128(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{12432804 0xc005731dc0}))  {
// 	 := runtime_test.BenchmarkCopyFat128(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC runtime_test.BenchmarkCopyFat16 has: 
// func benchmarkCopyFat16(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{12432355 0xc005731140}))  {
// 	 := runtime_test.BenchmarkCopyFat16(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC runtime_test.BenchmarkCopyFat24 has: 
// func benchmarkCopyFat24(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{12432467 0xc005731460}))  {
// 	 := runtime_test.BenchmarkCopyFat24(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC runtime_test.BenchmarkCopyFat256 has: 
// func benchmarkCopyFat256(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{12432918 0xc00573a0e0}))  {
// 	 := runtime_test.BenchmarkCopyFat256(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC runtime_test.BenchmarkCopyFat32 has: 
// func benchmarkCopyFat32(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{12432579 0xc005731780}))  {
// 	 := runtime_test.BenchmarkCopyFat32(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC runtime_test.BenchmarkCopyFat512 has: 
// func benchmarkCopyFat512(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{12433032 0xc00573a400}))  {
// 	 := runtime_test.BenchmarkCopyFat512(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC runtime_test.BenchmarkCopyFat520 has: 
// func benchmarkCopyFat520(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{12433146 0xc00573a720}))  {
// 	 := runtime_test.BenchmarkCopyFat520(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC runtime_test.BenchmarkCopyFat64 has: 
// func benchmarkCopyFat64(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{12432691 0xc005731aa0}))  {
// 	 := runtime_test.BenchmarkCopyFat64(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC runtime_test.BenchmarkCopyFat8 has: 
// func benchmarkCopyFat8(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{12432132 0xc005730b00}))  {
// 	 := runtime_test.BenchmarkCopyFat8(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC runtime_test.BenchmarkCreateGoroutines has: 
// func benchmarkCreateGoroutines(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{11533995 0xc003da54a0}))  {
// 	 := runtime_test.BenchmarkCreateGoroutines(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC runtime_test.BenchmarkCreateGoroutinesCapture has: 
// func benchmarkCreateGoroutinesCapture(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{11534468 0xc003da5e20}))  {
// 	 := runtime_test.BenchmarkCreateGoroutinesCapture(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC runtime_test.BenchmarkCreateGoroutinesParallel has: 
// func benchmarkCreateGoroutinesParallel(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{11534086 0xc003da5600}))  {
// 	 := runtime_test.BenchmarkCreateGoroutinesParallel(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC runtime_test.BenchmarkDefer has: 
// func benchmarkDefer(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{11765457 0xc004ef2e40}))  {
// 	 := runtime_test.BenchmarkDefer(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC runtime_test.BenchmarkDefer10 has: 
// func benchmarkDefer10(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{11765680 0xc004ef3320}))  {
// 	 := runtime_test.BenchmarkDefer10(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC runtime_test.BenchmarkDeferMany has: 
// func benchmarkDeferMany(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{11765943 0xc004ef38e0}))  {
// 	 := runtime_test.BenchmarkDeferMany(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC runtime_test.BenchmarkEfaceCmpDiff has: 
// func benchmarkEfaceCmpDiff(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{11765240 0xc004ef2980}))  {
// 	 := runtime_test.BenchmarkEfaceCmpDiff(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC runtime_test.BenchmarkEqEfaceConcrete has: 
// func benchmarkEqEfaceConcrete(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{11365394 0xc003b86f00}))  {
// 	 := runtime_test.BenchmarkEqEfaceConcrete(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC runtime_test.BenchmarkEqIfaceConcrete has: 
// func benchmarkEqIfaceConcrete(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{11365488 0xc003b87140}))  {
// 	 := runtime_test.BenchmarkEqIfaceConcrete(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC runtime_test.BenchmarkExtendSlice has: 
// func benchmarkExtendSlice(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{11386357 0xc003be5700}))  {
// 	 := runtime_test.BenchmarkExtendSlice(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC runtime_test.BenchmarkFastrand has: 
// func benchmarkFastrand(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{11774258 0xc004f16ee0}))  {
// 	 := runtime_test.BenchmarkFastrand(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC runtime_test.BenchmarkFastrandHashiter has: 
// func benchmarkFastrandHashiter(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{11774386 0xc004f171c0}))  {
// 	 := runtime_test.BenchmarkFastrandHashiter(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC runtime_test.BenchmarkFastrandn has: 
// func benchmarkFastrandn(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{11774616 0xc004f176c0}))  {
// 	 := runtime_test.BenchmarkFastrandn(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC runtime_test.BenchmarkFinalizer has: 
// func benchmarkFinalizer(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{11493347 0xc003d082a0}))  {
// 	 := runtime_test.BenchmarkFinalizer(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC runtime_test.BenchmarkFinalizerRun has: 
// func benchmarkFinalizerRun(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{11493709 0xc003d08aa0}))  {
// 	 := runtime_test.BenchmarkFinalizerRun(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC runtime_test.BenchmarkGoMapClear has: 
// func benchmarkGoMapClear(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{11058485 0xc0047390a0}))  {
// 	 := runtime_test.BenchmarkGoMapClear(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC runtime_test.BenchmarkGoMemclr has: 
// func benchmarkGoMemclr(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{12430546 0xc0057261c0}))  {
// 	 := runtime_test.BenchmarkGoMemclr(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC runtime_test.BenchmarkGoroutineBlocking has: 
// func benchmarkGoroutineBlocking(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{12309895 0xc005574e20}))  {
// 	 := runtime_test.BenchmarkGoroutineBlocking(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC runtime_test.BenchmarkGoroutineForRange has: 
// func benchmarkGoroutineForRange(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{12310064 0xc005575160}))  {
// 	 := runtime_test.BenchmarkGoroutineForRange(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC runtime_test.BenchmarkGoroutineIdle has: 
// func benchmarkGoroutineIdle(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{12310659 0xc005575e80}))  {
// 	 := runtime_test.BenchmarkGoroutineIdle(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC runtime_test.BenchmarkGoroutineSelect has: 
// func benchmarkGoroutineSelect(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{12309642 0xc005574a00}))  {
// 	 := runtime_test.BenchmarkGoroutineSelect(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC runtime_test.BenchmarkGrowSlice has: 
// func benchmarkGrowSlice(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{11385265 0xc003bdf860}))  {
// 	 := runtime_test.BenchmarkGrowSlice(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC runtime_test.BenchmarkHash1024 has: 
// func benchmarkHash1024(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{12457771 0xc0057b9ee0}))  {
// 	 := runtime_test.BenchmarkHash1024(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC runtime_test.BenchmarkHash16 has: 
// func benchmarkHash16(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{12457643 0xc0057b9c20}))  {
// 	 := runtime_test.BenchmarkHash16(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC runtime_test.BenchmarkHash5 has: 
// func benchmarkHash5(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{12457580 0xc0057b9ac0}))  {
// 	 := runtime_test.BenchmarkHash5(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC runtime_test.BenchmarkHash64 has: 
// func benchmarkHash64(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{12457706 0xc0057b9d80}))  {
// 	 := runtime_test.BenchmarkHash64(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC runtime_test.BenchmarkHash65536 has: 
// func benchmarkHash65536(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{12457837 0xc0057c4040}))  {
// 	 := runtime_test.BenchmarkHash65536(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC runtime_test.BenchmarkHashBytesSpeed has: 
// func benchmarkHashBytesSpeed(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{11052360 0xc0044de640}))  {
// 	 := runtime_test.BenchmarkHashBytesSpeed(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC runtime_test.BenchmarkHashInt32Speed has: 
// func benchmarkHashInt32Speed(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{11052855 0xc0044def20}))  {
// 	 := runtime_test.BenchmarkHashInt32Speed(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC runtime_test.BenchmarkHashInt64Speed has: 
// func benchmarkHashInt64Speed(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{11053197 0xc0044df740}))  {
// 	 := runtime_test.BenchmarkHashInt64Speed(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC runtime_test.BenchmarkHashStringArraySpeed has: 
// func benchmarkHashStringArraySpeed(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{11053544 0xc0044dff60}))  {
// 	 := runtime_test.BenchmarkHashStringArraySpeed(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC runtime_test.BenchmarkHashStringSpeed has: 
// func benchmarkHashStringSpeed(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{11051964 0xc0042c5d00}))  {
// 	 := runtime_test.BenchmarkHashStringSpeed(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC runtime_test.BenchmarkIfaceCmp100 has: 
// func benchmarkIfaceCmp100(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{11764845 0xc004ef2200}))  {
// 	 := runtime_test.BenchmarkIfaceCmp100(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC runtime_test.BenchmarkIfaceCmpNil100 has: 
// func benchmarkIfaceCmpNil100(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{11765018 0xc004ef25a0}))  {
// 	 := runtime_test.BenchmarkIfaceCmpNil100(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC runtime_test.BenchmarkIntMap has: 
// func benchmarkIntMap(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{11055733 0xc0044e71e0}))  {
// 	 := runtime_test.BenchmarkIntMap(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC runtime_test.BenchmarkIssue18740 has: 
// func benchmarkIssue18740(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{12433377 0xc00573ad60}))  {
// 	 := runtime_test.BenchmarkIssue18740(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC runtime_test.BenchmarkMakeChan has: 
// func benchmarkMakeChan(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{11007329 0xc0045b3740}))  {
// 	 := runtime_test.BenchmarkMakeChan(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC runtime_test.BenchmarkMakeSlice has: 
// func benchmarkMakeSlice(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{11385025 0xc003bdf180}))  {
// 	 := runtime_test.BenchmarkMakeSlice(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC runtime_test.BenchmarkMalloc16 has: 
// func benchmarkMalloc16(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{12308775 0xc00556d680}))  {
// 	 := runtime_test.BenchmarkMalloc16(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC runtime_test.BenchmarkMalloc8 has: 
// func benchmarkMalloc8(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{12308619 0xc00556d2c0}))  {
// 	 := runtime_test.BenchmarkMalloc8(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC runtime_test.BenchmarkMallocLargeStruct has: 
// func benchmarkMallocLargeStruct(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{12309410 0xc0055744c0}))  {
// 	 := runtime_test.BenchmarkMallocLargeStruct(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC runtime_test.BenchmarkMallocTypeInfo16 has: 
// func benchmarkMallocTypeInfo16(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{12309153 0xc00556df40}))  {
// 	 := runtime_test.BenchmarkMallocTypeInfo16(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC runtime_test.BenchmarkMallocTypeInfo8 has: 
// func benchmarkMallocTypeInfo8(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{12308941 0xc00556da60}))  {
// 	 := runtime_test.BenchmarkMallocTypeInfo8(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC runtime_test.BenchmarkMapAppendAssign has: 
// func benchmarkMapAppendAssign(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{11564746 0xc004c52500}))  {
// 	 := runtime_test.BenchmarkMapAppendAssign(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC runtime_test.BenchmarkMapAssign has: 
// func benchmarkMapAssign(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{11564252 0xc004c4ba00}))  {
// 	 := runtime_test.BenchmarkMapAssign(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC runtime_test.BenchmarkMapDelete has: 
// func benchmarkMapDelete(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{11564992 0xc004c52a80}))  {
// 	 := runtime_test.BenchmarkMapDelete(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC runtime_test.BenchmarkMapIter has: 
// func benchmarkMapIter(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{11056781 0xc0047368e0}))  {
// 	 := runtime_test.BenchmarkMapIter(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC runtime_test.BenchmarkMapIterEmpty has: 
// func benchmarkMapIterEmpty(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{11056962 0xc004736d20}))  {
// 	 := runtime_test.BenchmarkMapIterEmpty(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC runtime_test.BenchmarkMapOperatorAssign has: 
// func benchmarkMapOperatorAssign(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{11564488 0xc004c4bf80}))  {
// 	 := runtime_test.BenchmarkMapOperatorAssign(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC runtime_test.BenchmarkMapPop100 has: 
// func benchmarkMapPop100(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{11560489 0xc004c37e40}))  {
// 	 := runtime_test.BenchmarkMapPop100(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC runtime_test.BenchmarkMapPop1000 has: 
// func benchmarkMapPop1000(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{11560558 0xc004c37fa0}))  {
// 	 := runtime_test.BenchmarkMapPop1000(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC runtime_test.BenchmarkMapPop10000 has: 
// func benchmarkMapPop10000(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{11560628 0xc004c3a100}))  {
// 	 := runtime_test.BenchmarkMapPop10000(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC runtime_test.BenchmarkMapPopulate has: 
// func benchmarkMapPopulate(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{11057912 0xc004738360}))  {
// 	 := runtime_test.BenchmarkMapPopulate(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC runtime_test.BenchmarkMapStringKeysEight_16 has: 
// func benchmarkMapStringKeysEight_16(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{11055132 0xc0044e6600}))  {
// 	 := runtime_test.BenchmarkMapStringKeysEight_16(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC runtime_test.BenchmarkMapStringKeysEight_1M has: 
// func benchmarkMapStringKeysEight_1M(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{11055399 0xc0044e6a20}))  {
// 	 := runtime_test.BenchmarkMapStringKeysEight_1M(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC runtime_test.BenchmarkMapStringKeysEight_32 has: 
// func benchmarkMapStringKeysEight_32(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{11055221 0xc0044e6760}))  {
// 	 := runtime_test.BenchmarkMapStringKeysEight_32(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC runtime_test.BenchmarkMapStringKeysEight_64 has: 
// func benchmarkMapStringKeysEight_64(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{11055310 0xc0044e68c0}))  {
// 	 := runtime_test.BenchmarkMapStringKeysEight_64(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC runtime_test.BenchmarkMatmult has: 
// func benchmarkMatmult(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{11538084 0xc003db4a20}))  {
// 	 := runtime_test.BenchmarkMatmult(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC runtime_test.BenchmarkMegEmptyMap has: 
// func benchmarkMegEmptyMap(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{11054723 0xc0044e3c40}))  {
// 	 := runtime_test.BenchmarkMegEmptyMap(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC runtime_test.BenchmarkMegEqMap has: 
// func benchmarkMegEqMap(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{11054466 0xc0044e3620}))  {
// 	 := runtime_test.BenchmarkMegEqMap(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC runtime_test.BenchmarkMegMap has: 
// func benchmarkMegMap(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{11053974 0xc0044e2940}))  {
// 	 := runtime_test.BenchmarkMegMap(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC runtime_test.BenchmarkMegOneMap has: 
// func benchmarkMegOneMap(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{11054260 0xc0044e3080}))  {
// 	 := runtime_test.BenchmarkMegOneMap(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC runtime_test.BenchmarkMemclr has: 
// func benchmarkMemclr(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{12430083 0xc00571f460}))  {
// 	 := runtime_test.BenchmarkMemclr(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC runtime_test.BenchmarkMemmove has: 
// func benchmarkMemmove(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{12428799 0xc0057176a0}))  {
// 	 := runtime_test.BenchmarkMemmove(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC runtime_test.BenchmarkMemmoveUnalignedDst has: 
// func benchmarkMemmoveUnalignedDst(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{12429006 0xc005717be0}))  {
// 	 := runtime_test.BenchmarkMemmoveUnalignedDst(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC runtime_test.BenchmarkMemmoveUnalignedSrc has: 
// func benchmarkMemmoveUnalignedSrc(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{12429219 0xc00571e160}))  {
// 	 := runtime_test.BenchmarkMemmoveUnalignedSrc(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC runtime_test.BenchmarkNeEfaceConcrete has: 
// func benchmarkNeEfaceConcrete(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{11365583 0xc003b87380}))  {
// 	 := runtime_test.BenchmarkNeEfaceConcrete(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC runtime_test.BenchmarkNeIfaceConcrete has: 
// func benchmarkNeIfaceConcrete(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{11365677 0xc003b875c0}))  {
// 	 := runtime_test.BenchmarkNeIfaceConcrete(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC runtime_test.BenchmarkNewEmptyMap has: 
// func benchmarkNewEmptyMap(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{11056526 0xc004736240}))  {
// 	 := runtime_test.BenchmarkNewEmptyMap(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC runtime_test.BenchmarkNewSmallMap has: 
// func benchmarkNewSmallMap(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{11056644 0xc004736520}))  {
// 	 := runtime_test.BenchmarkNewSmallMap(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC runtime_test.BenchmarkPingPongHog has: 
// func benchmarkPingPongHog(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{11530927 0xc003d9c580}))  {
// 	 := runtime_test.BenchmarkPingPongHog(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC runtime_test.BenchmarkRWMutexUncontended has: 
// func benchmarkRWMutexUncontended(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{11131378 0xc00357dfe0}))  {
// 	 := runtime_test.BenchmarkRWMutexUncontended(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC runtime_test.BenchmarkRWMutexWorkWrite10 has: 
// func benchmarkRWMutexWorkWrite10(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{11132274 0xc003583200}))  {
// 	 := runtime_test.BenchmarkRWMutexWorkWrite10(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC runtime_test.BenchmarkRWMutexWorkWrite100 has: 
// func benchmarkRWMutexWorkWrite100(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{11132191 0xc003583080}))  {
// 	 := runtime_test.BenchmarkRWMutexWorkWrite100(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC runtime_test.BenchmarkRWMutexWrite10 has: 
// func benchmarkRWMutexWrite10(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{11132110 0xc003582f00}))  {
// 	 := runtime_test.BenchmarkRWMutexWrite10(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC runtime_test.BenchmarkRWMutexWrite100 has: 
// func benchmarkRWMutexWrite100(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{11132033 0xc003582d80}))  {
// 	 := runtime_test.BenchmarkRWMutexWrite100(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC runtime_test.BenchmarkReadMemStats has: 
// func benchmarkReadMemStats(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{11212463 0xc003e3be00}))  {
// 	 := runtime_test.BenchmarkReadMemStats(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC runtime_test.BenchmarkRepeatedLookupStrMapKey1M has: 
// func benchmarkRepeatedLookupStrMapKey1M(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{11056447 0xc0047360c0}))  {
// 	 := runtime_test.BenchmarkRepeatedLookupStrMapKey1M(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC runtime_test.BenchmarkRepeatedLookupStrMapKey32 has: 
// func benchmarkRepeatedLookupStrMapKey32(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{11056358 0xc0044e7f60}))  {
// 	 := runtime_test.BenchmarkRepeatedLookupStrMapKey32(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC runtime_test.BenchmarkRuneCount has: 
// func benchmarkRuneCount(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{11085429 0xc0021621c0}))  {
// 	 := runtime_test.BenchmarkRuneCount(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC runtime_test.BenchmarkRuneIterate has: 
// func benchmarkRuneIterate(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{11086214 0xc002163400}))  {
// 	 := runtime_test.BenchmarkRuneIterate(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC runtime_test.BenchmarkSameLengthMap has: 
// func benchmarkSameLengthMap(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{11057101 0xc004737040}))  {
// 	 := runtime_test.BenchmarkSameLengthMap(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC runtime_test.BenchmarkScanStackNoLocals has: 
// func benchmarkScanStackNoLocals(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{11215751 0xc003e61440}))  {
// 	 := runtime_test.BenchmarkScanStackNoLocals(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC runtime_test.BenchmarkSelectAsyncContended has: 
// func benchmarkSelectAsyncContended(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{11009100 0xc0045b7ec0}))  {
// 	 := runtime_test.BenchmarkSelectAsyncContended(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC runtime_test.BenchmarkSelectNonblock has: 
// func benchmarkSelectNonblock(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{11009395 0xc0045fe4a0}))  {
// 	 := runtime_test.BenchmarkSelectNonblock(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC runtime_test.BenchmarkSelectProdCons has: 
// func benchmarkSelectProdCons(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{11012284 0xc00465fbc0}))  {
// 	 := runtime_test.BenchmarkSelectProdCons(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC runtime_test.BenchmarkSelectSyncContended has: 
// func benchmarkSelectSyncContended(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{11008666 0xc0045b7820}))  {
// 	 := runtime_test.BenchmarkSelectSyncContended(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC runtime_test.BenchmarkSelectUncontended has: 
// func benchmarkSelectUncontended(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{11008404 0xc0045b7300}))  {
// 	 := runtime_test.BenchmarkSelectUncontended(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC runtime_test.BenchmarkSetTypeNode1 has: 
// func benchmarkSetTypeNode1(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{11207383 0xc0026d3ca0}))  {
// 	 := runtime_test.BenchmarkSetTypeNode1(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC runtime_test.BenchmarkSetTypeNode1024 has: 
// func benchmarkSetTypeNode1024(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{11209296 0xc0026de0a0}))  {
// 	 := runtime_test.BenchmarkSetTypeNode1024(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC runtime_test.BenchmarkSetTypeNode1024Slice has: 
// func benchmarkSetTypeNode1024Slice(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{11209382 0xc0026de220}))  {
// 	 := runtime_test.BenchmarkSetTypeNode1024Slice(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC runtime_test.BenchmarkSetTypeNode124 has: 
// func benchmarkSetTypeNode124(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{11208333 0xc0026d6ea0}))  {
// 	 := runtime_test.BenchmarkSetTypeNode124(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC runtime_test.BenchmarkSetTypeNode124Slice has: 
// func benchmarkSetTypeNode124Slice(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{11208417 0xc0026d7020}))  {
// 	 := runtime_test.BenchmarkSetTypeNode124Slice(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC runtime_test.BenchmarkSetTypeNode126 has: 
// func benchmarkSetTypeNode126(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{11208573 0xc0026d7320}))  {
// 	 := runtime_test.BenchmarkSetTypeNode126(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC runtime_test.BenchmarkSetTypeNode126Slice has: 
// func benchmarkSetTypeNode126Slice(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{11208657 0xc0026d74a0}))  {
// 	 := runtime_test.BenchmarkSetTypeNode126Slice(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC runtime_test.BenchmarkSetTypeNode128 has: 
// func benchmarkSetTypeNode128(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{11208813 0xc0026d77a0}))  {
// 	 := runtime_test.BenchmarkSetTypeNode128(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC runtime_test.BenchmarkSetTypeNode128Slice has: 
// func benchmarkSetTypeNode128Slice(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{11208897 0xc0026d7920}))  {
// 	 := runtime_test.BenchmarkSetTypeNode128Slice(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC runtime_test.BenchmarkSetTypeNode130 has: 
// func benchmarkSetTypeNode130(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{11209053 0xc0026d7c20}))  {
// 	 := runtime_test.BenchmarkSetTypeNode130(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC runtime_test.BenchmarkSetTypeNode130Slice has: 
// func benchmarkSetTypeNode130Slice(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{11209137 0xc0026d7da0}))  {
// 	 := runtime_test.BenchmarkSetTypeNode130Slice(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC runtime_test.BenchmarkSetTypeNode1Slice has: 
// func benchmarkSetTypeNode1Slice(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{11207463 0xc0026d3e20}))  {
// 	 := runtime_test.BenchmarkSetTypeNode1Slice(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC runtime_test.BenchmarkSetTypeNode64 has: 
// func benchmarkSetTypeNode64(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{11207842 0xc0026d65a0}))  {
// 	 := runtime_test.BenchmarkSetTypeNode64(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC runtime_test.BenchmarkSetTypeNode64Dead has: 
// func benchmarkSetTypeNode64Dead(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{11208084 0xc0026d6a20}))  {
// 	 := runtime_test.BenchmarkSetTypeNode64Dead(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC runtime_test.BenchmarkSetTypeNode64DeadSlice has: 
// func benchmarkSetTypeNode64DeadSlice(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{11208174 0xc0026d6ba0}))  {
// 	 := runtime_test.BenchmarkSetTypeNode64DeadSlice(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC runtime_test.BenchmarkSetTypeNode64Slice has: 
// func benchmarkSetTypeNode64Slice(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{11207924 0xc0026d6720}))  {
// 	 := runtime_test.BenchmarkSetTypeNode64Slice(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC runtime_test.BenchmarkSetTypeNode8 has: 
// func benchmarkSetTypeNode8(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{11207611 0xc0026d6120}))  {
// 	 := runtime_test.BenchmarkSetTypeNode8(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC runtime_test.BenchmarkSetTypeNode8Slice has: 
// func benchmarkSetTypeNode8Slice(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{11207691 0xc0026d62a0}))  {
// 	 := runtime_test.BenchmarkSetTypeNode8Slice(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC runtime_test.BenchmarkSetTypePtr has: 
// func benchmarkSetTypePtr(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{11206678 0xc0026d2d40}))  {
// 	 := runtime_test.BenchmarkSetTypePtr(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC runtime_test.BenchmarkSetTypePtr126 has: 
// func benchmarkSetTypePtr126(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{11207068 0xc0026d35e0}))  {
// 	 := runtime_test.BenchmarkSetTypePtr126(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC runtime_test.BenchmarkSetTypePtr128 has: 
// func benchmarkSetTypePtr128(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{11207149 0xc0026d37a0}))  {
// 	 := runtime_test.BenchmarkSetTypePtr128(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC runtime_test.BenchmarkSetTypePtr16 has: 
// func benchmarkSetTypePtr16(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{11206830 0xc0026d30a0}))  {
// 	 := runtime_test.BenchmarkSetTypePtr16(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC runtime_test.BenchmarkSetTypePtr32 has: 
// func benchmarkSetTypePtr32(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{11206909 0xc0026d3260}))  {
// 	 := runtime_test.BenchmarkSetTypePtr32(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC runtime_test.BenchmarkSetTypePtr64 has: 
// func benchmarkSetTypePtr64(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{11206988 0xc0026d3420}))  {
// 	 := runtime_test.BenchmarkSetTypePtr64(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC runtime_test.BenchmarkSetTypePtr8 has: 
// func benchmarkSetTypePtr8(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{11206752 0xc0026d2ee0}))  {
// 	 := runtime_test.BenchmarkSetTypePtr8(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC runtime_test.BenchmarkSetTypePtrSlice has: 
// func benchmarkSetTypePtrSlice(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{11207232 0xc0026d3960}))  {
// 	 := runtime_test.BenchmarkSetTypePtrSlice(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC runtime_test.BenchmarkSliceByteToString has: 
// func benchmarkSliceByteToString(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{11084986 0xc0038c5960}))  {
// 	 := runtime_test.BenchmarkSliceByteToString(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC runtime_test.BenchmarkSmallKeyMap has: 
// func benchmarkSmallKeyMap(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{11057785 0xc004738020}))  {
// 	 := runtime_test.BenchmarkSmallKeyMap(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC runtime_test.BenchmarkSmallStrMap has: 
// func benchmarkSmallStrMap(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{11054894 0xc0044e60c0}))  {
// 	 := runtime_test.BenchmarkSmallStrMap(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC runtime_test.BenchmarkStackCopy has: 
// func benchmarkStackCopy(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{11350939 0xc003b49de0}))  {
// 	 := runtime_test.BenchmarkStackCopy(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC runtime_test.BenchmarkStackCopyNoCache has: 
// func benchmarkStackCopyNoCache(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{11351176 0xc003b52340}))  {
// 	 := runtime_test.BenchmarkStackCopyNoCache(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC runtime_test.BenchmarkStackCopyPtr has: 
// func benchmarkStackCopyPtr(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{11350706 0xc003b49820}))  {
// 	 := runtime_test.BenchmarkStackCopyPtr(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC runtime_test.BenchmarkStackGrowth has: 
// func benchmarkStackGrowth(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{11533836 0xc003da51e0}))  {
// 	 := runtime_test.BenchmarkStackGrowth(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC runtime_test.BenchmarkStackGrowthDeep has: 
// func benchmarkStackGrowthDeep(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{11533914 0xc003da5340}))  {
// 	 := runtime_test.BenchmarkStackGrowthDeep(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC runtime_test.BenchmarkSyscall has: 
// func benchmarkSyscall(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{12237464 0xc005460220}))  {
// 	 := runtime_test.BenchmarkSyscall(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC runtime_test.BenchmarkSyscallExcess has: 
// func benchmarkSyscallExcess(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{12237612 0xc005460580}))  {
// 	 := runtime_test.BenchmarkSyscallExcess(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC runtime_test.BenchmarkSyscallExcessWork has: 
// func benchmarkSyscallExcessWork(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{12237690 0xc005460700}))  {
// 	 := runtime_test.BenchmarkSyscallExcessWork(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC runtime_test.BenchmarkSyscallWork has: 
// func benchmarkSyscallWork(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{12237536 0xc005460400}))  {
// 	 := runtime_test.BenchmarkSyscallWork(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC runtime_test.BenchmarkTimeNow has: 
// func benchmarkTimeNow(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{12513969 0xc005870c60}))  {
// 	 := runtime_test.BenchmarkTimeNow(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC runtime_test.BenchmarkUnalignedLoad has: 
// func benchmarkUnalignedLoad(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{12460196 0xc0057ca560}))  {
// 	 := runtime_test.BenchmarkUnalignedLoad(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC runtime_test.BenchmarkWakeupParallelSpinning has: 
// func benchmarkWakeupParallelSpinning(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{11537339 0xc003db4100}))  {
// 	 := runtime_test.BenchmarkWakeupParallelSpinning(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC runtime_test.BenchmarkWakeupParallelSyscall has: 
// func benchmarkWakeupParallelSyscall(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{11537847 0xc003db4660}))  {
// 	 := runtime_test.BenchmarkWakeupParallelSyscall(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC runtime_test.BenchmarkWriteBarrier has: 
// func benchmarkWriteBarrier(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{11213707 0xc003e3f340}))  {
// 	 := runtime_test.BenchmarkWriteBarrier(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC runtime_test.ExampleFrames has: 
// func exampleFrames()  {
// 	 := runtime_test.ExampleFrames()
// 	...ABEND: TODO...
// }
// 
GO FUNC runtime_test.HammerRWMutex has: 
// func hammerRWMutex(gomaxprocs int, numReaders int, num_iterations int)  {
// 	 := runtime_test.HammerRWMutex(gomaxprocs, numReaders, num_iterations)
// 	...ABEND: TODO...
// }
// 
GO FUNC runtime_test.TestAbort has: 
// func testAbort(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{12254798 0xc0054ab1c0}))  {
// 	 := runtime_test.TestAbort(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC runtime_test.TestAlias has: 
// func testAlias(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{11544802 0xc003dcf980}))  {
// 	 := runtime_test.TestAlias(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC runtime_test.TestAppendGrowth has: 
// func testAppendGrowth(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{11770793 0xc004f07860}))  {
// 	 := runtime_test.TestAppendGrowth(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC runtime_test.TestAppendOverlap has: 
// func testAppendOverlap(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{11389033 0xc003bf59e0}))  {
// 	 := runtime_test.TestAppendOverlap(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC runtime_test.TestAppendSliceGrowth has: 
// func testAppendSliceGrowth(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{11771124 0xc004f07f60}))  {
// 	 := runtime_test.TestAppendSliceGrowth(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC runtime_test.TestArenaCollision has: 
// func testArenaCollision(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{12306752 0xc005567c60}))  {
// 	 := runtime_test.TestArenaCollision(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC runtime_test.TestArrayHash has: 
// func testArrayHash(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{12457899 0xc0057c41a0}))  {
// 	 := runtime_test.TestArrayHash(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC runtime_test.TestAtoi has: 
// func testAtoi(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{11090832 0xc003e7b2c0}))  {
// 	 := runtime_test.TestAtoi(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC runtime_test.TestAtoi32 has: 
// func testAtoi32(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{11091987 0xc003ef6b20}))  {
// 	 := runtime_test.TestAtoi32(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC runtime_test.TestBadOpen has: 
// func testBadOpen(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{11770031 0xc004f06b20}))  {
// 	 := runtime_test.TestBadOpen(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC runtime_test.TestBadTraceback has: 
// func testBadTraceback(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{12253873 0xc0054aa220}))  {
// 	 := runtime_test.TestBadTraceback(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC runtime_test.TestBigItems has: 
// func testBigItems(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{11549063 0xc003de4480}))  {
// 	 := runtime_test.TestBigItems(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC runtime_test.TestBigStackCallbackCgo has: 
// func testBigStackCallbackCgo(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{12413233 0xc0056d8700}))  {
// 	 := runtime_test.TestBigStackCallbackCgo(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC runtime_test.TestBlockLocked has: 
// func testBlockLocked(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{11525951 0xc003d89a00}))  {
// 	 := runtime_test.TestBlockLocked(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC runtime_test.TestBreakpoint has: 
// func testBreakpoint(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{12245678 0xc005490780}))  {
// 	 := runtime_test.TestBreakpoint(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC runtime_test.TestCaller has: 
// func testCaller(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{11400692 0xc003c11ee0}))  {
// 	 := runtime_test.TestCaller(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC runtime_test.TestCallers has: 
// func testCallers(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{12312118 0xc00557db80}))  {
// 	 := runtime_test.TestCallers(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC runtime_test.TestCallersFromWrapper has: 
// func testCallersFromWrapper(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{11355526 0xc003b67360}))  {
// 	 := runtime_test.TestCallersFromWrapper(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC runtime_test.TestCallersPanic has: 
// func testCallersPanic(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{12312193 0xc00557dd20}))  {
// 	 := runtime_test.TestCallersPanic(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC runtime_test.TestCatchPanic has: 
// func testCatchPanic(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{12410547 0xc0056d0060}))  {
// 	 := runtime_test.TestCatchPanic(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC runtime_test.TestCgoCCodeSIGPROF has: 
// func testCgoCCodeSIGPROF(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{12406134 0xc0056bf300}))  {
// 	 := runtime_test.TestCgoCCodeSIGPROF(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC runtime_test.TestCgoCallbackGC has: 
// func testCgoCallbackGC(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{12401518 0xc0056b0800}))  {
// 	 := runtime_test.TestCgoCallbackGC(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC runtime_test.TestCgoCheckBytes has: 
// func testCgoCheckBytes(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{12404843 0xc0056b7d00}))  {
// 	 := runtime_test.TestCgoCheckBytes(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC runtime_test.TestCgoCrashHandler has: 
// func testCgoCrashHandler(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{12400777 0xc00569dcc0}))  {
// 	 := runtime_test.TestCgoCrashHandler(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC runtime_test.TestCgoCrashTraceback has: 
// func testCgoCrashTraceback(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{12406332 0xc0056bf680}))  {
// 	 := runtime_test.TestCgoCrashTraceback(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC runtime_test.TestCgoDLLImports has: 
// func testCgoDLLImports(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{12403749 0xc0056b6d00}))  {
// 	 := runtime_test.TestCgoDLLImports(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC runtime_test.TestCgoExecSignalMask has: 
// func testCgoExecSignalMask(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{12404038 0xc0056b7160}))  {
// 	 := runtime_test.TestCgoExecSignalMask(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC runtime_test.TestCgoExternalThreadPanic has: 
// func testCgoExternalThreadPanic(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{12402176 0xc0056b1260}))  {
// 	 := runtime_test.TestCgoExternalThreadPanic(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC runtime_test.TestCgoExternalThreadSIGPROF has: 
// func testCgoExternalThreadSIGPROF(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{12402513 0xc0056b1800}))  {
// 	 := runtime_test.TestCgoExternalThreadSIGPROF(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC runtime_test.TestCgoExternalThreadSignal has: 
// func testCgoExternalThreadSignal(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{12403208 0xc0056b62e0}))  {
// 	 := runtime_test.TestCgoExternalThreadSignal(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC runtime_test.TestCgoLockOSThreadExit has: 
// func testCgoLockOSThreadExit(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{12411403 0xc0056d0e00}))  {
// 	 := runtime_test.TestCgoLockOSThreadExit(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC runtime_test.TestCgoNumGoroutine has: 
// func testCgoNumGoroutine(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{12410247 0xc0056cbb20}))  {
// 	 := runtime_test.TestCgoNumGoroutine(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC runtime_test.TestCgoPanicDeadlock has: 
// func testCgoPanicDeadlock(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{12405866 0xc0056beea0}))  {
// 	 := runtime_test.TestCgoPanicDeadlock(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC runtime_test.TestCgoPprof has: 
// func testCgoPprof(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{12408495 0xc0056c7ce0}))  {
// 	 := runtime_test.TestCgoPprof(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC runtime_test.TestCgoPprofPIE has: 
// func testCgoPprofPIE(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{12408568 0xc0056c7e60}))  {
// 	 := runtime_test.TestCgoPprofPIE(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC runtime_test.TestCgoPprofThread has: 
// func testCgoPprofThread(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{12408658 0xc0056c7fe0}))  {
// 	 := runtime_test.TestCgoPprofThread(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC runtime_test.TestCgoPprofThreadNoTraceback has: 
// func testCgoPprofThreadNoTraceback(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{12408751 0xc0056ca160}))  {
// 	 := runtime_test.TestCgoPprofThreadNoTraceback(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC runtime_test.TestCgoSignalDeadlock has: 
// func testCgoSignalDeadlock(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{12400864 0xc00569df00}))  {
// 	 := runtime_test.TestCgoSignalDeadlock(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC runtime_test.TestCgoTraceback has: 
// func testCgoTraceback(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{12401320 0xc0056b0480}))  {
// 	 := runtime_test.TestCgoTraceback(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC runtime_test.TestCgoTracebackContext has: 
// func testCgoTracebackContext(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{12406789 0xc0056bfe00}))  {
// 	 := runtime_test.TestCgoTracebackContext(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC runtime_test.TestCgoTracebackSigpanic has: 
// func testCgoTracebackSigpanic(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{12412347 0xc0056d1e40}))  {
// 	 := runtime_test.TestCgoTracebackSigpanic(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC runtime_test.TestChan has: 
// func testChan(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{10992888 0xc0032a5620}))  {
// 	 := runtime_test.TestChan(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC runtime_test.TestChanSendBarrier has: 
// func testChanSendBarrier(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{11133162 0xc003583fc0}))  {
// 	 := runtime_test.TestChanSendBarrier(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC runtime_test.TestChanSendInterface has: 
// func testChanSendInterface(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{11002563 0xc0042bace0}))  {
// 	 := runtime_test.TestChanSendInterface(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC runtime_test.TestChanSendSelectBarrier has: 
// func testChanSendSelectBarrier(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{11133091 0xc003583ea0}))  {
// 	 := runtime_test.TestChanSendSelectBarrier(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC runtime_test.TestClockVDSOAndFallbackPaths has: 
// func testClockVDSOAndFallbackPaths(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{12512947 0xc0058701a0}))  {
// 	 := runtime_test.TestClockVDSOAndFallbackPaths(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC runtime_test.TestCmpIfaceConcreteAlloc has: 
// func testCmpIfaceConcreteAlloc(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{11365124 0xc003b869e0}))  {
// 	 := runtime_test.TestCmpIfaceConcreteAlloc(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC runtime_test.TestCollisions has: 
// func testCollisions(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{12460364 0xc0057ca980}))  {
// 	 := runtime_test.TestCollisions(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC runtime_test.TestCompareTempString has: 
// func testCompareTempString(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{11087870 0xc003e71b60}))  {
// 	 := runtime_test.TestCompareTempString(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC runtime_test.TestConcurrentMapIterateWrite has: 
// func testConcurrentMapIterateWrite(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{12251852 0xc0054a6300}))  {
// 	 := runtime_test.TestConcurrentMapIterateWrite(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC runtime_test.TestConcurrentMapReadWrite has: 
// func testConcurrentMapReadWrite(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{12251462 0xc00549bde0}))  {
// 	 := runtime_test.TestConcurrentMapReadWrite(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC runtime_test.TestConcurrentMapWrites has: 
// func testConcurrentMapWrites(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{12251090 0xc00549b8c0}))  {
// 	 := runtime_test.TestConcurrentMapWrites(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC runtime_test.TestConcurrentReadsAfterGrowth has: 
// func testConcurrentReadsAfterGrowth(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{11548881 0xc003de41c0}))  {
// 	 := runtime_test.TestConcurrentReadsAfterGrowth(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC runtime_test.TestConcurrentReadsAfterGrowthReflect has: 
// func testConcurrentReadsAfterGrowthReflect(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{11548985 0xc003de4320}))  {
// 	 := runtime_test.TestConcurrentReadsAfterGrowthReflect(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC runtime_test.TestCrashDumpsAllThreads has: 
// func testCrashDumpsAllThreads(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{12499478 0xc005838ac0}))  {
// 	 := runtime_test.TestCrashDumpsAllThreads(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC runtime_test.TestCrashHandler has: 
// func testCrashHandler(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{12242565 0xc00547d9a0}))  {
// 	 := runtime_test.TestCrashHandler(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC runtime_test.TestDebugCall has: 
// func testDebugCall(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{11021633 0xc0038f7e20}))  {
// 	 := runtime_test.TestDebugCall(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC runtime_test.TestDebugCallGC has: 
// func testDebugCallGC(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{11022653 0xc0038f9200}))  {
// 	 := runtime_test.TestDebugCallGC(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC runtime_test.TestDebugCallGrowStack has: 
// func testDebugCallGrowStack(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{11022897 0xc0038f9660}))  {
// 	 := runtime_test.TestDebugCallGrowStack(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC runtime_test.TestDebugCallLarge has: 
// func testDebugCallLarge(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{11022103 0xc0038f8660}))  {
// 	 := runtime_test.TestDebugCallLarge(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC runtime_test.TestDebugCallPanic has: 
// func testDebugCallPanic(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{11024246 0xc003ebcaa0}))  {
// 	 := runtime_test.TestDebugCallPanic(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC runtime_test.TestDebugCallUnsafePoint has: 
// func testDebugCallUnsafePoint(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{11023539 0xc0038f9fe0}))  {
// 	 := runtime_test.TestDebugCallUnsafePoint(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC runtime_test.TestDeferDeleteSlow has: 
// func testDeferDeleteSlow(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{11565236 0xc004c52fa0}))  {
// 	 := runtime_test.TestDeferDeleteSlow(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC runtime_test.TestDeferKeepAlive has: 
// func testDeferKeepAlive(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{11496201 0xc003d11300}))  {
// 	 := runtime_test.TestDeferKeepAlive(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC runtime_test.TestDeferLeafSigpanic has: 
// func testDeferLeafSigpanic(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{11346936 0xc003b42380}))  {
// 	 := runtime_test.TestDeferLeafSigpanic(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC runtime_test.TestDeferPtrs has: 
// func testDeferPtrs(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{11344558 0xc003b3ca20}))  {
// 	 := runtime_test.TestDeferPtrs(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC runtime_test.TestDeferPtrsGoexit has: 
// func testDeferPtrsGoexit(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{11345257 0xc003b3cea0}))  {
// 	 := runtime_test.TestDeferPtrsGoexit(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC runtime_test.TestDeferPtrsPanic has: 
// func testDeferPtrsPanic(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{11345877 0xc003b3d800}))  {
// 	 := runtime_test.TestDeferPtrsPanic(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC runtime_test.TestEmptyKeyAndValue has: 
// func testEmptyKeyAndValue(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{11550000 0xc003de5880}))  {
// 	 := runtime_test.TestEmptyKeyAndValue(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC runtime_test.TestEmptySlice has: 
// func testEmptySlice(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{11494571 0xc003d097e0}))  {
// 	 := runtime_test.TestEmptySlice(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC runtime_test.TestEmptyString has: 
// func testEmptyString(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{11495355 0xc003d104c0}))  {
// 	 := runtime_test.TestEmptyString(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC runtime_test.TestEnsureDropM has: 
// func testEnsureDropM(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{12404366 0xc0056b76e0}))  {
// 	 := runtime_test.TestEnsureDropM(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC runtime_test.TestEpollctlErrorSign has: 
// func testEpollctlErrorSign(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{11372554 0xc003baa900}))  {
// 	 := runtime_test.TestEpollctlErrorSign(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC runtime_test.TestEqString has: 
// func testEqString(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{11768549 0xc004efb380}))  {
// 	 := runtime_test.TestEqString(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC runtime_test.TestFastLog2 has: 
// func testFastLog2(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{11127174 0xc004789f00}))  {
// 	 := runtime_test.TestFastLog2(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC runtime_test.TestFinalizerInterfaceBig has: 
// func testFinalizerInterfaceBig(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{11492443 0xc003d01320}))  {
// 	 := runtime_test.TestFinalizerInterfaceBig(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC runtime_test.TestFinalizerOnGlobal has: 
// func testFinalizerOnGlobal(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{11495863 0xc003d10c60}))  {
// 	 := runtime_test.TestFinalizerOnGlobal(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC runtime_test.TestFinalizerType has: 
// func testFinalizerType(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{11491024 0xc003cef7e0}))  {
// 	 := runtime_test.TestFinalizerType(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC runtime_test.TestFinalizerZeroSizedStruct has: 
// func testFinalizerZeroSizedStruct(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{11493236 0xc003d08000}))  {
// 	 := runtime_test.TestFinalizerZeroSizedStruct(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC runtime_test.TestFixedGOROOT has: 
// func testFixedGOROOT(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{12420948 0xc0056ef200}))  {
// 	 := runtime_test.TestFixedGOROOT(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC runtime_test.TestFloat64 has: 
// func testFloat64(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{10953888 0xc0038aeb20}))  {
// 	 := runtime_test.TestFloat64(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC runtime_test.TestFutexsleep has: 
// func testFutexsleep(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{11443508 0xc003c82aa0}))  {
// 	 := runtime_test.TestFutexsleep(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC runtime_test.TestG0StackOverflow has: 
// func testG0StackOverflow(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{12256529 0xc0054b08e0}))  {
// 	 := runtime_test.TestG0StackOverflow(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC runtime_test.TestGCFairness has: 
// func testGCFairness(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{11528214 0xc003d98200}))  {
// 	 := runtime_test.TestGCFairness(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC runtime_test.TestGCFairness2 has: 
// func testGCFairness2(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{11528392 0xc003d98520}))  {
// 	 := runtime_test.TestGCFairness2(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC runtime_test.TestGCInfo has: 
// func testGCInfo(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{12506355 0xc005854920}))  {
// 	 := runtime_test.TestGCInfo(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC runtime_test.TestGcArraySlice has: 
// func testGcArraySlice(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{11203895 0xc001873c20}))  {
// 	 := runtime_test.TestGcArraySlice(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC runtime_test.TestGcDeepNesting has: 
// func testGcDeepNesting(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{11203271 0xc001872ce0}))  {
// 	 := runtime_test.TestGcDeepNesting(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC runtime_test.TestGcLastTime has: 
// func testGcLastTime(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{11204687 0xc0026cd000}))  {
// 	 := runtime_test.TestGcLastTime(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC runtime_test.TestGcMapIndirection has: 
// func testGcMapIndirection(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{11203670 0xc0018736a0}))  {
// 	 := runtime_test.TestGcMapIndirection(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC runtime_test.TestGcRescan has: 
// func testGcRescan(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{11204260 0xc0026cc500}))  {
// 	 := runtime_test.TestGcRescan(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC runtime_test.TestGcSys has: 
// func testGcSys(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{11203012 0xc001872840}))  {
// 	 := runtime_test.TestGcSys(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC runtime_test.TestGdbAutotmpTypes has: 
// func testGdbAutotmpTypes(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{11122321 0xc0046178e0}))  {
// 	 := runtime_test.TestGdbAutotmpTypes(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC runtime_test.TestGdbBacktrace has: 
// func testGdbBacktrace(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{11120558 0xc004611ee0}))  {
// 	 := runtime_test.TestGdbBacktrace(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC runtime_test.TestGdbConst has: 
// func testGdbConst(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{11124015 0xc004786fa0}))  {
// 	 := runtime_test.TestGdbConst(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC runtime_test.TestGdbPanic has: 
// func testGdbPanic(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{11125648 0xc004788640}))  {
// 	 := runtime_test.TestGdbPanic(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC runtime_test.TestGdbPython has: 
// func testGdbPython(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{11114235 0xc0043975c0}))  {
// 	 := runtime_test.TestGdbPython(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC runtime_test.TestGdbPythonCgo has: 
// func testGdbPythonCgo(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{11114301 0xc004397720}))  {
// 	 := runtime_test.TestGdbPythonCgo(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC runtime_test.TestGoNil has: 
// func testGoNil(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{12244873 0xc005483b40}))  {
// 	 := runtime_test.TestGoNil(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC runtime_test.TestGoexitCrash has: 
// func testGoexitCrash(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{12244309 0xc005483380}))  {
// 	 := runtime_test.TestGoexitCrash(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC runtime_test.TestGoexitDeadlock has: 
// func testGoexitDeadlock(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{12243209 0xc005482480}))  {
// 	 := runtime_test.TestGoexitDeadlock(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC runtime_test.TestGoexitDefer has: 
// func testGoexitDefer(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{12244578 0xc005483740}))  {
// 	 := runtime_test.TestGoexitDefer(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC runtime_test.TestGoexitInPanic has: 
// func testGoexitInPanic(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{12246047 0xc005490ba0}))  {
// 	 := runtime_test.TestGoexitInPanic(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC runtime_test.TestGoroutineParallelism has: 
// func testGoroutineParallelism(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{11522808 0xc003d7ef60}))  {
// 	 := runtime_test.TestGoroutineParallelism(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC runtime_test.TestGoroutineParallelism2 has: 
// func testGoroutineParallelism2(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{11523797 0xc003d7fdc0}))  {
// 	 := runtime_test.TestGoroutineParallelism2(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC runtime_test.TestGoroutineProfile has: 
// func testGoroutineProfile(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{11930545 0xc0051010a0}))  {
// 	 := runtime_test.TestGoroutineProfile(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC runtime_test.TestGoroutineProfileTrivial has: 
// func testGoroutineProfileTrivial(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{11771444 0xc004f0c600}))  {
// 	 := runtime_test.TestGoroutineProfileTrivial(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC runtime_test.TestGrowWithNaN has: 
// func testGrowWithNaN(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{11544947 0xc003dcfd20}))  {
// 	 := runtime_test.TestGrowWithNaN(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC runtime_test.TestGrowWithNegativeZero has: 
// func testGrowWithNegativeZero(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{11545614 0xc003dd48c0}))  {
// 	 := runtime_test.TestGrowWithNegativeZero(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC runtime_test.TestHmapSize has: 
// func testHmapSize(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{11541880 0xc003dc47e0}))  {
// 	 := runtime_test.TestHmapSize(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC runtime_test.TestHugeGCInfo has: 
// func testHugeGCInfo(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{11205286 0xc0026cd9e0}))  {
// 	 := runtime_test.TestHugeGCInfo(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC runtime_test.TestIgnoreBogusMapHint has: 
// func testIgnoreBogusMapHint(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{11555569 0xc004c26fe0}))  {
// 	 := runtime_test.TestIgnoreBogusMapHint(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC runtime_test.TestIncrementAfterBulkClearKeyStringValueInt has: 
// func testIncrementAfterBulkClearKeyStringValueInt(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{11567150 0xc004c5af80}))  {
// 	 := runtime_test.TestIncrementAfterBulkClearKeyStringValueInt(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC runtime_test.TestIncrementAfterDeleteKeyStringValueInt has: 
// func testIncrementAfterDeleteKeyStringValueInt(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{11566465 0xc004c5a5a0}))  {
// 	 := runtime_test.TestIncrementAfterDeleteKeyStringValueInt(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC runtime_test.TestIncrementAfterDeleteKeyValueString has: 
// func testIncrementAfterDeleteKeyValueString(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{11566706 0xc004c5aa40}))  {
// 	 := runtime_test.TestIncrementAfterDeleteKeyValueString(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC runtime_test.TestIncrementAfterDeleteValueInt has: 
// func testIncrementAfterDeleteValueInt(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{11565764 0xc004c537c0}))  {
// 	 := runtime_test.TestIncrementAfterDeleteValueInt(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC runtime_test.TestIncrementAfterDeleteValueInt32 has: 
// func testIncrementAfterDeleteValueInt32(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{11565994 0xc004c53c60}))  {
// 	 := runtime_test.TestIncrementAfterDeleteValueInt32(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC runtime_test.TestIncrementAfterDeleteValueInt64 has: 
// func testIncrementAfterDeleteValueInt64(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{11566226 0xc004c5a100}))  {
// 	 := runtime_test.TestIncrementAfterDeleteValueInt64(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC runtime_test.TestInitDeadlock has: 
// func testInitDeadlock(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{12242975 0xc005482060}))  {
// 	 := runtime_test.TestInitDeadlock(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC runtime_test.TestIntString has: 
// func testIntString(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{11088466 0xc003e76680}))  {
// 	 := runtime_test.TestIntString(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC runtime_test.TestIntStringAllocs has: 
// func testIntStringAllocs(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{11088922 0xc003e76fa0}))  {
// 	 := runtime_test.TestIntStringAllocs(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC runtime_test.TestIterGrowAndDelete has: 
// func testIterGrowAndDelete(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{11547011 0xc003dd5f80}))  {
// 	 := runtime_test.TestIterGrowAndDelete(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC runtime_test.TestIterGrowWithGC has: 
// func testIterGrowWithGC(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{11547512 0xc003ddc7a0}))  {
// 	 := runtime_test.TestIterGrowWithGC(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC runtime_test.TestLFStack has: 
// func testLFStack(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{12277989 0xc0054f93c0}))  {
// 	 := runtime_test.TestLFStack(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC runtime_test.TestLFStackStress has: 
// func testLFStackStress(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{12279025 0xc005504320}))  {
// 	 := runtime_test.TestLFStackStress(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC runtime_test.TestLargeStringConcat has: 
// func testLargeStringConcat(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{11087528 0xc003e71420}))  {
// 	 := runtime_test.TestLargeStringConcat(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC runtime_test.TestLineNumber has: 
// func testLineNumber(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{11403064 0xc003c1c8c0}))  {
// 	 := runtime_test.TestLineNumber(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC runtime_test.TestLldbPython has: 
// func testLldbPython(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{11758184 0xc004ecdf40}))  {
// 	 := runtime_test.TestLldbPython(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC runtime_test.TestLockOSThread has: 
// func testLockOSThread(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{11372148 0xc003baa260}))  {
// 	 := runtime_test.TestLockOSThread(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC runtime_test.TestLockOSThreadExit has: 
// func testLockOSThreadExit(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{11540420 0xc003dbd8c0}))  {
// 	 := runtime_test.TestLockOSThreadExit(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC runtime_test.TestLockOSThreadNesting has: 
// func testLockOSThreadNesting(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{11539801 0xc003dbcde0}))  {
// 	 := runtime_test.TestLockOSThreadNesting(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC runtime_test.TestLockedDeadlock has: 
// func testLockedDeadlock(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{12243051 0xc0054821c0}))  {
// 	 := runtime_test.TestLockedDeadlock(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC runtime_test.TestLockedDeadlock2 has: 
// func testLockedDeadlock2(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{12243130 0xc005482320}))  {
// 	 := runtime_test.TestLockedDeadlock2(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC runtime_test.TestMain has: 
// func testMain(m ABEND881(unrecognized Expr type *ast.StarExpr at: &{12238414 0xc005461280}))  {
// 	 := runtime_test.TestMain(m)
// 	...ABEND: TODO...
// }
// 
GO FUNC runtime_test.TestMainGoroutineID has: 
// func testMainGoroutineID(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{12245107 0xc005483f00}))  {
// 	 := runtime_test.TestMainGoroutineID(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC runtime_test.TestMapAppendAssignment has: 
// func testMapAppendAssignment(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{11544372 0xc003dcee80}))  {
// 	 := runtime_test.TestMapAppendAssignment(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC runtime_test.TestMapAssignmentNan has: 
// func testMapAssignmentNan(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{11543487 0xc003dc5f80}))  {
// 	 := runtime_test.TestMapAssignmentNan(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC runtime_test.TestMapBuckets has: 
// func testMapBuckets(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{11556048 0xc004c27a40}))  {
// 	 := runtime_test.TestMapBuckets(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC runtime_test.TestMapHugeZero has: 
// func testMapHugeZero(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{11549709 0xc003de5320}))  {
// 	 := runtime_test.TestMapHugeZero(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC runtime_test.TestMapIterOrder has: 
// func testMapIterOrder(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{11552214 0xc004c178e0}))  {
// 	 := runtime_test.TestMapIterOrder(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC runtime_test.TestMapLargeKeyNoPointer has: 
// func testMapLargeKeyNoPointer(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{11554648 0xc004c21ba0}))  {
// 	 := runtime_test.TestMapLargeKeyNoPointer(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC runtime_test.TestMapLargeValNoPointer has: 
// func testMapLargeValNoPointer(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{11555041 0xc004c26500}))  {
// 	 := runtime_test.TestMapLargeValNoPointer(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC runtime_test.TestMapNanGrowIterator has: 
// func testMapNanGrowIterator(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{11551474 0xc004c16c40}))  {
// 	 := runtime_test.TestMapNanGrowIterator(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC runtime_test.TestMapOperatorAssignment has: 
// func testMapOperatorAssignment(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{11543938 0xc003dce820}))  {
// 	 := runtime_test.TestMapOperatorAssignment(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC runtime_test.TestMapOperatorAssignmentNan has: 
// func testMapOperatorAssignmentNan(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{11543748 0xc003dce400}))  {
// 	 := runtime_test.TestMapOperatorAssignmentNan(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC runtime_test.TestMapSparseIterOrder has: 
// func testMapSparseIterOrder(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{11552939 0xc004c20460}))  {
// 	 := runtime_test.TestMapSparseIterOrder(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC runtime_test.TestMapStringBytesLookup has: 
// func testMapStringBytesLookup(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{11553700 0xc004c20f20}))  {
// 	 := runtime_test.TestMapStringBytesLookup(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC runtime_test.TestMemHash32Equality has: 
// func testMemHash32Equality(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{12444296 0xc0057669e0}))  {
// 	 := runtime_test.TestMemHash32Equality(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC runtime_test.TestMemHash64Equality has: 
// func testMemHash64Equality(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{12444737 0xc005767320}))  {
// 	 := runtime_test.TestMemHash64Equality(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC runtime_test.TestMemPprof has: 
// func testMemPprof(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{12249855 0xc00549a1e0}))  {
// 	 := runtime_test.TestMemPprof(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC runtime_test.TestMemStats has: 
// func testMemStats(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{12302404 0xc00554ce80}))  {
// 	 := runtime_test.TestMemStats(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC runtime_test.TestMemclr has: 
// func testMemclr(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{12429414 0xc00571e6e0}))  {
// 	 := runtime_test.TestMemclr(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC runtime_test.TestMemmove has: 
// func testMemmove(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{12424488 0xc0056f9580}))  {
// 	 := runtime_test.TestMemmove(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC runtime_test.TestMemmoveAlias has: 
// func testMemmoveAlias(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{12425382 0xc005708a00}))  {
// 	 := runtime_test.TestMemmoveAlias(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC runtime_test.TestMemmoveLarge0x180000 has: 
// func testMemmoveLarge0x180000(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{12426154 0xc005709ac0}))  {
// 	 := runtime_test.TestMemmoveLarge0x180000(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC runtime_test.TestMemmoveOverflow has: 
// func testMemmoveOverflow(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{11270043 0xc0049a4b00}))  {
// 	 := runtime_test.TestMemmoveOverflow(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC runtime_test.TestMemmoveOverlapLarge0x120000 has: 
// func testMemmoveOverlapLarge0x120000(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{12426401 0xc005709ee0}))  {
// 	 := runtime_test.TestMemmoveOverlapLarge0x120000(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC runtime_test.TestMincoreErrorSign has: 
// func testMincoreErrorSign(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{11372351 0xc003baa4c0}))  {
// 	 := runtime_test.TestMincoreErrorSign(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC runtime_test.TestMmapErrorSign has: 
// func testMmapErrorSign(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{11134272 0xc0034a8e00}))  {
// 	 := runtime_test.TestMmapErrorSign(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC runtime_test.TestMultiConsumer has: 
// func testMultiConsumer(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{11003356 0xc0042bbd40}))  {
// 	 := runtime_test.TestMultiConsumer(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC runtime_test.TestNegativeZero has: 
// func testNegativeZero(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{11542573 0xc003dc4d60}))  {
// 	 := runtime_test.TestNegativeZero(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC runtime_test.TestNetpollDeadlock has: 
// func testNetpollDeadlock(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{12248292 0xc0054988e0}))  {
// 	 := runtime_test.TestNetpollDeadlock(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC runtime_test.TestNewOSProc0 has: 
// func testNewOSProc0(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{11075307 0xc00216e760}))  {
// 	 := runtime_test.TestNewOSProc0(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC runtime_test.TestNilName has: 
// func testNilName(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{11404421 0xc003c220e0}))  {
// 	 := runtime_test.TestNilName(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC runtime_test.TestNoHelperGoroutines has: 
// func testNoHelperGoroutines(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{12245367 0xc0054902c0}))  {
// 	 := runtime_test.TestNoHelperGoroutines(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC runtime_test.TestNonEscapingConvT2E has: 
// func testNonEscapingConvT2E(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{11367817 0xc003b94d40}))  {
// 	 := runtime_test.TestNonEscapingConvT2E(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC runtime_test.TestNonEscapingConvT2I has: 
// func testNonEscapingConvT2I(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{11368179 0xc003b95360}))  {
// 	 := runtime_test.TestNonEscapingConvT2I(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC runtime_test.TestNonEscapingMap has: 
// func testNonEscapingMap(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{11560737 0xc004c3a2c0}))  {
// 	 := runtime_test.TestNonEscapingMap(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC runtime_test.TestNonblockRecvRace has: 
// func testNonblockRecvRace(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{10996939 0xc0041235a0}))  {
// 	 := runtime_test.TestNonblockRecvRace(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC runtime_test.TestNonblockSelectRace has: 
// func testNonblockSelectRace(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{10997881 0xc004123d00}))  {
// 	 := runtime_test.TestNonblockSelectRace(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC runtime_test.TestNonblockSelectRace2 has: 
// func testNonblockSelectRace2(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{10998385 0xc00426c540}))  {
// 	 := runtime_test.TestNonblockSelectRace2(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC runtime_test.TestNumGoroutine has: 
// func testNumGoroutine(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{11528572 0xc003d98840}))  {
// 	 := runtime_test.TestNumGoroutine(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC runtime_test.TestPageAccounting has: 
// func testPageAccounting(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{11210985 0xc003e3a2e0}))  {
// 	 := runtime_test.TestPageAccounting(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC runtime_test.TestPanicAfterGoexit has: 
// func testPanicAfterGoexit(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{12247247 0xc005491d40}))  {
// 	 := runtime_test.TestPanicAfterGoexit(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC runtime_test.TestPanicDeadlockGosched has: 
// func testPanicDeadlockGosched(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{12249402 0xc005499b20}))  {
// 	 := runtime_test.TestPanicDeadlockGosched(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC runtime_test.TestPanicDeadlockSyscall has: 
// func testPanicDeadlockSyscall(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{12249522 0xc005499ca0}))  {
// 	 := runtime_test.TestPanicDeadlockSyscall(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC runtime_test.TestPanicFar has: 
// func testPanicFar(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{11347988 0xc003b42ee0}))  {
// 	 := runtime_test.TestPanicFar(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC runtime_test.TestPanicInlined has: 
// func testPanicInlined(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{12252364 0xc0054a6c80}))  {
// 	 := runtime_test.TestPanicInlined(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC runtime_test.TestPanicLoop has: 
// func testPanicLoop(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{12249622 0xc005499e20}))  {
// 	 := runtime_test.TestPanicLoop(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC runtime_test.TestPanicRace has: 
// func testPanicRace(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{12252831 0xc0054a7340}))  {
// 	 := runtime_test.TestPanicRace(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC runtime_test.TestPanicSystemstack has: 
// func testPanicSystemstack(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{12502598 0xc0058452a0}))  {
// 	 := runtime_test.TestPanicSystemstack(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC runtime_test.TestPanicTraceback has: 
// func testPanicTraceback(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{12248532 0xc005498d00}))  {
// 	 := runtime_test.TestPanicTraceback(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC runtime_test.TestPanicUseStack has: 
// func testPanicUseStack(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{11347573 0xc003b427e0}))  {
// 	 := runtime_test.TestPanicUseStack(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC runtime_test.TestParallelRWMutexReaders has: 
// func testParallelRWMutexReaders(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{11129266 0xc00478fa60}))  {
// 	 := runtime_test.TestParallelRWMutexReaders(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC runtime_test.TestPeriodicGC has: 
// func testPeriodicGC(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{11205782 0xc0026d2140}))  {
// 	 := runtime_test.TestPeriodicGC(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC runtime_test.TestPhysPageSize has: 
// func testPhysPageSize(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{11134544 0xc0034a94a0}))  {
// 	 := runtime_test.TestPhysPageSize(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC runtime_test.TestPingPongHog has: 
// func testPingPongHog(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{11529449 0xc003d992a0}))  {
// 	 := runtime_test.TestPingPongHog(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC runtime_test.TestPreemptSplitBig has: 
// func testPreemptSplitBig(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{11531752 0xc003d9d480}))  {
// 	 := runtime_test.TestPreemptSplitBig(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC runtime_test.TestPreemption has: 
// func testPreemption(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{11527253 0xc003d8cfe0}))  {
// 	 := runtime_test.TestPreemption(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC runtime_test.TestPreemptionGC has: 
// func testPreemptionGC(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{11527719 0xc003d8d8c0}))  {
// 	 := runtime_test.TestPreemptionGC(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC runtime_test.TestPrintGC has: 
// func testPrintGC(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{11210200 0xc0026df5e0}))  {
// 	 := runtime_test.TestPrintGC(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC runtime_test.TestProfBuf has: 
// func testProfBuf(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{11512248 0xc003d4c0c0}))  {
// 	 := runtime_test.TestProfBuf(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC runtime_test.TestPseudoRandomSend has: 
// func testPseudoRandomSend(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{11002770 0xc0042bb080}))  {
// 	 := runtime_test.TestPseudoRandomSend(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC runtime_test.TestRWMutex has: 
// func testRWMutex(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{11131001 0xc00357d740}))  {
// 	 := runtime_test.TestRWMutex(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC runtime_test.TestRaceProf has: 
// func testRaceProf(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{12408838 0xc0056ca2e0}))  {
// 	 := runtime_test.TestRaceProf(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC runtime_test.TestRaceSignal has: 
// func testRaceSignal(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{12409521 0xc0056cae60}))  {
// 	 := runtime_test.TestRaceSignal(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC runtime_test.TestRangeStringCast has: 
// func testRangeStringCast(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{11089174 0xc003e77480}))  {
// 	 := runtime_test.TestRangeStringCast(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC runtime_test.TestReadMemStats has: 
// func testReadMemStats(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{11211549 0xc003e3a960}))  {
// 	 := runtime_test.TestReadMemStats(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC runtime_test.TestRecoverBeforePanicAfterGoexit has: 
// func testRecoverBeforePanicAfterGoexit(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{12247850 0xc005498500}))  {
// 	 := runtime_test.TestRecoverBeforePanicAfterGoexit(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC runtime_test.TestRecoveredPanicAfterGoexit has: 
// func testRecoveredPanicAfterGoexit(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{12247541 0xc005498140}))  {
// 	 := runtime_test.TestRecoveredPanicAfterGoexit(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC runtime_test.TestRecursivePanic has: 
// func testRecursivePanic(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{12244071 0xc005482fc0}))  {
// 	 := runtime_test.TestRecursivePanic(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC runtime_test.TestRuntimePanic has: 
// func testRuntimePanic(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{12256019 0xc0054b0080}))  {
// 	 := runtime_test.TestRuntimePanic(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC runtime_test.TestRuntimePanicWithRuntimeError has: 
// func testRuntimePanicWithRuntimeError(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{12246474 0xc005490fe0}))  {
// 	 := runtime_test.TestRuntimePanicWithRuntimeError(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC runtime_test.TestSchedLocalQueue has: 
// func testSchedLocalQueue(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{11533005 0xc003da4680}))  {
// 	 := runtime_test.TestSchedLocalQueue(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC runtime_test.TestSchedLocalQueueEmpty has: 
// func testSchedLocalQueueEmpty(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{11533176 0xc003da4900}))  {
// 	 := runtime_test.TestSchedLocalQueueEmpty(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC runtime_test.TestSchedLocalQueueSteal has: 
// func testSchedLocalQueueSteal(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{11533088 0xc003da47c0}))  {
// 	 := runtime_test.TestSchedLocalQueueSteal(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC runtime_test.TestSelectDuplicateChannel has: 
// func testSelectDuplicateChannel(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{11005049 0xc004433820}))  {
// 	 := runtime_test.TestSelectDuplicateChannel(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC runtime_test.TestSelectFairness has: 
// func testSelectFairness(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{11001309 0xc0042b77c0}))  {
// 	 := runtime_test.TestSelectFairness(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC runtime_test.TestSelectStackAdjust has: 
// func testSelectStackAdjust(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{11005832 0xc0045b20a0}))  {
// 	 := runtime_test.TestSelectStackAdjust(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC runtime_test.TestSelectStress has: 
// func testSelectStress(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{10999591 0xc00426d980}))  {
// 	 := runtime_test.TestSelectStress(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC runtime_test.TestSelfSelect has: 
// func testSelfSelect(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{10998812 0xc00426cd00}))  {
// 	 := runtime_test.TestSelfSelect(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC runtime_test.TestSetPanicOnFault has: 
// func testSetPanicOnFault(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{11767431 0xc004efa3e0}))  {
// 	 := runtime_test.TestSetPanicOnFault(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC runtime_test.TestShrinkStackDuringBlockedSend has: 
// func testShrinkStackDuringBlockedSend(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{11004262 0xc004432ec0}))  {
// 	 := runtime_test.TestShrinkStackDuringBlockedSend(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC runtime_test.TestSideEffectOrder has: 
// func testSideEffectOrder(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{11388871 0xc003bf5580}))  {
// 	 := runtime_test.TestSideEffectOrder(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC runtime_test.TestSigStackSwapping has: 
// func testSigStackSwapping(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{12412053 0xc0056d1900}))  {
// 	 := runtime_test.TestSigStackSwapping(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC runtime_test.TestSignalDuringExec has: 
// func testSignalDuringExec(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{12505649 0xc005854100}))  {
// 	 := runtime_test.TestSignalDuringExec(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC runtime_test.TestSignalExitStatus has: 
// func testSignalExitStatus(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{12504785 0xc00584b1a0}))  {
// 	 := runtime_test.TestSignalExitStatus(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC runtime_test.TestSignalIgnoreSIGTRAP has: 
// func testSignalIgnoreSIGTRAP(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{12505454 0xc00584bde0}))  {
// 	 := runtime_test.TestSignalIgnoreSIGTRAP(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC runtime_test.TestSimpleDeadlock has: 
// func testSimpleDeadlock(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{12242899 0xc00547df00}))  {
// 	 := runtime_test.TestSimpleDeadlock(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC runtime_test.TestSingleBucketMapStringKeys_DupLen has: 
// func testSingleBucketMapStringKeys_DupLen(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{11550460 0xc003de5f60}))  {
// 	 := runtime_test.TestSingleBucketMapStringKeys_DupLen(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC runtime_test.TestSingleBucketMapStringKeys_NoDupLen has: 
// func testSingleBucketMapStringKeys_NoDupLen(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{11550847 0xc004c16480}))  {
// 	 := runtime_test.TestSingleBucketMapStringKeys_NoDupLen(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC runtime_test.TestSizeof has: 
// func testSizeof(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{11019347 0xc0048c1be0}))  {
// 	 := runtime_test.TestSizeof(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC runtime_test.TestSmhasherAppendedZeros has: 
// func testSmhasherAppendedZeros(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{12447126 0xc005785ca0}))  {
// 	 := runtime_test.TestSmhasherAppendedZeros(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC runtime_test.TestSmhasherAvalanche has: 
// func testSmhasherAvalanche(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{12453657 0xc0057aaf20}))  {
// 	 := runtime_test.TestSmhasherAvalanche(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC runtime_test.TestSmhasherCyclic has: 
// func testSmhasherCyclic(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{12448756 0xc005791f60}))  {
// 	 := runtime_test.TestSmhasherCyclic(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC runtime_test.TestSmhasherPermutation has: 
// func testSmhasherPermutation(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{12450134 0xc005793f00}))  {
// 	 := runtime_test.TestSmhasherPermutation(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC runtime_test.TestSmhasherSanity has: 
// func testSmhasherSanity(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{12445614 0xc005767de0}))  {
// 	 := runtime_test.TestSmhasherSanity(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC runtime_test.TestSmhasherSeed has: 
// func testSmhasherSeed(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{12457090 0xc0057b8f20}))  {
// 	 := runtime_test.TestSmhasherSeed(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC runtime_test.TestSmhasherSmallKeys has: 
// func testSmhasherSmallKeys(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{12447344 0xc005790120}))  {
// 	 := runtime_test.TestSmhasherSmallKeys(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC runtime_test.TestSmhasherSparse has: 
// func testSmhasherSparse(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{12449311 0xc005792c00}))  {
// 	 := runtime_test.TestSmhasherSparse(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC runtime_test.TestSmhasherText has: 
// func testSmhasherText(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{12456358 0xc0057b3f20}))  {
// 	 := runtime_test.TestSmhasherText(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC runtime_test.TestSmhasherTwoNonzero has: 
// func testSmhasherTwoNonzero(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{12447998 0xc005790f00}))  {
// 	 := runtime_test.TestSmhasherTwoNonzero(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC runtime_test.TestSmhasherWindowed has: 
// func testSmhasherWindowed(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{12455751 0xc0057b31e0}))  {
// 	 := runtime_test.TestSmhasherWindowed(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC runtime_test.TestSmhasherZeros has: 
// func testSmhasherZeros(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{12447733 0xc005790a00}))  {
// 	 := runtime_test.TestSmhasherZeros(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC runtime_test.TestStackAllOutput has: 
// func testStackAllOutput(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{11349980 0xc003b48fa0}))  {
// 	 := runtime_test.TestStackAllOutput(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC runtime_test.TestStackCache has: 
// func testStackCache(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{11349120 0xc003b43f60}))  {
// 	 := runtime_test.TestStackCache(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC runtime_test.TestStackGrowth has: 
// func testStackGrowth(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{11341400 0xc003b2d5a0}))  {
// 	 := runtime_test.TestStackGrowth(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC runtime_test.TestStackGrowthCallback has: 
// func testStackGrowthCallback(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{11343626 0xc003b35980}))  {
// 	 := runtime_test.TestStackGrowthCallback(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC runtime_test.TestStackMem has: 
// func testStackMem(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{11339808 0xc003b25f40}))  {
// 	 := runtime_test.TestStackMem(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC runtime_test.TestStackOutput has: 
// func testStackOutput(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{11349720 0xc003b48aa0}))  {
// 	 := runtime_test.TestStackOutput(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC runtime_test.TestStackOverflow has: 
// func testStackOverflow(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{12243484 0xc005482840}))  {
// 	 := runtime_test.TestStackOverflow(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC runtime_test.TestStackPanic has: 
// func testStackPanic(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{11350235 0xc003b494a0}))  {
// 	 := runtime_test.TestStackPanic(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC runtime_test.TestStackWrapperCaller has: 
// func testStackWrapperCaller(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{11352996 0xc003b5aca0}))  {
// 	 := runtime_test.TestStackWrapperCaller(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC runtime_test.TestStackWrapperCallers has: 
// func testStackWrapperCallers(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{11353334 0xc003b5b180}))  {
// 	 := runtime_test.TestStackWrapperCallers(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC runtime_test.TestStackWrapperStack has: 
// func testStackWrapperStack(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{11353727 0xc003b5b720}))  {
// 	 := runtime_test.TestStackWrapperStack(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC runtime_test.TestStackWrapperStackPanic has: 
// func testStackWrapperStackPanic(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{11354066 0xc003b5bbe0}))  {
// 	 := runtime_test.TestStackWrapperStackPanic(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC runtime_test.TestStealOrder has: 
// func testStealOrder(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{11539724 0xc003dbcca0}))  {
// 	 := runtime_test.TestStealOrder(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC runtime_test.TestStopCPUProfilingWithProfilerOff has: 
// func testStopCPUProfilingWithProfilerOff(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{11766185 0xc004ef3dc0}))  {
// 	 := runtime_test.TestStopCPUProfilingWithProfilerOff(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC runtime_test.TestStopTheWorldDeadlock has: 
// func testStopTheWorldDeadlock(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{11521567 0xc003d6fa80}))  {
// 	 := runtime_test.TestStopTheWorldDeadlock(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC runtime_test.TestString2Slice has: 
// func testString2Slice(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{11089687 0xc003e77ec0}))  {
// 	 := runtime_test.TestString2Slice(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC runtime_test.TestStringConcatenationAllocs has: 
// func testStringConcatenationAllocs(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{12305980 0xc005566e20}))  {
// 	 := runtime_test.TestStringConcatenationAllocs(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC runtime_test.TestStringOnStack has: 
// func testStringOnStack(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{11088263 0xc003e76260}))  {
// 	 := runtime_test.TestStringOnStack(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC runtime_test.TestStringW has: 
// func testStringW(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{11087108 0xc003e70c80}))  {
// 	 := runtime_test.TestStringW(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC runtime_test.TestStructHash has: 
// func testStructHash(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{12459081 0xc0057c4dc0}))  {
// 	 := runtime_test.TestStructHash(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC runtime_test.TestThreadExhaustion has: 
// func testThreadExhaustion(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{12243781 0xc005482c00}))  {
// 	 := runtime_test.TestThreadExhaustion(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC runtime_test.TestTimePprof has: 
// func testTimePprof(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{12254275 0xc0054aa760}))  {
// 	 := runtime_test.TestTimePprof(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC runtime_test.TestTimerFairness has: 
// func testTimerFairness(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{11526178 0xc003d89ea0}))  {
// 	 := runtime_test.TestTimerFairness(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC runtime_test.TestTimerFairness2 has: 
// func testTimerFairness2(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{11526595 0xc003d8c520}))  {
// 	 := runtime_test.TestTimerFairness2(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC runtime_test.TestTinyAlloc has: 
// func testTinyAlloc(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{12306354 0xc005567540}))  {
// 	 := runtime_test.TestTinyAlloc(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC runtime_test.TestTracebackAncestors has: 
// func testTracebackAncestors(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{11357105 0xc003b6a660}))  {
// 	 := runtime_test.TestTracebackAncestors(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC runtime_test.TestTracebackSystemstack has: 
// func testTracebackSystemstack(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{11356129 0xc003b679e0}))  {
// 	 := runtime_test.TestTracebackSystemstack(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC runtime_test.TestTrailingZero has: 
// func testTrailingZero(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{11769043 0xc004efba80}))  {
// 	 := runtime_test.TestTrailingZero(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC runtime_test.TestUserForcedGC has: 
// func testUserForcedGC(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{11212753 0xc003e3e460}))  {
// 	 := runtime_test.TestUserForcedGC(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC runtime_test.TestVersion has: 
// func testVersion(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{11772178 0xc004f0cdc0}))  {
// 	 := runtime_test.TestVersion(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC runtime_test.TestWindowsStackMemoryCgo has: 
// func testWindowsStackMemoryCgo(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{12411604 0xc0056d11a0}))  {
// 	 := runtime_test.TestWindowsStackMemoryCgo(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC runtime_test.TestYieldLocked has: 
// func testYieldLocked(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{11522525 0xc003d7ea60}))  {
// 	 := runtime_test.TestYieldLocked(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC runtime_test.TestYieldLockedProgress has: 
// func testYieldLockedProgress(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{11522152 0xc003d7e480}))  {
// 	 := runtime_test.TestYieldLockedProgress(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC runtime_test.TestYieldProgress has: 
// func testYieldProgress(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{11522078 0xc003d7e360}))  {
// 	 := runtime_test.TestYieldProgress(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC runtime_test.TestZeroConvT2x has: 
// func testZeroConvT2x(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{11368541 0xc003b95a00}))  {
// 	 := runtime_test.TestZeroConvT2x(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC scanner.BenchmarkScan has: 
// func benchmarkScan(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{4955406 0xc0023e8c80}))  {
// 	 := scanner.BenchmarkScan(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC scanner.BenchmarkScanFile has: 
// func benchmarkScanFile(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{4955724 0xc0023e9420}))  {
// 	 := scanner.BenchmarkScanFile(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC scanner.PrintError has: 
// func printError(w ABEND881(unrecognized Expr type *ast.SelectorExpr at: &{io Writer}), err Object)  {
// 	 := scanner.PrintError(w, err)
// 	...ABEND: TODO...
// }
// 
GO FUNC scanner.TestError has: 
// func testError(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{13598878 0xc0037b01c0}))  {
// 	 := scanner.TestError(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC scanner.TestIOError has: 
// func testIOError(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{13600927 0xc0037b1ca0}))  {
// 	 := scanner.TestIOError(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC scanner.TestInit has: 
// func testInit(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{4947269 0xc0023d6800}))  {
// 	 := scanner.TestInit(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC scanner.TestInvalidLineDirectives has: 
// func testInvalidLineDirectives(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{4946425 0xc0023cf800}))  {
// 	 := scanner.TestInvalidLineDirectives(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC scanner.TestIssue10213 has: 
// func testIssue10213(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{4954875 0xc0023e8420}))  {
// 	 := scanner.TestIssue10213(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC scanner.TestLineDirectives has: 
// func testLineDirectives(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{4944754 0xc0023ce120}))  {
// 	 := scanner.TestLineDirectives(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC scanner.TestNext has: 
// func testNext(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{13589296 0xc0040c30a0}))  {
// 	 := scanner.TestNext(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC scanner.TestNextEOFHandling has: 
// func testNextEOFHandling(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{13604929 0xc002fa0460}))  {
// 	 := scanner.TestNextEOFHandling(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC scanner.TestPos has: 
// func testPos(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{13602335 0xc002f54540}))  {
// 	 := scanner.TestPos(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC scanner.TestPosition has: 
// func testPosition(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{13593877 0xc0038c9a40}))  {
// 	 := scanner.TestPosition(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC scanner.TestScanCustomIdent has: 
// func testScanCustomIdent(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{13596046 0xc003822f20}))  {
// 	 := scanner.TestScanCustomIdent(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC scanner.TestScanEOFHandling has: 
// func testScanEOFHandling(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{13605265 0xc002f942a0}))  {
// 	 := scanner.TestScanEOFHandling(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC scanner.TestScanErrors has: 
// func testScanErrors(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{4954677 0xc0023e8020}))  {
// 	 := scanner.TestScanErrors(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC scanner.TestScanNext has: 
// func testScanNext(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{13596854 0xc0037ec220}))  {
// 	 := scanner.TestScanNext(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC scanner.TestScanSelectedMask has: 
// func testScanSelectedMask(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{13595577 0xc00383c020}))  {
// 	 := scanner.TestScanSelectedMask(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC scanner.TestScanWhitespace has: 
// func testScanWhitespace(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{13597772 0xc0037b4c20}))  {
// 	 := scanner.TestScanWhitespace(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC scanner.TestScanZeroMode has: 
// func testScanZeroMode(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{13594693 0xc003889ee0}))  {
// 	 := scanner.TestScanZeroMode(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC scanner.TestSemis has: 
// func testSemis(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{4941871 0xc0023c61e0}))  {
// 	 := scanner.TestSemis(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC scanner.TestStdErrorHander has: 
// func testStdErrorHander(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{4948173 0xc0023d7b40}))  {
// 	 := scanner.TestStdErrorHander(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC scanner.TestStripCR has: 
// func testStripCR(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{4938780 0xc0023c19c0}))  {
// 	 := scanner.TestStripCR(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC scanner_test.Example has: 
// func example()  {
// 	 := scanner_test.Example()
// 	...ABEND: TODO...
// }
// 
GO FUNC scanner_test.ExampleScanner_Scan has: 
// func exampleScanner_Scan()  {
// 	 := scanner_test.ExampleScanner_Scan()
// 	...ABEND: TODO...
// }
// 
GO FUNC scanner_test.Example_isIdentRune has: 
// func example_isIdentRune()  {
// 	 := scanner_test.Example_isIdentRune()
// 	...ABEND: TODO...
// }
// 
GO FUNC scanner_test.Example_mode has: 
// func example_mode()  {
// 	 := scanner_test.Example_mode()
// 	...ABEND: TODO...
// }
// 
GO FUNC scanner_test.Example_whitespace has: 
// func example_whitespace()  {
// 	 := scanner_test.Example_whitespace()
// 	...ABEND: TODO...
// }
// 
GO FUNC sha1.BenchmarkHash1K has: 
// func benchmarkHash1K(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{1420892 0xc000d41840}))  {
// 	 := sha1.BenchmarkHash1K(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC sha1.BenchmarkHash320Bytes has: 
// func benchmarkHash320Bytes(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{1420829 0xc000d416e0}))  {
// 	 := sha1.BenchmarkHash320Bytes(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC sha1.BenchmarkHash8Bytes has: 
// func benchmarkHash8Bytes(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{1420762 0xc000d41580}))  {
// 	 := sha1.BenchmarkHash8Bytes(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC sha1.BenchmarkHash8K has: 
// func benchmarkHash8K(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{1420956 0xc000d419a0}))  {
// 	 := sha1.BenchmarkHash8K(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC sha1.TestBlockGeneric has: 
// func testBlockGeneric(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{1420172 0xc000d408c0}))  {
// 	 := sha1.TestBlockGeneric(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC sha1.TestBlockSize has: 
// func testBlockSize(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{1419926 0xc000d405a0}))  {
// 	 := sha1.TestBlockSize(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC sha1.TestGolden has: 
// func testGolden(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{1418182 0xc000d33960}))  {
// 	 := sha1.TestGolden(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC sha1.TestGoldenMarshal has: 
// func testGoldenMarshal(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{1418994 0xc000d3b040}))  {
// 	 := sha1.TestGoldenMarshal(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC sha1.TestSize has: 
// func testSize(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{1419794 0xc000d402c0}))  {
// 	 := sha1.TestSize(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC sha1_test.ExampleNew has: 
// func exampleNew()  {
// 	 := sha1_test.ExampleNew()
// 	...ABEND: TODO...
// }
// 
GO FUNC sha1_test.ExampleNew_file has: 
// func exampleNew_file()  {
// 	 := sha1_test.ExampleNew_file()
// 	...ABEND: TODO...
// }
// 
GO FUNC sha1_test.ExampleSum has: 
// func exampleSum()  {
// 	 := sha1_test.ExampleSum()
// 	...ABEND: TODO...
// }
// 
GO FUNC sha1_test.TestOutOfBoundsRead has: 
// func testOutOfBoundsRead(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{1421292 0xc000d41d20}))  {
// 	 := sha1_test.TestOutOfBoundsRead(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC sha256.BenchmarkHash1K has: 
// func benchmarkHash1K(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{1472735 0xc0006d13c0}))  {
// 	 := sha256.BenchmarkHash1K(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC sha256.BenchmarkHash8Bytes has: 
// func benchmarkHash8Bytes(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{1472674 0xc0006d1260}))  {
// 	 := sha256.BenchmarkHash8Bytes(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC sha256.BenchmarkHash8K has: 
// func benchmarkHash8K(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{1472799 0xc0006d1560}))  {
// 	 := sha256.BenchmarkHash8K(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC sha256.TestBlockGeneric has: 
// func testBlockGeneric(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{1472135 0xc0006cb720}))  {
// 	 := sha256.TestBlockGeneric(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC sha256.TestBlockSize has: 
// func testBlockSize(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{1471890 0xc0006cb3e0}))  {
// 	 := sha256.TestBlockSize(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC sha256.TestGolden has: 
// func testGolden(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{1469111 0xc0006a0500}))  {
// 	 := sha256.TestGolden(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC sha256.TestGoldenMarshal has: 
// func testGoldenMarshal(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{1470238 0xc0006c48a0}))  {
// 	 := sha256.TestGoldenMarshal(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC sha256.TestMarshalTypeMismatch has: 
// func testMarshalTypeMismatch(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{1471333 0xc0006ca2a0}))  {
// 	 := sha256.TestMarshalTypeMismatch(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC sha256.TestSize has: 
// func testSize(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{1471649 0xc0006caf00}))  {
// 	 := sha256.TestSize(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC sha256_test.ExampleNew has: 
// func exampleNew()  {
// 	 := sha256_test.ExampleNew()
// 	...ABEND: TODO...
// }
// 
GO FUNC sha256_test.ExampleNew_file has: 
// func exampleNew_file()  {
// 	 := sha256_test.ExampleNew_file()
// 	...ABEND: TODO...
// }
// 
GO FUNC sha256_test.ExampleSum256 has: 
// func exampleSum256()  {
// 	 := sha256_test.ExampleSum256()
// 	...ABEND: TODO...
// }
// 
GO FUNC sha512.BenchmarkHash1K has: 
// func benchmarkHash1K(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{1587130 0xc00086e960}))  {
// 	 := sha512.BenchmarkHash1K(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC sha512.BenchmarkHash8Bytes has: 
// func benchmarkHash8Bytes(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{1587069 0xc00086e800}))  {
// 	 := sha512.BenchmarkHash8Bytes(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC sha512.BenchmarkHash8K has: 
// func benchmarkHash8K(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{1587194 0xc00086f3e0}))  {
// 	 := sha512.BenchmarkHash8K(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC sha512.TestBlockGeneric has: 
// func testBlockGeneric(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{1586530 0xc000aa1be0}))  {
// 	 := sha512.TestBlockGeneric(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC sha512.TestBlockSize has: 
// func testBlockSize(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{1586284 0xc000aa18c0}))  {
// 	 := sha512.TestBlockSize(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC sha512.TestGolden has: 
// func testGolden(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{1583263 0xc0009c7300}))  {
// 	 := sha512.TestGolden(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC sha512.TestGoldenMarshal has: 
// func testGoldenMarshal(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{1584068 0xc0009f1ec0}))  {
// 	 := sha512.TestGoldenMarshal(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC sha512.TestMarshalMismatch has: 
// func testMarshalMismatch(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{1585269 0xc0009e6060}))  {
// 	 := sha512.TestMarshalMismatch(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC sha512.TestSize has: 
// func testSize(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{1585811 0xc000aa1040}))  {
// 	 := sha512.TestSize(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC signal.Ignore has: 
// func ignore(sig ABEND881(unrecognized Expr type *ast.Ellipsis at: &{10197709 0xc0022c0e20}))  {
// 	 := signal.Ignore(sig)
// 	...ABEND: TODO...
// }
// 
GO FUNC signal.Notify has: 
// func notify(c ABEND881(unrecognized Expr type *ast.ChanType at: &{10198720 10198724 1 0xc0022c99c0}), sig ABEND881(unrecognized Expr type *ast.Ellipsis at: &{10198742 0xc0022c9a40}))  {
// 	 := signal.Notify(c, sig)
// 	...ABEND: TODO...
// }
// 
GO FUNC signal.Reset has: 
// func reset(sig ABEND881(unrecognized Expr type *ast.Ellipsis at: &{10199484 0xc002350820}))  {
// 	 := signal.Reset(sig)
// 	...ABEND: TODO...
// }
// 
GO FUNC signal.Stop has: 
// func stop(c ABEND881(unrecognized Expr type *ast.ChanType at: &{10199751 10199755 1 0xc002351bc0}))  {
// 	 := signal.Stop(c)
// 	...ABEND: TODO...
// }
// 
GO FUNC signal.TestAtomicStop has: 
// func testAtomicStop(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{10211973 0xc0024c5660}))  {
// 	 := signal.TestAtomicStop(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC signal.TestDetectNohup has: 
// func testDetectNohup(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{10206987 0xc00246ad60}))  {
// 	 := signal.TestDetectNohup(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC signal.TestIgnore has: 
// func testIgnore(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{10206133 0xc00243ba40}))  {
// 	 := signal.TestIgnore(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC signal.TestIgnored has: 
// func testIgnored(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{10206272 0xc00243bc40}))  {
// 	 := signal.TestIgnored(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC signal.TestNohup has: 
// func testNohup(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{10209670 0xc0024bb940}))  {
// 	 := signal.TestNohup(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC signal.TestReset has: 
// func testReset(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{10205999 0xc00243b4c0}))  {
// 	 := signal.TestReset(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC signal.TestSIGCONT has: 
// func testSIGCONT(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{10211712 0xc0024c4da0}))  {
// 	 := signal.TestSIGCONT(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC signal.TestSignal has: 
// func testSignal(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{10202111 0xc002424f60}))  {
// 	 := signal.TestSignal(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC signal.TestStop has: 
// func testStop(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{10208402 0xc0024b71a0}))  {
// 	 := signal.TestStop(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC signal.TestStress has: 
// func testStress(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{10203009 0xc00242a480}))  {
// 	 := signal.TestStress(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC signal_test.ExampleNotify has: 
// func exampleNotify()  {
// 	 := signal_test.ExampleNotify()
// 	...ABEND: TODO...
// }
// 
GO FUNC signal_test.ExampleNotify_allSignals has: 
// func exampleNotify_allSignals()  {
// 	 := signal_test.ExampleNotify_allSignals()
// 	...ABEND: TODO...
// }
// 
GO FUNC signal_test.TestTerminalSignal has: 
// func testTerminalSignal(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{10214865 0xc00251e000}))  {
// 	 := signal_test.TestTerminalSignal(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC smtp.TestAuth has: 
// func testAuth(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{9786887 0xc0048baca0}))  {
// 	 := smtp.TestAuth(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC smtp.TestAuthFailed has: 
// func testAuthFailed(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{9802980 0xc0048f78a0}))  {
// 	 := smtp.TestAuthFailed(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC smtp.TestAuthPlain has: 
// func testAuthPlain(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{9787712 0xc0048bbda0}))  {
// 	 := smtp.TestAuthPlain(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC smtp.TestBasic has: 
// func testBasic(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{9790462 0xc0048d0540}))  {
// 	 := smtp.TestBasic(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC smtp.TestClientAuthTrimSpace has: 
// func testClientAuthTrimSpace(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{9788971 0xc0048caec0}))  {
// 	 := smtp.TestClientAuthTrimSpace(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC smtp.TestHello has: 
// func testHello(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{9796974 0xc0048ea4e0}))  {
// 	 := smtp.TestHello(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC smtp.TestNewClient has: 
// func testNewClient(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{9793900 0xc0048d8ee0}))  {
// 	 := smtp.TestNewClient(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC smtp.TestNewClient2 has: 
// func testNewClient2(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{9794998 0xc0048de0c0}))  {
// 	 := smtp.TestNewClient2(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC smtp.TestNewClientWithTLS has: 
// func testNewClientWithTLS(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{9795958 0xc0048defe0}))  {
// 	 := smtp.TestNewClientWithTLS(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC smtp.TestSendMail has: 
// func testSendMail(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{9799416 0xc0048f2780}))  {
// 	 := smtp.TestSendMail(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC smtp.TestSendMailWithAuth has: 
// func testSendMailWithAuth(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{9801787 0xc0048f67a0}))  {
// 	 := smtp.TestSendMailWithAuth(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC smtp.TestTLSClient has: 
// func testTLSClient(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{9804183 0xc0048fc920}))  {
// 	 := smtp.TestTLSClient(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC smtp.TestTLSConnState has: 
// func testTLSConnState(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{9804761 0xc0048fd3c0}))  {
// 	 := smtp.TestTLSConnState(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC smtp_test.Example has: 
// func example()  {
// 	 := smtp_test.Example()
// 	...ABEND: TODO...
// }
// 
GO FUNC smtp_test.ExamplePlainAuth has: 
// func examplePlainAuth()  {
// 	 := smtp_test.ExamplePlainAuth()
// 	...ABEND: TODO...
// }
// 
GO FUNC smtp_test.ExampleSendMail has: 
// func exampleSendMail()  {
// 	 := smtp_test.ExampleSendMail()
// 	...ABEND: TODO...
// }
// 
GO FUNC sort.Float64s has: 
// func float64s(a ABEND881(unrecognized Expr type *ast.ArrayType at: &{12719214 <nil> float64}))  {
// 	 := sort.Float64s(a)
// 	...ABEND: TODO...
// }
// 
GO FUNC sort.Heapsort has: 
// func heapsort(data Object)  {
// 	 := sort.Heapsort(data)
// 	...ABEND: TODO...
// }
// 
GO FUNC sort.Ints has: 
// func ints(a ABEND881(unrecognized Expr type *ast.ArrayType at: &{12719046 <nil> int}))  {
// 	 := sort.Ints(a)
// 	...ABEND: TODO...
// }
// 
GO FUNC sort.Slice has: 
// func slice(slice ABEND881(unrecognized Expr type *ast.InterfaceType at: &{12740231 0xc005c30600 false}), less ABEND881(unrecognized Expr type *ast.FuncType at: &{12740249 0xc005c30660 0xc005c30690}))  {
// 	 := sort.Slice(slice, less)
// 	...ABEND: TODO...
// }
// 
GO FUNC sort.SliceStable has: 
// func sliceStable(slice ABEND881(unrecognized Expr type *ast.InterfaceType at: &{12740643 0xc005c307b0 false}), less ABEND881(unrecognized Expr type *ast.FuncType at: &{12740661 0xc005c30810 0xc005c30840}))  {
// 	 := sort.SliceStable(slice, less)
// 	...ABEND: TODO...
// }
// 
GO FUNC sort.Sort has: 
// func sort(data Object)  {
// 	 := sort.Sort(data)
// 	...ABEND: TODO...
// }
// 
GO FUNC sort.Stable has: 
// func stable(data Object)  {
// 	 := sort.Stable(data)
// 	...ABEND: TODO...
// }
// 
GO FUNC sort.Strings has: 
// func strings(a ABEND881(unrecognized Expr type *ast.ArrayType at: &{12719324 <nil> string}))  {
// 	 := sort.Strings(a)
// 	...ABEND: TODO...
// }
// 
GO FUNC sort_test.BenchmarkSearchWrappers has: 
// func benchmarkSearchWrappers(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{12748160 0xc005c57f20}))  {
// 	 := sort_test.BenchmarkSearchWrappers(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC sort_test.BenchmarkSort1e2 has: 
// func benchmarkSort1e2(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{12707702 0xc005bc98c0}))  {
// 	 := sort_test.BenchmarkSort1e2(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC sort_test.BenchmarkSort1e4 has: 
// func benchmarkSort1e4(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{12707846 0xc005bc9c00}))  {
// 	 := sort_test.BenchmarkSort1e4(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC sort_test.BenchmarkSort1e6 has: 
// func benchmarkSort1e6(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{12707990 0xc005bc9f40}))  {
// 	 := sort_test.BenchmarkSort1e6(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC sort_test.BenchmarkSortInt1K has: 
// func benchmarkSortInt1K(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{12697022 0xc005b969c0}))  {
// 	 := sort_test.BenchmarkSortInt1K(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC sort_test.BenchmarkSortInt64K has: 
// func benchmarkSortInt64K(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{12697892 0xc005b97dc0}))  {
// 	 := sort_test.BenchmarkSortInt64K(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC sort_test.BenchmarkSortInt64K_Slice has: 
// func benchmarkSortInt64K_Slice(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{12698126 0xc005b9c360}))  {
// 	 := sort_test.BenchmarkSortInt64K_Slice(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC sort_test.BenchmarkSortString1K has: 
// func benchmarkSortString1K(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{12696030 0xc005b933e0}))  {
// 	 := sort_test.BenchmarkSortString1K(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC sort_test.BenchmarkSortString1K_Slice has: 
// func benchmarkSortString1K_Slice(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{12696345 0xc005b93aa0}))  {
// 	 := sort_test.BenchmarkSortString1K_Slice(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC sort_test.BenchmarkStable1e2 has: 
// func benchmarkStable1e2(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{12707774 0xc005bc9a60}))  {
// 	 := sort_test.BenchmarkStable1e2(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC sort_test.BenchmarkStable1e4 has: 
// func benchmarkStable1e4(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{12707918 0xc005bc9da0}))  {
// 	 := sort_test.BenchmarkStable1e4(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC sort_test.BenchmarkStable1e6 has: 
// func benchmarkStable1e6(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{12708062 0xc005bd00e0}))  {
// 	 := sort_test.BenchmarkStable1e6(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC sort_test.BenchmarkStableInt1K has: 
// func benchmarkStableInt1K(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{12697250 0xc005b96f60}))  {
// 	 := sort_test.BenchmarkStableInt1K(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC sort_test.BenchmarkStableInt1K_Slice has: 
// func benchmarkStableInt1K_Slice(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{12697552 0xc005b975e0}))  {
// 	 := sort_test.BenchmarkStableInt1K_Slice(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC sort_test.BenchmarkStableInt64K has: 
// func benchmarkStableInt64K(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{12698407 0xc005b9ca80}))  {
// 	 := sort_test.BenchmarkStableInt64K(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC sort_test.BenchmarkStableString1K has: 
// func benchmarkStableString1K(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{12696704 0xc005b962e0}))  {
// 	 := sort_test.BenchmarkStableString1K(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC sort_test.Example has: 
// func example()  {
// 	 := sort_test.Example()
// 	...ABEND: TODO...
// }
// 
GO FUNC sort_test.ExampleFloat64s has: 
// func exampleFloat64s()  {
// 	 := sort_test.ExampleFloat64s()
// 	...ABEND: TODO...
// }
// 
GO FUNC sort_test.ExampleFloat64sAreSorted has: 
// func exampleFloat64sAreSorted()  {
// 	 := sort_test.ExampleFloat64sAreSorted()
// 	...ABEND: TODO...
// }
// 
GO FUNC sort_test.ExampleInts has: 
// func exampleInts()  {
// 	 := sort_test.ExampleInts()
// 	...ABEND: TODO...
// }
// 
GO FUNC sort_test.ExampleIntsAreSorted has: 
// func exampleIntsAreSorted()  {
// 	 := sort_test.ExampleIntsAreSorted()
// 	...ABEND: TODO...
// }
// 
GO FUNC sort_test.ExampleReverse has: 
// func exampleReverse()  {
// 	 := sort_test.ExampleReverse()
// 	...ABEND: TODO...
// }
// 
GO FUNC sort_test.ExampleSearch has: 
// func exampleSearch()  {
// 	 := sort_test.ExampleSearch()
// 	...ABEND: TODO...
// }
// 
GO FUNC sort_test.ExampleSearch_descendingOrder has: 
// func exampleSearch_descendingOrder()  {
// 	 := sort_test.ExampleSearch_descendingOrder()
// 	...ABEND: TODO...
// }
// 
GO FUNC sort_test.ExampleSlice has: 
// func exampleSlice()  {
// 	 := sort_test.ExampleSlice()
// 	...ABEND: TODO...
// }
// 
GO FUNC sort_test.ExampleSliceStable has: 
// func exampleSliceStable()  {
// 	 := sort_test.ExampleSliceStable()
// 	...ABEND: TODO...
// }
// 
GO FUNC sort_test.ExampleStrings has: 
// func exampleStrings()  {
// 	 := sort_test.ExampleStrings()
// 	...ABEND: TODO...
// }
// 
GO FUNC sort_test.Example_sortKeys has: 
// func example_sortKeys()  {
// 	 := sort_test.Example_sortKeys()
// 	...ABEND: TODO...
// }
// 
GO FUNC sort_test.Example_sortMultiKeys has: 
// func example_sortMultiKeys()  {
// 	 := sort_test.Example_sortMultiKeys()
// 	...ABEND: TODO...
// }
// 
GO FUNC sort_test.Example_sortWrapper has: 
// func example_sortWrapper()  {
// 	 := sort_test.Example_sortWrapper()
// 	...ABEND: TODO...
// }
// 
GO FUNC sort_test.TestAdversary has: 
// func testAdversary(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{12704055 0xc005bb9120}))  {
// 	 := sort_test.TestAdversary(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC sort_test.TestCountSortOps has: 
// func testCountSortOps(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{12706906 0xc005bc8840}))  {
// 	 := sort_test.TestCountSortOps(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC sort_test.TestCountStableOps has: 
// func testCountStableOps(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{12706836 0xc005bc86c0}))  {
// 	 := sort_test.TestCountStableOps(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC sort_test.TestFloat64s has: 
// func testFloat64s(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{12693921 0xc005b84c20}))  {
// 	 := sort_test.TestFloat64s(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC sort_test.TestHeapsortBM has: 
// func testHeapsortBM(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{12702287 0xc005baef20}))  {
// 	 := sort_test.TestHeapsortBM(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC sort_test.TestInts has: 
// func testInts(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{12693760 0xc005b84860}))  {
// 	 := sort_test.TestInts(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC sort_test.TestNonDeterministicComparison has: 
// func testNonDeterministicComparison(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{12695675 0xc005b92f00}))  {
// 	 := sort_test.TestNonDeterministicComparison(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC sort_test.TestReverseSortIntSlice has: 
// func testReverseSortIntSlice(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{12694875 0xc005b92020}))  {
// 	 := sort_test.TestReverseSortIntSlice(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC sort_test.TestSearch has: 
// func testSearch(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{12745938 0xc005c4f6e0}))  {
// 	 := sort_test.TestSearch(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC sort_test.TestSearchEfficiency has: 
// func testSearchEfficiency(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{12746385 0xc005c4ff20}))  {
// 	 := sort_test.TestSearchEfficiency(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC sort_test.TestSearchExhaustive has: 
// func testSearchExhaustive(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{12748405 0xc005c601c0}))  {
// 	 := sort_test.TestSearchExhaustive(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC sort_test.TestSearchWrappers has: 
// func testSearchWrappers(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{12747440 0xc005c57280}))  {
// 	 := sort_test.TestSearchWrappers(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC sort_test.TestSearchWrappersDontAlloc has: 
// func testSearchWrappersDontAlloc(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{12747821 0xc005c57a40}))  {
// 	 := sort_test.TestSearchWrappersDontAlloc(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC sort_test.TestSlice has: 
// func testSlice(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{12694267 0xc005b853a0}))  {
// 	 := sort_test.TestSlice(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC sort_test.TestSortBM has: 
// func testSortBM(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{12702171 0xc005baec80}))  {
// 	 := sort_test.TestSortBM(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC sort_test.TestSortFloat64Slice has: 
// func testSortFloat64Slice(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{12693402 0xc005b84060}))  {
// 	 := sort_test.TestSortFloat64Slice(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC sort_test.TestSortIntSlice has: 
// func testSortIntSlice(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{12693227 0xc005b6fc40}))  {
// 	 := sort_test.TestSortIntSlice(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC sort_test.TestSortLarge_Random has: 
// func testSortLarge_Random(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{12694544 0xc005b85a20}))  {
// 	 := sort_test.TestSortLarge_Random(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC sort_test.TestSortStringSlice has: 
// func testSortStringSlice(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{12693588 0xc005b84460}))  {
// 	 := sort_test.TestSortStringSlice(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC sort_test.TestStability has: 
// func testStability(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{12705332 0xc005bc4940}))  {
// 	 := sort_test.TestStability(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC sort_test.TestStableBM has: 
// func testStableBM(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{12702405 0xc005baf1c0}))  {
// 	 := sort_test.TestStableBM(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC sort_test.TestStableInts has: 
// func testStableInts(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{12704515 0xc005bb9720}))  {
// 	 := sort_test.TestStableInts(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC sort_test.TestStrings has: 
// func testStrings(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{12694097 0xc005b84fe0}))  {
// 	 := sort_test.TestStrings(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC sql.BenchmarkConcurrentDBExec has: 
// func benchmarkConcurrentDBExec(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{2570126 0xc000eeaec0}))  {
// 	 := sql.BenchmarkConcurrentDBExec(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC sql.BenchmarkConcurrentRandom has: 
// func benchmarkConcurrentRandom(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{2571262 0xc000ef0580}))  {
// 	 := sql.BenchmarkConcurrentRandom(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC sql.BenchmarkConcurrentStmtExec has: 
// func benchmarkConcurrentStmtExec(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{2570450 0xc000eeb540}))  {
// 	 := sql.BenchmarkConcurrentStmtExec(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC sql.BenchmarkConcurrentStmtQuery has: 
// func benchmarkConcurrentStmtQuery(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{2570287 0xc000eeb200}))  {
// 	 := sql.BenchmarkConcurrentStmtQuery(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC sql.BenchmarkConcurrentTxExec has: 
// func benchmarkConcurrentTxExec(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{2570770 0xc000eebbc0}))  {
// 	 := sql.BenchmarkConcurrentTxExec(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC sql.BenchmarkConcurrentTxQuery has: 
// func benchmarkConcurrentTxQuery(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{2570611 0xc000eeb880}))  {
// 	 := sql.BenchmarkConcurrentTxQuery(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC sql.BenchmarkConcurrentTxStmtExec has: 
// func benchmarkConcurrentTxStmtExec(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{2571100 0xc000ef0240}))  {
// 	 := sql.BenchmarkConcurrentTxStmtExec(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC sql.BenchmarkConcurrentTxStmtQuery has: 
// func benchmarkConcurrentTxStmtQuery(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{2570933 0xc000eebf00}))  {
// 	 := sql.BenchmarkConcurrentTxStmtQuery(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC sql.BenchmarkManyConcurrentQueries has: 
// func benchmarkManyConcurrentQueries(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{2571425 0xc000ef08c0}))  {
// 	 := sql.BenchmarkManyConcurrentQueries(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC sql.Register has: 
// func register(name string, driver ABEND881(unrecognized Expr type *ast.SelectorExpr at: &{driver Driver}))  {
// 	 := sql.Register(name, driver)
// 	...ABEND: TODO...
// }
// 
GO FUNC sql.TestBadDriver has: 
// func testBadDriver(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{2568622 0xc000ee7340}))  {
// 	 := sql.TestBadDriver(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC sql.TestBogusPreboundParameters has: 
// func testBogusPreboundParameters(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{2506068 0xc000f906a0}))  {
// 	 := sql.TestBogusPreboundParameters(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC sql.TestCloseConnBeforeStmts has: 
// func testCloseConnBeforeStmts(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{2537818 0xc0010a6640}))  {
// 	 := sql.TestCloseConnBeforeStmts(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC sql.TestCloseStmtBeforeRows has: 
// func testCloseStmtBeforeRows(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{2518028 0xc000dd56e0}))  {
// 	 := sql.TestCloseStmtBeforeRows(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC sql.TestConcurrency has: 
// func testConcurrency(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{2559909 0xc000ec7b60}))  {
// 	 := sql.TestConcurrency(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC sql.TestConnMaxLifetime has: 
// func testConnMaxLifetime(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{2533920 0xc000cd3be0}))  {
// 	 := sql.TestConnMaxLifetime(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC sql.TestConnQuery has: 
// func testConnQuery(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{2514966 0xc000c40300}))  {
// 	 := sql.TestConnQuery(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC sql.TestConnTx has: 
// func testConnTx(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{2516850 0xc000dd4160}))  {
// 	 := sql.TestConnTx(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC sql.TestConnectionLeak has: 
// func testConnectionLeak(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{2560521 0xc000eca4c0}))  {
// 	 := sql.TestConnectionLeak(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC sql.TestConversions has: 
// func testConversions(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{2579750 0xc0011f5ac0}))  {
// 	 := sql.TestConversions(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC sql.TestDriverArgs has: 
// func testDriverArgs(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{2585945 0xc00120cca0}))  {
// 	 := sql.TestDriverArgs(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC sql.TestDriverPanic has: 
// func testDriverPanic(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{2485041 0xc000dba6c0}))  {
// 	 := sql.TestDriverPanic(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC sql.TestDrivers has: 
// func testDrivers(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{2591704 0xc0012235e0}))  {
// 	 := sql.TestDrivers(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC sql.TestErrBadConnReconnect has: 
// func testErrBadConnReconnect(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{2544389 0xc000d95d80}))  {
// 	 := sql.TestErrBadConnReconnect(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC sql.TestExec has: 
// func testExec(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{2506444 0xc000f90c40}))  {
// 	 := sql.TestExec(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC sql.TestInvalidNilValues has: 
// func testInvalidNilValues(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{2515543 0xc000c40e80}))  {
// 	 := sql.TestInvalidNilValues(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC sql.TestIssue18429 has: 
// func testIssue18429(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{2555988 0xc000ec00a0}))  {
// 	 := sql.TestIssue18429(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC sql.TestIssue18719 has: 
// func testIssue18719(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{2558305 0xc000ec61a0}))  {
// 	 := sql.TestIssue18719(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC sql.TestIssue20160 has: 
// func testIssue20160(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{2557259 0xc000ec12e0}))  {
// 	 := sql.TestIssue20160(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC sql.TestIssue20575 has: 
// func testIssue20575(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{2543113 0xc000d945e0}))  {
// 	 := sql.TestIssue20575(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC sql.TestIssue20622 has: 
// func testIssue20622(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{2543775 0xc000d950c0}))  {
// 	 := sql.TestIssue20622(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC sql.TestIssue20647 has: 
// func testIssue20647(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{2559191 0xc000ec6cc0}))  {
// 	 := sql.TestIssue20647(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC sql.TestIssue2542Deadlock has: 
// func testIssue2542Deadlock(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{2517775 0xc000dd5200}))  {
// 	 := sql.TestIssue2542Deadlock(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC sql.TestIssue4902 has: 
// func testIssue4902(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{2525968 0xc000616980}))  {
// 	 := sql.TestIssue4902(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC sql.TestIssue6081 has: 
// func testIssue6081(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{2554574 0xc000ebab80}))  {
// 	 := sql.TestIssue6081(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC sql.TestIssue6651 has: 
// func testIssue6651(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{2520731 0xc000dde820}))  {
// 	 := sql.TestIssue6651(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC sql.TestManyErrBadConn has: 
// func testManyErrBadConn(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{2540324 0xc000fc3120}))  {
// 	 := sql.TestManyErrBadConn(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC sql.TestMaxIdleConns has: 
// func testMaxIdleConns(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{2526936 0xc000617da0}))  {
// 	 := sql.TestMaxIdleConns(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC sql.TestMaxOpenConns has: 
// func testMaxOpenConns(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{2527470 0xc00061c8e0}))  {
// 	 := sql.TestMaxOpenConns(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC sql.TestMaxOpenConnsOnBusy has: 
// func testMaxOpenConnsOnBusy(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{2530232 0xc000ccd9e0}))  {
// 	 := sql.TestMaxOpenConnsOnBusy(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC sql.TestMultiResultSetQuery has: 
// func testMultiResultSetQuery(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{2495581 0xc000ff8d40}))  {
// 	 := sql.TestMultiResultSetQuery(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC sql.TestNamedValueChecker has: 
// func testNamedValueChecker(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{2562941 0xc000ed0800}))  {
// 	 := sql.TestNamedValueChecker(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC sql.TestNamedValueCheckerSkip has: 
// func testNamedValueCheckerSkip(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{2564169 0xc000ed6040}))  {
// 	 := sql.TestNamedValueCheckerSkip(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC sql.TestNullBoolParam has: 
// func testNullBoolParam(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{2522959 0xc000535340}))  {
// 	 := sql.TestNullBoolParam(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC sql.TestNullByteSlice has: 
// func testNullByteSlice(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{2518437 0xc000dd5ea0}))  {
// 	 := sql.TestNullByteSlice(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC sql.TestNullFloat64Param has: 
// func testNullFloat64Param(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{2522521 0xc0005349c0}))  {
// 	 := sql.TestNullFloat64Param(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC sql.TestNullInt64Param has: 
// func testNullInt64Param(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{2522124 0xc000534060}))  {
// 	 := sql.TestNullInt64Param(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC sql.TestNullString has: 
// func testNullString(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{2582373 0xc001200ee0}))  {
// 	 := sql.TestNullString(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC sql.TestNullStringParam has: 
// func testNullStringParam(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{2521653 0xc000ddf720}))  {
// 	 := sql.TestNullStringParam(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC sql.TestOpenConnector has: 
// func testOpenConnector(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{2564806 0xc000ed6c60}))  {
// 	 := sql.TestOpenConnector(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC sql.TestOpenDB has: 
// func testOpenDB(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{2484844 0xc000dba3c0}))  {
// 	 := sql.TestOpenDB(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC sql.TestParentStmtOutlivesTxStmt has: 
// func testParentStmtOutlivesTxStmt(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{2510816 0xc0010df9c0}))  {
// 	 := sql.TestParentStmtOutlivesTxStmt(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC sql.TestPendingConnsAfterErr has: 
// func testPendingConnsAfterErr(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{2531451 0xc000cd1060}))  {
// 	 := sql.TestPendingConnsAfterErr(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC sql.TestPing has: 
// func testPing(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{2569381 0xc000eea100}))  {
// 	 := sql.TestPing(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC sql.TestPointerParamsAndScans has: 
// func testPointerParamsAndScans(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{2519069 0xc000dda9a0}))  {
// 	 := sql.TestPointerParamsAndScans(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC sql.TestPoolExhaustOnCancel has: 
// func testPoolExhaustOnCancel(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{2498289 0xc00105dcc0}))  {
// 	 := sql.TestPoolExhaustOnCancel(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC sql.TestQuery has: 
// func testQuery(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{2489367 0xc000f25320}))  {
// 	 := sql.TestQuery(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC sql.TestQueryContext has: 
// func testQueryContext(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{2490466 0xc000ff2620}))  {
// 	 := sql.TestQueryContext(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC sql.TestQueryContextWait has: 
// func testQueryContextWait(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{2492916 0xc000ff5020}))  {
// 	 := sql.TestQueryContextWait(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC sql.TestQueryExecContextOnly has: 
// func testQueryExecContextOnly(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{2566465 0xc000edcc80}))  {
// 	 := sql.TestQueryExecContextOnly(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC sql.TestQueryNamedArg has: 
// func testQueryNamedArg(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{2497156 0xc00105ca00}))  {
// 	 := sql.TestQueryNamedArg(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC sql.TestQueryRow has: 
// func testQueryRow(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{2501590 0xc000df1460}))  {
// 	 := sql.TestQueryRow(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC sql.TestQueryRowClosingStmt has: 
// func testQueryRowClosingStmt(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{2519797 0xc000ddb700}))  {
// 	 := sql.TestQueryRowClosingStmt(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC sql.TestQueryRowNilScanDest has: 
// func testQueryRowNilScanDest(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{2525609 0xc0006163a0}))  {
// 	 := sql.TestQueryRowNilScanDest(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC sql.TestRawBytesAllocs has: 
// func testRawBytesAllocs(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{2583637 0xc0012066a0}))  {
// 	 := sql.TestRawBytesAllocs(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC sql.TestRowsCloseOrder has: 
// func testRowsCloseOrder(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{2539058 0xc0010a7a80}))  {
// 	 := sql.TestRowsCloseOrder(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC sql.TestRowsColumnTypes has: 
// func testRowsColumnTypes(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{2500514 0xc000debf40}))  {
// 	 := sql.TestRowsColumnTypes(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC sql.TestRowsColumns has: 
// func testRowsColumns(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{2500039 0xc000deb5a0}))  {
// 	 := sql.TestRowsColumns(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC sql.TestRowsImplicitClose has: 
// func testRowsImplicitClose(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{2539383 0xc000fc2080}))  {
// 	 := sql.TestRowsImplicitClose(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC sql.TestSimultaneousQueries has: 
// func testSimultaneousQueries(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{2526567 0xc0006175a0}))  {
// 	 := sql.TestSimultaneousQueries(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC sql.TestSingleOpenConn has: 
// func testSingleOpenConn(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{2533107 0xc000cd2b40}))  {
// 	 := sql.TestSingleOpenConn(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC sql.TestStatementClose has: 
// func testStatementClose(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{2504967 0xc000f19240}))  {
// 	 := sql.TestStatementClose(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC sql.TestStatementErrorAfterClose has: 
// func testStatementErrorAfterClose(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{2503632 0xc000f157e0}))  {
// 	 := sql.TestStatementErrorAfterClose(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC sql.TestStatementQueryRow has: 
// func testStatementQueryRow(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{2504045 0xc000f15f80}))  {
// 	 := sql.TestStatementQueryRow(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC sql.TestStatementQueryRowConcurrent has: 
// func testStatementQueryRowConcurrent(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{2505482 0xc000f19b40}))  {
// 	 := sql.TestStatementQueryRowConcurrent(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC sql.TestStats has: 
// func testStats(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{2533512 0xc000cd33e0}))  {
// 	 := sql.TestStats(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC sql.TestStmtCloseDeps has: 
// func testStmtCloseDeps(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{2535499 0xc000cd9c20}))  {
// 	 := sql.TestStmtCloseDeps(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC sql.TestStmtCloseOrder has: 
// func testStmtCloseOrder(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{2539920 0xc000fc2c00}))  {
// 	 := sql.TestStmtCloseOrder(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC sql.TestTxContextWait has: 
// func testTxContextWait(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{2494232 0xc000ff5c40}))  {
// 	 := sql.TestTxContextWait(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC sql.TestTxEndBadConn has: 
// func testTxEndBadConn(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{2546937 0xc000d9c500}))  {
// 	 := sql.TestTxEndBadConn(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC sql.TestTxErrBadConn has: 
// func testTxErrBadConn(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{2514273 0xc000c3b440}))  {
// 	 := sql.TestTxErrBadConn(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC sql.TestTxPrepare has: 
// func testTxPrepare(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{2507687 0xc000f91e40}))  {
// 	 := sql.TestTxPrepare(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC sql.TestTxQuery has: 
// func testTxQuery(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{2513401 0xc000c3a2e0}))  {
// 	 := sql.TestTxQuery(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC sql.TestTxQueryInvalid has: 
// func testTxQueryInvalid(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{2513921 0xc000c3ae40}))  {
// 	 := sql.TestTxQueryInvalid(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC sql.TestTxRollbackCommitErr has: 
// func testTxRollbackCommitErr(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{2502994 0xc000f14c80}))  {
// 	 := sql.TestTxRollbackCommitErr(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC sql.TestTxStmt has: 
// func testTxStmt(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{2508295 0xc000f94a00}))  {
// 	 := sql.TestTxStmt(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC sql.TestTxStmtClosedRePrepares has: 
// func testTxStmtClosedRePrepares(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{2509821 0xc0010de800}))  {
// 	 := sql.TestTxStmtClosedRePrepares(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC sql.TestTxStmtFromTxStmtRePrepares has: 
// func testTxStmtFromTxStmtRePrepares(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{2512085 0xc0010e0e80}))  {
// 	 := sql.TestTxStmtFromTxStmtRePrepares(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC sql.TestTxStmtPreparedOnce has: 
// func testTxStmtPreparedOnce(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{2508954 0xc000f956c0}))  {
// 	 := sql.TestTxStmtPreparedOnce(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC sql.TestTypedString has: 
// func testTypedString(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{2569770 0xc000eea880}))  {
// 	 := sql.TestTypedString(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC sql.TestUnsupportedOptions has: 
// func testUnsupportedOptions(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{2495285 0xc000ff8840}))  {
// 	 := sql.TestUnsupportedOptions(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC sql.TestUserDefinedBytes has: 
// func testUserDefinedBytes(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{2585442 0xc00120c300}))  {
// 	 := sql.TestUserDefinedBytes(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC sql.TestValueConverters has: 
// func testValueConverters(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{2583053 0xc001201ae0}))  {
// 	 := sql.TestValueConverters(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC sql_test.ExampleConn_BeginTx has: 
// func exampleConn_BeginTx()  {
// 	 := sql_test.ExampleConn_BeginTx()
// 	...ABEND: TODO...
// }
// 
GO FUNC sql_test.ExampleConn_ExecContext has: 
// func exampleConn_ExecContext()  {
// 	 := sql_test.ExampleConn_ExecContext()
// 	...ABEND: TODO...
// }
// 
GO FUNC sql_test.ExampleDB_ExecContext has: 
// func exampleDB_ExecContext()  {
// 	 := sql_test.ExampleDB_ExecContext()
// 	...ABEND: TODO...
// }
// 
GO FUNC sql_test.ExampleDB_PingContext has: 
// func exampleDB_PingContext()  {
// 	 := sql_test.ExampleDB_PingContext()
// 	...ABEND: TODO...
// }
// 
GO FUNC sql_test.ExampleDB_QueryContext has: 
// func exampleDB_QueryContext()  {
// 	 := sql_test.ExampleDB_QueryContext()
// 	...ABEND: TODO...
// }
// 
GO FUNC sql_test.ExampleDB_QueryRowContext has: 
// func exampleDB_QueryRowContext()  {
// 	 := sql_test.ExampleDB_QueryRowContext()
// 	...ABEND: TODO...
// }
// 
GO FUNC sql_test.ExampleDB_Query_multipleResultSets has: 
// func exampleDB_Query_multipleResultSets()  {
// 	 := sql_test.ExampleDB_Query_multipleResultSets()
// 	...ABEND: TODO...
// }
// 
GO FUNC sql_test.ExampleRows has: 
// func exampleRows()  {
// 	 := sql_test.ExampleRows()
// 	...ABEND: TODO...
// }
// 
GO FUNC sql_test.ExampleStmt has: 
// func exampleStmt()  {
// 	 := sql_test.ExampleStmt()
// 	...ABEND: TODO...
// }
// 
GO FUNC sql_test.ExampleStmt_QueryRowContext has: 
// func exampleStmt_QueryRowContext()  {
// 	 := sql_test.ExampleStmt_QueryRowContext()
// 	...ABEND: TODO...
// }
// 
GO FUNC sql_test.ExampleTx_ExecContext has: 
// func exampleTx_ExecContext()  {
// 	 := sql_test.ExampleTx_ExecContext()
// 	...ABEND: TODO...
// }
// 
GO FUNC sql_test.ExampleTx_Rollback has: 
// func exampleTx_Rollback()  {
// 	 := sql_test.ExampleTx_Rollback()
// 	...ABEND: TODO...
// }
// 
GO FUNC strconv_test.BenchmarkAppendFloat has: 
// func benchmarkAppendFloat(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{12874118 0xc005e3f120}))  {
// 	 := strconv_test.BenchmarkAppendFloat(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC strconv_test.BenchmarkAppendInt has: 
// func benchmarkAppendInt(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{12808330 0xc005d47540}))  {
// 	 := strconv_test.BenchmarkAppendInt(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC strconv_test.BenchmarkAppendIntSmall has: 
// func benchmarkAppendIntSmall(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{12809214 0xc005d529e0}))  {
// 	 := strconv_test.BenchmarkAppendIntSmall(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC strconv_test.BenchmarkAppendQuote has: 
// func benchmarkAppendQuote(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{12797550 0xc005d20ec0}))  {
// 	 := strconv_test.BenchmarkAppendQuote(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC strconv_test.BenchmarkAppendQuoteRune has: 
// func benchmarkAppendQuoteRune(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{12797755 0xc005d211a0}))  {
// 	 := strconv_test.BenchmarkAppendQuoteRune(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC strconv_test.BenchmarkAppendUint has: 
// func benchmarkAppendUint(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{12808726 0xc005d47ea0}))  {
// 	 := strconv_test.BenchmarkAppendUint(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC strconv_test.BenchmarkAppendUintVarlen has: 
// func benchmarkAppendUintVarlen(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{12809409 0xc005d52e40}))  {
// 	 := strconv_test.BenchmarkAppendUintVarlen(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC strconv_test.BenchmarkAtof32Decimal has: 
// func benchmarkAtof32Decimal(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{12908653 0xc005eb2420}))  {
// 	 := strconv_test.BenchmarkAtof32Decimal(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC strconv_test.BenchmarkAtof32Float has: 
// func benchmarkAtof32Float(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{12908755 0xc005eb2680}))  {
// 	 := strconv_test.BenchmarkAtof32Float(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC strconv_test.BenchmarkAtof32FloatExp has: 
// func benchmarkAtof32FloatExp(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{12908862 0xc005eb28e0}))  {
// 	 := strconv_test.BenchmarkAtof32FloatExp(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC strconv_test.BenchmarkAtof32Random has: 
// func benchmarkAtof32Random(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{12909003 0xc005eb2ba0}))  {
// 	 := strconv_test.BenchmarkAtof32Random(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC strconv_test.BenchmarkAtof64Big has: 
// func benchmarkAtof64Big(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{12908267 0xc005eadc80}))  {
// 	 := strconv_test.BenchmarkAtof64Big(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC strconv_test.BenchmarkAtof64Decimal has: 
// func benchmarkAtof64Decimal(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{12907954 0xc005ead560}))  {
// 	 := strconv_test.BenchmarkAtof64Decimal(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC strconv_test.BenchmarkAtof64Float has: 
// func benchmarkAtof64Float(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{12908056 0xc005ead7c0}))  {
// 	 := strconv_test.BenchmarkAtof64Float(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC strconv_test.BenchmarkAtof64FloatExp has: 
// func benchmarkAtof64FloatExp(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{12908164 0xc005eada20}))  {
// 	 := strconv_test.BenchmarkAtof64FloatExp(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC strconv_test.BenchmarkAtof64RandomBits has: 
// func benchmarkAtof64RandomBits(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{12908396 0xc005eadee0}))  {
// 	 := strconv_test.BenchmarkAtof64RandomBits(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC strconv_test.BenchmarkAtof64RandomFloats has: 
// func benchmarkAtof64RandomFloats(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{12908526 0xc005eb2180}))  {
// 	 := strconv_test.BenchmarkAtof64RandomFloats(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC strconv_test.BenchmarkAtoi has: 
// func benchmarkAtoi(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{12822996 0xc005d8d9e0}))  {
// 	 := strconv_test.BenchmarkAtoi(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC strconv_test.BenchmarkFormatFloat has: 
// func benchmarkFormatFloat(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{12873909 0xc005e3eb40}))  {
// 	 := strconv_test.BenchmarkFormatFloat(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC strconv_test.BenchmarkFormatInt has: 
// func benchmarkFormatInt(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{12808154 0xc005d47120}))  {
// 	 := strconv_test.BenchmarkFormatInt(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC strconv_test.BenchmarkFormatIntSmall has: 
// func benchmarkFormatIntSmall(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{12808949 0xc005d523e0}))  {
// 	 := strconv_test.BenchmarkFormatIntSmall(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC strconv_test.BenchmarkFormatUint has: 
// func benchmarkFormatUint(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{12808547 0xc005d47a80}))  {
// 	 := strconv_test.BenchmarkFormatUint(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC strconv_test.BenchmarkParseInt has: 
// func benchmarkParseInt(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{12822366 0xc005d8c940}))  {
// 	 := strconv_test.BenchmarkParseInt(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC strconv_test.BenchmarkQuote has: 
// func benchmarkQuote(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{12797302 0xc005d20a40}))  {
// 	 := strconv_test.BenchmarkQuote(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC strconv_test.BenchmarkQuoteRune has: 
// func benchmarkQuoteRune(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{12797430 0xc005d20c60}))  {
// 	 := strconv_test.BenchmarkQuoteRune(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC strconv_test.BenchmarkUnquoteEasy has: 
// func benchmarkUnquoteEasy(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{12803621 0xc005d37ae0}))  {
// 	 := strconv_test.BenchmarkUnquoteEasy(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC strconv_test.BenchmarkUnquoteHard has: 
// func benchmarkUnquoteHard(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{12803774 0xc005d37d00}))  {
// 	 := strconv_test.BenchmarkUnquoteHard(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC strconv_test.ExampleAppendBool has: 
// func exampleAppendBool()  {
// 	 := strconv_test.ExampleAppendBool()
// 	...ABEND: TODO...
// }
// 
GO FUNC strconv_test.ExampleAppendFloat has: 
// func exampleAppendFloat()  {
// 	 := strconv_test.ExampleAppendFloat()
// 	...ABEND: TODO...
// }
// 
GO FUNC strconv_test.ExampleAppendInt has: 
// func exampleAppendInt()  {
// 	 := strconv_test.ExampleAppendInt()
// 	...ABEND: TODO...
// }
// 
GO FUNC strconv_test.ExampleAppendQuote has: 
// func exampleAppendQuote()  {
// 	 := strconv_test.ExampleAppendQuote()
// 	...ABEND: TODO...
// }
// 
GO FUNC strconv_test.ExampleAppendQuoteRune has: 
// func exampleAppendQuoteRune()  {
// 	 := strconv_test.ExampleAppendQuoteRune()
// 	...ABEND: TODO...
// }
// 
GO FUNC strconv_test.ExampleAppendQuoteRuneToASCII has: 
// func exampleAppendQuoteRuneToASCII()  {
// 	 := strconv_test.ExampleAppendQuoteRuneToASCII()
// 	...ABEND: TODO...
// }
// 
GO FUNC strconv_test.ExampleAppendQuoteToASCII has: 
// func exampleAppendQuoteToASCII()  {
// 	 := strconv_test.ExampleAppendQuoteToASCII()
// 	...ABEND: TODO...
// }
// 
GO FUNC strconv_test.ExampleAppendUint has: 
// func exampleAppendUint()  {
// 	 := strconv_test.ExampleAppendUint()
// 	...ABEND: TODO...
// }
// 
GO FUNC strconv_test.ExampleAtoi has: 
// func exampleAtoi()  {
// 	 := strconv_test.ExampleAtoi()
// 	...ABEND: TODO...
// }
// 
GO FUNC strconv_test.ExampleCanBackquote has: 
// func exampleCanBackquote()  {
// 	 := strconv_test.ExampleCanBackquote()
// 	...ABEND: TODO...
// }
// 
GO FUNC strconv_test.ExampleFormatBool has: 
// func exampleFormatBool()  {
// 	 := strconv_test.ExampleFormatBool()
// 	...ABEND: TODO...
// }
// 
GO FUNC strconv_test.ExampleFormatFloat has: 
// func exampleFormatFloat()  {
// 	 := strconv_test.ExampleFormatFloat()
// 	...ABEND: TODO...
// }
// 
GO FUNC strconv_test.ExampleFormatInt has: 
// func exampleFormatInt()  {
// 	 := strconv_test.ExampleFormatInt()
// 	...ABEND: TODO...
// }
// 
GO FUNC strconv_test.ExampleFormatUint has: 
// func exampleFormatUint()  {
// 	 := strconv_test.ExampleFormatUint()
// 	...ABEND: TODO...
// }
// 
GO FUNC strconv_test.ExampleIsPrint has: 
// func exampleIsPrint()  {
// 	 := strconv_test.ExampleIsPrint()
// 	...ABEND: TODO...
// }
// 
GO FUNC strconv_test.ExampleItoa has: 
// func exampleItoa()  {
// 	 := strconv_test.ExampleItoa()
// 	...ABEND: TODO...
// }
// 
GO FUNC strconv_test.ExampleNumError has: 
// func exampleNumError()  {
// 	 := strconv_test.ExampleNumError()
// 	...ABEND: TODO...
// }
// 
GO FUNC strconv_test.ExampleParseBool has: 
// func exampleParseBool()  {
// 	 := strconv_test.ExampleParseBool()
// 	...ABEND: TODO...
// }
// 
GO FUNC strconv_test.ExampleParseFloat has: 
// func exampleParseFloat()  {
// 	 := strconv_test.ExampleParseFloat()
// 	...ABEND: TODO...
// }
// 
GO FUNC strconv_test.ExampleParseInt has: 
// func exampleParseInt()  {
// 	 := strconv_test.ExampleParseInt()
// 	...ABEND: TODO...
// }
// 
GO FUNC strconv_test.ExampleParseUint has: 
// func exampleParseUint()  {
// 	 := strconv_test.ExampleParseUint()
// 	...ABEND: TODO...
// }
// 
GO FUNC strconv_test.ExampleQuote has: 
// func exampleQuote()  {
// 	 := strconv_test.ExampleQuote()
// 	...ABEND: TODO...
// }
// 
GO FUNC strconv_test.ExampleQuoteRune has: 
// func exampleQuoteRune()  {
// 	 := strconv_test.ExampleQuoteRune()
// 	...ABEND: TODO...
// }
// 
GO FUNC strconv_test.ExampleQuoteRuneToASCII has: 
// func exampleQuoteRuneToASCII()  {
// 	 := strconv_test.ExampleQuoteRuneToASCII()
// 	...ABEND: TODO...
// }
// 
GO FUNC strconv_test.ExampleQuoteToASCII has: 
// func exampleQuoteToASCII()  {
// 	 := strconv_test.ExampleQuoteToASCII()
// 	...ABEND: TODO...
// }
// 
GO FUNC strconv_test.ExampleUnquote has: 
// func exampleUnquote()  {
// 	 := strconv_test.ExampleUnquote()
// 	...ABEND: TODO...
// }
// 
GO FUNC strconv_test.ExampleUnquoteChar has: 
// func exampleUnquoteChar()  {
// 	 := strconv_test.ExampleUnquoteChar()
// 	...ABEND: TODO...
// }
// 
GO FUNC strconv_test.TestAppendBool has: 
// func testAppendBool(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{12839926 0xc005dce3e0}))  {
// 	 := strconv_test.TestAppendBool(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC strconv_test.TestAtof has: 
// func testAtof(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{12905577 0xc005ea8c00}))  {
// 	 := strconv_test.TestAtof(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC strconv_test.TestAtofRandom has: 
// func testAtofRandom(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{12905690 0xc005ea8ec0}))  {
// 	 := strconv_test.TestAtofRandom(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC strconv_test.TestAtofSlow has: 
// func testAtofSlow(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{12905632 0xc005ea8d60}))  {
// 	 := strconv_test.TestAtofSlow(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC strconv_test.TestAtoi has: 
// func testAtoi(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{12819281 0xc005d7ee60}))  {
// 	 := strconv_test.TestAtoi(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC strconv_test.TestCanBackquote has: 
// func testCanBackquote(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{12800912 0xc005d30ac0}))  {
// 	 := strconv_test.TestCanBackquote(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC strconv_test.TestCountMallocs has: 
// func testCountMallocs(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{12841562 0xc005dcf940}))  {
// 	 := strconv_test.TestCountMallocs(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC strconv_test.TestDecimalRound has: 
// func testDecimalRound(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{12911165 0xc005ec0ea0}))  {
// 	 := strconv_test.TestDecimalRound(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC strconv_test.TestDecimalRoundedInteger has: 
// func testDecimalRoundedInteger(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{12912074 0xc005eca560}))  {
// 	 := strconv_test.TestDecimalRoundedInteger(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC strconv_test.TestDecimalShift has: 
// func testDecimalShift(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{12909949 0xc005eb3a40}))  {
// 	 := strconv_test.TestDecimalShift(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC strconv_test.TestErrorPrefixes has: 
// func testErrorPrefixes(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{12841940 0xc005dd8040}))  {
// 	 := strconv_test.TestErrorPrefixes(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC strconv_test.TestFormatBool has: 
// func testFormatBool(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{12839550 0xc005dcbdc0}))  {
// 	 := strconv_test.TestFormatBool(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC strconv_test.TestFormatUintVarlen has: 
// func testFormatUintVarlen(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{12807947 0xc005d46ca0}))  {
// 	 := strconv_test.TestFormatUintVarlen(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC strconv_test.TestFp has: 
// func testFp(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{12893265 0xc005e80c80}))  {
// 	 := strconv_test.TestFp(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC strconv_test.TestFtoa has: 
// func testFtoa(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{12871430 0xc005e35520}))  {
// 	 := strconv_test.TestFtoa(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC strconv_test.TestFtoaRandom has: 
// func testFtoaRandom(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{12872362 0xc005e3ada0}))  {
// 	 := strconv_test.TestFtoaRandom(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC strconv_test.TestIsGraphic has: 
// func testIsGraphic(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{12795302 0xc005d167c0}))  {
// 	 := strconv_test.TestIsGraphic(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC strconv_test.TestIsPrint has: 
// func testIsPrint(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{12795009 0xc005d16220}))  {
// 	 := strconv_test.TestIsPrint(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC strconv_test.TestItoa has: 
// func testItoa(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{12805515 0xc005d3ff00}))  {
// 	 := strconv_test.TestItoa(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC strconv_test.TestNumError has: 
// func testNumError(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{12822035 0xc005d8c340}))  {
// 	 := strconv_test.TestNumError(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC strconv_test.TestParseBool has: 
// func testParseBool(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{12838861 0xc005dcb160}))  {
// 	 := strconv_test.TestParseBool(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC strconv_test.TestParseInt has: 
// func testParseInt(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{12818646 0xc005d7e120}))  {
// 	 := strconv_test.TestParseInt(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC strconv_test.TestParseInt32 has: 
// func testParseInt32(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{12817032 0xc005d77ee0}))  {
// 	 := strconv_test.TestParseInt32(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC strconv_test.TestParseInt64 has: 
// func testParseInt64(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{12817349 0xc005d7a5c0}))  {
// 	 := strconv_test.TestParseInt64(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC strconv_test.TestParseInt64Base has: 
// func testParseInt64Base(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{12817663 0xc005d7ac80}))  {
// 	 := strconv_test.TestParseInt64Base(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC strconv_test.TestParseIntBase has: 
// func testParseIntBase(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{12821391 0xc005d87680}))  {
// 	 := strconv_test.TestParseIntBase(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC strconv_test.TestParseIntBitSize has: 
// func testParseIntBitSize(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{12820728 0xc005d869c0}))  {
// 	 := strconv_test.TestParseIntBitSize(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC strconv_test.TestParseUint has: 
// func testParseUint(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{12817998 0xc005d7b3e0}))  {
// 	 := strconv_test.TestParseUint(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC strconv_test.TestParseUint32 has: 
// func testParseUint32(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{12816050 0xc005d769e0}))  {
// 	 := strconv_test.TestParseUint32(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC strconv_test.TestParseUint64 has: 
// func testParseUint64(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{12816373 0xc005d770c0}))  {
// 	 := strconv_test.TestParseUint64(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC strconv_test.TestParseUint64Base has: 
// func testParseUint64Base(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{12816692 0xc005d77780}))  {
// 	 := strconv_test.TestParseUint64Base(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC strconv_test.TestParseUintBase has: 
// func testParseUintBase(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{12821714 0xc005d87ce0}))  {
// 	 := strconv_test.TestParseUintBase(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC strconv_test.TestParseUintBitSize has: 
// func testParseUintBitSize(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{12821060 0xc005d87020}))  {
// 	 := strconv_test.TestParseUintBitSize(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC strconv_test.TestQuote has: 
// func testQuote(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{12796179 0xc005d17300}))  {
// 	 := strconv_test.TestQuote(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC strconv_test.TestQuoteRune has: 
// func testQuoteRune(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{12798628 0xc005d21de0}))  {
// 	 := strconv_test.TestQuoteRune(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC strconv_test.TestQuoteRuneToASCII has: 
// func testQuoteRuneToASCII(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{12798997 0xc005d285a0}))  {
// 	 := strconv_test.TestQuoteRuneToASCII(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC strconv_test.TestQuoteRuneToGraphic has: 
// func testQuoteRuneToGraphic(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{12799404 0xc005d28d60}))  {
// 	 := strconv_test.TestQuoteRuneToGraphic(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC strconv_test.TestQuoteToASCII has: 
// func testQuoteToASCII(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{12796524 0xc005d17ac0}))  {
// 	 := strconv_test.TestQuoteToASCII(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC strconv_test.TestQuoteToGraphic has: 
// func testQuoteToGraphic(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{12796907 0xc005d20280}))  {
// 	 := strconv_test.TestQuoteToGraphic(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC strconv_test.TestRoundTrip has: 
// func testRoundTrip(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{12906485 0xc005ea98e0}))  {
// 	 := strconv_test.TestRoundTrip(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC strconv_test.TestRoundTrip32 has: 
// func testRoundTrip32(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{12907245 0xc005eac920}))  {
// 	 := strconv_test.TestRoundTrip32(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC strconv_test.TestUitoa has: 
// func testUitoa(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{12806868 0xc005d45b00}))  {
// 	 := strconv_test.TestUitoa(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC strconv_test.TestUnquote has: 
// func testUnquote(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{12802204 0xc005d360a0}))  {
// 	 := strconv_test.TestUnquote(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC strconv_test.TestUnquoteInvalidUTF8 has: 
// func testUnquoteInvalidUTF8(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{12802876 0xc005d36ca0}))  {
// 	 := strconv_test.TestUnquoteInvalidUTF8(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC strings_test.BenchmarkBuildString_Builder has: 
// func benchmarkBuildString_Builder(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{13017305 0xc006085140}))  {
// 	 := strings_test.BenchmarkBuildString_Builder(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC strings_test.BenchmarkBuildString_ByteBuffer has: 
// func benchmarkBuildString_ByteBuffer(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{13017631 0xc0060857e0}))  {
// 	 := strings_test.BenchmarkBuildString_ByteBuffer(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC strings_test.BenchmarkByteByteMap has: 
// func benchmarkByteByteMap(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{13009312 0xc00605da00}))  {
// 	 := strings_test.BenchmarkByteByteMap(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC strings_test.BenchmarkByteByteMatch has: 
// func benchmarkByteByteMatch(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{13007939 0xc006053f00}))  {
// 	 := strings_test.BenchmarkByteByteMatch(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC strings_test.BenchmarkByteByteNoMatch has: 
// func benchmarkByteByteNoMatch(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{13007787 0xc006053b60}))  {
// 	 := strings_test.BenchmarkByteByteNoMatch(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC strings_test.BenchmarkByteByteReplaces has: 
// func benchmarkByteByteReplaces(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{13009081 0xc00605d500}))  {
// 	 := strings_test.BenchmarkByteByteReplaces(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC strings_test.BenchmarkByteReplacerWriteString has: 
// func benchmarkByteReplacerWriteString(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{13008793 0xc00605d040}))  {
// 	 := strings_test.BenchmarkByteReplacerWriteString(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC strings_test.BenchmarkByteStringMatch has: 
// func benchmarkByteStringMatch(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{13008093 0xc00605c2a0}))  {
// 	 := strings_test.BenchmarkByteStringMatch(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC strings_test.BenchmarkByteStringReplacerWriteString has: 
// func benchmarkByteStringReplacerWriteString(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{13008568 0xc00605cbc0}))  {
// 	 := strings_test.BenchmarkByteStringReplacerWriteString(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC strings_test.BenchmarkCountByte has: 
// func benchmarkCountByte(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{12992424 0xc006013c20}))  {
// 	 := strings_test.BenchmarkCountByte(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC strings_test.BenchmarkCountHard1 has: 
// func benchmarkCountHard1(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{12991662 0xc006012ce0}))  {
// 	 := strings_test.BenchmarkCountHard1(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC strings_test.BenchmarkCountHard2 has: 
// func benchmarkCountHard2(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{12991733 0xc006012e40}))  {
// 	 := strings_test.BenchmarkCountHard2(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC strings_test.BenchmarkCountHard3 has: 
// func benchmarkCountHard3(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{12991808 0xc006012fa0}))  {
// 	 := strings_test.BenchmarkCountHard3(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC strings_test.BenchmarkCountTorture has: 
// func benchmarkCountTorture(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{12992147 0xc0060135c0}))  {
// 	 := strings_test.BenchmarkCountTorture(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC strings_test.BenchmarkCountTortureOverlapping has: 
// func benchmarkCountTortureOverlapping(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{12992282 0xc006013820}))  {
// 	 := strings_test.BenchmarkCountTortureOverlapping(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC strings_test.BenchmarkEqualFold has: 
// func benchmarkEqualFold(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{12989616 0xc00600a540}))  {
// 	 := strings_test.BenchmarkEqualFold(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC strings_test.BenchmarkFields has: 
// func benchmarkFields(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{12993609 0xc00601d220}))  {
// 	 := strings_test.BenchmarkFields(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC strings_test.BenchmarkFieldsFunc has: 
// func benchmarkFieldsFunc(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{12993970 0xc00601db40}))  {
// 	 := strings_test.BenchmarkFieldsFunc(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC strings_test.BenchmarkGenericMatch1 has: 
// func benchmarkGenericMatch1(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{13006868 0xc006052860}))  {
// 	 := strings_test.BenchmarkGenericMatch1(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC strings_test.BenchmarkGenericMatch2 has: 
// func benchmarkGenericMatch2(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{13007070 0xc006052d20}))  {
// 	 := strings_test.BenchmarkGenericMatch2(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC strings_test.BenchmarkGenericNoMatch has: 
// func benchmarkGenericNoMatch(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{13006632 0xc006052360}))  {
// 	 := strings_test.BenchmarkGenericNoMatch(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC strings_test.BenchmarkHTMLEscapeNew has: 
// func benchmarkHTMLEscapeNew(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{13008252 0xc00605c680}))  {
// 	 := strings_test.BenchmarkHTMLEscapeNew(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC strings_test.BenchmarkHTMLEscapeOld has: 
// func benchmarkHTMLEscapeOld(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{13008405 0xc00605c940}))  {
// 	 := strings_test.BenchmarkHTMLEscapeOld(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC strings_test.BenchmarkIndex has: 
// func benchmarkIndex(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{12961429 0xc005fa2380}))  {
// 	 := strings_test.BenchmarkIndex(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC strings_test.BenchmarkIndexAnyASCII has: 
// func benchmarkIndexAnyASCII(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{12995046 0xc006025360}))  {
// 	 := strings_test.BenchmarkIndexAnyASCII(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC strings_test.BenchmarkIndexByte has: 
// func benchmarkIndexByte(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{12961855 0xc005fa2bc0}))  {
// 	 := strings_test.BenchmarkIndexByte(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC strings_test.BenchmarkIndexHard1 has: 
// func benchmarkIndexHard1(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{12991055 0xc006012340}))  {
// 	 := strings_test.BenchmarkIndexHard1(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC strings_test.BenchmarkIndexHard2 has: 
// func benchmarkIndexHard2(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{12991126 0xc0060124a0}))  {
// 	 := strings_test.BenchmarkIndexHard2(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC strings_test.BenchmarkIndexHard3 has: 
// func benchmarkIndexHard3(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{12991201 0xc006012600}))  {
// 	 := strings_test.BenchmarkIndexHard3(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC strings_test.BenchmarkIndexHard4 has: 
// func benchmarkIndexHard4(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{12991288 0xc006012760}))  {
// 	 := strings_test.BenchmarkIndexHard4(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC strings_test.BenchmarkIndexPeriodic has: 
// func benchmarkIndexPeriodic(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{12995686 0xc0060282a0}))  {
// 	 := strings_test.BenchmarkIndexPeriodic(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC strings_test.BenchmarkIndexRune has: 
// func benchmarkIndexRune(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{12960678 0xc005f9f660}))  {
// 	 := strings_test.BenchmarkIndexRune(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC strings_test.BenchmarkIndexRuneFastPath has: 
// func benchmarkIndexRuneFastPath(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{12961214 0xc005f9ff60}))  {
// 	 := strings_test.BenchmarkIndexRuneFastPath(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC strings_test.BenchmarkIndexRuneLongString has: 
// func benchmarkIndexRuneLongString(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{12960973 0xc005f9fb40}))  {
// 	 := strings_test.BenchmarkIndexRuneLongString(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC strings_test.BenchmarkIndexTorture has: 
// func benchmarkIndexTorture(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{12992023 0xc006013360}))  {
// 	 := strings_test.BenchmarkIndexTorture(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC strings_test.BenchmarkLastIndex has: 
// func benchmarkLastIndex(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{12961640 0xc005fa27a0}))  {
// 	 := strings_test.BenchmarkLastIndex(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC strings_test.BenchmarkLastIndexHard1 has: 
// func benchmarkLastIndexHard1(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{12991408 0xc0060128c0}))  {
// 	 := strings_test.BenchmarkLastIndexHard1(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC strings_test.BenchmarkLastIndexHard2 has: 
// func benchmarkLastIndexHard2(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{12991487 0xc006012a20}))  {
// 	 := strings_test.BenchmarkLastIndexHard2(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC strings_test.BenchmarkLastIndexHard3 has: 
// func benchmarkLastIndexHard3(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{12991570 0xc006012b80}))  {
// 	 := strings_test.BenchmarkLastIndexHard3(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC strings_test.BenchmarkMap has: 
// func benchmarkMap(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{13009754 0xc006064140}))  {
// 	 := strings_test.BenchmarkMap(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC strings_test.BenchmarkMapNoChanges has: 
// func benchmarkMapNoChanges(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{12971480 0xc005fc81c0}))  {
// 	 := strings_test.BenchmarkMapNoChanges(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC strings_test.BenchmarkRepeat has: 
// func benchmarkRepeat(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{12994950 0xc006025100}))  {
// 	 := strings_test.BenchmarkRepeat(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC strings_test.BenchmarkSingleLongSuffixFail has: 
// func benchmarkSingleLongSuffixFail(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{13007557 0xc006053720}))  {
// 	 := strings_test.BenchmarkSingleLongSuffixFail(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC strings_test.BenchmarkSingleMatch has: 
// func benchmarkSingleMatch(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{13007669 0xc006053980}))  {
// 	 := strings_test.BenchmarkSingleMatch(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC strings_test.BenchmarkSingleMaxSkipping has: 
// func benchmarkSingleMaxSkipping(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{13007440 0xc0060534e0}))  {
// 	 := strings_test.BenchmarkSingleMaxSkipping(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC strings_test.BenchmarkSplitEmptySeparator has: 
// func benchmarkSplitEmptySeparator(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{12994361 0xc0060244e0}))  {
// 	 := strings_test.BenchmarkSplitEmptySeparator(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC strings_test.BenchmarkSplitMultiByteSeparator has: 
// func benchmarkSplitMultiByteSeparator(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{12994595 0xc0060249a0}))  {
// 	 := strings_test.BenchmarkSplitMultiByteSeparator(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC strings_test.BenchmarkSplitNMultiByteSeparator has: 
// func benchmarkSplitNMultiByteSeparator(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{12994841 0xc006024e80}))  {
// 	 := strings_test.BenchmarkSplitNMultiByteSeparator(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC strings_test.BenchmarkSplitNSingleByteSeparator has: 
// func benchmarkSplitNSingleByteSeparator(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{12994718 0xc006024c00}))  {
// 	 := strings_test.BenchmarkSplitNSingleByteSeparator(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC strings_test.BenchmarkSplitSingleByteSeparator has: 
// func benchmarkSplitSingleByteSeparator(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{12994478 0xc006024740}))  {
// 	 := strings_test.BenchmarkSplitSingleByteSeparator(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC strings_test.BenchmarkToLower has: 
// func benchmarkToLower(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{12971195 0xc005fc1ae0}))  {
// 	 := strings_test.BenchmarkToLower(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC strings_test.BenchmarkToUpper has: 
// func benchmarkToUpper(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{12970915 0xc005fc1400}))  {
// 	 := strings_test.BenchmarkToUpper(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC strings_test.BenchmarkTrim has: 
// func benchmarkTrim(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{12973919 0xc005fd0c40}))  {
// 	 := strings_test.BenchmarkTrim(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC strings_test.BenchmarkTrimASCII has: 
// func benchmarkTrimASCII(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{12995364 0xc006025ae0}))  {
// 	 := strings_test.BenchmarkTrimASCII(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC strings_test.ExampleBuilder has: 
// func exampleBuilder()  {
// 	 := strings_test.ExampleBuilder()
// 	...ABEND: TODO...
// }
// 
GO FUNC strings_test.ExampleCompare has: 
// func exampleCompare()  {
// 	 := strings_test.ExampleCompare()
// 	...ABEND: TODO...
// }
// 
GO FUNC strings_test.ExampleContains has: 
// func exampleContains()  {
// 	 := strings_test.ExampleContains()
// 	...ABEND: TODO...
// }
// 
GO FUNC strings_test.ExampleContainsAny has: 
// func exampleContainsAny()  {
// 	 := strings_test.ExampleContainsAny()
// 	...ABEND: TODO...
// }
// 
GO FUNC strings_test.ExampleContainsRune has: 
// func exampleContainsRune()  {
// 	 := strings_test.ExampleContainsRune()
// 	...ABEND: TODO...
// }
// 
GO FUNC strings_test.ExampleCount has: 
// func exampleCount()  {
// 	 := strings_test.ExampleCount()
// 	...ABEND: TODO...
// }
// 
GO FUNC strings_test.ExampleEqualFold has: 
// func exampleEqualFold()  {
// 	 := strings_test.ExampleEqualFold()
// 	...ABEND: TODO...
// }
// 
GO FUNC strings_test.ExampleFields has: 
// func exampleFields()  {
// 	 := strings_test.ExampleFields()
// 	...ABEND: TODO...
// }
// 
GO FUNC strings_test.ExampleFieldsFunc has: 
// func exampleFieldsFunc()  {
// 	 := strings_test.ExampleFieldsFunc()
// 	...ABEND: TODO...
// }
// 
GO FUNC strings_test.ExampleHasPrefix has: 
// func exampleHasPrefix()  {
// 	 := strings_test.ExampleHasPrefix()
// 	...ABEND: TODO...
// }
// 
GO FUNC strings_test.ExampleHasSuffix has: 
// func exampleHasSuffix()  {
// 	 := strings_test.ExampleHasSuffix()
// 	...ABEND: TODO...
// }
// 
GO FUNC strings_test.ExampleIndex has: 
// func exampleIndex()  {
// 	 := strings_test.ExampleIndex()
// 	...ABEND: TODO...
// }
// 
GO FUNC strings_test.ExampleIndexAny has: 
// func exampleIndexAny()  {
// 	 := strings_test.ExampleIndexAny()
// 	...ABEND: TODO...
// }
// 
GO FUNC strings_test.ExampleIndexByte has: 
// func exampleIndexByte()  {
// 	 := strings_test.ExampleIndexByte()
// 	...ABEND: TODO...
// }
// 
GO FUNC strings_test.ExampleIndexFunc has: 
// func exampleIndexFunc()  {
// 	 := strings_test.ExampleIndexFunc()
// 	...ABEND: TODO...
// }
// 
GO FUNC strings_test.ExampleIndexRune has: 
// func exampleIndexRune()  {
// 	 := strings_test.ExampleIndexRune()
// 	...ABEND: TODO...
// }
// 
GO FUNC strings_test.ExampleJoin has: 
// func exampleJoin()  {
// 	 := strings_test.ExampleJoin()
// 	...ABEND: TODO...
// }
// 
GO FUNC strings_test.ExampleLastIndex has: 
// func exampleLastIndex()  {
// 	 := strings_test.ExampleLastIndex()
// 	...ABEND: TODO...
// }
// 
GO FUNC strings_test.ExampleLastIndexAny has: 
// func exampleLastIndexAny()  {
// 	 := strings_test.ExampleLastIndexAny()
// 	...ABEND: TODO...
// }
// 
GO FUNC strings_test.ExampleLastIndexByte has: 
// func exampleLastIndexByte()  {
// 	 := strings_test.ExampleLastIndexByte()
// 	...ABEND: TODO...
// }
// 
GO FUNC strings_test.ExampleLastIndexFunc has: 
// func exampleLastIndexFunc()  {
// 	 := strings_test.ExampleLastIndexFunc()
// 	...ABEND: TODO...
// }
// 
GO FUNC strings_test.ExampleMap has: 
// func exampleMap()  {
// 	 := strings_test.ExampleMap()
// 	...ABEND: TODO...
// }
// 
GO FUNC strings_test.ExampleNewReplacer has: 
// func exampleNewReplacer()  {
// 	 := strings_test.ExampleNewReplacer()
// 	...ABEND: TODO...
// }
// 
GO FUNC strings_test.ExampleRepeat has: 
// func exampleRepeat()  {
// 	 := strings_test.ExampleRepeat()
// 	...ABEND: TODO...
// }
// 
GO FUNC strings_test.ExampleReplace has: 
// func exampleReplace()  {
// 	 := strings_test.ExampleReplace()
// 	...ABEND: TODO...
// }
// 
GO FUNC strings_test.ExampleSplit has: 
// func exampleSplit()  {
// 	 := strings_test.ExampleSplit()
// 	...ABEND: TODO...
// }
// 
GO FUNC strings_test.ExampleSplitAfter has: 
// func exampleSplitAfter()  {
// 	 := strings_test.ExampleSplitAfter()
// 	...ABEND: TODO...
// }
// 
GO FUNC strings_test.ExampleSplitAfterN has: 
// func exampleSplitAfterN()  {
// 	 := strings_test.ExampleSplitAfterN()
// 	...ABEND: TODO...
// }
// 
GO FUNC strings_test.ExampleSplitN has: 
// func exampleSplitN()  {
// 	 := strings_test.ExampleSplitN()
// 	...ABEND: TODO...
// }
// 
GO FUNC strings_test.ExampleTitle has: 
// func exampleTitle()  {
// 	 := strings_test.ExampleTitle()
// 	...ABEND: TODO...
// }
// 
GO FUNC strings_test.ExampleToLower has: 
// func exampleToLower()  {
// 	 := strings_test.ExampleToLower()
// 	...ABEND: TODO...
// }
// 
GO FUNC strings_test.ExampleToLowerSpecial has: 
// func exampleToLowerSpecial()  {
// 	 := strings_test.ExampleToLowerSpecial()
// 	...ABEND: TODO...
// }
// 
GO FUNC strings_test.ExampleToTitle has: 
// func exampleToTitle()  {
// 	 := strings_test.ExampleToTitle()
// 	...ABEND: TODO...
// }
// 
GO FUNC strings_test.ExampleToTitleSpecial has: 
// func exampleToTitleSpecial()  {
// 	 := strings_test.ExampleToTitleSpecial()
// 	...ABEND: TODO...
// }
// 
GO FUNC strings_test.ExampleToUpper has: 
// func exampleToUpper()  {
// 	 := strings_test.ExampleToUpper()
// 	...ABEND: TODO...
// }
// 
GO FUNC strings_test.ExampleToUpperSpecial has: 
// func exampleToUpperSpecial()  {
// 	 := strings_test.ExampleToUpperSpecial()
// 	...ABEND: TODO...
// }
// 
GO FUNC strings_test.ExampleTrim has: 
// func exampleTrim()  {
// 	 := strings_test.ExampleTrim()
// 	...ABEND: TODO...
// }
// 
GO FUNC strings_test.ExampleTrimFunc has: 
// func exampleTrimFunc()  {
// 	 := strings_test.ExampleTrimFunc()
// 	...ABEND: TODO...
// }
// 
GO FUNC strings_test.ExampleTrimLeft has: 
// func exampleTrimLeft()  {
// 	 := strings_test.ExampleTrimLeft()
// 	...ABEND: TODO...
// }
// 
GO FUNC strings_test.ExampleTrimLeftFunc has: 
// func exampleTrimLeftFunc()  {
// 	 := strings_test.ExampleTrimLeftFunc()
// 	...ABEND: TODO...
// }
// 
GO FUNC strings_test.ExampleTrimPrefix has: 
// func exampleTrimPrefix()  {
// 	 := strings_test.ExampleTrimPrefix()
// 	...ABEND: TODO...
// }
// 
GO FUNC strings_test.ExampleTrimRight has: 
// func exampleTrimRight()  {
// 	 := strings_test.ExampleTrimRight()
// 	...ABEND: TODO...
// }
// 
GO FUNC strings_test.ExampleTrimRightFunc has: 
// func exampleTrimRightFunc()  {
// 	 := strings_test.ExampleTrimRightFunc()
// 	...ABEND: TODO...
// }
// 
GO FUNC strings_test.ExampleTrimSpace has: 
// func exampleTrimSpace()  {
// 	 := strings_test.ExampleTrimSpace()
// 	...ABEND: TODO...
// }
// 
GO FUNC strings_test.ExampleTrimSuffix has: 
// func exampleTrimSuffix()  {
// 	 := strings_test.ExampleTrimSuffix()
// 	...ABEND: TODO...
// }
// 
GO FUNC strings_test.TestBuilder has: 
// func testBuilder(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{13011216 0xc006065b80}))  {
// 	 := strings_test.TestBuilder(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC strings_test.TestBuilderAllocs has: 
// func testBuilderAllocs(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{13014589 0xc006079f80}))  {
// 	 := strings_test.TestBuilderAllocs(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC strings_test.TestBuilderCopyPanic has: 
// func testBuilderCopyPanic(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{13015293 0xc00607eb00}))  {
// 	 := strings_test.TestBuilderCopyPanic(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC strings_test.TestBuilderGrow has: 
// func testBuilderGrow(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{13012742 0xc0060718c0}))  {
// 	 := strings_test.TestBuilderGrow(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC strings_test.TestBuilderReset has: 
// func testBuilderReset(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{13012336 0xc0060710c0}))  {
// 	 := strings_test.TestBuilderReset(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC strings_test.TestBuilderString has: 
// func testBuilderString(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{13011685 0xc0060705e0}))  {
// 	 := strings_test.TestBuilderString(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC strings_test.TestBuilderWrite2 has: 
// func testBuilderWrite2(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{13013326 0xc0060782e0}))  {
// 	 := strings_test.TestBuilderWrite2(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC strings_test.TestBuilderWriteByte has: 
// func testBuilderWriteByte(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{13014391 0xc006079ac0}))  {
// 	 := strings_test.TestBuilderWriteByte(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC strings_test.TestCaseConsistency has: 
// func testCaseConsistency(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{12977265 0xc005fdeac0}))  {
// 	 := strings_test.TestCaseConsistency(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC strings_test.TestCompare has: 
// func testCompare(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{12929747 0xc005f173a0}))  {
// 	 := strings_test.TestCompare(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC strings_test.TestCompareIdenticalString has: 
// func testCompareIdenticalString(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{12929941 0xc005f17880}))  {
// 	 := strings_test.TestCompareIdenticalString(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC strings_test.TestCompareStrings has: 
// func testCompareStrings(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{12930120 0xc005f17c20}))  {
// 	 := strings_test.TestCompareStrings(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC strings_test.TestContains has: 
// func testContains(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{12987456 0xc006001980}))  {
// 	 := strings_test.TestContains(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC strings_test.TestContainsAny has: 
// func testContainsAny(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{12988037 0xc006006580}))  {
// 	 := strings_test.TestContainsAny(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC strings_test.TestContainsRune has: 
// func testContainsRune(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{12988557 0xc006006fe0}))  {
// 	 := strings_test.TestContainsRune(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC strings_test.TestCount has: 
// func testCount(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{12990121 0xc00600b000}))  {
// 	 := strings_test.TestCount(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC strings_test.TestEmptyReaderConcurrent has: 
// func testEmptyReaderConcurrent(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{12927255 0xc005f147c0}))  {
// 	 := strings_test.TestEmptyReaderConcurrent(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC strings_test.TestEqualFold has: 
// func testEqualFold(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{12989275 0xc006007ca0}))  {
// 	 := strings_test.TestEqualFold(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC strings_test.TestFields has: 
// func testFields(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{12965356 0xc005fafc80}))  {
// 	 := strings_test.TestFields(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC strings_test.TestFieldsFunc has: 
// func testFieldsFunc(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{12965693 0xc005fb43e0}))  {
// 	 := strings_test.TestFieldsFunc(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC strings_test.TestFinderCreation has: 
// func testFinderCreation(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{13048197 0xc0060efe00}))  {
// 	 := strings_test.TestFinderCreation(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC strings_test.TestFinderNext has: 
// func testFinderNext(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{13047520 0xc0060eef00}))  {
// 	 := strings_test.TestFinderNext(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC strings_test.TestGenericTrieBuilding has: 
// func testGenericTrieBuilding(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{13005555 0xc00604f5c0}))  {
// 	 := strings_test.TestGenericTrieBuilding(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC strings_test.TestIndex has: 
// func testIndex(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{12957413 0xc005f91b00}))  {
// 	 := strings_test.TestIndex(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC strings_test.TestIndexAny has: 
// func testIndexAny(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{12957598 0xc005f91e40}))  {
// 	 := strings_test.TestIndexAny(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC strings_test.TestIndexFunc has: 
// func testIndexFunc(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{12976516 0xc005fd78c0}))  {
// 	 := strings_test.TestIndexFunc(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC strings_test.TestIndexRandom has: 
// func testIndexRandom(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{12958517 0xc005f9afa0}))  {
// 	 := strings_test.TestIndexRandom(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC strings_test.TestIndexRune has: 
// func testIndexRune(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{12959233 0xc005f9bdc0}))  {
// 	 := strings_test.TestIndexRune(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC strings_test.TestLastIndex has: 
// func testLastIndex(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{12957502 0xc005f91ca0}))  {
// 	 := strings_test.TestLastIndex(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC strings_test.TestLastIndexAny has: 
// func testLastIndexAny(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{12957696 0xc005f91fe0}))  {
// 	 := strings_test.TestLastIndexAny(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC strings_test.TestLastIndexByte has: 
// func testLastIndexByte(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{12957804 0xc005f9a180}))  {
// 	 := strings_test.TestLastIndexByte(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC strings_test.TestMap has: 
// func testMap(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{12968511 0xc005fbcb60}))  {
// 	 := strings_test.TestMap(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC strings_test.TestPickAlgorithm has: 
// func testPickAlgorithm(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{13004645 0xc00604e8c0}))  {
// 	 := strings_test.TestPickAlgorithm(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC strings_test.TestReadAfterBigSeek has: 
// func testReadAfterBigSeek(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{12925956 0xc005f0eaa0}))  {
// 	 := strings_test.TestReadAfterBigSeek(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC strings_test.TestReadByte has: 
// func testReadByte(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{12980756 0xc005fec820}))  {
// 	 := strings_test.TestReadByte(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC strings_test.TestReadRune has: 
// func testReadRune(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{12981640 0xc005fed7e0}))  {
// 	 := strings_test.TestReadRune(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC strings_test.TestReader has: 
// func testReader(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{12924512 0xc005f06980}))  {
// 	 := strings_test.TestReader(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC strings_test.TestReaderAt has: 
// func testReaderAt(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{12926225 0xc005f0f180}))  {
// 	 := strings_test.TestReaderAt(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC strings_test.TestReaderAtConcurrent has: 
// func testReaderAtConcurrent(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{12926919 0xc005f14140}))  {
// 	 := strings_test.TestReaderAtConcurrent(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC strings_test.TestReaderLenSize has: 
// func testReaderLenSize(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{12928302 0xc005f15a00}))  {
// 	 := strings_test.TestReaderLenSize(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC strings_test.TestReaderReset has: 
// func testReaderReset(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{12928532 0xc005f15fc0}))  {
// 	 := strings_test.TestReaderReset(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC strings_test.TestRepeat has: 
// func testRepeat(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{12978697 0xc005fdfba0}))  {
// 	 := strings_test.TestRepeat(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC strings_test.TestRepeatCatchesOverflow has: 
// func testRepeatCatchesOverflow(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{12979215 0xc005fe45e0}))  {
// 	 := strings_test.TestRepeatCatchesOverflow(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC strings_test.TestReplace has: 
// func testReplace(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{12984157 0xc005ff8820}))  {
// 	 := strings_test.TestReplace(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC strings_test.TestReplacer has: 
// func testReplacer(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{12996801 0xc0060297a0}))  {
// 	 := strings_test.TestReplacer(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC strings_test.TestRunes has: 
// func testRunes(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{12980368 0xc005fec000}))  {
// 	 := strings_test.TestRunes(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC strings_test.TestSpecialCase has: 
// func testSpecialCase(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{12971653 0xc005fc8520}))  {
// 	 := strings_test.TestSpecialCase(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC strings_test.TestSplit has: 
// func testSplit(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{12962899 0xc005fa8440}))  {
// 	 := strings_test.TestSplit(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC strings_test.TestSplitAfter has: 
// func testSplitAfter(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{12964085 0xc005fae2c0}))  {
// 	 := strings_test.TestSplitAfter(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC strings_test.TestTitle has: 
// func testTitle(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{12984741 0xc005ff92e0}))  {
// 	 := strings_test.TestTitle(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC strings_test.TestToLower has: 
// func testToLower(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{12970824 0xc005fc1260}))  {
// 	 := strings_test.TestToLower(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC strings_test.TestToUpper has: 
// func testToUpper(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{12970738 0xc005fc10c0}))  {
// 	 := strings_test.TestToUpper(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC strings_test.TestTrim has: 
// func testTrim(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{12973405 0xc005fd02e0}))  {
// 	 := strings_test.TestTrim(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC strings_test.TestTrimFunc has: 
// func testTrimFunc(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{12975437 0xc005fd64a0}))  {
// 	 := strings_test.TestTrimFunc(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC strings_test.TestTrimSpace has: 
// func testTrimSpace(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{12972261 0xc005fc8ea0}))  {
// 	 := strings_test.TestTrimSpace(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC strings_test.TestUnreadRuneError has: 
// func testUnreadRuneError(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{12982964 0xc005ff50a0}))  {
// 	 := strings_test.TestUnreadRuneError(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC strings_test.TestWriteStringError has: 
// func testWriteStringError(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{13005089 0xc00604f020}))  {
// 	 := strings_test.TestWriteStringError(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC strings_test.TestWriteTo has: 
// func testWriteTo(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{12927709 0xc005f14f00}))  {
// 	 := strings_test.TestWriteTo(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC subtle.BenchmarkConstantTimeByteEq has: 
// func benchmarkConstantTimeByteEq(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{1594823 0xc000b51f20}))  {
// 	 := subtle.BenchmarkConstantTimeByteEq(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC subtle.BenchmarkConstantTimeEq has: 
// func benchmarkConstantTimeEq(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{1594985 0xc000b70300}))  {
// 	 := subtle.BenchmarkConstantTimeEq(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC subtle.BenchmarkConstantTimeLessOrEq has: 
// func benchmarkConstantTimeLessOrEq(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{1595161 0xc000b70720}))  {
// 	 := subtle.BenchmarkConstantTimeLessOrEq(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC subtle.ConstantTimeCopy has: 
// func constantTimeCopy(v int, x ABEND881(unrecognized Expr type *ast.ArrayType at: &{1591876 <nil> byte}), y ABEND881(unrecognized Expr type *ast.ArrayType at: &{1591876 <nil> byte}))  {
// 	 := subtle.ConstantTimeCopy(v, x, y)
// 	...ABEND: TODO...
// }
// 
GO FUNC subtle.TestConstantTimeByteEq has: 
// func testConstantTimeByteEq(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{1593400 0xc000a60ba0}))  {
// 	 := subtle.TestConstantTimeByteEq(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC subtle.TestConstantTimeCompare has: 
// func testConstantTimeCompare(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{1592889 0xc000a60180}))  {
// 	 := subtle.TestConstantTimeCompare(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC subtle.TestConstantTimeCopy has: 
// func testConstantTimeCopy(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{1594249 0xc000b512c0}))  {
// 	 := subtle.TestConstantTimeCopy(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC subtle.TestConstantTimeEq has: 
// func testConstantTimeEq(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{1593786 0xc000a6f8e0}))  {
// 	 := subtle.TestConstantTimeEq(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC subtle.TestConstantTimeLessOrEq has: 
// func testConstantTimeLessOrEq(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{1594531 0xc000b519a0}))  {
// 	 := subtle.TestConstantTimeLessOrEq(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC suffixarray.BenchmarkNewIndexRandom has: 
// func benchmarkNewIndexRandom(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{6320872 0xc001552e40}))  {
// 	 := suffixarray.BenchmarkNewIndexRandom(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC suffixarray.BenchmarkNewIndexRepeat has: 
// func benchmarkNewIndexRepeat(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{6320942 0xc001552fa0}))  {
// 	 := suffixarray.BenchmarkNewIndexRepeat(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC suffixarray.BenchmarkSaveRestore has: 
// func benchmarkSaveRestore(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{6321011 0xc001553100}))  {
// 	 := suffixarray.BenchmarkSaveRestore(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC suffixarray.TestIndex has: 
// func testIndex(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{6320112 0xc001552000}))  {
// 	 := suffixarray.TestIndex(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC suffixarray_test.ExampleIndex_Lookup has: 
// func exampleIndex_Lookup()  {
// 	 := suffixarray_test.ExampleIndex_Lookup()
// 	...ABEND: TODO...
// }
// 
GO FUNC sync_test.BenchmarkAdversarialAlloc has: 
// func benchmarkAdversarialAlloc(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{13087436 0xc0061a1640}))  {
// 	 := sync_test.BenchmarkAdversarialAlloc(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC sync_test.BenchmarkAdversarialDelete has: 
// func benchmarkAdversarialDelete(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{13088070 0xc0061a1e40}))  {
// 	 := sync_test.BenchmarkAdversarialDelete(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC sync_test.BenchmarkCond1 has: 
// func benchmarkCond1(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{13092810 0xc0061bf740}))  {
// 	 := sync_test.BenchmarkCond1(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC sync_test.BenchmarkCond16 has: 
// func benchmarkCond16(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{13093051 0xc0061bfcc0}))  {
// 	 := sync_test.BenchmarkCond16(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC sync_test.BenchmarkCond2 has: 
// func benchmarkCond2(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{13092870 0xc0061bf8a0}))  {
// 	 := sync_test.BenchmarkCond2(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC sync_test.BenchmarkCond32 has: 
// func benchmarkCond32(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{13093113 0xc0061bfe20}))  {
// 	 := sync_test.BenchmarkCond32(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC sync_test.BenchmarkCond4 has: 
// func benchmarkCond4(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{13092930 0xc0061bfa00}))  {
// 	 := sync_test.BenchmarkCond4(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC sync_test.BenchmarkCond8 has: 
// func benchmarkCond8(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{13092990 0xc0061bfb60}))  {
// 	 := sync_test.BenchmarkCond8(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC sync_test.BenchmarkContendedSemaphore has: 
// func benchmarkContendedSemaphore(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{13064501 0xc006143be0}))  {
// 	 := sync_test.BenchmarkContendedSemaphore(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC sync_test.BenchmarkLoadMostlyHits has: 
// func benchmarkLoadMostlyHits(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{13084466 0xc006195940}))  {
// 	 := sync_test.BenchmarkLoadMostlyHits(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC sync_test.BenchmarkLoadMostlyMisses has: 
// func benchmarkLoadMostlyMisses(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{13084929 0xc00619c3a0}))  {
// 	 := sync_test.BenchmarkLoadMostlyMisses(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC sync_test.BenchmarkLoadOrStoreBalanced has: 
// func benchmarkLoadOrStoreBalanced(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{13085395 0xc00619ce20}))  {
// 	 := sync_test.BenchmarkLoadOrStoreBalanced(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC sync_test.BenchmarkLoadOrStoreCollision has: 
// func benchmarkLoadOrStoreCollision(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{13086561 0xc0061a05c0}))  {
// 	 := sync_test.BenchmarkLoadOrStoreCollision(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC sync_test.BenchmarkLoadOrStoreUnique has: 
// func benchmarkLoadOrStoreUnique(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{13086206 0xc00619de40}))  {
// 	 := sync_test.BenchmarkLoadOrStoreUnique(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC sync_test.BenchmarkMutex has: 
// func benchmarkMutex(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{13067688 0xc00615da40}))  {
// 	 := sync_test.BenchmarkMutex(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC sync_test.BenchmarkMutexNoSpin has: 
// func benchmarkMutexNoSpin(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{13067996 0xc006160040}))  {
// 	 := sync_test.BenchmarkMutexNoSpin(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC sync_test.BenchmarkMutexSlack has: 
// func benchmarkMutexSlack(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{13067765 0xc00615dbc0}))  {
// 	 := sync_test.BenchmarkMutexSlack(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC sync_test.BenchmarkMutexSpin has: 
// func benchmarkMutexSpin(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{13068966 0xc006160aa0}))  {
// 	 := sync_test.BenchmarkMutexSpin(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC sync_test.BenchmarkMutexUncontended has: 
// func benchmarkMutexUncontended(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{13067176 0xc00615cf00}))  {
// 	 := sync_test.BenchmarkMutexUncontended(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC sync_test.BenchmarkMutexWork has: 
// func benchmarkMutexWork(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{13067840 0xc00615dd40}))  {
// 	 := sync_test.BenchmarkMutexWork(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC sync_test.BenchmarkMutexWorkSlack has: 
// func benchmarkMutexWorkSlack(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{13067920 0xc00615dec0}))  {
// 	 := sync_test.BenchmarkMutexWorkSlack(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC sync_test.BenchmarkOnce has: 
// func benchmarkOnce(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{13100827 0xc0061e38e0}))  {
// 	 := sync_test.BenchmarkOnce(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC sync_test.BenchmarkPool has: 
// func benchmarkPool(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{13054480 0xc006119e80}))  {
// 	 := sync_test.BenchmarkPool(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC sync_test.BenchmarkPoolOverflow has: 
// func benchmarkPoolOverflow(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{13054625 0xc006120240}))  {
// 	 := sync_test.BenchmarkPoolOverflow(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC sync_test.BenchmarkRWMutexUncontended has: 
// func benchmarkRWMutexUncontended(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{13062733 0xc00613fa60}))  {
// 	 := sync_test.BenchmarkRWMutexUncontended(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC sync_test.BenchmarkRWMutexWorkWrite10 has: 
// func benchmarkRWMutexWorkWrite10(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{13063629 0xc006142c80}))  {
// 	 := sync_test.BenchmarkRWMutexWorkWrite10(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC sync_test.BenchmarkRWMutexWorkWrite100 has: 
// func benchmarkRWMutexWorkWrite100(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{13063546 0xc006142b00}))  {
// 	 := sync_test.BenchmarkRWMutexWorkWrite100(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC sync_test.BenchmarkRWMutexWrite10 has: 
// func benchmarkRWMutexWrite10(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{13063465 0xc006142980}))  {
// 	 := sync_test.BenchmarkRWMutexWrite10(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC sync_test.BenchmarkRWMutexWrite100 has: 
// func benchmarkRWMutexWrite100(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{13063388 0xc006142800}))  {
// 	 := sync_test.BenchmarkRWMutexWrite100(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC sync_test.BenchmarkRange has: 
// func benchmarkRange(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{13086827 0xc0061a0ca0}))  {
// 	 := sync_test.BenchmarkRange(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC sync_test.BenchmarkSemaSyntBlock has: 
// func benchmarkSemaSyntBlock(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{13081998 0xc00618f140}))  {
// 	 := sync_test.BenchmarkSemaSyntBlock(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC sync_test.BenchmarkSemaSyntNonblock has: 
// func benchmarkSemaSyntNonblock(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{13081919 0xc00618efc0}))  {
// 	 := sync_test.BenchmarkSemaSyntNonblock(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC sync_test.BenchmarkSemaUncontended has: 
// func benchmarkSemaUncontended(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{13081092 0xc006183f00}))  {
// 	 := sync_test.BenchmarkSemaUncontended(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC sync_test.BenchmarkSemaWorkBlock has: 
// func benchmarkSemaWorkBlock(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{13082157 0xc00618f440}))  {
// 	 := sync_test.BenchmarkSemaWorkBlock(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC sync_test.BenchmarkSemaWorkNonblock has: 
// func benchmarkSemaWorkNonblock(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{13082079 0xc00618f2c0}))  {
// 	 := sync_test.BenchmarkSemaWorkNonblock(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC sync_test.BenchmarkUncontendedSemaphore has: 
// func benchmarkUncontendedSemaphore(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{13064378 0xc0061438e0}))  {
// 	 := sync_test.BenchmarkUncontendedSemaphore(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC sync_test.BenchmarkWaitGroupActuallyWait has: 
// func benchmarkWaitGroupActuallyWait(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{13110089 0xc006217c60}))  {
// 	 := sync_test.BenchmarkWaitGroupActuallyWait(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC sync_test.BenchmarkWaitGroupAddDone has: 
// func benchmarkWaitGroupAddDone(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{13109507 0xc006217160}))  {
// 	 := sync_test.BenchmarkWaitGroupAddDone(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC sync_test.BenchmarkWaitGroupAddDoneWork has: 
// func benchmarkWaitGroupAddDoneWork(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{13109594 0xc0062172c0}))  {
// 	 := sync_test.BenchmarkWaitGroupAddDoneWork(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC sync_test.BenchmarkWaitGroupUncontended has: 
// func benchmarkWaitGroupUncontended(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{13109005 0xc006216660}))  {
// 	 := sync_test.BenchmarkWaitGroupUncontended(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC sync_test.BenchmarkWaitGroupWait has: 
// func benchmarkWaitGroupWait(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{13109921 0xc0062179a0}))  {
// 	 := sync_test.BenchmarkWaitGroupWait(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC sync_test.BenchmarkWaitGroupWaitWork has: 
// func benchmarkWaitGroupWaitWork(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{13110002 0xc006217b00}))  {
// 	 := sync_test.BenchmarkWaitGroupWaitWork(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC sync_test.ExampleOnce has: 
// func exampleOnce()  {
// 	 := sync_test.ExampleOnce()
// 	...ABEND: TODO...
// }
// 
GO FUNC sync_test.ExamplePool has: 
// func examplePool()  {
// 	 := sync_test.ExamplePool()
// 	...ABEND: TODO...
// }
// 
GO FUNC sync_test.ExampleWaitGroup has: 
// func exampleWaitGroup()  {
// 	 := sync_test.ExampleWaitGroup()
// 	...ABEND: TODO...
// }
// 
GO FUNC sync_test.HammerMutex has: 
// func hammerMutex(m ABEND881(unrecognized Expr type *ast.StarExpr at: &{13064742 Mutex}), loops int, cdone ABEND881(unrecognized Expr type *ast.ChanType at: &{13064767 0 3 bool}))  {
// 	 := sync_test.HammerMutex(m, loops, cdone)
// 	...ABEND: TODO...
// }
// 
GO FUNC sync_test.HammerRWMutex has: 
// func hammerRWMutex(gomaxprocs int, numReaders int, num_iterations int)  {
// 	 := sync_test.HammerRWMutex(gomaxprocs, numReaders, num_iterations)
// 	...ABEND: TODO...
// }
// 
GO FUNC sync_test.HammerSemaphore has: 
// func hammerSemaphore(s ABEND881(unrecognized Expr type *ast.StarExpr at: &{13064011 uint32}), loops int, cdone ABEND881(unrecognized Expr type *ast.ChanType at: &{13064037 0 3 bool}))  {
// 	 := sync_test.HammerSemaphore(s, loops, cdone)
// 	...ABEND: TODO...
// }
// 
GO FUNC sync_test.Log has: 
// func log(w ABEND881(unrecognized Expr type *ast.SelectorExpr at: &{io Writer}), key string, val string)  {
// 	 := sync_test.Log(w, key, val)
// 	...ABEND: TODO...
// }
// 
GO FUNC sync_test.TestConcurrentRange has: 
// func testConcurrentRange(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{13098692 0xc0061d8fe0}))  {
// 	 := sync_test.TestConcurrentRange(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC sync_test.TestCondBroadcast has: 
// func testCondBroadcast(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{13089826 0xc0061b8160}))  {
// 	 := sync_test.TestCondBroadcast(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC sync_test.TestCondCopy has: 
// func testCondCopy(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{13092462 0xc0061bf080}))  {
// 	 := sync_test.TestCondCopy(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC sync_test.TestCondSignal has: 
// func testCondSignal(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{13088765 0xc0061aab80}))  {
// 	 := sync_test.TestCondSignal(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC sync_test.TestCondSignalGenerations has: 
// func testCondSignalGenerations(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{13089389 0xc0061ab780}))  {
// 	 := sync_test.TestCondSignalGenerations(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC sync_test.TestCondSignalStealing has: 
// func testCondSignalStealing(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{13091340 0xc0061be2e0}))  {
// 	 := sync_test.TestCondSignalStealing(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC sync_test.TestMapMatchesDeepCopy has: 
// func testMapMatchesDeepCopy(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{13098555 0xc0061d8d40}))  {
// 	 := sync_test.TestMapMatchesDeepCopy(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC sync_test.TestMapMatchesRWMutex has: 
// func testMapMatchesRWMutex(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{13098416 0xc0061d8aa0}))  {
// 	 := sync_test.TestMapMatchesRWMutex(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC sync_test.TestMutex has: 
// func testMutex(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{13064872 0xc00614c560}))  {
// 	 := sync_test.TestMutex(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC sync_test.TestMutexFairness has: 
// func testMutexFairness(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{13066647 0xc00615c580}))  {
// 	 := sync_test.TestMutexFairness(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC sync_test.TestMutexMisuse has: 
// func testMutexMisuse(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{13066288 0xc00614dea0}))  {
// 	 := sync_test.TestMutexMisuse(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC sync_test.TestOnce has: 
// func testOnce(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{13100291 0xc0061e2e60}))  {
// 	 := sync_test.TestOnce(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC sync_test.TestOncePanic has: 
// func testOncePanic(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{13100559 0xc0061e3480}))  {
// 	 := sync_test.TestOncePanic(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC sync_test.TestParallelReaders has: 
// func testParallelReaders(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{13060298 0xc006138ae0}))  {
// 	 := sync_test.TestParallelReaders(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC sync_test.TestPool has: 
// func testPool(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{13051809 0xc006110c00}))  {
// 	 := sync_test.TestPool(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC sync_test.TestPoolGC has: 
// func testPoolGC(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{13053213 0xc006118460}))  {
// 	 := sync_test.TestPoolGC(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC sync_test.TestPoolNew has: 
// func testPoolNew(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{13052533 0xc006111940}))  {
// 	 := sync_test.TestPoolNew(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC sync_test.TestPoolRelease has: 
// func testPoolRelease(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{13053316 0xc006118600}))  {
// 	 := sync_test.TestPoolRelease(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC sync_test.TestPoolStress has: 
// func testPoolStress(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{13054027 0xc006119500}))  {
// 	 := sync_test.TestPoolStress(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC sync_test.TestRLocker has: 
// func testRLocker(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{13062153 0xc00613f000}))  {
// 	 := sync_test.TestRLocker(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC sync_test.TestRWMutex has: 
// func testRWMutex(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{13061776 0xc00613e6e0}))  {
// 	 := sync_test.TestRWMutex(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC sync_test.TestRace has: 
// func testRace(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{13090651 0xc0061b9220}))  {
// 	 := sync_test.TestRace(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC sync_test.TestSemaphore has: 
// func testSemaphore(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{13064177 0xc006143460}))  {
// 	 := sync_test.TestSemaphore(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC sync_test.TestWaitGroup has: 
// func testWaitGroup(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{13105164 0xc006208bc0}))  {
// 	 := sync_test.TestWaitGroup(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC sync_test.TestWaitGroupAlign has: 
// func testWaitGroupAlign(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{13108833 0xc0062161a0}))  {
// 	 := sync_test.TestWaitGroupAlign(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC sync_test.TestWaitGroupMisuse has: 
// func testWaitGroupMisuse(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{13105501 0xc006209100}))  {
// 	 := sync_test.TestWaitGroupMisuse(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC sync_test.TestWaitGroupMisuse2 has: 
// func testWaitGroupMisuse2(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{13106086 0xc006209940}))  {
// 	 := sync_test.TestWaitGroupMisuse2(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC sync_test.TestWaitGroupMisuse3 has: 
// func testWaitGroupMisuse3(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{13107279 0xc006210b00}))  {
// 	 := sync_test.TestWaitGroupMisuse3(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC sync_test.TestWaitGroupRace has: 
// func testWaitGroupRace(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{13108380 0xc0062118e0}))  {
// 	 := sync_test.TestWaitGroupRace(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC syntax.BenchmarkEmptyOpContext has: 
// func benchmarkEmptyOpContext(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{10932721 0xc0049477a0}))  {
// 	 := syntax.BenchmarkEmptyOpContext(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC syntax.TestAppendRangeCollapse has: 
// func testAppendRangeCollapse(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{10927922 0xc004771c20}))  {
// 	 := syntax.TestAppendRangeCollapse(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC syntax.TestCompile has: 
// func testCompile(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{10932451 0xc0049471a0}))  {
// 	 := syntax.TestCompile(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC syntax.TestFoldConstants has: 
// func testFoldConstants(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{10927574 0xc0047715c0}))  {
// 	 := syntax.TestFoldConstants(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC syntax.TestParseFoldCase has: 
// func testParseFoldCase(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{10923550 0xc004710de0}))  {
// 	 := syntax.TestParseFoldCase(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC syntax.TestParseInvalidRegexps has: 
// func testParseInvalidRegexps(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{10929103 0xc0047989e0}))  {
// 	 := syntax.TestParseInvalidRegexps(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC syntax.TestParseLiteral has: 
// func testParseLiteral(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{10923725 0xc004711000}))  {
// 	 := syntax.TestParseLiteral(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC syntax.TestParseMatchNL has: 
// func testParseMatchNL(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{10923948 0xc004711360}))  {
// 	 := syntax.TestParseMatchNL(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC syntax.TestParseNoMatchNL has: 
// func testParseNoMatchNL(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{10924183 0xc0047116c0}))  {
// 	 := syntax.TestParseNoMatchNL(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC syntax.TestParseSimple has: 
// func testParseSimple(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{10923046 0xc004710900}))  {
// 	 := syntax.TestParseSimple(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC syntax.TestSimplify has: 
// func testSimplify(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{10854592 0xc0028804e0}))  {
// 	 := syntax.TestSimplify(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC syntax.TestToStringEquivalentParse has: 
// func testToStringEquivalentParse(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{10930002 0xc0047999a0}))  {
// 	 := syntax.TestToStringEquivalentParse(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC syscall.Clearenv has: 
// func clearenv()  {
// 	 := syscall.Clearenv()
// 	...ABEND: TODO...
// }
// 
GO FUNC syscall.CloseOnExec has: 
// func closeOnExec(fd int)  {
// 	 := syscall.CloseOnExec(fd)
// 	...ABEND: TODO...
// }
// 
GO FUNC syscall.Exit has: 
// func exit(code int)  {
// 	 := syscall.Exit(code)
// 	...ABEND: TODO...
// }
// 
GO FUNC syscall.Sync has: 
// func sync()  {
// 	 := syscall.Sync()
// 	...ABEND: TODO...
// }
// 
GO FUNC syscall_test.TestAmbientCaps has: 
// func testAmbientCaps(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{13264779 0xc0064c2b00}))  {
// 	 := syscall_test.TestAmbientCaps(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC syscall_test.TestAmbientCapsHelper has: 
// func testAmbientCapsHelper()  {
// 	 := syscall_test.TestAmbientCapsHelper()
// 	...ABEND: TODO...
// }
// 
GO FUNC syscall_test.TestCloneNEWUSERAndRemapNoRootDisableSetgroups has: 
// func testCloneNEWUSERAndRemapNoRootDisableSetgroups(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{13253526 0xc0064a2ee0}))  {
// 	 := syscall_test.TestCloneNEWUSERAndRemapNoRootDisableSetgroups(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC syscall_test.TestCloneNEWUSERAndRemapNoRootSetgroupsEnableSetgroups has: 
// func testCloneNEWUSERAndRemapNoRootSetgroupsEnableSetgroups(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{13253734 0xc0064a3220}))  {
// 	 := syscall_test.TestCloneNEWUSERAndRemapNoRootSetgroupsEnableSetgroups(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC syscall_test.TestCloneNEWUSERAndRemapRootDisableSetgroups has: 
// func testCloneNEWUSERAndRemapRootDisableSetgroups(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{13253196 0xc0064a2960}))  {
// 	 := syscall_test.TestCloneNEWUSERAndRemapRootDisableSetgroups(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC syscall_test.TestCloneNEWUSERAndRemapRootEnableSetgroups has: 
// func testCloneNEWUSERAndRemapRootEnableSetgroups(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{13253360 0xc0064a2c20}))  {
// 	 := syscall_test.TestCloneNEWUSERAndRemapRootEnableSetgroups(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC syscall_test.TestEmptyCredGroupsDisableSetgroups has: 
// func testEmptyCredGroupsDisableSetgroups(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{13254131 0xc0064a37e0}))  {
// 	 := syscall_test.TestEmptyCredGroupsDisableSetgroups(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC syscall_test.TestEnv has: 
// func testEnv(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{13342470 0xc00668eba0}))  {
// 	 := syscall_test.TestEnv(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC syscall_test.TestExecErrPermutedFds has: 
// func testExecErrPermutedFds(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{13343010 0xc00668f400}))  {
// 	 := syscall_test.TestExecErrPermutedFds(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC syscall_test.TestFaccessat has: 
// func testFaccessat(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{13186022 0xc00638fda0}))  {
// 	 := syscall_test.TestFaccessat(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC syscall_test.TestFchmodat has: 
// func testFchmodat(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{13187440 0xc00639f1c0}))  {
// 	 := syscall_test.TestFchmodat(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC syscall_test.TestFcntlFlock has: 
// func testFcntlFlock(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{13236622 0xc00645fd00}))  {
// 	 := syscall_test.TestFcntlFlock(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC syscall_test.TestForeground has: 
// func testForeground(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{13284869 0xc00652ace0}))  {
// 	 := syscall_test.TestForeground(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC syscall_test.TestGettimeofday has: 
// func testGettimeofday(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{13343288 0xc00668fa20}))  {
// 	 := syscall_test.TestGettimeofday(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC syscall_test.TestGroupCleanup has: 
// func testGroupCleanup(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{13256359 0xc0064ad700}))  {
// 	 := syscall_test.TestGroupCleanup(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC syscall_test.TestGroupCleanupUserNamespace has: 
// func testGroupCleanupUserNamespace(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{13257120 0xc0064b0100}))  {
// 	 := syscall_test.TestGroupCleanupUserNamespace(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC syscall_test.TestItoa has: 
// func testItoa(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{13342625 0xc00668ee20}))  {
// 	 := syscall_test.TestItoa(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC syscall_test.TestLinuxDeathSignal has: 
// func testLinuxDeathSignal(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{13188311 0xc0063a0000}))  {
// 	 := syscall_test.TestLinuxDeathSignal(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC syscall_test.TestMain has: 
// func testMain(m ABEND881(unrecognized Expr type *ast.StarExpr at: &{13188034 0xc00639fc00}))  {
// 	 := syscall_test.TestMain(m)
// 	...ABEND: TODO...
// }
// 
GO FUNC syscall_test.TestMmap has: 
// func testMmap(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{13195149 0xc0063b4780}))  {
// 	 := syscall_test.TestMmap(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC syscall_test.TestParseNetlinkMessage has: 
// func testParseNetlinkMessage(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{13191021 0xc0063ab260}))  {
// 	 := syscall_test.TestParseNetlinkMessage(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC syscall_test.TestPassFD has: 
// func testPassFD(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{13238854 0xc00646a140}))  {
// 	 := syscall_test.TestPassFD(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC syscall_test.TestPgid has: 
// func testPgid(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{13283811 0xc006525e80}))  {
// 	 := syscall_test.TestPgid(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC syscall_test.TestRlimit has: 
// func testRlimit(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{13243323 0xc00647ce80}))  {
// 	 := syscall_test.TestRlimit(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC syscall_test.TestSCMCredentials has: 
// func testSCMCredentials(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{13438710 0xc006535d80}))  {
// 	 := syscall_test.TestSCMCredentials(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC syscall_test.TestSeekFailure has: 
// func testSeekFailure(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{13244380 0xc00647df80}))  {
// 	 := syscall_test.TestSeekFailure(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC syscall_test.TestSetpgid has: 
// func testSetpgid(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{13283359 0xc006525780}))  {
// 	 := syscall_test.TestSetpgid(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC syscall_test.TestSyscallNoError has: 
// func testSyscallNoError(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{13192481 0xc0063adec0}))  {
// 	 := syscall_test.TestSyscallNoError(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC syscall_test.TestUnixRightsRoundtrip has: 
// func testUnixRightsRoundtrip(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{13242274 0xc006471be0}))  {
// 	 := syscall_test.TestUnixRightsRoundtrip(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC syscall_test.TestUnshare has: 
// func testUnshare(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{13254326 0xc0064a3ca0}))  {
// 	 := syscall_test.TestUnshare(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC syscall_test.TestUnshareMountNameSpace has: 
// func testUnshareMountNameSpace(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{13258942 0xc0064b17a0}))  {
// 	 := syscall_test.TestUnshareMountNameSpace(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC syscall_test.TestUnshareMountNameSpaceChroot has: 
// func testUnshareMountNameSpaceChroot(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{13260797 0xc0064b2d00}))  {
// 	 := syscall_test.TestUnshareMountNameSpaceChroot(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC syscall_test.TestUnshareMountNameSpaceHelper has: 
// func testUnshareMountNameSpaceHelper()  {
// 	 := syscall_test.TestUnshareMountNameSpaceHelper()
// 	...ABEND: TODO...
// }
// 
GO FUNC syscall_test.TestZeroSysProcAttr has: 
// func testZeroSysProcAttr(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{13283062 0xc0065252a0}))  {
// 	 := syscall_test.TestZeroSysProcAttr(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC syscall_test._ has: 
// func _()  {
// 	 := syscall_test._()
// 	...ABEND: TODO...
// }
// 
GO FUNC syslog.TestConcurrentReconnect has: 
// func testConcurrentReconnect(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{6436838 0xc001850aa0}))  {
// 	 := syslog.TestConcurrentReconnect(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC syslog.TestConcurrentWrite has: 
// func testConcurrentWrite(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{6436339 0xc001850060}))  {
// 	 := syslog.TestConcurrentWrite(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC syslog.TestDial has: 
// func testDial(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{6433967 0xc0028e57c0}))  {
// 	 := syslog.TestDial(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC syslog.TestFlap has: 
// func testFlap(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{6432403 0xc0028e1c40}))  {
// 	 := syslog.TestFlap(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC syslog.TestNew has: 
// func testNew(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{6433205 0xc0028e4c40}))  {
// 	 := syslog.TestNew(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC syslog.TestNewLogger has: 
// func testNewLogger(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{6433688 0xc0028e5300}))  {
// 	 := syslog.TestNewLogger(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC syslog.TestWithSimulated has: 
// func testWithSimulated(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{6431722 0xc0028e0f40}))  {
// 	 := syslog.TestWithSimulated(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC syslog.TestWrite has: 
// func testWrite(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{6435022 0xc0028eaa20}))  {
// 	 := syslog.TestWrite(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC syslog_test.ExampleDial has: 
// func exampleDial()  {
// 	 := syslog_test.ExampleDial()
// 	...ABEND: TODO...
// }
// 
GO FUNC tabwriter_test.BenchmarkPyramid has: 
// func benchmarkPyramid(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{13620179 0xc002d1f640}))  {
// 	 := tabwriter_test.BenchmarkPyramid(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC tabwriter_test.BenchmarkRagged has: 
// func benchmarkRagged(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{13620694 0xc00319ae80}))  {
// 	 := tabwriter_test.BenchmarkRagged(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC tabwriter_test.BenchmarkTable has: 
// func benchmarkTable(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{13619249 0xc003054440}))  {
// 	 := tabwriter_test.BenchmarkTable(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC tabwriter_test.ExampleWriter_Init has: 
// func exampleWriter_Init()  {
// 	 := tabwriter_test.ExampleWriter_Init()
// 	...ABEND: TODO...
// }
// 
GO FUNC tabwriter_test.Example_elastic has: 
// func example_elastic()  {
// 	 := tabwriter_test.Example_elastic()
// 	...ABEND: TODO...
// }
// 
GO FUNC tabwriter_test.Example_trailingTab has: 
// func example_trailingTab()  {
// 	 := tabwriter_test.Example_trailingTab()
// 	...ABEND: TODO...
// }
// 
GO FUNC tabwriter_test.Test has: 
// func test(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{13618163 0xc001264320}))  {
// 	 := tabwriter_test.Test(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC tabwriter_test.TestPanicDuringFlush has: 
// func testPanicDuringFlush(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{13618709 0xc00307caa0}))  {
// 	 := tabwriter_test.TestPanicDuringFlush(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC tabwriter_test.TestPanicDuringWrite has: 
// func testPanicDuringWrite(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{13618955 0xc00307cfe0}))  {
// 	 := tabwriter_test.TestPanicDuringWrite(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC tar.Benchmark has: 
// func benchmark(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{200162 0xc0003ae700}))  {
// 	 := tar.Benchmark(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC tar.TestFileInfoHeader has: 
// func testFileInfoHeader(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{184144 0xc0003765c0}))  {
// 	 := tar.TestFileInfoHeader(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC tar.TestFileInfoHeaderDir has: 
// func testFileInfoHeaderDir(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{184895 0xc000377600}))  {
// 	 := tar.TestFileInfoHeaderDir(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC tar.TestFileInfoHeaderSymlink has: 
// func testFileInfoHeaderSymlink(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{185519 0xc00037e4c0}))  {
// 	 := tar.TestFileInfoHeaderSymlink(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC tar.TestFileReader has: 
// func testFileReader(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{104451 0xc000256da0}))  {
// 	 := tar.TestFileReader(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC tar.TestFileWriter has: 
// func testFileWriter(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{30766 0xc000158920}))  {
// 	 := tar.TestFileWriter(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC tar.TestFitsInBase256 has: 
// func testFitsInBase256(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{136634 0xc0002acda0}))  {
// 	 := tar.TestFitsInBase256(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC tar.TestFitsInOctal has: 
// func testFitsInOctal(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{141645 0xc0002ca540}))  {
// 	 := tar.TestFitsInOctal(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC tar.TestFormatNumeric has: 
// func testFormatNumeric(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{139273 0xc0002c3e00}))  {
// 	 := tar.TestFormatNumeric(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC tar.TestFormatPAXRecord has: 
// func testFormatPAXRecord(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{148825 0xc0002e4300}))  {
// 	 := tar.TestFormatPAXRecord(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC tar.TestFormatPAXTime has: 
// func testFormatPAXTime(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{145670 0xc0002dc9a0}))  {
// 	 := tar.TestFormatPAXTime(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC tar.TestHeaderAllowedFormats has: 
// func testHeaderAllowedFormats(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{191666 0xc000396000}))  {
// 	 := tar.TestHeaderAllowedFormats(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC tar.TestHeaderRoundTrip has: 
// func testHeaderRoundTrip(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{187333 0xc0003849e0}))  {
// 	 := tar.TestHeaderRoundTrip(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC tar.TestIssue12594 has: 
// func testIssue12594(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{28699 0xc00014f1e0}))  {
// 	 := tar.TestIssue12594(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC tar.TestMergePAX has: 
// func testMergePAX(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{91796 0xc0002342c0}))  {
// 	 := tar.TestMergePAX(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC tar.TestParseNumeric has: 
// func testParseNumeric(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{137260 0xc0002adea0}))  {
// 	 := tar.TestParseNumeric(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC tar.TestParsePAX has: 
// func testParsePAX(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{92957 0xc0002355e0}))  {
// 	 := tar.TestParsePAX(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC tar.TestParsePAXRecord has: 
// func testParsePAXRecord(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{146973 0xc0002e05c0}))  {
// 	 := tar.TestParsePAXRecord(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC tar.TestParsePAXTime has: 
// func testParsePAXTime(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{142439 0xc0002cb8e0}))  {
// 	 := tar.TestParsePAXTime(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC tar.TestPartialRead has: 
// func testPartialRead(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{85110 0xc00021a500}))  {
// 	 := tar.TestPartialRead(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC tar.TestPax has: 
// func testPax(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{16848 0xc000128700}))  {
// 	 := tar.TestPax(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC tar.TestPaxHeadersSorted has: 
// func testPaxHeadersSorted(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{21245 0xc000134ec0}))  {
// 	 := tar.TestPaxHeadersSorted(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC tar.TestPaxNonAscii has: 
// func testPaxNonAscii(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{18933 0xc00012e980}))  {
// 	 := tar.TestPaxNonAscii(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC tar.TestPaxSymlink has: 
// func testPaxSymlink(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{17907 0xc000129940}))  {
// 	 := tar.TestPaxSymlink(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC tar.TestPaxXattrs has: 
// func testPaxXattrs(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{20352 0xc00012fec0}))  {
// 	 := tar.TestPaxXattrs(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC tar.TestReadGNUSparsePAXHeaders has: 
// func testReadGNUSparsePAXHeaders(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{98076 0xc000247440}))  {
// 	 := tar.TestReadGNUSparsePAXHeaders(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC tar.TestReadHeaderOnly has: 
// func testReadHeaderOnly(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{90823 0xc00022f0e0}))  {
// 	 := tar.TestReadHeaderOnly(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC tar.TestReadOldGNUSparseMap has: 
// func testReadOldGNUSparseMap(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{94556 0xc00023ab00}))  {
// 	 := tar.TestReadOldGNUSparseMap(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC tar.TestReadTruncation has: 
// func testReadTruncation(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{87076 0xc000222780}))  {
// 	 := tar.TestReadTruncation(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC tar.TestReader has: 
// func testReader(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{65671 0xc0001e5140}))  {
// 	 := tar.TestReader(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC tar.TestRoundTrip has: 
// func testRoundTrip(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{186241 0xc00037f560}))  {
// 	 := tar.TestRoundTrip(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC tar.TestSparseEntries has: 
// func testSparseEntries(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{180705 0xc00036a6e0}))  {
// 	 := tar.TestSparseEntries(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC tar.TestSplitUSTARPath has: 
// func testSplitUSTARPath(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{27328 0xc0001496c0}))  {
// 	 := tar.TestSplitUSTARPath(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC tar.TestUSTARLongName has: 
// func testUSTARLongName(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{22382 0xc00013a3e0}))  {
// 	 := tar.TestUSTARLongName(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC tar.TestUninitializedRead has: 
// func testUninitializedRead(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{86376 0xc00021bc60}))  {
// 	 := tar.TestUninitializedRead(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC tar.TestValidTypeflagWithPAXHeader has: 
// func testValidTypeflagWithPAXHeader(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{23601 0xc00013b1a0}))  {
// 	 := tar.TestValidTypeflagWithPAXHeader(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC tar.TestWriter has: 
// func testWriter(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{2431 0xc00010ab80}))  {
// 	 := tar.TestWriter(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC tar.TestWriterErrors has: 
// func testWriterErrors(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{24534 0xc000144260}))  {
// 	 := tar.TestWriterErrors(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC tar_test.Example_minimal has: 
// func example_minimal()  {
// 	 := tar_test.Example_minimal()
// 	...ABEND: TODO...
// }
// 
GO FUNC template.BenchmarkCSSEscaper has: 
// func benchmarkCSSEscaper(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{5841718 0xc00144a000}))  {
// 	 := template.BenchmarkCSSEscaper(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC template.BenchmarkCSSEscaperNoSpecials has: 
// func benchmarkCSSEscaperNoSpecials(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{5841939 0xc00144b3c0}))  {
// 	 := template.BenchmarkCSSEscaperNoSpecials(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC template.BenchmarkCSSValueFilter has: 
// func benchmarkCSSValueFilter(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{5842532 0xc00113f7e0}))  {
// 	 := template.BenchmarkCSSValueFilter(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC template.BenchmarkCSSValueFilterOk has: 
// func benchmarkCSSValueFilterOk(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{5842667 0xc00113fb60}))  {
// 	 := template.BenchmarkCSSValueFilterOk(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC template.BenchmarkDecodeCSS has: 
// func benchmarkDecodeCSS(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{5842075 0xc00144bbe0}))  {
// 	 := template.BenchmarkDecodeCSS(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC template.BenchmarkDecodeCSSNoSpecials has: 
// func benchmarkDecodeCSSNoSpecials(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{5842360 0xc00113ebc0}))  {
// 	 := template.BenchmarkDecodeCSSNoSpecials(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC template.BenchmarkEscapedExecute has: 
// func benchmarkEscapedExecute(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{5807782 0xc00171fa60}))  {
// 	 := template.BenchmarkEscapedExecute(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC template.BenchmarkHTMLNospaceEscaper has: 
// func benchmarkHTMLNospaceEscaper(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{5812200 0xc00175e100}))  {
// 	 := template.BenchmarkHTMLNospaceEscaper(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC template.BenchmarkHTMLNospaceEscaperNoSpecials has: 
// func benchmarkHTMLNospaceEscaperNoSpecials(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{5812437 0xc00175e320}))  {
// 	 := template.BenchmarkHTMLNospaceEscaperNoSpecials(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC template.BenchmarkJSRegexpEscaper has: 
// func benchmarkJSRegexpEscaper(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{5686074 0xc000b0b5a0}))  {
// 	 := template.BenchmarkJSRegexpEscaper(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC template.BenchmarkJSRegexpEscaperNoSpecials has: 
// func benchmarkJSRegexpEscaperNoSpecials(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{5685928 0xc000c36460}))  {
// 	 := template.BenchmarkJSRegexpEscaperNoSpecials(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC template.BenchmarkJSStrEscaper has: 
// func benchmarkJSStrEscaper(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{5685700 0xc000bd1a20}))  {
// 	 := template.BenchmarkJSStrEscaper(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC template.BenchmarkJSStrEscaperNoSpecials has: 
// func benchmarkJSStrEscaperNoSpecials(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{5685559 0xc000bafcc0}))  {
// 	 := template.BenchmarkJSStrEscaperNoSpecials(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC template.BenchmarkJSValEscaperWithNum has: 
// func benchmarkJSValEscaperWithNum(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{5684576 0xc0007b1840}))  {
// 	 := template.BenchmarkJSValEscaperWithNum(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC template.BenchmarkJSValEscaperWithObj has: 
// func benchmarkJSValEscaperWithObj(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{5685067 0xc0007e80c0}))  {
// 	 := template.BenchmarkJSValEscaperWithObj(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC template.BenchmarkJSValEscaperWithObjNoSpecials has: 
// func benchmarkJSValEscaperWithObjNoSpecials(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{5685357 0xc0007e8a40}))  {
// 	 := template.BenchmarkJSValEscaperWithObjNoSpecials(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC template.BenchmarkJSValEscaperWithStr has: 
// func benchmarkJSValEscaperWithStr(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{5684688 0xc0007b9300}))  {
// 	 := template.BenchmarkJSValEscaperWithStr(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC template.BenchmarkJSValEscaperWithStrNoSpecials has: 
// func benchmarkJSValEscaperWithStrNoSpecials(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{5684920 0xc0007de720}))  {
// 	 := template.BenchmarkJSValEscaperWithStrNoSpecials(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC template.BenchmarkSrcsetFilter has: 
// func benchmarkSrcsetFilter(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{5669620 0xc000bb6d00}))  {
// 	 := template.BenchmarkSrcsetFilter(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC template.BenchmarkSrcsetFilterNoSpecials has: 
// func benchmarkSrcsetFilterNoSpecials(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{5669771 0xc000bb7900}))  {
// 	 := template.BenchmarkSrcsetFilterNoSpecials(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC template.BenchmarkStripTags has: 
// func benchmarkStripTags(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{5812581 0xc00175e540}))  {
// 	 := template.BenchmarkStripTags(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC template.BenchmarkStripTagsNoSpecials has: 
// func benchmarkStripTagsNoSpecials(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{5812800 0xc00175e760}))  {
// 	 := template.BenchmarkStripTagsNoSpecials(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC template.BenchmarkTemplateSpecialTags has: 
// func benchmarkTemplateSpecialTags(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{5757641 0xc00152a660}))  {
// 	 := template.BenchmarkTemplateSpecialTags(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC template.BenchmarkURLEscaper has: 
// func benchmarkURLEscaper(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{5669042 0xc000803000}))  {
// 	 := template.BenchmarkURLEscaper(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC template.BenchmarkURLEscaperNoSpecials has: 
// func benchmarkURLEscaperNoSpecials(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{5669191 0xc000803960}))  {
// 	 := template.BenchmarkURLEscaperNoSpecials(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC template.BenchmarkURLNormalizer has: 
// func benchmarkURLNormalizer(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{5669322 0xc000bb6800}))  {
// 	 := template.BenchmarkURLNormalizer(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC template.BenchmarkURLNormalizerNoSpecials has: 
// func benchmarkURLNormalizerNoSpecials(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{5669476 0xc000bb6a20}))  {
// 	 := template.BenchmarkURLNormalizerNoSpecials(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC template.TestAddParseTreeToUnparsedTemplate has: 
// func testAddParseTreeToUnparsedTemplate(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{13704377 0xc0026fed60}))  {
// 	 := template.TestAddParseTreeToUnparsedTemplate(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC template.TestAddrOfIndex has: 
// func testAddrOfIndex(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{13752037 0xc002794fc0}))  {
// 	 := template.TestAddrOfIndex(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC template.TestAliasedParseTreeDoesNotOverescape has: 
// func testAliasedParseTreeDoesNotOverescape(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{5808778 0xc00173ab60}))  {
// 	 := template.TestAliasedParseTreeDoesNotOverescape(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC template.TestBadFuncNames has: 
// func testBadFuncNames(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{13750014 0xc0023066e0}))  {
// 	 := template.TestBadFuncNames(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC template.TestBlock has: 
// func testBlock(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{13750456 0xc002306d40}))  {
// 	 := template.TestBlock(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC template.TestCSSEscaper has: 
// func testCSSEscaper(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{5839120 0xc000539260}))  {
// 	 := template.TestCSSEscaper(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC template.TestCSSValueFilter has: 
// func testCSSValueFilter(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{5840107 0xc0012a1de0}))  {
// 	 := template.TestCSSValueFilter(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC template.TestCloneCrash has: 
// func testCloneCrash(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{5909296 0xc001f197e0}))  {
// 	 := template.TestCloneCrash(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC template.TestCloneGrowth has: 
// func testCloneGrowth(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{5911700 0xc001f23a40}))  {
// 	 := template.TestCloneGrowth(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC template.TestClonePipe has: 
// func testClonePipe(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{5912532 0xc001457ca0}))  {
// 	 := template.TestClonePipe(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC template.TestCloneRedefinedName has: 
// func testCloneRedefinedName(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{5912109 0xc00153ec20}))  {
// 	 := template.TestCloneRedefinedName(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC template.TestCloneThenParse has: 
// func testCloneThenParse(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{5909579 0xc001f19b40}))  {
// 	 := template.TestCloneThenParse(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC template.TestComparison has: 
// func testComparison(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{13746290 0xc002ce5fa0}))  {
// 	 := template.TestComparison(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC template.TestDecodeCSS has: 
// func testDecodeCSS(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{5837073 0xc000fff600}))  {
// 	 := template.TestDecodeCSS(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC template.TestDelims has: 
// func testDelims(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{13736818 0xc0046e0a20}))  {
// 	 := template.TestDelims(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC template.TestEmptyTemplateCloneCrash has: 
// func testEmptyTemplateCloneCrash(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{13705157 0xc0026ffdc0}))  {
// 	 := template.TestEmptyTemplateCloneCrash(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC template.TestEndsWithCSSKeyword has: 
// func testEndsWithCSSKeyword(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{5835932 0xc000f31b20}))  {
// 	 := template.TestEndsWithCSSKeyword(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC template.TestEnsurePipelineContains has: 
// func testEnsurePipelineContains(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{5799785 0xc00167ee80}))  {
// 	 := template.TestEnsurePipelineContains(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC template.TestErrorOnUndefined has: 
// func testErrorOnUndefined(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{5806248 0xc00171e540}))  {
// 	 := template.TestErrorOnUndefined(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC template.TestErrors has: 
// func testErrors(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{5782337 0xc0015b1520}))  {
// 	 := template.TestErrors(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC template.TestEscape has: 
// func testEscape(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{5758809 0xc00152be80}))  {
// 	 := template.TestEscape(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC template.TestEscapeErrorsNotIgnorable has: 
// func testEscapeErrorsNotIgnorable(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{5802772 0xc0016ddc00}))  {
// 	 := template.TestEscapeErrorsNotIgnorable(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC template.TestEscapeMalformedPipelines has: 
// func testEscapeMalformedPipelines(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{5802348 0xc0016d2ae0}))  {
// 	 := template.TestEscapeMalformedPipelines(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC template.TestEscapeMap has: 
// func testEscapeMap(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{5777498 0xc0015a2060}))  {
// 	 := template.TestEscapeMap(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC template.TestEscapeSet has: 
// func testEscapeSet(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{5778351 0xc0015a2e60}))  {
// 	 := template.TestEscapeSet(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC template.TestEscapeSetErrorsNotIgnorable has: 
// func testEscapeSetErrorsNotIgnorable(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{5803048 0xc0016e7880}))  {
// 	 := template.TestEscapeSetErrorsNotIgnorable(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC template.TestEscapeText has: 
// func testEscapeText(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{5787553 0xc0015f3e00}))  {
// 	 := template.TestEscapeText(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC template.TestEscapersOnLower7AndSelectHighCodepoints has: 
// func testEscapersOnLower7AndSelectHighCodepoints(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{5682244 0xc0008bd200}))  {
// 	 := template.TestEscapersOnLower7AndSelectHighCodepoints(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC template.TestEscapingNilNonemptyInterfaces has: 
// func testEscapingNilNonemptyInterfaces(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{5736429 0xc0014c95e0}))  {
// 	 := template.TestEscapingNilNonemptyInterfaces(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC template.TestExecError has: 
// func testExecError(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{13738637 0xc0048786c0}))  {
// 	 := template.TestExecError(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC template.TestExecute has: 
// func testExecute(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{13736594 0xc00463d840}))  {
// 	 := template.TestExecute(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC template.TestExecuteError has: 
// func testExecuteError(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{13737913 0xc0047fb440}))  {
// 	 := template.TestExecuteError(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC template.TestExecuteGivesExecError has: 
// func testExecuteGivesExecError(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{13748890 0xc0032b53a0}))  {
// 	 := template.TestExecuteGivesExecError(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC template.TestExecuteOnNewTemplate has: 
// func testExecuteOnNewTemplate(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{13741005 0xc001b9a760}))  {
// 	 := template.TestExecuteOnNewTemplate(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC template.TestFinalForPrintf has: 
// func testFinalForPrintf(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{13742395 0xc001b770c0}))  {
// 	 := template.TestFinalForPrintf(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC template.TestFindEndTag has: 
// func testFindEndTag(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{5756649 0xc00151d680}))  {
// 	 := template.TestFindEndTag(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC template.TestFuncMapWorksAfterClone has: 
// func testFuncMapWorksAfterClone(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{5910131 0xc001f22280}))  {
// 	 := template.TestFuncMapWorksAfterClone(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC template.TestGoodFuncNames has: 
// func testGoodFuncNames(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{13749741 0xc002306220}))  {
// 	 := template.TestGoodFuncNames(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC template.TestHTMLNospaceEscaper has: 
// func testHTMLNospaceEscaper(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{5810285 0xc001747920}))  {
// 	 := template.TestHTMLNospaceEscaper(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC template.TestHexDecode has: 
// func testHexDecode(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{5838314 0xc0011267e0}))  {
// 	 := template.TestHexDecode(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC template.TestIdempotentExecute has: 
// func testIdempotentExecute(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{5806551 0xc00171ed00}))  {
// 	 := template.TestIdempotentExecute(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC template.TestIndirectPrint has: 
// func testIndirectPrint(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{5804433 0xc001712920}))  {
// 	 := template.TestIndirectPrint(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC template.TestInterfaceValues has: 
// func testInterfaceValues(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{13752761 0xc0027958a0}))  {
// 	 := template.TestInterfaceValues(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC template.TestIsCSSNmchar has: 
// func testIsCSSNmchar(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{5836487 0xc000f426c0}))  {
// 	 := template.TestIsCSSNmchar(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC template.TestIsJsMimeType has: 
// func testIsJsMimeType(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{5684112 0xc0006f29e0}))  {
// 	 := template.TestIsJsMimeType(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC template.TestIssue19294 has: 
// func testIssue19294(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{13707856 0xc003139260}))  {
// 	 := template.TestIssue19294(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC template.TestJSEscaping has: 
// func testJSEscaping(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{13739107 0xc004881cc0}))  {
// 	 := template.TestJSEscaping(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC template.TestJSRegexpEscaper has: 
// func testJSRegexpEscaper(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{5681241 0xc0009b6f60}))  {
// 	 := template.TestJSRegexpEscaper(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC template.TestJSStrEscaper has: 
// func testJSStrEscaper(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{5679495 0xc0009bd0a0}))  {
// 	 := template.TestJSStrEscaper(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC template.TestJSValEscaper has: 
// func testJSValEscaper(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{5677569 0xc0009e5700}))  {
// 	 := template.TestJSValEscaper(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC template.TestMaxExecDepth has: 
// func testMaxExecDepth(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{13751708 0xc002794480}))  {
// 	 := template.TestMaxExecDepth(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC template.TestMessageForExecuteEmpty has: 
// func testMessageForExecuteEmpty(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{13741474 0xc001b9bb80}))  {
// 	 := template.TestMessageForExecuteEmpty(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC template.TestMissingFieldOnNil has: 
// func testMissingFieldOnNil(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{13751356 0xc002307c20}))  {
// 	 := template.TestMissingFieldOnNil(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC template.TestMissingMapKey has: 
// func testMissingMapKey(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{13746991 0xc00325ef60}))  {
// 	 := template.TestMissingMapKey(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC template.TestMultiExecute has: 
// func testMultiExecute(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{13700582 0xc0036d7aa0}))  {
// 	 := template.TestMultiExecute(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC template.TestMultiParse has: 
// func testMultiParse(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{13698500 0xc00338ae00}))  {
// 	 := template.TestMultiParse(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC template.TestNew has: 
// func testNew(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{13705675 0xc0025b02c0}))  {
// 	 := template.TestNew(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC template.TestNextJsCtx has: 
// func testNextJsCtx(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{5674639 0xc000e66580}))  {
// 	 := template.TestNextJsCtx(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC template.TestOrphanedTemplate has: 
// func testOrphanedTemplate(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{5808046 0xc00171ffc0}))  {
// 	 := template.TestOrphanedTemplate(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC template.TestParse has: 
// func testParse(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{13706348 0xc002bbf720}))  {
// 	 := template.TestParse(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC template.TestParseFiles has: 
// func testParseFiles(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{13700911 0xc003708840}))  {
// 	 := template.TestParseFiles(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC template.TestParseFilesWithData has: 
// func testParseFilesWithData(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{13701985 0xc0014f67c0}))  {
// 	 := template.TestParseFilesWithData(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC template.TestParseGlob has: 
// func testParseGlob(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{13701275 0xc00373da00}))  {
// 	 := template.TestParseGlob(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC template.TestParseGlobWithData has: 
// func testParseGlobWithData(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{13702230 0xc001bcaf40}))  {
// 	 := template.TestParseGlobWithData(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC template.TestPipeToMethodIsEscaped has: 
// func testPipeToMethodIsEscaped(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{5805567 0xc001713b80}))  {
// 	 := template.TestPipeToMethodIsEscaped(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC template.TestRedefinition has: 
// func testRedefinition(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{13704692 0xc0026ff4c0}))  {
// 	 := template.TestRedefinition(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC template.TestRedundantFuncs has: 
// func testRedundantFuncs(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{5803404 0xc0016f2920}))  {
// 	 := template.TestRedundantFuncs(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC template.TestSkipCSSSpace has: 
// func testSkipCSSSpace(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{5838688 0xc001126f40}))  {
// 	 := template.TestSkipCSSSpace(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC template.TestSrcsetFilter has: 
// func testSrcsetFilter(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{5668247 0xc00130a880}))  {
// 	 := template.TestSrcsetFilter(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC template.TestStringer has: 
// func testStringer(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{5735892 0xc0014c80e0}))  {
// 	 := template.TestStringer(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC template.TestStripTags has: 
// func testStripTags(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{5811468 0xc001753760}))  {
// 	 := template.TestStripTags(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC template.TestTemplateCloneExecuteRace has: 
// func testTemplateCloneExecuteRace(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{5910866 0xc001f22d20}))  {
// 	 := template.TestTemplateCloneExecuteRace(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC template.TestTemplateCloneLookup has: 
// func testTemplateCloneLookup(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{5911381 0xc001f23600}))  {
// 	 := template.TestTemplateCloneLookup(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC template.TestTemplateLookUp has: 
// func testTemplateLookUp(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{13705270 0xc0022fc000}))  {
// 	 := template.TestTemplateLookUp(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC template.TestTemplates has: 
// func testTemplates(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{5908562 0xc0010542a0}))  {
// 	 := template.TestTemplates(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC template.TestTree has: 
// func testTree(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{13739967 0xc003480340}))  {
// 	 := template.TestTree(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC template.TestTypedContent has: 
// func testTypedContent(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{5723563 0xc0014909e0}))  {
// 	 := template.TestTypedContent(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC template.TestURLFilters has: 
// func testURLFilters(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{5666781 0xc000d2c9a0}))  {
// 	 := template.TestURLFilters(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC template.TestURLNormalizer has: 
// func testURLNormalizer(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{5666143 0xc000b77340}))  {
// 	 := template.TestURLNormalizer(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC template.TestUnterminatedStringError has: 
// func testUnterminatedStringError(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{13748378 0xc0032b4be0}))  {
// 	 := template.TestUnterminatedStringError(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC template_test.Example has: 
// func example()  {
// 	 := template_test.Example()
// 	...ABEND: TODO...
// }
// 
GO FUNC template_test.ExampleTemplate has: 
// func exampleTemplate()  {
// 	 := template_test.ExampleTemplate()
// 	...ABEND: TODO...
// }
// 
GO FUNC template_test.ExampleTemplate_func has: 
// func exampleTemplate_func()  {
// 	 := template_test.ExampleTemplate_func()
// 	...ABEND: TODO...
// }
// 
GO FUNC template_test.ExampleTemplate_parsefiles has: 
// func exampleTemplate_parsefiles()  {
// 	 := template_test.ExampleTemplate_parsefiles()
// 	...ABEND: TODO...
// }
// 
GO FUNC template_test.Example_autoescaping has: 
// func example_autoescaping()  {
// 	 := template_test.Example_autoescaping()
// 	...ABEND: TODO...
// }
// 
GO FUNC template_test.Example_escape has: 
// func example_escape()  {
// 	 := template_test.Example_escape()
// 	...ABEND: TODO...
// }
// 
GO FUNC template_test.TestRedefineAfterNamedExecution has: 
// func testRedefineAfterNamedExecution(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{5671330 0xc001183cc0}))  {
// 	 := template_test.TestRedefineAfterNamedExecution(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC template_test.TestRedefineAfterNonExecution has: 
// func testRedefineAfterNonExecution(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{5671051 0xc001183720}))  {
// 	 := template_test.TestRedefineAfterNonExecution(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC template_test.TestRedefineEmptyAfterExecution has: 
// func testRedefineEmptyAfterExecution(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{5670856 0xc000f35000}))  {
// 	 := template_test.TestRedefineEmptyAfterExecution(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC template_test.TestRedefineNestedByNameAfterExecution has: 
// func testRedefineNestedByNameAfterExecution(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{5671615 0xc00114d740}))  {
// 	 := template_test.TestRedefineNestedByNameAfterExecution(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC template_test.TestRedefineNestedByTemplateAfterExecution has: 
// func testRedefineNestedByTemplateAfterExecution(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{5671888 0xc0010d0420}))  {
// 	 := template_test.TestRedefineNestedByTemplateAfterExecution(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC template_test.TestRedefineNonEmptyAfterExecution has: 
// func testRedefineNonEmptyAfterExecution(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{5670685 0xc000b94fa0}))  {
// 	 := template_test.TestRedefineNonEmptyAfterExecution(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC template_test.TestRedefineOtherParsers has: 
// func testRedefineOtherParsers(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{5672917 0xc00108cc60}))  {
// 	 := template_test.TestRedefineOtherParsers(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC template_test.TestRedefineSafety has: 
// func testRedefineSafety(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{5672123 0xc00109a640}))  {
// 	 := template_test.TestRedefineSafety(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC template_test.TestRedefineTopUse has: 
// func testRedefineTopUse(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{5672657 0xc00108c6c0}))  {
// 	 := template_test.TestRedefineTopUse(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC template_test.TestTemplateClone has: 
// func testTemplateClone(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{5670165 0xc00162ab80}))  {
// 	 := template_test.TestTemplateClone(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC testing.Main has: 
// func main(matchString ABEND881(unrecognized Expr type *ast.FuncType at: &{13512370 0xc004b57050 0xc004b57080}), tests ABEND881(unrecognized Expr type *ast.ArrayType at: &{13512413 <nil> InternalTest}), benchmarks ABEND881(unrecognized Expr type *ast.ArrayType at: &{13512440 <nil> InternalBenchmark}), examples ABEND881(unrecognized Expr type *ast.ArrayType at: &{13512470 <nil> InternalExample}))  {
// 	 := testing.Main(matchString, tests, benchmarks, examples)
// 	...ABEND: TODO...
// }
// 
GO FUNC testing.RegisterCover has: 
// func registerCover(c Object)  {
// 	 := testing.RegisterCover(c)
// 	...ABEND: TODO...
// }
// 
GO FUNC testing.RunBenchmarks has: 
// func runBenchmarks(matchString ABEND881(unrecognized Expr type *ast.FuncType at: &{13453282 0xc000aed1a0 0xc000aed470}), benchmarks ABEND881(unrecognized Expr type *ast.ArrayType at: &{13453330 <nil> InternalBenchmark}))  {
// 	 := testing.RunBenchmarks(matchString, benchmarks)
// 	...ABEND: TODO...
// }
// 
GO FUNC testing.TestBRun has: 
// func testBRun(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{13537555 T}))  {
// 	 := testing.TestBRun(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC testing.TestBenchmark has: 
// func testBenchmark(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{13543571 T}))  {
// 	 := testing.TestBenchmark(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC testing.TestBenchmarkOutput has: 
// func testBenchmarkOutput(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{13541639 T}))  {
// 	 := testing.TestBenchmarkOutput(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC testing.TestBenchmarkReadMemStatsBeforeFirstRun has: 
// func testBenchmarkReadMemStatsBeforeFirstRun(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{13542069 T}))  {
// 	 := testing.TestBenchmarkReadMemStatsBeforeFirstRun(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC testing.TestBenchmarkStartsFrom1 has: 
// func testBenchmarkStartsFrom1(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{13541861 T}))  {
// 	 := testing.TestBenchmarkStartsFrom1(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC testing.TestIsSpace has: 
// func testIsSpace(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{13462890 T}))  {
// 	 := testing.TestIsSpace(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC testing.TestMatcher has: 
// func testMatcher(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{13464693 T}))  {
// 	 := testing.TestMatcher(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC testing.TestNaming has: 
// func testNaming(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{13466812 T}))  {
// 	 := testing.TestNaming(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC testing.TestParallelSub has: 
// func testParallelSub(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{13542291 T}))  {
// 	 := testing.TestParallelSub(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC testing.TestRacyOutput has: 
// func testRacyOutput(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{13542645 T}))  {
// 	 := testing.TestRacyOutput(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC testing.TestSplitRegexp has: 
// func testSplitRegexp(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{13463117 T}))  {
// 	 := testing.TestSplitRegexp(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC testing.TestTBHelper has: 
// func testTBHelper(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{13472274 T}))  {
// 	 := testing.TestTBHelper(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC testing.TestTBHelperParallel has: 
// func testTBHelperParallel(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{13473151 T}))  {
// 	 := testing.TestTBHelperParallel(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC testing.TestTRun has: 
// func testTRun(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{13529607 T}))  {
// 	 := testing.TestTRun(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC testing.TestTestContext has: 
// func testTestContext(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{13527021 T}))  {
// 	 := testing.TestTestContext(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC testing_test.ExampleB_RunParallel has: 
// func exampleB_RunParallel()  {
// 	 := testing_test.ExampleB_RunParallel()
// 	...ABEND: TODO...
// }
// 
GO FUNC testing_test.TestAllocsPerRun has: 
// func testAllocsPerRun(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{13462380 0xc00170a5c0}))  {
// 	 := testing_test.TestAllocsPerRun(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC testing_test.TestMain has: 
// func testMain(m ABEND881(unrecognized Expr type *ast.StarExpr at: &{13526600 0xc0047c3de0}))  {
// 	 := testing_test.TestMain(m)
// 	...ABEND: TODO...
// }
// 
GO FUNC testing_test.TestRoundDown10 has: 
// func testRoundDown10(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{13474146 0xc004b989e0}))  {
// 	 := testing_test.TestRoundDown10(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC testing_test.TestRoundUp has: 
// func testRoundUp(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{13474603 0xc004b89a00}))  {
// 	 := testing_test.TestRoundUp(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC testing_test.TestRunParallel has: 
// func testRunParallel(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{13474826 0xc004b85ec0}))  {
// 	 := testing_test.TestRunParallel(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC testing_test.TestRunParallelFail has: 
// func testRunParallelFail(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{13475308 0xc004b681c0}))  {
// 	 := testing_test.TestRunParallelFail(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC textproto.BenchmarkReadMIMEHeader has: 
// func benchmarkReadMIMEHeader(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{9857265 0xc004a09940}))  {
// 	 := textproto.BenchmarkReadMIMEHeader(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC textproto.BenchmarkUncommon has: 
// func benchmarkUncommon(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{9857862 0xc004a10520}))  {
// 	 := textproto.BenchmarkUncommon(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC textproto.TestCanonicalMIMEHeaderKey has: 
// func testCanonicalMIMEHeaderKey(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{9847269 0xc0049d5740}))  {
// 	 := textproto.TestCanonicalMIMEHeaderKey(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC textproto.TestCommonHeaders has: 
// func testCommonHeaders(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{9855742 0xc004a09020}))  {
// 	 := textproto.TestCommonHeaders(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC textproto.TestDotWriter has: 
// func testDotWriter(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{9826813 0xc004954ac0}))  {
// 	 := textproto.TestDotWriter(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC textproto.TestLargeReadMIMEHeader has: 
// func testLargeReadMIMEHeader(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{9851029 0xc0049f9e60}))  {
// 	 := textproto.TestLargeReadMIMEHeader(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC textproto.TestPrintfLine has: 
// func testPrintfLine(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{9826582 0xc004954540}))  {
// 	 := textproto.TestPrintfLine(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC textproto.TestRFC959Lines has: 
// func testRFC959Lines(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{9854123 0xc0049ffee0}))  {
// 	 := textproto.TestRFC959Lines(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC textproto.TestReadCodeLine has: 
// func testReadCodeLine(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{9848440 0xc0049f2fa0}))  {
// 	 := textproto.TestReadCodeLine(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC textproto.TestReadContinuedLine has: 
// func testReadContinuedLine(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{9847941 0xc0049f2580}))  {
// 	 := textproto.TestReadContinuedLine(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC textproto.TestReadDotBytes has: 
// func testReadDotBytes(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{9849660 0xc0049f87a0}))  {
// 	 := textproto.TestReadDotBytes(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC textproto.TestReadDotLines has: 
// func testReadDotLines(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{9849186 0xc0049f3f00}))  {
// 	 := textproto.TestReadDotLines(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC textproto.TestReadLine has: 
// func testReadLine(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{9847580 0xc0049d5d80}))  {
// 	 := textproto.TestReadLine(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC textproto.TestReadMIMEHeader has: 
// func testReadMIMEHeader(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{9850130 0xc0049f8f80}))  {
// 	 := textproto.TestReadMIMEHeader(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC textproto.TestReadMIMEHeaderMalformed has: 
// func testReadMIMEHeaderMalformed(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{9852207 0xc0049fed40}))  {
// 	 := textproto.TestReadMIMEHeaderMalformed(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC textproto.TestReadMIMEHeaderNoKey has: 
// func testReadMIMEHeaderNoKey(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{9850766 0xc0049f99a0}))  {
// 	 := textproto.TestReadMIMEHeaderNoKey(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC textproto.TestReadMIMEHeaderNonCompliant has: 
// func testReadMIMEHeaderNonCompliant(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{9851571 0xc0049fe680}))  {
// 	 := textproto.TestReadMIMEHeaderNonCompliant(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC textproto.TestReadMIMEHeaderSingle has: 
// func testReadMIMEHeaderSingle(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{9850512 0xc0049f94e0}))  {
// 	 := textproto.TestReadMIMEHeaderSingle(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC textproto.TestReadMIMEHeaderTrimContinued has: 
// func testReadMIMEHeaderTrimContinued(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{9852866 0xc0049ff2c0}))  {
// 	 := textproto.TestReadMIMEHeaderTrimContinued(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC textproto.TestReadMultiLineError has: 
// func testReadMultiLineError(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{9854633 0xc004a087a0}))  {
// 	 := textproto.TestReadMultiLineError(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC time.CheckRuntimeTimerOverflow has: 
// func checkRuntimeTimerOverflow()  {
// 	 := time.CheckRuntimeTimerOverflow()
// 	...ABEND: TODO...
// }
// 
GO FUNC time.ForceUSPacificForTesting has: 
// func forceUSPacificForTesting()  {
// 	 := time.ForceUSPacificForTesting()
// 	...ABEND: TODO...
// }
// 
GO FUNC time.ResetLocalOnceForTest has: 
// func resetLocalOnceForTest()  {
// 	 := time.ResetLocalOnceForTest()
// 	...ABEND: TODO...
// }
// 
GO FUNC time.ResetZoneinfoForTesting has: 
// func resetZoneinfoForTesting()  {
// 	 := time.ResetZoneinfoForTesting()
// 	...ABEND: TODO...
// }
// 
GO FUNC time.Sleep has: 
// func sleep(d Object)  {
// 	 := time.Sleep(d)
// 	...ABEND: TODO...
// }
// 
GO FUNC time_test.BenchmarkAfter has: 
// func benchmarkAfter(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{13906487 0xc004eeb040}))  {
// 	 := time_test.BenchmarkAfter(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC time_test.BenchmarkAfterFunc has: 
// func benchmarkAfterFunc(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{13906261 0xc004eeab80}))  {
// 	 := time_test.BenchmarkAfterFunc(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC time_test.BenchmarkDay has: 
// func benchmarkDay(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{14039959 0xc005b2dca0}))  {
// 	 := time_test.BenchmarkDay(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC time_test.BenchmarkFormat has: 
// func benchmarkFormat(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{14038822 0xc005afb360}))  {
// 	 := time_test.BenchmarkFormat(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC time_test.BenchmarkFormatNow has: 
// func benchmarkFormatNow(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{14038961 0xc005afbaa0}))  {
// 	 := time_test.BenchmarkFormatNow(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC time_test.BenchmarkHour has: 
// func benchmarkHour(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{14039668 0xc005b27ce0}))  {
// 	 := time_test.BenchmarkHour(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC time_test.BenchmarkMarshalJSON has: 
// func benchmarkMarshalJSON(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{14039195 0xc005b0c400}))  {
// 	 := time_test.BenchmarkMarshalJSON(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC time_test.BenchmarkMarshalText has: 
// func benchmarkMarshalText(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{14039301 0xc005b0cc80}))  {
// 	 := time_test.BenchmarkMarshalText(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC time_test.BenchmarkNow has: 
// func benchmarkNow(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{14038640 0xc005afaee0}))  {
// 	 := time_test.BenchmarkNow(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC time_test.BenchmarkNowUnixNano has: 
// func benchmarkNowUnixNano(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{14038728 0xc005afb100}))  {
// 	 := time_test.BenchmarkNowUnixNano(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC time_test.BenchmarkParse has: 
// func benchmarkParse(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{14039401 0xc005b1aea0}))  {
// 	 := time_test.BenchmarkParse(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC time_test.BenchmarkParseDuration has: 
// func benchmarkParseDuration(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{14039522 0xc005b26600}))  {
// 	 := time_test.BenchmarkParseDuration(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC time_test.BenchmarkReset has: 
// func benchmarkReset(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{13907150 0xc004ef3020}))  {
// 	 := time_test.BenchmarkReset(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC time_test.BenchmarkSecond has: 
// func benchmarkSecond(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{14039766 0xc005b2c6e0}))  {
// 	 := time_test.BenchmarkSecond(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC time_test.BenchmarkSimultaneousAfterFunc has: 
// func benchmarkSimultaneousAfterFunc(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{13906751 0xc004eeb600}))  {
// 	 := time_test.BenchmarkSimultaneousAfterFunc(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC time_test.BenchmarkSleep has: 
// func benchmarkSleep(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{13907302 0xc004efac20}))  {
// 	 := time_test.BenchmarkSleep(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC time_test.BenchmarkStartStop has: 
// func benchmarkStartStop(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{13906930 0xc004eebaa0}))  {
// 	 := time_test.BenchmarkStartStop(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC time_test.BenchmarkStop has: 
// func benchmarkStop(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{13906602 0xc004eeb300}))  {
// 	 := time_test.BenchmarkStop(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC time_test.BenchmarkTicker has: 
// func benchmarkTicker(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{14095521 0xc005f0ea00}))  {
// 	 := time_test.BenchmarkTicker(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC time_test.BenchmarkYear has: 
// func benchmarkYear(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{14039864 0xc005b2ce40}))  {
// 	 := time_test.BenchmarkYear(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC time_test.ExampleAfter has: 
// func exampleAfter()  {
// 	 := time_test.ExampleAfter()
// 	...ABEND: TODO...
// }
// 
GO FUNC time_test.ExampleDate has: 
// func exampleDate()  {
// 	 := time_test.ExampleDate()
// 	...ABEND: TODO...
// }
// 
GO FUNC time_test.ExampleDuration has: 
// func exampleDuration()  {
// 	 := time_test.ExampleDuration()
// 	...ABEND: TODO...
// }
// 
GO FUNC time_test.ExampleDuration_Hours has: 
// func exampleDuration_Hours()  {
// 	 := time_test.ExampleDuration_Hours()
// 	...ABEND: TODO...
// }
// 
GO FUNC time_test.ExampleDuration_Minutes has: 
// func exampleDuration_Minutes()  {
// 	 := time_test.ExampleDuration_Minutes()
// 	...ABEND: TODO...
// }
// 
GO FUNC time_test.ExampleDuration_Nanoseconds has: 
// func exampleDuration_Nanoseconds()  {
// 	 := time_test.ExampleDuration_Nanoseconds()
// 	...ABEND: TODO...
// }
// 
GO FUNC time_test.ExampleDuration_Round has: 
// func exampleDuration_Round()  {
// 	 := time_test.ExampleDuration_Round()
// 	...ABEND: TODO...
// }
// 
GO FUNC time_test.ExampleDuration_Seconds has: 
// func exampleDuration_Seconds()  {
// 	 := time_test.ExampleDuration_Seconds()
// 	...ABEND: TODO...
// }
// 
GO FUNC time_test.ExampleDuration_String has: 
// func exampleDuration_String()  {
// 	 := time_test.ExampleDuration_String()
// 	...ABEND: TODO...
// }
// 
GO FUNC time_test.ExampleDuration_Truncate has: 
// func exampleDuration_Truncate()  {
// 	 := time_test.ExampleDuration_Truncate()
// 	...ABEND: TODO...
// }
// 
GO FUNC time_test.ExampleFixedZone has: 
// func exampleFixedZone()  {
// 	 := time_test.ExampleFixedZone()
// 	...ABEND: TODO...
// }
// 
GO FUNC time_test.ExampleLocation has: 
// func exampleLocation()  {
// 	 := time_test.ExampleLocation()
// 	...ABEND: TODO...
// }
// 
GO FUNC time_test.ExampleMonth has: 
// func exampleMonth()  {
// 	 := time_test.ExampleMonth()
// 	...ABEND: TODO...
// }
// 
GO FUNC time_test.ExampleNewTicker has: 
// func exampleNewTicker()  {
// 	 := time_test.ExampleNewTicker()
// 	...ABEND: TODO...
// }
// 
GO FUNC time_test.ExampleParse has: 
// func exampleParse()  {
// 	 := time_test.ExampleParse()
// 	...ABEND: TODO...
// }
// 
GO FUNC time_test.ExampleParseDuration has: 
// func exampleParseDuration()  {
// 	 := time_test.ExampleParseDuration()
// 	...ABEND: TODO...
// }
// 
GO FUNC time_test.ExampleParseInLocation has: 
// func exampleParseInLocation()  {
// 	 := time_test.ExampleParseInLocation()
// 	...ABEND: TODO...
// }
// 
GO FUNC time_test.ExampleSleep has: 
// func exampleSleep()  {
// 	 := time_test.ExampleSleep()
// 	...ABEND: TODO...
// }
// 
GO FUNC time_test.ExampleTick has: 
// func exampleTick()  {
// 	 := time_test.ExampleTick()
// 	...ABEND: TODO...
// }
// 
GO FUNC time_test.ExampleTime_Add has: 
// func exampleTime_Add()  {
// 	 := time_test.ExampleTime_Add()
// 	...ABEND: TODO...
// }
// 
GO FUNC time_test.ExampleTime_AddDate has: 
// func exampleTime_AddDate()  {
// 	 := time_test.ExampleTime_AddDate()
// 	...ABEND: TODO...
// }
// 
GO FUNC time_test.ExampleTime_After has: 
// func exampleTime_After()  {
// 	 := time_test.ExampleTime_After()
// 	...ABEND: TODO...
// }
// 
GO FUNC time_test.ExampleTime_AppendFormat has: 
// func exampleTime_AppendFormat()  {
// 	 := time_test.ExampleTime_AppendFormat()
// 	...ABEND: TODO...
// }
// 
GO FUNC time_test.ExampleTime_Before has: 
// func exampleTime_Before()  {
// 	 := time_test.ExampleTime_Before()
// 	...ABEND: TODO...
// }
// 
GO FUNC time_test.ExampleTime_Date has: 
// func exampleTime_Date()  {
// 	 := time_test.ExampleTime_Date()
// 	...ABEND: TODO...
// }
// 
GO FUNC time_test.ExampleTime_Day has: 
// func exampleTime_Day()  {
// 	 := time_test.ExampleTime_Day()
// 	...ABEND: TODO...
// }
// 
GO FUNC time_test.ExampleTime_Equal has: 
// func exampleTime_Equal()  {
// 	 := time_test.ExampleTime_Equal()
// 	...ABEND: TODO...
// }
// 
GO FUNC time_test.ExampleTime_Format has: 
// func exampleTime_Format()  {
// 	 := time_test.ExampleTime_Format()
// 	...ABEND: TODO...
// }
// 
GO FUNC time_test.ExampleTime_Round has: 
// func exampleTime_Round()  {
// 	 := time_test.ExampleTime_Round()
// 	...ABEND: TODO...
// }
// 
GO FUNC time_test.ExampleTime_String has: 
// func exampleTime_String()  {
// 	 := time_test.ExampleTime_String()
// 	...ABEND: TODO...
// }
// 
GO FUNC time_test.ExampleTime_Sub has: 
// func exampleTime_Sub()  {
// 	 := time_test.ExampleTime_Sub()
// 	...ABEND: TODO...
// }
// 
GO FUNC time_test.ExampleTime_Truncate has: 
// func exampleTime_Truncate()  {
// 	 := time_test.ExampleTime_Truncate()
// 	...ABEND: TODO...
// }
// 
GO FUNC time_test.ExampleTime_Unix has: 
// func exampleTime_Unix()  {
// 	 := time_test.ExampleTime_Unix()
// 	...ABEND: TODO...
// }
// 
GO FUNC time_test.Test12AMIsMidnight has: 
// func test12AMIsMidnight(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{13993017 0xc00556c260}))  {
// 	 := time_test.Test12AMIsMidnight(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC time_test.Test12PMIsNoon has: 
// func test12PMIsNoon(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{13992632 0xc00554cb00}))  {
// 	 := time_test.Test12PMIsNoon(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC time_test.TestAddDate has: 
// func testAddDate(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{14019905 0xc0058843c0}))  {
// 	 := time_test.TestAddDate(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC time_test.TestAddToExactSecond has: 
// func testAddToExactSecond(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{14020905 0xc005885760}))  {
// 	 := time_test.TestAddToExactSecond(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC time_test.TestAfter has: 
// func testAfter(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{13907505 0xc004f07d40}))  {
// 	 := time_test.TestAfter(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC time_test.TestAfterFunc has: 
// func testAfterFunc(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{13904950 0xc004ee53e0}))  {
// 	 := time_test.TestAfterFunc(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC time_test.TestAfterQueuing has: 
// func testAfterQueuing(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{13908964 0xc004f167e0}))  {
// 	 := time_test.TestAfterQueuing(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC time_test.TestAfterStop has: 
// func testAfterStop(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{13908432 0xc004f0dea0}))  {
// 	 := time_test.TestAfterStop(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC time_test.TestAfterStress has: 
// func testAfterStress(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{13905163 0xc004ee58a0}))  {
// 	 := time_test.TestAfterStress(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC time_test.TestAfterTick has: 
// func testAfterTick(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{13907937 0xc004f0d5e0}))  {
// 	 := time_test.TestAfterTick(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC time_test.TestConcurrentTimerReset has: 
// func testConcurrentTimerReset(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{14041453 0xc005b6f260}))  {
// 	 := time_test.TestConcurrentTimerReset(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC time_test.TestCountMallocs has: 
// func testCountMallocs(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{14029519 0xc0059925a0}))  {
// 	 := time_test.TestCountMallocs(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC time_test.TestDate has: 
// func testDate(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{14019311 0xc0058714e0}))  {
// 	 := time_test.TestDate(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC time_test.TestDaysIn has: 
// func testDaysIn(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{14020534 0xc005885180}))  {
// 	 := time_test.TestDaysIn(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC time_test.TestDefaultLoc has: 
// func testDefaultLoc(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{14038337 0xc005afaa40}))  {
// 	 := time_test.TestDefaultLoc(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC time_test.TestDurationHours has: 
// func testDurationHours(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{14033317 0xc0059d9140}))  {
// 	 := time_test.TestDurationHours(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC time_test.TestDurationMinutes has: 
// func testDurationMinutes(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{14032912 0xc0059d8940}))  {
// 	 := time_test.TestDurationMinutes(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC time_test.TestDurationNanoseconds has: 
// func testDurationNanoseconds(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{14032217 0xc0059c5f60}))  {
// 	 := time_test.TestDurationNanoseconds(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC time_test.TestDurationRound has: 
// func testDurationRound(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{14034925 0xc0059f03a0}))  {
// 	 := time_test.TestDurationRound(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC time_test.TestDurationSeconds has: 
// func testDurationSeconds(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{14032513 0xc0059d4480}))  {
// 	 := time_test.TestDurationSeconds(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC time_test.TestDurationString has: 
// func testDurationString(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{14017247 0xc005838620}))  {
// 	 := time_test.TestDurationString(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC time_test.TestDurationTruncate has: 
// func testDurationTruncate(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{14034019 0xc0059e0060}))  {
// 	 := time_test.TestDurationTruncate(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC time_test.TestEnvVarUsage has: 
// func testEnvVarUsage(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{13914443 0xc0050337c0}))  {
// 	 := time_test.TestEnvVarUsage(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC time_test.TestFirstZone has: 
// func testFirstZone(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{13915726 0xc005100a40}))  {
// 	 := time_test.TestFirstZone(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC time_test.TestFormat has: 
// func testFormat(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{13976164 0xc0053e5880}))  {
// 	 := time_test.TestFormat(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC time_test.TestFormatAndParse has: 
// func testFormatAndParse(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{13988007 0xc005491a80}))  {
// 	 := time_test.TestFormatAndParse(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC time_test.TestFormatSecondsInTimeZone has: 
// func testFormatSecondsInTimeZone(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{13995542 0xc005589de0}))  {
// 	 := time_test.TestFormatSecondsInTimeZone(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC time_test.TestFormatShortYear has: 
// func testFormatShortYear(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{13976805 0xc0053f6440}))  {
// 	 := time_test.TestFormatShortYear(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC time_test.TestFormatSingleDigits has: 
// func testFormatSingleDigits(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{13976514 0xc0053e5e40}))  {
// 	 := time_test.TestFormatSingleDigits(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC time_test.TestHasMonotonicClock has: 
// func testHasMonotonicClock(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{13963501 0xc0052fb360}))  {
// 	 := time_test.TestHasMonotonicClock(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC time_test.TestISOWeek has: 
// func testISOWeek(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{14014246 0xc0057cbfc0}))  {
// 	 := time_test.TestISOWeek(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC time_test.TestInvalidTimeGob has: 
// func testInvalidTimeGob(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{14022578 0xc0058945e0}))  {
// 	 := time_test.TestInvalidTimeGob(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC time_test.TestInvalidTimeJSON has: 
// func testInvalidTimeJSON(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{14024793 0xc00589bb20}))  {
// 	 := time_test.TestInvalidTimeJSON(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC time_test.TestIssue5745 has: 
// func testIssue5745(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{13912859 0xc005032020}))  {
// 	 := time_test.TestIssue5745(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC time_test.TestLoadFixed has: 
// func testLoadFixed(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{14029880 0xc0059a4840}))  {
// 	 := time_test.TestLoadFixed(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC time_test.TestLoadLocationFromTZData has: 
// func testLoadLocationFromTZData(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{13916950 0xc0051b6b60}))  {
// 	 := time_test.TestLoadLocationFromTZData(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC time_test.TestLoadLocationValidatesNames has: 
// func testLoadLocationValidatesNames(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{13914973 0xc005033e80}))  {
// 	 := time_test.TestLoadLocationValidatesNames(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC time_test.TestLoadLocationZipFile has: 
// func testLoadLocationZipFile(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{13985789 0xc00544d620}))  {
// 	 := time_test.TestLoadLocationZipFile(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC time_test.TestLocationNames has: 
// func testLocationNames(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{13916679 0xc0051b66e0}))  {
// 	 := time_test.TestLocationNames(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC time_test.TestLocationRace has: 
// func testLocationRace(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{14029016 0xc005977be0}))  {
// 	 := time_test.TestLocationRace(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC time_test.TestMarshalBinaryZeroTime has: 
// func testMarshalBinaryZeroTime(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{14040066 0xc005b34740}))  {
// 	 := time_test.TestMarshalBinaryZeroTime(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC time_test.TestMidnightIs12AM has: 
// func testMidnightIs12AM(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{13992318 0xc00554c4e0}))  {
// 	 := time_test.TestMidnightIs12AM(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC time_test.TestMinutesInTimeZone has: 
// func testMinutesInTimeZone(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{13993910 0xc005588880}))  {
// 	 := time_test.TestMinutesInTimeZone(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC time_test.TestMissingZone has: 
// func testMissingZone(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{13993540 0xc00557c8c0}))  {
// 	 := time_test.TestMissingZone(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC time_test.TestMonotonicAdd has: 
// func testMonotonicAdd(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{13964816 0xc0053247c0}))  {
// 	 := time_test.TestMonotonicAdd(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC time_test.TestMonotonicOverflow has: 
// func testMonotonicOverflow(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{13968965 0xc005376700}))  {
// 	 := time_test.TestMonotonicOverflow(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC time_test.TestMonotonicString has: 
// func testMonotonicString(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{13970642 0xc0053c0220}))  {
// 	 := time_test.TestMonotonicString(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC time_test.TestMonotonicSub has: 
// func testMonotonicSub(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{13966233 0xc00533efa0}))  {
// 	 := time_test.TestMonotonicSub(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC time_test.TestNanosecondsToLocalTime has: 
// func testNanosecondsToLocalTime(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{14005981 0xc0056d8e60}))  {
// 	 := time_test.TestNanosecondsToLocalTime(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC time_test.TestNanosecondsToUTC has: 
// func testNanosecondsToUTC(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{14005047 0xc0056b0720}))  {
// 	 := time_test.TestNanosecondsToUTC(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC time_test.TestNanosecondsToUTCAndBack has: 
// func testNanosecondsToUTCAndBack(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{14006887 0xc0056ee0a0}))  {
// 	 := time_test.TestNanosecondsToUTCAndBack(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC time_test.TestNewTickerLtZeroDuration has: 
// func testNewTickerLtZeroDuration(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{14095355 0xc005f069c0}))  {
// 	 := time_test.TestNewTickerLtZeroDuration(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC time_test.TestNoonIs12PM has: 
// func testNoonIs12PM(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{13992006 0xc005505ec0}))  {
// 	 := time_test.TestNoonIs12PM(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC time_test.TestNotGobEncodableTime has: 
// func testNotGobEncodableTime(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{14023501 0xc005895960}))  {
// 	 := time_test.TestNotGobEncodableTime(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC time_test.TestNotJSONEncodableTime has: 
// func testNotJSONEncodableTime(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{14025298 0xc0058d0840}))  {
// 	 := time_test.TestNotJSONEncodableTime(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC time_test.TestOverflowRuntimeTimer has: 
// func testOverflowRuntimeTimer(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{13913386 0xc005032760}))  {
// 	 := time_test.TestOverflowRuntimeTimer(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC time_test.TestOverflowSleep has: 
// func testOverflowSleep(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{13912409 0xc004f699e0}))  {
// 	 := time_test.TestOverflowSleep(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC time_test.TestParse has: 
// func testParse(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{13981803 0xc005428260}))  {
// 	 := time_test.TestParse(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC time_test.TestParseDayOutOfRange has: 
// func testParseDayOutOfRange(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{13983145 0xc00542d840}))  {
// 	 := time_test.TestParseDayOutOfRange(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC time_test.TestParseDuration has: 
// func testParseDuration(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{14028280 0xc005917c60}))  {
// 	 := time_test.TestParseDuration(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC time_test.TestParseDurationRoundTrip has: 
// func testParseDurationRoundTrip(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{14028638 0xc00596e460}))  {
// 	 := time_test.TestParseDurationRoundTrip(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC time_test.TestParseErrors has: 
// func testParseErrors(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{13991637 0xc005504040}))  {
// 	 := time_test.TestParseErrors(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC time_test.TestParseInLocation has: 
// func testParseInLocation(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{13984255 0xc005437ba0}))  {
// 	 := time_test.TestParseInLocation(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC time_test.TestParseSecondsInTimeZone has: 
// func testParseSecondsInTimeZone(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{13995069 0xc005589740}))  {
// 	 := time_test.TestParseSecondsInTimeZone(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC time_test.TestParseTimeZone has: 
// func testParseTimeZone(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{13989570 0xc0054b1e80}))  {
// 	 := time_test.TestParseTimeZone(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC time_test.TestRFC3339Conversion has: 
// func testRFC3339Conversion(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{13974785 0xc0053e1720}))  {
// 	 := time_test.TestRFC3339Conversion(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC time_test.TestReadFileLimit has: 
// func testReadFileLimit(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{14040918 0xc005b57880}))  {
// 	 := time_test.TestReadFileLimit(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC time_test.TestReset has: 
// func testReset(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{13911821 0xc004f69300}))  {
// 	 := time_test.TestReset(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC time_test.TestRubyParse has: 
// func testRubyParse(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{13986435 0xc005455d60}))  {
// 	 := time_test.TestRubyParse(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC time_test.TestSecondsToLocalTime has: 
// func testSecondsToLocalTime(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{14005550 0xc0056ca700}))  {
// 	 := time_test.TestSecondsToLocalTime(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC time_test.TestSecondsToUTC has: 
// func testSecondsToUTC(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{14004619 0xc00569d4a0}))  {
// 	 := time_test.TestSecondsToUTC(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC time_test.TestSecondsToUTCAndBack has: 
// func testSecondsToUTCAndBack(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{14006489 0xc0056d9840}))  {
// 	 := time_test.TestSecondsToUTCAndBack(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC time_test.TestSleep has: 
// func testSleep(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{13904449 0xc004ee4d80}))  {
// 	 := time_test.TestSleep(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC time_test.TestSleepZeroDeadlock has: 
// func testSleepZeroDeadlock(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{13910763 0xc004f572c0}))  {
// 	 := time_test.TestSleepZeroDeadlock(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC time_test.TestSub has: 
// func testSub(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{14031855 0xc0059c56c0}))  {
// 	 := time_test.TestSub(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC time_test.TestTeardown has: 
// func testTeardown(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{14094863 0xc005ef3fa0}))  {
// 	 := time_test.TestTeardown(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC time_test.TestTick has: 
// func testTick(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{14095101 0xc005f06420}))  {
// 	 := time_test.TestTick(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC time_test.TestTicker has: 
// func testTicker(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{14094068 0xc005ef31c0}))  {
// 	 := time_test.TestTicker(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC time_test.TestTickerStopWithDirectInitialization has: 
// func testTickerStopWithDirectInitialization(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{14094681 0xc005ef3d00}))  {
// 	 := time_test.TestTickerStopWithDirectInitialization(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC time_test.TestTimeGob has: 
// func testTimeGob(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{14021843 0xc00588f940}))  {
// 	 := time_test.TestTimeGob(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC time_test.TestTimeJSON has: 
// func testTimeJSON(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{14024192 0xc00589b020}))  {
// 	 := time_test.TestTimeJSON(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC time_test.TestTimerStopStress has: 
// func testTimerStopStress(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{13910479 0xc004f56d40}))  {
// 	 := time_test.TestTimerStopStress(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC time_test.TestTruncateRound has: 
// func testTruncateRound(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{14008700 0xc0056f8be0}))  {
// 	 := time_test.TestTruncateRound(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC time_test.TestUnderscoreTwoThousand has: 
// func testUnderscoreTwoThousand(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{13995863 0xc005630440}))  {
// 	 := time_test.TestUnderscoreTwoThousand(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC time_test.TestVersion3 has: 
// func testVersion3(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{13915361 0xc0051005e0}))  {
// 	 := time_test.TestVersion3(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC time_test.TestWeekdayString has: 
// func testWeekdayString(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{14040624 0xc005b4e360}))  {
// 	 := time_test.TestWeekdayString(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC time_test.TestYearDay has: 
// func testYearDay(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{14016426 0xc0057fac80}))  {
// 	 := time_test.TestYearDay(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC time_test.TestZeroMonthString has: 
// func testZeroMonthString(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{14040421 0xc005b354c0}))  {
// 	 := time_test.TestZeroMonthString(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC time_test.TestZeroTimerResetPanics has: 
// func testZeroTimerResetPanics(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{13913878 0xc005032da0}))  {
// 	 := time_test.TestZeroTimerResetPanics(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC time_test.TestZeroTimerStopPanics has: 
// func testZeroTimerStopPanics(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{13913984 0xc005032fa0}))  {
// 	 := time_test.TestZeroTimerStopPanics(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC time_test.TestZoneData has: 
// func testZoneData(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{14002062 0xc00564ba00}))  {
// 	 := time_test.TestZoneData(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC tls.BenchmarkHandshakeServer has: 
// func benchmarkHandshakeServer(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{1957717 0xc00101ece0}))  {
// 	 := tls.BenchmarkHandshakeServer(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC tls.BenchmarkLatency has: 
// func benchmarkLatency(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{1908197 0xc000f83cc0}))  {
// 	 := tls.BenchmarkLatency(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC tls.BenchmarkThroughput has: 
// func benchmarkThroughput(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{1906107 0xc000f79400}))  {
// 	 := tls.BenchmarkThroughput(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC tls.TestAlertFlushing has: 
// func testAlertFlushing(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{1823612 0xc000e54540}))  {
// 	 := tls.TestAlertFlushing(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC tls.TestAlertForwarding has: 
// func testAlertForwarding(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{1934377 0xc000fe0ac0}))  {
// 	 := tls.TestAlertForwarding(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC tls.TestBuffering has: 
// func testBuffering(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{1822967 0xc000e43b00}))  {
// 	 := tls.TestBuffering(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC tls.TestCertificateSelection has: 
// func testCertificateSelection(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{1919328 0xc000fa9560}))  {
// 	 := tls.TestCertificateSelection(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC tls.TestCipherSuiteCertPreferenceECDSA has: 
// func testCipherSuiteCertPreferenceECDSA(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{1953218 0xc001014c80}))  {
// 	 := tls.TestCipherSuiteCertPreferenceECDSA(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC tls.TestCipherSuitePreference has: 
// func testCipherSuitePreference(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{1935799 0xc000fe4580}))  {
// 	 := tls.TestCipherSuitePreference(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC tls.TestClientAuth has: 
// func testClientAuth(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{1961847 0xc00101fc80}))  {
// 	 := tls.TestClientAuth(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC tls.TestClientResumption has: 
// func testClientResumption(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{1803558 0xc000e0e9a0}))  {
// 	 := tls.TestClientResumption(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC tls.TestCloneFuncFields has: 
// func testCloneFuncFields(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{1900923 0xc000f6c1c0}))  {
// 	 := tls.TestCloneFuncFields(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC tls.TestCloneNonFuncFields has: 
// func testCloneNonFuncFields(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{1901836 0xc000f6d1e0}))  {
// 	 := tls.TestCloneNonFuncFields(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC tls.TestClose has: 
// func testClose(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{1934711 0xc000fe1220}))  {
// 	 := tls.TestClose(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC tls.TestCloseClientConnectionOnIdleServer has: 
// func testCloseClientConnectionOnIdleServer(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{1832216 0xc000e66c00}))  {
// 	 := tls.TestCloseClientConnectionOnIdleServer(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC tls.TestCloseServerConnectionOnIdleClient has: 
// func testCloseServerConnectionOnIdleClient(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{1975442 0xc001039b80}))  {
// 	 := tls.TestCloseServerConnectionOnIdleClient(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC tls.TestConnCloseBreakingWrite has: 
// func testConnCloseBreakingWrite(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{1895865 0xc000f54e60}))  {
// 	 := tls.TestConnCloseBreakingWrite(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC tls.TestConnCloseWrite has: 
// func testConnCloseWrite(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{1897409 0xc000f5c9a0}))  {
// 	 := tls.TestConnCloseWrite(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC tls.TestConnReadNonzeroAndEOF has: 
// func testConnReadNonzeroAndEOF(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{1891437 0xc000f46860}))  {
// 	 := tls.TestConnReadNonzeroAndEOF(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC tls.TestConnectionStateMarshal has: 
// func testConnectionStateMarshal(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{1908502 0xc000f88360}))  {
// 	 := tls.TestConnectionStateMarshal(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC tls.TestCrossVersionResume has: 
// func testCrossVersionResume(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{1937612 0xc000fe5ca0}))  {
// 	 := tls.TestCrossVersionResume(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC tls.TestDialTimeout has: 
// func testDialTimeout(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{1890453 0xc000f3f9e0}))  {
// 	 := tls.TestDialTimeout(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC tls.TestDontSelectECDSAWithRSAKey has: 
// func testDontSelectECDSAWithRSAKey(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{1929245 0xc000fd3320}))  {
// 	 := tls.TestDontSelectECDSAWithRSAKey(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC tls.TestDontSelectRSAWithECDSAKey has: 
// func testDontSelectRSAWithECDSAKey(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{1930450 0xc000fd3de0}))  {
// 	 := tls.TestDontSelectRSAWithECDSAKey(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC tls.TestDynamicRecordSizingWithAEAD has: 
// func testDynamicRecordSizingWithAEAD(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{1924239 0xc000fb5140}))  {
// 	 := tls.TestDynamicRecordSizingWithAEAD(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC tls.TestDynamicRecordSizingWithCBC has: 
// func testDynamicRecordSizingWithCBC(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{1924052 0xc000fb4ea0}))  {
// 	 := tls.TestDynamicRecordSizingWithCBC(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC tls.TestDynamicRecordSizingWithStreamCipher has: 
// func testDynamicRecordSizingWithStreamCipher(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{1923870 0xc000fb4c00}))  {
// 	 := tls.TestDynamicRecordSizingWithStreamCipher(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC tls.TestFailedWrite has: 
// func testFailedWrite(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{1822132 0xc000e42e40}))  {
// 	 := tls.TestFailedWrite(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC tls.TestFallbackSCSV has: 
// func testFallbackSCSV(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{1955204 0xc00101a500}))  {
// 	 := tls.TestFallbackSCSV(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC tls.TestFuzz has: 
// func testFuzz(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{1615438 0xc000c368a0}))  {
// 	 := tls.TestFuzz(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC tls.TestGetClientCertificate has: 
// func testGetClientCertificate(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{1828629 0xc000e60b00}))  {
// 	 := tls.TestGetClientCertificate(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC tls.TestGetConfigForClient has: 
// func testGetConfigForClient(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{1966398 0xc00102f900}))  {
// 	 := tls.TestGetConfigForClient(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC tls.TestHairpinInClose has: 
// func testHairpinInClose(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{1924685 0xc000fb5700}))  {
// 	 := tls.TestHairpinInClose(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC tls.TestHandshakClientSCTs has: 
// func testHandshakClientSCTs(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{1810149 0xc000e202a0}))  {
// 	 := tls.TestHandshakClientSCTs(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC tls.TestHandshakeClientAES128CBCSHA256 has: 
// func testHandshakeClientAES128CBCSHA256(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{1799946 0xc000e01aa0}))  {
// 	 := tls.TestHandshakeClientAES128CBCSHA256(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC tls.TestHandshakeClientAES256GCMSHA384 has: 
// func testHandshakeClientAES256GCMSHA384(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{1799636 0xc000e01700}))  {
// 	 := tls.TestHandshakeClientAES256GCMSHA384(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC tls.TestHandshakeClientALPNMatch has: 
// func testHandshakeClientALPNMatch(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{1808894 0xc000e1da20}))  {
// 	 := tls.TestHandshakeClientALPNMatch(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC tls.TestHandshakeClientCertECDSA has: 
// func testHandshakeClientCertECDSA(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{1802832 0xc000e07fa0}))  {
// 	 := tls.TestHandshakeClientCertECDSA(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC tls.TestHandshakeClientCertRSA has: 
// func testHandshakeClientCertRSA(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{1801828 0xc000e07280}))  {
// 	 := tls.TestHandshakeClientCertRSA(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC tls.TestHandshakeClientECDHEECDSAAES has: 
// func testHandshakeClientECDHEECDSAAES(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{1798988 0xc000e00ec0}))  {
// 	 := tls.TestHandshakeClientECDHEECDSAAES(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC tls.TestHandshakeClientECDHEECDSAAES128CBCSHA256 has: 
// func testHandshakeClientECDHEECDSAAES128CBCSHA256(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{1800410 0xc000e060e0}))  {
// 	 := tls.TestHandshakeClientECDHEECDSAAES128CBCSHA256(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC tls.TestHandshakeClientECDHEECDSAAESGCM has: 
// func testHandshakeClientECDHEECDSAAESGCM(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{1799336 0xc000e01360}))  {
// 	 := tls.TestHandshakeClientECDHEECDSAAESGCM(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC tls.TestHandshakeClientECDHEECDSAChaCha20 has: 
// func testHandshakeClientECDHEECDSAChaCha20(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{1801403 0xc000e06d80}))  {
// 	 := tls.TestHandshakeClientECDHEECDSAChaCha20(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC tls.TestHandshakeClientECDHERSAAES has: 
// func testHandshakeClientECDHERSAAES(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{1798712 0xc000e00aa0}))  {
// 	 := tls.TestHandshakeClientECDHERSAAES(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC tls.TestHandshakeClientECDHERSAAES128CBCSHA256 has: 
// func testHandshakeClientECDHERSAAES128CBCSHA256(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{1800167 0xc000e01dc0}))  {
// 	 := tls.TestHandshakeClientECDHERSAAES128CBCSHA256(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC tls.TestHandshakeClientECDHERSAChaCha20 has: 
// func testHandshakeClientECDHERSAChaCha20(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{1801038 0xc000e06900}))  {
// 	 := tls.TestHandshakeClientECDHERSAChaCha20(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC tls.TestHandshakeClientExportKeyingMaterial has: 
// func testHandshakeClientExportKeyingMaterial(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{1813323 0xc000e26b60}))  {
// 	 := tls.TestHandshakeClientExportKeyingMaterial(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC tls.TestHandshakeClientRSAAES128GCM has: 
// func testHandshakeClientRSAAES128GCM(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{1798277 0xc000e00460}))  {
// 	 := tls.TestHandshakeClientRSAAES128GCM(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC tls.TestHandshakeClientRSAAES256GCM has: 
// func testHandshakeClientRSAAES256GCM(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{1798495 0xc000e00780}))  {
// 	 := tls.TestHandshakeClientRSAAES256GCM(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC tls.TestHandshakeClientRSARC4 has: 
// func testHandshakeClientRSARC4(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{1798021 0xc000e00040}))  {
// 	 := tls.TestHandshakeClientRSARC4(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC tls.TestHandshakeClientX25519 has: 
// func testHandshakeClientX25519(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{1800703 0xc000e06480}))  {
// 	 := tls.TestHandshakeClientX25519(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC tls.TestHandshakeRace has: 
// func testHandshakeRace(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{1824778 0xc000e55620}))  {
// 	 := tls.TestHandshakeRace(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC tls.TestHandshakeServerAES256GCMSHA384 has: 
// func testHandshakeServerAES256GCMSHA384(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{1946972 0xc00100a7e0}))  {
// 	 := tls.TestHandshakeServerAES256GCMSHA384(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC tls.TestHandshakeServerAESGCM has: 
// func testHandshakeServerAESGCM(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{1946733 0xc00100a4a0}))  {
// 	 := tls.TestHandshakeServerAESGCM(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC tls.TestHandshakeServerALPN has: 
// func testHandshakeServerALPN(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{1948068 0xc00100b760}))  {
// 	 := tls.TestHandshakeServerALPN(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC tls.TestHandshakeServerALPNNoMatch has: 
// func testHandshakeServerALPNNoMatch(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{1948730 0xc00100bf60}))  {
// 	 := tls.TestHandshakeServerALPNNoMatch(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC tls.TestHandshakeServerECDHEECDSAAES has: 
// func testHandshakeServerECDHEECDSAAES(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{1947219 0xc00100ab20}))  {
// 	 := tls.TestHandshakeServerECDHEECDSAAES(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC tls.TestHandshakeServerEmptyCertificates has: 
// func testHandshakeServerEmptyCertificates(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{1952096 0xc001014240}))  {
// 	 := tls.TestHandshakeServerEmptyCertificates(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC tls.TestHandshakeServerExportKeyingMaterial has: 
// func testHandshakeServerExportKeyingMaterial(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{1955655 0xc00101a9a0}))  {
// 	 := tls.TestHandshakeServerExportKeyingMaterial(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC tls.TestHandshakeServerRSA3DES has: 
// func testHandshakeServerRSA3DES(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{1946196 0xc001005c20}))  {
// 	 := tls.TestHandshakeServerRSA3DES(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC tls.TestHandshakeServerRSAAES has: 
// func testHandshakeServerRSAAES(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{1946466 0xc00100a060}))  {
// 	 := tls.TestHandshakeServerRSAAES(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC tls.TestHandshakeServerRSARC4 has: 
// func testHandshakeServerRSARC4(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{1945902 0xc001005760}))  {
// 	 := tls.TestHandshakeServerRSARC4(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC tls.TestHandshakeServerSNI has: 
// func testHandshakeServerSNI(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{1949631 0xc0010107e0}))  {
// 	 := tls.TestHandshakeServerSNI(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC tls.TestHandshakeServerSNIGetCertificate has: 
// func testHandshakeServerSNIGetCertificate(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{1949999 0xc001010bc0}))  {
// 	 := tls.TestHandshakeServerSNIGetCertificate(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC tls.TestHandshakeServerSNIGetCertificateError has: 
// func testHandshakeServerSNIGetCertificateError(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{1951397 0xc001011b60}))  {
// 	 := tls.TestHandshakeServerSNIGetCertificateError(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC tls.TestHandshakeServerSNIGetCertificateNotFound has: 
// func testHandshakeServerSNIGetCertificateNotFound(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{1950851 0xc0010114e0}))  {
// 	 := tls.TestHandshakeServerSNIGetCertificateNotFound(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC tls.TestHandshakeServerX25519 has: 
// func testHandshakeServerX25519(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{1947732 0xc00100b2c0}))  {
// 	 := tls.TestHandshakeServerX25519(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC tls.TestHostnameInSNI has: 
// func testHostnameInSNI(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{1814355 0xc000e27a40}))  {
// 	 := tls.TestHostnameInSNI(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC tls.TestKeyLog has: 
// func testKeyLog(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{1807566 0xc000e1c500}))  {
// 	 := tls.TestKeyLog(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC tls.TestKeysFromPreMasterSecret has: 
// func testKeysFromPreMasterSecret(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{1840657 0xc000e847e0}))  {
// 	 := tls.TestKeysFromPreMasterSecret(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC tls.TestLRUClientSessionCache has: 
// func testLRUClientSessionCache(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{1806301 0xc000e14c40}))  {
// 	 := tls.TestLRUClientSessionCache(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC tls.TestMarshalUnmarshal has: 
// func testMarshalUnmarshal(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{1614302 0xc000c06380}))  {
// 	 := tls.TestMarshalUnmarshal(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC tls.TestNoCompressionOverlap has: 
// func testNoCompressionOverlap(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{1928268 0xc000fd28e0}))  {
// 	 := tls.TestNoCompressionOverlap(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC tls.TestNoRC4ByDefault has: 
// func testNoRC4ByDefault(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{1928582 0xc000fd2c20}))  {
// 	 := tls.TestNoRC4ByDefault(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC tls.TestNoSuiteOverlap has: 
// func testNoSuiteOverlap(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{1927952 0xc000fd25a0}))  {
// 	 := tls.TestNoSuiteOverlap(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC tls.TestRSAPSSKeyError has: 
// func testRSAPSSKeyError(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{1830245 0xc000e66520}))  {
// 	 := tls.TestRSAPSSKeyError(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC tls.TestRejectBadProtocolVersion has: 
// func testRejectBadProtocolVersion(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{1927758 0xc000fd2300}))  {
// 	 := tls.TestRejectBadProtocolVersion(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC tls.TestRejectEmptySCT has: 
// func testRejectEmptySCT(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{1622035 0xc000cb8ec0}))  {
// 	 := tls.TestRejectEmptySCT(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC tls.TestRejectEmptySCTList has: 
// func testRejectEmptySCTList(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{1620525 0xc000c91080}))  {
// 	 := tls.TestRejectEmptySCTList(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC tls.TestRejectSNIWithTrailingDot has: 
// func testRejectSNIWithTrailingDot(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{1929069 0xc000fd30c0}))  {
// 	 := tls.TestRejectSNIWithTrailingDot(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC tls.TestRemovePadding has: 
// func testRemovePadding(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{1915637 0xc000fa8aa0}))  {
// 	 := tls.TestRemovePadding(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC tls.TestRenegotiateOnce has: 
// func testRenegotiateOnce(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{1811821 0xc000e21900}))  {
// 	 := tls.TestRenegotiateOnce(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC tls.TestRenegotiateTwice has: 
// func testRenegotiateTwice(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{1812157 0xc000e21d80}))  {
// 	 := tls.TestRenegotiateTwice(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC tls.TestRenegotiateTwiceRejected has: 
// func testRenegotiateTwiceRejected(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{1812504 0xc000e26200}))  {
// 	 := tls.TestRenegotiateTwiceRejected(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC tls.TestRenegotiationExtension has: 
// func testRenegotiationExtension(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{1931595 0xc000fd87e0}))  {
// 	 := tls.TestRenegotiationExtension(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC tls.TestRenegotiationRejected has: 
// func testRenegotiationRejected(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{1811125 0xc000e210a0}))  {
// 	 := tls.TestRenegotiationRejected(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC tls.TestResumption has: 
// func testResumption(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{1954008 0xc0010155e0}))  {
// 	 := tls.TestResumption(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC tls.TestResumptionDisabled has: 
// func testResumptionDisabled(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{1954475 0xc001015c80}))  {
// 	 := tls.TestResumptionDisabled(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC tls.TestRoundUp has: 
// func testRoundUp(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{1914719 0xc000f9d460}))  {
// 	 := tls.TestRoundUp(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC tls.TestSCTHandshake has: 
// func testSCTHandshake(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{1936810 0xc000fe51a0}))  {
// 	 := tls.TestSCTHandshake(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC tls.TestSNIGivenOnFailure has: 
// func testSNIGivenOnFailure(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{1963207 0xc001026ca0}))  {
// 	 := tls.TestSNIGivenOnFailure(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC tls.TestServerSelectingUnconfiguredCipherSuite has: 
// func testServerSelectingUnconfiguredCipherSuite(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{1815242 0xc000e2ac00}))  {
// 	 := tls.TestServerSelectingUnconfiguredCipherSuite(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC tls.TestSignatureSelection has: 
// func testSignatureSelection(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{1755841 0xc000d765a0}))  {
// 	 := tls.TestSignatureSelection(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC tls.TestSimpleError has: 
// func testSimpleError(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{1927527 0xc000fd2020}))  {
// 	 := tls.TestSimpleError(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC tls.TestSplitPreMasterSecret has: 
// func testSplitPreMasterSecret(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{1839744 0xc000e7dc40}))  {
// 	 := tls.TestSplitPreMasterSecret(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC tls.TestTLS11SignatureSchemes has: 
// func testTLS11SignatureSchemes(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{1825905 0xc000e5a6a0}))  {
// 	 := tls.TestTLS11SignatureSchemes(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC tls.TestTLS12OnlyCipherSuites has: 
// func testTLS12OnlyCipherSuites(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{1932987 0xc000fd99c0}))  {
// 	 := tls.TestTLS12OnlyCipherSuites(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC tls.TestTLSUniqueMatches has: 
// func testTLSUniqueMatches(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{1893256 0xc000f4e500}))  {
// 	 := tls.TestTLSUniqueMatches(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC tls.TestVerifyHostname has: 
// func testVerifyHostname(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{1894433 0xc000f4f8e0}))  {
// 	 := tls.TestVerifyHostname(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC tls.TestVerifyHostnameResumed has: 
// func testVerifyHostnameResumed(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{1895214 0xc000f54400}))  {
// 	 := tls.TestVerifyHostnameResumed(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC tls.TestVerifyPeerCertificate has: 
// func testVerifyPeerCertificate(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{1816540 0xc000e2bee0}))  {
// 	 := tls.TestVerifyPeerCertificate(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC tls.TestVersion has: 
// func testVersion(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{1935355 0xc000fe1f00}))  {
// 	 := tls.TestVersion(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC tls.TestWarningAlertFlood has: 
// func testWarningAlertFlood(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{1899776 0xc000f66da0}))  {
// 	 := tls.TestWarningAlertFlood(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC tls.TestX509KeyPair has: 
// func testX509KeyPair(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{1888210 0xc000f33900}))  {
// 	 := tls.TestX509KeyPair(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC tls.TestX509KeyPairErrors has: 
// func testX509KeyPairErrors(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{1888686 0xc000f3e2c0}))  {
// 	 := tls.TestX509KeyPairErrors(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC tls.TestX509MixedKeyPair has: 
// func testX509MixedKeyPair(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{1889898 0xc000f3f060}))  {
// 	 := tls.TestX509MixedKeyPair(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC tls_test.ExampleConfig_keyLogWriter has: 
// func exampleConfig_keyLogWriter()  {
// 	 := tls_test.ExampleConfig_keyLogWriter()
// 	...ABEND: TODO...
// }
// 
GO FUNC tls_test.ExampleDial has: 
// func exampleDial()  {
// 	 := tls_test.ExampleDial()
// 	...ABEND: TODO...
// }
// 
GO FUNC tls_test.ExampleLoadX509KeyPair has: 
// func exampleLoadX509KeyPair()  {
// 	 := tls_test.ExampleLoadX509KeyPair()
// 	...ABEND: TODO...
// }
// 
GO FUNC tls_test.ExampleX509KeyPair has: 
// func exampleX509KeyPair()  {
// 	 := tls_test.ExampleX509KeyPair()
// 	...ABEND: TODO...
// }
// 
GO FUNC tls_test.ExampleX509KeyPair_httpServer has: 
// func exampleX509KeyPair_httpServer()  {
// 	 := tls_test.ExampleX509KeyPair_httpServer()
// 	...ABEND: TODO...
// }
// 
GO FUNC token.TestFileSetCacheUnlikely has: 
// func testFileSetCacheUnlikely(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{4963940 0xc002412520}))  {
// 	 := token.TestFileSetCacheUnlikely(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC token.TestFileSetPastEnd has: 
// func testFileSetPastEnd(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{4963696 0xc00240bfa0}))  {
// 	 := token.TestFileSetPastEnd(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC token.TestFileSetRace has: 
// func testFileSetRace(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{4964433 0xc002412dc0}))  {
// 	 := token.TestFileSetRace(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC token.TestFileSetRace2 has: 
// func testFileSetRace2(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{4965021 0xc002413960}))  {
// 	 := token.TestFileSetRace2(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC token.TestFiles has: 
// func testFiles(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{4963083 0xc00240b4c0}))  {
// 	 := token.TestFiles(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC token.TestLineInfo has: 
// func testLineInfo(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{4962423 0xc00240a620}))  {
// 	 := token.TestLineInfo(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC token.TestNoPos has: 
// func testNoPos(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{4958588 0xc0023f9bc0}))  {
// 	 := token.TestNoPos(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC token.TestPositionFor has: 
// func testPositionFor(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{4965373 0xc00241c1a0}))  {
// 	 := token.TestPositionFor(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC token.TestPositions has: 
// func testPositions(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{4960402 0xc002408220}))  {
// 	 := token.TestPositions(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC token.TestSerialization has: 
// func testSerialization(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{4991762 0xc002480480}))  {
// 	 := token.TestSerialization(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC token_test.Example_retrievePositionInfo has: 
// func example_retrievePositionInfo()  {
// 	 := token_test.Example_retrievePositionInfo()
// 	...ABEND: TODO...
// }
// 
GO FUNC trace.Log has: 
// func log(ctx ABEND881(unrecognized Expr type *ast.SelectorExpr at: &{context Context}), category string, message string)  {
// 	 := trace.Log(ctx, category, message)
// 	...ABEND: TODO...
// }
// 
GO FUNC trace.Logf has: 
// func logf(ctx ABEND881(unrecognized Expr type *ast.SelectorExpr at: &{context Context}), category string, format string, args ABEND881(unrecognized Expr type *ast.Ellipsis at: &{12677341 0xc005b2d4a0}))  {
// 	 := trace.Logf(ctx, category, format, args)
// 	...ABEND: TODO...
// }
// 
GO FUNC trace.Stop has: 
// func stop()  {
// 	 := trace.Stop()
// 	...ABEND: TODO...
// }
// 
GO FUNC trace.WithRegion has: 
// func withRegion(ctx ABEND881(unrecognized Expr type *ast.SelectorExpr at: &{context Context}), regionType string, fn ABEND881(unrecognized Expr type *ast.FuncType at: &{12678042 0xc005b29230 <nil>}))  {
// 	 := trace.WithRegion(ctx, regionType, fn)
// 	...ABEND: TODO...
// }
// 
GO FUNC trace_test.BenchmarkNewTask has: 
// func benchmarkNewTask(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{12656199 0xc005aad700}))  {
// 	 := trace_test.BenchmarkNewTask(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC trace_test.BenchmarkStartRegion has: 
// func benchmarkStartRegion(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{12655964 0xc005aad180}))  {
// 	 := trace_test.BenchmarkStartRegion(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC trace_test.Example has: 
// func example()  {
// 	 := trace_test.Example()
// 	...ABEND: TODO...
// }
// 
GO FUNC trace_test.RunMyProgram has: 
// func runMyProgram()  {
// 	 := trace_test.RunMyProgram()
// 	...ABEND: TODO...
// }
// 
GO FUNC trace_test.TestEventBatch has: 
// func testEventBatch(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{12680973 0xc005b35500}))  {
// 	 := trace_test.TestEventBatch(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC trace_test.TestTrace has: 
// func testTrace(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{12683231 0xc005b4b4a0}))  {
// 	 := trace_test.TestTrace(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC trace_test.TestTraceDoubleStart has: 
// func testTraceDoubleStart(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{12682902 0xc005b4af80}))  {
// 	 := trace_test.TestTraceDoubleStart(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC trace_test.TestTraceFutileWakeup has: 
// func testTraceFutileWakeup(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{12690459 0xc005b66ae0}))  {
// 	 := trace_test.TestTraceFutileWakeup(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC trace_test.TestTraceStartStop has: 
// func testTraceStartStop(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{12682432 0xc005b4a760}))  {
// 	 := trace_test.TestTraceStartStop(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC trace_test.TestTraceStress has: 
// func testTraceStress(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{12685080 0xc005b4eda0}))  {
// 	 := trace_test.TestTraceStress(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC trace_test.TestTraceStressStartStop has: 
// func testTraceStressStartStop(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{12687773 0xc005b57b40}))  {
// 	 := trace_test.TestTraceStressStartStop(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC trace_test.TestTraceSymbolize has: 
// func testTraceSymbolize(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{12666775 0xc005b0c540}))  {
// 	 := trace_test.TestTraceSymbolize(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC trace_test.TestUserTaskRegion has: 
// func testUserTaskRegion(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{12656451 0xc005aadcc0}))  {
// 	 := trace_test.TestUserTaskRegion(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC transform_test.ExampleRemoveFunc has: 
// func exampleRemoveFunc()  {
// 	 := transform_test.ExampleRemoveFunc()
// 	...ABEND: TODO...
// }
// 
GO FUNC types.DefPredeclaredTestFuncs has: 
// func defPredeclaredTestFuncs()  {
// 	 := types.DefPredeclaredTestFuncs()
// 	...ABEND: TODO...
// }
// 
GO FUNC types.TestAssignOp has: 
// func testAssignOp(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{5261885 0xc00280bf00}))  {
// 	 := types.TestAssignOp(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC types.TestIsAlias has: 
// func testIsAlias(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{5239262 0xc0027b6480}))  {
// 	 := types.TestIsAlias(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC types.TestZeroTok has: 
// func testZeroTok(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{5261690 0xc00280bb60}))  {
// 	 := types.TestZeroTok(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC types.WriteExpr has: 
// func writeExpr(buf ABEND881(unrecognized Expr type *ast.StarExpr at: &{5433143 0xc002a29160}), x ABEND881(unrecognized Expr type *ast.SelectorExpr at: &{ast Expr}))  {
// 	 := types.WriteExpr(buf, x)
// 	...ABEND: TODO...
// }
// 
GO FUNC types.WriteSignature has: 
// func writeSignature(buf ABEND881(unrecognized Expr type *ast.StarExpr at: &{5207959 0xc002739f00}), sig ABEND881(unrecognized Expr type *ast.StarExpr at: &{5207978 Signature}), qf Object)  {
// 	 := types.WriteSignature(buf, sig, qf)
// 	...ABEND: TODO...
// }
// 
GO FUNC types.WriteType has: 
// func writeType(buf ABEND881(unrecognized Expr type *ast.StarExpr at: &{5202963 0xc002728e00}), typ Object, qf Object)  {
// 	 := types.WriteType(buf, typ, qf)
// 	...ABEND: TODO...
// }
// 
GO FUNC types_test.ExampleInfo has: 
// func exampleInfo()  {
// 	 := types_test.ExampleInfo()
// 	...ABEND: TODO...
// }
// 
GO FUNC types_test.ExampleMethodSet has: 
// func exampleMethodSet()  {
// 	 := types_test.ExampleMethodSet()
// 	...ABEND: TODO...
// }
// 
GO FUNC types_test.ExampleScope has: 
// func exampleScope()  {
// 	 := types_test.ExampleScope()
// 	...ABEND: TODO...
// }
// 
GO FUNC types_test.TestAlignofNaclSlice has: 
// func testAlignofNaclSlice(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{5278559 0xc00283fd80}))  {
// 	 := types_test.TestAlignofNaclSlice(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC types_test.TestBenchmark has: 
// func testBenchmark(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{5313702 0xc0028adc80}))  {
// 	 := types_test.TestBenchmark(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC types_test.TestBuiltinSignatures has: 
// func testBuiltinSignatures(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{5373765 0xc00297cee0}))  {
// 	 := types_test.TestBuiltinSignatures(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC types_test.TestCheck has: 
// func testCheck(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{5229908 0xc002787340}))  {
// 	 := types_test.TestCheck(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC types_test.TestCompositeLitTypes has: 
// func testCompositeLitTypes(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{5421819 0xc002a0bc60}))  {
// 	 := types_test.TestCompositeLitTypes(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC types_test.TestEvalArith has: 
// func testEvalArith(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{5110212 0xc002603a00}))  {
// 	 := types_test.TestEvalArith(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC types_test.TestEvalBasic has: 
// func testEvalBasic(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{5109851 0xc0026031a0}))  {
// 	 := types_test.TestEvalBasic(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC types_test.TestEvalComposite has: 
// func testEvalComposite(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{5110031 0xc0026035e0}))  {
// 	 := types_test.TestEvalComposite(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC types_test.TestEvalPos has: 
// func testEvalPos(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{5110613 0xc002603f20}))  {
// 	 := types_test.TestEvalPos(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC types_test.TestExprString has: 
// func testExprString(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{5359433 0xc002953ac0}))  {
// 	 := types_test.TestExprString(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC types_test.TestFailedImport has: 
// func testFailedImport(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{5424811 0xc002a16a20}))  {
// 	 := types_test.TestFailedImport(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC types_test.TestFiles has: 
// func testFiles(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{5408907 0xc0029e9340}))  {
// 	 := types_test.TestFiles(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC types_test.TestHilbert has: 
// func testHilbert(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{5042461 0xc002543360}))  {
// 	 := types_test.TestHilbert(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC types_test.TestIdentical_issue15173 has: 
// func testIdentical_issue15173(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{5420641 0xc002a0a760}))  {
// 	 := types_test.TestIdentical_issue15173(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC types_test.TestImplicitsInfo has: 
// func testImplicitsInfo(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{5394650 0xc0029c3d20}))  {
// 	 := types_test.TestImplicitsInfo(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC types_test.TestIncompleteInterfaces has: 
// func testIncompleteInterfaces(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{5257398 0xc0027f9540}))  {
// 	 := types_test.TestIncompleteInterfaces(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC types_test.TestInitOrderInfo has: 
// func testInitOrderInfo(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{5404181 0xc0029e26e0}))  {
// 	 := types_test.TestInitOrderInfo(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC types_test.TestIssue13898 has: 
// func testIssue13898(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{5343406 0xc0029228c0}))  {
// 	 := types_test.TestIssue13898(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC types_test.TestIssue15305 has: 
// func testIssue15305(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{5421031 0xc002a0afa0}))  {
// 	 := types_test.TestIssue15305(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC types_test.TestIssue16902 has: 
// func testIssue16902(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{5279027 0xc00284a640}))  {
// 	 := types_test.TestIssue16902(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC types_test.TestIssue22525 has: 
// func testIssue22525(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{5344737 0xc002923a20}))  {
// 	 := types_test.TestIssue22525(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC types_test.TestIssue25627 has: 
// func testIssue25627(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{5345290 0xc0029282c0}))  {
// 	 := types_test.TestIssue25627(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC types_test.TestIssue5770 has: 
// func testIssue5770(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{5338808 0xc00290faa0}))  {
// 	 := types_test.TestIssue5770(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC types_test.TestIssue5849 has: 
// func testIssue5849(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{5339222 0xc002914460}))  {
// 	 := types_test.TestIssue5849(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC types_test.TestIssue6413 has: 
// func testIssue6413(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{5340201 0xc002915500}))  {
// 	 := types_test.TestIssue6413(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC types_test.TestIssue7245 has: 
// func testIssue7245(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{5340830 0xc002918300}))  {
// 	 := types_test.TestIssue7245(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC types_test.TestIssue7827 has: 
// func testIssue7827(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{5341657 0xc002919200}))  {
// 	 := types_test.TestIssue7827(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC types_test.TestIssue8518 has: 
// func testIssue8518(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{5413862 0xc0029f7120}))  {
// 	 := types_test.TestIssue8518(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC types_test.TestLookupFieldOrMethod has: 
// func testLookupFieldOrMethod(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{5414575 0xc0029f7c20}))  {
// 	 := types_test.TestLookupFieldOrMethod(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC types_test.TestMultiFileInitOrder has: 
// func testMultiFileInitOrder(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{5408063 0xc0029e8380}))  {
// 	 := types_test.TestMultiFileInitOrder(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC types_test.TestMultipleSizeUse has: 
// func testMultipleSizeUse(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{5278061 0xc00283f5a0}))  {
// 	 := types_test.TestMultipleSizeUse(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC types_test.TestObjectParents has: 
// func testObjectParents(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{5423405 0xc002a0f7c0}))  {
// 	 := types_test.TestObjectParents(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC types_test.TestPredicatesInfo has: 
// func testPredicatesInfo(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{5397138 0xc0029cbe60}))  {
// 	 := types_test.TestPredicatesInfo(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC types_test.TestQualifiedTypeString has: 
// func testQualifiedTypeString(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{5260249 0xc00280a180}))  {
// 	 := types_test.TestQualifiedTypeString(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC types_test.TestResolveIdents has: 
// func testResolveIdents(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{5038244 0xc002531b40}))  {
// 	 := types_test.TestResolveIdents(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC types_test.TestScopeLookupParent has: 
// func testScopeLookupParent(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{5417026 0xc0029fbca0}))  {
// 	 := types_test.TestScopeLookupParent(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC types_test.TestScopesInfo has: 
// func testScopesInfo(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{5400471 0xc0029d5da0}))  {
// 	 := types_test.TestScopesInfo(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC types_test.TestSelection has: 
// func testSelection(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{5410044 0xc0029f2700}))  {
// 	 := types_test.TestSelection(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC types_test.TestSelf has: 
// func testSelf(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{5313220 0xc0028ad500}))  {
// 	 := types_test.TestSelf(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC types_test.TestStdFixed has: 
// func testStdFixed(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{5379999 0xc002996fa0}))  {
// 	 := types_test.TestStdFixed(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC types_test.TestStdKen has: 
// func testStdKen(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{5381183 0xc002997980}))  {
// 	 := types_test.TestStdKen(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC types_test.TestStdTest has: 
// func testStdTest(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{5379441 0xc002996920}))  {
// 	 := types_test.TestStdTest(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC types_test.TestStdlib has: 
// func testStdlib(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{5377034 0xc002988220}))  {
// 	 := types_test.TestStdlib(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC types_test.TestTypeString has: 
// func testTypeString(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{5256843 0xc0027f8b00}))  {
// 	 := types_test.TestTypeString(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC types_test.TestTypesInfo has: 
// func testTypesInfo(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{5391279 0xc0029c2240}))  {
// 	 := types_test.TestTypesInfo(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC types_test.TestValuesInfo has: 
// func testValuesInfo(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{5385806 0xc0029b8a20}))  {
// 	 := types_test.TestValuesInfo(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC unicode_test.ExampleSimpleFold has: 
// func exampleSimpleFold()  {
// 	 := unicode_test.ExampleSimpleFold()
// 	...ABEND: TODO...
// }
// 
GO FUNC unicode_test.ExampleSpecialCase has: 
// func exampleSpecialCase()  {
// 	 := unicode_test.ExampleSpecialCase()
// 	...ABEND: TODO...
// }
// 
GO FUNC unicode_test.ExampleTo has: 
// func exampleTo()  {
// 	 := unicode_test.ExampleTo()
// 	...ABEND: TODO...
// }
// 
GO FUNC unicode_test.ExampleToLower has: 
// func exampleToLower()  {
// 	 := unicode_test.ExampleToLower()
// 	...ABEND: TODO...
// }
// 
GO FUNC unicode_test.ExampleToTitle has: 
// func exampleToTitle()  {
// 	 := unicode_test.ExampleToTitle()
// 	...ABEND: TODO...
// }
// 
GO FUNC unicode_test.ExampleToUpper has: 
// func exampleToUpper()  {
// 	 := unicode_test.ExampleToUpper()
// 	...ABEND: TODO...
// }
// 
GO FUNC unicode_test.Example_is has: 
// func example_is()  {
// 	 := unicode_test.Example_is()
// 	...ABEND: TODO...
// }
// 
GO FUNC unicode_test.TestCalibrate has: 
// func testCalibrate(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{14110578 0xc006025760}))  {
// 	 := unicode_test.TestCalibrate(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC unicode_test.TestCategories has: 
// func testCategories(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{14332241 0xc0052c7a60}))  {
// 	 := unicode_test.TestCategories(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC unicode_test.TestDigit has: 
// func testDigit(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{14114233 0xc0060b7aa0}))  {
// 	 := unicode_test.TestDigit(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC unicode_test.TestDigitOptimization has: 
// func testDigitOptimization(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{14114562 0xc0060c7e60}))  {
// 	 := unicode_test.TestDigitOptimization(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC unicode_test.TestIsControlLatin1 has: 
// func testIsControlLatin1(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{14115078 0xc0060d5340}))  {
// 	 := unicode_test.TestIsControlLatin1(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC unicode_test.TestIsGraphicLatin1 has: 
// func testIsGraphicLatin1(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{14116496 0xc0060e9560}))  {
// 	 := unicode_test.TestIsGraphicLatin1(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC unicode_test.TestIsLetter has: 
// func testIsLetter(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{14105128 0xc005f854e0}))  {
// 	 := unicode_test.TestIsLetter(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC unicode_test.TestIsLetterLatin1 has: 
// func testIsLetterLatin1(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{14115392 0xc0060ddf20}))  {
// 	 := unicode_test.TestIsLetterLatin1(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC unicode_test.TestIsLowerLatin1 has: 
// func testIsLowerLatin1(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{14115816 0xc0060e8880}))  {
// 	 := unicode_test.TestIsLowerLatin1(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC unicode_test.TestIsPrintLatin1 has: 
// func testIsPrintLatin1(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{14116239 0xc0060e90c0}))  {
// 	 := unicode_test.TestIsPrintLatin1(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC unicode_test.TestIsPunctLatin1 has: 
// func testIsPunctLatin1(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{14116720 0xc0060e9980}))  {
// 	 := unicode_test.TestIsPunctLatin1(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC unicode_test.TestIsSpace has: 
// func testIsSpace(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{14106932 0xc005fc0260}))  {
// 	 := unicode_test.TestIsSpace(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC unicode_test.TestIsSpaceLatin1 has: 
// func testIsSpaceLatin1(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{14116931 0xc0060e9da0}))  {
// 	 := unicode_test.TestIsSpaceLatin1(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC unicode_test.TestIsSymbolLatin1 has: 
// func testIsSymbolLatin1(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{14117149 0xc0060ee1c0}))  {
// 	 := unicode_test.TestIsSymbolLatin1(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC unicode_test.TestIsUpper has: 
// func testIsUpper(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{14105504 0xc005f89260}))  {
// 	 := unicode_test.TestIsUpper(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC unicode_test.TestIsUpperLatin1 has: 
// func testIsUpperLatin1(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{14115605 0xc0060e8460}))  {
// 	 := unicode_test.TestIsUpperLatin1(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC unicode_test.TestLatinOffset has: 
// func testLatinOffset(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{14112396 0xc006070e80}))  {
// 	 := unicode_test.TestLatinOffset(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC unicode_test.TestLetterOptimizations has: 
// func testLetterOptimizations(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{14107317 0xc005fc9a80}))  {
// 	 := unicode_test.TestLetterOptimizations(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC unicode_test.TestNumberLatin1 has: 
// func testNumberLatin1(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{14116026 0xc0060e8ca0}))  {
// 	 := unicode_test.TestNumberLatin1(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC unicode_test.TestProperties has: 
// func testProperties(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{14332738 0xc0052e4400}))  {
// 	 := unicode_test.TestProperties(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC unicode_test.TestScripts has: 
// func testScripts(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{14331610 0xc0052c6d80}))  {
// 	 := unicode_test.TestScripts(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC unicode_test.TestSimpleFold has: 
// func testSimpleFold(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{14109511 0xc006001f60}))  {
// 	 := unicode_test.TestSimpleFold(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC unicode_test.TestSpecialCaseNoMapping has: 
// func testSpecialCaseNoMapping(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{14112800 0xc00607fde0}))  {
// 	 := unicode_test.TestSpecialCaseNoMapping(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC unicode_test.TestTo has: 
// func testTo(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{14106054 0xc005f9a240}))  {
// 	 := unicode_test.TestTo(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC unicode_test.TestToLowerCase has: 
// func testToLowerCase(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{14106484 0xc005fa8d00}))  {
// 	 := unicode_test.TestToLowerCase(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC unicode_test.TestToTitleCase has: 
// func testToTitleCase(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{14106710 0xc005fb49a0}))  {
// 	 := unicode_test.TestToTitleCase(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC unicode_test.TestToUpperCase has: 
// func testToUpperCase(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{14106258 0xc005f9e860}))  {
// 	 := unicode_test.TestToUpperCase(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC unicode_test.TestTurkishCase has: 
// func testTurkishCase(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{14108205 0xc005fec4c0}))  {
// 	 := unicode_test.TestTurkishCase(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC url.BenchmarkString has: 
// func benchmarkString(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{9884077 0xc004a72260}))  {
// 	 := url.BenchmarkString(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC url.TestEncodeQuery has: 
// func testEncodeQuery(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{9892226 0xc004a856c0}))  {
// 	 := url.TestEncodeQuery(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC url.TestGob has: 
// func testGob(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{9912784 0xc004acad60}))  {
// 	 := url.TestGob(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC url.TestInvalidUserPassword has: 
// func testInvalidUserPassword(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{9913695 0xc004acbfc0}))  {
// 	 := url.TestInvalidUserPassword(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC url.TestJSON has: 
// func testJSON(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{9912214 0xc004aca4c0}))  {
// 	 := url.TestJSON(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC url.TestNilUser has: 
// func testNilUser(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{9913172 0xc004acb600}))  {
// 	 := url.TestNilUser(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC url.TestParse has: 
// func testParse(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{9884543 0xc004a72d00}))  {
// 	 := url.TestParse(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC url.TestParseErrors has: 
// func testParseErrors(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{9905056 0xc004aa95a0}))  {
// 	 := url.TestParseErrors(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC url.TestParseFailure has: 
// func testParseFailure(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{9904750 0xc004aa9100}))  {
// 	 := url.TestParseFailure(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC url.TestParseQuery has: 
// func testParseQuery(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{9901964 0xc004aa6880}))  {
// 	 := url.TestParseQuery(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC url.TestParseRequestURI has: 
// func testParseRequestURI(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{9886322 0xc004a76080}))  {
// 	 := url.TestParseRequestURI(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC url.TestPathEscape has: 
// func testPathEscape(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{9891157 0xc004a848a0}))  {
// 	 := url.TestPathEscape(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC url.TestQueryEscape has: 
// func testQueryEscape(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{9890329 0xc004a7fde0}))  {
// 	 := url.TestQueryEscape(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC url.TestQueryValues has: 
// func testQueryValues(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{9900783 0xc004a9f140}))  {
// 	 := url.TestQueryValues(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC url.TestRequestURI has: 
// func testRequestURI(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{9904551 0xc004aa8ca0}))  {
// 	 := url.TestRequestURI(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC url.TestResolvePath has: 
// func testResolvePath(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{9892779 0xc004a88220}))  {
// 	 := url.TestResolvePath(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC url.TestResolveReference has: 
// func testResolveReference(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{9898994 0xc004a9b7c0}))  {
// 	 := url.TestResolveReference(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC url.TestShouldEscape has: 
// func testShouldEscape(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{9908486 0xc004aba660}))  {
// 	 := url.TestShouldEscape(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC url.TestStarRequest has: 
// func testStarRequest(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{9906600 0xc004ab67a0}))  {
// 	 := url.TestStarRequest(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC url.TestURLErrorImplementsNetError has: 
// func testURLErrorImplementsNetError(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{9910701 0xc004ac0740}))  {
// 	 := url.TestURLErrorImplementsNetError(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC url.TestURLHostname has: 
// func testURLHostname(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{9911167 0xc004ac10c0}))  {
// 	 := url.TestURLHostname(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC url.TestURLPort has: 
// func testURLPort(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{9911704 0xc004ac1a40}))  {
// 	 := url.TestURLPort(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC url.TestURLString has: 
// func testURLString(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{9887781 0xc004a77080}))  {
// 	 := url.TestURLString(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC url.TestUnescape has: 
// func testUnescape(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{9889044 0xc004a7e580}))  {
// 	 := url.TestUnescape(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC url_test.ExampleParseQuery has: 
// func exampleParseQuery()  {
// 	 := url_test.ExampleParseQuery()
// 	...ABEND: TODO...
// }
// 
GO FUNC url_test.ExampleURL has: 
// func exampleURL()  {
// 	 := url_test.ExampleURL()
// 	...ABEND: TODO...
// }
// 
GO FUNC url_test.ExampleURL_EscapedPath has: 
// func exampleURL_EscapedPath()  {
// 	 := url_test.ExampleURL_EscapedPath()
// 	...ABEND: TODO...
// }
// 
GO FUNC url_test.ExampleURL_Hostname has: 
// func exampleURL_Hostname()  {
// 	 := url_test.ExampleURL_Hostname()
// 	...ABEND: TODO...
// }
// 
GO FUNC url_test.ExampleURL_IsAbs has: 
// func exampleURL_IsAbs()  {
// 	 := url_test.ExampleURL_IsAbs()
// 	...ABEND: TODO...
// }
// 
GO FUNC url_test.ExampleURL_MarshalBinary has: 
// func exampleURL_MarshalBinary()  {
// 	 := url_test.ExampleURL_MarshalBinary()
// 	...ABEND: TODO...
// }
// 
GO FUNC url_test.ExampleURL_Parse has: 
// func exampleURL_Parse()  {
// 	 := url_test.ExampleURL_Parse()
// 	...ABEND: TODO...
// }
// 
GO FUNC url_test.ExampleURL_Port has: 
// func exampleURL_Port()  {
// 	 := url_test.ExampleURL_Port()
// 	...ABEND: TODO...
// }
// 
GO FUNC url_test.ExampleURL_Query has: 
// func exampleURL_Query()  {
// 	 := url_test.ExampleURL_Query()
// 	...ABEND: TODO...
// }
// 
GO FUNC url_test.ExampleURL_RequestURI has: 
// func exampleURL_RequestURI()  {
// 	 := url_test.ExampleURL_RequestURI()
// 	...ABEND: TODO...
// }
// 
GO FUNC url_test.ExampleURL_ResolveReference has: 
// func exampleURL_ResolveReference()  {
// 	 := url_test.ExampleURL_ResolveReference()
// 	...ABEND: TODO...
// }
// 
GO FUNC url_test.ExampleURL_String has: 
// func exampleURL_String()  {
// 	 := url_test.ExampleURL_String()
// 	...ABEND: TODO...
// }
// 
GO FUNC url_test.ExampleURL_UnmarshalBinary has: 
// func exampleURL_UnmarshalBinary()  {
// 	 := url_test.ExampleURL_UnmarshalBinary()
// 	...ABEND: TODO...
// }
// 
GO FUNC url_test.ExampleURL_roundtrip has: 
// func exampleURL_roundtrip()  {
// 	 := url_test.ExampleURL_roundtrip()
// 	...ABEND: TODO...
// }
// 
GO FUNC url_test.ExampleValues has: 
// func exampleValues()  {
// 	 := url_test.ExampleValues()
// 	...ABEND: TODO...
// }
// 
GO FUNC user.BenchmarkCurrent has: 
// func benchmarkCurrent(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{10242795 0xc0029e2bc0}))  {
// 	 := user.BenchmarkCurrent(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC user.TestCurrent has: 
// func testCurrent(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{10242048 0xc0029d48e0}))  {
// 	 := user.TestCurrent(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC user.TestGroupIds has: 
// func testGroupIds(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{10245114 0xc002aaf480}))  {
// 	 := user.TestGroupIds(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC user.TestLookup has: 
// func testLookup(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{10243382 0xc0029fa060}))  {
// 	 := user.TestLookup(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC user.TestLookupGroup has: 
// func testLookupGroup(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{10244376 0xc002aae720}))  {
// 	 := user.TestLookupGroup(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC user.TestLookupId has: 
// func testLookupId(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{10243930 0xc002a3bf80}))  {
// 	 := user.TestLookupId(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC user.TestNegativeUid has: 
// func testNegativeUid(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{10247578 0xc002ace200}))  {
// 	 := user.TestNegativeUid(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC utf16_test.BenchmarkDecodeRune has: 
// func benchmarkDecodeRune(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{14340793 0xc00544a340}))  {
// 	 := utf16_test.BenchmarkDecodeRune(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC utf16_test.BenchmarkDecodeValidASCII has: 
// func benchmarkDecodeValidASCII(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{14340394 0xc0053fbb00}))  {
// 	 := utf16_test.BenchmarkDecodeValidASCII(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC utf16_test.BenchmarkDecodeValidJapaneseChars has: 
// func benchmarkDecodeValidJapaneseChars(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{14340588 0xc0053fbf40}))  {
// 	 := utf16_test.BenchmarkDecodeValidJapaneseChars(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC utf16_test.BenchmarkEncodeRune has: 
// func benchmarkEncodeRune(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{14341425 0xc00544b140}))  {
// 	 := utf16_test.BenchmarkEncodeRune(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC utf16_test.BenchmarkEncodeValidASCII has: 
// func benchmarkEncodeValidASCII(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{14341153 0xc00544ab00}))  {
// 	 := utf16_test.BenchmarkEncodeValidASCII(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC utf16_test.BenchmarkEncodeValidJapaneseChars has: 
// func benchmarkEncodeValidJapaneseChars(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{14341298 0xc00544ae40}))  {
// 	 := utf16_test.BenchmarkEncodeValidJapaneseChars(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC utf16_test.TestConstants has: 
// func testConstants(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{14336672 0xc0053b7620}))  {
// 	 := utf16_test.TestConstants(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC utf16_test.TestDecode has: 
// func testDecode(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{14338871 0xc0053bbfe0}))  {
// 	 := utf16_test.TestDecode(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC utf16_test.TestDecodeRune has: 
// func testDecodeRune(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{14339316 0xc0053fa8c0}))  {
// 	 := utf16_test.TestDecodeRune(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC utf16_test.TestEncode has: 
// func testEncode(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{14337390 0xc0053ba2a0}))  {
// 	 := utf16_test.TestEncode(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC utf16_test.TestEncodeRune has: 
// func testEncodeRune(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{14337592 0xc0053ba780}))  {
// 	 := utf16_test.TestEncodeRune(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC utf16_test.TestIsSurrogate has: 
// func testIsSurrogate(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{14340179 0xc0053fb6a0}))  {
// 	 := utf16_test.TestIsSurrogate(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC utf8_test.BenchmarkDecodeASCIIRune has: 
// func benchmarkDecodeASCIIRune(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{14358596 0xc0056e30e0}))  {
// 	 := utf8_test.BenchmarkDecodeASCIIRune(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC utf8_test.BenchmarkDecodeJapaneseRune has: 
// func benchmarkDecodeJapaneseRune(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{14358713 0xc0056e3380}))  {
// 	 := utf8_test.BenchmarkDecodeJapaneseRune(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC utf8_test.BenchmarkEncodeASCIIRune has: 
// func benchmarkEncodeASCIIRune(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{14358327 0xc0056e2aa0}))  {
// 	 := utf8_test.BenchmarkEncodeASCIIRune(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC utf8_test.BenchmarkEncodeJapaneseRune has: 
// func benchmarkEncodeJapaneseRune(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{14358462 0xc0056e2dc0}))  {
// 	 := utf8_test.BenchmarkEncodeJapaneseRune(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC utf8_test.BenchmarkFullASCIIRune has: 
// func benchmarkFullASCIIRune(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{14358835 0xc0056e3620}))  {
// 	 := utf8_test.BenchmarkFullASCIIRune(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC utf8_test.BenchmarkFullJapaneseRune has: 
// func benchmarkFullJapaneseRune(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{14358948 0xc0056e38c0}))  {
// 	 := utf8_test.BenchmarkFullJapaneseRune(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC utf8_test.BenchmarkRuneCountInStringTenASCIIChars has: 
// func benchmarkRuneCountInStringTenASCIIChars(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{14357539 0xc0056d7ce0}))  {
// 	 := utf8_test.BenchmarkRuneCountInStringTenASCIIChars(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC utf8_test.BenchmarkRuneCountInStringTenJapaneseChars has: 
// func benchmarkRuneCountInStringTenJapaneseChars(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{14357671 0xc0056d7f00}))  {
// 	 := utf8_test.BenchmarkRuneCountInStringTenJapaneseChars(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC utf8_test.BenchmarkRuneCountTenASCIIChars has: 
// func benchmarkRuneCountTenASCIIChars(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{14357250 0xc0056d77a0}))  {
// 	 := utf8_test.BenchmarkRuneCountTenASCIIChars(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC utf8_test.BenchmarkRuneCountTenJapaneseChars has: 
// func benchmarkRuneCountTenJapaneseChars(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{14357382 0xc0056d7a40}))  {
// 	 := utf8_test.BenchmarkRuneCountTenJapaneseChars(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC utf8_test.BenchmarkValidStringTenASCIIChars has: 
// func benchmarkValidStringTenASCIIChars(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{14358079 0xc0056e2660}))  {
// 	 := utf8_test.BenchmarkValidStringTenASCIIChars(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC utf8_test.BenchmarkValidStringTenJapaneseChars has: 
// func benchmarkValidStringTenJapaneseChars(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{14358199 0xc0056e2880}))  {
// 	 := utf8_test.BenchmarkValidStringTenJapaneseChars(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC utf8_test.BenchmarkValidTenASCIIChars has: 
// func benchmarkValidTenASCIIChars(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{14357808 0xc0056e2120}))  {
// 	 := utf8_test.BenchmarkValidTenASCIIChars(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC utf8_test.BenchmarkValidTenJapaneseChars has: 
// func benchmarkValidTenJapaneseChars(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{14357932 0xc0056e23c0}))  {
// 	 := utf8_test.BenchmarkValidTenJapaneseChars(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC utf8_test.ExampleDecodeLastRune has: 
// func exampleDecodeLastRune()  {
// 	 := utf8_test.ExampleDecodeLastRune()
// 	...ABEND: TODO...
// }
// 
GO FUNC utf8_test.ExampleDecodeLastRuneInString has: 
// func exampleDecodeLastRuneInString()  {
// 	 := utf8_test.ExampleDecodeLastRuneInString()
// 	...ABEND: TODO...
// }
// 
GO FUNC utf8_test.ExampleDecodeRune has: 
// func exampleDecodeRune()  {
// 	 := utf8_test.ExampleDecodeRune()
// 	...ABEND: TODO...
// }
// 
GO FUNC utf8_test.ExampleDecodeRuneInString has: 
// func exampleDecodeRuneInString()  {
// 	 := utf8_test.ExampleDecodeRuneInString()
// 	...ABEND: TODO...
// }
// 
GO FUNC utf8_test.ExampleEncodeRune has: 
// func exampleEncodeRune()  {
// 	 := utf8_test.ExampleEncodeRune()
// 	...ABEND: TODO...
// }
// 
GO FUNC utf8_test.ExampleFullRune has: 
// func exampleFullRune()  {
// 	 := utf8_test.ExampleFullRune()
// 	...ABEND: TODO...
// }
// 
GO FUNC utf8_test.ExampleFullRuneInString has: 
// func exampleFullRuneInString()  {
// 	 := utf8_test.ExampleFullRuneInString()
// 	...ABEND: TODO...
// }
// 
GO FUNC utf8_test.ExampleRuneCount has: 
// func exampleRuneCount()  {
// 	 := utf8_test.ExampleRuneCount()
// 	...ABEND: TODO...
// }
// 
GO FUNC utf8_test.ExampleRuneCountInString has: 
// func exampleRuneCountInString()  {
// 	 := utf8_test.ExampleRuneCountInString()
// 	...ABEND: TODO...
// }
// 
GO FUNC utf8_test.ExampleRuneLen has: 
// func exampleRuneLen()  {
// 	 := utf8_test.ExampleRuneLen()
// 	...ABEND: TODO...
// }
// 
GO FUNC utf8_test.ExampleRuneStart has: 
// func exampleRuneStart()  {
// 	 := utf8_test.ExampleRuneStart()
// 	...ABEND: TODO...
// }
// 
GO FUNC utf8_test.ExampleValid has: 
// func exampleValid()  {
// 	 := utf8_test.ExampleValid()
// 	...ABEND: TODO...
// }
// 
GO FUNC utf8_test.ExampleValidRune has: 
// func exampleValidRune()  {
// 	 := utf8_test.ExampleValidRune()
// 	...ABEND: TODO...
// }
// 
GO FUNC utf8_test.ExampleValidString has: 
// func exampleValidString()  {
// 	 := utf8_test.ExampleValidString()
// 	...ABEND: TODO...
// }
// 
GO FUNC utf8_test.TestConstants has: 
// func testConstants(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{14345152 0xc0054a3300}))  {
// 	 := utf8_test.TestConstants(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC utf8_test.TestDecodeInvalidSequence has: 
// func testDecodeInvalidSequence(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{14352233 0xc005525be0}))  {
// 	 := utf8_test.TestDecodeInvalidSequence(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC utf8_test.TestDecodeRune has: 
// func testDecodeRune(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{14347823 0xc0054b9aa0}))  {
// 	 := utf8_test.TestDecodeRune(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC utf8_test.TestDecodeSurrogateRune has: 
// func testDecodeSurrogateRune(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{14349596 0xc0054d3a00}))  {
// 	 := utf8_test.TestDecodeSurrogateRune(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC utf8_test.TestEncodeRune has: 
// func testEncodeRune(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{14347574 0xc0054b9460}))  {
// 	 := utf8_test.TestEncodeRune(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC utf8_test.TestFullRune has: 
// func testFullRune(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{14346854 0xc0054b87a0}))  {
// 	 := utf8_test.TestFullRune(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC utf8_test.TestNegativeRune has: 
// func testNegativeRune(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{14354414 0xc00556a0c0}))  {
// 	 := utf8_test.TestNegativeRune(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC utf8_test.TestRuneCount has: 
// func testRuneCount(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{14354917 0xc00556aa00}))  {
// 	 := utf8_test.TestRuneCount(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC utf8_test.TestRuneLen has: 
// func testRuneLen(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{14355468 0xc00556b6a0}))  {
// 	 := utf8_test.TestRuneLen(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC utf8_test.TestRuntimeConversion has: 
// func testRuntimeConversion(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{14350638 0xc005524900}))  {
// 	 := utf8_test.TestRuntimeConversion(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC utf8_test.TestSequencing has: 
// func testSequencing(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{14350095 0xc0055241e0}))  {
// 	 := utf8_test.TestSequencing(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC utf8_test.TestValid has: 
// func testValid(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{14356467 0xc0056d6660}))  {
// 	 := utf8_test.TestValid(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC utf8_test.TestValidRune has: 
// func testValidRune(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{14357047 0xc0056d7380}))  {
// 	 := utf8_test.TestValidRune(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC x509.TestASN1BitLength has: 
// func testASN1BitLength(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{2342495 0xc0001a9aa0}))  {
// 	 := x509.TestASN1BitLength(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC x509.TestAdditionFieldsInGeneralSubtree has: 
// func testAdditionFieldsInGeneralSubtree(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{2364301 0xc000822ec0}))  {
// 	 := x509.TestAdditionFieldsInGeneralSubtree(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC x509.TestBadIPMask has: 
// func testBadIPMask(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{2361459 0xc0008228a0}))  {
// 	 := x509.TestBadIPMask(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC x509.TestBadNamesInConstraints has: 
// func testBadNamesInConstraints(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{2056100 0xc001113a00}))  {
// 	 := x509.TestBadNamesInConstraints(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC x509.TestBadNamesInSANs has: 
// func testBadNamesInSANs(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{2057448 0xc00111ac60}))  {
// 	 := x509.TestBadNamesInSANs(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC x509.TestCRLCreation has: 
// func testCRLCreation(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{2323151 0xc0008fa080}))  {
// 	 := x509.TestCRLCreation(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC x509.TestCRLWithoutExpiry has: 
// func testCRLWithoutExpiry(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{2325201 0xc000a94220}))  {
// 	 := x509.TestCRLWithoutExpiry(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC x509.TestCertificateParse has: 
// func testCertificateParse(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{2294769 0xc00111a100}))  {
// 	 := x509.TestCertificateParse(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC x509.TestCertificateRequestOverrides has: 
// func testCertificateRequestOverrides(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{2335052 0xc000bd3c60}))  {
// 	 := x509.TestCertificateRequestOverrides(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC x509.TestConstraintCases has: 
// func testConstraintCases(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{2048988 0xc0011014e0}))  {
// 	 := x509.TestConstraintCases(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC x509.TestCreateCertificateRequest has: 
// func testCreateCertificateRequest(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{2332229 0xc000a95260}))  {
// 	 := x509.TestCreateCertificateRequest(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC x509.TestCreateSelfSignedCertificate has: 
// func testCreateSelfSignedCertificate(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{2299651 0xc0011b9600}))  {
// 	 := x509.TestCreateSelfSignedCertificate(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC x509.TestCriticalFlagInCSRRequestedExtensions has: 
// func testCriticalFlagInCSRRequestedExtensions(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{2338227 0xc000c589e0}))  {
// 	 := x509.TestCriticalFlagInCSRRequestedExtensions(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC x509.TestCriticalNameConstraintWithUnknownType has: 
// func testCriticalNameConstraintWithUnknownType(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{2360040 0xc0008222e0}))  {
// 	 := x509.TestCriticalNameConstraintWithUnknownType(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC x509.TestDecrypt has: 
// func testDecrypt(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{1983939 0xc001066b40}))  {
// 	 := x509.TestDecrypt(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC x509.TestECDSA has: 
// func testECDSA(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{2312982 0xc000690f40}))  {
// 	 := x509.TestECDSA(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC x509.TestEmptyNameConstraints has: 
// func testEmptyNameConstraints(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{2355742 0xc000caf7e0}))  {
// 	 := x509.TestEmptyNameConstraints(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC x509.TestEmptySubject has: 
// func testEmptySubject(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{2364665 0xc000823340}))  {
// 	 := x509.TestEmptySubject(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC x509.TestEncrypt has: 
// func testEncrypt(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{1984567 0xc001067820}))  {
// 	 := x509.TestEncrypt(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC x509.TestEnvVars has: 
// func testEnvVars(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{2178821 0xc0001a6220}))  {
// 	 := x509.TestEnvVars(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC x509.TestGoVerify has: 
// func testGoVerify(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{2200238 0xc000de63a0}))  {
// 	 := x509.TestGoVerify(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC x509.TestISOOIDInCertificate has: 
// func testISOOIDInCertificate(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{2349991 0xc000cae0a0}))  {
// 	 := x509.TestISOOIDInCertificate(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC x509.TestImports has: 
// func testImports(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{2326270 0xc000a94dc0}))  {
// 	 := x509.TestImports(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC x509.TestIncompleteBlock has: 
// func testIncompleteBlock(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{1992118 0xc00106f220}))  {
// 	 := x509.TestIncompleteBlock(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC x509.TestInsecureAlgorithmErrorString has: 
// func testInsecureAlgorithmErrorString(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{2343222 0xc0001907a0}))  {
// 	 := x509.TestInsecureAlgorithmErrorString(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC x509.TestMD5 has: 
// func testMD5(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{2347341 0xc0001911a0}))  {
// 	 := x509.TestMD5(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC x509.TestMarshalRSAPrivateKey has: 
// func testMarshalRSAPrivateKey(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{2285969 0xc000fcc6e0}))  {
// 	 := x509.TestMarshalRSAPrivateKey(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC x509.TestMarshalRSAPublicKey has: 
// func testMarshalRSAPublicKey(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{2288575 0xc000fd9c40}))  {
// 	 := x509.TestMarshalRSAPublicKey(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC x509.TestMatchHostnames has: 
// func testMatchHostnames(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{2293452 0xc0010ba860}))  {
// 	 := x509.TestMatchHostnames(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC x509.TestMatchIP has: 
// func testMatchIP(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{2293723 0xc0010d17e0}))  {
// 	 := x509.TestMatchIP(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC x509.TestMaxPathLen has: 
// func testMaxPathLen(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{2340699 0xc0001a8020}))  {
// 	 := x509.TestMaxPathLen(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC x509.TestMismatchedSignatureAlgorithm has: 
// func testMismatchedSignatureAlgorithm(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{2295358 0xc00115a7c0}))  {
// 	 := x509.TestMismatchedSignatureAlgorithm(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC x509.TestMultipleRDN has: 
// func testMultipleRDN(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{2352465 0xc000cae660}))  {
// 	 := x509.TestMultipleRDN(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC x509.TestMultipleURLsInCRLDP has: 
// func testMultipleURLsInCRLDP(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{2367601 0xc000823e60}))  {
// 	 := x509.TestMultipleURLsInCRLDP(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC x509.TestNameConstraints has: 
// func testNameConstraints(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{2263127 0xc000e005a0}))  {
// 	 := x509.TestNameConstraints(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC x509.TestNoAuthorityKeyIdInSelfSignedCert has: 
// func testNoAuthorityKeyIdInSelfSignedCert(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{2341810 0xc0001a9000}))  {
// 	 := x509.TestNoAuthorityKeyIdInSelfSignedCert(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC x509.TestPKCS8 has: 
// func testPKCS8(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{1996469 0xc00106ff80}))  {
// 	 := x509.TestPKCS8(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC x509.TestPKIXNameString has: 
// func testPKIXNameString(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{2356102 0xc000cafe00}))  {
// 	 := x509.TestPKIXNameString(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC x509.TestParseCertificateRequest has: 
// func testParseCertificateRequest(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{2337321 0xc000c53be0}))  {
// 	 := x509.TestParseCertificateRequest(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC x509.TestParseCertificateWithDSASignatureAlgorithm has: 
// func testParseCertificateWithDSASignatureAlgorithm(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{2316976 0xc0007bebe0}))  {
// 	 := x509.TestParseCertificateWithDSASignatureAlgorithm(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC x509.TestParseCertificateWithDsaPublicKey has: 
// func testParseCertificateWithDsaPublicKey(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{2315326 0xc000691ce0}))  {
// 	 := x509.TestParseCertificateWithDsaPublicKey(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC x509.TestParseDERCRL has: 
// func testParseDERCRL(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{2324652 0xc0008fbac0}))  {
// 	 := x509.TestParseDERCRL(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC x509.TestParseECPrivateKey has: 
// func testParseECPrivateKey(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{1983041 0xc001066020}))  {
// 	 := x509.TestParseECPrivateKey(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC x509.TestParsePEMCRL has: 
// func testParsePEMCRL(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{2325734 0xc000a94660}))  {
// 	 := x509.TestParsePEMCRL(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC x509.TestParsePKCS1PrivateKey has: 
// func testParsePKCS1PrivateKey(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{2281394 0xc000f89f20}))  {
// 	 := x509.TestParsePKCS1PrivateKey(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC x509.TestParsePKIXPublicKey has: 
// func testParsePKIXPublicKey(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{2282255 0xc000f9cd60}))  {
// 	 := x509.TestParsePKIXPublicKey(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC x509.TestRDNSequenceString has: 
// func testRDNSequenceString(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{2357784 0xc000879340}))  {
// 	 := x509.TestRDNSequenceString(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC x509.TestRFC2821Parsing has: 
// func testRFC2821Parsing(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{2055403 0xc001112d60}))  {
// 	 := x509.TestRFC2821Parsing(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC x509.TestRSAMissingNULLParameters has: 
// func testRSAMissingNULLParameters(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{2348842 0xc000191ae0}))  {
// 	 := x509.TestRSAMissingNULLParameters(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC x509.TestRSAPSSSelfSigned has: 
// func testRSAPSSSelfSigned(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{2321514 0xc0007bf7c0}))  {
// 	 := x509.TestRSAPSSSelfSigned(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC x509.TestSystemCertPool has: 
// func testSystemCertPool(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{2353006 0xc000caef00}))  {
// 	 := x509.TestSystemCertPool(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC x509.TestSystemVerify has: 
// func testSystemVerify(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{2200301 0xc000de6500}))  {
// 	 := x509.TestSystemVerify(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC x509.TestUnknownAuthorityError has: 
// func testUnknownAuthorityError(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{2261826 0xc000de7b60}))  {
// 	 := x509.TestUnknownAuthorityError(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC x509.TestValidHostname has: 
// func testValidHostname(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{2270711 0xc000e212a0}))  {
// 	 := x509.TestValidHostname(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC x509.TestVerifyCertificateWithDSASignature has: 
// func testVerifyCertificateWithDSASignature(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{2317312 0xc0007bf0c0}))  {
// 	 := x509.TestVerifyCertificateWithDSASignature(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC x509.TestVerifyEmptyCertificate has: 
// func testVerifyEmptyCertificate(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{2342978 0xc000190480}))  {
// 	 := x509.TestVerifyEmptyCertificate(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC x509_test.ExampleCertificate_Verify has: 
// func exampleCertificate_Verify()  {
// 	 := x509_test.ExampleCertificate_Verify()
// 	...ABEND: TODO...
// }
// 
GO FUNC x509_test.ExampleParsePKIXPublicKey has: 
// func exampleParsePKIXPublicKey()  {
// 	 := x509_test.ExampleParsePKIXPublicKey()
// 	...ABEND: TODO...
// }
// 
GO FUNC xml.BenchmarkMarshal has: 
// func benchmarkMarshal(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{3920817 0xc001f9d640}))  {
// 	 := xml.BenchmarkMarshal(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC xml.BenchmarkUnmarshal has: 
// func benchmarkUnmarshal(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{3920964 0xc001f9d960}))  {
// 	 := xml.BenchmarkUnmarshal(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC xml.Escape has: 
// func escape(w ABEND881(unrecognized Expr type *ast.SelectorExpr at: &{io Writer}), s ABEND881(unrecognized Expr type *ast.ArrayType at: &{4067259 <nil> byte}))  {
// 	 := xml.Escape(w, s)
// 	...ABEND: TODO...
// }
// 
GO FUNC xml.TestAllScalars has: 
// func testAllScalars(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{3981329 0xc002073480}))  {
// 	 := xml.TestAllScalars(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC xml.TestCopyTokenCharData has: 
// func testCopyTokenCharData(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{3983170 0xc00207b780}))  {
// 	 := xml.TestCopyTokenCharData(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC xml.TestCopyTokenStartElement has: 
// func testCopyTokenStartElement(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{3983497 0xc00207bcc0}))  {
// 	 := xml.TestCopyTokenStartElement(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC xml.TestDecodeEncode has: 
// func testDecodeEncode(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{3932957 0xc001fbf6c0}))  {
// 	 := xml.TestDecodeEncode(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC xml.TestDirectivesWithComments has: 
// func testDirectivesWithComments(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{3988050 0xc002099ce0}))  {
// 	 := xml.TestDirectivesWithComments(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC xml.TestDisallowedCharacters has: 
// func testDisallowedCharacters(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{3985921 0xc002098060}))  {
// 	 := xml.TestDisallowedCharacters(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC xml.TestEncodeToken has: 
// func testEncodeToken(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{3931338 0xc001fb9ae0}))  {
// 	 := xml.TestEncodeToken(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC xml.TestEntityInsideCDATA has: 
// func testEntityInsideCDATA(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{3984914 0xc0020836e0}))  {
// 	 := xml.TestEntityInsideCDATA(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC xml.TestEscapeTextIOErrors has: 
// func testEscapeTextIOErrors(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{3988587 0xc00209e5a0}))  {
// 	 := xml.TestEscapeTextIOErrors(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC xml.TestEscapeTextInvalidChar has: 
// func testEscapeTextInvalidChar(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{3988805 0xc00209e940}))  {
// 	 := xml.TestEscapeTextInvalidChar(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC xml.TestInvalidInnerXMLType has: 
// func testInvalidInnerXMLType(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{4013210 0xc0020e6600}))  {
// 	 := xml.TestInvalidInnerXMLType(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC xml.TestInvalidXMLName has: 
// func testInvalidXMLName(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{3936037 0xc001fcdfe0}))  {
// 	 := xml.TestInvalidXMLName(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC xml.TestIsInCharacterRange has: 
// func testIsInCharacterRange(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{3986350 0xc002098860}))  {
// 	 := xml.TestIsInCharacterRange(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC xml.TestIsValidDirective has: 
// func testIsValidDirective(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{3933660 0xc001fcc2e0}))  {
// 	 := xml.TestIsValidDirective(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC xml.TestIssue11405 has: 
// func testIssue11405(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{3989381 0xc00209f3a0}))  {
// 	 := xml.TestIssue11405(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC xml.TestIssue12417 has: 
// func testIssue12417(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{3989769 0xc00209fa40}))  {
// 	 := xml.TestIssue12417(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC xml.TestIssue16158 has: 
// func testIssue16158(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{3935633 0xc001fcdb20}))  {
// 	 := xml.TestIssue16158(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC xml.TestIssue569 has: 
// func testIssue569(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{3981581 0xc0020739a0}))  {
// 	 := xml.TestIssue569(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC xml.TestIssue5880 has: 
// func testIssue5880(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{3989146 0xc00209eec0}))  {
// 	 := xml.TestIssue5880(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC xml.TestMalformedComment has: 
// func testMalformedComment(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{4012697 0xc0020dffc0}))  {
// 	 := xml.TestMalformedComment(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC xml.TestMarshal has: 
// func testMarshal(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{3914622 0xc001f8ce60}))  {
// 	 := xml.TestMarshal(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC xml.TestMarshalErrors has: 
// func testMarshalErrors(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{3916893 0xc001f94de0}))  {
// 	 := xml.TestMarshalErrors(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC xml.TestMarshalFlush has: 
// func testMarshalFlush(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{3920332 0xc001f9cde0}))  {
// 	 := xml.TestMarshalFlush(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC xml.TestMarshalIndent has: 
// func testMarshalIndent(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{3918745 0xc001f96e60}))  {
// 	 := xml.TestMarshalIndent(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC xml.TestMarshalNS has: 
// func testMarshalNS(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{4006187 0xc0020cf4c0}))  {
// 	 := xml.TestMarshalNS(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC xml.TestMarshalNSAttr has: 
// func testMarshalNSAttr(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{4009782 0xc0020d3700}))  {
// 	 := xml.TestMarshalNSAttr(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC xml.TestMarshalWriteErrors has: 
// func testMarshalWriteErrors(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{3919537 0xc001f9c000}))  {
// 	 := xml.TestMarshalWriteErrors(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC xml.TestMarshalWriteIOErrors has: 
// func testMarshalWriteIOErrors(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{3920087 0xc001f9c9e0}))  {
// 	 := xml.TestMarshalWriteIOErrors(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC xml.TestNestedDirectives has: 
// func testNestedDirectives(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{3979147 0xc00205f620}))  {
// 	 := xml.TestNestedDirectives(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC xml.TestNewTokenDecoderIdempotent has: 
// func testNewTokenDecoderIdempotent(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{3990897 0xc0020a8ce0}))  {
// 	 := xml.TestNewTokenDecoderIdempotent(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC xml.TestNonStrictRawToken has: 
// func testNonStrictRawToken(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{3975208 0xc002053fe0}))  {
// 	 := xml.TestNonStrictRawToken(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC xml.TestProcInstEncodeToken has: 
// func testProcInstEncodeToken(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{3932315 0xc001fbeee0}))  {
// 	 := xml.TestProcInstEncodeToken(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC xml.TestProcInstEncoding has: 
// func testProcInstEncoding(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{3986970 0xc002099240}))  {
// 	 := xml.TestProcInstEncoding(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC xml.TestRace9796 has: 
// func testRace9796(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{3933427 0xc001fbfdc0}))  {
// 	 := xml.TestRace9796(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC xml.TestRawToken has: 
// func testRawToken(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{3973921 0xc002052be0}))  {
// 	 := xml.TestRawToken(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC xml.TestRawTokenAltEncoding has: 
// func testRawTokenAltEncoding(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{3975704 0xc0020589e0}))  {
// 	 := xml.TestRawTokenAltEncoding(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC xml.TestRawTokenAltEncodingNoConverter has: 
// func testRawTokenAltEncodingNoConverter(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{3976107 0xc0020590c0}))  {
// 	 := xml.TestRawTokenAltEncodingNoConverter(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC xml.TestSimpleUseOfEncodeToken has: 
// func testSimpleUseOfEncodeToken(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{3934520 0xc001fcca60}))  {
// 	 := xml.TestSimpleUseOfEncodeToken(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC xml.TestStructPointerMarshal has: 
// func testStructPointerMarshal(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{3921171 0xc001f9dd80}))  {
// 	 := xml.TestStructPointerMarshal(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC xml.TestSyntax has: 
// func testSyntax(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{3979831 0xc002072320}))  {
// 	 := xml.TestSyntax(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC xml.TestSyntaxErrorLineNum has: 
// func testSyntaxErrorLineNum(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{3984000 0xc0020825e0}))  {
// 	 := xml.TestSyntaxErrorLineNum(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC xml.TestToken has: 
// func testToken(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{3979488 0xc00205fc60}))  {
// 	 := xml.TestToken(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC xml.TestTokenUnmarshaler has: 
// func testTokenUnmarshaler(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{3992065 0xc0020a9ee0}))  {
// 	 := xml.TestTokenUnmarshaler(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC xml.TestTrailingRawToken has: 
// func testTrailingRawToken(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{3984375 0xc002082c60}))  {
// 	 := xml.TestTrailingRawToken(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC xml.TestTrailingToken has: 
// func testTrailingToken(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{3984647 0xc0020831a0}))  {
// 	 := xml.TestTrailingToken(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC xml.TestUnmarshal has: 
// func testUnmarshal(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{3917547 0xc001f95900}))  {
// 	 := xml.TestUnmarshal(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC xml.TestUnmarshalAttr has: 
// func testUnmarshalAttr(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{4003397 0xc0020c4f20}))  {
// 	 := xml.TestUnmarshalAttr(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC xml.TestUnmarshalBadPaths has: 
// func testUnmarshalBadPaths(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{4002701 0xc0020c43a0}))  {
// 	 := xml.TestUnmarshalBadPaths(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC xml.TestUnmarshalEmptyValues has: 
// func testUnmarshalEmptyValues(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{4014537 0xc0020e7540}))  {
// 	 := xml.TestUnmarshalEmptyValues(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC xml.TestUnmarshalFeed has: 
// func testUnmarshalFeed(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{3992561 0xc0020ae420}))  {
// 	 := xml.TestUnmarshalFeed(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC xml.TestUnmarshalIntoInterface has: 
// func testUnmarshalIntoInterface(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{4012085 0xc0020df660}))  {
// 	 := xml.TestUnmarshalIntoInterface(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC xml.TestUnmarshalNS has: 
// func testUnmarshalNS(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{4005745 0xc0020ceb40}))  {
// 	 := xml.TestUnmarshalNS(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC xml.TestUnmarshalNSAttr has: 
// func testUnmarshalNSAttr(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{4009328 0xc0020d2d80}))  {
// 	 := xml.TestUnmarshalNSAttr(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC xml.TestUnmarshalPaths has: 
// func testUnmarshalPaths(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{4001372 0xc0020bcfa0}))  {
// 	 := xml.TestUnmarshalPaths(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC xml.TestUnmarshalWhitespaceAttrs has: 
// func testUnmarshalWhitespaceAttrs(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{4020448 0xc0020f5e60}))  {
// 	 := xml.TestUnmarshalWhitespaceAttrs(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC xml.TestUnmarshalWhitespaceValues has: 
// func testUnmarshalWhitespaceValues(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{4018492 0xc0020f4ae0}))  {
// 	 := xml.TestUnmarshalWhitespaceValues(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC xml.TestUnmarshalWithoutNameType has: 
// func testUnmarshalWithoutNameType(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{4003169 0xc0020c4a60}))  {
// 	 := xml.TestUnmarshalWithoutNameType(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC xml.TestUnmarshaler has: 
// func testUnmarshaler(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{4011447 0xc0020ded20}))  {
// 	 := xml.TestUnmarshaler(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC xml.TestUnquotedAttrs has: 
// func testUnquotedAttrs(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{3981788 0xc002073d40}))  {
// 	 := xml.TestUnquotedAttrs(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC xml.TestValuelessAttrs has: 
// func testValuelessAttrs(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{3982378 0xc00207a8a0}))  {
// 	 := xml.TestValuelessAttrs(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC xml.TestWrapDecoder has: 
// func testWrapDecoder(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{3991088 0xc0020a8fc0}))  {
// 	 := xml.TestWrapDecoder(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC xml_test.ExampleEncoder has: 
// func exampleEncoder()  {
// 	 := xml_test.ExampleEncoder()
// 	...ABEND: TODO...
// }
// 
GO FUNC xml_test.ExampleMarshalIndent has: 
// func exampleMarshalIndent()  {
// 	 := xml_test.ExampleMarshalIndent()
// 	...ABEND: TODO...
// }
// 
GO FUNC xml_test.ExampleUnmarshal has: 
// func exampleUnmarshal()  {
// 	 := xml_test.ExampleUnmarshal()
// 	...ABEND: TODO...
// }
// 
GO FUNC zip.BenchmarkCompressedZipGarbage has: 
// func benchmarkCompressedZipGarbage(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{227204 0xc0004401c0}))  {
// 	 := zip.BenchmarkCompressedZipGarbage(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC zip.BenchmarkZip64Test has: 
// func benchmarkZip64Test(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{306010 0xc0004488a0}))  {
// 	 := zip.BenchmarkZip64Test(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC zip.BenchmarkZip64TestSizes has: 
// func benchmarkZip64TestSizes(b ABEND881(unrecognized Expr type *ast.StarExpr at: &{306111 0xc000448b20}))  {
// 	 := zip.BenchmarkZip64TestSizes(b)
// 	...ABEND: TODO...
// }
// 
GO FUNC zip.RegisterCompressor has: 
// func registerCompressor(method Object, comp Object)  {
// 	 := zip.RegisterCompressor(method, comp)
// 	...ABEND: TODO...
// }
// 
GO FUNC zip.RegisterDecompressor has: 
// func registerDecompressor(method Object, dcomp Object)  {
// 	 := zip.RegisterDecompressor(method, dcomp)
// 	...ABEND: TODO...
// }
// 
GO FUNC zip.TestFileHeaderRoundTrip has: 
// func testFileHeaderRoundTrip(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{291055 0xc0002934c0}))  {
// 	 := zip.TestFileHeaderRoundTrip(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC zip.TestFileHeaderRoundTrip64 has: 
// func testFileHeaderRoundTrip64(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{291320 0xc0002938a0}))  {
// 	 := zip.TestFileHeaderRoundTrip64(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC zip.TestHeaderIgnoredSize has: 
// func testHeaderIgnoredSize(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{305204 0xc0003efb00}))  {
// 	 := zip.TestHeaderIgnoredSize(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC zip.TestHeaderInvalidTagAndSize has: 
// func testHeaderInvalidTagAndSize(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{303938 0xc0003ee560}))  {
// 	 := zip.TestHeaderInvalidTagAndSize(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC zip.TestHeaderTooLongErr has: 
// func testHeaderTooLongErr(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{304524 0xc0003eee20}))  {
// 	 := zip.TestHeaderTooLongErr(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC zip.TestHeaderTooShort has: 
// func testHeaderTooShort(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{304289 0xc0003eeb00}))  {
// 	 := zip.TestHeaderTooShort(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC zip.TestInvalidFiles has: 
// func testInvalidFiles(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{260619 0xc000440d60}))  {
// 	 := zip.TestInvalidFiles(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC zip.TestIssue10956 has: 
// func testIssue10956(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{274278 0xc000154080}))  {
// 	 := zip.TestIssue10956(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC zip.TestIssue10957 has: 
// func testIssue10957(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{273096 0xc00011d2c0}))  {
// 	 := zip.TestIssue10957(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC zip.TestIssue11146 has: 
// func testIssue11146(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{274794 0xc000154660}))  {
// 	 := zip.TestIssue11146(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC zip.TestIssue12449 has: 
// func testIssue12449(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{275470 0xc000154f40}))  {
// 	 := zip.TestIssue12449(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC zip.TestIssue8186 has: 
// func testIssue8186(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{271088 0xc00011cc80}))  {
// 	 := zip.TestIssue8186(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC zip.TestModTime has: 
// func testModTime(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{289791 0xc000271d80}))  {
// 	 := zip.TestModTime(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC zip.TestOver65kFiles has: 
// func testOver65kFiles(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{288879 0xc000270a00}))  {
// 	 := zip.TestOver65kFiles(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC zip.TestRLEBuffer has: 
// func testRLEBuffer(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{293429 0xc0002cc320}))  {
// 	 := zip.TestRLEBuffer(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC zip.TestReader has: 
// func testReader(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{257071 0xc000320ae0}))  {
// 	 := zip.TestReader(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC zip.TestSuffixSaver has: 
// func testSuffixSaver(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{306361 0xc000449140}))  {
// 	 := zip.TestSuffixSaver(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC zip.TestWriter has: 
// func testWriter(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{219911 0xc000411440}))  {
// 	 := zip.TestWriter(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC zip.TestWriterComment has: 
// func testWriterComment(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{220589 0xc000428220}))  {
// 	 := zip.TestWriterComment(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC zip.TestWriterDir has: 
// func testWriterDir(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{224989 0xc0004393e0}))  {
// 	 := zip.TestWriterDir(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC zip.TestWriterDirAttributes has: 
// func testWriterDirAttributes(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{225366 0xc000439ac0}))  {
// 	 := zip.TestWriterDirAttributes(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC zip.TestWriterFlush has: 
// func testWriterFlush(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{224619 0xc000438c00}))  {
// 	 := zip.TestWriterFlush(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC zip.TestWriterOffset has: 
// func testWriterOffset(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{223894 0xc000433b80}))  {
// 	 := zip.TestWriterOffset(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC zip.TestWriterTime has: 
// func testWriterTime(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{223244 0xc000432e60}))  {
// 	 := zip.TestWriterTime(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC zip.TestWriterUTF8 has: 
// func testWriterUTF8(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{221647 0xc000429620}))  {
// 	 := zip.TestWriterUTF8(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC zip.TestZeroLengthHeader has: 
// func testZeroLengthHeader(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{305617 0xc000448340}))  {
// 	 := zip.TestZeroLengthHeader(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC zip.TestZip64 has: 
// func testZip64(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{294310 0xc0002cd520}))  {
// 	 := zip.TestZip64(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC zip.TestZip64DirectoryOffset has: 
// func testZip64DirectoryOffset(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{295145 0xc0002cdee0}))  {
// 	 := zip.TestZip64DirectoryOffset(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC zip.TestZip64EdgeCase has: 
// func testZip64EdgeCase(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{294539 0xc0002cd920}))  {
// 	 := zip.TestZip64EdgeCase(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC zip.TestZip64LargeDirectory has: 
// func testZip64LargeDirectory(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{299559 0xc0003592e0}))  {
// 	 := zip.TestZip64LargeDirectory(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC zip.TestZip64ManyRecords has: 
// func testZip64ManyRecords(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{296296 0xc000323360}))  {
// 	 := zip.TestZip64ManyRecords(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC zip_test.ExampleReader has: 
// func exampleReader()  {
// 	 := zip_test.ExampleReader()
// 	...ABEND: TODO...
// }
// 
GO FUNC zip_test.ExampleWriter has: 
// func exampleWriter()  {
// 	 := zip_test.ExampleWriter()
// 	...ABEND: TODO...
// }
// 
GO FUNC zip_test.ExampleWriter_RegisterCompressor has: 
// func exampleWriter_RegisterCompressor()  {
// 	 := zip_test.ExampleWriter_RegisterCompressor()
// 	...ABEND: TODO...
// }
// 
GO FUNC zlib.TestDecompressor has: 
// func testDecompressor(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{842420 0xc000734340}))  {
// 	 := zlib.TestDecompressor(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC zlib.TestWriter has: 
// func testWriter(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{832524 0xc000652e80}))  {
// 	 := zlib.TestWriter(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC zlib.TestWriterBig has: 
// func testWriterBig(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{832885 0xc0006535a0}))  {
// 	 := zlib.TestWriterBig(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC zlib.TestWriterDict has: 
// func testWriterDict(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{833358 0xc000653da0}))  {
// 	 := zlib.TestWriterDict(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC zlib.TestWriterDictIsUsed has: 
// func testWriterDictIsUsed(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{834522 0xc000604ee0}))  {
// 	 := zlib.TestWriterDictIsUsed(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC zlib.TestWriterReset has: 
// func testWriterReset(t ABEND881(unrecognized Expr type *ast.StarExpr at: &{833898 0xc000604600}))  {
// 	 := zlib.TestWriterReset(t)
// 	...ABEND: TODO...
// }
// 
GO FUNC zlib_test.ExampleNewReader has: 
// func exampleNewReader()  {
// 	 := zlib_test.ExampleNewReader()
// 	...ABEND: TODO...
// }
// 
GO FUNC zlib_test.ExampleNewWriter has: 
// func exampleNewWriter()  {
// 	 := zlib_test.ExampleNewWriter()
// 	...ABEND: TODO...
// }
// 
Totals: types=1633 functions=7286 receivers=6936
