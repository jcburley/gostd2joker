;;;; Auto-generated by gostd2joker at (omitted for testing), do not edit!!

(ns
  ^{:go-imports ["net/rpc"]
    :doc "Provides a low-level interface to the rpc package."}
  go.rpc)

;; (defn Accept
;;   "Accept accepts connections on the listener and serves requests\nto DefaultServer for each incoming connection.\nAccept blocks; the caller typically invokes it in a go statement.\n"
;;   {:added "1.0"
;;    :go "accept(lis)"}
;;   [^ABEND881(unrecognized Expr type *ast.SelectorExpr at: tests/big/src/net/rpc/server.go:692:17) lis])

(defn Dial
  "Dial connects to an RPC server at the specified network address.\nGo return type: (*Client, error)\nJoker return type: [{} Error]"
  {:added "1.0"
   :go "dial(network, address)"}
  [^String network, ^String address])

(defn DialHTTP
  "DialHTTP connects to an HTTP RPC server at the specified network address\nlistening on the default HTTP RPC path.\nGo return type: (*Client, error)\nJoker return type: [{} Error]"
  {:added "1.0"
   :go "dialHTTP(network, address)"}
  [^String network, ^String address])

(defn DialHTTPPath
  "DialHTTPPath connects to an HTTP RPC server\nat the specified network address and path.\nGo return type: (*Client, error)\nJoker return type: [{} Error]"
  {:added "1.0"
   :go "dialHTTPPath(network, address, path)"}
  [^String network, ^String address, ^String path])

;; (defn HandleHTTP
;;   "HandleHTTP registers an HTTP handler for RPC messages to DefaultServer\non DefaultRPCPath and a debugging handler on DefaultDebugPath.\nIt is still necessary to invoke http.Serve(), typically in a go statement.\n"
;;   {:added "1.0"
;;    :go "handleHTTP()"}
;;   [])

;; (defn NewClient
;;   "NewClient returns a new Client to handle requests to the\nset of services at the other end of the connection.\nIt adds a buffer to the write side of the connection so\nthe header and payload are sent as a unit.\n\nThe read and write halves of the connection are serialized independently,\nso no interlocking is required. However each half may be accessed\nconcurrently so the implementation of conn should protect against\nconcurrent reads or concurrent writes.\nGo return type: *Client\nJoker return type: {}"
;;   {:added "1.0"
;;    :go "newClient(conn)"}
;;   [^ABEND881(unrecognized Expr type *ast.SelectorExpr at: tests/big/src/net/rpc/client.go:193:21) conn])

;; (defn NewClientWithCodec
;;   "NewClientWithCodec is like NewClient but uses the specified\ncodec to encode requests and decode responses.\nGo return type: *Client\nJoker return type: {}"
;;   {:added "1.0"
;;    :go "newClientWithCodec(codec)"}
;;   [codec])

;; (defn NewServer
;;   "NewServer returns a new Server.\nGo return type: *Server\nJoker return type: {}"
;;   {:added "1.0"
;;    :go "newServer()"}
;;   [])

;; (defn ^Error Register
;;   "Register publishes the receiver's methods in the DefaultServer.\nGo return type: error\nJoker return type: Error"
;;   {:added "1.0"
;;    :go "rpc.Register(rcvr)"}
;;   [^ABEND881(unrecognized Expr type *ast.InterfaceType at: tests/big/src/net/rpc/server.go:642:20) rcvr])

;; (defn ^Error RegisterName
;;   "RegisterName is like Register but uses the provided name for the type\ninstead of the receiver's concrete type.\nGo return type: error\nJoker return type: Error"
;;   {:added "1.0"
;;    :go "rpc.RegisterName(name, rcvr)"}
;;   [^String name, ^ABEND881(unrecognized Expr type *ast.InterfaceType at: tests/big/src/net/rpc/server.go:646:37) rcvr])

;; (defn ServeCodec
;;   "ServeCodec is like ServeConn but uses the specified codec to\ndecode requests and encode responses.\n"
;;   {:added "1.0"
;;    :go "serveCodec(codec)"}
;;   [codec])

;; (defn ServeConn
;;   "ServeConn runs the DefaultServer on a single connection.\nServeConn blocks, serving the connection until the client hangs up.\nThe caller typically invokes ServeConn in a go statement.\nServeConn uses the gob wire format (see package gob) on the\nconnection. To use an alternate codec, use ServeCodec.\nSee NewClient's comment for information about concurrent access.\n"
;;   {:added "1.0"
;;    :go "serveConn(conn)"}
;;   [^ABEND881(unrecognized Expr type *ast.SelectorExpr at: tests/big/src/net/rpc/server.go:673:21) conn])

(defn ^Error ServeRequest
  "ServeRequest is like ServeCodec but synchronously serves a single request.\nIt does not close the codec upon completion.\nGo return type: error\nJoker return type: Error"
  {:added "1.0"
   :go "rpc.ServeRequest(codec)"}
  [codec])
