// Auto-generated by gostd2joker at (omitted for testing), do not edit!!

package mail

import (
	"net/mail"
	. "github.com/candid82/joker/core"
)

func parseAddress(address string) Object {
	res1, res2 := mail.ParseAddress(address)
	res := EmptyVector
	map1 := EmptyArrayMap()
	map1.Add(MakeKeyword("Name"), MakeString((*res1).Name))
	map1.Add(MakeKeyword("Address"), MakeString((*res1).Address))
	res = res.Conjoin(map1)
	res = res.Conjoin(func () Object { if (res2) == nil { return NIL } else { return MakeString(res2.Error()) } }())
	return res
}

func parseAddressList(list string) Object {
	res1, res2 := mail.ParseAddressList(list)
	res := EmptyVector
	vec1 := EmptyVector
	for _, elem1 := range res1 {
		map2 := EmptyArrayMap()
		map2.Add(MakeKeyword("Name"), MakeString((*elem1).Name))
		map2.Add(MakeKeyword("Address"), MakeString((*elem1).Address))
		vec1 = vec1.Conjoin(map2)
	}
	res = res.Conjoin(vec1)
	res = res.Conjoin(func () Object { if (res2) == nil { return NIL } else { return MakeString(res2.Error()) } }())
	return res
}

// func parseDate(date string) Object {
// 	res1, res2 := mail.ParseDate(date)
// 	res := EmptyVector
// 	res = res.Conjoin(res1)
// 	res = res.Conjoin(func () Object { if (res2) == nil { return NIL } else { return MakeString(res2.Error()) } }())
// 	return res
// }

// func readMessage(r ABEND882(unrecognized Expr type *ast.SelectorExpr at: tests/big/src/net/mail/message.go:52:20)) Object {
// 	msg, err := mail.ReadMessage(r)
// 	res := EmptyVector
// 	map1 := EmptyArrayMap()
// 	map1.Add(MakeKeyword("Header"), (*msg).Header)
// 	map1.Add(MakeKeyword("Body"), (*msg).Body)
// 	res = res.Conjoin(map1)
// 	res = res.Conjoin(func () Object { if (err) == nil { return NIL } else { return MakeString(err.Error()) } }())
// 	return res
// }
