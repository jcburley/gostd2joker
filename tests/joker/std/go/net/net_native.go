// Auto-generated by gostd2joker at (omitted for testing), do not edit!!

package net

import (
	_net "net"
	. "github.com/candid82/joker/core"
)

func cIDRMask(ones int, bits int) Object {
	_res := _net.CIDRMask(ones, bits)
	_vec1 := EmptyVector
	for _, _elem1 := range _res {
		_vec1 = _vec1.Conjoin(MakeInt(int(_elem1)))
	}
	return _vec1
}

// func dial(network string, address string) Object {
// 	_res1, _res2 := _net.Dial(network, address)
// 	_res := EmptyVector
// 	_res = _res.Conjoin(_res1)
// 	_res = _res.Conjoin(func () Object { if (_res2) == nil { return NIL } else { return MakeError(_res2) } }())
// 	return _res
// }

// func dialIP(network string, laddr ABEND882(unrecognized Expr type *ast.StarExpr at: tests/big/src/net/iprawsock.go:211:42), raddr ABEND882(unrecognized Expr type *ast.StarExpr at: tests/big/src/net/iprawsock.go:211:42)) Object {
// 	_, _res2 := _net.DialIP(network, laddr, raddr)
// 	_res := EmptyVector
// 	_res = _res.Conjoin(NIL)
// 	_res = _res.Conjoin(func () Object { if (_res2) == nil { return NIL } else { return MakeError(_res2) } }())
// 	return _res
// }

// func dialTCP(network string, laddr ABEND882(unrecognized Expr type *ast.StarExpr at: tests/big/src/net/tcpsock.go:206:43), raddr ABEND882(unrecognized Expr type *ast.StarExpr at: tests/big/src/net/tcpsock.go:206:43)) Object {
// 	_, _res2 := _net.DialTCP(network, laddr, raddr)
// 	_res := EmptyVector
// 	_res = _res.Conjoin(NIL)
// 	_res = _res.Conjoin(func () Object { if (_res2) == nil { return NIL } else { return MakeError(_res2) } }())
// 	return _res
// }

// func dialTimeout(network string, address string, timeout ABEND882(unrecognized Expr type *ast.SelectorExpr at: tests/big/src/net/dial.go:313:51)) Object {
// 	_res1, _res2 := _net.DialTimeout(network, address, timeout)
// 	_res := EmptyVector
// 	_res = _res.Conjoin(_res1)
// 	_res = _res.Conjoin(func () Object { if (_res2) == nil { return NIL } else { return MakeError(_res2) } }())
// 	return _res
// }

// func dialUDP(network string, laddr ABEND882(unrecognized Expr type *ast.StarExpr at: tests/big/src/net/udpsock.go:205:43), raddr ABEND882(unrecognized Expr type *ast.StarExpr at: tests/big/src/net/udpsock.go:205:43)) Object {
// 	_, _res2 := _net.DialUDP(network, laddr, raddr)
// 	_res := EmptyVector
// 	_res = _res.Conjoin(NIL)
// 	_res = _res.Conjoin(func () Object { if (_res2) == nil { return NIL } else { return MakeError(_res2) } }())
// 	return _res
// }

// func dialUnix(network string, laddr ABEND882(unrecognized Expr type *ast.StarExpr at: tests/big/src/net/unixsock.go:200:44), raddr ABEND882(unrecognized Expr type *ast.StarExpr at: tests/big/src/net/unixsock.go:200:44)) Object {
// 	_, _res2 := _net.DialUnix(network, laddr, raddr)
// 	_res := EmptyVector
// 	_res = _res.Conjoin(NIL)
// 	_res = _res.Conjoin(func () Object { if (_res2) == nil { return NIL } else { return MakeError(_res2) } }())
// 	return _res
// }

// func fileConn(f ABEND882(unrecognized Expr type *ast.StarExpr at: tests/big/src/net/file.go:21:17)) Object {
// 	c, err := _net.FileConn(f)
// 	_res := EmptyVector
// 	_res = _res.Conjoin(c)
// 	_res = _res.Conjoin(func () Object { if (err) == nil { return NIL } else { return MakeError(err) } }())
// 	return _res
// }

// func fileListener(f ABEND882(unrecognized Expr type *ast.StarExpr at: tests/big/src/net/file.go:33:21)) Object {
// 	ln, err := _net.FileListener(f)
// 	_res := EmptyVector
// 	_res = _res.Conjoin(ln)
// 	_res = _res.Conjoin(func () Object { if (err) == nil { return NIL } else { return MakeError(err) } }())
// 	return _res
// }

// func filePacketConn(f ABEND882(unrecognized Expr type *ast.StarExpr at: tests/big/src/net/file.go:45:23)) Object {
// 	c, err := _net.FilePacketConn(f)
// 	_res := EmptyVector
// 	_res = _res.Conjoin(c)
// 	_res = _res.Conjoin(func () Object { if (err) == nil { return NIL } else { return MakeError(err) } }())
// 	return _res
// }

func iPv4(a byte, b byte, c byte, d byte) Object {
	_res := _net.IPv4(a, b, c, d)
	_vec1 := EmptyVector
	for _, _elem1 := range _res {
		_vec1 = _vec1.Conjoin(MakeInt(int(_elem1)))
	}
	return _vec1
}

func iPv4Mask(a byte, b byte, c byte, d byte) Object {
	_res := _net.IPv4Mask(a, b, c, d)
	_vec1 := EmptyVector
	for _, _elem1 := range _res {
		_vec1 = _vec1.Conjoin(MakeInt(int(_elem1)))
	}
	return _vec1
}

// func interfaceAddrs() Object {
// 	_res1, _res2 := _net.InterfaceAddrs()
// 	_res := EmptyVector
// 	_vec1 := EmptyVector
// 	for _, _elem1 := range _res1 {
// 		_vec1 = _vec1.Conjoin(_elem1)
// 	}
// 	_res = _res.Conjoin(_vec1)
// 	_res = _res.Conjoin(func () Object { if (_res2) == nil { return NIL } else { return MakeError(_res2) } }())
// 	return _res
// }

func interfaceByIndex(index int) Object {
	_res1, _res2 := _net.InterfaceByIndex(index)
	_res := EmptyVector
	_map1 := EmptyArrayMap()
	_map1.Add(MakeKeyword("Index"), MakeInt(int((*_res1).Index)))
	_map1.Add(MakeKeyword("MTU"), MakeInt(int((*_res1).MTU)))
	_map1.Add(MakeKeyword("Name"), MakeString((*_res1).Name))
	_vec2 := EmptyVector
	for _, _elem2 := range (*_res1).HardwareAddr {
		_vec2 = _vec2.Conjoin(MakeInt(int(_elem2)))
	}
	_map1.Add(MakeKeyword("HardwareAddr"), _vec2)
	_map1.Add(MakeKeyword("Flags"), MakeInt(int((*_res1).Flags)))
	_res = _res.Conjoin(_map1)
	_res = _res.Conjoin(func () Object { if (_res2) == nil { return NIL } else { return MakeError(_res2) } }())
	return _res
}

func interfaceByName(name string) Object {
	_res1, _res2 := _net.InterfaceByName(name)
	_res := EmptyVector
	_map1 := EmptyArrayMap()
	_map1.Add(MakeKeyword("Index"), MakeInt(int((*_res1).Index)))
	_map1.Add(MakeKeyword("MTU"), MakeInt(int((*_res1).MTU)))
	_map1.Add(MakeKeyword("Name"), MakeString((*_res1).Name))
	_vec2 := EmptyVector
	for _, _elem2 := range (*_res1).HardwareAddr {
		_vec2 = _vec2.Conjoin(MakeInt(int(_elem2)))
	}
	_map1.Add(MakeKeyword("HardwareAddr"), _vec2)
	_map1.Add(MakeKeyword("Flags"), MakeInt(int((*_res1).Flags)))
	_res = _res.Conjoin(_map1)
	_res = _res.Conjoin(func () Object { if (_res2) == nil { return NIL } else { return MakeError(_res2) } }())
	return _res
}

func interfaces() Object {
	_res1, _res2 := _net.Interfaces()
	_res := EmptyVector
	_vec1 := EmptyVector
	for _, _elem1 := range _res1 {
		_map2 := EmptyArrayMap()
		_map2.Add(MakeKeyword("Index"), MakeInt(int(_elem1.Index)))
		_map2.Add(MakeKeyword("MTU"), MakeInt(int(_elem1.MTU)))
		_map2.Add(MakeKeyword("Name"), MakeString(_elem1.Name))
		_vec3 := EmptyVector
		for _, _elem3 := range _elem1.HardwareAddr {
			_vec3 = _vec3.Conjoin(MakeInt(int(_elem3)))
		}
		_map2.Add(MakeKeyword("HardwareAddr"), _vec3)
		_map2.Add(MakeKeyword("Flags"), MakeInt(int(_elem1.Flags)))
		_vec1 = _vec1.Conjoin(_map2)
	}
	_res = _res.Conjoin(_vec1)
	_res = _res.Conjoin(func () Object { if (_res2) == nil { return NIL } else { return MakeError(_res2) } }())
	return _res
}

// func listen(network string, address string) Object {
// 	_res1, _res2 := _net.Listen(network, address)
// 	_res := EmptyVector
// 	_res = _res.Conjoin(_res1)
// 	_res = _res.Conjoin(func () Object { if (_res2) == nil { return NIL } else { return MakeError(_res2) } }())
// 	return _res
// }

// func listenIP(network string, laddr ABEND882(unrecognized Expr type *ast.StarExpr at: tests/big/src/net/iprawsock.go:230:37)) Object {
// 	_, _res2 := _net.ListenIP(network, laddr)
// 	_res := EmptyVector
// 	_res = _res.Conjoin(NIL)
// 	_res = _res.Conjoin(func () Object { if (_res2) == nil { return NIL } else { return MakeError(_res2) } }())
// 	return _res
// }

// func listenMulticastUDP(network string, ifi ABEND882(unrecognized Expr type *ast.StarExpr at: tests/big/src/net/udpsock.go:265:45), gaddr ABEND882(unrecognized Expr type *ast.StarExpr at: tests/big/src/net/udpsock.go:265:63)) Object {
// 	_, _res2 := _net.ListenMulticastUDP(network, ifi, gaddr)
// 	_res := EmptyVector
// 	_res = _res.Conjoin(NIL)
// 	_res = _res.Conjoin(func () Object { if (_res2) == nil { return NIL } else { return MakeError(_res2) } }())
// 	return _res
// }

// func listenPacket(network string, address string) Object {
// 	_res1, _res2 := _net.ListenPacket(network, address)
// 	_res := EmptyVector
// 	_res = _res.Conjoin(_res1)
// 	_res = _res.Conjoin(func () Object { if (_res2) == nil { return NIL } else { return MakeError(_res2) } }())
// 	return _res
// }

// func listenTCP(network string, laddr ABEND882(unrecognized Expr type *ast.StarExpr at: tests/big/src/net/tcpsock.go:323:38)) Object {
// 	_, _res2 := _net.ListenTCP(network, laddr)
// 	_res := EmptyVector
// 	_res = _res.Conjoin(NIL)
// 	_res = _res.Conjoin(func () Object { if (_res2) == nil { return NIL } else { return MakeError(_res2) } }())
// 	return _res
// }

// func listenUDP(network string, laddr ABEND882(unrecognized Expr type *ast.StarExpr at: tests/big/src/net/udpsock.go:231:38)) Object {
// 	_, _res2 := _net.ListenUDP(network, laddr)
// 	_res := EmptyVector
// 	_res = _res.Conjoin(NIL)
// 	_res = _res.Conjoin(func () Object { if (_res2) == nil { return NIL } else { return MakeError(_res2) } }())
// 	return _res
// }

// func listenUnix(network string, laddr ABEND882(unrecognized Expr type *ast.StarExpr at: tests/big/src/net/unixsock.go:314:39)) Object {
// 	_, _res2 := _net.ListenUnix(network, laddr)
// 	_res := EmptyVector
// 	_res = _res.Conjoin(NIL)
// 	_res = _res.Conjoin(func () Object { if (_res2) == nil { return NIL } else { return MakeError(_res2) } }())
// 	return _res
// }

// func listenUnixgram(network string, laddr ABEND882(unrecognized Expr type *ast.StarExpr at: tests/big/src/net/unixsock.go:334:43)) Object {
// 	_, _res2 := _net.ListenUnixgram(network, laddr)
// 	_res := EmptyVector
// 	_res = _res.Conjoin(NIL)
// 	_res = _res.Conjoin(func () Object { if (_res2) == nil { return NIL } else { return MakeError(_res2) } }())
// 	return _res
// }

func lookupAddr(addr string) Object {
	names, err := _net.LookupAddr(addr)
	_res := EmptyVector
	_vec1 := EmptyVector
	for _, _elem1 := range names {
		_vec1 = _vec1.Conjoin(MakeString(_elem1))
	}
	_res = _res.Conjoin(_vec1)
	_res = _res.Conjoin(func () Object { if (err) == nil { return NIL } else { return MakeError(err) } }())
	return _res
}

func lookupCNAME(host string) Object {
	cname, err := _net.LookupCNAME(host)
	_res := EmptyVector
	_res = _res.Conjoin(MakeString(cname))
	_res = _res.Conjoin(func () Object { if (err) == nil { return NIL } else { return MakeError(err) } }())
	return _res
}

func lookupHost(host string) Object {
	addrs, err := _net.LookupHost(host)
	_res := EmptyVector
	_vec1 := EmptyVector
	for _, _elem1 := range addrs {
		_vec1 = _vec1.Conjoin(MakeString(_elem1))
	}
	_res = _res.Conjoin(_vec1)
	_res = _res.Conjoin(func () Object { if (err) == nil { return NIL } else { return MakeError(err) } }())
	return _res
}

func lookupIP(host string) Object {
	_res1, _res2 := _net.LookupIP(host)
	_res := EmptyVector
	_vec1 := EmptyVector
	for _, _elem1 := range _res1 {
		_vec2 := EmptyVector
		for _, _elem2 := range _elem1 {
			_vec2 = _vec2.Conjoin(MakeInt(int(_elem2)))
		}
		_vec1 = _vec1.Conjoin(_vec2)
	}
	_res = _res.Conjoin(_vec1)
	_res = _res.Conjoin(func () Object { if (_res2) == nil { return NIL } else { return MakeError(_res2) } }())
	return _res
}

func lookupMX(name string) Object {
	_res1, _res2 := _net.LookupMX(name)
	_res := EmptyVector
	_vec1 := EmptyVector
	for _, _elem1 := range _res1 {
		_map2 := EmptyArrayMap()
		_map2.Add(MakeKeyword("Host"), MakeString((*_elem1).Host))
		_map2.Add(MakeKeyword("Pref"), MakeInt(int((*_elem1).Pref)))
		_vec1 = _vec1.Conjoin(_map2)
	}
	_res = _res.Conjoin(_vec1)
	_res = _res.Conjoin(func () Object { if (_res2) == nil { return NIL } else { return MakeError(_res2) } }())
	return _res
}

func lookupNS(name string) Object {
	_res1, _res2 := _net.LookupNS(name)
	_res := EmptyVector
	_vec1 := EmptyVector
	for _, _elem1 := range _res1 {
		_map2 := EmptyArrayMap()
		_map2.Add(MakeKeyword("Host"), MakeString((*_elem1).Host))
		_vec1 = _vec1.Conjoin(_map2)
	}
	_res = _res.Conjoin(_vec1)
	_res = _res.Conjoin(func () Object { if (_res2) == nil { return NIL } else { return MakeError(_res2) } }())
	return _res
}

func lookupPort(network string, service string) Object {
	port, err := _net.LookupPort(network, service)
	_res := EmptyVector
	_res = _res.Conjoin(MakeInt(int(port)))
	_res = _res.Conjoin(func () Object { if (err) == nil { return NIL } else { return MakeError(err) } }())
	return _res
}

func lookupSRV(service string, proto string, name string) Object {
	cname, addrs, err := _net.LookupSRV(service, proto, name)
	_res := EmptyVector
	_res = _res.Conjoin(MakeString(cname))
	_vec1 := EmptyVector
	for _, _elem1 := range addrs {
		_map2 := EmptyArrayMap()
		_map2.Add(MakeKeyword("Target"), MakeString((*_elem1).Target))
		_map2.Add(MakeKeyword("Port"), MakeInt(int((*_elem1).Port)))
		_map2.Add(MakeKeyword("Priority"), MakeInt(int((*_elem1).Priority)))
		_map2.Add(MakeKeyword("Weight"), MakeInt(int((*_elem1).Weight)))
		_vec1 = _vec1.Conjoin(_map2)
	}
	_res = _res.Conjoin(_vec1)
	_res = _res.Conjoin(func () Object { if (err) == nil { return NIL } else { return MakeError(err) } }())
	return _res
}

func lookupTXT(name string) Object {
	_res1, _res2 := _net.LookupTXT(name)
	_res := EmptyVector
	_vec1 := EmptyVector
	for _, _elem1 := range _res1 {
		_vec1 = _vec1.Conjoin(MakeString(_elem1))
	}
	_res = _res.Conjoin(_vec1)
	_res = _res.Conjoin(func () Object { if (_res2) == nil { return NIL } else { return MakeError(_res2) } }())
	return _res
}

func parseCIDR(s string) Object {
	_res1, _res2, _res3 := _net.ParseCIDR(s)
	_res := EmptyVector
	_vec1 := EmptyVector
	for _, _elem1 := range _res1 {
		_vec1 = _vec1.Conjoin(MakeInt(int(_elem1)))
	}
	_res = _res.Conjoin(_vec1)
	_map2 := EmptyArrayMap()
	_vec3 := EmptyVector
	for _, _elem3 := range (*_res2).IP {
		_vec3 = _vec3.Conjoin(MakeInt(int(_elem3)))
	}
	_map2.Add(MakeKeyword("IP"), _vec3)
	_vec4 := EmptyVector
	for _, _elem4 := range (*_res2).Mask {
		_vec4 = _vec4.Conjoin(MakeInt(int(_elem4)))
	}
	_map2.Add(MakeKeyword("Mask"), _vec4)
	_res = _res.Conjoin(_map2)
	_res = _res.Conjoin(func () Object { if (_res3) == nil { return NIL } else { return MakeError(_res3) } }())
	return _res
}

func parseIP(s string) Object {
	_res := _net.ParseIP(s)
	_vec1 := EmptyVector
	for _, _elem1 := range _res {
		_vec1 = _vec1.Conjoin(MakeInt(int(_elem1)))
	}
	return _vec1
}

func parseMAC(s string) Object {
	hw, err := _net.ParseMAC(s)
	_res := EmptyVector
	_vec1 := EmptyVector
	for _, _elem1 := range hw {
		_vec1 = _vec1.Conjoin(MakeInt(int(_elem1)))
	}
	_res = _res.Conjoin(_vec1)
	_res = _res.Conjoin(func () Object { if (err) == nil { return NIL } else { return MakeError(err) } }())
	return _res
}

// func pipe() Object {
// 	_res1, _res2 := _net.Pipe()
// 	_res := EmptyVector
// 	_res = _res.Conjoin(_res1)
// 	_res = _res.Conjoin(_res2)
// 	return _res
// }

func resolveIPAddr(network string, address string) Object {
	_res1, _res2 := _net.ResolveIPAddr(network, address)
	_res := EmptyVector
	_map1 := EmptyArrayMap()
	_vec2 := EmptyVector
	for _, _elem2 := range (*_res1).IP {
		_vec2 = _vec2.Conjoin(MakeInt(int(_elem2)))
	}
	_map1.Add(MakeKeyword("IP"), _vec2)
	_map1.Add(MakeKeyword("Zone"), MakeString((*_res1).Zone))
	_res = _res.Conjoin(_map1)
	_res = _res.Conjoin(func () Object { if (_res2) == nil { return NIL } else { return MakeError(_res2) } }())
	return _res
}

func resolveTCPAddr(network string, address string) Object {
	_res1, _res2 := _net.ResolveTCPAddr(network, address)
	_res := EmptyVector
	_map1 := EmptyArrayMap()
	_vec2 := EmptyVector
	for _, _elem2 := range (*_res1).IP {
		_vec2 = _vec2.Conjoin(MakeInt(int(_elem2)))
	}
	_map1.Add(MakeKeyword("IP"), _vec2)
	_map1.Add(MakeKeyword("Port"), MakeInt(int((*_res1).Port)))
	_map1.Add(MakeKeyword("Zone"), MakeString((*_res1).Zone))
	_res = _res.Conjoin(_map1)
	_res = _res.Conjoin(func () Object { if (_res2) == nil { return NIL } else { return MakeError(_res2) } }())
	return _res
}

func resolveUDPAddr(network string, address string) Object {
	_res1, _res2 := _net.ResolveUDPAddr(network, address)
	_res := EmptyVector
	_map1 := EmptyArrayMap()
	_vec2 := EmptyVector
	for _, _elem2 := range (*_res1).IP {
		_vec2 = _vec2.Conjoin(MakeInt(int(_elem2)))
	}
	_map1.Add(MakeKeyword("IP"), _vec2)
	_map1.Add(MakeKeyword("Port"), MakeInt(int((*_res1).Port)))
	_map1.Add(MakeKeyword("Zone"), MakeString((*_res1).Zone))
	_res = _res.Conjoin(_map1)
	_res = _res.Conjoin(func () Object { if (_res2) == nil { return NIL } else { return MakeError(_res2) } }())
	return _res
}

func resolveUnixAddr(network string, address string) Object {
	_res1, _res2 := _net.ResolveUnixAddr(network, address)
	_res := EmptyVector
	_map1 := EmptyArrayMap()
	_map1.Add(MakeKeyword("Name"), MakeString((*_res1).Name))
	_map1.Add(MakeKeyword("Net"), MakeString((*_res1).Net))
	_res = _res.Conjoin(_map1)
	_res = _res.Conjoin(func () Object { if (_res2) == nil { return NIL } else { return MakeError(_res2) } }())
	return _res
}

func splitHostPort(hostport string) Object {
	host, port, err := _net.SplitHostPort(hostport)
	_res := EmptyVector
	_res = _res.Conjoin(MakeString(host))
	_res = _res.Conjoin(MakeString(port))
	_res = _res.Conjoin(func () Object { if (err) == nil { return NIL } else { return MakeError(err) } }())
	return _res
}
