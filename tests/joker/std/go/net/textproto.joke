;;;; Auto-generated by gostd2joker at (omitted for testing), do not edit!!

(ns
  ^{:go-imports ["net/textproto"]
    :doc "Provides a low-level interface to the net/textproto package."}
  go.net.textproto)

(defn ^String CanonicalMIMEHeaderKey
  "CanonicalMIMEHeaderKey returns the canonical format of the\nMIME header key s. The canonicalization converts the first\nletter and any letter following a hyphen to upper case;\nthe rest are converted to lowercase. For example, the\ncanonical key for \"accept-encoding\" is \"Accept-Encoding\".\nMIME header keys are assumed to be ASCII only.\nIf s contains a space or invalid header field bytes, it is\nreturned without modifications.\nGo return type: string\nJoker return type: String"
  {:added "1.0"
   :go "textproto.CanonicalMIMEHeaderKey(s)"}
  [^String s])

(defn Dial
  "Dial connects to the given address on the given network using net.Dial\nand then returns a new Conn for the connection.\nGo return type: (*Conn, error)\nJoker return type: [{} Error]"
  {:added "1.0"
   :go "dial(network, addr)"}
  [^String network, ^String addr])

;; (defn NewConn
;;   "NewConn returns a new Conn using conn for I/O.\nGo return type: *Conn\nJoker return type: {}"
;;   {:added "1.0"
;;    :go "newConn(conn)"}
;;   [^ABEND881(unrecognized Expr type *ast.SelectorExpr at: tests/big/src/net/textproto/textproto.go:66:19) conn])

;; (defn NewReader
;;   "NewReader returns a new Reader reading from r.\n\nTo avoid denial of service attacks, the provided bufio.Reader\nshould be reading from an io.LimitReader or similar Reader to bound\nthe size of responses.\nGo return type: *Reader\nJoker return type: {:R ^ABEND883(unrecognized Expr type *ast.SelectorExpr at: tests/big/src/net/textproto/reader.go:19:7)}"
;;   {:added "1.0"
;;    :go "newReader(r)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: tests/big/src/net/textproto/reader.go:29:18) r])

;; (defn NewWriter
;;   "NewWriter returns a new Writer writing to w.\nGo return type: *Writer\nJoker return type: {:W ^ABEND883(unrecognized Expr type *ast.SelectorExpr at: tests/big/src/net/textproto/writer.go:16:7)}"
;;   {:added "1.0"
;;    :go "newWriter(w)"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: tests/big/src/net/textproto/writer.go:21:18) w])

;; (defn TrimBytes
;;   "TrimBytes returns b without leading and trailing ASCII space.\nGo return type: []int\nJoker return type: (vector-of Int)"
;;   {:added "1.0"
;;    :go "trimBytes(b)"}
;;   [^ABEND881(unrecognized Expr type *ast.ArrayType at: tests/big/src/net/textproto/textproto.go:137:18) b])

(defn ^String TrimString
  "TrimString returns s without leading and trailing ASCII space.\nGo return type: string\nJoker return type: String"
  {:added "1.0"
   :go "textproto.TrimString(s)"}
  [^String s])
