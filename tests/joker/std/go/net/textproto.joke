;;;; Auto-generated by gostd2joker at (omitted for testing), do not edit!!

(ns
  ^{:go-imports ["net/textproto"]
    :doc "Provides a low-level interface to the net/textproto package."
    :empty false}
  go.net.textproto)

(defn ^"String" CanonicalMIMEHeaderKey
  "CanonicalMIMEHeaderKey returns the canonical format of the\nMIME header key s. The canonicalization converts the first\nletter and any letter following a hyphen to upper case;\nthe rest are converted to lowercase. For example, the\ncanonical key for \"accept-encoding\" is \"Accept-Encoding\".\nMIME header keys are assumed to be ASCII only.\nIf s contains a space or invalid header field bytes, it is\nreturned without modifications.\n\nGo return type: string\n\nJoker return type: String"
  {:added "1.0"
   :go "textproto.CanonicalMIMEHeaderKey(_s)"}
  [^String _s])

(defn Dial
  "Dial connects to the given address on the given network using net.Dial\nand then returns a new Conn for the connection.\n\nGo return type: (*Conn, error)\n\nJoker return type: [{} Error]"
  {:added "1.0"
   :go "dial(_network, _addr)"}
  [^String _network, ^String _addr])

;; (defn NewConn
;;   "NewConn returns a new Conn using conn for I/O.\n\nGo return type: *Conn\n\nJoker return type: {}"
;;   {:added "1.0"
;;    :go "ABEND401(StarExpr not supported -- no refs returned just yet: newConn(_conn))"}
;;   [^ABEND881(unrecognized Expr type *ast.SelectorExpr at: tests/big/src/net/textproto/textproto.go:66:19) _conn])

;; (defn NewReader
;;   "NewReader returns a new Reader reading from r.\n\nTo avoid denial of service attacks, the provided bufio.Reader\nshould be reading from an io.LimitReader or similar Reader to bound\nthe size of responses.\n\nGo return type: *Reader\n\nJoker return type: {:R ^ABEND883(unrecognized Expr type *ast.SelectorExpr at: tests/big/src/net/textproto/reader.go:19:7)}"
;;   {:added "1.0"
;;    :go "ABEND401(StarExpr not supported -- no refs returned just yet: newReader(_r))"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: tests/big/src/net/textproto/reader.go:29:18) _r])

;; (defn NewWriter
;;   "NewWriter returns a new Writer writing to w.\n\nGo return type: *Writer\n\nJoker return type: {:W ^ABEND883(unrecognized Expr type *ast.SelectorExpr at: tests/big/src/net/textproto/writer.go:16:7)}"
;;   {:added "1.0"
;;    :go "ABEND401(StarExpr not supported -- no refs returned just yet: newWriter(_w))"}
;;   [^ABEND881(unrecognized Expr type *ast.StarExpr at: tests/big/src/net/textproto/writer.go:21:18) _w])

;; (defn TrimBytes
;;   "TrimBytes returns b without leading and trailing ASCII space.\n\nGo return type: []int\n\nJoker return type: (vector-of Int)"
;;   {:added "1.0"
;;    :go "trimBytes(_b)"}
;;   [^ABEND881(unrecognized Expr type *ast.ArrayType at: tests/big/src/net/textproto/textproto.go:137:18) _b])

(defn ^"String" TrimString
  "TrimString returns s without leading and trailing ASCII space.\n\nGo return type: string\n\nJoker return type: String"
  {:added "1.0"
   :go "textproto.TrimString(_s)"}
  [^String _s])
